
SR15_BMS_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad74  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c8  0800af5c  0800af5c  0001af5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b424  0800b424  00020250  2**0
                  CONTENTS
  4 .ARM          00000008  0800b424  0800b424  0001b424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b42c  0800b42c  00020250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b42c  0800b42c  0001b42c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b430  0800b430  0001b430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000250  20000000  0800b434  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001688  20000250  0800b684  00020250  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200018d8  0800b684  000218d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020250  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020279  2**0
                  CONTENTS, READONLY
 13 .debug_info   000172f7  00000000  00000000  000202bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000048d0  00000000  00000000  000375b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001708  00000000  00000000  0003be88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000116c  00000000  00000000  0003d590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002429e  00000000  00000000  0003e6fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f1e8  00000000  00000000  0006299a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bf1f3  00000000  00000000  00081b82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000066d0  00000000  00000000  00140d78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00147448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000250 	.word	0x20000250
 8000204:	00000000 	.word	0x00000000
 8000208:	0800af44 	.word	0x0800af44

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000254 	.word	0x20000254
 8000224:	0800af44 	.word	0x0800af44

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2f>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b18:	bf24      	itt	cs
 8000b1a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b1e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b22:	d90d      	bls.n	8000b40 <__aeabi_d2f+0x30>
 8000b24:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b28:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b2c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b30:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b34:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b38:	bf08      	it	eq
 8000b3a:	f020 0001 	biceq.w	r0, r0, #1
 8000b3e:	4770      	bx	lr
 8000b40:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b44:	d121      	bne.n	8000b8a <__aeabi_d2f+0x7a>
 8000b46:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b4a:	bfbc      	itt	lt
 8000b4c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	4770      	bxlt	lr
 8000b52:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b56:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b5a:	f1c2 0218 	rsb	r2, r2, #24
 8000b5e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b62:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b66:	fa20 f002 	lsr.w	r0, r0, r2
 8000b6a:	bf18      	it	ne
 8000b6c:	f040 0001 	orrne.w	r0, r0, #1
 8000b70:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b74:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b78:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b7c:	ea40 000c 	orr.w	r0, r0, ip
 8000b80:	fa23 f302 	lsr.w	r3, r3, r2
 8000b84:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b88:	e7cc      	b.n	8000b24 <__aeabi_d2f+0x14>
 8000b8a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b8e:	d107      	bne.n	8000ba0 <__aeabi_d2f+0x90>
 8000b90:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b94:	bf1e      	ittt	ne
 8000b96:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b9a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b9e:	4770      	bxne	lr
 8000ba0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ba4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ba8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__aeabi_frsub>:
 8000bb0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bb4:	e002      	b.n	8000bbc <__addsf3>
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_fsub>:
 8000bb8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bbc <__addsf3>:
 8000bbc:	0042      	lsls	r2, r0, #1
 8000bbe:	bf1f      	itttt	ne
 8000bc0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bc4:	ea92 0f03 	teqne	r2, r3
 8000bc8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bcc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bd0:	d06a      	beq.n	8000ca8 <__addsf3+0xec>
 8000bd2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bd6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bda:	bfc1      	itttt	gt
 8000bdc:	18d2      	addgt	r2, r2, r3
 8000bde:	4041      	eorgt	r1, r0
 8000be0:	4048      	eorgt	r0, r1
 8000be2:	4041      	eorgt	r1, r0
 8000be4:	bfb8      	it	lt
 8000be6:	425b      	neglt	r3, r3
 8000be8:	2b19      	cmp	r3, #25
 8000bea:	bf88      	it	hi
 8000bec:	4770      	bxhi	lr
 8000bee:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bf2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bfa:	bf18      	it	ne
 8000bfc:	4240      	negne	r0, r0
 8000bfe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c02:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c06:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c0a:	bf18      	it	ne
 8000c0c:	4249      	negne	r1, r1
 8000c0e:	ea92 0f03 	teq	r2, r3
 8000c12:	d03f      	beq.n	8000c94 <__addsf3+0xd8>
 8000c14:	f1a2 0201 	sub.w	r2, r2, #1
 8000c18:	fa41 fc03 	asr.w	ip, r1, r3
 8000c1c:	eb10 000c 	adds.w	r0, r0, ip
 8000c20:	f1c3 0320 	rsb	r3, r3, #32
 8000c24:	fa01 f103 	lsl.w	r1, r1, r3
 8000c28:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c2c:	d502      	bpl.n	8000c34 <__addsf3+0x78>
 8000c2e:	4249      	negs	r1, r1
 8000c30:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c34:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c38:	d313      	bcc.n	8000c62 <__addsf3+0xa6>
 8000c3a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c3e:	d306      	bcc.n	8000c4e <__addsf3+0x92>
 8000c40:	0840      	lsrs	r0, r0, #1
 8000c42:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c46:	f102 0201 	add.w	r2, r2, #1
 8000c4a:	2afe      	cmp	r2, #254	; 0xfe
 8000c4c:	d251      	bcs.n	8000cf2 <__addsf3+0x136>
 8000c4e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c52:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c56:	bf08      	it	eq
 8000c58:	f020 0001 	biceq.w	r0, r0, #1
 8000c5c:	ea40 0003 	orr.w	r0, r0, r3
 8000c60:	4770      	bx	lr
 8000c62:	0049      	lsls	r1, r1, #1
 8000c64:	eb40 0000 	adc.w	r0, r0, r0
 8000c68:	3a01      	subs	r2, #1
 8000c6a:	bf28      	it	cs
 8000c6c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c70:	d2ed      	bcs.n	8000c4e <__addsf3+0x92>
 8000c72:	fab0 fc80 	clz	ip, r0
 8000c76:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c7a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c7e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c82:	bfaa      	itet	ge
 8000c84:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c88:	4252      	neglt	r2, r2
 8000c8a:	4318      	orrge	r0, r3
 8000c8c:	bfbc      	itt	lt
 8000c8e:	40d0      	lsrlt	r0, r2
 8000c90:	4318      	orrlt	r0, r3
 8000c92:	4770      	bx	lr
 8000c94:	f092 0f00 	teq	r2, #0
 8000c98:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c9c:	bf06      	itte	eq
 8000c9e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000ca2:	3201      	addeq	r2, #1
 8000ca4:	3b01      	subne	r3, #1
 8000ca6:	e7b5      	b.n	8000c14 <__addsf3+0x58>
 8000ca8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cac:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cb0:	bf18      	it	ne
 8000cb2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cb6:	d021      	beq.n	8000cfc <__addsf3+0x140>
 8000cb8:	ea92 0f03 	teq	r2, r3
 8000cbc:	d004      	beq.n	8000cc8 <__addsf3+0x10c>
 8000cbe:	f092 0f00 	teq	r2, #0
 8000cc2:	bf08      	it	eq
 8000cc4:	4608      	moveq	r0, r1
 8000cc6:	4770      	bx	lr
 8000cc8:	ea90 0f01 	teq	r0, r1
 8000ccc:	bf1c      	itt	ne
 8000cce:	2000      	movne	r0, #0
 8000cd0:	4770      	bxne	lr
 8000cd2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cd6:	d104      	bne.n	8000ce2 <__addsf3+0x126>
 8000cd8:	0040      	lsls	r0, r0, #1
 8000cda:	bf28      	it	cs
 8000cdc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ce0:	4770      	bx	lr
 8000ce2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ce6:	bf3c      	itt	cc
 8000ce8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cec:	4770      	bxcc	lr
 8000cee:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cf2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cf6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cfa:	4770      	bx	lr
 8000cfc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d00:	bf16      	itet	ne
 8000d02:	4608      	movne	r0, r1
 8000d04:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d08:	4601      	movne	r1, r0
 8000d0a:	0242      	lsls	r2, r0, #9
 8000d0c:	bf06      	itte	eq
 8000d0e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d12:	ea90 0f01 	teqeq	r0, r1
 8000d16:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d1a:	4770      	bx	lr

08000d1c <__aeabi_ui2f>:
 8000d1c:	f04f 0300 	mov.w	r3, #0
 8000d20:	e004      	b.n	8000d2c <__aeabi_i2f+0x8>
 8000d22:	bf00      	nop

08000d24 <__aeabi_i2f>:
 8000d24:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d28:	bf48      	it	mi
 8000d2a:	4240      	negmi	r0, r0
 8000d2c:	ea5f 0c00 	movs.w	ip, r0
 8000d30:	bf08      	it	eq
 8000d32:	4770      	bxeq	lr
 8000d34:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d38:	4601      	mov	r1, r0
 8000d3a:	f04f 0000 	mov.w	r0, #0
 8000d3e:	e01c      	b.n	8000d7a <__aeabi_l2f+0x2a>

08000d40 <__aeabi_ul2f>:
 8000d40:	ea50 0201 	orrs.w	r2, r0, r1
 8000d44:	bf08      	it	eq
 8000d46:	4770      	bxeq	lr
 8000d48:	f04f 0300 	mov.w	r3, #0
 8000d4c:	e00a      	b.n	8000d64 <__aeabi_l2f+0x14>
 8000d4e:	bf00      	nop

08000d50 <__aeabi_l2f>:
 8000d50:	ea50 0201 	orrs.w	r2, r0, r1
 8000d54:	bf08      	it	eq
 8000d56:	4770      	bxeq	lr
 8000d58:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d5c:	d502      	bpl.n	8000d64 <__aeabi_l2f+0x14>
 8000d5e:	4240      	negs	r0, r0
 8000d60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d64:	ea5f 0c01 	movs.w	ip, r1
 8000d68:	bf02      	ittt	eq
 8000d6a:	4684      	moveq	ip, r0
 8000d6c:	4601      	moveq	r1, r0
 8000d6e:	2000      	moveq	r0, #0
 8000d70:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d74:	bf08      	it	eq
 8000d76:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d7a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d7e:	fabc f28c 	clz	r2, ip
 8000d82:	3a08      	subs	r2, #8
 8000d84:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d88:	db10      	blt.n	8000dac <__aeabi_l2f+0x5c>
 8000d8a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d8e:	4463      	add	r3, ip
 8000d90:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d94:	f1c2 0220 	rsb	r2, r2, #32
 8000d98:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d9c:	fa20 f202 	lsr.w	r2, r0, r2
 8000da0:	eb43 0002 	adc.w	r0, r3, r2
 8000da4:	bf08      	it	eq
 8000da6:	f020 0001 	biceq.w	r0, r0, #1
 8000daa:	4770      	bx	lr
 8000dac:	f102 0220 	add.w	r2, r2, #32
 8000db0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000db4:	f1c2 0220 	rsb	r2, r2, #32
 8000db8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dbc:	fa21 f202 	lsr.w	r2, r1, r2
 8000dc0:	eb43 0002 	adc.w	r0, r3, r2
 8000dc4:	bf08      	it	eq
 8000dc6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dca:	4770      	bx	lr

08000dcc <__aeabi_fmul>:
 8000dcc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000dd0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dd4:	bf1e      	ittt	ne
 8000dd6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dda:	ea92 0f0c 	teqne	r2, ip
 8000dde:	ea93 0f0c 	teqne	r3, ip
 8000de2:	d06f      	beq.n	8000ec4 <__aeabi_fmul+0xf8>
 8000de4:	441a      	add	r2, r3
 8000de6:	ea80 0c01 	eor.w	ip, r0, r1
 8000dea:	0240      	lsls	r0, r0, #9
 8000dec:	bf18      	it	ne
 8000dee:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000df2:	d01e      	beq.n	8000e32 <__aeabi_fmul+0x66>
 8000df4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000df8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dfc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e00:	fba0 3101 	umull	r3, r1, r0, r1
 8000e04:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e08:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e0c:	bf3e      	ittt	cc
 8000e0e:	0049      	lslcc	r1, r1, #1
 8000e10:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e14:	005b      	lslcc	r3, r3, #1
 8000e16:	ea40 0001 	orr.w	r0, r0, r1
 8000e1a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e1e:	2afd      	cmp	r2, #253	; 0xfd
 8000e20:	d81d      	bhi.n	8000e5e <__aeabi_fmul+0x92>
 8000e22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e26:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e2a:	bf08      	it	eq
 8000e2c:	f020 0001 	biceq.w	r0, r0, #1
 8000e30:	4770      	bx	lr
 8000e32:	f090 0f00 	teq	r0, #0
 8000e36:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e3a:	bf08      	it	eq
 8000e3c:	0249      	lsleq	r1, r1, #9
 8000e3e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e42:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e46:	3a7f      	subs	r2, #127	; 0x7f
 8000e48:	bfc2      	ittt	gt
 8000e4a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e4e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e52:	4770      	bxgt	lr
 8000e54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e58:	f04f 0300 	mov.w	r3, #0
 8000e5c:	3a01      	subs	r2, #1
 8000e5e:	dc5d      	bgt.n	8000f1c <__aeabi_fmul+0x150>
 8000e60:	f112 0f19 	cmn.w	r2, #25
 8000e64:	bfdc      	itt	le
 8000e66:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e6a:	4770      	bxle	lr
 8000e6c:	f1c2 0200 	rsb	r2, r2, #0
 8000e70:	0041      	lsls	r1, r0, #1
 8000e72:	fa21 f102 	lsr.w	r1, r1, r2
 8000e76:	f1c2 0220 	rsb	r2, r2, #32
 8000e7a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e7e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e82:	f140 0000 	adc.w	r0, r0, #0
 8000e86:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e8a:	bf08      	it	eq
 8000e8c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e90:	4770      	bx	lr
 8000e92:	f092 0f00 	teq	r2, #0
 8000e96:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e9a:	bf02      	ittt	eq
 8000e9c:	0040      	lsleq	r0, r0, #1
 8000e9e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ea2:	3a01      	subeq	r2, #1
 8000ea4:	d0f9      	beq.n	8000e9a <__aeabi_fmul+0xce>
 8000ea6:	ea40 000c 	orr.w	r0, r0, ip
 8000eaa:	f093 0f00 	teq	r3, #0
 8000eae:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000eb2:	bf02      	ittt	eq
 8000eb4:	0049      	lsleq	r1, r1, #1
 8000eb6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eba:	3b01      	subeq	r3, #1
 8000ebc:	d0f9      	beq.n	8000eb2 <__aeabi_fmul+0xe6>
 8000ebe:	ea41 010c 	orr.w	r1, r1, ip
 8000ec2:	e78f      	b.n	8000de4 <__aeabi_fmul+0x18>
 8000ec4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ec8:	ea92 0f0c 	teq	r2, ip
 8000ecc:	bf18      	it	ne
 8000ece:	ea93 0f0c 	teqne	r3, ip
 8000ed2:	d00a      	beq.n	8000eea <__aeabi_fmul+0x11e>
 8000ed4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ed8:	bf18      	it	ne
 8000eda:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ede:	d1d8      	bne.n	8000e92 <__aeabi_fmul+0xc6>
 8000ee0:	ea80 0001 	eor.w	r0, r0, r1
 8000ee4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ee8:	4770      	bx	lr
 8000eea:	f090 0f00 	teq	r0, #0
 8000eee:	bf17      	itett	ne
 8000ef0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ef4:	4608      	moveq	r0, r1
 8000ef6:	f091 0f00 	teqne	r1, #0
 8000efa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000efe:	d014      	beq.n	8000f2a <__aeabi_fmul+0x15e>
 8000f00:	ea92 0f0c 	teq	r2, ip
 8000f04:	d101      	bne.n	8000f0a <__aeabi_fmul+0x13e>
 8000f06:	0242      	lsls	r2, r0, #9
 8000f08:	d10f      	bne.n	8000f2a <__aeabi_fmul+0x15e>
 8000f0a:	ea93 0f0c 	teq	r3, ip
 8000f0e:	d103      	bne.n	8000f18 <__aeabi_fmul+0x14c>
 8000f10:	024b      	lsls	r3, r1, #9
 8000f12:	bf18      	it	ne
 8000f14:	4608      	movne	r0, r1
 8000f16:	d108      	bne.n	8000f2a <__aeabi_fmul+0x15e>
 8000f18:	ea80 0001 	eor.w	r0, r0, r1
 8000f1c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f28:	4770      	bx	lr
 8000f2a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f2e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f32:	4770      	bx	lr

08000f34 <__aeabi_fdiv>:
 8000f34:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f38:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f3c:	bf1e      	ittt	ne
 8000f3e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f42:	ea92 0f0c 	teqne	r2, ip
 8000f46:	ea93 0f0c 	teqne	r3, ip
 8000f4a:	d069      	beq.n	8001020 <__aeabi_fdiv+0xec>
 8000f4c:	eba2 0203 	sub.w	r2, r2, r3
 8000f50:	ea80 0c01 	eor.w	ip, r0, r1
 8000f54:	0249      	lsls	r1, r1, #9
 8000f56:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f5a:	d037      	beq.n	8000fcc <__aeabi_fdiv+0x98>
 8000f5c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f60:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f64:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f68:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f6c:	428b      	cmp	r3, r1
 8000f6e:	bf38      	it	cc
 8000f70:	005b      	lslcc	r3, r3, #1
 8000f72:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f76:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f7a:	428b      	cmp	r3, r1
 8000f7c:	bf24      	itt	cs
 8000f7e:	1a5b      	subcs	r3, r3, r1
 8000f80:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f84:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f88:	bf24      	itt	cs
 8000f8a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f8e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f92:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f96:	bf24      	itt	cs
 8000f98:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f9c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000fa0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000fa4:	bf24      	itt	cs
 8000fa6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000faa:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000fae:	011b      	lsls	r3, r3, #4
 8000fb0:	bf18      	it	ne
 8000fb2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fb6:	d1e0      	bne.n	8000f7a <__aeabi_fdiv+0x46>
 8000fb8:	2afd      	cmp	r2, #253	; 0xfd
 8000fba:	f63f af50 	bhi.w	8000e5e <__aeabi_fmul+0x92>
 8000fbe:	428b      	cmp	r3, r1
 8000fc0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fc4:	bf08      	it	eq
 8000fc6:	f020 0001 	biceq.w	r0, r0, #1
 8000fca:	4770      	bx	lr
 8000fcc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fd0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fd4:	327f      	adds	r2, #127	; 0x7f
 8000fd6:	bfc2      	ittt	gt
 8000fd8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fdc:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fe0:	4770      	bxgt	lr
 8000fe2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fe6:	f04f 0300 	mov.w	r3, #0
 8000fea:	3a01      	subs	r2, #1
 8000fec:	e737      	b.n	8000e5e <__aeabi_fmul+0x92>
 8000fee:	f092 0f00 	teq	r2, #0
 8000ff2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ff6:	bf02      	ittt	eq
 8000ff8:	0040      	lsleq	r0, r0, #1
 8000ffa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ffe:	3a01      	subeq	r2, #1
 8001000:	d0f9      	beq.n	8000ff6 <__aeabi_fdiv+0xc2>
 8001002:	ea40 000c 	orr.w	r0, r0, ip
 8001006:	f093 0f00 	teq	r3, #0
 800100a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800100e:	bf02      	ittt	eq
 8001010:	0049      	lsleq	r1, r1, #1
 8001012:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8001016:	3b01      	subeq	r3, #1
 8001018:	d0f9      	beq.n	800100e <__aeabi_fdiv+0xda>
 800101a:	ea41 010c 	orr.w	r1, r1, ip
 800101e:	e795      	b.n	8000f4c <__aeabi_fdiv+0x18>
 8001020:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001024:	ea92 0f0c 	teq	r2, ip
 8001028:	d108      	bne.n	800103c <__aeabi_fdiv+0x108>
 800102a:	0242      	lsls	r2, r0, #9
 800102c:	f47f af7d 	bne.w	8000f2a <__aeabi_fmul+0x15e>
 8001030:	ea93 0f0c 	teq	r3, ip
 8001034:	f47f af70 	bne.w	8000f18 <__aeabi_fmul+0x14c>
 8001038:	4608      	mov	r0, r1
 800103a:	e776      	b.n	8000f2a <__aeabi_fmul+0x15e>
 800103c:	ea93 0f0c 	teq	r3, ip
 8001040:	d104      	bne.n	800104c <__aeabi_fdiv+0x118>
 8001042:	024b      	lsls	r3, r1, #9
 8001044:	f43f af4c 	beq.w	8000ee0 <__aeabi_fmul+0x114>
 8001048:	4608      	mov	r0, r1
 800104a:	e76e      	b.n	8000f2a <__aeabi_fmul+0x15e>
 800104c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001050:	bf18      	it	ne
 8001052:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001056:	d1ca      	bne.n	8000fee <__aeabi_fdiv+0xba>
 8001058:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800105c:	f47f af5c 	bne.w	8000f18 <__aeabi_fmul+0x14c>
 8001060:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001064:	f47f af3c 	bne.w	8000ee0 <__aeabi_fmul+0x114>
 8001068:	e75f      	b.n	8000f2a <__aeabi_fmul+0x15e>
 800106a:	bf00      	nop

0800106c <__aeabi_f2uiz>:
 800106c:	0042      	lsls	r2, r0, #1
 800106e:	d20e      	bcs.n	800108e <__aeabi_f2uiz+0x22>
 8001070:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001074:	d30b      	bcc.n	800108e <__aeabi_f2uiz+0x22>
 8001076:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800107a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800107e:	d409      	bmi.n	8001094 <__aeabi_f2uiz+0x28>
 8001080:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001084:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001088:	fa23 f002 	lsr.w	r0, r3, r2
 800108c:	4770      	bx	lr
 800108e:	f04f 0000 	mov.w	r0, #0
 8001092:	4770      	bx	lr
 8001094:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001098:	d101      	bne.n	800109e <__aeabi_f2uiz+0x32>
 800109a:	0242      	lsls	r2, r0, #9
 800109c:	d102      	bne.n	80010a4 <__aeabi_f2uiz+0x38>
 800109e:	f04f 30ff 	mov.w	r0, #4294967295
 80010a2:	4770      	bx	lr
 80010a4:	f04f 0000 	mov.w	r0, #0
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop

080010ac <__aeabi_uldivmod>:
 80010ac:	b953      	cbnz	r3, 80010c4 <__aeabi_uldivmod+0x18>
 80010ae:	b94a      	cbnz	r2, 80010c4 <__aeabi_uldivmod+0x18>
 80010b0:	2900      	cmp	r1, #0
 80010b2:	bf08      	it	eq
 80010b4:	2800      	cmpeq	r0, #0
 80010b6:	bf1c      	itt	ne
 80010b8:	f04f 31ff 	movne.w	r1, #4294967295
 80010bc:	f04f 30ff 	movne.w	r0, #4294967295
 80010c0:	f000 b972 	b.w	80013a8 <__aeabi_idiv0>
 80010c4:	f1ad 0c08 	sub.w	ip, sp, #8
 80010c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80010cc:	f000 f806 	bl	80010dc <__udivmoddi4>
 80010d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010d8:	b004      	add	sp, #16
 80010da:	4770      	bx	lr

080010dc <__udivmoddi4>:
 80010dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010e0:	9e08      	ldr	r6, [sp, #32]
 80010e2:	460d      	mov	r5, r1
 80010e4:	4604      	mov	r4, r0
 80010e6:	468e      	mov	lr, r1
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d14c      	bne.n	8001186 <__udivmoddi4+0xaa>
 80010ec:	428a      	cmp	r2, r1
 80010ee:	4694      	mov	ip, r2
 80010f0:	d967      	bls.n	80011c2 <__udivmoddi4+0xe6>
 80010f2:	fab2 f382 	clz	r3, r2
 80010f6:	b153      	cbz	r3, 800110e <__udivmoddi4+0x32>
 80010f8:	fa02 fc03 	lsl.w	ip, r2, r3
 80010fc:	f1c3 0220 	rsb	r2, r3, #32
 8001100:	fa01 fe03 	lsl.w	lr, r1, r3
 8001104:	fa20 f202 	lsr.w	r2, r0, r2
 8001108:	ea42 0e0e 	orr.w	lr, r2, lr
 800110c:	409c      	lsls	r4, r3
 800110e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001112:	fbbe f1f7 	udiv	r1, lr, r7
 8001116:	fa1f f58c 	uxth.w	r5, ip
 800111a:	fb07 ee11 	mls	lr, r7, r1, lr
 800111e:	fb01 f005 	mul.w	r0, r1, r5
 8001122:	0c22      	lsrs	r2, r4, #16
 8001124:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8001128:	4290      	cmp	r0, r2
 800112a:	d90a      	bls.n	8001142 <__udivmoddi4+0x66>
 800112c:	eb1c 0202 	adds.w	r2, ip, r2
 8001130:	f101 3eff 	add.w	lr, r1, #4294967295
 8001134:	f080 8119 	bcs.w	800136a <__udivmoddi4+0x28e>
 8001138:	4290      	cmp	r0, r2
 800113a:	f240 8116 	bls.w	800136a <__udivmoddi4+0x28e>
 800113e:	3902      	subs	r1, #2
 8001140:	4462      	add	r2, ip
 8001142:	1a12      	subs	r2, r2, r0
 8001144:	fbb2 f0f7 	udiv	r0, r2, r7
 8001148:	fb07 2210 	mls	r2, r7, r0, r2
 800114c:	fb00 f505 	mul.w	r5, r0, r5
 8001150:	b2a4      	uxth	r4, r4
 8001152:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001156:	42a5      	cmp	r5, r4
 8001158:	d90a      	bls.n	8001170 <__udivmoddi4+0x94>
 800115a:	eb1c 0404 	adds.w	r4, ip, r4
 800115e:	f100 32ff 	add.w	r2, r0, #4294967295
 8001162:	f080 8104 	bcs.w	800136e <__udivmoddi4+0x292>
 8001166:	42a5      	cmp	r5, r4
 8001168:	f240 8101 	bls.w	800136e <__udivmoddi4+0x292>
 800116c:	4464      	add	r4, ip
 800116e:	3802      	subs	r0, #2
 8001170:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8001174:	2100      	movs	r1, #0
 8001176:	1b64      	subs	r4, r4, r5
 8001178:	b11e      	cbz	r6, 8001182 <__udivmoddi4+0xa6>
 800117a:	40dc      	lsrs	r4, r3
 800117c:	2300      	movs	r3, #0
 800117e:	e9c6 4300 	strd	r4, r3, [r6]
 8001182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001186:	428b      	cmp	r3, r1
 8001188:	d908      	bls.n	800119c <__udivmoddi4+0xc0>
 800118a:	2e00      	cmp	r6, #0
 800118c:	f000 80ea 	beq.w	8001364 <__udivmoddi4+0x288>
 8001190:	2100      	movs	r1, #0
 8001192:	e9c6 0500 	strd	r0, r5, [r6]
 8001196:	4608      	mov	r0, r1
 8001198:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800119c:	fab3 f183 	clz	r1, r3
 80011a0:	2900      	cmp	r1, #0
 80011a2:	d148      	bne.n	8001236 <__udivmoddi4+0x15a>
 80011a4:	42ab      	cmp	r3, r5
 80011a6:	d302      	bcc.n	80011ae <__udivmoddi4+0xd2>
 80011a8:	4282      	cmp	r2, r0
 80011aa:	f200 80f8 	bhi.w	800139e <__udivmoddi4+0x2c2>
 80011ae:	1a84      	subs	r4, r0, r2
 80011b0:	eb65 0203 	sbc.w	r2, r5, r3
 80011b4:	2001      	movs	r0, #1
 80011b6:	4696      	mov	lr, r2
 80011b8:	2e00      	cmp	r6, #0
 80011ba:	d0e2      	beq.n	8001182 <__udivmoddi4+0xa6>
 80011bc:	e9c6 4e00 	strd	r4, lr, [r6]
 80011c0:	e7df      	b.n	8001182 <__udivmoddi4+0xa6>
 80011c2:	b902      	cbnz	r2, 80011c6 <__udivmoddi4+0xea>
 80011c4:	deff      	udf	#255	; 0xff
 80011c6:	fab2 f382 	clz	r3, r2
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	f040 808e 	bne.w	80012ec <__udivmoddi4+0x210>
 80011d0:	1a88      	subs	r0, r1, r2
 80011d2:	2101      	movs	r1, #1
 80011d4:	0c17      	lsrs	r7, r2, #16
 80011d6:	fa1f fe82 	uxth.w	lr, r2
 80011da:	fbb0 f5f7 	udiv	r5, r0, r7
 80011de:	fb07 0015 	mls	r0, r7, r5, r0
 80011e2:	0c22      	lsrs	r2, r4, #16
 80011e4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80011e8:	fb0e f005 	mul.w	r0, lr, r5
 80011ec:	4290      	cmp	r0, r2
 80011ee:	d908      	bls.n	8001202 <__udivmoddi4+0x126>
 80011f0:	eb1c 0202 	adds.w	r2, ip, r2
 80011f4:	f105 38ff 	add.w	r8, r5, #4294967295
 80011f8:	d202      	bcs.n	8001200 <__udivmoddi4+0x124>
 80011fa:	4290      	cmp	r0, r2
 80011fc:	f200 80cc 	bhi.w	8001398 <__udivmoddi4+0x2bc>
 8001200:	4645      	mov	r5, r8
 8001202:	1a12      	subs	r2, r2, r0
 8001204:	fbb2 f0f7 	udiv	r0, r2, r7
 8001208:	fb07 2210 	mls	r2, r7, r0, r2
 800120c:	fb0e fe00 	mul.w	lr, lr, r0
 8001210:	b2a4      	uxth	r4, r4
 8001212:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001216:	45a6      	cmp	lr, r4
 8001218:	d908      	bls.n	800122c <__udivmoddi4+0x150>
 800121a:	eb1c 0404 	adds.w	r4, ip, r4
 800121e:	f100 32ff 	add.w	r2, r0, #4294967295
 8001222:	d202      	bcs.n	800122a <__udivmoddi4+0x14e>
 8001224:	45a6      	cmp	lr, r4
 8001226:	f200 80b4 	bhi.w	8001392 <__udivmoddi4+0x2b6>
 800122a:	4610      	mov	r0, r2
 800122c:	eba4 040e 	sub.w	r4, r4, lr
 8001230:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8001234:	e7a0      	b.n	8001178 <__udivmoddi4+0x9c>
 8001236:	f1c1 0720 	rsb	r7, r1, #32
 800123a:	408b      	lsls	r3, r1
 800123c:	fa22 fc07 	lsr.w	ip, r2, r7
 8001240:	ea4c 0c03 	orr.w	ip, ip, r3
 8001244:	fa25 fa07 	lsr.w	sl, r5, r7
 8001248:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800124c:	fbba f8f9 	udiv	r8, sl, r9
 8001250:	408d      	lsls	r5, r1
 8001252:	fa20 f307 	lsr.w	r3, r0, r7
 8001256:	fb09 aa18 	mls	sl, r9, r8, sl
 800125a:	fa1f fe8c 	uxth.w	lr, ip
 800125e:	432b      	orrs	r3, r5
 8001260:	fa00 f501 	lsl.w	r5, r0, r1
 8001264:	fb08 f00e 	mul.w	r0, r8, lr
 8001268:	0c1c      	lsrs	r4, r3, #16
 800126a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800126e:	42a0      	cmp	r0, r4
 8001270:	fa02 f201 	lsl.w	r2, r2, r1
 8001274:	d90b      	bls.n	800128e <__udivmoddi4+0x1b2>
 8001276:	eb1c 0404 	adds.w	r4, ip, r4
 800127a:	f108 3aff 	add.w	sl, r8, #4294967295
 800127e:	f080 8086 	bcs.w	800138e <__udivmoddi4+0x2b2>
 8001282:	42a0      	cmp	r0, r4
 8001284:	f240 8083 	bls.w	800138e <__udivmoddi4+0x2b2>
 8001288:	f1a8 0802 	sub.w	r8, r8, #2
 800128c:	4464      	add	r4, ip
 800128e:	1a24      	subs	r4, r4, r0
 8001290:	b298      	uxth	r0, r3
 8001292:	fbb4 f3f9 	udiv	r3, r4, r9
 8001296:	fb09 4413 	mls	r4, r9, r3, r4
 800129a:	fb03 fe0e 	mul.w	lr, r3, lr
 800129e:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 80012a2:	45a6      	cmp	lr, r4
 80012a4:	d908      	bls.n	80012b8 <__udivmoddi4+0x1dc>
 80012a6:	eb1c 0404 	adds.w	r4, ip, r4
 80012aa:	f103 30ff 	add.w	r0, r3, #4294967295
 80012ae:	d26a      	bcs.n	8001386 <__udivmoddi4+0x2aa>
 80012b0:	45a6      	cmp	lr, r4
 80012b2:	d968      	bls.n	8001386 <__udivmoddi4+0x2aa>
 80012b4:	3b02      	subs	r3, #2
 80012b6:	4464      	add	r4, ip
 80012b8:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80012bc:	fba0 9302 	umull	r9, r3, r0, r2
 80012c0:	eba4 040e 	sub.w	r4, r4, lr
 80012c4:	429c      	cmp	r4, r3
 80012c6:	46c8      	mov	r8, r9
 80012c8:	469e      	mov	lr, r3
 80012ca:	d354      	bcc.n	8001376 <__udivmoddi4+0x29a>
 80012cc:	d051      	beq.n	8001372 <__udivmoddi4+0x296>
 80012ce:	2e00      	cmp	r6, #0
 80012d0:	d067      	beq.n	80013a2 <__udivmoddi4+0x2c6>
 80012d2:	ebb5 0308 	subs.w	r3, r5, r8
 80012d6:	eb64 040e 	sbc.w	r4, r4, lr
 80012da:	40cb      	lsrs	r3, r1
 80012dc:	fa04 f707 	lsl.w	r7, r4, r7
 80012e0:	431f      	orrs	r7, r3
 80012e2:	40cc      	lsrs	r4, r1
 80012e4:	e9c6 7400 	strd	r7, r4, [r6]
 80012e8:	2100      	movs	r1, #0
 80012ea:	e74a      	b.n	8001182 <__udivmoddi4+0xa6>
 80012ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80012f0:	f1c3 0020 	rsb	r0, r3, #32
 80012f4:	40c1      	lsrs	r1, r0
 80012f6:	409d      	lsls	r5, r3
 80012f8:	fa24 f000 	lsr.w	r0, r4, r0
 80012fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001300:	4328      	orrs	r0, r5
 8001302:	fbb1 f5f7 	udiv	r5, r1, r7
 8001306:	fb07 1115 	mls	r1, r7, r5, r1
 800130a:	fa1f fe8c 	uxth.w	lr, ip
 800130e:	0c02      	lsrs	r2, r0, #16
 8001310:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001314:	fb05 f10e 	mul.w	r1, r5, lr
 8001318:	4291      	cmp	r1, r2
 800131a:	fa04 f403 	lsl.w	r4, r4, r3
 800131e:	d908      	bls.n	8001332 <__udivmoddi4+0x256>
 8001320:	eb1c 0202 	adds.w	r2, ip, r2
 8001324:	f105 38ff 	add.w	r8, r5, #4294967295
 8001328:	d22f      	bcs.n	800138a <__udivmoddi4+0x2ae>
 800132a:	4291      	cmp	r1, r2
 800132c:	d92d      	bls.n	800138a <__udivmoddi4+0x2ae>
 800132e:	3d02      	subs	r5, #2
 8001330:	4462      	add	r2, ip
 8001332:	1a52      	subs	r2, r2, r1
 8001334:	fbb2 f1f7 	udiv	r1, r2, r7
 8001338:	fb07 2211 	mls	r2, r7, r1, r2
 800133c:	b280      	uxth	r0, r0
 800133e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8001342:	fb01 f20e 	mul.w	r2, r1, lr
 8001346:	4282      	cmp	r2, r0
 8001348:	d908      	bls.n	800135c <__udivmoddi4+0x280>
 800134a:	eb1c 0000 	adds.w	r0, ip, r0
 800134e:	f101 38ff 	add.w	r8, r1, #4294967295
 8001352:	d216      	bcs.n	8001382 <__udivmoddi4+0x2a6>
 8001354:	4282      	cmp	r2, r0
 8001356:	d914      	bls.n	8001382 <__udivmoddi4+0x2a6>
 8001358:	3902      	subs	r1, #2
 800135a:	4460      	add	r0, ip
 800135c:	1a80      	subs	r0, r0, r2
 800135e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8001362:	e73a      	b.n	80011da <__udivmoddi4+0xfe>
 8001364:	4631      	mov	r1, r6
 8001366:	4630      	mov	r0, r6
 8001368:	e70b      	b.n	8001182 <__udivmoddi4+0xa6>
 800136a:	4671      	mov	r1, lr
 800136c:	e6e9      	b.n	8001142 <__udivmoddi4+0x66>
 800136e:	4610      	mov	r0, r2
 8001370:	e6fe      	b.n	8001170 <__udivmoddi4+0x94>
 8001372:	454d      	cmp	r5, r9
 8001374:	d2ab      	bcs.n	80012ce <__udivmoddi4+0x1f2>
 8001376:	ebb9 0802 	subs.w	r8, r9, r2
 800137a:	eb63 0e0c 	sbc.w	lr, r3, ip
 800137e:	3801      	subs	r0, #1
 8001380:	e7a5      	b.n	80012ce <__udivmoddi4+0x1f2>
 8001382:	4641      	mov	r1, r8
 8001384:	e7ea      	b.n	800135c <__udivmoddi4+0x280>
 8001386:	4603      	mov	r3, r0
 8001388:	e796      	b.n	80012b8 <__udivmoddi4+0x1dc>
 800138a:	4645      	mov	r5, r8
 800138c:	e7d1      	b.n	8001332 <__udivmoddi4+0x256>
 800138e:	46d0      	mov	r8, sl
 8001390:	e77d      	b.n	800128e <__udivmoddi4+0x1b2>
 8001392:	4464      	add	r4, ip
 8001394:	3802      	subs	r0, #2
 8001396:	e749      	b.n	800122c <__udivmoddi4+0x150>
 8001398:	3d02      	subs	r5, #2
 800139a:	4462      	add	r2, ip
 800139c:	e731      	b.n	8001202 <__udivmoddi4+0x126>
 800139e:	4608      	mov	r0, r1
 80013a0:	e70a      	b.n	80011b8 <__udivmoddi4+0xdc>
 80013a2:	4631      	mov	r1, r6
 80013a4:	e6ed      	b.n	8001182 <__udivmoddi4+0xa6>
 80013a6:	bf00      	nop

080013a8 <__aeabi_idiv0>:
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop

080013ac <wakeup_idle>:
#define LTC_SERIES_GROUPS_PER_RDCV 3 // Number of cell voltage groups per 8 byte register
#define LTC_SERIES_GROUPS_PER_RDAUX 3
#define NUM_AUX_SERIES_GROUPS 6 // Number of series groups

/* Wake LTC up from IDLE state into READY state */
void wakeup_idle(void) {
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
	uint8_t hex_ff = 0xFF;
 80013b2:	23ff      	movs	r3, #255	; 0xff
 80013b4:	70fb      	strb	r3, [r7, #3]
	for (int i = 0; i < NUM_DEVICES; i++) {
 80013b6:	2300      	movs	r3, #0
 80013b8:	607b      	str	r3, [r7, #4]
 80013ba:	e00c      	b.n	80013d6 <wakeup_idle+0x2a>
		LTC_nCS_Low();							   // Pull CS low
 80013bc:	f001 fd9e 	bl	8002efc <LTC_nCS_Low>
		HAL_SPI_Transmit(&hspi1, &hex_ff, 1, 100); // Send byte 0xFF to wake LTC up
 80013c0:	1cf9      	adds	r1, r7, #3
 80013c2:	2364      	movs	r3, #100	; 0x64
 80013c4:	2201      	movs	r2, #1
 80013c6:	4808      	ldr	r0, [pc, #32]	; (80013e8 <wakeup_idle+0x3c>)
 80013c8:	f004 fe16 	bl	8005ff8 <HAL_SPI_Transmit>
		LTC_nCS_High();							   // Pull CS high
 80013cc:	f001 fd8a 	bl	8002ee4 <LTC_nCS_High>
	for (int i = 0; i < NUM_DEVICES; i++) {
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	3301      	adds	r3, #1
 80013d4:	607b      	str	r3, [r7, #4]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	ddef      	ble.n	80013bc <wakeup_idle+0x10>
	}
}
 80013dc:	bf00      	nop
 80013de:	bf00      	nop
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	200002fc 	.word	0x200002fc

080013ec <wakeup_sleep>:

// wake up sleep
void wakeup_sleep(void) {
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0

	for (int i = 0; i < NUM_DEVICES; i++) {
 80013f2:	2300      	movs	r3, #0
 80013f4:	607b      	str	r3, [r7, #4]
 80013f6:	e00e      	b.n	8001416 <wakeup_sleep+0x2a>
		LTC_nCS_Low();
 80013f8:	f001 fd80 	bl	8002efc <LTC_nCS_Low>
		HAL_Delay(300);
 80013fc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001400:	f001 ff04 	bl	800320c <HAL_Delay>
		LTC_nCS_High();
 8001404:	f001 fd6e 	bl	8002ee4 <LTC_nCS_High>
		HAL_Delay(300);
 8001408:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800140c:	f001 fefe 	bl	800320c <HAL_Delay>
	for (int i = 0; i < NUM_DEVICES; i++) {
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	3301      	adds	r3, #1
 8001414:	607b      	str	r3, [r7, #4]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2b00      	cmp	r3, #0
 800141a:	dded      	ble.n	80013f8 <wakeup_sleep+0xc>
	}
}
 800141c:	bf00      	nop
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
	...

08001428 <read_cell_volt>:

/* Read and store raw cell voltages at uint8_t 2d pointer */
LTC_SPI_StatusTypeDef read_cell_volt(uint16_t *read_voltages) {
 8001428:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800142c:	b089      	sub	sp, #36	; 0x24
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]
 8001432:	466b      	mov	r3, sp
 8001434:	461e      	mov	r6, r3
	LTC_SPI_StatusTypeDef ret = LTC_SPI_OK;
 8001436:	2300      	movs	r3, #0
 8001438:	77fb      	strb	r3, [r7, #31]
	LTC_SPI_StatusTypeDef hal_ret;
	const uint8_t ARR_SIZE_REG = NUM_DEVICES * REG_LEN;
 800143a:	2308      	movs	r3, #8
 800143c:	773b      	strb	r3, [r7, #28]
	uint8_t read_voltages_reg[ARR_SIZE_REG]; // Increased in size to handle multiple devices
 800143e:	7f3b      	ldrb	r3, [r7, #28]
 8001440:	3b01      	subs	r3, #1
 8001442:	61bb      	str	r3, [r7, #24]
 8001444:	7f3b      	ldrb	r3, [r7, #28]
 8001446:	2200      	movs	r2, #0
 8001448:	4698      	mov	r8, r3
 800144a:	4691      	mov	r9, r2
 800144c:	f04f 0200 	mov.w	r2, #0
 8001450:	f04f 0300 	mov.w	r3, #0
 8001454:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001458:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800145c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001460:	7f3b      	ldrb	r3, [r7, #28]
 8001462:	2200      	movs	r2, #0
 8001464:	461c      	mov	r4, r3
 8001466:	4615      	mov	r5, r2
 8001468:	f04f 0200 	mov.w	r2, #0
 800146c:	f04f 0300 	mov.w	r3, #0
 8001470:	00eb      	lsls	r3, r5, #3
 8001472:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001476:	00e2      	lsls	r2, r4, #3
 8001478:	7f3b      	ldrb	r3, [r7, #28]
 800147a:	3307      	adds	r3, #7
 800147c:	08db      	lsrs	r3, r3, #3
 800147e:	00db      	lsls	r3, r3, #3
 8001480:	ebad 0d03 	sub.w	sp, sp, r3
 8001484:	466b      	mov	r3, sp
 8001486:	3300      	adds	r3, #0
 8001488:	617b      	str	r3, [r7, #20]

	for (uint8_t i = 0; i < (NUM_CELL_SERIES_GROUP / LTC_SERIES_GROUPS_PER_RDCV);
 800148a:	2300      	movs	r3, #0
 800148c:	77bb      	strb	r3, [r7, #30]
 800148e:	e074      	b.n	800157a <read_cell_volt+0x152>
			i++) {
		uint8_t cmd[4];
		uint16_t cmd_pec;

		cmd[0] = (0xFF & (LTC_CMD_RDCV[i] >> 8)); // RDCV Register
 8001490:	7fbb      	ldrb	r3, [r7, #30]
 8001492:	4a3f      	ldr	r2, [pc, #252]	; (8001590 <read_cell_volt+0x168>)
 8001494:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001498:	0a1b      	lsrs	r3, r3, #8
 800149a:	b29b      	uxth	r3, r3
 800149c:	b2db      	uxtb	r3, r3
 800149e:	723b      	strb	r3, [r7, #8]
		cmd[1] = (0xFF & (LTC_CMD_RDCV[i]));	  // RDCV Register
 80014a0:	7fbb      	ldrb	r3, [r7, #30]
 80014a2:	4a3b      	ldr	r2, [pc, #236]	; (8001590 <read_cell_volt+0x168>)
 80014a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	727b      	strb	r3, [r7, #9]
		cmd_pec = ltc_pec15_calc(2, cmd);
 80014ac:	f107 0308 	add.w	r3, r7, #8
 80014b0:	4619      	mov	r1, r3
 80014b2:	2002      	movs	r0, #2
 80014b4:	f000 fb30 	bl	8001b18 <ltc_pec15_calc>
 80014b8:	4603      	mov	r3, r0
 80014ba:	827b      	strh	r3, [r7, #18]
		cmd[2] = (uint8_t) (cmd_pec >> 8);
 80014bc:	8a7b      	ldrh	r3, [r7, #18]
 80014be:	0a1b      	lsrs	r3, r3, #8
 80014c0:	b29b      	uxth	r3, r3
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	72bb      	strb	r3, [r7, #10]
		cmd[3] = (uint8_t) (cmd_pec);
 80014c6:	8a7b      	ldrh	r3, [r7, #18]
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	72fb      	strb	r3, [r7, #11]

		wakeup_idle(); // Wake LTC up
 80014cc:	f7ff ff6e 	bl	80013ac <wakeup_idle>

		LTC_nCS_Low(); // Pull CS low
 80014d0:	f001 fd14 	bl	8002efc <LTC_nCS_Low>

		hal_ret = HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 80014d4:	f107 0108 	add.w	r1, r7, #8
 80014d8:	2364      	movs	r3, #100	; 0x64
 80014da:	2204      	movs	r2, #4
 80014dc:	482d      	ldr	r0, [pc, #180]	; (8001594 <read_cell_volt+0x16c>)
 80014de:	f004 fd8b 	bl	8005ff8 <HAL_SPI_Transmit>
 80014e2:	4603      	mov	r3, r0
 80014e4:	747b      	strb	r3, [r7, #17]
		if (hal_ret) {									// Non-zero means error
 80014e6:	7c7b      	ldrb	r3, [r7, #17]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d009      	beq.n	8001500 <read_cell_volt+0xd8>
			ret |= (1 << (hal_ret + LTC_SPI_TX_BIT_OFFSET)); // TX error
 80014ec:	7c7b      	ldrb	r3, [r7, #17]
 80014ee:	2201      	movs	r2, #1
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	b25a      	sxtb	r2, r3
 80014f6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	b25b      	sxtb	r3, r3
 80014fe:	77fb      	strb	r3, [r7, #31]
		}

		hal_ret = HAL_SPI_Receive(&hspi1, (uint8_t*) read_voltages_reg,
 8001500:	7f3b      	ldrb	r3, [r7, #28]
 8001502:	b29a      	uxth	r2, r3
 8001504:	2364      	movs	r3, #100	; 0x64
 8001506:	6979      	ldr	r1, [r7, #20]
 8001508:	4822      	ldr	r0, [pc, #136]	; (8001594 <read_cell_volt+0x16c>)
 800150a:	f004 feb8 	bl	800627e <HAL_SPI_Receive>
 800150e:	4603      	mov	r3, r0
 8001510:	747b      	strb	r3, [r7, #17]
				ARR_SIZE_REG, 100);
		if (hal_ret) {									// Non-zero means error
 8001512:	7c7b      	ldrb	r3, [r7, #17]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d00a      	beq.n	800152e <read_cell_volt+0x106>
			ret |= (1 << (hal_ret + LTC_SPI_RX_BIT_OFFSET)); // RX error
 8001518:	7c7b      	ldrb	r3, [r7, #17]
 800151a:	3304      	adds	r3, #4
 800151c:	2201      	movs	r2, #1
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	b25a      	sxtb	r2, r3
 8001524:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001528:	4313      	orrs	r3, r2
 800152a:	b25b      	sxtb	r3, r3
 800152c:	77fb      	strb	r3, [r7, #31]
		}

		// Process the received data
		for (uint8_t dev_idx = 0; dev_idx < NUM_DEVICES; dev_idx++) {
 800152e:	2300      	movs	r3, #0
 8001530:	777b      	strb	r3, [r7, #29]
 8001532:	e01a      	b.n	800156a <read_cell_volt+0x142>
			// Assuming data format is [cell voltage, cell voltage, ..., PEC, PEC]
			// PEC for each device is the last two bytes of its data segment
			uint8_t *data_ptr = &read_voltages_reg[dev_idx * REG_LEN];
 8001534:	7f7b      	ldrb	r3, [r7, #29]
 8001536:	00db      	lsls	r3, r3, #3
 8001538:	697a      	ldr	r2, [r7, #20]
 800153a:	4413      	add	r3, r2
 800153c:	60fb      	str	r3, [r7, #12]
			// If PEC matches, copy the voltage data, omitting the PEC bytes
			memcpy(
					&read_voltages[dev_idx * NUM_CELL_SERIES_GROUP
 800153e:	7f7a      	ldrb	r2, [r7, #29]
 8001540:	4613      	mov	r3, r2
 8001542:	005b      	lsls	r3, r3, #1
 8001544:	4413      	add	r3, r2
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	4619      	mov	r1, r3
							+ i * LTC_SERIES_GROUPS_PER_RDCV], data_ptr,
 800154a:	7fba      	ldrb	r2, [r7, #30]
 800154c:	4613      	mov	r3, r2
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	4413      	add	r3, r2
 8001552:	440b      	add	r3, r1
					&read_voltages[dev_idx * NUM_CELL_SERIES_GROUP
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	687a      	ldr	r2, [r7, #4]
 8001558:	4413      	add	r3, r2
			memcpy(
 800155a:	2206      	movs	r2, #6
 800155c:	68f9      	ldr	r1, [r7, #12]
 800155e:	4618      	mov	r0, r3
 8001560:	f008 ff64 	bl	800a42c <memcpy>
		for (uint8_t dev_idx = 0; dev_idx < NUM_DEVICES; dev_idx++) {
 8001564:	7f7b      	ldrb	r3, [r7, #29]
 8001566:	3301      	adds	r3, #1
 8001568:	777b      	strb	r3, [r7, #29]
 800156a:	7f7b      	ldrb	r3, [r7, #29]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d0e1      	beq.n	8001534 <read_cell_volt+0x10c>
					REG_LEN - 2);
		}

		LTC_nCS_High(); // Pull CS high
 8001570:	f001 fcb8 	bl	8002ee4 <LTC_nCS_High>
			i++) {
 8001574:	7fbb      	ldrb	r3, [r7, #30]
 8001576:	3301      	adds	r3, #1
 8001578:	77bb      	strb	r3, [r7, #30]
	for (uint8_t i = 0; i < (NUM_CELL_SERIES_GROUP / LTC_SERIES_GROUPS_PER_RDCV);
 800157a:	7fbb      	ldrb	r3, [r7, #30]
 800157c:	2b03      	cmp	r3, #3
 800157e:	d987      	bls.n	8001490 <read_cell_volt+0x68>
	}

	return ret;
 8001580:	7ffb      	ldrb	r3, [r7, #31]
 8001582:	46b5      	mov	sp, r6
}
 8001584:	4618      	mov	r0, r3
 8001586:	3724      	adds	r7, #36	; 0x24
 8001588:	46bd      	mov	sp, r7
 800158a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800158e:	bf00      	nop
 8001590:	0800afb4 	.word	0x0800afb4
 8001594:	200002fc 	.word	0x200002fc

08001598 <ltc6811_wrcfg>:
	free(cmd);
}

void ltc6811_wrcfg(uint8_t total_ic, //The number of ICs being written to
		uint8_t config[][6] //A two dimensional array of the configuration data that will be written
		) {
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af00      	add	r7, sp, #0
 800159e:	4603      	mov	r3, r0
 80015a0:	6039      	str	r1, [r7, #0]
 80015a2:	71fb      	strb	r3, [r7, #7]
	const uint8_t BYTES_IN_REG = 6;
 80015a4:	2306      	movs	r3, #6
 80015a6:	753b      	strb	r3, [r7, #20]
	const uint8_t CMD_LEN = 4 + (8 * total_ic);
 80015a8:	79fb      	ldrb	r3, [r7, #7]
 80015aa:	00db      	lsls	r3, r3, #3
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	3304      	adds	r3, #4
 80015b0:	74fb      	strb	r3, [r7, #19]
	uint8_t *cmd;
	uint16_t cfg_pec;
	uint8_t cmd_index; //command counter

	cmd = (uint8_t*) malloc(CMD_LEN * sizeof(uint8_t));
 80015b2:	7cfb      	ldrb	r3, [r7, #19]
 80015b4:	4618      	mov	r0, r3
 80015b6:	f008 fe05 	bl	800a1c4 <malloc>
 80015ba:	4603      	mov	r3, r0
 80015bc:	60fb      	str	r3, [r7, #12]

	cmd[0] = 0x00;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	2200      	movs	r2, #0
 80015c2:	701a      	strb	r2, [r3, #0]
	cmd[1] = 0x01;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	3301      	adds	r3, #1
 80015c8:	2201      	movs	r2, #1
 80015ca:	701a      	strb	r2, [r3, #0]
	cmd[2] = 0x3d;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	3302      	adds	r3, #2
 80015d0:	223d      	movs	r2, #61	; 0x3d
 80015d2:	701a      	strb	r2, [r3, #0]
	cmd[3] = 0x6e;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	3303      	adds	r3, #3
 80015d8:	226e      	movs	r2, #110	; 0x6e
 80015da:	701a      	strb	r2, [r3, #0]

	cmd_index = 4;
 80015dc:	2304      	movs	r3, #4
 80015de:	75fb      	strb	r3, [r7, #23]
	// executes for each ltc6811 in daisy chain, this loops starts with
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--) {
 80015e0:	79fb      	ldrb	r3, [r7, #7]
 80015e2:	75bb      	strb	r3, [r7, #22]
 80015e4:	e03f      	b.n	8001666 <ltc6811_wrcfg+0xce>
		// the last IC on the stack. The first configuration written is
		// received by the last IC in the daisy chain

		// executes for each of the 6 bytes in the CFGR register
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG;
 80015e6:	2300      	movs	r3, #0
 80015e8:	757b      	strb	r3, [r7, #21]
 80015ea:	e013      	b.n	8001614 <ltc6811_wrcfg+0x7c>
				current_byte++) {
			// current_byte is the byte counter

			cmd[cmd_index] = config[current_ic - 1][current_byte]; //adding the config data to the array to be sent
 80015ec:	7dba      	ldrb	r2, [r7, #22]
 80015ee:	4613      	mov	r3, r2
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	4413      	add	r3, r2
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	3b06      	subs	r3, #6
 80015f8:	683a      	ldr	r2, [r7, #0]
 80015fa:	18d1      	adds	r1, r2, r3
 80015fc:	7d7a      	ldrb	r2, [r7, #21]
 80015fe:	7dfb      	ldrb	r3, [r7, #23]
 8001600:	68f8      	ldr	r0, [r7, #12]
 8001602:	4403      	add	r3, r0
 8001604:	5c8a      	ldrb	r2, [r1, r2]
 8001606:	701a      	strb	r2, [r3, #0]
			cmd_index = cmd_index + 1;
 8001608:	7dfb      	ldrb	r3, [r7, #23]
 800160a:	3301      	adds	r3, #1
 800160c:	75fb      	strb	r3, [r7, #23]
				current_byte++) {
 800160e:	7d7b      	ldrb	r3, [r7, #21]
 8001610:	3301      	adds	r3, #1
 8001612:	757b      	strb	r3, [r7, #21]
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG;
 8001614:	7d7a      	ldrb	r2, [r7, #21]
 8001616:	7d3b      	ldrb	r3, [r7, #20]
 8001618:	429a      	cmp	r2, r3
 800161a:	d3e7      	bcc.n	80015ec <ltc6811_wrcfg+0x54>
		}

		cfg_pec = (uint16_t) ltc_pec15_calc(BYTES_IN_REG,
				&config[current_ic - 1][0]); // calculating the PEC for each ICs configuration register data
 800161c:	7dba      	ldrb	r2, [r7, #22]
 800161e:	4613      	mov	r3, r2
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	4413      	add	r3, r2
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	3b06      	subs	r3, #6
 8001628:	683a      	ldr	r2, [r7, #0]
 800162a:	4413      	add	r3, r2
		cfg_pec = (uint16_t) ltc_pec15_calc(BYTES_IN_REG,
 800162c:	461a      	mov	r2, r3
 800162e:	7d3b      	ldrb	r3, [r7, #20]
 8001630:	4611      	mov	r1, r2
 8001632:	4618      	mov	r0, r3
 8001634:	f000 fa70 	bl	8001b18 <ltc_pec15_calc>
 8001638:	4603      	mov	r3, r0
 800163a:	817b      	strh	r3, [r7, #10]
		cmd[cmd_index] = (uint8_t) (cfg_pec >> 8);
 800163c:	897b      	ldrh	r3, [r7, #10]
 800163e:	0a1b      	lsrs	r3, r3, #8
 8001640:	b299      	uxth	r1, r3
 8001642:	7dfb      	ldrb	r3, [r7, #23]
 8001644:	68fa      	ldr	r2, [r7, #12]
 8001646:	4413      	add	r3, r2
 8001648:	b2ca      	uxtb	r2, r1
 800164a:	701a      	strb	r2, [r3, #0]
		cmd[cmd_index + 1] = (uint8_t) cfg_pec;
 800164c:	7dfb      	ldrb	r3, [r7, #23]
 800164e:	3301      	adds	r3, #1
 8001650:	68fa      	ldr	r2, [r7, #12]
 8001652:	4413      	add	r3, r2
 8001654:	897a      	ldrh	r2, [r7, #10]
 8001656:	b2d2      	uxtb	r2, r2
 8001658:	701a      	strb	r2, [r3, #0]
		cmd_index = cmd_index + 2;
 800165a:	7dfb      	ldrb	r3, [r7, #23]
 800165c:	3302      	adds	r3, #2
 800165e:	75fb      	strb	r3, [r7, #23]
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--) {
 8001660:	7dbb      	ldrb	r3, [r7, #22]
 8001662:	3b01      	subs	r3, #1
 8001664:	75bb      	strb	r3, [r7, #22]
 8001666:	7dbb      	ldrb	r3, [r7, #22]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d1bc      	bne.n	80015e6 <ltc6811_wrcfg+0x4e>
	}

	wakeup_idle(); // This will guarantee that the ltc6811 isoSPI port is awake.This command can be removed.
 800166c:	f7ff fe9e 	bl	80013ac <wakeup_idle>
	LTC_nCS_Low();
 8001670:	f001 fc44 	bl	8002efc <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, CMD_LEN, 100);
 8001674:	7cfb      	ldrb	r3, [r7, #19]
 8001676:	b29a      	uxth	r2, r3
 8001678:	2364      	movs	r3, #100	; 0x64
 800167a:	68f9      	ldr	r1, [r7, #12]
 800167c:	4805      	ldr	r0, [pc, #20]	; (8001694 <ltc6811_wrcfg+0xfc>)
 800167e:	f004 fcbb 	bl	8005ff8 <HAL_SPI_Transmit>
	LTC_nCS_High();
 8001682:	f001 fc2f 	bl	8002ee4 <LTC_nCS_High>
	free(cmd);
 8001686:	68f8      	ldr	r0, [r7, #12]
 8001688:	f008 fda4 	bl	800a1d4 <free>
}
 800168c:	bf00      	nop
 800168e:	3718      	adds	r7, #24
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	200002fc 	.word	0x200002fc

08001698 <ltc_wrcomm>:
/**
 * 
 * @param total_ic	The number of ICs being written to
 * @param comm[6]	A two dimensional array of the comm data that will be written
 */
void ltc_wrcomm(uint8_t total_ic, uint8_t comm[6]) {
 8001698:	b580      	push	{r7, lr}
 800169a:	b086      	sub	sp, #24
 800169c:	af00      	add	r7, sp, #0
 800169e:	4603      	mov	r3, r0
 80016a0:	6039      	str	r1, [r7, #0]
 80016a2:	71fb      	strb	r3, [r7, #7]
	const uint8_t BYTES_IN_REG = 6;
 80016a4:	2306      	movs	r3, #6
 80016a6:	753b      	strb	r3, [r7, #20]
	const uint8_t CMD_LEN = 4 + (8 * total_ic);
 80016a8:	79fb      	ldrb	r3, [r7, #7]
 80016aa:	00db      	lsls	r3, r3, #3
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	3304      	adds	r3, #4
 80016b0:	74fb      	strb	r3, [r7, #19]
	uint8_t *cmd;
	uint16_t comm_pec;
	uint16_t cmd_pec;
	uint8_t cmd_index; // command counter

	cmd = (uint8_t*) malloc(CMD_LEN * sizeof(uint8_t));
 80016b2:	7cfb      	ldrb	r3, [r7, #19]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f008 fd85 	bl	800a1c4 <malloc>
 80016ba:	4603      	mov	r3, r0
 80016bc:	60fb      	str	r3, [r7, #12]

	cmd[0] = 0x07;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	2207      	movs	r2, #7
 80016c2:	701a      	strb	r2, [r3, #0]
	cmd[1] = 0x21;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	3301      	adds	r3, #1
 80016c8:	2221      	movs	r2, #33	; 0x21
 80016ca:	701a      	strb	r2, [r3, #0]
	cmd_pec = ltc_pec15_calc(2, cmd);
 80016cc:	68f9      	ldr	r1, [r7, #12]
 80016ce:	2002      	movs	r0, #2
 80016d0:	f000 fa22 	bl	8001b18 <ltc_pec15_calc>
 80016d4:	4603      	mov	r3, r0
 80016d6:	817b      	strh	r3, [r7, #10]
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 80016d8:	897b      	ldrh	r3, [r7, #10]
 80016da:	0a1b      	lsrs	r3, r3, #8
 80016dc:	b29a      	uxth	r2, r3
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	3302      	adds	r3, #2
 80016e2:	b2d2      	uxtb	r2, r2
 80016e4:	701a      	strb	r2, [r3, #0]
	cmd[3] = (uint8_t) (cmd_pec);
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	3303      	adds	r3, #3
 80016ea:	897a      	ldrh	r2, [r7, #10]
 80016ec:	b2d2      	uxtb	r2, r2
 80016ee:	701a      	strb	r2, [r3, #0]

	cmd_index = 4;
 80016f0:	2304      	movs	r3, #4
 80016f2:	75fb      	strb	r3, [r7, #23]
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--) // executes for each ltc6811 in daisy chain, this loops starts with
 80016f4:	79fb      	ldrb	r3, [r7, #7]
 80016f6:	75bb      	strb	r3, [r7, #22]
 80016f8:	e030      	b.n	800175c <ltc_wrcomm+0xc4>
			{
		// the last IC on the stack. The first configuration written is
		// received by the last IC in the daisy chain

		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG;
 80016fa:	2300      	movs	r3, #0
 80016fc:	757b      	strb	r3, [r7, #21]
 80016fe:	e00d      	b.n	800171c <ltc_wrcomm+0x84>
				current_byte++) // executes for each of the 6 bytes in the CFGR register
				{
			// current_byte is the byte counter
			cmd[cmd_index] = comm[current_byte]; // adding the config data to the array to be sent
 8001700:	7d7b      	ldrb	r3, [r7, #21]
 8001702:	683a      	ldr	r2, [r7, #0]
 8001704:	441a      	add	r2, r3
 8001706:	7dfb      	ldrb	r3, [r7, #23]
 8001708:	68f9      	ldr	r1, [r7, #12]
 800170a:	440b      	add	r3, r1
 800170c:	7812      	ldrb	r2, [r2, #0]
 800170e:	701a      	strb	r2, [r3, #0]
			cmd_index = cmd_index + 1;
 8001710:	7dfb      	ldrb	r3, [r7, #23]
 8001712:	3301      	adds	r3, #1
 8001714:	75fb      	strb	r3, [r7, #23]
				current_byte++) // executes for each of the 6 bytes in the CFGR register
 8001716:	7d7b      	ldrb	r3, [r7, #21]
 8001718:	3301      	adds	r3, #1
 800171a:	757b      	strb	r3, [r7, #21]
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG;
 800171c:	7d7a      	ldrb	r2, [r7, #21]
 800171e:	7d3b      	ldrb	r3, [r7, #20]
 8001720:	429a      	cmp	r2, r3
 8001722:	d3ed      	bcc.n	8001700 <ltc_wrcomm+0x68>
		}
		comm_pec = (uint16_t) ltc_pec15_calc(BYTES_IN_REG, &comm[0]); // calculating the PEC for each ICs configuration register data
 8001724:	7d3b      	ldrb	r3, [r7, #20]
 8001726:	6839      	ldr	r1, [r7, #0]
 8001728:	4618      	mov	r0, r3
 800172a:	f000 f9f5 	bl	8001b18 <ltc_pec15_calc>
 800172e:	4603      	mov	r3, r0
 8001730:	813b      	strh	r3, [r7, #8]
		cmd[cmd_index] = (uint8_t) (comm_pec >> 8);
 8001732:	893b      	ldrh	r3, [r7, #8]
 8001734:	0a1b      	lsrs	r3, r3, #8
 8001736:	b299      	uxth	r1, r3
 8001738:	7dfb      	ldrb	r3, [r7, #23]
 800173a:	68fa      	ldr	r2, [r7, #12]
 800173c:	4413      	add	r3, r2
 800173e:	b2ca      	uxtb	r2, r1
 8001740:	701a      	strb	r2, [r3, #0]
		cmd[cmd_index + 1] = (uint8_t) comm_pec;
 8001742:	7dfb      	ldrb	r3, [r7, #23]
 8001744:	3301      	adds	r3, #1
 8001746:	68fa      	ldr	r2, [r7, #12]
 8001748:	4413      	add	r3, r2
 800174a:	893a      	ldrh	r2, [r7, #8]
 800174c:	b2d2      	uxtb	r2, r2
 800174e:	701a      	strb	r2, [r3, #0]
		cmd_index = cmd_index + 2;
 8001750:	7dfb      	ldrb	r3, [r7, #23]
 8001752:	3302      	adds	r3, #2
 8001754:	75fb      	strb	r3, [r7, #23]
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--) // executes for each ltc6811 in daisy chain, this loops starts with
 8001756:	7dbb      	ldrb	r3, [r7, #22]
 8001758:	3b01      	subs	r3, #1
 800175a:	75bb      	strb	r3, [r7, #22]
 800175c:	7dbb      	ldrb	r3, [r7, #22]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d1cb      	bne.n	80016fa <ltc_wrcomm+0x62>
	}

	wakeup_idle(); // This will guarantee that the ltc6811 isoSPI port is awake.This command can be removed.
 8001762:	f7ff fe23 	bl	80013ac <wakeup_idle>
	LTC_nCS_Low();
 8001766:	f001 fbc9 	bl	8002efc <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, CMD_LEN, 100);
 800176a:	7cfb      	ldrb	r3, [r7, #19]
 800176c:	b29a      	uxth	r2, r3
 800176e:	2364      	movs	r3, #100	; 0x64
 8001770:	68f9      	ldr	r1, [r7, #12]
 8001772:	4806      	ldr	r0, [pc, #24]	; (800178c <ltc_wrcomm+0xf4>)
 8001774:	f004 fc40 	bl	8005ff8 <HAL_SPI_Transmit>
	LTC_nCS_High();
 8001778:	f001 fbb4 	bl	8002ee4 <LTC_nCS_High>
	free(cmd);
 800177c:	68f8      	ldr	r0, [r7, #12]
 800177e:	f008 fd29 	bl	800a1d4 <free>
}
 8001782:	bf00      	nop
 8001784:	3718      	adds	r7, #24
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	200002fc 	.word	0x200002fc

08001790 <ltc_stcomm>:

/**
 * Shifts data in COMM register out over ltc6811 SPI/I2C port
 */
void ltc_stcomm(uint8_t len) {
 8001790:	b580      	push	{r7, lr}
 8001792:	b086      	sub	sp, #24
 8001794:	af00      	add	r7, sp, #0
 8001796:	4603      	mov	r3, r0
 8001798:	71fb      	strb	r3, [r7, #7]

	uint8_t cmd[4];
	uint16_t cmd_pec;

	cmd[0] = 0x07;
 800179a:	2307      	movs	r3, #7
 800179c:	733b      	strb	r3, [r7, #12]
	cmd[1] = 0x23;
 800179e:	2323      	movs	r3, #35	; 0x23
 80017a0:	737b      	strb	r3, [r7, #13]
	cmd_pec = ltc_pec15_calc(2, cmd);
 80017a2:	f107 030c 	add.w	r3, r7, #12
 80017a6:	4619      	mov	r1, r3
 80017a8:	2002      	movs	r0, #2
 80017aa:	f000 f9b5 	bl	8001b18 <ltc_pec15_calc>
 80017ae:	4603      	mov	r3, r0
 80017b0:	827b      	strh	r3, [r7, #18]
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 80017b2:	8a7b      	ldrh	r3, [r7, #18]
 80017b4:	0a1b      	lsrs	r3, r3, #8
 80017b6:	b29b      	uxth	r3, r3
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	73bb      	strb	r3, [r7, #14]
	cmd[3] = (uint8_t) (cmd_pec);
 80017bc:	8a7b      	ldrh	r3, [r7, #18]
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	73fb      	strb	r3, [r7, #15]

	wakeup_idle(); // This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
 80017c2:	f7ff fdf3 	bl	80013ac <wakeup_idle>
	LTC_nCS_Low();
 80017c6:	f001 fb99 	bl	8002efc <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 80017ca:	f107 010c 	add.w	r1, r7, #12
 80017ce:	2364      	movs	r3, #100	; 0x64
 80017d0:	2204      	movs	r2, #4
 80017d2:	480e      	ldr	r0, [pc, #56]	; (800180c <ltc_stcomm+0x7c>)
 80017d4:	f004 fc10 	bl	8005ff8 <HAL_SPI_Transmit>
	for (int i = 0; i < len * 3; i++) {
 80017d8:	2300      	movs	r3, #0
 80017da:	617b      	str	r3, [r7, #20]
 80017dc:	e008      	b.n	80017f0 <ltc_stcomm+0x60>
		HAL_SPI_Transmit(&hspi1, (uint8_t*) 0xFF, 1, 100);
 80017de:	2364      	movs	r3, #100	; 0x64
 80017e0:	2201      	movs	r2, #1
 80017e2:	21ff      	movs	r1, #255	; 0xff
 80017e4:	4809      	ldr	r0, [pc, #36]	; (800180c <ltc_stcomm+0x7c>)
 80017e6:	f004 fc07 	bl	8005ff8 <HAL_SPI_Transmit>
	for (int i = 0; i < len * 3; i++) {
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	3301      	adds	r3, #1
 80017ee:	617b      	str	r3, [r7, #20]
 80017f0:	79fa      	ldrb	r2, [r7, #7]
 80017f2:	4613      	mov	r3, r2
 80017f4:	005b      	lsls	r3, r3, #1
 80017f6:	4413      	add	r3, r2
 80017f8:	697a      	ldr	r2, [r7, #20]
 80017fa:	429a      	cmp	r2, r3
 80017fc:	dbef      	blt.n	80017de <ltc_stcomm+0x4e>
	}
	LTC_nCS_High();
 80017fe:	f001 fb71 	bl	8002ee4 <LTC_nCS_High>
}
 8001802:	bf00      	nop
 8001804:	3718      	adds	r7, #24
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	200002fc 	.word	0x200002fc

08001810 <read_cell_temps>:

LTC_SPI_StatusTypeDef read_cell_temps(uint16_t *read_auxiliary) {
 8001810:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001814:	b089      	sub	sp, #36	; 0x24
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
 800181a:	466b      	mov	r3, sp
 800181c:	461e      	mov	r6, r3
	LTC_SPI_StatusTypeDef ret = LTC_SPI_OK;
 800181e:	2300      	movs	r3, #0
 8001820:	77fb      	strb	r3, [r7, #31]
	LTC_SPI_StatusTypeDef hal_ret;
	const uint8_t ARR_SIZE_REG = NUM_DEVICES * REG_LEN;
 8001822:	2308      	movs	r3, #8
 8001824:	773b      	strb	r3, [r7, #28]
	uint8_t read_auxiliary_reg[ARR_SIZE_REG]; // Increased in size to handle multiple devices
 8001826:	7f3b      	ldrb	r3, [r7, #28]
 8001828:	3b01      	subs	r3, #1
 800182a:	61bb      	str	r3, [r7, #24]
 800182c:	7f3b      	ldrb	r3, [r7, #28]
 800182e:	2200      	movs	r2, #0
 8001830:	4698      	mov	r8, r3
 8001832:	4691      	mov	r9, r2
 8001834:	f04f 0200 	mov.w	r2, #0
 8001838:	f04f 0300 	mov.w	r3, #0
 800183c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001840:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001844:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001848:	7f3b      	ldrb	r3, [r7, #28]
 800184a:	2200      	movs	r2, #0
 800184c:	461c      	mov	r4, r3
 800184e:	4615      	mov	r5, r2
 8001850:	f04f 0200 	mov.w	r2, #0
 8001854:	f04f 0300 	mov.w	r3, #0
 8001858:	00eb      	lsls	r3, r5, #3
 800185a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800185e:	00e2      	lsls	r2, r4, #3
 8001860:	7f3b      	ldrb	r3, [r7, #28]
 8001862:	3307      	adds	r3, #7
 8001864:	08db      	lsrs	r3, r3, #3
 8001866:	00db      	lsls	r3, r3, #3
 8001868:	ebad 0d03 	sub.w	sp, sp, r3
 800186c:	466b      	mov	r3, sp
 800186e:	3300      	adds	r3, #0
 8001870:	617b      	str	r3, [r7, #20]

	for (uint8_t i = 0;
 8001872:	2300      	movs	r3, #0
 8001874:	77bb      	strb	r3, [r7, #30]
 8001876:	e074      	b.n	8001962 <read_cell_temps+0x152>
			i < (NUM_AUX_SERIES_GROUPS / LTC_SERIES_GROUPS_PER_RDAUX); i++) {
		uint8_t cmd[4];
		uint16_t cmd_pec;

		cmd[0] = (0xFF & (LTC_CMD_AUXREG[i] >> 8)); // RDCV Register
 8001878:	7fbb      	ldrb	r3, [r7, #30]
 800187a:	4a3f      	ldr	r2, [pc, #252]	; (8001978 <read_cell_temps+0x168>)
 800187c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001880:	0a1b      	lsrs	r3, r3, #8
 8001882:	b29b      	uxth	r3, r3
 8001884:	b2db      	uxtb	r3, r3
 8001886:	723b      	strb	r3, [r7, #8]
		cmd[1] = (0xFF & (LTC_CMD_AUXREG[i]));		// RDCV Register
 8001888:	7fbb      	ldrb	r3, [r7, #30]
 800188a:	4a3b      	ldr	r2, [pc, #236]	; (8001978 <read_cell_temps+0x168>)
 800188c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001890:	b2db      	uxtb	r3, r3
 8001892:	727b      	strb	r3, [r7, #9]
		cmd_pec = ltc_pec15_calc(2, cmd);
 8001894:	f107 0308 	add.w	r3, r7, #8
 8001898:	4619      	mov	r1, r3
 800189a:	2002      	movs	r0, #2
 800189c:	f000 f93c 	bl	8001b18 <ltc_pec15_calc>
 80018a0:	4603      	mov	r3, r0
 80018a2:	827b      	strh	r3, [r7, #18]
		cmd[2] = (uint8_t) (cmd_pec >> 8);
 80018a4:	8a7b      	ldrh	r3, [r7, #18]
 80018a6:	0a1b      	lsrs	r3, r3, #8
 80018a8:	b29b      	uxth	r3, r3
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	72bb      	strb	r3, [r7, #10]
		cmd[3] = (uint8_t) (cmd_pec);
 80018ae:	8a7b      	ldrh	r3, [r7, #18]
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	72fb      	strb	r3, [r7, #11]

		wakeup_idle(); // Wake LTC up
 80018b4:	f7ff fd7a 	bl	80013ac <wakeup_idle>

		LTC_nCS_Low(); // Pull CS low
 80018b8:	f001 fb20 	bl	8002efc <LTC_nCS_Low>

		hal_ret = HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 80018bc:	f107 0108 	add.w	r1, r7, #8
 80018c0:	2364      	movs	r3, #100	; 0x64
 80018c2:	2204      	movs	r2, #4
 80018c4:	482d      	ldr	r0, [pc, #180]	; (800197c <read_cell_temps+0x16c>)
 80018c6:	f004 fb97 	bl	8005ff8 <HAL_SPI_Transmit>
 80018ca:	4603      	mov	r3, r0
 80018cc:	747b      	strb	r3, [r7, #17]
		if (hal_ret) {									// Non-zero means error
 80018ce:	7c7b      	ldrb	r3, [r7, #17]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d009      	beq.n	80018e8 <read_cell_temps+0xd8>
			ret |= (1 << (hal_ret + LTC_SPI_TX_BIT_OFFSET)); // TX error
 80018d4:	7c7b      	ldrb	r3, [r7, #17]
 80018d6:	2201      	movs	r2, #1
 80018d8:	fa02 f303 	lsl.w	r3, r2, r3
 80018dc:	b25a      	sxtb	r2, r3
 80018de:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	b25b      	sxtb	r3, r3
 80018e6:	77fb      	strb	r3, [r7, #31]
		}

		hal_ret = HAL_SPI_Receive(&hspi1, (uint8_t*) read_auxiliary_reg,
 80018e8:	7f3b      	ldrb	r3, [r7, #28]
 80018ea:	b29a      	uxth	r2, r3
 80018ec:	2364      	movs	r3, #100	; 0x64
 80018ee:	6979      	ldr	r1, [r7, #20]
 80018f0:	4822      	ldr	r0, [pc, #136]	; (800197c <read_cell_temps+0x16c>)
 80018f2:	f004 fcc4 	bl	800627e <HAL_SPI_Receive>
 80018f6:	4603      	mov	r3, r0
 80018f8:	747b      	strb	r3, [r7, #17]
				ARR_SIZE_REG, 100);
		if (hal_ret) {									// Non-zero means error
 80018fa:	7c7b      	ldrb	r3, [r7, #17]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d00a      	beq.n	8001916 <read_cell_temps+0x106>
			ret |= (1 << (hal_ret + LTC_SPI_RX_BIT_OFFSET)); // RX error
 8001900:	7c7b      	ldrb	r3, [r7, #17]
 8001902:	3304      	adds	r3, #4
 8001904:	2201      	movs	r2, #1
 8001906:	fa02 f303 	lsl.w	r3, r2, r3
 800190a:	b25a      	sxtb	r2, r3
 800190c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001910:	4313      	orrs	r3, r2
 8001912:	b25b      	sxtb	r3, r3
 8001914:	77fb      	strb	r3, [r7, #31]
		}

		// Process the received data
		for (uint8_t dev_idx = 0; dev_idx < NUM_DEVICES; dev_idx++) {
 8001916:	2300      	movs	r3, #0
 8001918:	777b      	strb	r3, [r7, #29]
 800191a:	e01a      	b.n	8001952 <read_cell_temps+0x142>
			// Assuming data format is [cell voltage, cell voltage, ..., PEC, PEC]
			// PEC for each device is the last two bytes of its data segment
			uint8_t *data_ptr = &read_auxiliary_reg[dev_idx * REG_LEN];
 800191c:	7f7b      	ldrb	r3, [r7, #29]
 800191e:	00db      	lsls	r3, r3, #3
 8001920:	697a      	ldr	r2, [r7, #20]
 8001922:	4413      	add	r3, r2
 8001924:	60fb      	str	r3, [r7, #12]

			memcpy(
					&read_auxiliary[dev_idx * NUM_AUX_SERIES_GROUPS
 8001926:	7f7a      	ldrb	r2, [r7, #29]
 8001928:	4613      	mov	r3, r2
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	4413      	add	r3, r2
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	4619      	mov	r1, r3
							+ i * LTC_SERIES_GROUPS_PER_RDAUX], data_ptr,
 8001932:	7fba      	ldrb	r2, [r7, #30]
 8001934:	4613      	mov	r3, r2
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	4413      	add	r3, r2
 800193a:	440b      	add	r3, r1
					&read_auxiliary[dev_idx * NUM_AUX_SERIES_GROUPS
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	4413      	add	r3, r2
			memcpy(
 8001942:	2206      	movs	r2, #6
 8001944:	68f9      	ldr	r1, [r7, #12]
 8001946:	4618      	mov	r0, r3
 8001948:	f008 fd70 	bl	800a42c <memcpy>
		for (uint8_t dev_idx = 0; dev_idx < NUM_DEVICES; dev_idx++) {
 800194c:	7f7b      	ldrb	r3, [r7, #29]
 800194e:	3301      	adds	r3, #1
 8001950:	777b      	strb	r3, [r7, #29]
 8001952:	7f7b      	ldrb	r3, [r7, #29]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d0e1      	beq.n	800191c <read_cell_temps+0x10c>
					REG_LEN - 2);
		}

		LTC_nCS_High(); // Pull CS high
 8001958:	f001 fac4 	bl	8002ee4 <LTC_nCS_High>
			i < (NUM_AUX_SERIES_GROUPS / LTC_SERIES_GROUPS_PER_RDAUX); i++) {
 800195c:	7fbb      	ldrb	r3, [r7, #30]
 800195e:	3301      	adds	r3, #1
 8001960:	77bb      	strb	r3, [r7, #30]
 8001962:	7fbb      	ldrb	r3, [r7, #30]
 8001964:	2b01      	cmp	r3, #1
 8001966:	d987      	bls.n	8001878 <read_cell_temps+0x68>
	}

	return ret;
 8001968:	7ffb      	ldrb	r3, [r7, #31]
 800196a:	46b5      	mov	sp, r6
}
 800196c:	4618      	mov	r0, r3
 800196e:	3724      	adds	r7, #36	; 0x24
 8001970:	46bd      	mov	sp, r7
 8001972:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001976:	bf00      	nop
 8001978:	0800afbc 	.word	0x0800afbc
 800197c:	200002fc 	.word	0x200002fc

08001980 <ltc_adcv>:
 Starts cell voltage conversion
 */
void ltc_adcv(uint8_t MD,  // ADC Mode
		uint8_t DCP, // Discharge Permit
		uint8_t CH   // Cell Channels to be measured
		) {
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	4603      	mov	r3, r0
 8001988:	71fb      	strb	r3, [r7, #7]
 800198a:	460b      	mov	r3, r1
 800198c:	71bb      	strb	r3, [r7, #6]
 800198e:	4613      	mov	r3, r2
 8001990:	717b      	strb	r3, [r7, #5]
	uint8_t cmd[4];
	uint16_t cmd_pec;
	uint8_t md_bits;

	md_bits = (MD & 0x02) >> 1;
 8001992:	79fb      	ldrb	r3, [r7, #7]
 8001994:	105b      	asrs	r3, r3, #1
 8001996:	b2db      	uxtb	r3, r3
 8001998:	f003 0301 	and.w	r3, r3, #1
 800199c:	73fb      	strb	r3, [r7, #15]
	cmd[0] = md_bits + 0x02;
 800199e:	7bfb      	ldrb	r3, [r7, #15]
 80019a0:	3302      	adds	r3, #2
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	723b      	strb	r3, [r7, #8]
	md_bits = (MD & 0x01) << 7;
 80019a6:	79fb      	ldrb	r3, [r7, #7]
 80019a8:	01db      	lsls	r3, r3, #7
 80019aa:	73fb      	strb	r3, [r7, #15]
	cmd[1] = md_bits + 0x60 + (DCP << 4) + CH;
 80019ac:	79bb      	ldrb	r3, [r7, #6]
 80019ae:	011b      	lsls	r3, r3, #4
 80019b0:	b2da      	uxtb	r2, r3
 80019b2:	7bfb      	ldrb	r3, [r7, #15]
 80019b4:	4413      	add	r3, r2
 80019b6:	b2da      	uxtb	r2, r3
 80019b8:	797b      	ldrb	r3, [r7, #5]
 80019ba:	4413      	add	r3, r2
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	3360      	adds	r3, #96	; 0x60
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	727b      	strb	r3, [r7, #9]
	cmd_pec = ltc_pec15_calc(2, cmd);
 80019c4:	f107 0308 	add.w	r3, r7, #8
 80019c8:	4619      	mov	r1, r3
 80019ca:	2002      	movs	r0, #2
 80019cc:	f000 f8a4 	bl	8001b18 <ltc_pec15_calc>
 80019d0:	4603      	mov	r3, r0
 80019d2:	81bb      	strh	r3, [r7, #12]
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 80019d4:	89bb      	ldrh	r3, [r7, #12]
 80019d6:	0a1b      	lsrs	r3, r3, #8
 80019d8:	b29b      	uxth	r3, r3
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t) (cmd_pec);
 80019de:	89bb      	ldrh	r3, [r7, #12]
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	72fb      	strb	r3, [r7, #11]

	wakeup_idle(); // This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
 80019e4:	f7ff fce2 	bl	80013ac <wakeup_idle>
	LTC_nCS_Low();
 80019e8:	f001 fa88 	bl	8002efc <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 80019ec:	f107 0108 	add.w	r1, r7, #8
 80019f0:	2364      	movs	r3, #100	; 0x64
 80019f2:	2204      	movs	r2, #4
 80019f4:	4804      	ldr	r0, [pc, #16]	; (8001a08 <ltc_adcv+0x88>)
 80019f6:	f004 faff 	bl	8005ff8 <HAL_SPI_Transmit>
	LTC_nCS_High();
 80019fa:	f001 fa73 	bl	8002ee4 <LTC_nCS_High>
}
 80019fe:	bf00      	nop
 8001a00:	3710      	adds	r7, #16
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	200002fc 	.word	0x200002fc

08001a0c <ltc_adax>:

void ltc_adax(uint8_t MD, // ADC Mode
		uint8_t CHG // GPIO Channels to be measured)
		) {
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	4603      	mov	r3, r0
 8001a14:	460a      	mov	r2, r1
 8001a16:	71fb      	strb	r3, [r7, #7]
 8001a18:	4613      	mov	r3, r2
 8001a1a:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd[4];
	uint16_t cmd_pec;
	uint8_t md_bits;

	md_bits = (MD & 0x02) >> 1;
 8001a1c:	79fb      	ldrb	r3, [r7, #7]
 8001a1e:	105b      	asrs	r3, r3, #1
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	73fb      	strb	r3, [r7, #15]
	cmd[0] = md_bits + 0x04;
 8001a28:	7bfb      	ldrb	r3, [r7, #15]
 8001a2a:	3304      	adds	r3, #4
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	723b      	strb	r3, [r7, #8]
	md_bits = (MD & 0x01) << 7;
 8001a30:	79fb      	ldrb	r3, [r7, #7]
 8001a32:	01db      	lsls	r3, r3, #7
 8001a34:	73fb      	strb	r3, [r7, #15]
	cmd[1] = md_bits + 0x60 + CHG;
 8001a36:	7bfa      	ldrb	r2, [r7, #15]
 8001a38:	79bb      	ldrb	r3, [r7, #6]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	3360      	adds	r3, #96	; 0x60
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	727b      	strb	r3, [r7, #9]
	cmd_pec = ltc_pec15_calc(2, cmd);
 8001a44:	f107 0308 	add.w	r3, r7, #8
 8001a48:	4619      	mov	r1, r3
 8001a4a:	2002      	movs	r0, #2
 8001a4c:	f000 f864 	bl	8001b18 <ltc_pec15_calc>
 8001a50:	4603      	mov	r3, r0
 8001a52:	81bb      	strh	r3, [r7, #12]
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 8001a54:	89bb      	ldrh	r3, [r7, #12]
 8001a56:	0a1b      	lsrs	r3, r3, #8
 8001a58:	b29b      	uxth	r3, r3
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t) (cmd_pec);
 8001a5e:	89bb      	ldrh	r3, [r7, #12]
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	72fb      	strb	r3, [r7, #11]
	 wakeup_idle (); //This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
	 output_low(LTC6811_CS);
	 spi_write_array(4,cmd);
	 output_high(LTC6811_CS);
	 */
	wakeup_idle(); // This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
 8001a64:	f7ff fca2 	bl	80013ac <wakeup_idle>
	LTC_nCS_Low();
 8001a68:	f001 fa48 	bl	8002efc <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 8001a6c:	f107 0108 	add.w	r1, r7, #8
 8001a70:	2364      	movs	r3, #100	; 0x64
 8001a72:	2204      	movs	r2, #4
 8001a74:	4804      	ldr	r0, [pc, #16]	; (8001a88 <ltc_adax+0x7c>)
 8001a76:	f004 fabf 	bl	8005ff8 <HAL_SPI_Transmit>
	LTC_nCS_High();
 8001a7a:	f001 fa33 	bl	8002ee4 <LTC_nCS_High>
}
 8001a7e:	bf00      	nop
 8001a80:	3710      	adds	r7, #16
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	200002fc 	.word	0x200002fc

08001a8c <ltc_polladc>:

int32_t ltc_polladc() {
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
	uint32_t counter = 0;
 8001a92:	2300      	movs	r3, #0
 8001a94:	60fb      	str	r3, [r7, #12]
	uint8_t finished = 0;
 8001a96:	2300      	movs	r3, #0
 8001a98:	72fb      	strb	r3, [r7, #11]
	uint8_t current_time = 0;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	72bb      	strb	r3, [r7, #10]
	uint8_t cmd[4];
	uint16_t cmd_pec;

	cmd[0] = 0x07;
 8001a9e:	2307      	movs	r3, #7
 8001aa0:	713b      	strb	r3, [r7, #4]
	cmd[1] = 0x14;
 8001aa2:	2314      	movs	r3, #20
 8001aa4:	717b      	strb	r3, [r7, #5]
	cmd_pec = ltc_pec15_calc(2, cmd);
 8001aa6:	1d3b      	adds	r3, r7, #4
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	2002      	movs	r0, #2
 8001aac:	f000 f834 	bl	8001b18 <ltc_pec15_calc>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	813b      	strh	r3, [r7, #8]
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 8001ab4:	893b      	ldrh	r3, [r7, #8]
 8001ab6:	0a1b      	lsrs	r3, r3, #8
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	71bb      	strb	r3, [r7, #6]
	cmd[3] = (uint8_t) (cmd_pec);
 8001abe:	893b      	ldrh	r3, [r7, #8]
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	71fb      	strb	r3, [r7, #7]

	wakeup_idle(); // This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
 8001ac4:	f7ff fc72 	bl	80013ac <wakeup_idle>

	LTC_nCS_Low();
 8001ac8:	f001 fa18 	bl	8002efc <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 8001acc:	1d39      	adds	r1, r7, #4
 8001ace:	2364      	movs	r3, #100	; 0x64
 8001ad0:	2204      	movs	r2, #4
 8001ad2:	480f      	ldr	r0, [pc, #60]	; (8001b10 <ltc_polladc+0x84>)
 8001ad4:	f004 fa90 	bl	8005ff8 <HAL_SPI_Transmit>

	while ((counter < 200000) && (finished == 0)) {
 8001ad8:	e00c      	b.n	8001af4 <ltc_polladc+0x68>
		current_time = HAL_GetTick();
 8001ada:	f001 fb8d 	bl	80031f8 <HAL_GetTick>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	72bb      	strb	r3, [r7, #10]
		if (current_time > 0) {
 8001ae2:	7abb      	ldrb	r3, [r7, #10]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d002      	beq.n	8001aee <ltc_polladc+0x62>
			finished = 1;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	72fb      	strb	r3, [r7, #11]
 8001aec:	e002      	b.n	8001af4 <ltc_polladc+0x68>
		} else {
			counter = counter + 10;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	330a      	adds	r3, #10
 8001af2:	60fb      	str	r3, [r7, #12]
	while ((counter < 200000) && (finished == 0)) {
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	4a07      	ldr	r2, [pc, #28]	; (8001b14 <ltc_polladc+0x88>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d802      	bhi.n	8001b02 <ltc_polladc+0x76>
 8001afc:	7afb      	ldrb	r3, [r7, #11]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d0eb      	beq.n	8001ada <ltc_polladc+0x4e>
		}
	}
	LTC_nCS_High();
 8001b02:	f001 f9ef 	bl	8002ee4 <LTC_nCS_High>
	return (counter);
 8001b06:	68fb      	ldr	r3, [r7, #12]
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3710      	adds	r7, #16
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	200002fc 	.word	0x200002fc
 8001b14:	00030d3f 	.word	0x00030d3f

08001b18 <ltc_pec15_calc>:
/**
 * error calculation and handling for poor command use. 
 * @param 	len		Number of bytes that will be used to calculate a PEC
 * @param	data	Array of data that will be used to calculate a PEC
 */
uint16_t ltc_pec15_calc(uint8_t len, uint8_t *data) {
 8001b18:	b480      	push	{r7}
 8001b1a:	b085      	sub	sp, #20
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	4603      	mov	r3, r0
 8001b20:	6039      	str	r1, [r7, #0]
 8001b22:	71fb      	strb	r3, [r7, #7]
	uint16_t remainder, addr;
	remainder = 16; // Initialize the PEC to 0x10000
 8001b24:	2310      	movs	r3, #16
 8001b26:	81fb      	strh	r3, [r7, #14]

	for (uint8_t i = 0; i < len; i++) // loops for each byte in data array
 8001b28:	2300      	movs	r3, #0
 8001b2a:	737b      	strb	r3, [r7, #13]
 8001b2c:	e018      	b.n	8001b60 <ltc_pec15_calc+0x48>
			{
		addr = ((remainder >> 7) ^ data[i]) & 0xff; // calculate PEC table address
 8001b2e:	89fb      	ldrh	r3, [r7, #14]
 8001b30:	09db      	lsrs	r3, r3, #7
 8001b32:	b29a      	uxth	r2, r3
 8001b34:	7b7b      	ldrb	r3, [r7, #13]
 8001b36:	6839      	ldr	r1, [r7, #0]
 8001b38:	440b      	add	r3, r1
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	b29b      	uxth	r3, r3
 8001b3e:	4053      	eors	r3, r2
 8001b40:	b29b      	uxth	r3, r3
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	817b      	strh	r3, [r7, #10]
		remainder = (remainder << 8) ^ crc15Table[addr];
 8001b46:	89fb      	ldrh	r3, [r7, #14]
 8001b48:	021b      	lsls	r3, r3, #8
 8001b4a:	b29a      	uxth	r2, r3
 8001b4c:	897b      	ldrh	r3, [r7, #10]
 8001b4e:	490a      	ldr	r1, [pc, #40]	; (8001b78 <ltc_pec15_calc+0x60>)
 8001b50:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001b54:	b29b      	uxth	r3, r3
 8001b56:	4053      	eors	r3, r2
 8001b58:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i < len; i++) // loops for each byte in data array
 8001b5a:	7b7b      	ldrb	r3, [r7, #13]
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	737b      	strb	r3, [r7, #13]
 8001b60:	7b7a      	ldrb	r2, [r7, #13]
 8001b62:	79fb      	ldrb	r3, [r7, #7]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d3e2      	bcc.n	8001b2e <ltc_pec15_calc+0x16>
	}

	return (remainder * 2); // The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 8001b68:	89fb      	ldrh	r3, [r7, #14]
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	b29b      	uxth	r3, r3
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3714      	adds	r7, #20
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bc80      	pop	{r7}
 8001b76:	4770      	bx	lr
 8001b78:	0800afc0 	.word	0x0800afc0

08001b7c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b82:	1d3b      	adds	r3, r7, #4
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	605a      	str	r2, [r3, #4]
 8001b8a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001b8c:	4b18      	ldr	r3, [pc, #96]	; (8001bf0 <MX_ADC1_Init+0x74>)
 8001b8e:	4a19      	ldr	r2, [pc, #100]	; (8001bf4 <MX_ADC1_Init+0x78>)
 8001b90:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001b92:	4b17      	ldr	r3, [pc, #92]	; (8001bf0 <MX_ADC1_Init+0x74>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001b98:	4b15      	ldr	r3, [pc, #84]	; (8001bf0 <MX_ADC1_Init+0x74>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b9e:	4b14      	ldr	r3, [pc, #80]	; (8001bf0 <MX_ADC1_Init+0x74>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ba4:	4b12      	ldr	r3, [pc, #72]	; (8001bf0 <MX_ADC1_Init+0x74>)
 8001ba6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001baa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001bac:	4b10      	ldr	r3, [pc, #64]	; (8001bf0 <MX_ADC1_Init+0x74>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001bb2:	4b0f      	ldr	r3, [pc, #60]	; (8001bf0 <MX_ADC1_Init+0x74>)
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001bb8:	480d      	ldr	r0, [pc, #52]	; (8001bf0 <MX_ADC1_Init+0x74>)
 8001bba:	f001 fb4b 	bl	8003254 <HAL_ADC_Init>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001bc4:	f000 feac 	bl	8002920 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001bc8:	230e      	movs	r3, #14
 8001bca:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bd4:	1d3b      	adds	r3, r7, #4
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	4805      	ldr	r0, [pc, #20]	; (8001bf0 <MX_ADC1_Init+0x74>)
 8001bda:	f001 fc13 	bl	8003404 <HAL_ADC_ConfigChannel>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001be4:	f000 fe9c 	bl	8002920 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001be8:	bf00      	nop
 8001bea:	3710      	adds	r7, #16
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	2000026c 	.word	0x2000026c
 8001bf4:	40012400 	.word	0x40012400

08001bf8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001bfe:	1d3b      	adds	r3, r7, #4
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]
 8001c04:	605a      	str	r2, [r3, #4]
 8001c06:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001c08:	4b18      	ldr	r3, [pc, #96]	; (8001c6c <MX_ADC2_Init+0x74>)
 8001c0a:	4a19      	ldr	r2, [pc, #100]	; (8001c70 <MX_ADC2_Init+0x78>)
 8001c0c:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001c0e:	4b17      	ldr	r3, [pc, #92]	; (8001c6c <MX_ADC2_Init+0x74>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001c14:	4b15      	ldr	r3, [pc, #84]	; (8001c6c <MX_ADC2_Init+0x74>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001c1a:	4b14      	ldr	r3, [pc, #80]	; (8001c6c <MX_ADC2_Init+0x74>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c20:	4b12      	ldr	r3, [pc, #72]	; (8001c6c <MX_ADC2_Init+0x74>)
 8001c22:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001c26:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c28:	4b10      	ldr	r3, [pc, #64]	; (8001c6c <MX_ADC2_Init+0x74>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8001c2e:	4b0f      	ldr	r3, [pc, #60]	; (8001c6c <MX_ADC2_Init+0x74>)
 8001c30:	2201      	movs	r2, #1
 8001c32:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001c34:	480d      	ldr	r0, [pc, #52]	; (8001c6c <MX_ADC2_Init+0x74>)
 8001c36:	f001 fb0d 	bl	8003254 <HAL_ADC_Init>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8001c40:	f000 fe6e 	bl	8002920 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001c44:	230a      	movs	r3, #10
 8001c46:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001c50:	1d3b      	adds	r3, r7, #4
 8001c52:	4619      	mov	r1, r3
 8001c54:	4805      	ldr	r0, [pc, #20]	; (8001c6c <MX_ADC2_Init+0x74>)
 8001c56:	f001 fbd5 	bl	8003404 <HAL_ADC_ConfigChannel>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <MX_ADC2_Init+0x6c>
  {
		Error_Handler();
 8001c60:	f000 fe5e 	bl	8002920 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001c64:	bf00      	nop
 8001c66:	3710      	adds	r7, #16
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	2000029c 	.word	0x2000029c
 8001c70:	40012800 	.word	0x40012800

08001c74 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b08a      	sub	sp, #40	; 0x28
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c7c:	f107 0318 	add.w	r3, r7, #24
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]
 8001c84:	605a      	str	r2, [r3, #4]
 8001c86:	609a      	str	r2, [r3, #8]
 8001c88:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a28      	ldr	r2, [pc, #160]	; (8001d30 <HAL_ADC_MspInit+0xbc>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d122      	bne.n	8001cda <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c94:	4b27      	ldr	r3, [pc, #156]	; (8001d34 <HAL_ADC_MspInit+0xc0>)
 8001c96:	699b      	ldr	r3, [r3, #24]
 8001c98:	4a26      	ldr	r2, [pc, #152]	; (8001d34 <HAL_ADC_MspInit+0xc0>)
 8001c9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c9e:	6193      	str	r3, [r2, #24]
 8001ca0:	4b24      	ldr	r3, [pc, #144]	; (8001d34 <HAL_ADC_MspInit+0xc0>)
 8001ca2:	699b      	ldr	r3, [r3, #24]
 8001ca4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ca8:	617b      	str	r3, [r7, #20]
 8001caa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cac:	4b21      	ldr	r3, [pc, #132]	; (8001d34 <HAL_ADC_MspInit+0xc0>)
 8001cae:	699b      	ldr	r3, [r3, #24]
 8001cb0:	4a20      	ldr	r2, [pc, #128]	; (8001d34 <HAL_ADC_MspInit+0xc0>)
 8001cb2:	f043 0310 	orr.w	r3, r3, #16
 8001cb6:	6193      	str	r3, [r2, #24]
 8001cb8:	4b1e      	ldr	r3, [pc, #120]	; (8001d34 <HAL_ADC_MspInit+0xc0>)
 8001cba:	699b      	ldr	r3, [r3, #24]
 8001cbc:	f003 0310 	and.w	r3, r3, #16
 8001cc0:	613b      	str	r3, [r7, #16]
 8001cc2:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001cc4:	2330      	movs	r3, #48	; 0x30
 8001cc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ccc:	f107 0318 	add.w	r3, r7, #24
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	4819      	ldr	r0, [pc, #100]	; (8001d38 <HAL_ADC_MspInit+0xc4>)
 8001cd4:	f002 f810 	bl	8003cf8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001cd8:	e026      	b.n	8001d28 <HAL_ADC_MspInit+0xb4>
  else if(adcHandle->Instance==ADC2)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a17      	ldr	r2, [pc, #92]	; (8001d3c <HAL_ADC_MspInit+0xc8>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d121      	bne.n	8001d28 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001ce4:	4b13      	ldr	r3, [pc, #76]	; (8001d34 <HAL_ADC_MspInit+0xc0>)
 8001ce6:	699b      	ldr	r3, [r3, #24]
 8001ce8:	4a12      	ldr	r2, [pc, #72]	; (8001d34 <HAL_ADC_MspInit+0xc0>)
 8001cea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cee:	6193      	str	r3, [r2, #24]
 8001cf0:	4b10      	ldr	r3, [pc, #64]	; (8001d34 <HAL_ADC_MspInit+0xc0>)
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cf8:	60fb      	str	r3, [r7, #12]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cfc:	4b0d      	ldr	r3, [pc, #52]	; (8001d34 <HAL_ADC_MspInit+0xc0>)
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	4a0c      	ldr	r2, [pc, #48]	; (8001d34 <HAL_ADC_MspInit+0xc0>)
 8001d02:	f043 0310 	orr.w	r3, r3, #16
 8001d06:	6193      	str	r3, [r2, #24]
 8001d08:	4b0a      	ldr	r3, [pc, #40]	; (8001d34 <HAL_ADC_MspInit+0xc0>)
 8001d0a:	699b      	ldr	r3, [r3, #24]
 8001d0c:	f003 0310 	and.w	r3, r3, #16
 8001d10:	60bb      	str	r3, [r7, #8]
 8001d12:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001d14:	230f      	movs	r3, #15
 8001d16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d1c:	f107 0318 	add.w	r3, r7, #24
 8001d20:	4619      	mov	r1, r3
 8001d22:	4805      	ldr	r0, [pc, #20]	; (8001d38 <HAL_ADC_MspInit+0xc4>)
 8001d24:	f001 ffe8 	bl	8003cf8 <HAL_GPIO_Init>
}
 8001d28:	bf00      	nop
 8001d2a:	3728      	adds	r7, #40	; 0x28
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	40012400 	.word	0x40012400
 8001d34:	40021000 	.word	0x40021000
 8001d38:	40011000 	.word	0x40011000
 8001d3c:	40012800 	.word	0x40012800

08001d40 <startBalance>:
				0x00, 0x00, 0x00, 0x00, 0x00 }, { 0xF8, 0x00, 0x00, 0x00, 0x00,
				0x00 }, { 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00 }, { 0xF8, 0x00,
				0x00, 0x00, 0x00, 0x00 }, { 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00 } };


void startBalance(uint16_t *read_volt, uint8_t length, uint16_t lowest) {
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	460b      	mov	r3, r1
 8001d4a:	70fb      	strb	r3, [r7, #3]
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	803b      	strh	r3, [r7, #0]
	wakeup_sleep();
 8001d50:	f7ff fb4c 	bl	80013ec <wakeup_sleep>
	dischargeAlgo(read_volt, NUM_DEVICES, lowest);
 8001d54:	883b      	ldrh	r3, [r7, #0]
 8001d56:	461a      	mov	r2, r3
 8001d58:	2101      	movs	r1, #1
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f000 f80c 	bl	8001d78 <dischargeAlgo>
	wakeup_idle();
 8001d60:	f7ff fb24 	bl	80013ac <wakeup_idle>
	ltc6811_wrcfg(NUM_DEVICES, config);
 8001d64:	4903      	ldr	r1, [pc, #12]	; (8001d74 <startBalance+0x34>)
 8001d66:	2001      	movs	r0, #1
 8001d68:	f7ff fc16 	bl	8001598 <ltc6811_wrcfg>
}
 8001d6c:	bf00      	nop
 8001d6e:	3708      	adds	r7, #8
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	20000000 	.word	0x20000000

08001d78 <dischargeAlgo>:
 * 
 * @param read_volt array containing cells volts. 
 * @param length count of readings. 
 * @param lowest read_volt's lowest cell reading
 */
void dischargeAlgo(uint16_t *read_volt, uint8_t total_ic, uint16_t lowest) {
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b086      	sub	sp, #24
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	460b      	mov	r3, r1
 8001d82:	70fb      	strb	r3, [r7, #3]
 8001d84:	4613      	mov	r3, r2
 8001d86:	803b      	strh	r3, [r7, #0]

	for (uint8_t dev_idx = 0; dev_idx < NUM_DEVICES; dev_idx++) {
 8001d88:	2300      	movs	r3, #0
 8001d8a:	75fb      	strb	r3, [r7, #23]
 8001d8c:	e030      	b.n	8001df0 <dischargeAlgo+0x78>
		// check if each cell is close within 50 mV of the lowest cell.
		uint8_t DCC[12];
		for (uint8_t cell_idx = 0; cell_idx < NUM_CELL_SERIES_GROUP; cell_idx++) {
 8001d8e:	2300      	movs	r3, #0
 8001d90:	75bb      	strb	r3, [r7, #22]
 8001d92:	e020      	b.n	8001dd6 <dischargeAlgo+0x5e>
			if (read_volt[dev_idx * NUM_CELL_SERIES_GROUP + cell_idx] - lowest
 8001d94:	7dfa      	ldrb	r2, [r7, #23]
 8001d96:	4613      	mov	r3, r2
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	4413      	add	r3, r2
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	461a      	mov	r2, r3
 8001da0:	7dbb      	ldrb	r3, [r7, #22]
 8001da2:	4413      	add	r3, r2
 8001da4:	005b      	lsls	r3, r3, #1
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	4413      	add	r3, r2
 8001daa:	881b      	ldrh	r3, [r3, #0]
 8001dac:	461a      	mov	r2, r3
 8001dae:	883b      	ldrh	r3, [r7, #0]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	2b32      	cmp	r3, #50	; 0x32
 8001db4:	dd06      	ble.n	8001dc4 <dischargeAlgo+0x4c>
					> 50) {
				DCC[cell_idx] = 1;
 8001db6:	7dbb      	ldrb	r3, [r7, #22]
 8001db8:	3318      	adds	r3, #24
 8001dba:	443b      	add	r3, r7
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	f803 2c10 	strb.w	r2, [r3, #-16]
 8001dc2:	e005      	b.n	8001dd0 <dischargeAlgo+0x58>
			} else {
				DCC[cell_idx] = 0;
 8001dc4:	7dbb      	ldrb	r3, [r7, #22]
 8001dc6:	3318      	adds	r3, #24
 8001dc8:	443b      	add	r3, r7
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f803 2c10 	strb.w	r2, [r3, #-16]
		for (uint8_t cell_idx = 0; cell_idx < NUM_CELL_SERIES_GROUP; cell_idx++) {
 8001dd0:	7dbb      	ldrb	r3, [r7, #22]
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	75bb      	strb	r3, [r7, #22]
 8001dd6:	7dbb      	ldrb	r3, [r7, #22]
 8001dd8:	2b0b      	cmp	r3, #11
 8001dda:	d9db      	bls.n	8001d94 <dischargeAlgo+0x1c>
			}
		}
		setCfg(dev_idx, (uint8_t*) DCC);
 8001ddc:	f107 0208 	add.w	r2, r7, #8
 8001de0:	7dfb      	ldrb	r3, [r7, #23]
 8001de2:	4611      	mov	r1, r2
 8001de4:	4618      	mov	r0, r3
 8001de6:	f000 f80b 	bl	8001e00 <setCfg>
	for (uint8_t dev_idx = 0; dev_idx < NUM_DEVICES; dev_idx++) {
 8001dea:	7dfb      	ldrb	r3, [r7, #23]
 8001dec:	3301      	adds	r3, #1
 8001dee:	75fb      	strb	r3, [r7, #23]
 8001df0:	7dfb      	ldrb	r3, [r7, #23]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d0cb      	beq.n	8001d8e <dischargeAlgo+0x16>
	}
}
 8001df6:	bf00      	nop
 8001df8:	bf00      	nop
 8001dfa:	3718      	adds	r7, #24
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <setCfg>:
 * setting configuration registers
 *
 * @param device index
 * @param array of DCC bits
 */
void setCfg(uint8_t dev_idx, uint8_t *DCC) {
 8001e00:	b480      	push	{r7}
 8001e02:	b085      	sub	sp, #20
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	4603      	mov	r3, r0
 8001e08:	6039      	str	r1, [r7, #0]
 8001e0a:	71fb      	strb	r3, [r7, #7]
	for (uint8_t cell_idx = 0; cell_idx < NUM_CELL_SERIES_GROUP; cell_idx++) {
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	73fb      	strb	r3, [r7, #15]
 8001e10:	e08a      	b.n	8001f28 <setCfg+0x128>
		if (DCC[cell_idx]) {
 8001e12:	7bfb      	ldrb	r3, [r7, #15]
 8001e14:	683a      	ldr	r2, [r7, #0]
 8001e16:	4413      	add	r3, r2
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d040      	beq.n	8001ea0 <setCfg+0xa0>
			if (cell_idx < 8) {
 8001e1e:	7bfb      	ldrb	r3, [r7, #15]
 8001e20:	2b07      	cmp	r3, #7
 8001e22:	d81c      	bhi.n	8001e5e <setCfg+0x5e>
				config[dev_idx][4] |= (1 << cell_idx);
 8001e24:	79fa      	ldrb	r2, [r7, #7]
 8001e26:	4945      	ldr	r1, [pc, #276]	; (8001f3c <setCfg+0x13c>)
 8001e28:	4613      	mov	r3, r2
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	4413      	add	r3, r2
 8001e2e:	005b      	lsls	r3, r3, #1
 8001e30:	440b      	add	r3, r1
 8001e32:	3304      	adds	r3, #4
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	b25a      	sxtb	r2, r3
 8001e38:	7bfb      	ldrb	r3, [r7, #15]
 8001e3a:	2101      	movs	r1, #1
 8001e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e40:	b25b      	sxtb	r3, r3
 8001e42:	4313      	orrs	r3, r2
 8001e44:	b25b      	sxtb	r3, r3
 8001e46:	79fa      	ldrb	r2, [r7, #7]
 8001e48:	b2d8      	uxtb	r0, r3
 8001e4a:	493c      	ldr	r1, [pc, #240]	; (8001f3c <setCfg+0x13c>)
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	005b      	lsls	r3, r3, #1
 8001e50:	4413      	add	r3, r2
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	440b      	add	r3, r1
 8001e56:	3304      	adds	r3, #4
 8001e58:	4602      	mov	r2, r0
 8001e5a:	701a      	strb	r2, [r3, #0]
 8001e5c:	e061      	b.n	8001f22 <setCfg+0x122>
			} else if (cell_idx >= 8) {
 8001e5e:	7bfb      	ldrb	r3, [r7, #15]
 8001e60:	2b07      	cmp	r3, #7
 8001e62:	d95e      	bls.n	8001f22 <setCfg+0x122>
				config[dev_idx][5] |= (1 << (cell_idx - 8));
 8001e64:	79fa      	ldrb	r2, [r7, #7]
 8001e66:	4935      	ldr	r1, [pc, #212]	; (8001f3c <setCfg+0x13c>)
 8001e68:	4613      	mov	r3, r2
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	4413      	add	r3, r2
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	440b      	add	r3, r1
 8001e72:	3305      	adds	r3, #5
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	b25a      	sxtb	r2, r3
 8001e78:	7bfb      	ldrb	r3, [r7, #15]
 8001e7a:	3b08      	subs	r3, #8
 8001e7c:	2101      	movs	r1, #1
 8001e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e82:	b25b      	sxtb	r3, r3
 8001e84:	4313      	orrs	r3, r2
 8001e86:	b25b      	sxtb	r3, r3
 8001e88:	79fa      	ldrb	r2, [r7, #7]
 8001e8a:	b2d8      	uxtb	r0, r3
 8001e8c:	492b      	ldr	r1, [pc, #172]	; (8001f3c <setCfg+0x13c>)
 8001e8e:	4613      	mov	r3, r2
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	4413      	add	r3, r2
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	440b      	add	r3, r1
 8001e98:	3305      	adds	r3, #5
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	701a      	strb	r2, [r3, #0]
 8001e9e:	e040      	b.n	8001f22 <setCfg+0x122>
			}
		} else {
			if (cell_idx < 8) {
 8001ea0:	7bfb      	ldrb	r3, [r7, #15]
 8001ea2:	2b07      	cmp	r3, #7
 8001ea4:	d81e      	bhi.n	8001ee4 <setCfg+0xe4>
				config[dev_idx][4] &= (~(1 << cell_idx));
 8001ea6:	79fa      	ldrb	r2, [r7, #7]
 8001ea8:	4924      	ldr	r1, [pc, #144]	; (8001f3c <setCfg+0x13c>)
 8001eaa:	4613      	mov	r3, r2
 8001eac:	005b      	lsls	r3, r3, #1
 8001eae:	4413      	add	r3, r2
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	440b      	add	r3, r1
 8001eb4:	3304      	adds	r3, #4
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	b25a      	sxtb	r2, r3
 8001eba:	7bfb      	ldrb	r3, [r7, #15]
 8001ebc:	2101      	movs	r1, #1
 8001ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec2:	b25b      	sxtb	r3, r3
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	b25b      	sxtb	r3, r3
 8001ec8:	4013      	ands	r3, r2
 8001eca:	b25b      	sxtb	r3, r3
 8001ecc:	79fa      	ldrb	r2, [r7, #7]
 8001ece:	b2d8      	uxtb	r0, r3
 8001ed0:	491a      	ldr	r1, [pc, #104]	; (8001f3c <setCfg+0x13c>)
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	4413      	add	r3, r2
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	440b      	add	r3, r1
 8001edc:	3304      	adds	r3, #4
 8001ede:	4602      	mov	r2, r0
 8001ee0:	701a      	strb	r2, [r3, #0]
 8001ee2:	e01e      	b.n	8001f22 <setCfg+0x122>
			} else {
				config[dev_idx][5] &= (~(1 << (cell_idx - 8)));
 8001ee4:	79fa      	ldrb	r2, [r7, #7]
 8001ee6:	4915      	ldr	r1, [pc, #84]	; (8001f3c <setCfg+0x13c>)
 8001ee8:	4613      	mov	r3, r2
 8001eea:	005b      	lsls	r3, r3, #1
 8001eec:	4413      	add	r3, r2
 8001eee:	005b      	lsls	r3, r3, #1
 8001ef0:	440b      	add	r3, r1
 8001ef2:	3305      	adds	r3, #5
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	b25a      	sxtb	r2, r3
 8001ef8:	7bfb      	ldrb	r3, [r7, #15]
 8001efa:	3b08      	subs	r3, #8
 8001efc:	2101      	movs	r1, #1
 8001efe:	fa01 f303 	lsl.w	r3, r1, r3
 8001f02:	b25b      	sxtb	r3, r3
 8001f04:	43db      	mvns	r3, r3
 8001f06:	b25b      	sxtb	r3, r3
 8001f08:	4013      	ands	r3, r2
 8001f0a:	b25b      	sxtb	r3, r3
 8001f0c:	79fa      	ldrb	r2, [r7, #7]
 8001f0e:	b2d8      	uxtb	r0, r3
 8001f10:	490a      	ldr	r1, [pc, #40]	; (8001f3c <setCfg+0x13c>)
 8001f12:	4613      	mov	r3, r2
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	4413      	add	r3, r2
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	440b      	add	r3, r1
 8001f1c:	3305      	adds	r3, #5
 8001f1e:	4602      	mov	r2, r0
 8001f20:	701a      	strb	r2, [r3, #0]
	for (uint8_t cell_idx = 0; cell_idx < NUM_CELL_SERIES_GROUP; cell_idx++) {
 8001f22:	7bfb      	ldrb	r3, [r7, #15]
 8001f24:	3301      	adds	r3, #1
 8001f26:	73fb      	strb	r3, [r7, #15]
 8001f28:	7bfb      	ldrb	r3, [r7, #15]
 8001f2a:	2b0b      	cmp	r3, #11
 8001f2c:	f67f af71 	bls.w	8001e12 <setCfg+0x12>
			}
		}
	}
}
 8001f30:	bf00      	nop
 8001f32:	bf00      	nop
 8001f34:	3714      	adds	r7, #20
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bc80      	pop	{r7}
 8001f3a:	4770      	bx	lr
 8001f3c:	20000000 	.word	0x20000000

08001f40 <MX_CAN2_Init>:
/* USER CODE END 0 */

CAN_HandleTypeDef hcan2;

/* CAN2 init function */
void MX_CAN2_Init(void) {
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
	/* USER CODE END CAN2_Init 0 */

	/* USER CODE BEGIN CAN2_Init 1 */

	/* USER CODE END CAN2_Init 1 */
	hcan2.Instance = CAN2;
 8001f44:	4b17      	ldr	r3, [pc, #92]	; (8001fa4 <MX_CAN2_Init+0x64>)
 8001f46:	4a18      	ldr	r2, [pc, #96]	; (8001fa8 <MX_CAN2_Init+0x68>)
 8001f48:	601a      	str	r2, [r3, #0]
	hcan2.Init.Prescaler = 9;
 8001f4a:	4b16      	ldr	r3, [pc, #88]	; (8001fa4 <MX_CAN2_Init+0x64>)
 8001f4c:	2209      	movs	r2, #9
 8001f4e:	605a      	str	r2, [r3, #4]
	hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001f50:	4b14      	ldr	r3, [pc, #80]	; (8001fa4 <MX_CAN2_Init+0x64>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	609a      	str	r2, [r3, #8]
	hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001f56:	4b13      	ldr	r3, [pc, #76]	; (8001fa4 <MX_CAN2_Init+0x64>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	60da      	str	r2, [r3, #12]
	hcan2.Init.TimeSeg1 = CAN_BS1_3TQ;
 8001f5c:	4b11      	ldr	r3, [pc, #68]	; (8001fa4 <MX_CAN2_Init+0x64>)
 8001f5e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f62:	611a      	str	r2, [r3, #16]
	hcan2.Init.TimeSeg2 = CAN_BS2_4TQ;
 8001f64:	4b0f      	ldr	r3, [pc, #60]	; (8001fa4 <MX_CAN2_Init+0x64>)
 8001f66:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8001f6a:	615a      	str	r2, [r3, #20]
	hcan2.Init.TimeTriggeredMode = DISABLE;
 8001f6c:	4b0d      	ldr	r3, [pc, #52]	; (8001fa4 <MX_CAN2_Init+0x64>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	761a      	strb	r2, [r3, #24]
	hcan2.Init.AutoBusOff = DISABLE;
 8001f72:	4b0c      	ldr	r3, [pc, #48]	; (8001fa4 <MX_CAN2_Init+0x64>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	765a      	strb	r2, [r3, #25]
	hcan2.Init.AutoWakeUp = DISABLE;
 8001f78:	4b0a      	ldr	r3, [pc, #40]	; (8001fa4 <MX_CAN2_Init+0x64>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	769a      	strb	r2, [r3, #26]
	hcan2.Init.AutoRetransmission = DISABLE;
 8001f7e:	4b09      	ldr	r3, [pc, #36]	; (8001fa4 <MX_CAN2_Init+0x64>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	76da      	strb	r2, [r3, #27]
	hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001f84:	4b07      	ldr	r3, [pc, #28]	; (8001fa4 <MX_CAN2_Init+0x64>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	771a      	strb	r2, [r3, #28]
	hcan2.Init.TransmitFifoPriority = DISABLE;
 8001f8a:	4b06      	ldr	r3, [pc, #24]	; (8001fa4 <MX_CAN2_Init+0x64>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan2) != HAL_OK) {
 8001f90:	4804      	ldr	r0, [pc, #16]	; (8001fa4 <MX_CAN2_Init+0x64>)
 8001f92:	f001 fb70 	bl	8003676 <HAL_CAN_Init>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <MX_CAN2_Init+0x60>
		Error_Handler();
 8001f9c:	f000 fcc0 	bl	8002920 <Error_Handler>
	}
	/* USER CODE BEGIN CAN2_Init 2 */

	/* USER CODE END CAN2_Init 2 */

}
 8001fa0:	bf00      	nop
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	200002cc 	.word	0x200002cc
 8001fa8:	40006800 	.word	0x40006800

08001fac <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef *canHandle) {
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b08a      	sub	sp, #40	; 0x28
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001fb4:	f107 0318 	add.w	r3, r7, #24
 8001fb8:	2200      	movs	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]
 8001fbc:	605a      	str	r2, [r3, #4]
 8001fbe:	609a      	str	r2, [r3, #8]
 8001fc0:	60da      	str	r2, [r3, #12]
	if (canHandle->Instance == CAN2) {
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a22      	ldr	r2, [pc, #136]	; (8002050 <HAL_CAN_MspInit+0xa4>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d13d      	bne.n	8002048 <HAL_CAN_MspInit+0x9c>
		/* USER CODE BEGIN CAN2_MspInit 0 */

		/* USER CODE END CAN2_MspInit 0 */
		/* CAN2 clock enable */
		__HAL_RCC_CAN2_CLK_ENABLE();
 8001fcc:	4b21      	ldr	r3, [pc, #132]	; (8002054 <HAL_CAN_MspInit+0xa8>)
 8001fce:	69db      	ldr	r3, [r3, #28]
 8001fd0:	4a20      	ldr	r2, [pc, #128]	; (8002054 <HAL_CAN_MspInit+0xa8>)
 8001fd2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001fd6:	61d3      	str	r3, [r2, #28]
 8001fd8:	4b1e      	ldr	r3, [pc, #120]	; (8002054 <HAL_CAN_MspInit+0xa8>)
 8001fda:	69db      	ldr	r3, [r3, #28]
 8001fdc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001fe0:	617b      	str	r3, [r7, #20]
 8001fe2:	697b      	ldr	r3, [r7, #20]
		__HAL_RCC_CAN1_CLK_ENABLE();
 8001fe4:	4b1b      	ldr	r3, [pc, #108]	; (8002054 <HAL_CAN_MspInit+0xa8>)
 8001fe6:	69db      	ldr	r3, [r3, #28]
 8001fe8:	4a1a      	ldr	r2, [pc, #104]	; (8002054 <HAL_CAN_MspInit+0xa8>)
 8001fea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001fee:	61d3      	str	r3, [r2, #28]
 8001ff0:	4b18      	ldr	r3, [pc, #96]	; (8002054 <HAL_CAN_MspInit+0xa8>)
 8001ff2:	69db      	ldr	r3, [r3, #28]
 8001ff4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ff8:	613b      	str	r3, [r7, #16]
 8001ffa:	693b      	ldr	r3, [r7, #16]

		__HAL_RCC_GPIOB_CLK_ENABLE();
 8001ffc:	4b15      	ldr	r3, [pc, #84]	; (8002054 <HAL_CAN_MspInit+0xa8>)
 8001ffe:	699b      	ldr	r3, [r3, #24]
 8002000:	4a14      	ldr	r2, [pc, #80]	; (8002054 <HAL_CAN_MspInit+0xa8>)
 8002002:	f043 0308 	orr.w	r3, r3, #8
 8002006:	6193      	str	r3, [r2, #24]
 8002008:	4b12      	ldr	r3, [pc, #72]	; (8002054 <HAL_CAN_MspInit+0xa8>)
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	f003 0308 	and.w	r3, r3, #8
 8002010:	60fb      	str	r3, [r7, #12]
 8002012:	68fb      	ldr	r3, [r7, #12]
		/**CAN2 GPIO Configuration
		 PB12     ------> CAN2_RX
		 PB13     ------> CAN2_TX
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002014:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002018:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800201a:	2300      	movs	r3, #0
 800201c:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201e:	2300      	movs	r3, #0
 8002020:	623b      	str	r3, [r7, #32]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002022:	f107 0318 	add.w	r3, r7, #24
 8002026:	4619      	mov	r1, r3
 8002028:	480b      	ldr	r0, [pc, #44]	; (8002058 <HAL_CAN_MspInit+0xac>)
 800202a:	f001 fe65 	bl	8003cf8 <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_13;
 800202e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002032:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002034:	2302      	movs	r3, #2
 8002036:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002038:	2303      	movs	r3, #3
 800203a:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800203c:	f107 0318 	add.w	r3, r7, #24
 8002040:	4619      	mov	r1, r3
 8002042:	4805      	ldr	r0, [pc, #20]	; (8002058 <HAL_CAN_MspInit+0xac>)
 8002044:	f001 fe58 	bl	8003cf8 <HAL_GPIO_Init>

		/* USER CODE BEGIN CAN2_MspInit 1 */

		/* USER CODE END CAN2_MspInit 1 */
	}
}
 8002048:	bf00      	nop
 800204a:	3728      	adds	r7, #40	; 0x28
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	40006800 	.word	0x40006800
 8002054:	40021000 	.word	0x40021000
 8002058:	40010c00 	.word	0x40010c00

0800205c <CAN_Start>:
	}
}

/* USER CODE BEGIN 1 */

HAL_StatusTypeDef CAN_Start() {
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
	return HAL_CAN_Start(&hcan2);
 8002060:	4802      	ldr	r0, [pc, #8]	; (800206c <CAN_Start+0x10>)
 8002062:	f001 fc03 	bl	800386c <HAL_CAN_Start>
 8002066:	4603      	mov	r3, r0
}
 8002068:	4618      	mov	r0, r3
 800206a:	bd80      	pop	{r7, pc}
 800206c:	200002cc 	.word	0x200002cc

08002070 <CAN_Activate>:

HAL_StatusTypeDef CAN_Activate() {
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
	return HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 8002074:	2102      	movs	r1, #2
 8002076:	4803      	ldr	r0, [pc, #12]	; (8002084 <CAN_Activate+0x14>)
 8002078:	f001 fd0b 	bl	8003a92 <HAL_CAN_ActivateNotification>
 800207c:	4603      	mov	r3, r0
}
 800207e:	4618      	mov	r0, r3
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	200002cc 	.word	0x200002cc

08002088 <CAN_Send>:

HAL_StatusTypeDef CAN_Send(struct CANMessage *ptr) {
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
	return HAL_CAN_AddTxMessage(&hcan2, &ptr->TxHeader, (uint8_t*) ptr->data,
 8002090:	6879      	ldr	r1, [r7, #4]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f103 021c 	add.w	r2, r3, #28
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	3318      	adds	r3, #24
 800209c:	4803      	ldr	r0, [pc, #12]	; (80020ac <CAN_Send+0x24>)
 800209e:	f001 fc29 	bl	80038f4 <HAL_CAN_AddTxMessage>
 80020a2:	4603      	mov	r3, r0
			&ptr->TxMailbox);
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3708      	adds	r7, #8
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	200002cc 	.word	0x200002cc

080020b0 <CAN_SettingsInit>:

void CAN_SettingsInit(struct CANMessage *ptr) {
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
	CAN_Start();
 80020b8:	f7ff ffd0 	bl	800205c <CAN_Start>
	CAN_Activate();
 80020bc:	f7ff ffd8 	bl	8002070 <CAN_Activate>
	ptr->TxHeader.IDE = CAN_ID_STD;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	609a      	str	r2, [r3, #8]
	ptr->TxHeader.StdId = 0x00;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	601a      	str	r2, [r3, #0]
	ptr->TxHeader.RTR = CAN_RTR_DATA;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	60da      	str	r2, [r3, #12]
	ptr->TxHeader.DLC = 8;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2208      	movs	r2, #8
 80020d6:	611a      	str	r2, [r3, #16]
}
 80020d8:	bf00      	nop
 80020da:	3708      	adds	r7, #8
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <setCANId>:

void setCANId(struct CANMessage *ptr, uint32_t id) {
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	6039      	str	r1, [r7, #0]
	ptr->TxHeader.StdId = id;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	683a      	ldr	r2, [r7, #0]
 80020ee:	601a      	str	r2, [r3, #0]
}
 80020f0:	bf00      	nop
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bc80      	pop	{r7}
 80020f8:	4770      	bx	lr

080020fa <CAN_Send_Voltage>:

void CAN_Send_Voltage(struct CANMessage *ptr, uint16_t *read_volt) {
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b086      	sub	sp, #24
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
 8002102:	6039      	str	r1, [r7, #0]
	uint16_t CAN_ID = 0x630;
 8002104:	f44f 63c6 	mov.w	r3, #1584	; 0x630
 8002108:	82fb      	strh	r3, [r7, #22]
	setCANId(ptr, CAN_ID);
 800210a:	8afb      	ldrh	r3, [r7, #22]
 800210c:	4619      	mov	r1, r3
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f7ff ffe6 	bl	80020e0 <setCANId>
	for (int i = 0; i < NUM_CELLS; i++) {
 8002114:	2300      	movs	r3, #0
 8002116:	613b      	str	r3, [r7, #16]
 8002118:	e074      	b.n	8002204 <CAN_Send_Voltage+0x10a>
		if (i % 4 == 0) {
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	f003 0303 	and.w	r3, r3, #3
 8002120:	2b00      	cmp	r3, #0
 8002122:	d156      	bne.n	80021d2 <CAN_Send_Voltage+0xd8>
			uint8_t temp_volt = i;
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	73fb      	strb	r3, [r7, #15]
			ptr->data[0] = read_volt[temp_volt];
 8002128:	7bfb      	ldrb	r3, [r7, #15]
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	683a      	ldr	r2, [r7, #0]
 800212e:	4413      	add	r3, r2
 8002130:	881b      	ldrh	r3, [r3, #0]
 8002132:	b2da      	uxtb	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	771a      	strb	r2, [r3, #28]
			ptr->data[1] = read_volt[temp_volt] >> 8;
 8002138:	7bfb      	ldrb	r3, [r7, #15]
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	683a      	ldr	r2, [r7, #0]
 800213e:	4413      	add	r3, r2
 8002140:	881b      	ldrh	r3, [r3, #0]
 8002142:	0a1b      	lsrs	r3, r3, #8
 8002144:	b29b      	uxth	r3, r3
 8002146:	b2da      	uxtb	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	775a      	strb	r2, [r3, #29]
			temp_volt += 1;
 800214c:	7bfb      	ldrb	r3, [r7, #15]
 800214e:	3301      	adds	r3, #1
 8002150:	73fb      	strb	r3, [r7, #15]
			ptr->data[2] = read_volt[temp_volt];
 8002152:	7bfb      	ldrb	r3, [r7, #15]
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	683a      	ldr	r2, [r7, #0]
 8002158:	4413      	add	r3, r2
 800215a:	881b      	ldrh	r3, [r3, #0]
 800215c:	b2da      	uxtb	r2, r3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	779a      	strb	r2, [r3, #30]
			ptr->data[3] = read_volt[temp_volt] >> 8;
 8002162:	7bfb      	ldrb	r3, [r7, #15]
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	683a      	ldr	r2, [r7, #0]
 8002168:	4413      	add	r3, r2
 800216a:	881b      	ldrh	r3, [r3, #0]
 800216c:	0a1b      	lsrs	r3, r3, #8
 800216e:	b29b      	uxth	r3, r3
 8002170:	b2da      	uxtb	r2, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	77da      	strb	r2, [r3, #31]
			temp_volt += 1;
 8002176:	7bfb      	ldrb	r3, [r7, #15]
 8002178:	3301      	adds	r3, #1
 800217a:	73fb      	strb	r3, [r7, #15]
			ptr->data[4] = read_volt[temp_volt];
 800217c:	7bfb      	ldrb	r3, [r7, #15]
 800217e:	005b      	lsls	r3, r3, #1
 8002180:	683a      	ldr	r2, [r7, #0]
 8002182:	4413      	add	r3, r2
 8002184:	881b      	ldrh	r3, [r3, #0]
 8002186:	b2da      	uxtb	r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f883 2020 	strb.w	r2, [r3, #32]
			ptr->data[5] = read_volt[temp_volt] >> 8;
 800218e:	7bfb      	ldrb	r3, [r7, #15]
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	683a      	ldr	r2, [r7, #0]
 8002194:	4413      	add	r3, r2
 8002196:	881b      	ldrh	r3, [r3, #0]
 8002198:	0a1b      	lsrs	r3, r3, #8
 800219a:	b29b      	uxth	r3, r3
 800219c:	b2da      	uxtb	r2, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			temp_volt += 1;
 80021a4:	7bfb      	ldrb	r3, [r7, #15]
 80021a6:	3301      	adds	r3, #1
 80021a8:	73fb      	strb	r3, [r7, #15]
			ptr->data[6] = read_volt[temp_volt];
 80021aa:	7bfb      	ldrb	r3, [r7, #15]
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	683a      	ldr	r2, [r7, #0]
 80021b0:	4413      	add	r3, r2
 80021b2:	881b      	ldrh	r3, [r3, #0]
 80021b4:	b2da      	uxtb	r2, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			ptr->data[7] = read_volt[temp_volt] >> 8;
 80021bc:	7bfb      	ldrb	r3, [r7, #15]
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	683a      	ldr	r2, [r7, #0]
 80021c2:	4413      	add	r3, r2
 80021c4:	881b      	ldrh	r3, [r3, #0]
 80021c6:	0a1b      	lsrs	r3, r3, #8
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	b2da      	uxtb	r2, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		}
		if (i > 0 && i % 4 == 0) {
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	dd0c      	ble.n	80021f2 <CAN_Send_Voltage+0xf8>
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	f003 0303 	and.w	r3, r3, #3
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d107      	bne.n	80021f2 <CAN_Send_Voltage+0xf8>
			CAN_ID = CAN_ID + 0x01;
 80021e2:	8afb      	ldrh	r3, [r7, #22]
 80021e4:	3301      	adds	r3, #1
 80021e6:	82fb      	strh	r3, [r7, #22]
			setCANId(ptr, CAN_ID);
 80021e8:	8afb      	ldrh	r3, [r7, #22]
 80021ea:	4619      	mov	r1, r3
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f7ff ff77 	bl	80020e0 <setCANId>
		}
		HAL_Delay(10);
 80021f2:	200a      	movs	r0, #10
 80021f4:	f001 f80a 	bl	800320c <HAL_Delay>
		CAN_Send(ptr);
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f7ff ff45 	bl	8002088 <CAN_Send>
	for (int i = 0; i < NUM_CELLS; i++) {
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	3301      	adds	r3, #1
 8002202:	613b      	str	r3, [r7, #16]
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	2b0b      	cmp	r3, #11
 8002208:	dd87      	ble.n	800211a <CAN_Send_Voltage+0x20>
	}

}
 800220a:	bf00      	nop
 800220c:	bf00      	nop
 800220e:	3718      	adds	r7, #24
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}

08002214 <CAN_Send_Temperature>:

void CAN_Send_Temperature(struct CANMessage *ptr, uint16_t *read_temp) {
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	6039      	str	r1, [r7, #0]
	uint16_t CAN_ID = 0x680;
 800221e:	f44f 63d0 	mov.w	r3, #1664	; 0x680
 8002222:	81fb      	strh	r3, [r7, #14]
	setCANId(ptr, CAN_ID);
 8002224:	89fb      	ldrh	r3, [r7, #14]
 8002226:	4619      	mov	r1, r3
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f7ff ff59 	bl	80020e0 <setCANId>
	for (uint8_t i = 0; i < NUM_THERM_TOTAL; i++) {
 800222e:	2300      	movs	r3, #0
 8002230:	737b      	strb	r3, [r7, #13]
 8002232:	e076      	b.n	8002322 <CAN_Send_Temperature+0x10e>
		if (i % 4 == 0) {
 8002234:	7b7b      	ldrb	r3, [r7, #13]
 8002236:	f003 0303 	and.w	r3, r3, #3
 800223a:	b2db      	uxtb	r3, r3
 800223c:	2b00      	cmp	r3, #0
 800223e:	d156      	bne.n	80022ee <CAN_Send_Temperature+0xda>
			uint8_t temp_volt = i;
 8002240:	7b7b      	ldrb	r3, [r7, #13]
 8002242:	733b      	strb	r3, [r7, #12]
			ptr->data[0] = read_temp[temp_volt];
 8002244:	7b3b      	ldrb	r3, [r7, #12]
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	683a      	ldr	r2, [r7, #0]
 800224a:	4413      	add	r3, r2
 800224c:	881b      	ldrh	r3, [r3, #0]
 800224e:	b2da      	uxtb	r2, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	771a      	strb	r2, [r3, #28]
			ptr->data[1] = read_temp[temp_volt] >> 8;
 8002254:	7b3b      	ldrb	r3, [r7, #12]
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	683a      	ldr	r2, [r7, #0]
 800225a:	4413      	add	r3, r2
 800225c:	881b      	ldrh	r3, [r3, #0]
 800225e:	0a1b      	lsrs	r3, r3, #8
 8002260:	b29b      	uxth	r3, r3
 8002262:	b2da      	uxtb	r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	775a      	strb	r2, [r3, #29]
			temp_volt += 1;
 8002268:	7b3b      	ldrb	r3, [r7, #12]
 800226a:	3301      	adds	r3, #1
 800226c:	733b      	strb	r3, [r7, #12]
			ptr->data[2] = read_temp[temp_volt];
 800226e:	7b3b      	ldrb	r3, [r7, #12]
 8002270:	005b      	lsls	r3, r3, #1
 8002272:	683a      	ldr	r2, [r7, #0]
 8002274:	4413      	add	r3, r2
 8002276:	881b      	ldrh	r3, [r3, #0]
 8002278:	b2da      	uxtb	r2, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	779a      	strb	r2, [r3, #30]
			ptr->data[3] = read_temp[temp_volt] >> 8;
 800227e:	7b3b      	ldrb	r3, [r7, #12]
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	683a      	ldr	r2, [r7, #0]
 8002284:	4413      	add	r3, r2
 8002286:	881b      	ldrh	r3, [r3, #0]
 8002288:	0a1b      	lsrs	r3, r3, #8
 800228a:	b29b      	uxth	r3, r3
 800228c:	b2da      	uxtb	r2, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	77da      	strb	r2, [r3, #31]
			temp_volt += 1;
 8002292:	7b3b      	ldrb	r3, [r7, #12]
 8002294:	3301      	adds	r3, #1
 8002296:	733b      	strb	r3, [r7, #12]
			ptr->data[4] = read_temp[temp_volt];
 8002298:	7b3b      	ldrb	r3, [r7, #12]
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	683a      	ldr	r2, [r7, #0]
 800229e:	4413      	add	r3, r2
 80022a0:	881b      	ldrh	r3, [r3, #0]
 80022a2:	b2da      	uxtb	r2, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f883 2020 	strb.w	r2, [r3, #32]
			ptr->data[5] = read_temp[temp_volt] >> 8;
 80022aa:	7b3b      	ldrb	r3, [r7, #12]
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	683a      	ldr	r2, [r7, #0]
 80022b0:	4413      	add	r3, r2
 80022b2:	881b      	ldrh	r3, [r3, #0]
 80022b4:	0a1b      	lsrs	r3, r3, #8
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	b2da      	uxtb	r2, r3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			temp_volt += 1;
 80022c0:	7b3b      	ldrb	r3, [r7, #12]
 80022c2:	3301      	adds	r3, #1
 80022c4:	733b      	strb	r3, [r7, #12]
			ptr->data[6] = read_temp[temp_volt];
 80022c6:	7b3b      	ldrb	r3, [r7, #12]
 80022c8:	005b      	lsls	r3, r3, #1
 80022ca:	683a      	ldr	r2, [r7, #0]
 80022cc:	4413      	add	r3, r2
 80022ce:	881b      	ldrh	r3, [r3, #0]
 80022d0:	b2da      	uxtb	r2, r3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			ptr->data[7] = read_temp[temp_volt] >> 8;
 80022d8:	7b3b      	ldrb	r3, [r7, #12]
 80022da:	005b      	lsls	r3, r3, #1
 80022dc:	683a      	ldr	r2, [r7, #0]
 80022de:	4413      	add	r3, r2
 80022e0:	881b      	ldrh	r3, [r3, #0]
 80022e2:	0a1b      	lsrs	r3, r3, #8
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	b2da      	uxtb	r2, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		}
		if (i > 0 && i % 4 == 0) {
 80022ee:	7b7b      	ldrb	r3, [r7, #13]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d00d      	beq.n	8002310 <CAN_Send_Temperature+0xfc>
 80022f4:	7b7b      	ldrb	r3, [r7, #13]
 80022f6:	f003 0303 	and.w	r3, r3, #3
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d107      	bne.n	8002310 <CAN_Send_Temperature+0xfc>
			CAN_ID = CAN_ID + 0x01;
 8002300:	89fb      	ldrh	r3, [r7, #14]
 8002302:	3301      	adds	r3, #1
 8002304:	81fb      	strh	r3, [r7, #14]
			setCANId(ptr, CAN_ID);
 8002306:	89fb      	ldrh	r3, [r7, #14]
 8002308:	4619      	mov	r1, r3
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f7ff fee8 	bl	80020e0 <setCANId>
		}
		HAL_Delay(10);
 8002310:	200a      	movs	r0, #10
 8002312:	f000 ff7b 	bl	800320c <HAL_Delay>
		CAN_Send(ptr);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f7ff feb6 	bl	8002088 <CAN_Send>
	for (uint8_t i = 0; i < NUM_THERM_TOTAL; i++) {
 800231c:	7b7b      	ldrb	r3, [r7, #13]
 800231e:	3301      	adds	r3, #1
 8002320:	737b      	strb	r3, [r7, #13]
 8002322:	7b7b      	ldrb	r3, [r7, #13]
 8002324:	2b0b      	cmp	r3, #11
 8002326:	d985      	bls.n	8002234 <CAN_Send_Temperature+0x20>
	}

}
 8002328:	bf00      	nop
 800232a:	bf00      	nop
 800232c:	3710      	adds	r7, #16
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <CAN_Send_Cell_Summary>:

void CAN_Send_Cell_Summary(struct CANMessage *ptr,
		struct batteryModuleVoltage *batt) {
 8002332:	b580      	push	{r7, lr}
 8002334:	b084      	sub	sp, #16
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
 800233a:	6039      	str	r1, [r7, #0]
	uint16_t CAN_ID = 0x622;
 800233c:	f240 6322 	movw	r3, #1570	; 0x622
 8002340:	81fb      	strh	r3, [r7, #14]
	setCANId(ptr, CAN_ID);
 8002342:	89fb      	ldrh	r3, [r7, #14]
 8002344:	4619      	mov	r1, r3
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f7ff feca 	bl	80020e0 <setCANId>

	ptr->data[0] = batt->cell_volt_highest;
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	895b      	ldrh	r3, [r3, #10]
 8002350:	b2da      	uxtb	r2, r3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	771a      	strb	r2, [r3, #28]
	ptr->data[1] = (batt->cell_volt_highest) >> 8;
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	895b      	ldrh	r3, [r3, #10]
 800235a:	0a1b      	lsrs	r3, r3, #8
 800235c:	b29b      	uxth	r3, r3
 800235e:	b2da      	uxtb	r2, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	775a      	strb	r2, [r3, #29]
	ptr->data[2] = batt->cell_volt_lowest;
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	891b      	ldrh	r3, [r3, #8]
 8002368:	b2da      	uxtb	r2, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	779a      	strb	r2, [r3, #30]
	ptr->data[3] = (batt->cell_volt_lowest) >> 8;
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	891b      	ldrh	r3, [r3, #8]
 8002372:	0a1b      	lsrs	r3, r3, #8
 8002374:	b29b      	uxth	r3, r3
 8002376:	b2da      	uxtb	r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	77da      	strb	r2, [r3, #31]
	ptr->data[4] = batt->cell_temp_highest;
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	89db      	ldrh	r3, [r3, #14]
 8002380:	b2da      	uxtb	r2, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f883 2020 	strb.w	r2, [r3, #32]
	ptr->data[5] = (batt->cell_temp_highest) >> 8;
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	89db      	ldrh	r3, [r3, #14]
 800238c:	0a1b      	lsrs	r3, r3, #8
 800238e:	b29b      	uxth	r3, r3
 8002390:	b2da      	uxtb	r2, r3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	ptr->data[6] = batt->cell_temp_lowest;
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	899b      	ldrh	r3, [r3, #12]
 800239c:	b2da      	uxtb	r2, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	ptr->data[7] = (batt->cell_temp_lowest) >> 8;
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	899b      	ldrh	r3, [r3, #12]
 80023a8:	0a1b      	lsrs	r3, r3, #8
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	b2da      	uxtb	r2, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

	HAL_Delay(10);
 80023b4:	200a      	movs	r0, #10
 80023b6:	f000 ff29 	bl	800320c <HAL_Delay>
	CAN_Send(ptr);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f7ff fe64 	bl	8002088 <CAN_Send>
}
 80023c0:	bf00      	nop
 80023c2:	3710      	adds	r7, #16
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <CAN_Send_Safety_Checker>:

void CAN_Send_Safety_Checker(struct CANMessage *ptr, uint8_t* faults, uint8_t* warnings){
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b086      	sub	sp, #24
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	60b9      	str	r1, [r7, #8]
 80023d2:	607a      	str	r2, [r7, #4]
	uint16_t CAN_ID = 0x600;
 80023d4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80023d8:	82fb      	strh	r3, [r7, #22]
	setCANId(ptr, CAN_ID);
 80023da:	8afb      	ldrh	r3, [r7, #22]
 80023dc:	4619      	mov	r1, r3
 80023de:	68f8      	ldr	r0, [r7, #12]
 80023e0:	f7ff fe7e 	bl	80020e0 <setCANId>
	ptr->data[0] = *faults;
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	781a      	ldrb	r2, [r3, #0]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	771a      	strb	r2, [r3, #28]
	ptr->data[1] = *warnings;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	781a      	ldrb	r2, [r3, #0]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	775a      	strb	r2, [r3, #29]
	HAL_Delay(10);
 80023f4:	200a      	movs	r0, #10
 80023f6:	f000 ff09 	bl	800320c <HAL_Delay>
	CAN_Send(ptr);
 80023fa:	68f8      	ldr	r0, [r7, #12]
 80023fc:	f7ff fe44 	bl	8002088 <CAN_Send>
}
 8002400:	bf00      	nop
 8002402:	3718      	adds	r7, #24
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <MX_GPIO_Init>:
        * EXTI
     PB8   ------> CAN1_RX
     PB9   ------> CAN1_TX
*/
void MX_GPIO_Init(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b08a      	sub	sp, #40	; 0x28
 800240c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800240e:	f107 0314 	add.w	r3, r7, #20
 8002412:	2200      	movs	r2, #0
 8002414:	601a      	str	r2, [r3, #0]
 8002416:	605a      	str	r2, [r3, #4]
 8002418:	609a      	str	r2, [r3, #8]
 800241a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800241c:	4b52      	ldr	r3, [pc, #328]	; (8002568 <MX_GPIO_Init+0x160>)
 800241e:	699b      	ldr	r3, [r3, #24]
 8002420:	4a51      	ldr	r2, [pc, #324]	; (8002568 <MX_GPIO_Init+0x160>)
 8002422:	f043 0310 	orr.w	r3, r3, #16
 8002426:	6193      	str	r3, [r2, #24]
 8002428:	4b4f      	ldr	r3, [pc, #316]	; (8002568 <MX_GPIO_Init+0x160>)
 800242a:	699b      	ldr	r3, [r3, #24]
 800242c:	f003 0310 	and.w	r3, r3, #16
 8002430:	613b      	str	r3, [r7, #16]
 8002432:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002434:	4b4c      	ldr	r3, [pc, #304]	; (8002568 <MX_GPIO_Init+0x160>)
 8002436:	699b      	ldr	r3, [r3, #24]
 8002438:	4a4b      	ldr	r2, [pc, #300]	; (8002568 <MX_GPIO_Init+0x160>)
 800243a:	f043 0320 	orr.w	r3, r3, #32
 800243e:	6193      	str	r3, [r2, #24]
 8002440:	4b49      	ldr	r3, [pc, #292]	; (8002568 <MX_GPIO_Init+0x160>)
 8002442:	699b      	ldr	r3, [r3, #24]
 8002444:	f003 0320 	and.w	r3, r3, #32
 8002448:	60fb      	str	r3, [r7, #12]
 800244a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800244c:	4b46      	ldr	r3, [pc, #280]	; (8002568 <MX_GPIO_Init+0x160>)
 800244e:	699b      	ldr	r3, [r3, #24]
 8002450:	4a45      	ldr	r2, [pc, #276]	; (8002568 <MX_GPIO_Init+0x160>)
 8002452:	f043 0304 	orr.w	r3, r3, #4
 8002456:	6193      	str	r3, [r2, #24]
 8002458:	4b43      	ldr	r3, [pc, #268]	; (8002568 <MX_GPIO_Init+0x160>)
 800245a:	699b      	ldr	r3, [r3, #24]
 800245c:	f003 0304 	and.w	r3, r3, #4
 8002460:	60bb      	str	r3, [r7, #8]
 8002462:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002464:	4b40      	ldr	r3, [pc, #256]	; (8002568 <MX_GPIO_Init+0x160>)
 8002466:	699b      	ldr	r3, [r3, #24]
 8002468:	4a3f      	ldr	r2, [pc, #252]	; (8002568 <MX_GPIO_Init+0x160>)
 800246a:	f043 0308 	orr.w	r3, r3, #8
 800246e:	6193      	str	r3, [r2, #24]
 8002470:	4b3d      	ldr	r3, [pc, #244]	; (8002568 <MX_GPIO_Init+0x160>)
 8002472:	699b      	ldr	r3, [r3, #24]
 8002474:	f003 0308 	and.w	r3, r3, #8
 8002478:	607b      	str	r3, [r7, #4]
 800247a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LTC_nCS_GPIO_Port, LTC_nCS_Pin, GPIO_PIN_RESET);
 800247c:	2200      	movs	r2, #0
 800247e:	2110      	movs	r1, #16
 8002480:	483a      	ldr	r0, [pc, #232]	; (800256c <MX_GPIO_Init+0x164>)
 8002482:	f001 fdbd 	bl	8004000 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8002486:	2200      	movs	r2, #0
 8002488:	2102      	movs	r1, #2
 800248a:	4839      	ldr	r0, [pc, #228]	; (8002570 <MX_GPIO_Init+0x168>)
 800248c:	f001 fdb8 	bl	8004000 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCU_HEARTBEAT_LED_GPIO_Port, MCU_HEARTBEAT_LED_Pin, GPIO_PIN_RESET);
 8002490:	2200      	movs	r2, #0
 8002492:	2140      	movs	r1, #64	; 0x40
 8002494:	4837      	ldr	r0, [pc, #220]	; (8002574 <MX_GPIO_Init+0x16c>)
 8002496:	f001 fdb3 	bl	8004000 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LTC_nCS_Pin;
 800249a:	2310      	movs	r3, #16
 800249c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800249e:	2301      	movs	r3, #1
 80024a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a2:	2300      	movs	r3, #0
 80024a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024a6:	2302      	movs	r3, #2
 80024a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LTC_nCS_GPIO_Port, &GPIO_InitStruct);
 80024aa:	f107 0314 	add.w	r3, r7, #20
 80024ae:	4619      	mov	r1, r3
 80024b0:	482e      	ldr	r0, [pc, #184]	; (800256c <MX_GPIO_Init+0x164>)
 80024b2:	f001 fc21 	bl	8003cf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80024b6:	2302      	movs	r3, #2
 80024b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024ba:	2301      	movs	r3, #1
 80024bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024be:	2300      	movs	r3, #0
 80024c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c2:	2302      	movs	r3, #2
 80024c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024c6:	f107 0314 	add.w	r3, r7, #20
 80024ca:	4619      	mov	r1, r3
 80024cc:	4828      	ldr	r0, [pc, #160]	; (8002570 <MX_GPIO_Init+0x168>)
 80024ce:	f001 fc13 	bl	8003cf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MCU_HEARTBEAT_LED_Pin;
 80024d2:	2340      	movs	r3, #64	; 0x40
 80024d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024d6:	2301      	movs	r3, #1
 80024d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024da:	2300      	movs	r3, #0
 80024dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024de:	2302      	movs	r3, #2
 80024e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MCU_HEARTBEAT_LED_GPIO_Port, &GPIO_InitStruct);
 80024e2:	f107 0314 	add.w	r3, r7, #20
 80024e6:	4619      	mov	r1, r3
 80024e8:	4822      	ldr	r0, [pc, #136]	; (8002574 <MX_GPIO_Init+0x16c>)
 80024ea:	f001 fc05 	bl	8003cf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PMUX_ST_Pin;
 80024ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024f4:	2300      	movs	r3, #0
 80024f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f8:	2300      	movs	r3, #0
 80024fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PMUX_ST_GPIO_Port, &GPIO_InitStruct);
 80024fc:	f107 0314 	add.w	r3, r7, #20
 8002500:	4619      	mov	r1, r3
 8002502:	481c      	ldr	r0, [pc, #112]	; (8002574 <MX_GPIO_Init+0x16c>)
 8002504:	f001 fbf8 	bl	8003cf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002508:	f44f 7380 	mov.w	r3, #256	; 0x100
 800250c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800250e:	2300      	movs	r3, #0
 8002510:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002512:	2300      	movs	r3, #0
 8002514:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002516:	f107 0314 	add.w	r3, r7, #20
 800251a:	4619      	mov	r1, r3
 800251c:	4814      	ldr	r0, [pc, #80]	; (8002570 <MX_GPIO_Init+0x168>)
 800251e:	f001 fbeb 	bl	8003cf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002522:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002526:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002528:	2302      	movs	r3, #2
 800252a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800252c:	2303      	movs	r3, #3
 800252e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002530:	f107 0314 	add.w	r3, r7, #20
 8002534:	4619      	mov	r1, r3
 8002536:	480e      	ldr	r0, [pc, #56]	; (8002570 <MX_GPIO_Init+0x168>)
 8002538:	f001 fbde 	bl	8003cf8 <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_CAN1_2();
 800253c:	4b0e      	ldr	r3, [pc, #56]	; (8002578 <MX_GPIO_Init+0x170>)
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	627b      	str	r3, [r7, #36]	; 0x24
 8002542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002544:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8002548:	627b      	str	r3, [r7, #36]	; 0x24
 800254a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002550:	627b      	str	r3, [r7, #36]	; 0x24
 8002552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002554:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002558:	627b      	str	r3, [r7, #36]	; 0x24
 800255a:	4a07      	ldr	r2, [pc, #28]	; (8002578 <MX_GPIO_Init+0x170>)
 800255c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255e:	6053      	str	r3, [r2, #4]

}
 8002560:	bf00      	nop
 8002562:	3728      	adds	r7, #40	; 0x28
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	40021000 	.word	0x40021000
 800256c:	40010800 	.word	0x40010800
 8002570:	40010c00 	.word	0x40010c00
 8002574:	40011000 	.word	0x40011000
 8002578:	40010000 	.word	0x40010000

0800257c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800257c:	b580      	push	{r7, lr}
 800257e:	b098      	sub	sp, #96	; 0x60
 8002580:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	GpioTimePacket tp_led_heartbeat;
	TimerPacket timerpacket_ltc;

	struct batteryModuleVoltage modVoltage = { .cell_volt = (uint16_t*) malloc(
 8002582:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002586:	2200      	movs	r2, #0
 8002588:	601a      	str	r2, [r3, #0]
 800258a:	605a      	str	r2, [r3, #4]
 800258c:	609a      	str	r2, [r3, #8]
 800258e:	60da      	str	r2, [r3, #12]
 8002590:	611a      	str	r2, [r3, #16]
 8002592:	615a      	str	r2, [r3, #20]
 8002594:	2018      	movs	r0, #24
 8002596:	f007 fe15 	bl	800a1c4 <malloc>
 800259a:	4603      	mov	r3, r0
 800259c:	62bb      	str	r3, [r7, #40]	; 0x28
	NUM_CELLS * sizeof(uint16_t)), .cell_temp = (uint16_t*) malloc(
 800259e:	2018      	movs	r0, #24
 80025a0:	f007 fe10 	bl	800a1c4 <malloc>
 80025a4:	4603      	mov	r3, r0
	struct batteryModuleVoltage modVoltage = { .cell_volt = (uint16_t*) malloc(
 80025a6:	62fb      	str	r3, [r7, #44]	; 0x2c
	NUM_THERM_TOTAL * sizeof(uint16_t)), .read_auxreg = (uint16_t*) malloc(
 80025a8:	200c      	movs	r0, #12
 80025aa:	f007 fe0b 	bl	800a1c4 <malloc>
 80025ae:	4603      	mov	r3, r0
	struct batteryModuleVoltage modVoltage = { .cell_volt = (uint16_t*) malloc(
 80025b0:	63fb      	str	r3, [r7, #60]	; 0x3c
	NUM_AUXES * sizeof(uint16_t)) };

	struct CANMessage msg;
	uint8_t safetyFaults = 0;
 80025b2:	2300      	movs	r3, #0
 80025b4:	70fb      	strb	r3, [r7, #3]
	uint8_t safetyWarnings = 0;
 80025b6:	2300      	movs	r3, #0
 80025b8:	70bb      	strb	r3, [r7, #2]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80025ba:	f000 fdc5 	bl	8003148 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80025be:	f000 f8d3 	bl	8002768 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80025c2:	f7ff ff21 	bl	8002408 <MX_GPIO_Init>
	MX_ADC1_Init();
 80025c6:	f7ff fad9 	bl	8001b7c <MX_ADC1_Init>
	MX_ADC2_Init();
 80025ca:	f7ff fb15 	bl	8001bf8 <MX_ADC2_Init>
	MX_TIM7_Init();
 80025ce:	f000 fd41 	bl	8003054 <MX_TIM7_Init>
	MX_SPI1_Init();
 80025d2:	f000 fc07 	bl	8002de4 <MX_SPI1_Init>
	MX_USB_DEVICE_Init();
 80025d6:	f007 f90d 	bl	80097f4 <MX_USB_DEVICE_Init>
	MX_CAN2_Init();
 80025da:	f7ff fcb1 	bl	8001f40 <MX_CAN2_Init>
	/* USER CODE BEGIN 2 */
	CAN_SettingsInit(&msg); // Start CAN at 0x00
 80025de:	1d3b      	adds	r3, r7, #4
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7ff fd65 	bl	80020b0 <CAN_SettingsInit>
	//Start timer
	GpioTimePacket_Init(&tp_led_heartbeat, MCU_HEARTBEAT_LED_GPIO_Port,
 80025e6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80025ea:	2240      	movs	r2, #64	; 0x40
 80025ec:	495a      	ldr	r1, [pc, #360]	; (8002758 <main+0x1dc>)
 80025ee:	4618      	mov	r0, r3
 80025f0:	f000 f926 	bl	8002840 <GpioTimePacket_Init>
	MCU_HEARTBEAT_LED_Pin);
	TimerPacket_Init(&timerpacket_ltc, LTC_DELAY);
 80025f4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80025f8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80025fc:	4618      	mov	r0, r3
 80025fe:	f000 f95f 	bl	80028c0 <TimerPacket_Init>
	//Pull SPI1 nCS HIGH (deselect)
	LTC_nCS_High();
 8002602:	f000 fc6f 	bl	8002ee4 <LTC_nCS_High>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	uint8_t tempindex = 0;
 8002606:	2300      	movs	r3, #0
 8002608:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t indexpause = 8;
 800260c:	2308      	movs	r3, #8
 800260e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t loop_count = 3;
 8002612:	2303      	movs	r3, #3
 8002614:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	// TODO test discharge by turning on DCC bits. 
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		GpioFixedToggle(&tp_led_heartbeat, LED_HEARTBEAT_DELAY_MS);
 8002618:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800261c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002620:	4618      	mov	r0, r3
 8002622:	f000 f92a 	bl	800287a <GpioFixedToggle>
		if (TimerPacket_FixedPulse(&timerpacket_ltc)) {
 8002626:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800262a:	4618      	mov	r0, r3
 800262c:	f000 f95b 	bl	80028e6 <TimerPacket_FixedPulse>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d0f0      	beq.n	8002618 <main+0x9c>
			wakeup_sleep();
 8002636:	f7fe fed9 	bl	80013ec <wakeup_sleep>
			readVolt(modVoltage.cell_volt);
 800263a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800263c:	4618      	mov	r0, r3
 800263e:	f000 fa09 	bl	8002a54 <readVolt>
			print(NUM_CELLS, (uint16_t*) modVoltage.cell_volt);
 8002642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002644:	4619      	mov	r1, r3
 8002646:	200c      	movs	r0, #12
 8002648:	f000 fa5e 	bl	8002b08 <print>

			//related to reading temperatures
			wakeup_sleep();
 800264c:	f7fe fece 	bl	80013ec <wakeup_sleep>
			for (uint8_t i = tempindex; i < indexpause; i++) {
 8002650:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002654:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 8002658:	e00e      	b.n	8002678 <main+0xfc>
				readTemp(i, modVoltage.cell_temp, modVoltage.read_auxreg);
 800265a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800265c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800265e:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8002662:	4618      	mov	r0, r3
 8002664:	f000 fa0a 	bl	8002a7c <readTemp>
				HAL_Delay(100);
 8002668:	2064      	movs	r0, #100	; 0x64
 800266a:	f000 fdcf 	bl	800320c <HAL_Delay>
			for (uint8_t i = tempindex; i < indexpause; i++) {
 800266e:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8002672:	3301      	adds	r3, #1
 8002674:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 8002678:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 800267c:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8002680:	429a      	cmp	r2, r3
 8002682:	d3ea      	bcc.n	800265a <main+0xde>
			}
			if (indexpause == 8) {
 8002684:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8002688:	2b08      	cmp	r3, #8
 800268a:	d111      	bne.n	80026b0 <main+0x134>
				tempindex = 8;
 800268c:	2308      	movs	r3, #8
 800268e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				indexpause = 12;
 8002692:	230c      	movs	r3, #12
 8002694:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
				wakeup_idle();
 8002698:	f7fe fe88 	bl	80013ac <wakeup_idle>
				ltc_wrcomm(NUM_DEVICES, BMS_SWT[0]);
 800269c:	492f      	ldr	r1, [pc, #188]	; (800275c <main+0x1e0>)
 800269e:	2001      	movs	r0, #1
 80026a0:	f7fe fffa 	bl	8001698 <ltc_wrcomm>
				wakeup_idle();
 80026a4:	f7fe fe82 	bl	80013ac <wakeup_idle>
				ltc_stcomm(2);
 80026a8:	2002      	movs	r0, #2
 80026aa:	f7ff f871 	bl	8001790 <ltc_stcomm>
 80026ae:	e014      	b.n	80026da <main+0x15e>
			} else if (indexpause == 12) {
 80026b0:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80026b4:	2b0c      	cmp	r3, #12
 80026b6:	d110      	bne.n	80026da <main+0x15e>
				wakeup_idle();
 80026b8:	f7fe fe78 	bl	80013ac <wakeup_idle>
				ltc_wrcomm(NUM_DEVICES, BMS_SWT[1]);
 80026bc:	4928      	ldr	r1, [pc, #160]	; (8002760 <main+0x1e4>)
 80026be:	2001      	movs	r0, #1
 80026c0:	f7fe ffea 	bl	8001698 <ltc_wrcomm>
				wakeup_idle();
 80026c4:	f7fe fe72 	bl	80013ac <wakeup_idle>
				ltc_stcomm(2);
 80026c8:	2002      	movs	r0, #2
 80026ca:	f7ff f861 	bl	8001790 <ltc_stcomm>
				indexpause = 8;
 80026ce:	2308      	movs	r3, #8
 80026d0:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
				tempindex = 0;
 80026d4:	2300      	movs	r3, #0
 80026d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
			//print(NUM_THERM_TOTAL, (uint16_t*) modVoltage.cell_temp);

			//getting the summary of all cells in the pack
			cellSummary(&modVoltage);
 80026da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026de:	4618      	mov	r0, r3
 80026e0:	f000 fa8c 	bl	8002bfc <cellSummary>

			//waiting for 3 loops of the while look to occur before checking for faults
			if (loop_count == 0) {
 80026e4:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d10f      	bne.n	800270c <main+0x190>
				faultAndWarning(&modVoltage, &safetyFaults, &safetyWarnings);
 80026ec:	1cba      	adds	r2, r7, #2
 80026ee:	1cf9      	adds	r1, r7, #3
 80026f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026f4:	4618      	mov	r0, r3
 80026f6:	f000 fb08 	bl	8002d0a <faultAndWarning>
				if (safetyFaults != 0) {
 80026fa:	78fb      	ldrb	r3, [r7, #3]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d00a      	beq.n	8002716 <main+0x19a>
					HAL_GPIO_WritePin(Fault_GPIO_Port, Fault_Pin, GPIO_PIN_SET);
 8002700:	2201      	movs	r2, #1
 8002702:	2102      	movs	r1, #2
 8002704:	4817      	ldr	r0, [pc, #92]	; (8002764 <main+0x1e8>)
 8002706:	f001 fc7b 	bl	8004000 <HAL_GPIO_WritePin>
 800270a:	e004      	b.n	8002716 <main+0x19a>
				}

			} else {
				loop_count--;
 800270c:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8002710:	3b01      	subs	r3, #1
 8002712:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
			}

			//Passive balancing
			startBalance((uint16_t*) modVoltage.cell_volt, NUM_DEVICES,
 8002716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002718:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800271a:	2101      	movs	r1, #1
 800271c:	4618      	mov	r0, r3
 800271e:	f7ff fb0f 	bl	8001d40 <startBalance>
					modVoltage.cell_volt_lowest);

			//calling all CAN realated methods
			CAN_Send_Safety_Checker(&msg, &safetyFaults, &safetyWarnings);
 8002722:	1cba      	adds	r2, r7, #2
 8002724:	1cf9      	adds	r1, r7, #3
 8002726:	1d3b      	adds	r3, r7, #4
 8002728:	4618      	mov	r0, r3
 800272a:	f7ff fe4d 	bl	80023c8 <CAN_Send_Safety_Checker>
			CAN_Send_Cell_Summary(&msg, &modVoltage);
 800272e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002732:	1d3b      	adds	r3, r7, #4
 8002734:	4611      	mov	r1, r2
 8002736:	4618      	mov	r0, r3
 8002738:	f7ff fdfb 	bl	8002332 <CAN_Send_Cell_Summary>
			CAN_Send_Voltage(&msg, modVoltage.cell_volt);
 800273c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800273e:	1d3b      	adds	r3, r7, #4
 8002740:	4611      	mov	r1, r2
 8002742:	4618      	mov	r0, r3
 8002744:	f7ff fcd9 	bl	80020fa <CAN_Send_Voltage>
			CAN_Send_Temperature(&msg, modVoltage.cell_temp);
 8002748:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800274a:	1d3b      	adds	r3, r7, #4
 800274c:	4611      	mov	r1, r2
 800274e:	4618      	mov	r0, r3
 8002750:	f7ff fd60 	bl	8002214 <CAN_Send_Temperature>
		GpioFixedToggle(&tp_led_heartbeat, LED_HEARTBEAT_DELAY_MS);
 8002754:	e760      	b.n	8002618 <main+0x9c>
 8002756:	bf00      	nop
 8002758:	40011000 	.word	0x40011000
 800275c:	20000030 	.word	0x20000030
 8002760:	20000036 	.word	0x20000036
 8002764:	40010c00 	.word	0x40010c00

08002768 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002768:	b580      	push	{r7, lr}
 800276a:	b09c      	sub	sp, #112	; 0x70
 800276c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800276e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002772:	2238      	movs	r2, #56	; 0x38
 8002774:	2100      	movs	r1, #0
 8002776:	4618      	mov	r0, r3
 8002778:	f007 fe00 	bl	800a37c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800277c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002780:	2200      	movs	r2, #0
 8002782:	601a      	str	r2, [r3, #0]
 8002784:	605a      	str	r2, [r3, #4]
 8002786:	609a      	str	r2, [r3, #8]
 8002788:	60da      	str	r2, [r3, #12]
 800278a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 800278c:	1d3b      	adds	r3, r7, #4
 800278e:	2220      	movs	r2, #32
 8002790:	2100      	movs	r1, #0
 8002792:	4618      	mov	r0, r3
 8002794:	f007 fdf2 	bl	800a37c <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002798:	2301      	movs	r3, #1
 800279a:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800279c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027a0:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV5;
 80027a2:	2304      	movs	r3, #4
 80027a4:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80027a6:	2301      	movs	r3, #1
 80027a8:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_PLL2;
 80027aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027ae:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80027b0:	2302      	movs	r3, #2
 80027b2:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80027b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027b8:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80027ba:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80027be:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL2_ON;
 80027c0:	2302      	movs	r3, #2
 80027c2:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL2.PLL2MUL = RCC_PLL2_MUL8;
 80027c4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80027c8:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL2.HSEPrediv2Value = RCC_HSE_PREDIV2_DIV5;
 80027ca:	2340      	movs	r3, #64	; 0x40
 80027cc:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80027ce:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80027d2:	4618      	mov	r0, r3
 80027d4:	f002 fd76 	bl	80052c4 <HAL_RCC_OscConfig>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d001      	beq.n	80027e2 <SystemClock_Config+0x7a>
		Error_Handler();
 80027de:	f000 f89f 	bl	8002920 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80027e2:	230f      	movs	r3, #15
 80027e4:	627b      	str	r3, [r7, #36]	; 0x24
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027e6:	2302      	movs	r3, #2
 80027e8:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027ea:	2300      	movs	r3, #0
 80027ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80027ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027f2:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80027f4:	2300      	movs	r3, #0
 80027f6:	637b      	str	r3, [r7, #52]	; 0x34

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80027f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027fc:	2102      	movs	r1, #2
 80027fe:	4618      	mov	r0, r3
 8002800:	f003 f876 	bl	80058f0 <HAL_RCC_ClockConfig>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d001      	beq.n	800280e <SystemClock_Config+0xa6>
		Error_Handler();
 800280a:	f000 f889 	bl	8002920 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC | RCC_PERIPHCLK_USB;
 800280e:	2312      	movs	r3, #18
 8002810:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002812:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002816:	60fb      	str	r3, [r7, #12]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV3;
 8002818:	2300      	movs	r3, #0
 800281a:	623b      	str	r3, [r7, #32]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 800281c:	1d3b      	adds	r3, r7, #4
 800281e:	4618      	mov	r0, r3
 8002820:	f003 fa34 	bl	8005c8c <HAL_RCCEx_PeriphCLKConfig>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d001      	beq.n	800282e <SystemClock_Config+0xc6>
		Error_Handler();
 800282a:	f000 f879 	bl	8002920 <Error_Handler>
	}

	/** Configure the Systick interrupt time
	 */
	__HAL_RCC_PLLI2S_ENABLE();
 800282e:	4b03      	ldr	r3, [pc, #12]	; (800283c <SystemClock_Config+0xd4>)
 8002830:	2201      	movs	r2, #1
 8002832:	601a      	str	r2, [r3, #0]
}
 8002834:	bf00      	nop
 8002836:	3770      	adds	r7, #112	; 0x70
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	42420070 	.word	0x42420070

08002840 <GpioTimePacket_Init>:

/* USER CODE BEGIN 4 */
//Initialize struct values
//Will initialize GPIO to LOW!
void GpioTimePacket_Init(GpioTimePacket *gtp, GPIO_TypeDef *port, uint16_t pin) {
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	60b9      	str	r1, [r7, #8]
 800284a:	4613      	mov	r3, r2
 800284c:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(port, pin, GPIO_PIN_RESET); //Set GPIO LOW
 800284e:	88fb      	ldrh	r3, [r7, #6]
 8002850:	2200      	movs	r2, #0
 8002852:	4619      	mov	r1, r3
 8002854:	68b8      	ldr	r0, [r7, #8]
 8002856:	f001 fbd3 	bl	8004000 <HAL_GPIO_WritePin>
	gtp->gpio_port = port;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	68ba      	ldr	r2, [r7, #8]
 800285e:	601a      	str	r2, [r3, #0]
	gtp->gpio_pin = pin;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	88fa      	ldrh	r2, [r7, #6]
 8002864:	809a      	strh	r2, [r3, #4]
	gtp->ts_prev = 0; //Init to 0
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2200      	movs	r2, #0
 800286a:	609a      	str	r2, [r3, #8]
	gtp->ts_curr = 0; //Init to 0
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2200      	movs	r2, #0
 8002870:	60da      	str	r2, [r3, #12]
}
 8002872:	bf00      	nop
 8002874:	3710      	adds	r7, #16
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}

0800287a <GpioFixedToggle>:
//update_ms = update after X ms
void GpioFixedToggle(GpioTimePacket *gtp, uint16_t update_ms) {
 800287a:	b580      	push	{r7, lr}
 800287c:	b082      	sub	sp, #8
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]
 8002882:	460b      	mov	r3, r1
 8002884:	807b      	strh	r3, [r7, #2]
	gtp->ts_curr = HAL_GetTick(); //Record current timestamp
 8002886:	f000 fcb7 	bl	80031f8 <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	60da      	str	r2, [r3, #12]
	if (gtp->ts_curr - gtp->ts_prev > update_ms) {
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	68da      	ldr	r2, [r3, #12]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	1ad2      	subs	r2, r2, r3
 800289a:	887b      	ldrh	r3, [r7, #2]
 800289c:	429a      	cmp	r2, r3
 800289e:	d90b      	bls.n	80028b8 <GpioFixedToggle+0x3e>
		HAL_GPIO_TogglePin(gtp->gpio_port, gtp->gpio_pin); // Toggle GPIO
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	889b      	ldrh	r3, [r3, #4]
 80028a8:	4619      	mov	r1, r3
 80028aa:	4610      	mov	r0, r2
 80028ac:	f001 fbc0 	bl	8004030 <HAL_GPIO_TogglePin>
		gtp->ts_prev = gtp->ts_curr;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	68da      	ldr	r2, [r3, #12]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	609a      	str	r2, [r3, #8]
	}
}
 80028b8:	bf00      	nop
 80028ba:	3708      	adds	r7, #8
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <TimerPacket_Init>:
//Initialize struct values
//Will initialize GPIO to LOW!
void TimerPacket_Init(TimerPacket *tp, uint32_t delay) {
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]
	tp->ts_prev = 0;		//Init to 0
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	601a      	str	r2, [r3, #0]
	tp->ts_curr = 0; 		//Init to 0
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	605a      	str	r2, [r3, #4]
	tp->delay = delay;	//Init to user value
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	683a      	ldr	r2, [r7, #0]
 80028da:	609a      	str	r2, [r3, #8]
}
 80028dc:	bf00      	nop
 80028de:	370c      	adds	r7, #12
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bc80      	pop	{r7}
 80028e4:	4770      	bx	lr

080028e6 <TimerPacket_FixedPulse>:
//update_ms = update after X ms
uint8_t TimerPacket_FixedPulse(TimerPacket *tp) {
 80028e6:	b580      	push	{r7, lr}
 80028e8:	b082      	sub	sp, #8
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
	tp->ts_curr = HAL_GetTick(); //Record current timestamp
 80028ee:	f000 fc83 	bl	80031f8 <HAL_GetTick>
 80028f2:	4602      	mov	r2, r0
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	605a      	str	r2, [r3, #4]
	if (tp->ts_curr - tp->ts_prev > tp->delay) {
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685a      	ldr	r2, [r3, #4]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	1ad2      	subs	r2, r2, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	429a      	cmp	r2, r3
 8002908:	d905      	bls.n	8002916 <TimerPacket_FixedPulse+0x30>
		tp->ts_prev = tp->ts_curr; //Update prev timestamp to current
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685a      	ldr	r2, [r3, #4]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	601a      	str	r2, [r3, #0]
		return 1; //Enact event (time interval is a go)
 8002912:	2301      	movs	r3, #1
 8002914:	e000      	b.n	8002918 <TimerPacket_FixedPulse+0x32>
	}
	return 0; //Do not enact event
 8002916:	2300      	movs	r3, #0
}
 8002918:	4618      	mov	r0, r3
 800291a:	3708      	adds	r7, #8
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}

08002920 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002924:	b672      	cpsid	i
}
 8002926:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002928:	e7fe      	b.n	8002928 <Error_Handler+0x8>
	...

0800292c <getActualTemps>:
		0x08, 0x0F, 0xF9, 0x7F, 0xF9 }, { 0x69, 0x08, 0x0F, 0xE9, 0x7F, 0xF9 },
		{ 0x69, 0x08, 0x0F, 0xD9, 0x7F, 0xF9 }, { 0x69, 0x08, 0x0F, 0xC9, 0x7F,
				0xF9 } };

void getActualTemps(uint8_t dev_idx, uint8_t tempindex, uint16_t *actual_temp,
		uint16_t data) {
 800292c:	b590      	push	{r4, r7, lr}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	603a      	str	r2, [r7, #0]
 8002934:	461a      	mov	r2, r3
 8002936:	4603      	mov	r3, r0
 8002938:	71fb      	strb	r3, [r7, #7]
 800293a:	460b      	mov	r3, r1
 800293c:	71bb      	strb	r3, [r7, #6]
 800293e:	4613      	mov	r3, r2
 8002940:	80bb      	strh	r3, [r7, #4]
	static float scalar;
	static float steinhart;
	scalar = 30000.0f / (float) (data) - 1.0f;
 8002942:	88bb      	ldrh	r3, [r7, #4]
 8002944:	4618      	mov	r0, r3
 8002946:	f7fe f9e9 	bl	8000d1c <__aeabi_ui2f>
 800294a:	4603      	mov	r3, r0
 800294c:	4619      	mov	r1, r3
 800294e:	483a      	ldr	r0, [pc, #232]	; (8002a38 <getActualTemps+0x10c>)
 8002950:	f7fe faf0 	bl	8000f34 <__aeabi_fdiv>
 8002954:	4603      	mov	r3, r0
 8002956:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800295a:	4618      	mov	r0, r3
 800295c:	f7fe f92c 	bl	8000bb8 <__aeabi_fsub>
 8002960:	4603      	mov	r3, r0
 8002962:	461a      	mov	r2, r3
 8002964:	4b35      	ldr	r3, [pc, #212]	; (8002a3c <getActualTemps+0x110>)
 8002966:	601a      	str	r2, [r3, #0]
	scalar = (float) ntcSeriesResistance / scalar;
 8002968:	4b34      	ldr	r3, [pc, #208]	; (8002a3c <getActualTemps+0x110>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4619      	mov	r1, r3
 800296e:	4834      	ldr	r0, [pc, #208]	; (8002a40 <getActualTemps+0x114>)
 8002970:	f7fe fae0 	bl	8000f34 <__aeabi_fdiv>
 8002974:	4603      	mov	r3, r0
 8002976:	461a      	mov	r2, r3
 8002978:	4b30      	ldr	r3, [pc, #192]	; (8002a3c <getActualTemps+0x110>)
 800297a:	601a      	str	r2, [r3, #0]
	steinhart = scalar / (float) ntcNominal;               // (R/Ro)
 800297c:	4b2f      	ldr	r3, [pc, #188]	; (8002a3c <getActualTemps+0x110>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	492f      	ldr	r1, [pc, #188]	; (8002a40 <getActualTemps+0x114>)
 8002982:	4618      	mov	r0, r3
 8002984:	f7fe fad6 	bl	8000f34 <__aeabi_fdiv>
 8002988:	4603      	mov	r3, r0
 800298a:	461a      	mov	r2, r3
 800298c:	4b2d      	ldr	r3, [pc, #180]	; (8002a44 <getActualTemps+0x118>)
 800298e:	601a      	str	r2, [r3, #0]
	steinhart = log(steinhart);                           // ln(R/Ro)
 8002990:	4b2c      	ldr	r3, [pc, #176]	; (8002a44 <getActualTemps+0x118>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4618      	mov	r0, r3
 8002996:	f7fd fdb3 	bl	8000500 <__aeabi_f2d>
 800299a:	4602      	mov	r2, r0
 800299c:	460b      	mov	r3, r1
 800299e:	4610      	mov	r0, r2
 80029a0:	4619      	mov	r1, r3
 80029a2:	f008 f8e5 	bl	800ab70 <log>
 80029a6:	4602      	mov	r2, r0
 80029a8:	460b      	mov	r3, r1
 80029aa:	4610      	mov	r0, r2
 80029ac:	4619      	mov	r1, r3
 80029ae:	f7fe f8af 	bl	8000b10 <__aeabi_d2f>
 80029b2:	4603      	mov	r3, r0
 80029b4:	4a23      	ldr	r2, [pc, #140]	; (8002a44 <getActualTemps+0x118>)
 80029b6:	6013      	str	r3, [r2, #0]
	steinhart /= (float) ntcBetaFactor;                    // 1/B * ln(R/Ro)
 80029b8:	4b22      	ldr	r3, [pc, #136]	; (8002a44 <getActualTemps+0x118>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4922      	ldr	r1, [pc, #136]	; (8002a48 <getActualTemps+0x11c>)
 80029be:	4618      	mov	r0, r3
 80029c0:	f7fe fab8 	bl	8000f34 <__aeabi_fdiv>
 80029c4:	4603      	mov	r3, r0
 80029c6:	461a      	mov	r2, r3
 80029c8:	4b1e      	ldr	r3, [pc, #120]	; (8002a44 <getActualTemps+0x118>)
 80029ca:	601a      	str	r2, [r3, #0]
	steinhart += 1.0f / ((float) ntcNominalTemp + 273.15f);      // + (1/To)
 80029cc:	4b1d      	ldr	r3, [pc, #116]	; (8002a44 <getActualTemps+0x118>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	491e      	ldr	r1, [pc, #120]	; (8002a4c <getActualTemps+0x120>)
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7fe f8f2 	bl	8000bbc <__addsf3>
 80029d8:	4603      	mov	r3, r0
 80029da:	461a      	mov	r2, r3
 80029dc:	4b19      	ldr	r3, [pc, #100]	; (8002a44 <getActualTemps+0x118>)
 80029de:	601a      	str	r2, [r3, #0]
	steinhart = 1.0f / steinhart;                         // Invert
 80029e0:	4b18      	ldr	r3, [pc, #96]	; (8002a44 <getActualTemps+0x118>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4619      	mov	r1, r3
 80029e6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80029ea:	f7fe faa3 	bl	8000f34 <__aeabi_fdiv>
 80029ee:	4603      	mov	r3, r0
 80029f0:	461a      	mov	r2, r3
 80029f2:	4b14      	ldr	r3, [pc, #80]	; (8002a44 <getActualTemps+0x118>)
 80029f4:	601a      	str	r2, [r3, #0]
	steinhart -= 273.15f;    // convert to degree
 80029f6:	4b13      	ldr	r3, [pc, #76]	; (8002a44 <getActualTemps+0x118>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4915      	ldr	r1, [pc, #84]	; (8002a50 <getActualTemps+0x124>)
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7fe f8db 	bl	8000bb8 <__aeabi_fsub>
 8002a02:	4603      	mov	r3, r0
 8002a04:	461a      	mov	r2, r3
 8002a06:	4b0f      	ldr	r3, [pc, #60]	; (8002a44 <getActualTemps+0x118>)
 8002a08:	601a      	str	r2, [r3, #0]

	actual_temp[dev_idx * NUM_THERM_PER_MOD + tempindex] = steinhart;
 8002a0a:	4b0e      	ldr	r3, [pc, #56]	; (8002a44 <getActualTemps+0x118>)
 8002a0c:	6819      	ldr	r1, [r3, #0]
 8002a0e:	79fa      	ldrb	r2, [r7, #7]
 8002a10:	4613      	mov	r3, r2
 8002a12:	005b      	lsls	r3, r3, #1
 8002a14:	4413      	add	r3, r2
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	461a      	mov	r2, r3
 8002a1a:	79bb      	ldrb	r3, [r7, #6]
 8002a1c:	4413      	add	r3, r2
 8002a1e:	005b      	lsls	r3, r3, #1
 8002a20:	683a      	ldr	r2, [r7, #0]
 8002a22:	18d4      	adds	r4, r2, r3
 8002a24:	4608      	mov	r0, r1
 8002a26:	f7fe fb21 	bl	800106c <__aeabi_f2uiz>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	8023      	strh	r3, [r4, #0]

}
 8002a30:	bf00      	nop
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd90      	pop	{r4, r7, pc}
 8002a38:	46ea6000 	.word	0x46ea6000
 8002a3c:	200002f4 	.word	0x200002f4
 8002a40:	47435000 	.word	0x47435000
 8002a44:	200002f8 	.word	0x200002f8
 8002a48:	45534000 	.word	0x45534000
 8002a4c:	3b5bcf0f 	.word	0x3b5bcf0f
 8002a50:	43889333 	.word	0x43889333

08002a54 <readVolt>:

void readVolt(uint16_t *read_volt) {
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
	wakeup_idle();
 8002a5c:	f7fe fca6 	bl	80013ac <wakeup_idle>
	ltc_adcv(MD_7KHZ_3KHZ, DCP_DISABLED, CELL_CH_ALL);
 8002a60:	2200      	movs	r2, #0
 8002a62:	2100      	movs	r1, #0
 8002a64:	2002      	movs	r0, #2
 8002a66:	f7fe ff8b 	bl	8001980 <ltc_adcv>
	ltc_polladc();
 8002a6a:	f7ff f80f 	bl	8001a8c <ltc_polladc>
	read_cell_volt((uint16_t*) read_volt);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f7fe fcda 	bl	8001428 <read_cell_volt>
}
 8002a74:	bf00      	nop
 8002a76:	3708      	adds	r7, #8
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <readTemp>:

void readTemp(uint8_t tempindex, uint16_t *read_temp, uint16_t *read_auxreg) {
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b086      	sub	sp, #24
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	4603      	mov	r3, r0
 8002a84:	60b9      	str	r1, [r7, #8]
 8002a86:	607a      	str	r2, [r7, #4]
 8002a88:	73fb      	strb	r3, [r7, #15]
	wakeup_idle();
 8002a8a:	f7fe fc8f 	bl	80013ac <wakeup_idle>
	ltc_wrcomm(NUM_DEVICES, BMS_IC[tempindex]);
 8002a8e:	7bfa      	ldrb	r2, [r7, #15]
 8002a90:	4613      	mov	r3, r2
 8002a92:	005b      	lsls	r3, r3, #1
 8002a94:	4413      	add	r3, r2
 8002a96:	005b      	lsls	r3, r3, #1
 8002a98:	4a1a      	ldr	r2, [pc, #104]	; (8002b04 <readTemp+0x88>)
 8002a9a:	4413      	add	r3, r2
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	2001      	movs	r0, #1
 8002aa0:	f7fe fdfa 	bl	8001698 <ltc_wrcomm>
	wakeup_idle();
 8002aa4:	f7fe fc82 	bl	80013ac <wakeup_idle>
	ltc_stcomm(2);
 8002aa8:	2002      	movs	r0, #2
 8002aaa:	f7fe fe71 	bl	8001790 <ltc_stcomm>
	//end sending to mux to read temperatures

	wakeup_idle();
 8002aae:	f7fe fc7d 	bl	80013ac <wakeup_idle>
	ltc_adax(MD_7KHZ_3KHZ, 1); //doing GPIO all conversion
 8002ab2:	2101      	movs	r1, #1
 8002ab4:	2002      	movs	r0, #2
 8002ab6:	f7fe ffa9 	bl	8001a0c <ltc_adax>
	ltc_polladc();
 8002aba:	f7fe ffe7 	bl	8001a8c <ltc_polladc>
	if (!read_cell_temps((uint16_t*) read_auxreg)) // Set to read back all aux registers
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f7fe fea6 	bl	8001810 <read_cell_temps>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d118      	bne.n	8002afc <readTemp+0x80>
			{
		for (uint8_t dev_idx = 0; dev_idx < NUM_DEVICES; dev_idx++) {
 8002aca:	2300      	movs	r3, #0
 8002acc:	75fb      	strb	r3, [r7, #23]
 8002ace:	e012      	b.n	8002af6 <readTemp+0x7a>
			// Assuming data format is [cell voltage, cell voltage, ..., PEC, PEC]
			// PEC for each device is the last two bytes of its data segment
			uint16_t data = read_auxreg[dev_idx * NUM_AUX_GROUP];
 8002ad0:	7dfa      	ldrb	r2, [r7, #23]
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	005b      	lsls	r3, r3, #1
 8002ad6:	4413      	add	r3, r2
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	461a      	mov	r2, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	4413      	add	r3, r2
 8002ae0:	881b      	ldrh	r3, [r3, #0]
 8002ae2:	82bb      	strh	r3, [r7, #20]
			//read_temp[dev_idx * NUM_THERM_PER_MOD + tempindex] = data;
			getActualTemps(dev_idx, tempindex, (uint16_t*) read_temp, data); //+5 because vref is the last reg
 8002ae4:	8abb      	ldrh	r3, [r7, #20]
 8002ae6:	7bf9      	ldrb	r1, [r7, #15]
 8002ae8:	7df8      	ldrb	r0, [r7, #23]
 8002aea:	68ba      	ldr	r2, [r7, #8]
 8002aec:	f7ff ff1e 	bl	800292c <getActualTemps>
		for (uint8_t dev_idx = 0; dev_idx < NUM_DEVICES; dev_idx++) {
 8002af0:	7dfb      	ldrb	r3, [r7, #23]
 8002af2:	3301      	adds	r3, #1
 8002af4:	75fb      	strb	r3, [r7, #23]
 8002af6:	7dfb      	ldrb	r3, [r7, #23]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d0e9      	beq.n	8002ad0 <readTemp+0x54>

		}
	}
}
 8002afc:	bf00      	nop
 8002afe:	3718      	adds	r7, #24
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	2000003c 	.word	0x2000003c

08002b08 <print>:
#include "print.h"

void print(uint8_t len, uint16_t *read_temp) {
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	f6ad 0d28 	subw	sp, sp, #2088	; 0x828
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	4602      	mov	r2, r0
 8002b12:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8002b16:	f6a3 0328 	subw	r3, r3, #2088	; 0x828
 8002b1a:	6019      	str	r1, [r3, #0]
 8002b1c:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8002b20:	f6a3 0321 	subw	r3, r3, #2081	; 0x821
 8002b24:	701a      	strb	r2, [r3, #0]
	char buf[20];
	char out_buf[2048] = "";
 8002b26:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8002b2a:	f6a3 0318 	subw	r3, r3, #2072	; 0x818
 8002b2e:	2200      	movs	r2, #0
 8002b30:	601a      	str	r2, [r3, #0]
 8002b32:	3304      	adds	r3, #4
 8002b34:	f240 72fc 	movw	r2, #2044	; 0x7fc
 8002b38:	2100      	movs	r1, #0
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f007 fc1e 	bl	800a37c <memset>
	char char_to_str[2];
	char_to_str[0] = '\n';
 8002b40:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8002b44:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 8002b48:	220a      	movs	r2, #10
 8002b4a:	701a      	strb	r2, [r3, #0]
	char_to_str[1] = '\0';
 8002b4c:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8002b50:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 8002b54:	2200      	movs	r2, #0
 8002b56:	705a      	strb	r2, [r3, #1]

	for (uint8_t i = 0; i < len; i++) {
 8002b58:	2300      	movs	r3, #0
 8002b5a:	f887 3827 	strb.w	r3, [r7, #2087]	; 0x827
 8002b5e:	e027      	b.n	8002bb0 <print+0xa8>
		sprintf(buf, "C%u:%u/10000", i + 1, read_temp[i]);
 8002b60:	f897 3827 	ldrb.w	r3, [r7, #2087]	; 0x827
 8002b64:	1c59      	adds	r1, r3, #1
 8002b66:	f897 3827 	ldrb.w	r3, [r7, #2087]	; 0x827
 8002b6a:	005b      	lsls	r3, r3, #1
 8002b6c:	f607 0228 	addw	r2, r7, #2088	; 0x828
 8002b70:	f6a2 0228 	subw	r2, r2, #2088	; 0x828
 8002b74:	6812      	ldr	r2, [r2, #0]
 8002b76:	4413      	add	r3, r2
 8002b78:	881b      	ldrh	r3, [r3, #0]
 8002b7a:	f507 6001 	add.w	r0, r7, #2064	; 0x810
 8002b7e:	460a      	mov	r2, r1
 8002b80:	491d      	ldr	r1, [pc, #116]	; (8002bf8 <print+0xf0>)
 8002b82:	f007 fbdb 	bl	800a33c <siprintf>
		strncat(out_buf, buf, 20);
 8002b86:	f507 6101 	add.w	r1, r7, #2064	; 0x810
 8002b8a:	f107 0310 	add.w	r3, r7, #16
 8002b8e:	2214      	movs	r2, #20
 8002b90:	4618      	mov	r0, r3
 8002b92:	f007 fbfb 	bl	800a38c <strncat>
		strncat(out_buf, char_to_str, 2);
 8002b96:	f107 010c 	add.w	r1, r7, #12
 8002b9a:	f107 0310 	add.w	r3, r7, #16
 8002b9e:	2202      	movs	r2, #2
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f007 fbf3 	bl	800a38c <strncat>
	for (uint8_t i = 0; i < len; i++) {
 8002ba6:	f897 3827 	ldrb.w	r3, [r7, #2087]	; 0x827
 8002baa:	3301      	adds	r3, #1
 8002bac:	f887 3827 	strb.w	r3, [r7, #2087]	; 0x827
 8002bb0:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8002bb4:	f6a3 0321 	subw	r3, r3, #2081	; 0x821
 8002bb8:	f897 2827 	ldrb.w	r2, [r7, #2087]	; 0x827
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d3ce      	bcc.n	8002b60 <print+0x58>
	}
	strncat(out_buf, char_to_str, 2);
 8002bc2:	f107 010c 	add.w	r1, r7, #12
 8002bc6:	f107 0310 	add.w	r3, r7, #16
 8002bca:	2202      	movs	r2, #2
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f007 fbdd 	bl	800a38c <strncat>
	USB_Transmit(out_buf, strlen(out_buf));
 8002bd2:	f107 0310 	add.w	r3, r7, #16
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7fd fb26 	bl	8000228 <strlen>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	b29a      	uxth	r2, r3
 8002be0:	f107 0310 	add.w	r3, r7, #16
 8002be4:	4611      	mov	r1, r2
 8002be6:	4618      	mov	r0, r3
 8002be8:	f006 fdf5 	bl	80097d6 <USB_Transmit>
}
 8002bec:	bf00      	nop
 8002bee:	f607 0728 	addw	r7, r7, #2088	; 0x828
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	0800af5c 	.word	0x0800af5c

08002bfc <cellSummary>:
#define CELL_HIGH_TEMP_WARNING		55
#define CELL_LOW_TEMP_WARNING		0

#define CELL_VOLT_IMBALANCE_WARNING	    500

void cellSummary(struct batteryModuleVoltage *batt){
 8002bfc:	b480      	push	{r7}
 8002bfe:	b085      	sub	sp, #20
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
	batt->cell_volt_highest = batt->cell_volt[0];
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	881a      	ldrh	r2, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	815a      	strh	r2, [r3, #10]
	batt->cell_volt_lowest = batt->cell_volt[0];
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	881a      	ldrh	r2, [r3, #0]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	811a      	strh	r2, [r3, #8]
	batt->cell_temp_highest = batt->cell_temp[0];
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	881a      	ldrh	r2, [r3, #0]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	81da      	strh	r2, [r3, #14]
	batt->cell_temp_lowest = batt->cell_temp[0];
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	881a      	ldrh	r2, [r3, #0]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	819a      	strh	r2, [r3, #12]
	batt->pack_voltage = 0;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	821a      	strh	r2, [r3, #16]

	for(int i = 1; i < NUM_CELLS; i++){
 8002c32:	2301      	movs	r3, #1
 8002c34:	60fb      	str	r3, [r7, #12]
 8002c36:	e032      	b.n	8002c9e <cellSummary+0xa2>

		if(batt->cell_volt[i] > batt->cell_volt_highest){
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	005b      	lsls	r3, r3, #1
 8002c40:	4413      	add	r3, r2
 8002c42:	881a      	ldrh	r2, [r3, #0]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	895b      	ldrh	r3, [r3, #10]
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d907      	bls.n	8002c5c <cellSummary+0x60>
			batt->cell_volt_highest = batt->cell_volt[i];
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	005b      	lsls	r3, r3, #1
 8002c54:	4413      	add	r3, r2
 8002c56:	881a      	ldrh	r2, [r3, #0]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	815a      	strh	r2, [r3, #10]
		}

		if(batt->cell_volt[i] < batt->cell_volt_lowest){
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	005b      	lsls	r3, r3, #1
 8002c64:	4413      	add	r3, r2
 8002c66:	881a      	ldrh	r2, [r3, #0]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	891b      	ldrh	r3, [r3, #8]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d207      	bcs.n	8002c80 <cellSummary+0x84>
			batt->cell_volt_lowest = batt->cell_volt[i];
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	005b      	lsls	r3, r3, #1
 8002c78:	4413      	add	r3, r2
 8002c7a:	881a      	ldrh	r2, [r3, #0]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	811a      	strh	r2, [r3, #8]
		}

		batt->pack_voltage += batt->cell_volt[i];
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	8a1a      	ldrh	r2, [r3, #16]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6819      	ldr	r1, [r3, #0]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	005b      	lsls	r3, r3, #1
 8002c8c:	440b      	add	r3, r1
 8002c8e:	881b      	ldrh	r3, [r3, #0]
 8002c90:	4413      	add	r3, r2
 8002c92:	b29a      	uxth	r2, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	821a      	strh	r2, [r3, #16]
	for(int i = 1; i < NUM_CELLS; i++){
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	60fb      	str	r3, [r7, #12]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2b0b      	cmp	r3, #11
 8002ca2:	ddc9      	ble.n	8002c38 <cellSummary+0x3c>
	}

	for(int i = 0; i < NUM_THERM_TOTAL; i++){
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	60bb      	str	r3, [r7, #8]
 8002ca8:	e026      	b.n	8002cf8 <cellSummary+0xfc>
		if(batt->cell_temp_highest < batt->cell_temp[i]){
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	89da      	ldrh	r2, [r3, #14]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6859      	ldr	r1, [r3, #4]
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	005b      	lsls	r3, r3, #1
 8002cb6:	440b      	add	r3, r1
 8002cb8:	881b      	ldrh	r3, [r3, #0]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d207      	bcs.n	8002cce <cellSummary+0xd2>
			batt->cell_temp_highest = batt->cell_temp[i];
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685a      	ldr	r2, [r3, #4]
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	005b      	lsls	r3, r3, #1
 8002cc6:	4413      	add	r3, r2
 8002cc8:	881a      	ldrh	r2, [r3, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	81da      	strh	r2, [r3, #14]
		}

		if(batt->cell_temp_lowest > batt->cell_temp[i]){
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	899a      	ldrh	r2, [r3, #12]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6859      	ldr	r1, [r3, #4]
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	005b      	lsls	r3, r3, #1
 8002cda:	440b      	add	r3, r1
 8002cdc:	881b      	ldrh	r3, [r3, #0]
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d907      	bls.n	8002cf2 <cellSummary+0xf6>
			batt->cell_temp_lowest = batt->cell_temp[i];
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685a      	ldr	r2, [r3, #4]
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	005b      	lsls	r3, r3, #1
 8002cea:	4413      	add	r3, r2
 8002cec:	881a      	ldrh	r2, [r3, #0]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	819a      	strh	r2, [r3, #12]
	for(int i = 0; i < NUM_THERM_TOTAL; i++){
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	60bb      	str	r3, [r7, #8]
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	2b0b      	cmp	r3, #11
 8002cfc:	ddd5      	ble.n	8002caa <cellSummary+0xae>
		}
	}

}
 8002cfe:	bf00      	nop
 8002d00:	bf00      	nop
 8002d02:	3714      	adds	r7, #20
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bc80      	pop	{r7}
 8002d08:	4770      	bx	lr

08002d0a <faultAndWarning>:


void faultAndWarning(struct batteryModuleVoltage *batt, uint8_t *fault, uint8_t *warnings){
 8002d0a:	b480      	push	{r7}
 8002d0c:	b085      	sub	sp, #20
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	60f8      	str	r0, [r7, #12]
 8002d12:	60b9      	str	r1, [r7, #8]
 8002d14:	607a      	str	r2, [r7, #4]
	if(batt->pack_voltage >= PACK_HIGH_VOLT_FAULT){
		*fault |= 0b10000000;
	}

	if(batt->pack_voltage <= PACK_LOW_VOLT_FAULT){
		*fault |= 0b01000000;
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d1e:	b2da      	uxtb	r2, r3
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	701a      	strb	r2, [r3, #0]
	}

	if(batt->cell_volt_lowest <= CELL_LOW_VOLT_FAULT){
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	891b      	ldrh	r3, [r3, #8]
 8002d28:	f247 5230 	movw	r2, #30000	; 0x7530
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d806      	bhi.n	8002d3e <faultAndWarning+0x34>
		*fault |= 0b00100000;
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	f043 0320 	orr.w	r3, r3, #32
 8002d38:	b2da      	uxtb	r2, r3
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	701a      	strb	r2, [r3, #0]
	}

		if(batt->cell_volt_highest>= CELL_HIGH_VOLT_FAULT){
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	895b      	ldrh	r3, [r3, #10]
 8002d42:	f24a 72f7 	movw	r2, #42999	; 0xa7f7
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d906      	bls.n	8002d58 <faultAndWarning+0x4e>
		*fault |= 0b00010000;
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	f043 0310 	orr.w	r3, r3, #16
 8002d52:	b2da      	uxtb	r2, r3
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	701a      	strb	r2, [r3, #0]
	}

	if(batt->cell_temp_highest >= CELL_HIGH_TEMP_FAULT){
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	89db      	ldrh	r3, [r3, #14]
 8002d5c:	2b3b      	cmp	r3, #59	; 0x3b
 8002d5e:	d906      	bls.n	8002d6e <faultAndWarning+0x64>
		*fault |= 0b00001000;
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	f043 0308 	orr.w	r3, r3, #8
 8002d68:	b2da      	uxtb	r2, r3
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	701a      	strb	r2, [r3, #0]
	if(batt->pack_voltage >=  PACK_HIGH_VOLT_WARNING){
		*warnings |= 0b10000000;
	}

	if(batt->pack_voltage <= PACK_LOW_VOLT_WARNING){
		*warnings |= 0b01000000;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d76:	b2da      	uxtb	r2, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	701a      	strb	r2, [r3, #0]
	}

	if(batt->cell_volt_lowest <= CELL_LOW_VOLT_WARNING){
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	891b      	ldrh	r3, [r3, #8]
 8002d80:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8002d84:	d806      	bhi.n	8002d94 <faultAndWarning+0x8a>
		*warnings |= 0b00100000;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	f043 0320 	orr.w	r3, r3, #32
 8002d8e:	b2da      	uxtb	r2, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	701a      	strb	r2, [r3, #0]
	}

	if(batt->cell_volt_highest >= CELL_HIGH_VOLT_WARNING){
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	895b      	ldrh	r3, [r3, #10]
 8002d98:	f24a 6203 	movw	r2, #42499	; 0xa603
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d906      	bls.n	8002dae <faultAndWarning+0xa4>
		*warnings |= 0b00010000;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	f043 0310 	orr.w	r3, r3, #16
 8002da8:	b2da      	uxtb	r2, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	701a      	strb	r2, [r3, #0]
	}

	if(batt->cell_temp_highest >= CELL_HIGH_TEMP_WARNING){
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	89db      	ldrh	r3, [r3, #14]
 8002db2:	2b36      	cmp	r3, #54	; 0x36
 8002db4:	d906      	bls.n	8002dc4 <faultAndWarning+0xba>
		*warnings |= 0b00001000;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	f043 0308 	orr.w	r3, r3, #8
 8002dbe:	b2da      	uxtb	r2, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	701a      	strb	r2, [r3, #0]
	}

	if(batt->cell_temp_lowest <= CELL_LOW_TEMP_WARNING){
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	899b      	ldrh	r3, [r3, #12]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d106      	bne.n	8002dda <faultAndWarning+0xd0>
		*warnings |= 0b00000100;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	f043 0304 	orr.w	r3, r3, #4
 8002dd4:	b2da      	uxtb	r2, r3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	701a      	strb	r2, [r3, #0]
	}
}
 8002dda:	bf00      	nop
 8002ddc:	3714      	adds	r7, #20
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bc80      	pop	{r7}
 8002de2:	4770      	bx	lr

08002de4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002de8:	4b17      	ldr	r3, [pc, #92]	; (8002e48 <MX_SPI1_Init+0x64>)
 8002dea:	4a18      	ldr	r2, [pc, #96]	; (8002e4c <MX_SPI1_Init+0x68>)
 8002dec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002dee:	4b16      	ldr	r3, [pc, #88]	; (8002e48 <MX_SPI1_Init+0x64>)
 8002df0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002df4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002df6:	4b14      	ldr	r3, [pc, #80]	; (8002e48 <MX_SPI1_Init+0x64>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002dfc:	4b12      	ldr	r3, [pc, #72]	; (8002e48 <MX_SPI1_Init+0x64>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e02:	4b11      	ldr	r3, [pc, #68]	; (8002e48 <MX_SPI1_Init+0x64>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002e08:	4b0f      	ldr	r3, [pc, #60]	; (8002e48 <MX_SPI1_Init+0x64>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002e0e:	4b0e      	ldr	r3, [pc, #56]	; (8002e48 <MX_SPI1_Init+0x64>)
 8002e10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e14:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002e16:	4b0c      	ldr	r3, [pc, #48]	; (8002e48 <MX_SPI1_Init+0x64>)
 8002e18:	2228      	movs	r2, #40	; 0x28
 8002e1a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002e1c:	4b0a      	ldr	r3, [pc, #40]	; (8002e48 <MX_SPI1_Init+0x64>)
 8002e1e:	2200      	movs	r2, #0
 8002e20:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002e22:	4b09      	ldr	r3, [pc, #36]	; (8002e48 <MX_SPI1_Init+0x64>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e28:	4b07      	ldr	r3, [pc, #28]	; (8002e48 <MX_SPI1_Init+0x64>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002e2e:	4b06      	ldr	r3, [pc, #24]	; (8002e48 <MX_SPI1_Init+0x64>)
 8002e30:	220a      	movs	r2, #10
 8002e32:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002e34:	4804      	ldr	r0, [pc, #16]	; (8002e48 <MX_SPI1_Init+0x64>)
 8002e36:	f003 f85b 	bl	8005ef0 <HAL_SPI_Init>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d001      	beq.n	8002e44 <MX_SPI1_Init+0x60>
  {
		Error_Handler();
 8002e40:	f7ff fd6e 	bl	8002920 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002e44:	bf00      	nop
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	200002fc 	.word	0x200002fc
 8002e4c:	40013000 	.word	0x40013000

08002e50 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b088      	sub	sp, #32
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e58:	f107 0310 	add.w	r3, r7, #16
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	601a      	str	r2, [r3, #0]
 8002e60:	605a      	str	r2, [r3, #4]
 8002e62:	609a      	str	r2, [r3, #8]
 8002e64:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a1b      	ldr	r2, [pc, #108]	; (8002ed8 <HAL_SPI_MspInit+0x88>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d12f      	bne.n	8002ed0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002e70:	4b1a      	ldr	r3, [pc, #104]	; (8002edc <HAL_SPI_MspInit+0x8c>)
 8002e72:	699b      	ldr	r3, [r3, #24]
 8002e74:	4a19      	ldr	r2, [pc, #100]	; (8002edc <HAL_SPI_MspInit+0x8c>)
 8002e76:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e7a:	6193      	str	r3, [r2, #24]
 8002e7c:	4b17      	ldr	r3, [pc, #92]	; (8002edc <HAL_SPI_MspInit+0x8c>)
 8002e7e:	699b      	ldr	r3, [r3, #24]
 8002e80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e84:	60fb      	str	r3, [r7, #12]
 8002e86:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e88:	4b14      	ldr	r3, [pc, #80]	; (8002edc <HAL_SPI_MspInit+0x8c>)
 8002e8a:	699b      	ldr	r3, [r3, #24]
 8002e8c:	4a13      	ldr	r2, [pc, #76]	; (8002edc <HAL_SPI_MspInit+0x8c>)
 8002e8e:	f043 0304 	orr.w	r3, r3, #4
 8002e92:	6193      	str	r3, [r2, #24]
 8002e94:	4b11      	ldr	r3, [pc, #68]	; (8002edc <HAL_SPI_MspInit+0x8c>)
 8002e96:	699b      	ldr	r3, [r3, #24]
 8002e98:	f003 0304 	and.w	r3, r3, #4
 8002e9c:	60bb      	str	r3, [r7, #8]
 8002e9e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002ea0:	23a0      	movs	r3, #160	; 0xa0
 8002ea2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ea4:	2302      	movs	r3, #2
 8002ea6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eac:	f107 0310 	add.w	r3, r7, #16
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	480b      	ldr	r0, [pc, #44]	; (8002ee0 <HAL_SPI_MspInit+0x90>)
 8002eb4:	f000 ff20 	bl	8003cf8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002eb8:	2340      	movs	r3, #64	; 0x40
 8002eba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ec4:	f107 0310 	add.w	r3, r7, #16
 8002ec8:	4619      	mov	r1, r3
 8002eca:	4805      	ldr	r0, [pc, #20]	; (8002ee0 <HAL_SPI_MspInit+0x90>)
 8002ecc:	f000 ff14 	bl	8003cf8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002ed0:	bf00      	nop
 8002ed2:	3720      	adds	r7, #32
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	40013000 	.word	0x40013000
 8002edc:	40021000 	.word	0x40021000
 8002ee0:	40010800 	.word	0x40010800

08002ee4 <LTC_nCS_High>:
  /* USER CODE END SPI1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void LTC_nCS_High(void) {
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTC_nCS_GPIO_Port, LTC_nCS_Pin, GPIO_PIN_SET); //Pull CS high
 8002ee8:	2201      	movs	r2, #1
 8002eea:	2110      	movs	r1, #16
 8002eec:	4802      	ldr	r0, [pc, #8]	; (8002ef8 <LTC_nCS_High+0x14>)
 8002eee:	f001 f887 	bl	8004000 <HAL_GPIO_WritePin>
}
 8002ef2:	bf00      	nop
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	40010800 	.word	0x40010800

08002efc <LTC_nCS_Low>:
/* Pull nCS line to SPI1 LOW */
void LTC_nCS_Low(void) {
 8002efc:	b580      	push	{r7, lr}
 8002efe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTC_nCS_GPIO_Port, LTC_nCS_Pin, GPIO_PIN_RESET); //Pull CS high
 8002f00:	2200      	movs	r2, #0
 8002f02:	2110      	movs	r1, #16
 8002f04:	4802      	ldr	r0, [pc, #8]	; (8002f10 <LTC_nCS_Low+0x14>)
 8002f06:	f001 f87b 	bl	8004000 <HAL_GPIO_WritePin>
}
 8002f0a:	bf00      	nop
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	40010800 	.word	0x40010800

08002f14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b085      	sub	sp, #20
 8002f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002f1a:	4b15      	ldr	r3, [pc, #84]	; (8002f70 <HAL_MspInit+0x5c>)
 8002f1c:	699b      	ldr	r3, [r3, #24]
 8002f1e:	4a14      	ldr	r2, [pc, #80]	; (8002f70 <HAL_MspInit+0x5c>)
 8002f20:	f043 0301 	orr.w	r3, r3, #1
 8002f24:	6193      	str	r3, [r2, #24]
 8002f26:	4b12      	ldr	r3, [pc, #72]	; (8002f70 <HAL_MspInit+0x5c>)
 8002f28:	699b      	ldr	r3, [r3, #24]
 8002f2a:	f003 0301 	and.w	r3, r3, #1
 8002f2e:	60bb      	str	r3, [r7, #8]
 8002f30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f32:	4b0f      	ldr	r3, [pc, #60]	; (8002f70 <HAL_MspInit+0x5c>)
 8002f34:	69db      	ldr	r3, [r3, #28]
 8002f36:	4a0e      	ldr	r2, [pc, #56]	; (8002f70 <HAL_MspInit+0x5c>)
 8002f38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f3c:	61d3      	str	r3, [r2, #28]
 8002f3e:	4b0c      	ldr	r3, [pc, #48]	; (8002f70 <HAL_MspInit+0x5c>)
 8002f40:	69db      	ldr	r3, [r3, #28]
 8002f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f46:	607b      	str	r3, [r7, #4]
 8002f48:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002f4a:	4b0a      	ldr	r3, [pc, #40]	; (8002f74 <HAL_MspInit+0x60>)
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	60fb      	str	r3, [r7, #12]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002f56:	60fb      	str	r3, [r7, #12]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f5e:	60fb      	str	r3, [r7, #12]
 8002f60:	4a04      	ldr	r2, [pc, #16]	; (8002f74 <HAL_MspInit+0x60>)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f66:	bf00      	nop
 8002f68:	3714      	adds	r7, #20
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bc80      	pop	{r7}
 8002f6e:	4770      	bx	lr
 8002f70:	40021000 	.word	0x40021000
 8002f74:	40010000 	.word	0x40010000

08002f78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002f7c:	e7fe      	b.n	8002f7c <NMI_Handler+0x4>

08002f7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f7e:	b480      	push	{r7}
 8002f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f82:	e7fe      	b.n	8002f82 <HardFault_Handler+0x4>

08002f84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f84:	b480      	push	{r7}
 8002f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f88:	e7fe      	b.n	8002f88 <MemManage_Handler+0x4>

08002f8a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f8a:	b480      	push	{r7}
 8002f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f8e:	e7fe      	b.n	8002f8e <BusFault_Handler+0x4>

08002f90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f90:	b480      	push	{r7}
 8002f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f94:	e7fe      	b.n	8002f94 <UsageFault_Handler+0x4>

08002f96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f96:	b480      	push	{r7}
 8002f98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f9a:	bf00      	nop
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bc80      	pop	{r7}
 8002fa0:	4770      	bx	lr

08002fa2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002fa2:	b480      	push	{r7}
 8002fa4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002fa6:	bf00      	nop
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bc80      	pop	{r7}
 8002fac:	4770      	bx	lr

08002fae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002fae:	b480      	push	{r7}
 8002fb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002fb2:	bf00      	nop
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bc80      	pop	{r7}
 8002fb8:	4770      	bx	lr

08002fba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fbe:	f000 f909 	bl	80031d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fc2:	bf00      	nop
 8002fc4:	bd80      	pop	{r7, pc}
	...

08002fc8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002fcc:	4802      	ldr	r0, [pc, #8]	; (8002fd8 <OTG_FS_IRQHandler+0x10>)
 8002fce:	f001 f987 	bl	80042e0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002fd2:	bf00      	nop
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	2000106c 	.word	0x2000106c

08002fdc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b086      	sub	sp, #24
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002fe4:	4a14      	ldr	r2, [pc, #80]	; (8003038 <_sbrk+0x5c>)
 8002fe6:	4b15      	ldr	r3, [pc, #84]	; (800303c <_sbrk+0x60>)
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ff0:	4b13      	ldr	r3, [pc, #76]	; (8003040 <_sbrk+0x64>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d102      	bne.n	8002ffe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ff8:	4b11      	ldr	r3, [pc, #68]	; (8003040 <_sbrk+0x64>)
 8002ffa:	4a12      	ldr	r2, [pc, #72]	; (8003044 <_sbrk+0x68>)
 8002ffc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ffe:	4b10      	ldr	r3, [pc, #64]	; (8003040 <_sbrk+0x64>)
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4413      	add	r3, r2
 8003006:	693a      	ldr	r2, [r7, #16]
 8003008:	429a      	cmp	r2, r3
 800300a:	d207      	bcs.n	800301c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800300c:	f007 f9e2 	bl	800a3d4 <__errno>
 8003010:	4603      	mov	r3, r0
 8003012:	220c      	movs	r2, #12
 8003014:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003016:	f04f 33ff 	mov.w	r3, #4294967295
 800301a:	e009      	b.n	8003030 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800301c:	4b08      	ldr	r3, [pc, #32]	; (8003040 <_sbrk+0x64>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003022:	4b07      	ldr	r3, [pc, #28]	; (8003040 <_sbrk+0x64>)
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4413      	add	r3, r2
 800302a:	4a05      	ldr	r2, [pc, #20]	; (8003040 <_sbrk+0x64>)
 800302c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800302e:	68fb      	ldr	r3, [r7, #12]
}
 8003030:	4618      	mov	r0, r3
 8003032:	3718      	adds	r7, #24
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}
 8003038:	20010000 	.word	0x20010000
 800303c:	00000400 	.word	0x00000400
 8003040:	20000354 	.word	0x20000354
 8003044:	200018d8 	.word	0x200018d8

08003048 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003048:	b480      	push	{r7}
 800304a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800304c:	bf00      	nop
 800304e:	46bd      	mov	sp, r7
 8003050:	bc80      	pop	{r7}
 8003052:	4770      	bx	lr

08003054 <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800305a:	463b      	mov	r3, r7
 800305c:	2200      	movs	r2, #0
 800305e:	601a      	str	r2, [r3, #0]
 8003060:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003062:	4b15      	ldr	r3, [pc, #84]	; (80030b8 <MX_TIM7_Init+0x64>)
 8003064:	4a15      	ldr	r2, [pc, #84]	; (80030bc <MX_TIM7_Init+0x68>)
 8003066:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8003068:	4b13      	ldr	r3, [pc, #76]	; (80030b8 <MX_TIM7_Init+0x64>)
 800306a:	2200      	movs	r2, #0
 800306c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800306e:	4b12      	ldr	r3, [pc, #72]	; (80030b8 <MX_TIM7_Init+0x64>)
 8003070:	2200      	movs	r2, #0
 8003072:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8003074:	4b10      	ldr	r3, [pc, #64]	; (80030b8 <MX_TIM7_Init+0x64>)
 8003076:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800307a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800307c:	4b0e      	ldr	r3, [pc, #56]	; (80030b8 <MX_TIM7_Init+0x64>)
 800307e:	2280      	movs	r2, #128	; 0x80
 8003080:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003082:	480d      	ldr	r0, [pc, #52]	; (80030b8 <MX_TIM7_Init+0x64>)
 8003084:	f003 fcbc 	bl	8006a00 <HAL_TIM_Base_Init>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d001      	beq.n	8003092 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800308e:	f7ff fc47 	bl	8002920 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003092:	2300      	movs	r3, #0
 8003094:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003096:	2300      	movs	r3, #0
 8003098:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800309a:	463b      	mov	r3, r7
 800309c:	4619      	mov	r1, r3
 800309e:	4806      	ldr	r0, [pc, #24]	; (80030b8 <MX_TIM7_Init+0x64>)
 80030a0:	f003 fd6a 	bl	8006b78 <HAL_TIMEx_MasterConfigSynchronization>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d001      	beq.n	80030ae <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80030aa:	f7ff fc39 	bl	8002920 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80030ae:	bf00      	nop
 80030b0:	3708      	adds	r7, #8
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	20000358 	.word	0x20000358
 80030bc:	40001400 	.word	0x40001400

080030c0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b085      	sub	sp, #20
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a09      	ldr	r2, [pc, #36]	; (80030f4 <HAL_TIM_Base_MspInit+0x34>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d10b      	bne.n	80030ea <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80030d2:	4b09      	ldr	r3, [pc, #36]	; (80030f8 <HAL_TIM_Base_MspInit+0x38>)
 80030d4:	69db      	ldr	r3, [r3, #28]
 80030d6:	4a08      	ldr	r2, [pc, #32]	; (80030f8 <HAL_TIM_Base_MspInit+0x38>)
 80030d8:	f043 0320 	orr.w	r3, r3, #32
 80030dc:	61d3      	str	r3, [r2, #28]
 80030de:	4b06      	ldr	r3, [pc, #24]	; (80030f8 <HAL_TIM_Base_MspInit+0x38>)
 80030e0:	69db      	ldr	r3, [r3, #28]
 80030e2:	f003 0320 	and.w	r3, r3, #32
 80030e6:	60fb      	str	r3, [r7, #12]
 80030e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80030ea:	bf00      	nop
 80030ec:	3714      	adds	r7, #20
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bc80      	pop	{r7}
 80030f2:	4770      	bx	lr
 80030f4:	40001400 	.word	0x40001400
 80030f8:	40021000 	.word	0x40021000

080030fc <Reset_Handler>:
 80030fc:	f7ff ffa4 	bl	8003048 <SystemInit>
 8003100:	480b      	ldr	r0, [pc, #44]	; (8003130 <LoopFillZerobss+0xe>)
 8003102:	490c      	ldr	r1, [pc, #48]	; (8003134 <LoopFillZerobss+0x12>)
 8003104:	4a0c      	ldr	r2, [pc, #48]	; (8003138 <LoopFillZerobss+0x16>)
 8003106:	2300      	movs	r3, #0
 8003108:	e002      	b.n	8003110 <LoopCopyDataInit>

0800310a <CopyDataInit>:
 800310a:	58d4      	ldr	r4, [r2, r3]
 800310c:	50c4      	str	r4, [r0, r3]
 800310e:	3304      	adds	r3, #4

08003110 <LoopCopyDataInit>:
 8003110:	18c4      	adds	r4, r0, r3
 8003112:	428c      	cmp	r4, r1
 8003114:	d3f9      	bcc.n	800310a <CopyDataInit>
 8003116:	4a09      	ldr	r2, [pc, #36]	; (800313c <LoopFillZerobss+0x1a>)
 8003118:	4c09      	ldr	r4, [pc, #36]	; (8003140 <LoopFillZerobss+0x1e>)
 800311a:	2300      	movs	r3, #0
 800311c:	e001      	b.n	8003122 <LoopFillZerobss>

0800311e <FillZerobss>:
 800311e:	6013      	str	r3, [r2, #0]
 8003120:	3204      	adds	r2, #4

08003122 <LoopFillZerobss>:
 8003122:	42a2      	cmp	r2, r4
 8003124:	d3fb      	bcc.n	800311e <FillZerobss>
 8003126:	f007 f95b 	bl	800a3e0 <__libc_init_array>
 800312a:	f7ff fa27 	bl	800257c <main>
 800312e:	4770      	bx	lr
 8003130:	20000000 	.word	0x20000000
 8003134:	20000250 	.word	0x20000250
 8003138:	0800b434 	.word	0x0800b434
 800313c:	20000250 	.word	0x20000250
 8003140:	200018d8 	.word	0x200018d8

08003144 <ADC1_2_IRQHandler>:
 8003144:	e7fe      	b.n	8003144 <ADC1_2_IRQHandler>
	...

08003148 <HAL_Init>:
 8003148:	b580      	push	{r7, lr}
 800314a:	af00      	add	r7, sp, #0
 800314c:	4b08      	ldr	r3, [pc, #32]	; (8003170 <HAL_Init+0x28>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a07      	ldr	r2, [pc, #28]	; (8003170 <HAL_Init+0x28>)
 8003152:	f043 0310 	orr.w	r3, r3, #16
 8003156:	6013      	str	r3, [r2, #0]
 8003158:	2003      	movs	r0, #3
 800315a:	f000 fd8b 	bl	8003c74 <HAL_NVIC_SetPriorityGrouping>
 800315e:	200f      	movs	r0, #15
 8003160:	f000 f808 	bl	8003174 <HAL_InitTick>
 8003164:	f7ff fed6 	bl	8002f14 <HAL_MspInit>
 8003168:	2300      	movs	r3, #0
 800316a:	4618      	mov	r0, r3
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	40022000 	.word	0x40022000

08003174 <HAL_InitTick>:
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	4b12      	ldr	r3, [pc, #72]	; (80031c8 <HAL_InitTick+0x54>)
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	4b12      	ldr	r3, [pc, #72]	; (80031cc <HAL_InitTick+0x58>)
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	4619      	mov	r1, r3
 8003186:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800318a:	fbb3 f3f1 	udiv	r3, r3, r1
 800318e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003192:	4618      	mov	r0, r3
 8003194:	f000 fda3 	bl	8003cde <HAL_SYSTICK_Config>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d001      	beq.n	80031a2 <HAL_InitTick+0x2e>
 800319e:	2301      	movs	r3, #1
 80031a0:	e00e      	b.n	80031c0 <HAL_InitTick+0x4c>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2b0f      	cmp	r3, #15
 80031a6:	d80a      	bhi.n	80031be <HAL_InitTick+0x4a>
 80031a8:	2200      	movs	r2, #0
 80031aa:	6879      	ldr	r1, [r7, #4]
 80031ac:	f04f 30ff 	mov.w	r0, #4294967295
 80031b0:	f000 fd6b 	bl	8003c8a <HAL_NVIC_SetPriority>
 80031b4:	4a06      	ldr	r2, [pc, #24]	; (80031d0 <HAL_InitTick+0x5c>)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6013      	str	r3, [r2, #0]
 80031ba:	2300      	movs	r3, #0
 80031bc:	e000      	b.n	80031c0 <HAL_InitTick+0x4c>
 80031be:	2301      	movs	r3, #1
 80031c0:	4618      	mov	r0, r3
 80031c2:	3708      	adds	r7, #8
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	20000084 	.word	0x20000084
 80031cc:	2000008c 	.word	0x2000008c
 80031d0:	20000088 	.word	0x20000088

080031d4 <HAL_IncTick>:
 80031d4:	b480      	push	{r7}
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	4b05      	ldr	r3, [pc, #20]	; (80031f0 <HAL_IncTick+0x1c>)
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	461a      	mov	r2, r3
 80031de:	4b05      	ldr	r3, [pc, #20]	; (80031f4 <HAL_IncTick+0x20>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4413      	add	r3, r2
 80031e4:	4a03      	ldr	r2, [pc, #12]	; (80031f4 <HAL_IncTick+0x20>)
 80031e6:	6013      	str	r3, [r2, #0]
 80031e8:	bf00      	nop
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bc80      	pop	{r7}
 80031ee:	4770      	bx	lr
 80031f0:	2000008c 	.word	0x2000008c
 80031f4:	200003a0 	.word	0x200003a0

080031f8 <HAL_GetTick>:
 80031f8:	b480      	push	{r7}
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	4b02      	ldr	r3, [pc, #8]	; (8003208 <HAL_GetTick+0x10>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4618      	mov	r0, r3
 8003202:	46bd      	mov	sp, r7
 8003204:	bc80      	pop	{r7}
 8003206:	4770      	bx	lr
 8003208:	200003a0 	.word	0x200003a0

0800320c <HAL_Delay>:
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	f7ff fff0 	bl	80031f8 <HAL_GetTick>
 8003218:	60b8      	str	r0, [r7, #8]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	60fb      	str	r3, [r7, #12]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003224:	d005      	beq.n	8003232 <HAL_Delay+0x26>
 8003226:	4b0a      	ldr	r3, [pc, #40]	; (8003250 <HAL_Delay+0x44>)
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	461a      	mov	r2, r3
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	4413      	add	r3, r2
 8003230:	60fb      	str	r3, [r7, #12]
 8003232:	bf00      	nop
 8003234:	f7ff ffe0 	bl	80031f8 <HAL_GetTick>
 8003238:	4602      	mov	r2, r0
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	68fa      	ldr	r2, [r7, #12]
 8003240:	429a      	cmp	r2, r3
 8003242:	d8f7      	bhi.n	8003234 <HAL_Delay+0x28>
 8003244:	bf00      	nop
 8003246:	bf00      	nop
 8003248:	3710      	adds	r7, #16
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	2000008c 	.word	0x2000008c

08003254 <HAL_ADC_Init>:
 8003254:	b580      	push	{r7, lr}
 8003256:	b086      	sub	sp, #24
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	2300      	movs	r3, #0
 800325e:	75fb      	strb	r3, [r7, #23]
 8003260:	2300      	movs	r3, #0
 8003262:	613b      	str	r3, [r7, #16]
 8003264:	2300      	movs	r3, #0
 8003266:	60bb      	str	r3, [r7, #8]
 8003268:	2300      	movs	r3, #0
 800326a:	60fb      	str	r3, [r7, #12]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d101      	bne.n	8003276 <HAL_ADC_Init+0x22>
 8003272:	2301      	movs	r3, #1
 8003274:	e0be      	b.n	80033f4 <HAL_ADC_Init+0x1a0>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	2b00      	cmp	r3, #0
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003280:	2b00      	cmp	r3, #0
 8003282:	d109      	bne.n	8003298 <HAL_ADC_Init+0x44>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	62da      	str	r2, [r3, #44]	; 0x2c
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f7fe fcee 	bl	8001c74 <HAL_ADC_MspInit>
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f000 f9ab 	bl	80035f4 <ADC_ConversionStop_Disable>
 800329e:	4603      	mov	r3, r0
 80032a0:	75fb      	strb	r3, [r7, #23]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a6:	f003 0310 	and.w	r3, r3, #16
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	f040 8099 	bne.w	80033e2 <HAL_ADC_Init+0x18e>
 80032b0:	7dfb      	ldrb	r3, [r7, #23]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	f040 8095 	bne.w	80033e2 <HAL_ADC_Init+0x18e>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032bc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80032c0:	f023 0302 	bic.w	r3, r3, #2
 80032c4:	f043 0202 	orr.w	r2, r3, #2
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	629a      	str	r2, [r3, #40]	; 0x28
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	685a      	ldr	r2, [r3, #4]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	69db      	ldr	r3, [r3, #28]
 80032d4:	431a      	orrs	r2, r3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	7b1b      	ldrb	r3, [r3, #12]
 80032da:	005b      	lsls	r3, r3, #1
 80032dc:	4313      	orrs	r3, r2
 80032de:	68ba      	ldr	r2, [r7, #8]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	60bb      	str	r3, [r7, #8]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032ec:	d003      	beq.n	80032f6 <HAL_ADC_Init+0xa2>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d102      	bne.n	80032fc <HAL_ADC_Init+0xa8>
 80032f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032fa:	e000      	b.n	80032fe <HAL_ADC_Init+0xaa>
 80032fc:	2300      	movs	r3, #0
 80032fe:	693a      	ldr	r2, [r7, #16]
 8003300:	4313      	orrs	r3, r2
 8003302:	613b      	str	r3, [r7, #16]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	7d1b      	ldrb	r3, [r3, #20]
 8003308:	2b01      	cmp	r3, #1
 800330a:	d119      	bne.n	8003340 <HAL_ADC_Init+0xec>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	7b1b      	ldrb	r3, [r3, #12]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d109      	bne.n	8003328 <HAL_ADC_Init+0xd4>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	699b      	ldr	r3, [r3, #24]
 8003318:	3b01      	subs	r3, #1
 800331a:	035a      	lsls	r2, r3, #13
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	4313      	orrs	r3, r2
 8003320:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003324:	613b      	str	r3, [r7, #16]
 8003326:	e00b      	b.n	8003340 <HAL_ADC_Init+0xec>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800332c:	f043 0220 	orr.w	r2, r3, #32
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	629a      	str	r2, [r3, #40]	; 0x28
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003338:	f043 0201 	orr.w	r2, r3, #1
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	693a      	ldr	r2, [r7, #16]
 8003350:	430a      	orrs	r2, r1
 8003352:	605a      	str	r2, [r3, #4]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	689a      	ldr	r2, [r3, #8]
 800335a:	4b28      	ldr	r3, [pc, #160]	; (80033fc <HAL_ADC_Init+0x1a8>)
 800335c:	4013      	ands	r3, r2
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	6812      	ldr	r2, [r2, #0]
 8003362:	68b9      	ldr	r1, [r7, #8]
 8003364:	430b      	orrs	r3, r1
 8003366:	6093      	str	r3, [r2, #8]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003370:	d003      	beq.n	800337a <HAL_ADC_Init+0x126>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	2b01      	cmp	r3, #1
 8003378:	d104      	bne.n	8003384 <HAL_ADC_Init+0x130>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	3b01      	subs	r3, #1
 8003380:	051b      	lsls	r3, r3, #20
 8003382:	60fb      	str	r3, [r7, #12]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800338a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	68fa      	ldr	r2, [r7, #12]
 8003394:	430a      	orrs	r2, r1
 8003396:	62da      	str	r2, [r3, #44]	; 0x2c
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	689a      	ldr	r2, [r3, #8]
 800339e:	4b18      	ldr	r3, [pc, #96]	; (8003400 <HAL_ADC_Init+0x1ac>)
 80033a0:	4013      	ands	r3, r2
 80033a2:	68ba      	ldr	r2, [r7, #8]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d10b      	bne.n	80033c0 <HAL_ADC_Init+0x16c>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2200      	movs	r2, #0
 80033ac:	62da      	str	r2, [r3, #44]	; 0x2c
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b2:	f023 0303 	bic.w	r3, r3, #3
 80033b6:	f043 0201 	orr.w	r2, r3, #1
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	629a      	str	r2, [r3, #40]	; 0x28
 80033be:	e018      	b.n	80033f2 <HAL_ADC_Init+0x19e>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c4:	f023 0312 	bic.w	r3, r3, #18
 80033c8:	f043 0210 	orr.w	r2, r3, #16
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	629a      	str	r2, [r3, #40]	; 0x28
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d4:	f043 0201 	orr.w	r2, r3, #1
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	62da      	str	r2, [r3, #44]	; 0x2c
 80033dc:	2301      	movs	r3, #1
 80033de:	75fb      	strb	r3, [r7, #23]
 80033e0:	e007      	b.n	80033f2 <HAL_ADC_Init+0x19e>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e6:	f043 0210 	orr.w	r2, r3, #16
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	629a      	str	r2, [r3, #40]	; 0x28
 80033ee:	2301      	movs	r3, #1
 80033f0:	75fb      	strb	r3, [r7, #23]
 80033f2:	7dfb      	ldrb	r3, [r7, #23]
 80033f4:	4618      	mov	r0, r3
 80033f6:	3718      	adds	r7, #24
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	ffe1f7fd 	.word	0xffe1f7fd
 8003400:	ff1f0efe 	.word	0xff1f0efe

08003404 <HAL_ADC_ConfigChannel>:
 8003404:	b480      	push	{r7}
 8003406:	b085      	sub	sp, #20
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	6039      	str	r1, [r7, #0]
 800340e:	2300      	movs	r3, #0
 8003410:	73fb      	strb	r3, [r7, #15]
 8003412:	2300      	movs	r3, #0
 8003414:	60bb      	str	r3, [r7, #8]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800341c:	2b01      	cmp	r3, #1
 800341e:	d101      	bne.n	8003424 <HAL_ADC_ConfigChannel+0x20>
 8003420:	2302      	movs	r3, #2
 8003422:	e0dc      	b.n	80035de <HAL_ADC_ConfigChannel+0x1da>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	2b06      	cmp	r3, #6
 8003432:	d81c      	bhi.n	800346e <HAL_ADC_ConfigChannel+0x6a>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	685a      	ldr	r2, [r3, #4]
 800343e:	4613      	mov	r3, r2
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	4413      	add	r3, r2
 8003444:	3b05      	subs	r3, #5
 8003446:	221f      	movs	r2, #31
 8003448:	fa02 f303 	lsl.w	r3, r2, r3
 800344c:	43db      	mvns	r3, r3
 800344e:	4019      	ands	r1, r3
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	6818      	ldr	r0, [r3, #0]
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	685a      	ldr	r2, [r3, #4]
 8003458:	4613      	mov	r3, r2
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	4413      	add	r3, r2
 800345e:	3b05      	subs	r3, #5
 8003460:	fa00 f203 	lsl.w	r2, r0, r3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	430a      	orrs	r2, r1
 800346a:	635a      	str	r2, [r3, #52]	; 0x34
 800346c:	e03c      	b.n	80034e8 <HAL_ADC_ConfigChannel+0xe4>
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	2b0c      	cmp	r3, #12
 8003474:	d81c      	bhi.n	80034b0 <HAL_ADC_ConfigChannel+0xac>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	685a      	ldr	r2, [r3, #4]
 8003480:	4613      	mov	r3, r2
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	4413      	add	r3, r2
 8003486:	3b23      	subs	r3, #35	; 0x23
 8003488:	221f      	movs	r2, #31
 800348a:	fa02 f303 	lsl.w	r3, r2, r3
 800348e:	43db      	mvns	r3, r3
 8003490:	4019      	ands	r1, r3
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	6818      	ldr	r0, [r3, #0]
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	685a      	ldr	r2, [r3, #4]
 800349a:	4613      	mov	r3, r2
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	4413      	add	r3, r2
 80034a0:	3b23      	subs	r3, #35	; 0x23
 80034a2:	fa00 f203 	lsl.w	r2, r0, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	430a      	orrs	r2, r1
 80034ac:	631a      	str	r2, [r3, #48]	; 0x30
 80034ae:	e01b      	b.n	80034e8 <HAL_ADC_ConfigChannel+0xe4>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	685a      	ldr	r2, [r3, #4]
 80034ba:	4613      	mov	r3, r2
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	4413      	add	r3, r2
 80034c0:	3b41      	subs	r3, #65	; 0x41
 80034c2:	221f      	movs	r2, #31
 80034c4:	fa02 f303 	lsl.w	r3, r2, r3
 80034c8:	43db      	mvns	r3, r3
 80034ca:	4019      	ands	r1, r3
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	6818      	ldr	r0, [r3, #0]
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	685a      	ldr	r2, [r3, #4]
 80034d4:	4613      	mov	r3, r2
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	4413      	add	r3, r2
 80034da:	3b41      	subs	r3, #65	; 0x41
 80034dc:	fa00 f203 	lsl.w	r2, r0, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	430a      	orrs	r2, r1
 80034e6:	62da      	str	r2, [r3, #44]	; 0x2c
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	2b09      	cmp	r3, #9
 80034ee:	d91c      	bls.n	800352a <HAL_ADC_ConfigChannel+0x126>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	68d9      	ldr	r1, [r3, #12]
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	4613      	mov	r3, r2
 80034fc:	005b      	lsls	r3, r3, #1
 80034fe:	4413      	add	r3, r2
 8003500:	3b1e      	subs	r3, #30
 8003502:	2207      	movs	r2, #7
 8003504:	fa02 f303 	lsl.w	r3, r2, r3
 8003508:	43db      	mvns	r3, r3
 800350a:	4019      	ands	r1, r3
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	6898      	ldr	r0, [r3, #8]
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	4613      	mov	r3, r2
 8003516:	005b      	lsls	r3, r3, #1
 8003518:	4413      	add	r3, r2
 800351a:	3b1e      	subs	r3, #30
 800351c:	fa00 f203 	lsl.w	r2, r0, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	430a      	orrs	r2, r1
 8003526:	60da      	str	r2, [r3, #12]
 8003528:	e019      	b.n	800355e <HAL_ADC_ConfigChannel+0x15a>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	6919      	ldr	r1, [r3, #16]
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	4613      	mov	r3, r2
 8003536:	005b      	lsls	r3, r3, #1
 8003538:	4413      	add	r3, r2
 800353a:	2207      	movs	r2, #7
 800353c:	fa02 f303 	lsl.w	r3, r2, r3
 8003540:	43db      	mvns	r3, r3
 8003542:	4019      	ands	r1, r3
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	6898      	ldr	r0, [r3, #8]
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	4613      	mov	r3, r2
 800354e:	005b      	lsls	r3, r3, #1
 8003550:	4413      	add	r3, r2
 8003552:	fa00 f203 	lsl.w	r2, r0, r3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	430a      	orrs	r2, r1
 800355c:	611a      	str	r2, [r3, #16]
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2b10      	cmp	r3, #16
 8003564:	d003      	beq.n	800356e <HAL_ADC_ConfigChannel+0x16a>
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	2b11      	cmp	r3, #17
 800356c:	d132      	bne.n	80035d4 <HAL_ADC_ConfigChannel+0x1d0>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a1d      	ldr	r2, [pc, #116]	; (80035e8 <HAL_ADC_ConfigChannel+0x1e4>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d125      	bne.n	80035c4 <HAL_ADC_ConfigChannel+0x1c0>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d126      	bne.n	80035d4 <HAL_ADC_ConfigChannel+0x1d0>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	689a      	ldr	r2, [r3, #8]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003594:	609a      	str	r2, [r3, #8]
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2b10      	cmp	r3, #16
 800359c:	d11a      	bne.n	80035d4 <HAL_ADC_ConfigChannel+0x1d0>
 800359e:	4b13      	ldr	r3, [pc, #76]	; (80035ec <HAL_ADC_ConfigChannel+0x1e8>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a13      	ldr	r2, [pc, #76]	; (80035f0 <HAL_ADC_ConfigChannel+0x1ec>)
 80035a4:	fba2 2303 	umull	r2, r3, r2, r3
 80035a8:	0c9a      	lsrs	r2, r3, #18
 80035aa:	4613      	mov	r3, r2
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	4413      	add	r3, r2
 80035b0:	005b      	lsls	r3, r3, #1
 80035b2:	60bb      	str	r3, [r7, #8]
 80035b4:	e002      	b.n	80035bc <HAL_ADC_ConfigChannel+0x1b8>
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	3b01      	subs	r3, #1
 80035ba:	60bb      	str	r3, [r7, #8]
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d1f9      	bne.n	80035b6 <HAL_ADC_ConfigChannel+0x1b2>
 80035c2:	e007      	b.n	80035d4 <HAL_ADC_ConfigChannel+0x1d0>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c8:	f043 0220 	orr.w	r2, r3, #32
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	629a      	str	r2, [r3, #40]	; 0x28
 80035d0:	2301      	movs	r3, #1
 80035d2:	73fb      	strb	r3, [r7, #15]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80035dc:	7bfb      	ldrb	r3, [r7, #15]
 80035de:	4618      	mov	r0, r3
 80035e0:	3714      	adds	r7, #20
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bc80      	pop	{r7}
 80035e6:	4770      	bx	lr
 80035e8:	40012400 	.word	0x40012400
 80035ec:	20000084 	.word	0x20000084
 80035f0:	431bde83 	.word	0x431bde83

080035f4 <ADC_ConversionStop_Disable>:
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	2300      	movs	r3, #0
 80035fe:	60fb      	str	r3, [r7, #12]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	f003 0301 	and.w	r3, r3, #1
 800360a:	2b01      	cmp	r3, #1
 800360c:	d12e      	bne.n	800366c <ADC_ConversionStop_Disable+0x78>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	689a      	ldr	r2, [r3, #8]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f022 0201 	bic.w	r2, r2, #1
 800361c:	609a      	str	r2, [r3, #8]
 800361e:	f7ff fdeb 	bl	80031f8 <HAL_GetTick>
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	e01b      	b.n	800365e <ADC_ConversionStop_Disable+0x6a>
 8003626:	f7ff fde7 	bl	80031f8 <HAL_GetTick>
 800362a:	4602      	mov	r2, r0
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	2b02      	cmp	r3, #2
 8003632:	d914      	bls.n	800365e <ADC_ConversionStop_Disable+0x6a>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f003 0301 	and.w	r3, r3, #1
 800363e:	2b01      	cmp	r3, #1
 8003640:	d10d      	bne.n	800365e <ADC_ConversionStop_Disable+0x6a>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003646:	f043 0210 	orr.w	r2, r3, #16
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	629a      	str	r2, [r3, #40]	; 0x28
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003652:	f043 0201 	orr.w	r2, r3, #1
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	62da      	str	r2, [r3, #44]	; 0x2c
 800365a:	2301      	movs	r3, #1
 800365c:	e007      	b.n	800366e <ADC_ConversionStop_Disable+0x7a>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	f003 0301 	and.w	r3, r3, #1
 8003668:	2b01      	cmp	r3, #1
 800366a:	d0dc      	beq.n	8003626 <ADC_ConversionStop_Disable+0x32>
 800366c:	2300      	movs	r3, #0
 800366e:	4618      	mov	r0, r3
 8003670:	3710      	adds	r7, #16
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}

08003676 <HAL_CAN_Init>:
 8003676:	b580      	push	{r7, lr}
 8003678:	b084      	sub	sp, #16
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d101      	bne.n	8003688 <HAL_CAN_Init+0x12>
 8003684:	2301      	movs	r3, #1
 8003686:	e0ed      	b.n	8003864 <HAL_CAN_Init+0x1ee>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800368e:	b2db      	uxtb	r3, r3
 8003690:	2b00      	cmp	r3, #0
 8003692:	d102      	bne.n	800369a <HAL_CAN_Init+0x24>
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f7fe fc89 	bl	8001fac <HAL_CAN_MspInit>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f042 0201 	orr.w	r2, r2, #1
 80036a8:	601a      	str	r2, [r3, #0]
 80036aa:	f7ff fda5 	bl	80031f8 <HAL_GetTick>
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	e012      	b.n	80036d8 <HAL_CAN_Init+0x62>
 80036b2:	f7ff fda1 	bl	80031f8 <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	2b0a      	cmp	r3, #10
 80036be:	d90b      	bls.n	80036d8 <HAL_CAN_Init+0x62>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	625a      	str	r2, [r3, #36]	; 0x24
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2205      	movs	r2, #5
 80036d0:	f883 2020 	strb.w	r2, [r3, #32]
 80036d4:	2301      	movs	r3, #1
 80036d6:	e0c5      	b.n	8003864 <HAL_CAN_Init+0x1ee>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	f003 0301 	and.w	r3, r3, #1
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d0e5      	beq.n	80036b2 <HAL_CAN_Init+0x3c>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f022 0202 	bic.w	r2, r2, #2
 80036f4:	601a      	str	r2, [r3, #0]
 80036f6:	f7ff fd7f 	bl	80031f8 <HAL_GetTick>
 80036fa:	60f8      	str	r0, [r7, #12]
 80036fc:	e012      	b.n	8003724 <HAL_CAN_Init+0xae>
 80036fe:	f7ff fd7b 	bl	80031f8 <HAL_GetTick>
 8003702:	4602      	mov	r2, r0
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	2b0a      	cmp	r3, #10
 800370a:	d90b      	bls.n	8003724 <HAL_CAN_Init+0xae>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003710:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	625a      	str	r2, [r3, #36]	; 0x24
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2205      	movs	r2, #5
 800371c:	f883 2020 	strb.w	r2, [r3, #32]
 8003720:	2301      	movs	r3, #1
 8003722:	e09f      	b.n	8003864 <HAL_CAN_Init+0x1ee>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f003 0302 	and.w	r3, r3, #2
 800372e:	2b00      	cmp	r3, #0
 8003730:	d1e5      	bne.n	80036fe <HAL_CAN_Init+0x88>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	7e1b      	ldrb	r3, [r3, #24]
 8003736:	2b01      	cmp	r3, #1
 8003738:	d108      	bne.n	800374c <HAL_CAN_Init+0xd6>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003748:	601a      	str	r2, [r3, #0]
 800374a:	e007      	b.n	800375c <HAL_CAN_Init+0xe6>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800375a:	601a      	str	r2, [r3, #0]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	7e5b      	ldrb	r3, [r3, #25]
 8003760:	2b01      	cmp	r3, #1
 8003762:	d108      	bne.n	8003776 <HAL_CAN_Init+0x100>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003772:	601a      	str	r2, [r3, #0]
 8003774:	e007      	b.n	8003786 <HAL_CAN_Init+0x110>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003784:	601a      	str	r2, [r3, #0]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	7e9b      	ldrb	r3, [r3, #26]
 800378a:	2b01      	cmp	r3, #1
 800378c:	d108      	bne.n	80037a0 <HAL_CAN_Init+0x12a>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f042 0220 	orr.w	r2, r2, #32
 800379c:	601a      	str	r2, [r3, #0]
 800379e:	e007      	b.n	80037b0 <HAL_CAN_Init+0x13a>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f022 0220 	bic.w	r2, r2, #32
 80037ae:	601a      	str	r2, [r3, #0]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	7edb      	ldrb	r3, [r3, #27]
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d108      	bne.n	80037ca <HAL_CAN_Init+0x154>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f022 0210 	bic.w	r2, r2, #16
 80037c6:	601a      	str	r2, [r3, #0]
 80037c8:	e007      	b.n	80037da <HAL_CAN_Init+0x164>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f042 0210 	orr.w	r2, r2, #16
 80037d8:	601a      	str	r2, [r3, #0]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	7f1b      	ldrb	r3, [r3, #28]
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d108      	bne.n	80037f4 <HAL_CAN_Init+0x17e>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f042 0208 	orr.w	r2, r2, #8
 80037f0:	601a      	str	r2, [r3, #0]
 80037f2:	e007      	b.n	8003804 <HAL_CAN_Init+0x18e>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f022 0208 	bic.w	r2, r2, #8
 8003802:	601a      	str	r2, [r3, #0]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	7f5b      	ldrb	r3, [r3, #29]
 8003808:	2b01      	cmp	r3, #1
 800380a:	d108      	bne.n	800381e <HAL_CAN_Init+0x1a8>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f042 0204 	orr.w	r2, r2, #4
 800381a:	601a      	str	r2, [r3, #0]
 800381c:	e007      	b.n	800382e <HAL_CAN_Init+0x1b8>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f022 0204 	bic.w	r2, r2, #4
 800382c:	601a      	str	r2, [r3, #0]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	689a      	ldr	r2, [r3, #8]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	431a      	orrs	r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	691b      	ldr	r3, [r3, #16]
 800383c:	431a      	orrs	r2, r3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	695b      	ldr	r3, [r3, #20]
 8003842:	ea42 0103 	orr.w	r1, r2, r3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	1e5a      	subs	r2, r3, #1
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	430a      	orrs	r2, r1
 8003852:	61da      	str	r2, [r3, #28]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	625a      	str	r2, [r3, #36]	; 0x24
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2201      	movs	r2, #1
 800385e:	f883 2020 	strb.w	r2, [r3, #32]
 8003862:	2300      	movs	r3, #0
 8003864:	4618      	mov	r0, r3
 8003866:	3710      	adds	r7, #16
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <HAL_CAN_Start>:
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f893 3020 	ldrb.w	r3, [r3, #32]
 800387a:	b2db      	uxtb	r3, r3
 800387c:	2b01      	cmp	r3, #1
 800387e:	d12e      	bne.n	80038de <HAL_CAN_Start+0x72>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2202      	movs	r2, #2
 8003884:	f883 2020 	strb.w	r2, [r3, #32]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f022 0201 	bic.w	r2, r2, #1
 8003896:	601a      	str	r2, [r3, #0]
 8003898:	f7ff fcae 	bl	80031f8 <HAL_GetTick>
 800389c:	60f8      	str	r0, [r7, #12]
 800389e:	e012      	b.n	80038c6 <HAL_CAN_Start+0x5a>
 80038a0:	f7ff fcaa 	bl	80031f8 <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	2b0a      	cmp	r3, #10
 80038ac:	d90b      	bls.n	80038c6 <HAL_CAN_Start+0x5a>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	625a      	str	r2, [r3, #36]	; 0x24
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2205      	movs	r2, #5
 80038be:	f883 2020 	strb.w	r2, [r3, #32]
 80038c2:	2301      	movs	r3, #1
 80038c4:	e012      	b.n	80038ec <HAL_CAN_Start+0x80>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f003 0301 	and.w	r3, r3, #1
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d1e5      	bne.n	80038a0 <HAL_CAN_Start+0x34>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	625a      	str	r2, [r3, #36]	; 0x24
 80038da:	2300      	movs	r3, #0
 80038dc:	e006      	b.n	80038ec <HAL_CAN_Start+0x80>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	625a      	str	r2, [r3, #36]	; 0x24
 80038ea:	2301      	movs	r3, #1
 80038ec:	4618      	mov	r0, r3
 80038ee:	3710      	adds	r7, #16
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <HAL_CAN_AddTxMessage>:
 80038f4:	b480      	push	{r7}
 80038f6:	b089      	sub	sp, #36	; 0x24
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	60f8      	str	r0, [r7, #12]
 80038fc:	60b9      	str	r1, [r7, #8]
 80038fe:	607a      	str	r2, [r7, #4]
 8003900:	603b      	str	r3, [r7, #0]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003908:	77fb      	strb	r3, [r7, #31]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	61bb      	str	r3, [r7, #24]
 8003912:	7ffb      	ldrb	r3, [r7, #31]
 8003914:	2b01      	cmp	r3, #1
 8003916:	d003      	beq.n	8003920 <HAL_CAN_AddTxMessage+0x2c>
 8003918:	7ffb      	ldrb	r3, [r7, #31]
 800391a:	2b02      	cmp	r3, #2
 800391c:	f040 80ad 	bne.w	8003a7a <HAL_CAN_AddTxMessage+0x186>
 8003920:	69bb      	ldr	r3, [r7, #24]
 8003922:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d10a      	bne.n	8003940 <HAL_CAN_AddTxMessage+0x4c>
 800392a:	69bb      	ldr	r3, [r7, #24]
 800392c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d105      	bne.n	8003940 <HAL_CAN_AddTxMessage+0x4c>
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800393a:	2b00      	cmp	r3, #0
 800393c:	f000 8095 	beq.w	8003a6a <HAL_CAN_AddTxMessage+0x176>
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	0e1b      	lsrs	r3, r3, #24
 8003944:	f003 0303 	and.w	r3, r3, #3
 8003948:	617b      	str	r3, [r7, #20]
 800394a:	2201      	movs	r2, #1
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	409a      	lsls	r2, r3
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	601a      	str	r2, [r3, #0]
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d10d      	bne.n	8003978 <HAL_CAN_AddTxMessage+0x84>
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	055a      	lsls	r2, r3, #21
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	68f9      	ldr	r1, [r7, #12]
 8003968:	6809      	ldr	r1, [r1, #0]
 800396a:	431a      	orrs	r2, r3
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	3318      	adds	r3, #24
 8003970:	011b      	lsls	r3, r3, #4
 8003972:	440b      	add	r3, r1
 8003974:	601a      	str	r2, [r3, #0]
 8003976:	e00f      	b.n	8003998 <HAL_CAN_AddTxMessage+0xa4>
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	00da      	lsls	r2, r3, #3
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	431a      	orrs	r2, r3
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	68f9      	ldr	r1, [r7, #12]
 800398a:	6809      	ldr	r1, [r1, #0]
 800398c:	431a      	orrs	r2, r3
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	3318      	adds	r3, #24
 8003992:	011b      	lsls	r3, r3, #4
 8003994:	440b      	add	r3, r1
 8003996:	601a      	str	r2, [r3, #0]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6819      	ldr	r1, [r3, #0]
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	691a      	ldr	r2, [r3, #16]
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	3318      	adds	r3, #24
 80039a4:	011b      	lsls	r3, r3, #4
 80039a6:	440b      	add	r3, r1
 80039a8:	3304      	adds	r3, #4
 80039aa:	601a      	str	r2, [r3, #0]
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	7d1b      	ldrb	r3, [r3, #20]
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d111      	bne.n	80039d8 <HAL_CAN_AddTxMessage+0xe4>
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	3318      	adds	r3, #24
 80039bc:	011b      	lsls	r3, r3, #4
 80039be:	4413      	add	r3, r2
 80039c0:	3304      	adds	r3, #4
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	68fa      	ldr	r2, [r7, #12]
 80039c6:	6811      	ldr	r1, [r2, #0]
 80039c8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	3318      	adds	r3, #24
 80039d0:	011b      	lsls	r3, r3, #4
 80039d2:	440b      	add	r3, r1
 80039d4:	3304      	adds	r3, #4
 80039d6:	601a      	str	r2, [r3, #0]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	3307      	adds	r3, #7
 80039dc:	781b      	ldrb	r3, [r3, #0]
 80039de:	061a      	lsls	r2, r3, #24
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	3306      	adds	r3, #6
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	041b      	lsls	r3, r3, #16
 80039e8:	431a      	orrs	r2, r3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	3305      	adds	r3, #5
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	021b      	lsls	r3, r3, #8
 80039f2:	4313      	orrs	r3, r2
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	3204      	adds	r2, #4
 80039f8:	7812      	ldrb	r2, [r2, #0]
 80039fa:	4610      	mov	r0, r2
 80039fc:	68fa      	ldr	r2, [r7, #12]
 80039fe:	6811      	ldr	r1, [r2, #0]
 8003a00:	ea43 0200 	orr.w	r2, r3, r0
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	011b      	lsls	r3, r3, #4
 8003a08:	440b      	add	r3, r1
 8003a0a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003a0e:	601a      	str	r2, [r3, #0]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	3303      	adds	r3, #3
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	061a      	lsls	r2, r3, #24
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	3302      	adds	r3, #2
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	041b      	lsls	r3, r3, #16
 8003a20:	431a      	orrs	r2, r3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	3301      	adds	r3, #1
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	021b      	lsls	r3, r3, #8
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	7812      	ldrb	r2, [r2, #0]
 8003a30:	4610      	mov	r0, r2
 8003a32:	68fa      	ldr	r2, [r7, #12]
 8003a34:	6811      	ldr	r1, [r2, #0]
 8003a36:	ea43 0200 	orr.w	r2, r3, r0
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	011b      	lsls	r3, r3, #4
 8003a3e:	440b      	add	r3, r1
 8003a40:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003a44:	601a      	str	r2, [r3, #0]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	3318      	adds	r3, #24
 8003a4e:	011b      	lsls	r3, r3, #4
 8003a50:	4413      	add	r3, r2
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	68fa      	ldr	r2, [r7, #12]
 8003a56:	6811      	ldr	r1, [r2, #0]
 8003a58:	f043 0201 	orr.w	r2, r3, #1
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	3318      	adds	r3, #24
 8003a60:	011b      	lsls	r3, r3, #4
 8003a62:	440b      	add	r3, r1
 8003a64:	601a      	str	r2, [r3, #0]
 8003a66:	2300      	movs	r3, #0
 8003a68:	e00e      	b.n	8003a88 <HAL_CAN_AddTxMessage+0x194>
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	625a      	str	r2, [r3, #36]	; 0x24
 8003a76:	2301      	movs	r3, #1
 8003a78:	e006      	b.n	8003a88 <HAL_CAN_AddTxMessage+0x194>
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	625a      	str	r2, [r3, #36]	; 0x24
 8003a86:	2301      	movs	r3, #1
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3724      	adds	r7, #36	; 0x24
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bc80      	pop	{r7}
 8003a90:	4770      	bx	lr

08003a92 <HAL_CAN_ActivateNotification>:
 8003a92:	b480      	push	{r7}
 8003a94:	b085      	sub	sp, #20
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	6078      	str	r0, [r7, #4]
 8003a9a:	6039      	str	r1, [r7, #0]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003aa2:	73fb      	strb	r3, [r7, #15]
 8003aa4:	7bfb      	ldrb	r3, [r7, #15]
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d002      	beq.n	8003ab0 <HAL_CAN_ActivateNotification+0x1e>
 8003aaa:	7bfb      	ldrb	r3, [r7, #15]
 8003aac:	2b02      	cmp	r3, #2
 8003aae:	d109      	bne.n	8003ac4 <HAL_CAN_ActivateNotification+0x32>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	6959      	ldr	r1, [r3, #20]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	683a      	ldr	r2, [r7, #0]
 8003abc:	430a      	orrs	r2, r1
 8003abe:	615a      	str	r2, [r3, #20]
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	e006      	b.n	8003ad2 <HAL_CAN_ActivateNotification+0x40>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	625a      	str	r2, [r3, #36]	; 0x24
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3714      	adds	r7, #20
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bc80      	pop	{r7}
 8003ada:	4770      	bx	lr

08003adc <__NVIC_SetPriorityGrouping>:
 8003adc:	b480      	push	{r7}
 8003ade:	b085      	sub	sp, #20
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f003 0307 	and.w	r3, r3, #7
 8003aea:	60fb      	str	r3, [r7, #12]
 8003aec:	4b0c      	ldr	r3, [pc, #48]	; (8003b20 <__NVIC_SetPriorityGrouping+0x44>)
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	60bb      	str	r3, [r7, #8]
 8003af2:	68ba      	ldr	r2, [r7, #8]
 8003af4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003af8:	4013      	ands	r3, r2
 8003afa:	60bb      	str	r3, [r7, #8]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	021a      	lsls	r2, r3, #8
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b0c:	60bb      	str	r3, [r7, #8]
 8003b0e:	4a04      	ldr	r2, [pc, #16]	; (8003b20 <__NVIC_SetPriorityGrouping+0x44>)
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	60d3      	str	r3, [r2, #12]
 8003b14:	bf00      	nop
 8003b16:	3714      	adds	r7, #20
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bc80      	pop	{r7}
 8003b1c:	4770      	bx	lr
 8003b1e:	bf00      	nop
 8003b20:	e000ed00 	.word	0xe000ed00

08003b24 <__NVIC_GetPriorityGrouping>:
 8003b24:	b480      	push	{r7}
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	4b04      	ldr	r3, [pc, #16]	; (8003b3c <__NVIC_GetPriorityGrouping+0x18>)
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	0a1b      	lsrs	r3, r3, #8
 8003b2e:	f003 0307 	and.w	r3, r3, #7
 8003b32:	4618      	mov	r0, r3
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bc80      	pop	{r7}
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop
 8003b3c:	e000ed00 	.word	0xe000ed00

08003b40 <__NVIC_EnableIRQ>:
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	4603      	mov	r3, r0
 8003b48:	71fb      	strb	r3, [r7, #7]
 8003b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	db0b      	blt.n	8003b6a <__NVIC_EnableIRQ+0x2a>
 8003b52:	79fb      	ldrb	r3, [r7, #7]
 8003b54:	f003 021f 	and.w	r2, r3, #31
 8003b58:	4906      	ldr	r1, [pc, #24]	; (8003b74 <__NVIC_EnableIRQ+0x34>)
 8003b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b5e:	095b      	lsrs	r3, r3, #5
 8003b60:	2001      	movs	r0, #1
 8003b62:	fa00 f202 	lsl.w	r2, r0, r2
 8003b66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003b6a:	bf00      	nop
 8003b6c:	370c      	adds	r7, #12
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bc80      	pop	{r7}
 8003b72:	4770      	bx	lr
 8003b74:	e000e100 	.word	0xe000e100

08003b78 <__NVIC_SetPriority>:
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	4603      	mov	r3, r0
 8003b80:	6039      	str	r1, [r7, #0]
 8003b82:	71fb      	strb	r3, [r7, #7]
 8003b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	db0a      	blt.n	8003ba2 <__NVIC_SetPriority+0x2a>
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	b2da      	uxtb	r2, r3
 8003b90:	490c      	ldr	r1, [pc, #48]	; (8003bc4 <__NVIC_SetPriority+0x4c>)
 8003b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b96:	0112      	lsls	r2, r2, #4
 8003b98:	b2d2      	uxtb	r2, r2
 8003b9a:	440b      	add	r3, r1
 8003b9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8003ba0:	e00a      	b.n	8003bb8 <__NVIC_SetPriority+0x40>
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	b2da      	uxtb	r2, r3
 8003ba6:	4908      	ldr	r1, [pc, #32]	; (8003bc8 <__NVIC_SetPriority+0x50>)
 8003ba8:	79fb      	ldrb	r3, [r7, #7]
 8003baa:	f003 030f 	and.w	r3, r3, #15
 8003bae:	3b04      	subs	r3, #4
 8003bb0:	0112      	lsls	r2, r2, #4
 8003bb2:	b2d2      	uxtb	r2, r2
 8003bb4:	440b      	add	r3, r1
 8003bb6:	761a      	strb	r2, [r3, #24]
 8003bb8:	bf00      	nop
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bc80      	pop	{r7}
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop
 8003bc4:	e000e100 	.word	0xe000e100
 8003bc8:	e000ed00 	.word	0xe000ed00

08003bcc <NVIC_EncodePriority>:
 8003bcc:	b480      	push	{r7}
 8003bce:	b089      	sub	sp, #36	; 0x24
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f003 0307 	and.w	r3, r3, #7
 8003bde:	61fb      	str	r3, [r7, #28]
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	f1c3 0307 	rsb	r3, r3, #7
 8003be6:	2b04      	cmp	r3, #4
 8003be8:	bf28      	it	cs
 8003bea:	2304      	movcs	r3, #4
 8003bec:	61bb      	str	r3, [r7, #24]
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	3304      	adds	r3, #4
 8003bf2:	2b06      	cmp	r3, #6
 8003bf4:	d902      	bls.n	8003bfc <NVIC_EncodePriority+0x30>
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	3b03      	subs	r3, #3
 8003bfa:	e000      	b.n	8003bfe <NVIC_EncodePriority+0x32>
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	617b      	str	r3, [r7, #20]
 8003c00:	f04f 32ff 	mov.w	r2, #4294967295
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0a:	43da      	mvns	r2, r3
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	401a      	ands	r2, r3
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	409a      	lsls	r2, r3
 8003c14:	f04f 31ff 	mov.w	r1, #4294967295
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c1e:	43d9      	mvns	r1, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	400b      	ands	r3, r1
 8003c24:	4313      	orrs	r3, r2
 8003c26:	4618      	mov	r0, r3
 8003c28:	3724      	adds	r7, #36	; 0x24
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bc80      	pop	{r7}
 8003c2e:	4770      	bx	lr

08003c30 <SysTick_Config>:
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	3b01      	subs	r3, #1
 8003c3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c40:	d301      	bcc.n	8003c46 <SysTick_Config+0x16>
 8003c42:	2301      	movs	r3, #1
 8003c44:	e00f      	b.n	8003c66 <SysTick_Config+0x36>
 8003c46:	4a0a      	ldr	r2, [pc, #40]	; (8003c70 <SysTick_Config+0x40>)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	3b01      	subs	r3, #1
 8003c4c:	6053      	str	r3, [r2, #4]
 8003c4e:	210f      	movs	r1, #15
 8003c50:	f04f 30ff 	mov.w	r0, #4294967295
 8003c54:	f7ff ff90 	bl	8003b78 <__NVIC_SetPriority>
 8003c58:	4b05      	ldr	r3, [pc, #20]	; (8003c70 <SysTick_Config+0x40>)
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	609a      	str	r2, [r3, #8]
 8003c5e:	4b04      	ldr	r3, [pc, #16]	; (8003c70 <SysTick_Config+0x40>)
 8003c60:	2207      	movs	r2, #7
 8003c62:	601a      	str	r2, [r3, #0]
 8003c64:	2300      	movs	r3, #0
 8003c66:	4618      	mov	r0, r3
 8003c68:	3708      	adds	r7, #8
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	e000e010 	.word	0xe000e010

08003c74 <HAL_NVIC_SetPriorityGrouping>:
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b082      	sub	sp, #8
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f7ff ff2d 	bl	8003adc <__NVIC_SetPriorityGrouping>
 8003c82:	bf00      	nop
 8003c84:	3708      	adds	r7, #8
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}

08003c8a <HAL_NVIC_SetPriority>:
 8003c8a:	b580      	push	{r7, lr}
 8003c8c:	b086      	sub	sp, #24
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	4603      	mov	r3, r0
 8003c92:	60b9      	str	r1, [r7, #8]
 8003c94:	607a      	str	r2, [r7, #4]
 8003c96:	73fb      	strb	r3, [r7, #15]
 8003c98:	2300      	movs	r3, #0
 8003c9a:	617b      	str	r3, [r7, #20]
 8003c9c:	f7ff ff42 	bl	8003b24 <__NVIC_GetPriorityGrouping>
 8003ca0:	6178      	str	r0, [r7, #20]
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	68b9      	ldr	r1, [r7, #8]
 8003ca6:	6978      	ldr	r0, [r7, #20]
 8003ca8:	f7ff ff90 	bl	8003bcc <NVIC_EncodePriority>
 8003cac:	4602      	mov	r2, r0
 8003cae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cb2:	4611      	mov	r1, r2
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f7ff ff5f 	bl	8003b78 <__NVIC_SetPriority>
 8003cba:	bf00      	nop
 8003cbc:	3718      	adds	r7, #24
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}

08003cc2 <HAL_NVIC_EnableIRQ>:
 8003cc2:	b580      	push	{r7, lr}
 8003cc4:	b082      	sub	sp, #8
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	4603      	mov	r3, r0
 8003cca:	71fb      	strb	r3, [r7, #7]
 8003ccc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f7ff ff35 	bl	8003b40 <__NVIC_EnableIRQ>
 8003cd6:	bf00      	nop
 8003cd8:	3708      	adds	r7, #8
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}

08003cde <HAL_SYSTICK_Config>:
 8003cde:	b580      	push	{r7, lr}
 8003ce0:	b082      	sub	sp, #8
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f7ff ffa2 	bl	8003c30 <SysTick_Config>
 8003cec:	4603      	mov	r3, r0
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3708      	adds	r7, #8
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
	...

08003cf8 <HAL_GPIO_Init>:
 8003cf8:	b480      	push	{r7}
 8003cfa:	b08b      	sub	sp, #44	; 0x2c
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	6039      	str	r1, [r7, #0]
 8003d02:	2300      	movs	r3, #0
 8003d04:	627b      	str	r3, [r7, #36]	; 0x24
 8003d06:	2300      	movs	r3, #0
 8003d08:	623b      	str	r3, [r7, #32]
 8003d0a:	e169      	b.n	8003fe0 <HAL_GPIO_Init+0x2e8>
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d10:	fa02 f303 	lsl.w	r3, r2, r3
 8003d14:	61fb      	str	r3, [r7, #28]
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	69fa      	ldr	r2, [r7, #28]
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	61bb      	str	r3, [r7, #24]
 8003d20:	69ba      	ldr	r2, [r7, #24]
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	429a      	cmp	r2, r3
 8003d26:	f040 8158 	bne.w	8003fda <HAL_GPIO_Init+0x2e2>
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	4a9a      	ldr	r2, [pc, #616]	; (8003f98 <HAL_GPIO_Init+0x2a0>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d05e      	beq.n	8003df2 <HAL_GPIO_Init+0xfa>
 8003d34:	4a98      	ldr	r2, [pc, #608]	; (8003f98 <HAL_GPIO_Init+0x2a0>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d875      	bhi.n	8003e26 <HAL_GPIO_Init+0x12e>
 8003d3a:	4a98      	ldr	r2, [pc, #608]	; (8003f9c <HAL_GPIO_Init+0x2a4>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d058      	beq.n	8003df2 <HAL_GPIO_Init+0xfa>
 8003d40:	4a96      	ldr	r2, [pc, #600]	; (8003f9c <HAL_GPIO_Init+0x2a4>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d86f      	bhi.n	8003e26 <HAL_GPIO_Init+0x12e>
 8003d46:	4a96      	ldr	r2, [pc, #600]	; (8003fa0 <HAL_GPIO_Init+0x2a8>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d052      	beq.n	8003df2 <HAL_GPIO_Init+0xfa>
 8003d4c:	4a94      	ldr	r2, [pc, #592]	; (8003fa0 <HAL_GPIO_Init+0x2a8>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d869      	bhi.n	8003e26 <HAL_GPIO_Init+0x12e>
 8003d52:	4a94      	ldr	r2, [pc, #592]	; (8003fa4 <HAL_GPIO_Init+0x2ac>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d04c      	beq.n	8003df2 <HAL_GPIO_Init+0xfa>
 8003d58:	4a92      	ldr	r2, [pc, #584]	; (8003fa4 <HAL_GPIO_Init+0x2ac>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d863      	bhi.n	8003e26 <HAL_GPIO_Init+0x12e>
 8003d5e:	4a92      	ldr	r2, [pc, #584]	; (8003fa8 <HAL_GPIO_Init+0x2b0>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d046      	beq.n	8003df2 <HAL_GPIO_Init+0xfa>
 8003d64:	4a90      	ldr	r2, [pc, #576]	; (8003fa8 <HAL_GPIO_Init+0x2b0>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d85d      	bhi.n	8003e26 <HAL_GPIO_Init+0x12e>
 8003d6a:	2b12      	cmp	r3, #18
 8003d6c:	d82a      	bhi.n	8003dc4 <HAL_GPIO_Init+0xcc>
 8003d6e:	2b12      	cmp	r3, #18
 8003d70:	d859      	bhi.n	8003e26 <HAL_GPIO_Init+0x12e>
 8003d72:	a201      	add	r2, pc, #4	; (adr r2, 8003d78 <HAL_GPIO_Init+0x80>)
 8003d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d78:	08003df3 	.word	0x08003df3
 8003d7c:	08003dcd 	.word	0x08003dcd
 8003d80:	08003ddf 	.word	0x08003ddf
 8003d84:	08003e21 	.word	0x08003e21
 8003d88:	08003e27 	.word	0x08003e27
 8003d8c:	08003e27 	.word	0x08003e27
 8003d90:	08003e27 	.word	0x08003e27
 8003d94:	08003e27 	.word	0x08003e27
 8003d98:	08003e27 	.word	0x08003e27
 8003d9c:	08003e27 	.word	0x08003e27
 8003da0:	08003e27 	.word	0x08003e27
 8003da4:	08003e27 	.word	0x08003e27
 8003da8:	08003e27 	.word	0x08003e27
 8003dac:	08003e27 	.word	0x08003e27
 8003db0:	08003e27 	.word	0x08003e27
 8003db4:	08003e27 	.word	0x08003e27
 8003db8:	08003e27 	.word	0x08003e27
 8003dbc:	08003dd5 	.word	0x08003dd5
 8003dc0:	08003de9 	.word	0x08003de9
 8003dc4:	4a79      	ldr	r2, [pc, #484]	; (8003fac <HAL_GPIO_Init+0x2b4>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d013      	beq.n	8003df2 <HAL_GPIO_Init+0xfa>
 8003dca:	e02c      	b.n	8003e26 <HAL_GPIO_Init+0x12e>
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	623b      	str	r3, [r7, #32]
 8003dd2:	e029      	b.n	8003e28 <HAL_GPIO_Init+0x130>
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	3304      	adds	r3, #4
 8003dda:	623b      	str	r3, [r7, #32]
 8003ddc:	e024      	b.n	8003e28 <HAL_GPIO_Init+0x130>
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	68db      	ldr	r3, [r3, #12]
 8003de2:	3308      	adds	r3, #8
 8003de4:	623b      	str	r3, [r7, #32]
 8003de6:	e01f      	b.n	8003e28 <HAL_GPIO_Init+0x130>
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	330c      	adds	r3, #12
 8003dee:	623b      	str	r3, [r7, #32]
 8003df0:	e01a      	b.n	8003e28 <HAL_GPIO_Init+0x130>
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d102      	bne.n	8003e00 <HAL_GPIO_Init+0x108>
 8003dfa:	2304      	movs	r3, #4
 8003dfc:	623b      	str	r3, [r7, #32]
 8003dfe:	e013      	b.n	8003e28 <HAL_GPIO_Init+0x130>
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d105      	bne.n	8003e14 <HAL_GPIO_Init+0x11c>
 8003e08:	2308      	movs	r3, #8
 8003e0a:	623b      	str	r3, [r7, #32]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	69fa      	ldr	r2, [r7, #28]
 8003e10:	611a      	str	r2, [r3, #16]
 8003e12:	e009      	b.n	8003e28 <HAL_GPIO_Init+0x130>
 8003e14:	2308      	movs	r3, #8
 8003e16:	623b      	str	r3, [r7, #32]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	69fa      	ldr	r2, [r7, #28]
 8003e1c:	615a      	str	r2, [r3, #20]
 8003e1e:	e003      	b.n	8003e28 <HAL_GPIO_Init+0x130>
 8003e20:	2300      	movs	r3, #0
 8003e22:	623b      	str	r3, [r7, #32]
 8003e24:	e000      	b.n	8003e28 <HAL_GPIO_Init+0x130>
 8003e26:	bf00      	nop
 8003e28:	69bb      	ldr	r3, [r7, #24]
 8003e2a:	2bff      	cmp	r3, #255	; 0xff
 8003e2c:	d801      	bhi.n	8003e32 <HAL_GPIO_Init+0x13a>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	e001      	b.n	8003e36 <HAL_GPIO_Init+0x13e>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	3304      	adds	r3, #4
 8003e36:	617b      	str	r3, [r7, #20]
 8003e38:	69bb      	ldr	r3, [r7, #24]
 8003e3a:	2bff      	cmp	r3, #255	; 0xff
 8003e3c:	d802      	bhi.n	8003e44 <HAL_GPIO_Init+0x14c>
 8003e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	e002      	b.n	8003e4a <HAL_GPIO_Init+0x152>
 8003e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e46:	3b08      	subs	r3, #8
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	613b      	str	r3, [r7, #16]
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	210f      	movs	r1, #15
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	fa01 f303 	lsl.w	r3, r1, r3
 8003e58:	43db      	mvns	r3, r3
 8003e5a:	401a      	ands	r2, r3
 8003e5c:	6a39      	ldr	r1, [r7, #32]
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	fa01 f303 	lsl.w	r3, r1, r3
 8003e64:	431a      	orrs	r2, r3
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	601a      	str	r2, [r3, #0]
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	f000 80b1 	beq.w	8003fda <HAL_GPIO_Init+0x2e2>
 8003e78:	4b4d      	ldr	r3, [pc, #308]	; (8003fb0 <HAL_GPIO_Init+0x2b8>)
 8003e7a:	699b      	ldr	r3, [r3, #24]
 8003e7c:	4a4c      	ldr	r2, [pc, #304]	; (8003fb0 <HAL_GPIO_Init+0x2b8>)
 8003e7e:	f043 0301 	orr.w	r3, r3, #1
 8003e82:	6193      	str	r3, [r2, #24]
 8003e84:	4b4a      	ldr	r3, [pc, #296]	; (8003fb0 <HAL_GPIO_Init+0x2b8>)
 8003e86:	699b      	ldr	r3, [r3, #24]
 8003e88:	f003 0301 	and.w	r3, r3, #1
 8003e8c:	60bb      	str	r3, [r7, #8]
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	4a48      	ldr	r2, [pc, #288]	; (8003fb4 <HAL_GPIO_Init+0x2bc>)
 8003e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e94:	089b      	lsrs	r3, r3, #2
 8003e96:	3302      	adds	r3, #2
 8003e98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e9c:	60fb      	str	r3, [r7, #12]
 8003e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea0:	f003 0303 	and.w	r3, r3, #3
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	220f      	movs	r2, #15
 8003ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8003eac:	43db      	mvns	r3, r3
 8003eae:	68fa      	ldr	r2, [r7, #12]
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	60fb      	str	r3, [r7, #12]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	4a40      	ldr	r2, [pc, #256]	; (8003fb8 <HAL_GPIO_Init+0x2c0>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d013      	beq.n	8003ee4 <HAL_GPIO_Init+0x1ec>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a3f      	ldr	r2, [pc, #252]	; (8003fbc <HAL_GPIO_Init+0x2c4>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d00d      	beq.n	8003ee0 <HAL_GPIO_Init+0x1e8>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	4a3e      	ldr	r2, [pc, #248]	; (8003fc0 <HAL_GPIO_Init+0x2c8>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d007      	beq.n	8003edc <HAL_GPIO_Init+0x1e4>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	4a3d      	ldr	r2, [pc, #244]	; (8003fc4 <HAL_GPIO_Init+0x2cc>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d101      	bne.n	8003ed8 <HAL_GPIO_Init+0x1e0>
 8003ed4:	2303      	movs	r3, #3
 8003ed6:	e006      	b.n	8003ee6 <HAL_GPIO_Init+0x1ee>
 8003ed8:	2304      	movs	r3, #4
 8003eda:	e004      	b.n	8003ee6 <HAL_GPIO_Init+0x1ee>
 8003edc:	2302      	movs	r3, #2
 8003ede:	e002      	b.n	8003ee6 <HAL_GPIO_Init+0x1ee>
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e000      	b.n	8003ee6 <HAL_GPIO_Init+0x1ee>
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ee8:	f002 0203 	and.w	r2, r2, #3
 8003eec:	0092      	lsls	r2, r2, #2
 8003eee:	4093      	lsls	r3, r2
 8003ef0:	68fa      	ldr	r2, [r7, #12]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	60fb      	str	r3, [r7, #12]
 8003ef6:	492f      	ldr	r1, [pc, #188]	; (8003fb4 <HAL_GPIO_Init+0x2bc>)
 8003ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efa:	089b      	lsrs	r3, r3, #2
 8003efc:	3302      	adds	r3, #2
 8003efe:	68fa      	ldr	r2, [r7, #12]
 8003f00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d006      	beq.n	8003f1e <HAL_GPIO_Init+0x226>
 8003f10:	4b2d      	ldr	r3, [pc, #180]	; (8003fc8 <HAL_GPIO_Init+0x2d0>)
 8003f12:	689a      	ldr	r2, [r3, #8]
 8003f14:	492c      	ldr	r1, [pc, #176]	; (8003fc8 <HAL_GPIO_Init+0x2d0>)
 8003f16:	69bb      	ldr	r3, [r7, #24]
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	608b      	str	r3, [r1, #8]
 8003f1c:	e006      	b.n	8003f2c <HAL_GPIO_Init+0x234>
 8003f1e:	4b2a      	ldr	r3, [pc, #168]	; (8003fc8 <HAL_GPIO_Init+0x2d0>)
 8003f20:	689a      	ldr	r2, [r3, #8]
 8003f22:	69bb      	ldr	r3, [r7, #24]
 8003f24:	43db      	mvns	r3, r3
 8003f26:	4928      	ldr	r1, [pc, #160]	; (8003fc8 <HAL_GPIO_Init+0x2d0>)
 8003f28:	4013      	ands	r3, r2
 8003f2a:	608b      	str	r3, [r1, #8]
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d006      	beq.n	8003f46 <HAL_GPIO_Init+0x24e>
 8003f38:	4b23      	ldr	r3, [pc, #140]	; (8003fc8 <HAL_GPIO_Init+0x2d0>)
 8003f3a:	68da      	ldr	r2, [r3, #12]
 8003f3c:	4922      	ldr	r1, [pc, #136]	; (8003fc8 <HAL_GPIO_Init+0x2d0>)
 8003f3e:	69bb      	ldr	r3, [r7, #24]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	60cb      	str	r3, [r1, #12]
 8003f44:	e006      	b.n	8003f54 <HAL_GPIO_Init+0x25c>
 8003f46:	4b20      	ldr	r3, [pc, #128]	; (8003fc8 <HAL_GPIO_Init+0x2d0>)
 8003f48:	68da      	ldr	r2, [r3, #12]
 8003f4a:	69bb      	ldr	r3, [r7, #24]
 8003f4c:	43db      	mvns	r3, r3
 8003f4e:	491e      	ldr	r1, [pc, #120]	; (8003fc8 <HAL_GPIO_Init+0x2d0>)
 8003f50:	4013      	ands	r3, r2
 8003f52:	60cb      	str	r3, [r1, #12]
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d006      	beq.n	8003f6e <HAL_GPIO_Init+0x276>
 8003f60:	4b19      	ldr	r3, [pc, #100]	; (8003fc8 <HAL_GPIO_Init+0x2d0>)
 8003f62:	685a      	ldr	r2, [r3, #4]
 8003f64:	4918      	ldr	r1, [pc, #96]	; (8003fc8 <HAL_GPIO_Init+0x2d0>)
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	604b      	str	r3, [r1, #4]
 8003f6c:	e006      	b.n	8003f7c <HAL_GPIO_Init+0x284>
 8003f6e:	4b16      	ldr	r3, [pc, #88]	; (8003fc8 <HAL_GPIO_Init+0x2d0>)
 8003f70:	685a      	ldr	r2, [r3, #4]
 8003f72:	69bb      	ldr	r3, [r7, #24]
 8003f74:	43db      	mvns	r3, r3
 8003f76:	4914      	ldr	r1, [pc, #80]	; (8003fc8 <HAL_GPIO_Init+0x2d0>)
 8003f78:	4013      	ands	r3, r2
 8003f7a:	604b      	str	r3, [r1, #4]
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d021      	beq.n	8003fcc <HAL_GPIO_Init+0x2d4>
 8003f88:	4b0f      	ldr	r3, [pc, #60]	; (8003fc8 <HAL_GPIO_Init+0x2d0>)
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	490e      	ldr	r1, [pc, #56]	; (8003fc8 <HAL_GPIO_Init+0x2d0>)
 8003f8e:	69bb      	ldr	r3, [r7, #24]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	600b      	str	r3, [r1, #0]
 8003f94:	e021      	b.n	8003fda <HAL_GPIO_Init+0x2e2>
 8003f96:	bf00      	nop
 8003f98:	10320000 	.word	0x10320000
 8003f9c:	10310000 	.word	0x10310000
 8003fa0:	10220000 	.word	0x10220000
 8003fa4:	10210000 	.word	0x10210000
 8003fa8:	10120000 	.word	0x10120000
 8003fac:	10110000 	.word	0x10110000
 8003fb0:	40021000 	.word	0x40021000
 8003fb4:	40010000 	.word	0x40010000
 8003fb8:	40010800 	.word	0x40010800
 8003fbc:	40010c00 	.word	0x40010c00
 8003fc0:	40011000 	.word	0x40011000
 8003fc4:	40011400 	.word	0x40011400
 8003fc8:	40010400 	.word	0x40010400
 8003fcc:	4b0b      	ldr	r3, [pc, #44]	; (8003ffc <HAL_GPIO_Init+0x304>)
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	69bb      	ldr	r3, [r7, #24]
 8003fd2:	43db      	mvns	r3, r3
 8003fd4:	4909      	ldr	r1, [pc, #36]	; (8003ffc <HAL_GPIO_Init+0x304>)
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	600b      	str	r3, [r1, #0]
 8003fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fdc:	3301      	adds	r3, #1
 8003fde:	627b      	str	r3, [r7, #36]	; 0x24
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe6:	fa22 f303 	lsr.w	r3, r2, r3
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	f47f ae8e 	bne.w	8003d0c <HAL_GPIO_Init+0x14>
 8003ff0:	bf00      	nop
 8003ff2:	bf00      	nop
 8003ff4:	372c      	adds	r7, #44	; 0x2c
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bc80      	pop	{r7}
 8003ffa:	4770      	bx	lr
 8003ffc:	40010400 	.word	0x40010400

08004000 <HAL_GPIO_WritePin>:
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	460b      	mov	r3, r1
 800400a:	807b      	strh	r3, [r7, #2]
 800400c:	4613      	mov	r3, r2
 800400e:	707b      	strb	r3, [r7, #1]
 8004010:	787b      	ldrb	r3, [r7, #1]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d003      	beq.n	800401e <HAL_GPIO_WritePin+0x1e>
 8004016:	887a      	ldrh	r2, [r7, #2]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	611a      	str	r2, [r3, #16]
 800401c:	e003      	b.n	8004026 <HAL_GPIO_WritePin+0x26>
 800401e:	887b      	ldrh	r3, [r7, #2]
 8004020:	041a      	lsls	r2, r3, #16
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	611a      	str	r2, [r3, #16]
 8004026:	bf00      	nop
 8004028:	370c      	adds	r7, #12
 800402a:	46bd      	mov	sp, r7
 800402c:	bc80      	pop	{r7}
 800402e:	4770      	bx	lr

08004030 <HAL_GPIO_TogglePin>:
 8004030:	b480      	push	{r7}
 8004032:	b085      	sub	sp, #20
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	460b      	mov	r3, r1
 800403a:	807b      	strh	r3, [r7, #2]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	60fb      	str	r3, [r7, #12]
 8004042:	887a      	ldrh	r2, [r7, #2]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	4013      	ands	r3, r2
 8004048:	041a      	lsls	r2, r3, #16
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	43d9      	mvns	r1, r3
 800404e:	887b      	ldrh	r3, [r7, #2]
 8004050:	400b      	ands	r3, r1
 8004052:	431a      	orrs	r2, r3
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	611a      	str	r2, [r3, #16]
 8004058:	bf00      	nop
 800405a:	3714      	adds	r7, #20
 800405c:	46bd      	mov	sp, r7
 800405e:	bc80      	pop	{r7}
 8004060:	4770      	bx	lr

08004062 <HAL_PCD_Init>:
 8004062:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004064:	b08f      	sub	sp, #60	; 0x3c
 8004066:	af0a      	add	r7, sp, #40	; 0x28
 8004068:	6078      	str	r0, [r7, #4]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d101      	bne.n	8004074 <HAL_PCD_Init+0x12>
 8004070:	2301      	movs	r3, #1
 8004072:	e10f      	b.n	8004294 <HAL_PCD_Init+0x232>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	60bb      	str	r3, [r7, #8]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004080:	b2db      	uxtb	r3, r3
 8004082:	2b00      	cmp	r3, #0
 8004084:	d106      	bne.n	8004094 <HAL_PCD_Init+0x32>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f005 fda2 	bl	8009bd8 <HAL_PCD_MspInit>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2203      	movs	r2, #3
 8004098:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d102      	bne.n	80040ae <HAL_PCD_Init+0x4c>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	60da      	str	r2, [r3, #12]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4618      	mov	r0, r3
 80040b4:	f002 fe94 	bl	8006de0 <USB_DisableGlobalInt>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	603b      	str	r3, [r7, #0]
 80040be:	687e      	ldr	r6, [r7, #4]
 80040c0:	466d      	mov	r5, sp
 80040c2:	f106 0410 	add.w	r4, r6, #16
 80040c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040ce:	e894 0003 	ldmia.w	r4, {r0, r1}
 80040d2:	e885 0003 	stmia.w	r5, {r0, r1}
 80040d6:	1d33      	adds	r3, r6, #4
 80040d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80040da:	6838      	ldr	r0, [r7, #0]
 80040dc:	f002 fdb2 	bl	8006c44 <USB_CoreInit>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d005      	beq.n	80040f2 <HAL_PCD_Init+0x90>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2202      	movs	r2, #2
 80040ea:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
 80040ee:	2301      	movs	r3, #1
 80040f0:	e0d0      	b.n	8004294 <HAL_PCD_Init+0x232>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	2100      	movs	r1, #0
 80040f8:	4618      	mov	r0, r3
 80040fa:	f002 fe81 	bl	8006e00 <USB_SetCurrentMode>
 80040fe:	2300      	movs	r3, #0
 8004100:	73fb      	strb	r3, [r7, #15]
 8004102:	e04a      	b.n	800419a <HAL_PCD_Init+0x138>
 8004104:	7bfa      	ldrb	r2, [r7, #15]
 8004106:	6879      	ldr	r1, [r7, #4]
 8004108:	4613      	mov	r3, r2
 800410a:	00db      	lsls	r3, r3, #3
 800410c:	4413      	add	r3, r2
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	440b      	add	r3, r1
 8004112:	333d      	adds	r3, #61	; 0x3d
 8004114:	2201      	movs	r2, #1
 8004116:	701a      	strb	r2, [r3, #0]
 8004118:	7bfa      	ldrb	r2, [r7, #15]
 800411a:	6879      	ldr	r1, [r7, #4]
 800411c:	4613      	mov	r3, r2
 800411e:	00db      	lsls	r3, r3, #3
 8004120:	4413      	add	r3, r2
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	440b      	add	r3, r1
 8004126:	333c      	adds	r3, #60	; 0x3c
 8004128:	7bfa      	ldrb	r2, [r7, #15]
 800412a:	701a      	strb	r2, [r3, #0]
 800412c:	7bfa      	ldrb	r2, [r7, #15]
 800412e:	7bfb      	ldrb	r3, [r7, #15]
 8004130:	b298      	uxth	r0, r3
 8004132:	6879      	ldr	r1, [r7, #4]
 8004134:	4613      	mov	r3, r2
 8004136:	00db      	lsls	r3, r3, #3
 8004138:	4413      	add	r3, r2
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	440b      	add	r3, r1
 800413e:	3356      	adds	r3, #86	; 0x56
 8004140:	4602      	mov	r2, r0
 8004142:	801a      	strh	r2, [r3, #0]
 8004144:	7bfa      	ldrb	r2, [r7, #15]
 8004146:	6879      	ldr	r1, [r7, #4]
 8004148:	4613      	mov	r3, r2
 800414a:	00db      	lsls	r3, r3, #3
 800414c:	4413      	add	r3, r2
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	440b      	add	r3, r1
 8004152:	3340      	adds	r3, #64	; 0x40
 8004154:	2200      	movs	r2, #0
 8004156:	701a      	strb	r2, [r3, #0]
 8004158:	7bfa      	ldrb	r2, [r7, #15]
 800415a:	6879      	ldr	r1, [r7, #4]
 800415c:	4613      	mov	r3, r2
 800415e:	00db      	lsls	r3, r3, #3
 8004160:	4413      	add	r3, r2
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	440b      	add	r3, r1
 8004166:	3344      	adds	r3, #68	; 0x44
 8004168:	2200      	movs	r2, #0
 800416a:	601a      	str	r2, [r3, #0]
 800416c:	7bfa      	ldrb	r2, [r7, #15]
 800416e:	6879      	ldr	r1, [r7, #4]
 8004170:	4613      	mov	r3, r2
 8004172:	00db      	lsls	r3, r3, #3
 8004174:	4413      	add	r3, r2
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	440b      	add	r3, r1
 800417a:	3348      	adds	r3, #72	; 0x48
 800417c:	2200      	movs	r2, #0
 800417e:	601a      	str	r2, [r3, #0]
 8004180:	7bfa      	ldrb	r2, [r7, #15]
 8004182:	6879      	ldr	r1, [r7, #4]
 8004184:	4613      	mov	r3, r2
 8004186:	00db      	lsls	r3, r3, #3
 8004188:	4413      	add	r3, r2
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	440b      	add	r3, r1
 800418e:	334c      	adds	r3, #76	; 0x4c
 8004190:	2200      	movs	r2, #0
 8004192:	601a      	str	r2, [r3, #0]
 8004194:	7bfb      	ldrb	r3, [r7, #15]
 8004196:	3301      	adds	r3, #1
 8004198:	73fb      	strb	r3, [r7, #15]
 800419a:	7bfa      	ldrb	r2, [r7, #15]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d3af      	bcc.n	8004104 <HAL_PCD_Init+0xa2>
 80041a4:	2300      	movs	r3, #0
 80041a6:	73fb      	strb	r3, [r7, #15]
 80041a8:	e044      	b.n	8004234 <HAL_PCD_Init+0x1d2>
 80041aa:	7bfa      	ldrb	r2, [r7, #15]
 80041ac:	6879      	ldr	r1, [r7, #4]
 80041ae:	4613      	mov	r3, r2
 80041b0:	00db      	lsls	r3, r3, #3
 80041b2:	4413      	add	r3, r2
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	440b      	add	r3, r1
 80041b8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80041bc:	2200      	movs	r2, #0
 80041be:	701a      	strb	r2, [r3, #0]
 80041c0:	7bfa      	ldrb	r2, [r7, #15]
 80041c2:	6879      	ldr	r1, [r7, #4]
 80041c4:	4613      	mov	r3, r2
 80041c6:	00db      	lsls	r3, r3, #3
 80041c8:	4413      	add	r3, r2
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	440b      	add	r3, r1
 80041ce:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80041d2:	7bfa      	ldrb	r2, [r7, #15]
 80041d4:	701a      	strb	r2, [r3, #0]
 80041d6:	7bfa      	ldrb	r2, [r7, #15]
 80041d8:	6879      	ldr	r1, [r7, #4]
 80041da:	4613      	mov	r3, r2
 80041dc:	00db      	lsls	r3, r3, #3
 80041de:	4413      	add	r3, r2
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	440b      	add	r3, r1
 80041e4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80041e8:	2200      	movs	r2, #0
 80041ea:	701a      	strb	r2, [r3, #0]
 80041ec:	7bfa      	ldrb	r2, [r7, #15]
 80041ee:	6879      	ldr	r1, [r7, #4]
 80041f0:	4613      	mov	r3, r2
 80041f2:	00db      	lsls	r3, r3, #3
 80041f4:	4413      	add	r3, r2
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	440b      	add	r3, r1
 80041fa:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80041fe:	2200      	movs	r2, #0
 8004200:	601a      	str	r2, [r3, #0]
 8004202:	7bfa      	ldrb	r2, [r7, #15]
 8004204:	6879      	ldr	r1, [r7, #4]
 8004206:	4613      	mov	r3, r2
 8004208:	00db      	lsls	r3, r3, #3
 800420a:	4413      	add	r3, r2
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	440b      	add	r3, r1
 8004210:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004214:	2200      	movs	r2, #0
 8004216:	601a      	str	r2, [r3, #0]
 8004218:	7bfa      	ldrb	r2, [r7, #15]
 800421a:	6879      	ldr	r1, [r7, #4]
 800421c:	4613      	mov	r3, r2
 800421e:	00db      	lsls	r3, r3, #3
 8004220:	4413      	add	r3, r2
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	440b      	add	r3, r1
 8004226:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800422a:	2200      	movs	r2, #0
 800422c:	601a      	str	r2, [r3, #0]
 800422e:	7bfb      	ldrb	r3, [r7, #15]
 8004230:	3301      	adds	r3, #1
 8004232:	73fb      	strb	r3, [r7, #15]
 8004234:	7bfa      	ldrb	r2, [r7, #15]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	429a      	cmp	r2, r3
 800423c:	d3b5      	bcc.n	80041aa <HAL_PCD_Init+0x148>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	603b      	str	r3, [r7, #0]
 8004244:	687e      	ldr	r6, [r7, #4]
 8004246:	466d      	mov	r5, sp
 8004248:	f106 0410 	add.w	r4, r6, #16
 800424c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800424e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004250:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004252:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004254:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004258:	e885 0003 	stmia.w	r5, {r0, r1}
 800425c:	1d33      	adds	r3, r6, #4
 800425e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004260:	6838      	ldr	r0, [r7, #0]
 8004262:	f002 fe19 	bl	8006e98 <USB_DevInit>
 8004266:	4603      	mov	r3, r0
 8004268:	2b00      	cmp	r3, #0
 800426a:	d005      	beq.n	8004278 <HAL_PCD_Init+0x216>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2202      	movs	r2, #2
 8004270:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
 8004274:	2301      	movs	r3, #1
 8004276:	e00d      	b.n	8004294 <HAL_PCD_Init+0x232>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2201      	movs	r2, #1
 8004284:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4618      	mov	r0, r3
 800428e:	f003 fda3 	bl	8007dd8 <USB_DevDisconnect>
 8004292:	2300      	movs	r3, #0
 8004294:	4618      	mov	r0, r3
 8004296:	3714      	adds	r7, #20
 8004298:	46bd      	mov	sp, r7
 800429a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800429c <HAL_PCD_Start>:
 800429c:	b580      	push	{r7, lr}
 800429e:	b082      	sub	sp, #8
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d101      	bne.n	80042b2 <HAL_PCD_Start+0x16>
 80042ae:	2302      	movs	r3, #2
 80042b0:	e012      	b.n	80042d8 <HAL_PCD_Start+0x3c>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2201      	movs	r2, #1
 80042b6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4618      	mov	r0, r3
 80042c0:	f002 fd7e 	bl	8006dc0 <USB_EnableGlobalInt>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4618      	mov	r0, r3
 80042ca:	f003 fd65 	bl	8007d98 <USB_DevConnect>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2200      	movs	r2, #0
 80042d2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 80042d6:	2300      	movs	r3, #0
 80042d8:	4618      	mov	r0, r3
 80042da:	3708      	adds	r7, #8
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}

080042e0 <HAL_PCD_IRQHandler>:
 80042e0:	b590      	push	{r4, r7, lr}
 80042e2:	b08d      	sub	sp, #52	; 0x34
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	623b      	str	r3, [r7, #32]
 80042ee:	6a3b      	ldr	r3, [r7, #32]
 80042f0:	61fb      	str	r3, [r7, #28]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4618      	mov	r0, r3
 80042f8:	f003 fe1c 	bl	8007f34 <USB_GetMode>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	f040 8443 	bne.w	8004b8a <HAL_PCD_IRQHandler+0x8aa>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4618      	mov	r0, r3
 800430a:	f003 fd85 	bl	8007e18 <USB_ReadInterrupts>
 800430e:	4603      	mov	r3, r0
 8004310:	2b00      	cmp	r3, #0
 8004312:	f000 8439 	beq.w	8004b88 <HAL_PCD_IRQHandler+0x8a8>
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	0a1b      	lsrs	r3, r3, #8
 8004320:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4618      	mov	r0, r3
 8004330:	f003 fd72 	bl	8007e18 <USB_ReadInterrupts>
 8004334:	4603      	mov	r3, r0
 8004336:	f003 0302 	and.w	r3, r3, #2
 800433a:	2b02      	cmp	r3, #2
 800433c:	d107      	bne.n	800434e <HAL_PCD_IRQHandler+0x6e>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	695a      	ldr	r2, [r3, #20]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f002 0202 	and.w	r2, r2, #2
 800434c:	615a      	str	r2, [r3, #20]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4618      	mov	r0, r3
 8004354:	f003 fd60 	bl	8007e18 <USB_ReadInterrupts>
 8004358:	4603      	mov	r3, r0
 800435a:	f003 0310 	and.w	r3, r3, #16
 800435e:	2b10      	cmp	r3, #16
 8004360:	d161      	bne.n	8004426 <HAL_PCD_IRQHandler+0x146>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	699a      	ldr	r2, [r3, #24]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f022 0210 	bic.w	r2, r2, #16
 8004370:	619a      	str	r2, [r3, #24]
 8004372:	6a3b      	ldr	r3, [r7, #32]
 8004374:	6a1b      	ldr	r3, [r3, #32]
 8004376:	61bb      	str	r3, [r7, #24]
 8004378:	69bb      	ldr	r3, [r7, #24]
 800437a:	f003 020f 	and.w	r2, r3, #15
 800437e:	4613      	mov	r3, r2
 8004380:	00db      	lsls	r3, r3, #3
 8004382:	4413      	add	r3, r2
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	4413      	add	r3, r2
 800438e:	3304      	adds	r3, #4
 8004390:	617b      	str	r3, [r7, #20]
 8004392:	69bb      	ldr	r3, [r7, #24]
 8004394:	0c5b      	lsrs	r3, r3, #17
 8004396:	f003 030f 	and.w	r3, r3, #15
 800439a:	2b02      	cmp	r3, #2
 800439c:	d124      	bne.n	80043e8 <HAL_PCD_IRQHandler+0x108>
 800439e:	69ba      	ldr	r2, [r7, #24]
 80043a0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80043a4:	4013      	ands	r3, r2
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d035      	beq.n	8004416 <HAL_PCD_IRQHandler+0x136>
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	68d9      	ldr	r1, [r3, #12]
 80043ae:	69bb      	ldr	r3, [r7, #24]
 80043b0:	091b      	lsrs	r3, r3, #4
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	461a      	mov	r2, r3
 80043bc:	6a38      	ldr	r0, [r7, #32]
 80043be:	f003 fb9d 	bl	8007afc <USB_ReadPacket>
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	68da      	ldr	r2, [r3, #12]
 80043c6:	69bb      	ldr	r3, [r7, #24]
 80043c8:	091b      	lsrs	r3, r3, #4
 80043ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80043ce:	441a      	add	r2, r3
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	60da      	str	r2, [r3, #12]
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	695a      	ldr	r2, [r3, #20]
 80043d8:	69bb      	ldr	r3, [r7, #24]
 80043da:	091b      	lsrs	r3, r3, #4
 80043dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80043e0:	441a      	add	r2, r3
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	615a      	str	r2, [r3, #20]
 80043e6:	e016      	b.n	8004416 <HAL_PCD_IRQHandler+0x136>
 80043e8:	69bb      	ldr	r3, [r7, #24]
 80043ea:	0c5b      	lsrs	r3, r3, #17
 80043ec:	f003 030f 	and.w	r3, r3, #15
 80043f0:	2b06      	cmp	r3, #6
 80043f2:	d110      	bne.n	8004416 <HAL_PCD_IRQHandler+0x136>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80043fa:	2208      	movs	r2, #8
 80043fc:	4619      	mov	r1, r3
 80043fe:	6a38      	ldr	r0, [r7, #32]
 8004400:	f003 fb7c 	bl	8007afc <USB_ReadPacket>
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	695a      	ldr	r2, [r3, #20]
 8004408:	69bb      	ldr	r3, [r7, #24]
 800440a:	091b      	lsrs	r3, r3, #4
 800440c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004410:	441a      	add	r2, r3
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	615a      	str	r2, [r3, #20]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	699a      	ldr	r2, [r3, #24]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f042 0210 	orr.w	r2, r2, #16
 8004424:	619a      	str	r2, [r3, #24]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4618      	mov	r0, r3
 800442c:	f003 fcf4 	bl	8007e18 <USB_ReadInterrupts>
 8004430:	4603      	mov	r3, r0
 8004432:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004436:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800443a:	f040 80a7 	bne.w	800458c <HAL_PCD_IRQHandler+0x2ac>
 800443e:	2300      	movs	r3, #0
 8004440:	627b      	str	r3, [r7, #36]	; 0x24
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4618      	mov	r0, r3
 8004448:	f003 fcf8 	bl	8007e3c <USB_ReadDevAllOutEpInterrupt>
 800444c:	62b8      	str	r0, [r7, #40]	; 0x28
 800444e:	e099      	b.n	8004584 <HAL_PCD_IRQHandler+0x2a4>
 8004450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004452:	f003 0301 	and.w	r3, r3, #1
 8004456:	2b00      	cmp	r3, #0
 8004458:	f000 808e 	beq.w	8004578 <HAL_PCD_IRQHandler+0x298>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004462:	b2d2      	uxtb	r2, r2
 8004464:	4611      	mov	r1, r2
 8004466:	4618      	mov	r0, r3
 8004468:	f003 fd1a 	bl	8007ea0 <USB_ReadDevOutEPInterrupt>
 800446c:	6138      	str	r0, [r7, #16]
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	f003 0301 	and.w	r3, r3, #1
 8004474:	2b00      	cmp	r3, #0
 8004476:	d00c      	beq.n	8004492 <HAL_PCD_IRQHandler+0x1b2>
 8004478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447a:	015a      	lsls	r2, r3, #5
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	4413      	add	r3, r2
 8004480:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004484:	461a      	mov	r2, r3
 8004486:	2301      	movs	r3, #1
 8004488:	6093      	str	r3, [r2, #8]
 800448a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f000 fe41 	bl	8005114 <PCD_EP_OutXfrComplete_int>
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	f003 0308 	and.w	r3, r3, #8
 8004498:	2b00      	cmp	r3, #0
 800449a:	d00c      	beq.n	80044b6 <HAL_PCD_IRQHandler+0x1d6>
 800449c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449e:	015a      	lsls	r2, r3, #5
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	4413      	add	r3, r2
 80044a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044a8:	461a      	mov	r2, r3
 80044aa:	2308      	movs	r3, #8
 80044ac:	6093      	str	r3, [r2, #8]
 80044ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	f000 fe7d 	bl	80051b0 <PCD_EP_OutSetupPacket_int>
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	f003 0310 	and.w	r3, r3, #16
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d008      	beq.n	80044d2 <HAL_PCD_IRQHandler+0x1f2>
 80044c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c2:	015a      	lsls	r2, r3, #5
 80044c4:	69fb      	ldr	r3, [r7, #28]
 80044c6:	4413      	add	r3, r2
 80044c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044cc:	461a      	mov	r2, r3
 80044ce:	2310      	movs	r3, #16
 80044d0:	6093      	str	r3, [r2, #8]
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	f003 0302 	and.w	r3, r3, #2
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d030      	beq.n	800453e <HAL_PCD_IRQHandler+0x25e>
 80044dc:	6a3b      	ldr	r3, [r7, #32]
 80044de:	695b      	ldr	r3, [r3, #20]
 80044e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044e4:	2b80      	cmp	r3, #128	; 0x80
 80044e6:	d109      	bne.n	80044fc <HAL_PCD_IRQHandler+0x21c>
 80044e8:	69fb      	ldr	r3, [r7, #28]
 80044ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	69fa      	ldr	r2, [r7, #28]
 80044f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80044fa:	6053      	str	r3, [r2, #4]
 80044fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044fe:	4613      	mov	r3, r2
 8004500:	00db      	lsls	r3, r3, #3
 8004502:	4413      	add	r3, r2
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	4413      	add	r3, r2
 800450e:	3304      	adds	r3, #4
 8004510:	617b      	str	r3, [r7, #20]
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	78db      	ldrb	r3, [r3, #3]
 8004516:	2b01      	cmp	r3, #1
 8004518:	d108      	bne.n	800452c <HAL_PCD_IRQHandler+0x24c>
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	2200      	movs	r2, #0
 800451e:	70da      	strb	r2, [r3, #3]
 8004520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004522:	b2db      	uxtb	r3, r3
 8004524:	4619      	mov	r1, r3
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f005 fc44 	bl	8009db4 <HAL_PCD_ISOOUTIncompleteCallback>
 800452c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452e:	015a      	lsls	r2, r3, #5
 8004530:	69fb      	ldr	r3, [r7, #28]
 8004532:	4413      	add	r3, r2
 8004534:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004538:	461a      	mov	r2, r3
 800453a:	2302      	movs	r3, #2
 800453c:	6093      	str	r3, [r2, #8]
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	f003 0320 	and.w	r3, r3, #32
 8004544:	2b00      	cmp	r3, #0
 8004546:	d008      	beq.n	800455a <HAL_PCD_IRQHandler+0x27a>
 8004548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454a:	015a      	lsls	r2, r3, #5
 800454c:	69fb      	ldr	r3, [r7, #28]
 800454e:	4413      	add	r3, r2
 8004550:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004554:	461a      	mov	r2, r3
 8004556:	2320      	movs	r3, #32
 8004558:	6093      	str	r3, [r2, #8]
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004560:	2b00      	cmp	r3, #0
 8004562:	d009      	beq.n	8004578 <HAL_PCD_IRQHandler+0x298>
 8004564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004566:	015a      	lsls	r2, r3, #5
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	4413      	add	r3, r2
 800456c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004570:	461a      	mov	r2, r3
 8004572:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004576:	6093      	str	r3, [r2, #8]
 8004578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457a:	3301      	adds	r3, #1
 800457c:	627b      	str	r3, [r7, #36]	; 0x24
 800457e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004580:	085b      	lsrs	r3, r3, #1
 8004582:	62bb      	str	r3, [r7, #40]	; 0x28
 8004584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004586:	2b00      	cmp	r3, #0
 8004588:	f47f af62 	bne.w	8004450 <HAL_PCD_IRQHandler+0x170>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4618      	mov	r0, r3
 8004592:	f003 fc41 	bl	8007e18 <USB_ReadInterrupts>
 8004596:	4603      	mov	r3, r0
 8004598:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800459c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80045a0:	f040 80a4 	bne.w	80046ec <HAL_PCD_IRQHandler+0x40c>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4618      	mov	r0, r3
 80045aa:	f003 fc60 	bl	8007e6e <USB_ReadDevAllInEpInterrupt>
 80045ae:	62b8      	str	r0, [r7, #40]	; 0x28
 80045b0:	2300      	movs	r3, #0
 80045b2:	627b      	str	r3, [r7, #36]	; 0x24
 80045b4:	e096      	b.n	80046e4 <HAL_PCD_IRQHandler+0x404>
 80045b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045b8:	f003 0301 	and.w	r3, r3, #1
 80045bc:	2b00      	cmp	r3, #0
 80045be:	f000 808b 	beq.w	80046d8 <HAL_PCD_IRQHandler+0x3f8>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045c8:	b2d2      	uxtb	r2, r2
 80045ca:	4611      	mov	r1, r2
 80045cc:	4618      	mov	r0, r3
 80045ce:	f003 fc84 	bl	8007eda <USB_ReadDevInEPInterrupt>
 80045d2:	6138      	str	r0, [r7, #16]
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	f003 0301 	and.w	r3, r3, #1
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d020      	beq.n	8004620 <HAL_PCD_IRQHandler+0x340>
 80045de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e0:	f003 030f 	and.w	r3, r3, #15
 80045e4:	2201      	movs	r2, #1
 80045e6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ea:	60fb      	str	r3, [r7, #12]
 80045ec:	69fb      	ldr	r3, [r7, #28]
 80045ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	43db      	mvns	r3, r3
 80045f8:	69f9      	ldr	r1, [r7, #28]
 80045fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045fe:	4013      	ands	r3, r2
 8004600:	634b      	str	r3, [r1, #52]	; 0x34
 8004602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004604:	015a      	lsls	r2, r3, #5
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	4413      	add	r3, r2
 800460a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800460e:	461a      	mov	r2, r3
 8004610:	2301      	movs	r3, #1
 8004612:	6093      	str	r3, [r2, #8]
 8004614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004616:	b2db      	uxtb	r3, r3
 8004618:	4619      	mov	r1, r3
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f005 fb4f 	bl	8009cbe <HAL_PCD_DataInStageCallback>
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	f003 0308 	and.w	r3, r3, #8
 8004626:	2b00      	cmp	r3, #0
 8004628:	d008      	beq.n	800463c <HAL_PCD_IRQHandler+0x35c>
 800462a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462c:	015a      	lsls	r2, r3, #5
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	4413      	add	r3, r2
 8004632:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004636:	461a      	mov	r2, r3
 8004638:	2308      	movs	r3, #8
 800463a:	6093      	str	r3, [r2, #8]
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	f003 0310 	and.w	r3, r3, #16
 8004642:	2b00      	cmp	r3, #0
 8004644:	d008      	beq.n	8004658 <HAL_PCD_IRQHandler+0x378>
 8004646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004648:	015a      	lsls	r2, r3, #5
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	4413      	add	r3, r2
 800464e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004652:	461a      	mov	r2, r3
 8004654:	2310      	movs	r3, #16
 8004656:	6093      	str	r3, [r2, #8]
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800465e:	2b00      	cmp	r3, #0
 8004660:	d008      	beq.n	8004674 <HAL_PCD_IRQHandler+0x394>
 8004662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004664:	015a      	lsls	r2, r3, #5
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	4413      	add	r3, r2
 800466a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800466e:	461a      	mov	r2, r3
 8004670:	2340      	movs	r3, #64	; 0x40
 8004672:	6093      	str	r3, [r2, #8]
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	f003 0302 	and.w	r3, r3, #2
 800467a:	2b00      	cmp	r3, #0
 800467c:	d023      	beq.n	80046c6 <HAL_PCD_IRQHandler+0x3e6>
 800467e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004680:	6a38      	ldr	r0, [r7, #32]
 8004682:	f002 fd2b 	bl	80070dc <USB_FlushTxFifo>
 8004686:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004688:	4613      	mov	r3, r2
 800468a:	00db      	lsls	r3, r3, #3
 800468c:	4413      	add	r3, r2
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	3338      	adds	r3, #56	; 0x38
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	4413      	add	r3, r2
 8004696:	3304      	adds	r3, #4
 8004698:	617b      	str	r3, [r7, #20]
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	78db      	ldrb	r3, [r3, #3]
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d108      	bne.n	80046b4 <HAL_PCD_IRQHandler+0x3d4>
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	2200      	movs	r2, #0
 80046a6:	70da      	strb	r2, [r3, #3]
 80046a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	4619      	mov	r1, r3
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f005 fb92 	bl	8009dd8 <HAL_PCD_ISOINIncompleteCallback>
 80046b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b6:	015a      	lsls	r2, r3, #5
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	4413      	add	r3, r2
 80046bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046c0:	461a      	mov	r2, r3
 80046c2:	2302      	movs	r3, #2
 80046c4:	6093      	str	r3, [r2, #8]
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d003      	beq.n	80046d8 <HAL_PCD_IRQHandler+0x3f8>
 80046d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f000 fc96 	bl	8005004 <PCD_WriteEmptyTxFifo>
 80046d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046da:	3301      	adds	r3, #1
 80046dc:	627b      	str	r3, [r7, #36]	; 0x24
 80046de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046e0:	085b      	lsrs	r3, r3, #1
 80046e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80046e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	f47f af65 	bne.w	80045b6 <HAL_PCD_IRQHandler+0x2d6>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4618      	mov	r0, r3
 80046f2:	f003 fb91 	bl	8007e18 <USB_ReadInterrupts>
 80046f6:	4603      	mov	r3, r0
 80046f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004700:	d114      	bne.n	800472c <HAL_PCD_IRQHandler+0x44c>
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	69fa      	ldr	r2, [r7, #28]
 800470c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004710:	f023 0301 	bic.w	r3, r3, #1
 8004714:	6053      	str	r3, [r2, #4]
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f005 fb3e 	bl	8009d98 <HAL_PCD_ResumeCallback>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	695a      	ldr	r2, [r3, #20]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800472a:	615a      	str	r2, [r3, #20]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4618      	mov	r0, r3
 8004732:	f003 fb71 	bl	8007e18 <USB_ReadInterrupts>
 8004736:	4603      	mov	r3, r0
 8004738:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800473c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004740:	d112      	bne.n	8004768 <HAL_PCD_IRQHandler+0x488>
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	f003 0301 	and.w	r3, r3, #1
 800474e:	2b01      	cmp	r3, #1
 8004750:	d102      	bne.n	8004758 <HAL_PCD_IRQHandler+0x478>
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f005 fafa 	bl	8009d4c <HAL_PCD_SuspendCallback>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	695a      	ldr	r2, [r3, #20]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004766:	615a      	str	r2, [r3, #20]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4618      	mov	r0, r3
 800476e:	f003 fb53 	bl	8007e18 <USB_ReadInterrupts>
 8004772:	4603      	mov	r3, r0
 8004774:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004778:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800477c:	f040 80b5 	bne.w	80048ea <HAL_PCD_IRQHandler+0x60a>
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	69fa      	ldr	r2, [r7, #28]
 800478a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800478e:	f023 0301 	bic.w	r3, r3, #1
 8004792:	6053      	str	r3, [r2, #4]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	2110      	movs	r1, #16
 800479a:	4618      	mov	r0, r3
 800479c:	f002 fc9e 	bl	80070dc <USB_FlushTxFifo>
 80047a0:	2300      	movs	r3, #0
 80047a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047a4:	e046      	b.n	8004834 <HAL_PCD_IRQHandler+0x554>
 80047a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047a8:	015a      	lsls	r2, r3, #5
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	4413      	add	r3, r2
 80047ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047b2:	461a      	mov	r2, r3
 80047b4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80047b8:	6093      	str	r3, [r2, #8]
 80047ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047bc:	015a      	lsls	r2, r3, #5
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	4413      	add	r3, r2
 80047c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047ca:	0151      	lsls	r1, r2, #5
 80047cc:	69fa      	ldr	r2, [r7, #28]
 80047ce:	440a      	add	r2, r1
 80047d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047d4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80047d8:	6013      	str	r3, [r2, #0]
 80047da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047dc:	015a      	lsls	r2, r3, #5
 80047de:	69fb      	ldr	r3, [r7, #28]
 80047e0:	4413      	add	r3, r2
 80047e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047e6:	461a      	mov	r2, r3
 80047e8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80047ec:	6093      	str	r3, [r2, #8]
 80047ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047f0:	015a      	lsls	r2, r3, #5
 80047f2:	69fb      	ldr	r3, [r7, #28]
 80047f4:	4413      	add	r3, r2
 80047f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047fe:	0151      	lsls	r1, r2, #5
 8004800:	69fa      	ldr	r2, [r7, #28]
 8004802:	440a      	add	r2, r1
 8004804:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004808:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800480c:	6013      	str	r3, [r2, #0]
 800480e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004810:	015a      	lsls	r2, r3, #5
 8004812:	69fb      	ldr	r3, [r7, #28]
 8004814:	4413      	add	r3, r2
 8004816:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800481e:	0151      	lsls	r1, r2, #5
 8004820:	69fa      	ldr	r2, [r7, #28]
 8004822:	440a      	add	r2, r1
 8004824:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004828:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800482c:	6013      	str	r3, [r2, #0]
 800482e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004830:	3301      	adds	r3, #1
 8004832:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800483a:	429a      	cmp	r2, r3
 800483c:	d3b3      	bcc.n	80047a6 <HAL_PCD_IRQHandler+0x4c6>
 800483e:	69fb      	ldr	r3, [r7, #28]
 8004840:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004844:	69db      	ldr	r3, [r3, #28]
 8004846:	69fa      	ldr	r2, [r7, #28]
 8004848:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800484c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004850:	61d3      	str	r3, [r2, #28]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004856:	2b00      	cmp	r3, #0
 8004858:	d016      	beq.n	8004888 <HAL_PCD_IRQHandler+0x5a8>
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004860:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004864:	69fa      	ldr	r2, [r7, #28]
 8004866:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800486a:	f043 030b 	orr.w	r3, r3, #11
 800486e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800487a:	69fa      	ldr	r2, [r7, #28]
 800487c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004880:	f043 030b 	orr.w	r3, r3, #11
 8004884:	6453      	str	r3, [r2, #68]	; 0x44
 8004886:	e015      	b.n	80048b4 <HAL_PCD_IRQHandler+0x5d4>
 8004888:	69fb      	ldr	r3, [r7, #28]
 800488a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800488e:	695b      	ldr	r3, [r3, #20]
 8004890:	69fa      	ldr	r2, [r7, #28]
 8004892:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004896:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800489a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800489e:	6153      	str	r3, [r2, #20]
 80048a0:	69fb      	ldr	r3, [r7, #28]
 80048a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048a6:	691b      	ldr	r3, [r3, #16]
 80048a8:	69fa      	ldr	r2, [r7, #28]
 80048aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048ae:	f043 030b 	orr.w	r3, r3, #11
 80048b2:	6113      	str	r3, [r2, #16]
 80048b4:	69fb      	ldr	r3, [r7, #28]
 80048b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	69fa      	ldr	r2, [r7, #28]
 80048be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048c2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80048c6:	6013      	str	r3, [r2, #0]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80048d2:	4619      	mov	r1, r3
 80048d4:	4610      	mov	r0, r2
 80048d6:	f003 fb5d 	bl	8007f94 <USB_EP0_OutStart>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	695a      	ldr	r2, [r3, #20]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80048e8:	615a      	str	r2, [r3, #20]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4618      	mov	r0, r3
 80048f0:	f003 fa92 	bl	8007e18 <USB_ReadInterrupts>
 80048f4:	4603      	mov	r3, r0
 80048f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048fe:	d124      	bne.n	800494a <HAL_PCD_IRQHandler+0x66a>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4618      	mov	r0, r3
 8004906:	f003 fb22 	bl	8007f4e <USB_ActivateSetup>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4618      	mov	r0, r3
 8004910:	f002 fc60 	bl	80071d4 <USB_GetDevSpeed>
 8004914:	4603      	mov	r3, r0
 8004916:	461a      	mov	r2, r3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	611a      	str	r2, [r3, #16]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681c      	ldr	r4, [r3, #0]
 8004920:	f001 f98c 	bl	8005c3c <HAL_RCC_GetHCLKFreq>
 8004924:	4601      	mov	r1, r0
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	691b      	ldr	r3, [r3, #16]
 800492a:	b2db      	uxtb	r3, r3
 800492c:	461a      	mov	r2, r3
 800492e:	4620      	mov	r0, r4
 8004930:	f002 f9aa 	bl	8006c88 <USB_SetTurnaroundTime>
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f005 f9ea 	bl	8009d0e <HAL_PCD_ResetCallback>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	695a      	ldr	r2, [r3, #20]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004948:	615a      	str	r2, [r3, #20]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4618      	mov	r0, r3
 8004950:	f003 fa62 	bl	8007e18 <USB_ReadInterrupts>
 8004954:	4603      	mov	r3, r0
 8004956:	f003 0308 	and.w	r3, r3, #8
 800495a:	2b08      	cmp	r3, #8
 800495c:	d10a      	bne.n	8004974 <HAL_PCD_IRQHandler+0x694>
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f005 f9c7 	bl	8009cf2 <HAL_PCD_SOFCallback>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	695a      	ldr	r2, [r3, #20]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f002 0208 	and.w	r2, r2, #8
 8004972:	615a      	str	r2, [r3, #20]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4618      	mov	r0, r3
 800497a:	f003 fa4d 	bl	8007e18 <USB_ReadInterrupts>
 800497e:	4603      	mov	r3, r0
 8004980:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004984:	2b80      	cmp	r3, #128	; 0x80
 8004986:	d122      	bne.n	80049ce <HAL_PCD_IRQHandler+0x6ee>
 8004988:	6a3b      	ldr	r3, [r7, #32]
 800498a:	699b      	ldr	r3, [r3, #24]
 800498c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004990:	6a3b      	ldr	r3, [r7, #32]
 8004992:	619a      	str	r2, [r3, #24]
 8004994:	2301      	movs	r3, #1
 8004996:	627b      	str	r3, [r7, #36]	; 0x24
 8004998:	e014      	b.n	80049c4 <HAL_PCD_IRQHandler+0x6e4>
 800499a:	6879      	ldr	r1, [r7, #4]
 800499c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800499e:	4613      	mov	r3, r2
 80049a0:	00db      	lsls	r3, r3, #3
 80049a2:	4413      	add	r3, r2
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	440b      	add	r3, r1
 80049a8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80049ac:	781b      	ldrb	r3, [r3, #0]
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d105      	bne.n	80049be <HAL_PCD_IRQHandler+0x6de>
 80049b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	4619      	mov	r1, r3
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f000 faf2 	bl	8004fa2 <HAL_PCD_EP_Abort>
 80049be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c0:	3301      	adds	r3, #1
 80049c2:	627b      	str	r3, [r7, #36]	; 0x24
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d3e5      	bcc.n	800499a <HAL_PCD_IRQHandler+0x6ba>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4618      	mov	r0, r3
 80049d4:	f003 fa20 	bl	8007e18 <USB_ReadInterrupts>
 80049d8:	4603      	mov	r3, r0
 80049da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049e2:	d13b      	bne.n	8004a5c <HAL_PCD_IRQHandler+0x77c>
 80049e4:	2301      	movs	r3, #1
 80049e6:	627b      	str	r3, [r7, #36]	; 0x24
 80049e8:	e02b      	b.n	8004a42 <HAL_PCD_IRQHandler+0x762>
 80049ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ec:	015a      	lsls	r2, r3, #5
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	4413      	add	r3, r2
 80049f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	61bb      	str	r3, [r7, #24]
 80049fa:	6879      	ldr	r1, [r7, #4]
 80049fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049fe:	4613      	mov	r3, r2
 8004a00:	00db      	lsls	r3, r3, #3
 8004a02:	4413      	add	r3, r2
 8004a04:	009b      	lsls	r3, r3, #2
 8004a06:	440b      	add	r3, r1
 8004a08:	3340      	adds	r3, #64	; 0x40
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d115      	bne.n	8004a3c <HAL_PCD_IRQHandler+0x75c>
 8004a10:	69bb      	ldr	r3, [r7, #24]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	da12      	bge.n	8004a3c <HAL_PCD_IRQHandler+0x75c>
 8004a16:	6879      	ldr	r1, [r7, #4]
 8004a18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a1a:	4613      	mov	r3, r2
 8004a1c:	00db      	lsls	r3, r3, #3
 8004a1e:	4413      	add	r3, r2
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	440b      	add	r3, r1
 8004a24:	333f      	adds	r3, #63	; 0x3f
 8004a26:	2201      	movs	r2, #1
 8004a28:	701a      	strb	r2, [r3, #0]
 8004a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	4619      	mov	r1, r3
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f000 fab3 	bl	8004fa2 <HAL_PCD_EP_Abort>
 8004a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3e:	3301      	adds	r3, #1
 8004a40:	627b      	str	r3, [r7, #36]	; 0x24
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d3ce      	bcc.n	80049ea <HAL_PCD_IRQHandler+0x70a>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	695a      	ldr	r2, [r3, #20]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004a5a:	615a      	str	r2, [r3, #20]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4618      	mov	r0, r3
 8004a62:	f003 f9d9 	bl	8007e18 <USB_ReadInterrupts>
 8004a66:	4603      	mov	r3, r0
 8004a68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a6c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a70:	d155      	bne.n	8004b1e <HAL_PCD_IRQHandler+0x83e>
 8004a72:	2301      	movs	r3, #1
 8004a74:	627b      	str	r3, [r7, #36]	; 0x24
 8004a76:	e045      	b.n	8004b04 <HAL_PCD_IRQHandler+0x824>
 8004a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7a:	015a      	lsls	r2, r3, #5
 8004a7c:	69fb      	ldr	r3, [r7, #28]
 8004a7e:	4413      	add	r3, r2
 8004a80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	61bb      	str	r3, [r7, #24]
 8004a88:	6879      	ldr	r1, [r7, #4]
 8004a8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a8c:	4613      	mov	r3, r2
 8004a8e:	00db      	lsls	r3, r3, #3
 8004a90:	4413      	add	r3, r2
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	440b      	add	r3, r1
 8004a96:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d12e      	bne.n	8004afe <HAL_PCD_IRQHandler+0x81e>
 8004aa0:	69bb      	ldr	r3, [r7, #24]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	da2b      	bge.n	8004afe <HAL_PCD_IRQHandler+0x81e>
 8004aa6:	69bb      	ldr	r3, [r7, #24]
 8004aa8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004ab2:	f003 0301 	and.w	r3, r3, #1
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d121      	bne.n	8004afe <HAL_PCD_IRQHandler+0x81e>
 8004aba:	6879      	ldr	r1, [r7, #4]
 8004abc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004abe:	4613      	mov	r3, r2
 8004ac0:	00db      	lsls	r3, r3, #3
 8004ac2:	4413      	add	r3, r2
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	440b      	add	r3, r1
 8004ac8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004acc:	2201      	movs	r2, #1
 8004ace:	701a      	strb	r2, [r3, #0]
 8004ad0:	6a3b      	ldr	r3, [r7, #32]
 8004ad2:	699b      	ldr	r3, [r3, #24]
 8004ad4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004ad8:	6a3b      	ldr	r3, [r7, #32]
 8004ada:	619a      	str	r2, [r3, #24]
 8004adc:	6a3b      	ldr	r3, [r7, #32]
 8004ade:	695b      	ldr	r3, [r3, #20]
 8004ae0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d10a      	bne.n	8004afe <HAL_PCD_IRQHandler+0x81e>
 8004ae8:	69fb      	ldr	r3, [r7, #28]
 8004aea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	69fa      	ldr	r2, [r7, #28]
 8004af2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004af6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004afa:	6053      	str	r3, [r2, #4]
 8004afc:	e007      	b.n	8004b0e <HAL_PCD_IRQHandler+0x82e>
 8004afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b00:	3301      	adds	r3, #1
 8004b02:	627b      	str	r3, [r7, #36]	; 0x24
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d3b4      	bcc.n	8004a78 <HAL_PCD_IRQHandler+0x798>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	695a      	ldr	r2, [r3, #20]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004b1c:	615a      	str	r2, [r3, #20]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4618      	mov	r0, r3
 8004b24:	f003 f978 	bl	8007e18 <USB_ReadInterrupts>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004b2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b32:	d10a      	bne.n	8004b4a <HAL_PCD_IRQHandler+0x86a>
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f005 f961 	bl	8009dfc <HAL_PCD_ConnectCallback>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	695a      	ldr	r2, [r3, #20]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004b48:	615a      	str	r2, [r3, #20]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f003 f962 	bl	8007e18 <USB_ReadInterrupts>
 8004b54:	4603      	mov	r3, r0
 8004b56:	f003 0304 	and.w	r3, r3, #4
 8004b5a:	2b04      	cmp	r3, #4
 8004b5c:	d115      	bne.n	8004b8a <HAL_PCD_IRQHandler+0x8aa>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	61bb      	str	r3, [r7, #24]
 8004b66:	69bb      	ldr	r3, [r7, #24]
 8004b68:	f003 0304 	and.w	r3, r3, #4
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d002      	beq.n	8004b76 <HAL_PCD_IRQHandler+0x896>
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f005 f951 	bl	8009e18 <HAL_PCD_DisconnectCallback>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	6859      	ldr	r1, [r3, #4]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	69ba      	ldr	r2, [r7, #24]
 8004b82:	430a      	orrs	r2, r1
 8004b84:	605a      	str	r2, [r3, #4]
 8004b86:	e000      	b.n	8004b8a <HAL_PCD_IRQHandler+0x8aa>
 8004b88:	bf00      	nop
 8004b8a:	3734      	adds	r7, #52	; 0x34
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd90      	pop	{r4, r7, pc}

08004b90 <HAL_PCD_SetAddress>:
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b082      	sub	sp, #8
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	460b      	mov	r3, r1
 8004b9a:	70fb      	strb	r3, [r7, #3]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d101      	bne.n	8004baa <HAL_PCD_SetAddress+0x1a>
 8004ba6:	2302      	movs	r3, #2
 8004ba8:	e013      	b.n	8004bd2 <HAL_PCD_SetAddress+0x42>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2201      	movs	r2, #1
 8004bae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	78fa      	ldrb	r2, [r7, #3]
 8004bb6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	78fa      	ldrb	r2, [r7, #3]
 8004bc0:	4611      	mov	r1, r2
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f003 f8c3 	bl	8007d4e <USB_SetDevAddress>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3708      	adds	r7, #8
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}

08004bda <HAL_PCD_EP_Open>:
 8004bda:	b580      	push	{r7, lr}
 8004bdc:	b084      	sub	sp, #16
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	6078      	str	r0, [r7, #4]
 8004be2:	4608      	mov	r0, r1
 8004be4:	4611      	mov	r1, r2
 8004be6:	461a      	mov	r2, r3
 8004be8:	4603      	mov	r3, r0
 8004bea:	70fb      	strb	r3, [r7, #3]
 8004bec:	460b      	mov	r3, r1
 8004bee:	803b      	strh	r3, [r7, #0]
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	70bb      	strb	r3, [r7, #2]
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	72fb      	strb	r3, [r7, #11]
 8004bf8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	da0f      	bge.n	8004c20 <HAL_PCD_EP_Open+0x46>
 8004c00:	78fb      	ldrb	r3, [r7, #3]
 8004c02:	f003 020f 	and.w	r2, r3, #15
 8004c06:	4613      	mov	r3, r2
 8004c08:	00db      	lsls	r3, r3, #3
 8004c0a:	4413      	add	r3, r2
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	3338      	adds	r3, #56	; 0x38
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	4413      	add	r3, r2
 8004c14:	3304      	adds	r3, #4
 8004c16:	60fb      	str	r3, [r7, #12]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	705a      	strb	r2, [r3, #1]
 8004c1e:	e00f      	b.n	8004c40 <HAL_PCD_EP_Open+0x66>
 8004c20:	78fb      	ldrb	r3, [r7, #3]
 8004c22:	f003 020f 	and.w	r2, r3, #15
 8004c26:	4613      	mov	r3, r2
 8004c28:	00db      	lsls	r3, r3, #3
 8004c2a:	4413      	add	r3, r2
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	4413      	add	r3, r2
 8004c36:	3304      	adds	r3, #4
 8004c38:	60fb      	str	r3, [r7, #12]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	705a      	strb	r2, [r3, #1]
 8004c40:	78fb      	ldrb	r3, [r7, #3]
 8004c42:	f003 030f 	and.w	r3, r3, #15
 8004c46:	b2da      	uxtb	r2, r3
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	701a      	strb	r2, [r3, #0]
 8004c4c:	883a      	ldrh	r2, [r7, #0]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	609a      	str	r2, [r3, #8]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	78ba      	ldrb	r2, [r7, #2]
 8004c56:	711a      	strb	r2, [r3, #4]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	785b      	ldrb	r3, [r3, #1]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d004      	beq.n	8004c6a <HAL_PCD_EP_Open+0x90>
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	781b      	ldrb	r3, [r3, #0]
 8004c64:	b29a      	uxth	r2, r3
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	835a      	strh	r2, [r3, #26]
 8004c6a:	78bb      	ldrb	r3, [r7, #2]
 8004c6c:	2b02      	cmp	r3, #2
 8004c6e:	d102      	bne.n	8004c76 <HAL_PCD_EP_Open+0x9c>
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2200      	movs	r2, #0
 8004c74:	715a      	strb	r2, [r3, #5]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d101      	bne.n	8004c84 <HAL_PCD_EP_Open+0xaa>
 8004c80:	2302      	movs	r3, #2
 8004c82:	e00e      	b.n	8004ca2 <HAL_PCD_EP_Open+0xc8>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	68f9      	ldr	r1, [r7, #12]
 8004c92:	4618      	mov	r0, r3
 8004c94:	f002 fabc 	bl	8007210 <USB_ActivateEndpoint>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8004ca0:	7afb      	ldrb	r3, [r7, #11]
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3710      	adds	r7, #16
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}

08004caa <HAL_PCD_EP_Close>:
 8004caa:	b580      	push	{r7, lr}
 8004cac:	b084      	sub	sp, #16
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	6078      	str	r0, [r7, #4]
 8004cb2:	460b      	mov	r3, r1
 8004cb4:	70fb      	strb	r3, [r7, #3]
 8004cb6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	da0f      	bge.n	8004cde <HAL_PCD_EP_Close+0x34>
 8004cbe:	78fb      	ldrb	r3, [r7, #3]
 8004cc0:	f003 020f 	and.w	r2, r3, #15
 8004cc4:	4613      	mov	r3, r2
 8004cc6:	00db      	lsls	r3, r3, #3
 8004cc8:	4413      	add	r3, r2
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	3338      	adds	r3, #56	; 0x38
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	4413      	add	r3, r2
 8004cd2:	3304      	adds	r3, #4
 8004cd4:	60fb      	str	r3, [r7, #12]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2201      	movs	r2, #1
 8004cda:	705a      	strb	r2, [r3, #1]
 8004cdc:	e00f      	b.n	8004cfe <HAL_PCD_EP_Close+0x54>
 8004cde:	78fb      	ldrb	r3, [r7, #3]
 8004ce0:	f003 020f 	and.w	r2, r3, #15
 8004ce4:	4613      	mov	r3, r2
 8004ce6:	00db      	lsls	r3, r3, #3
 8004ce8:	4413      	add	r3, r2
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	4413      	add	r3, r2
 8004cf4:	3304      	adds	r3, #4
 8004cf6:	60fb      	str	r3, [r7, #12]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	705a      	strb	r2, [r3, #1]
 8004cfe:	78fb      	ldrb	r3, [r7, #3]
 8004d00:	f003 030f 	and.w	r3, r3, #15
 8004d04:	b2da      	uxtb	r2, r3
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	701a      	strb	r2, [r3, #0]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d101      	bne.n	8004d18 <HAL_PCD_EP_Close+0x6e>
 8004d14:	2302      	movs	r3, #2
 8004d16:	e00e      	b.n	8004d36 <HAL_PCD_EP_Close+0x8c>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	68f9      	ldr	r1, [r7, #12]
 8004d26:	4618      	mov	r0, r3
 8004d28:	f002 faf8 	bl	800731c <USB_DeactivateEndpoint>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8004d34:	2300      	movs	r3, #0
 8004d36:	4618      	mov	r0, r3
 8004d38:	3710      	adds	r7, #16
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}

08004d3e <HAL_PCD_EP_Receive>:
 8004d3e:	b580      	push	{r7, lr}
 8004d40:	b086      	sub	sp, #24
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	60f8      	str	r0, [r7, #12]
 8004d46:	607a      	str	r2, [r7, #4]
 8004d48:	603b      	str	r3, [r7, #0]
 8004d4a:	460b      	mov	r3, r1
 8004d4c:	72fb      	strb	r3, [r7, #11]
 8004d4e:	7afb      	ldrb	r3, [r7, #11]
 8004d50:	f003 020f 	and.w	r2, r3, #15
 8004d54:	4613      	mov	r3, r2
 8004d56:	00db      	lsls	r3, r3, #3
 8004d58:	4413      	add	r3, r2
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004d60:	68fa      	ldr	r2, [r7, #12]
 8004d62:	4413      	add	r3, r2
 8004d64:	3304      	adds	r3, #4
 8004d66:	617b      	str	r3, [r7, #20]
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	60da      	str	r2, [r3, #12]
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	683a      	ldr	r2, [r7, #0]
 8004d72:	611a      	str	r2, [r3, #16]
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	2200      	movs	r2, #0
 8004d78:	615a      	str	r2, [r3, #20]
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	705a      	strb	r2, [r3, #1]
 8004d80:	7afb      	ldrb	r3, [r7, #11]
 8004d82:	f003 030f 	and.w	r3, r3, #15
 8004d86:	b2da      	uxtb	r2, r3
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	701a      	strb	r2, [r3, #0]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	6979      	ldr	r1, [r7, #20]
 8004d92:	4618      	mov	r0, r3
 8004d94:	f002 fb9e 	bl	80074d4 <USB_EPStartXfer>
 8004d98:	2300      	movs	r3, #0
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3718      	adds	r7, #24
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}

08004da2 <HAL_PCD_EP_GetRxCount>:
 8004da2:	b480      	push	{r7}
 8004da4:	b083      	sub	sp, #12
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	6078      	str	r0, [r7, #4]
 8004daa:	460b      	mov	r3, r1
 8004dac:	70fb      	strb	r3, [r7, #3]
 8004dae:	78fb      	ldrb	r3, [r7, #3]
 8004db0:	f003 020f 	and.w	r2, r3, #15
 8004db4:	6879      	ldr	r1, [r7, #4]
 8004db6:	4613      	mov	r3, r2
 8004db8:	00db      	lsls	r3, r3, #3
 8004dba:	4413      	add	r3, r2
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	440b      	add	r3, r1
 8004dc0:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	370c      	adds	r7, #12
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bc80      	pop	{r7}
 8004dce:	4770      	bx	lr

08004dd0 <HAL_PCD_EP_Transmit>:
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b086      	sub	sp, #24
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	60f8      	str	r0, [r7, #12]
 8004dd8:	607a      	str	r2, [r7, #4]
 8004dda:	603b      	str	r3, [r7, #0]
 8004ddc:	460b      	mov	r3, r1
 8004dde:	72fb      	strb	r3, [r7, #11]
 8004de0:	7afb      	ldrb	r3, [r7, #11]
 8004de2:	f003 020f 	and.w	r2, r3, #15
 8004de6:	4613      	mov	r3, r2
 8004de8:	00db      	lsls	r3, r3, #3
 8004dea:	4413      	add	r3, r2
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	3338      	adds	r3, #56	; 0x38
 8004df0:	68fa      	ldr	r2, [r7, #12]
 8004df2:	4413      	add	r3, r2
 8004df4:	3304      	adds	r3, #4
 8004df6:	617b      	str	r3, [r7, #20]
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	60da      	str	r2, [r3, #12]
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	683a      	ldr	r2, [r7, #0]
 8004e02:	611a      	str	r2, [r3, #16]
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	2200      	movs	r2, #0
 8004e08:	615a      	str	r2, [r3, #20]
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	705a      	strb	r2, [r3, #1]
 8004e10:	7afb      	ldrb	r3, [r7, #11]
 8004e12:	f003 030f 	and.w	r3, r3, #15
 8004e16:	b2da      	uxtb	r2, r3
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	701a      	strb	r2, [r3, #0]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	6979      	ldr	r1, [r7, #20]
 8004e22:	4618      	mov	r0, r3
 8004e24:	f002 fb56 	bl	80074d4 <USB_EPStartXfer>
 8004e28:	2300      	movs	r3, #0
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3718      	adds	r7, #24
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}

08004e32 <HAL_PCD_EP_SetStall>:
 8004e32:	b580      	push	{r7, lr}
 8004e34:	b084      	sub	sp, #16
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	6078      	str	r0, [r7, #4]
 8004e3a:	460b      	mov	r3, r1
 8004e3c:	70fb      	strb	r3, [r7, #3]
 8004e3e:	78fb      	ldrb	r3, [r7, #3]
 8004e40:	f003 020f 	and.w	r2, r3, #15
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d901      	bls.n	8004e50 <HAL_PCD_EP_SetStall+0x1e>
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e04e      	b.n	8004eee <HAL_PCD_EP_SetStall+0xbc>
 8004e50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	da0f      	bge.n	8004e78 <HAL_PCD_EP_SetStall+0x46>
 8004e58:	78fb      	ldrb	r3, [r7, #3]
 8004e5a:	f003 020f 	and.w	r2, r3, #15
 8004e5e:	4613      	mov	r3, r2
 8004e60:	00db      	lsls	r3, r3, #3
 8004e62:	4413      	add	r3, r2
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	3338      	adds	r3, #56	; 0x38
 8004e68:	687a      	ldr	r2, [r7, #4]
 8004e6a:	4413      	add	r3, r2
 8004e6c:	3304      	adds	r3, #4
 8004e6e:	60fb      	str	r3, [r7, #12]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2201      	movs	r2, #1
 8004e74:	705a      	strb	r2, [r3, #1]
 8004e76:	e00d      	b.n	8004e94 <HAL_PCD_EP_SetStall+0x62>
 8004e78:	78fa      	ldrb	r2, [r7, #3]
 8004e7a:	4613      	mov	r3, r2
 8004e7c:	00db      	lsls	r3, r3, #3
 8004e7e:	4413      	add	r3, r2
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	4413      	add	r3, r2
 8004e8a:	3304      	adds	r3, #4
 8004e8c:	60fb      	str	r3, [r7, #12]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2200      	movs	r2, #0
 8004e92:	705a      	strb	r2, [r3, #1]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2201      	movs	r2, #1
 8004e98:	709a      	strb	r2, [r3, #2]
 8004e9a:	78fb      	ldrb	r3, [r7, #3]
 8004e9c:	f003 030f 	and.w	r3, r3, #15
 8004ea0:	b2da      	uxtb	r2, r3
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	701a      	strb	r2, [r3, #0]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d101      	bne.n	8004eb4 <HAL_PCD_EP_SetStall+0x82>
 8004eb0:	2302      	movs	r3, #2
 8004eb2:	e01c      	b.n	8004eee <HAL_PCD_EP_SetStall+0xbc>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	68f9      	ldr	r1, [r7, #12]
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f002 fe71 	bl	8007baa <USB_EPSetStall>
 8004ec8:	78fb      	ldrb	r3, [r7, #3]
 8004eca:	f003 030f 	and.w	r3, r3, #15
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d108      	bne.n	8004ee4 <HAL_PCD_EP_SetStall+0xb2>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004edc:	4619      	mov	r1, r3
 8004ede:	4610      	mov	r0, r2
 8004ee0:	f003 f858 	bl	8007f94 <USB_EP0_OutStart>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8004eec:	2300      	movs	r3, #0
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3710      	adds	r7, #16
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}

08004ef6 <HAL_PCD_EP_ClrStall>:
 8004ef6:	b580      	push	{r7, lr}
 8004ef8:	b084      	sub	sp, #16
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	6078      	str	r0, [r7, #4]
 8004efe:	460b      	mov	r3, r1
 8004f00:	70fb      	strb	r3, [r7, #3]
 8004f02:	78fb      	ldrb	r3, [r7, #3]
 8004f04:	f003 020f 	and.w	r2, r3, #15
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d901      	bls.n	8004f14 <HAL_PCD_EP_ClrStall+0x1e>
 8004f10:	2301      	movs	r3, #1
 8004f12:	e042      	b.n	8004f9a <HAL_PCD_EP_ClrStall+0xa4>
 8004f14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	da0f      	bge.n	8004f3c <HAL_PCD_EP_ClrStall+0x46>
 8004f1c:	78fb      	ldrb	r3, [r7, #3]
 8004f1e:	f003 020f 	and.w	r2, r3, #15
 8004f22:	4613      	mov	r3, r2
 8004f24:	00db      	lsls	r3, r3, #3
 8004f26:	4413      	add	r3, r2
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	3338      	adds	r3, #56	; 0x38
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	4413      	add	r3, r2
 8004f30:	3304      	adds	r3, #4
 8004f32:	60fb      	str	r3, [r7, #12]
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2201      	movs	r2, #1
 8004f38:	705a      	strb	r2, [r3, #1]
 8004f3a:	e00f      	b.n	8004f5c <HAL_PCD_EP_ClrStall+0x66>
 8004f3c:	78fb      	ldrb	r3, [r7, #3]
 8004f3e:	f003 020f 	and.w	r2, r3, #15
 8004f42:	4613      	mov	r3, r2
 8004f44:	00db      	lsls	r3, r3, #3
 8004f46:	4413      	add	r3, r2
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	4413      	add	r3, r2
 8004f52:	3304      	adds	r3, #4
 8004f54:	60fb      	str	r3, [r7, #12]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	705a      	strb	r2, [r3, #1]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	709a      	strb	r2, [r3, #2]
 8004f62:	78fb      	ldrb	r3, [r7, #3]
 8004f64:	f003 030f 	and.w	r3, r3, #15
 8004f68:	b2da      	uxtb	r2, r3
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	701a      	strb	r2, [r3, #0]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d101      	bne.n	8004f7c <HAL_PCD_EP_ClrStall+0x86>
 8004f78:	2302      	movs	r3, #2
 8004f7a:	e00e      	b.n	8004f9a <HAL_PCD_EP_ClrStall+0xa4>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	68f9      	ldr	r1, [r7, #12]
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f002 fe7a 	bl	8007c84 <USB_EPClearStall>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8004f98:	2300      	movs	r3, #0
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3710      	adds	r7, #16
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}

08004fa2 <HAL_PCD_EP_Abort>:
 8004fa2:	b580      	push	{r7, lr}
 8004fa4:	b084      	sub	sp, #16
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]
 8004faa:	460b      	mov	r3, r1
 8004fac:	70fb      	strb	r3, [r7, #3]
 8004fae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	da0c      	bge.n	8004fd0 <HAL_PCD_EP_Abort+0x2e>
 8004fb6:	78fb      	ldrb	r3, [r7, #3]
 8004fb8:	f003 020f 	and.w	r2, r3, #15
 8004fbc:	4613      	mov	r3, r2
 8004fbe:	00db      	lsls	r3, r3, #3
 8004fc0:	4413      	add	r3, r2
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	3338      	adds	r3, #56	; 0x38
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	4413      	add	r3, r2
 8004fca:	3304      	adds	r3, #4
 8004fcc:	60fb      	str	r3, [r7, #12]
 8004fce:	e00c      	b.n	8004fea <HAL_PCD_EP_Abort+0x48>
 8004fd0:	78fb      	ldrb	r3, [r7, #3]
 8004fd2:	f003 020f 	and.w	r2, r3, #15
 8004fd6:	4613      	mov	r3, r2
 8004fd8:	00db      	lsls	r3, r3, #3
 8004fda:	4413      	add	r3, r2
 8004fdc:	009b      	lsls	r3, r3, #2
 8004fde:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004fe2:	687a      	ldr	r2, [r7, #4]
 8004fe4:	4413      	add	r3, r2
 8004fe6:	3304      	adds	r3, #4
 8004fe8:	60fb      	str	r3, [r7, #12]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	68f9      	ldr	r1, [r7, #12]
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f002 fca1 	bl	8007938 <USB_EPStopXfer>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	72fb      	strb	r3, [r7, #11]
 8004ffa:	7afb      	ldrb	r3, [r7, #11]
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3710      	adds	r7, #16
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}

08005004 <PCD_WriteEmptyTxFifo>:
 8005004:	b580      	push	{r7, lr}
 8005006:	b088      	sub	sp, #32
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	6039      	str	r1, [r7, #0]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	617b      	str	r3, [r7, #20]
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	613b      	str	r3, [r7, #16]
 8005018:	683a      	ldr	r2, [r7, #0]
 800501a:	4613      	mov	r3, r2
 800501c:	00db      	lsls	r3, r3, #3
 800501e:	4413      	add	r3, r2
 8005020:	009b      	lsls	r3, r3, #2
 8005022:	3338      	adds	r3, #56	; 0x38
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	4413      	add	r3, r2
 8005028:	3304      	adds	r3, #4
 800502a:	60fb      	str	r3, [r7, #12]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	695a      	ldr	r2, [r3, #20]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	691b      	ldr	r3, [r3, #16]
 8005034:	429a      	cmp	r2, r3
 8005036:	d901      	bls.n	800503c <PCD_WriteEmptyTxFifo+0x38>
 8005038:	2301      	movs	r3, #1
 800503a:	e067      	b.n	800510c <PCD_WriteEmptyTxFifo+0x108>
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	691a      	ldr	r2, [r3, #16]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	695b      	ldr	r3, [r3, #20]
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	61fb      	str	r3, [r7, #28]
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	69fa      	ldr	r2, [r7, #28]
 800504e:	429a      	cmp	r2, r3
 8005050:	d902      	bls.n	8005058 <PCD_WriteEmptyTxFifo+0x54>
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	61fb      	str	r3, [r7, #28]
 8005058:	69fb      	ldr	r3, [r7, #28]
 800505a:	3303      	adds	r3, #3
 800505c:	089b      	lsrs	r3, r3, #2
 800505e:	61bb      	str	r3, [r7, #24]
 8005060:	e026      	b.n	80050b0 <PCD_WriteEmptyTxFifo+0xac>
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	691a      	ldr	r2, [r3, #16]
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	695b      	ldr	r3, [r3, #20]
 800506a:	1ad3      	subs	r3, r2, r3
 800506c:	61fb      	str	r3, [r7, #28]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	69fa      	ldr	r2, [r7, #28]
 8005074:	429a      	cmp	r2, r3
 8005076:	d902      	bls.n	800507e <PCD_WriteEmptyTxFifo+0x7a>
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	61fb      	str	r3, [r7, #28]
 800507e:	69fb      	ldr	r3, [r7, #28]
 8005080:	3303      	adds	r3, #3
 8005082:	089b      	lsrs	r3, r3, #2
 8005084:	61bb      	str	r3, [r7, #24]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	68d9      	ldr	r1, [r3, #12]
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	b2da      	uxtb	r2, r3
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	b29b      	uxth	r3, r3
 8005092:	6978      	ldr	r0, [r7, #20]
 8005094:	f002 fcf9 	bl	8007a8a <USB_WritePacket>
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	68da      	ldr	r2, [r3, #12]
 800509c:	69fb      	ldr	r3, [r7, #28]
 800509e:	441a      	add	r2, r3
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	60da      	str	r2, [r3, #12]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	695a      	ldr	r2, [r3, #20]
 80050a8:	69fb      	ldr	r3, [r7, #28]
 80050aa:	441a      	add	r2, r3
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	615a      	str	r2, [r3, #20]
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	015a      	lsls	r2, r3, #5
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	4413      	add	r3, r2
 80050b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050bc:	699b      	ldr	r3, [r3, #24]
 80050be:	b29b      	uxth	r3, r3
 80050c0:	69ba      	ldr	r2, [r7, #24]
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d809      	bhi.n	80050da <PCD_WriteEmptyTxFifo+0xd6>
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	695a      	ldr	r2, [r3, #20]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d203      	bcs.n	80050da <PCD_WriteEmptyTxFifo+0xd6>
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	691b      	ldr	r3, [r3, #16]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d1c3      	bne.n	8005062 <PCD_WriteEmptyTxFifo+0x5e>
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	691a      	ldr	r2, [r3, #16]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	695b      	ldr	r3, [r3, #20]
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d811      	bhi.n	800510a <PCD_WriteEmptyTxFifo+0x106>
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	f003 030f 	and.w	r3, r3, #15
 80050ec:	2201      	movs	r2, #1
 80050ee:	fa02 f303 	lsl.w	r3, r2, r3
 80050f2:	60bb      	str	r3, [r7, #8]
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	43db      	mvns	r3, r3
 8005100:	6939      	ldr	r1, [r7, #16]
 8005102:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005106:	4013      	ands	r3, r2
 8005108:	634b      	str	r3, [r1, #52]	; 0x34
 800510a:	2300      	movs	r3, #0
 800510c:	4618      	mov	r0, r3
 800510e:	3720      	adds	r7, #32
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}

08005114 <PCD_EP_OutXfrComplete_int>:
 8005114:	b580      	push	{r7, lr}
 8005116:	b086      	sub	sp, #24
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	6039      	str	r1, [r7, #0]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	617b      	str	r3, [r7, #20]
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	613b      	str	r3, [r7, #16]
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	333c      	adds	r3, #60	; 0x3c
 800512c:	3304      	adds	r3, #4
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	60fb      	str	r3, [r7, #12]
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	015a      	lsls	r2, r3, #5
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	4413      	add	r3, r2
 800513a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	60bb      	str	r3, [r7, #8]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	4a19      	ldr	r2, [pc, #100]	; (80051ac <PCD_EP_OutXfrComplete_int+0x98>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d124      	bne.n	8005194 <PCD_EP_OutXfrComplete_int+0x80>
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005150:	2b00      	cmp	r3, #0
 8005152:	d00a      	beq.n	800516a <PCD_EP_OutXfrComplete_int+0x56>
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	015a      	lsls	r2, r3, #5
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	4413      	add	r3, r2
 800515c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005160:	461a      	mov	r2, r3
 8005162:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005166:	6093      	str	r3, [r2, #8]
 8005168:	e01a      	b.n	80051a0 <PCD_EP_OutXfrComplete_int+0x8c>
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	f003 0320 	and.w	r3, r3, #32
 8005170:	2b00      	cmp	r3, #0
 8005172:	d008      	beq.n	8005186 <PCD_EP_OutXfrComplete_int+0x72>
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	015a      	lsls	r2, r3, #5
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	4413      	add	r3, r2
 800517c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005180:	461a      	mov	r2, r3
 8005182:	2320      	movs	r3, #32
 8005184:	6093      	str	r3, [r2, #8]
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	b2db      	uxtb	r3, r3
 800518a:	4619      	mov	r1, r3
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f004 fd7b 	bl	8009c88 <HAL_PCD_DataOutStageCallback>
 8005192:	e005      	b.n	80051a0 <PCD_EP_OutXfrComplete_int+0x8c>
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	b2db      	uxtb	r3, r3
 8005198:	4619      	mov	r1, r3
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f004 fd74 	bl	8009c88 <HAL_PCD_DataOutStageCallback>
 80051a0:	2300      	movs	r3, #0
 80051a2:	4618      	mov	r0, r3
 80051a4:	3718      	adds	r7, #24
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
 80051aa:	bf00      	nop
 80051ac:	4f54310a 	.word	0x4f54310a

080051b0 <PCD_EP_OutSetupPacket_int>:
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b086      	sub	sp, #24
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	6039      	str	r1, [r7, #0]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	617b      	str	r3, [r7, #20]
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	613b      	str	r3, [r7, #16]
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	333c      	adds	r3, #60	; 0x3c
 80051c8:	3304      	adds	r3, #4
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	60fb      	str	r3, [r7, #12]
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	015a      	lsls	r2, r3, #5
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	4413      	add	r3, r2
 80051d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	60bb      	str	r3, [r7, #8]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	4a0c      	ldr	r2, [pc, #48]	; (8005214 <PCD_EP_OutSetupPacket_int+0x64>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d90e      	bls.n	8005204 <PCD_EP_OutSetupPacket_int+0x54>
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d009      	beq.n	8005204 <PCD_EP_OutSetupPacket_int+0x54>
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	015a      	lsls	r2, r3, #5
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	4413      	add	r3, r2
 80051f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051fc:	461a      	mov	r2, r3
 80051fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005202:	6093      	str	r3, [r2, #8]
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f004 fd2d 	bl	8009c64 <HAL_PCD_SetupStageCallback>
 800520a:	2300      	movs	r3, #0
 800520c:	4618      	mov	r0, r3
 800520e:	3718      	adds	r7, #24
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}
 8005214:	4f54300a 	.word	0x4f54300a

08005218 <HAL_PCDEx_SetTxFiFo>:
 8005218:	b480      	push	{r7}
 800521a:	b085      	sub	sp, #20
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	460b      	mov	r3, r1
 8005222:	70fb      	strb	r3, [r7, #3]
 8005224:	4613      	mov	r3, r2
 8005226:	803b      	strh	r3, [r7, #0]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522e:	60bb      	str	r3, [r7, #8]
 8005230:	78fb      	ldrb	r3, [r7, #3]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d107      	bne.n	8005246 <HAL_PCDEx_SetTxFiFo+0x2e>
 8005236:	883b      	ldrh	r3, [r7, #0]
 8005238:	0419      	lsls	r1, r3, #16
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	68ba      	ldr	r2, [r7, #8]
 8005240:	430a      	orrs	r2, r1
 8005242:	629a      	str	r2, [r3, #40]	; 0x28
 8005244:	e028      	b.n	8005298 <HAL_PCDEx_SetTxFiFo+0x80>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800524c:	0c1b      	lsrs	r3, r3, #16
 800524e:	68ba      	ldr	r2, [r7, #8]
 8005250:	4413      	add	r3, r2
 8005252:	60bb      	str	r3, [r7, #8]
 8005254:	2300      	movs	r3, #0
 8005256:	73fb      	strb	r3, [r7, #15]
 8005258:	e00d      	b.n	8005276 <HAL_PCDEx_SetTxFiFo+0x5e>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	7bfb      	ldrb	r3, [r7, #15]
 8005260:	3340      	adds	r3, #64	; 0x40
 8005262:	009b      	lsls	r3, r3, #2
 8005264:	4413      	add	r3, r2
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	0c1b      	lsrs	r3, r3, #16
 800526a:	68ba      	ldr	r2, [r7, #8]
 800526c:	4413      	add	r3, r2
 800526e:	60bb      	str	r3, [r7, #8]
 8005270:	7bfb      	ldrb	r3, [r7, #15]
 8005272:	3301      	adds	r3, #1
 8005274:	73fb      	strb	r3, [r7, #15]
 8005276:	7bfa      	ldrb	r2, [r7, #15]
 8005278:	78fb      	ldrb	r3, [r7, #3]
 800527a:	3b01      	subs	r3, #1
 800527c:	429a      	cmp	r2, r3
 800527e:	d3ec      	bcc.n	800525a <HAL_PCDEx_SetTxFiFo+0x42>
 8005280:	883b      	ldrh	r3, [r7, #0]
 8005282:	0418      	lsls	r0, r3, #16
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6819      	ldr	r1, [r3, #0]
 8005288:	78fb      	ldrb	r3, [r7, #3]
 800528a:	3b01      	subs	r3, #1
 800528c:	68ba      	ldr	r2, [r7, #8]
 800528e:	4302      	orrs	r2, r0
 8005290:	3340      	adds	r3, #64	; 0x40
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	440b      	add	r3, r1
 8005296:	605a      	str	r2, [r3, #4]
 8005298:	2300      	movs	r3, #0
 800529a:	4618      	mov	r0, r3
 800529c:	3714      	adds	r7, #20
 800529e:	46bd      	mov	sp, r7
 80052a0:	bc80      	pop	{r7}
 80052a2:	4770      	bx	lr

080052a4 <HAL_PCDEx_SetRxFiFo>:
 80052a4:	b480      	push	{r7}
 80052a6:	b083      	sub	sp, #12
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	460b      	mov	r3, r1
 80052ae:	807b      	strh	r3, [r7, #2]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	887a      	ldrh	r2, [r7, #2]
 80052b6:	625a      	str	r2, [r3, #36]	; 0x24
 80052b8:	2300      	movs	r3, #0
 80052ba:	4618      	mov	r0, r3
 80052bc:	370c      	adds	r7, #12
 80052be:	46bd      	mov	sp, r7
 80052c0:	bc80      	pop	{r7}
 80052c2:	4770      	bx	lr

080052c4 <HAL_RCC_OscConfig>:
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b086      	sub	sp, #24
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d101      	bne.n	80052d6 <HAL_RCC_OscConfig+0x12>
 80052d2:	2301      	movs	r3, #1
 80052d4:	e304      	b.n	80058e0 <HAL_RCC_OscConfig+0x61c>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 0301 	and.w	r3, r3, #1
 80052de:	2b00      	cmp	r3, #0
 80052e0:	f000 8087 	beq.w	80053f2 <HAL_RCC_OscConfig+0x12e>
 80052e4:	4b92      	ldr	r3, [pc, #584]	; (8005530 <HAL_RCC_OscConfig+0x26c>)
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	f003 030c 	and.w	r3, r3, #12
 80052ec:	2b04      	cmp	r3, #4
 80052ee:	d00c      	beq.n	800530a <HAL_RCC_OscConfig+0x46>
 80052f0:	4b8f      	ldr	r3, [pc, #572]	; (8005530 <HAL_RCC_OscConfig+0x26c>)
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	f003 030c 	and.w	r3, r3, #12
 80052f8:	2b08      	cmp	r3, #8
 80052fa:	d112      	bne.n	8005322 <HAL_RCC_OscConfig+0x5e>
 80052fc:	4b8c      	ldr	r3, [pc, #560]	; (8005530 <HAL_RCC_OscConfig+0x26c>)
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005304:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005308:	d10b      	bne.n	8005322 <HAL_RCC_OscConfig+0x5e>
 800530a:	4b89      	ldr	r3, [pc, #548]	; (8005530 <HAL_RCC_OscConfig+0x26c>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005312:	2b00      	cmp	r3, #0
 8005314:	d06c      	beq.n	80053f0 <HAL_RCC_OscConfig+0x12c>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d168      	bne.n	80053f0 <HAL_RCC_OscConfig+0x12c>
 800531e:	2301      	movs	r3, #1
 8005320:	e2de      	b.n	80058e0 <HAL_RCC_OscConfig+0x61c>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800532a:	d106      	bne.n	800533a <HAL_RCC_OscConfig+0x76>
 800532c:	4b80      	ldr	r3, [pc, #512]	; (8005530 <HAL_RCC_OscConfig+0x26c>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a7f      	ldr	r2, [pc, #508]	; (8005530 <HAL_RCC_OscConfig+0x26c>)
 8005332:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005336:	6013      	str	r3, [r2, #0]
 8005338:	e02e      	b.n	8005398 <HAL_RCC_OscConfig+0xd4>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d10c      	bne.n	800535c <HAL_RCC_OscConfig+0x98>
 8005342:	4b7b      	ldr	r3, [pc, #492]	; (8005530 <HAL_RCC_OscConfig+0x26c>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a7a      	ldr	r2, [pc, #488]	; (8005530 <HAL_RCC_OscConfig+0x26c>)
 8005348:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800534c:	6013      	str	r3, [r2, #0]
 800534e:	4b78      	ldr	r3, [pc, #480]	; (8005530 <HAL_RCC_OscConfig+0x26c>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a77      	ldr	r2, [pc, #476]	; (8005530 <HAL_RCC_OscConfig+0x26c>)
 8005354:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005358:	6013      	str	r3, [r2, #0]
 800535a:	e01d      	b.n	8005398 <HAL_RCC_OscConfig+0xd4>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005364:	d10c      	bne.n	8005380 <HAL_RCC_OscConfig+0xbc>
 8005366:	4b72      	ldr	r3, [pc, #456]	; (8005530 <HAL_RCC_OscConfig+0x26c>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a71      	ldr	r2, [pc, #452]	; (8005530 <HAL_RCC_OscConfig+0x26c>)
 800536c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005370:	6013      	str	r3, [r2, #0]
 8005372:	4b6f      	ldr	r3, [pc, #444]	; (8005530 <HAL_RCC_OscConfig+0x26c>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a6e      	ldr	r2, [pc, #440]	; (8005530 <HAL_RCC_OscConfig+0x26c>)
 8005378:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800537c:	6013      	str	r3, [r2, #0]
 800537e:	e00b      	b.n	8005398 <HAL_RCC_OscConfig+0xd4>
 8005380:	4b6b      	ldr	r3, [pc, #428]	; (8005530 <HAL_RCC_OscConfig+0x26c>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a6a      	ldr	r2, [pc, #424]	; (8005530 <HAL_RCC_OscConfig+0x26c>)
 8005386:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800538a:	6013      	str	r3, [r2, #0]
 800538c:	4b68      	ldr	r3, [pc, #416]	; (8005530 <HAL_RCC_OscConfig+0x26c>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a67      	ldr	r2, [pc, #412]	; (8005530 <HAL_RCC_OscConfig+0x26c>)
 8005392:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005396:	6013      	str	r3, [r2, #0]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d013      	beq.n	80053c8 <HAL_RCC_OscConfig+0x104>
 80053a0:	f7fd ff2a 	bl	80031f8 <HAL_GetTick>
 80053a4:	6138      	str	r0, [r7, #16]
 80053a6:	e008      	b.n	80053ba <HAL_RCC_OscConfig+0xf6>
 80053a8:	f7fd ff26 	bl	80031f8 <HAL_GetTick>
 80053ac:	4602      	mov	r2, r0
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	1ad3      	subs	r3, r2, r3
 80053b2:	2b64      	cmp	r3, #100	; 0x64
 80053b4:	d901      	bls.n	80053ba <HAL_RCC_OscConfig+0xf6>
 80053b6:	2303      	movs	r3, #3
 80053b8:	e292      	b.n	80058e0 <HAL_RCC_OscConfig+0x61c>
 80053ba:	4b5d      	ldr	r3, [pc, #372]	; (8005530 <HAL_RCC_OscConfig+0x26c>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d0f0      	beq.n	80053a8 <HAL_RCC_OscConfig+0xe4>
 80053c6:	e014      	b.n	80053f2 <HAL_RCC_OscConfig+0x12e>
 80053c8:	f7fd ff16 	bl	80031f8 <HAL_GetTick>
 80053cc:	6138      	str	r0, [r7, #16]
 80053ce:	e008      	b.n	80053e2 <HAL_RCC_OscConfig+0x11e>
 80053d0:	f7fd ff12 	bl	80031f8 <HAL_GetTick>
 80053d4:	4602      	mov	r2, r0
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	1ad3      	subs	r3, r2, r3
 80053da:	2b64      	cmp	r3, #100	; 0x64
 80053dc:	d901      	bls.n	80053e2 <HAL_RCC_OscConfig+0x11e>
 80053de:	2303      	movs	r3, #3
 80053e0:	e27e      	b.n	80058e0 <HAL_RCC_OscConfig+0x61c>
 80053e2:	4b53      	ldr	r3, [pc, #332]	; (8005530 <HAL_RCC_OscConfig+0x26c>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d1f0      	bne.n	80053d0 <HAL_RCC_OscConfig+0x10c>
 80053ee:	e000      	b.n	80053f2 <HAL_RCC_OscConfig+0x12e>
 80053f0:	bf00      	nop
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f003 0302 	and.w	r3, r3, #2
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d063      	beq.n	80054c6 <HAL_RCC_OscConfig+0x202>
 80053fe:	4b4c      	ldr	r3, [pc, #304]	; (8005530 <HAL_RCC_OscConfig+0x26c>)
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	f003 030c 	and.w	r3, r3, #12
 8005406:	2b00      	cmp	r3, #0
 8005408:	d00b      	beq.n	8005422 <HAL_RCC_OscConfig+0x15e>
 800540a:	4b49      	ldr	r3, [pc, #292]	; (8005530 <HAL_RCC_OscConfig+0x26c>)
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	f003 030c 	and.w	r3, r3, #12
 8005412:	2b08      	cmp	r3, #8
 8005414:	d11c      	bne.n	8005450 <HAL_RCC_OscConfig+0x18c>
 8005416:	4b46      	ldr	r3, [pc, #280]	; (8005530 <HAL_RCC_OscConfig+0x26c>)
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800541e:	2b00      	cmp	r3, #0
 8005420:	d116      	bne.n	8005450 <HAL_RCC_OscConfig+0x18c>
 8005422:	4b43      	ldr	r3, [pc, #268]	; (8005530 <HAL_RCC_OscConfig+0x26c>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 0302 	and.w	r3, r3, #2
 800542a:	2b00      	cmp	r3, #0
 800542c:	d005      	beq.n	800543a <HAL_RCC_OscConfig+0x176>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	695b      	ldr	r3, [r3, #20]
 8005432:	2b01      	cmp	r3, #1
 8005434:	d001      	beq.n	800543a <HAL_RCC_OscConfig+0x176>
 8005436:	2301      	movs	r3, #1
 8005438:	e252      	b.n	80058e0 <HAL_RCC_OscConfig+0x61c>
 800543a:	4b3d      	ldr	r3, [pc, #244]	; (8005530 <HAL_RCC_OscConfig+0x26c>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	699b      	ldr	r3, [r3, #24]
 8005446:	00db      	lsls	r3, r3, #3
 8005448:	4939      	ldr	r1, [pc, #228]	; (8005530 <HAL_RCC_OscConfig+0x26c>)
 800544a:	4313      	orrs	r3, r2
 800544c:	600b      	str	r3, [r1, #0]
 800544e:	e03a      	b.n	80054c6 <HAL_RCC_OscConfig+0x202>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	695b      	ldr	r3, [r3, #20]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d020      	beq.n	800549a <HAL_RCC_OscConfig+0x1d6>
 8005458:	4b36      	ldr	r3, [pc, #216]	; (8005534 <HAL_RCC_OscConfig+0x270>)
 800545a:	2201      	movs	r2, #1
 800545c:	601a      	str	r2, [r3, #0]
 800545e:	f7fd fecb 	bl	80031f8 <HAL_GetTick>
 8005462:	6138      	str	r0, [r7, #16]
 8005464:	e008      	b.n	8005478 <HAL_RCC_OscConfig+0x1b4>
 8005466:	f7fd fec7 	bl	80031f8 <HAL_GetTick>
 800546a:	4602      	mov	r2, r0
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	1ad3      	subs	r3, r2, r3
 8005470:	2b02      	cmp	r3, #2
 8005472:	d901      	bls.n	8005478 <HAL_RCC_OscConfig+0x1b4>
 8005474:	2303      	movs	r3, #3
 8005476:	e233      	b.n	80058e0 <HAL_RCC_OscConfig+0x61c>
 8005478:	4b2d      	ldr	r3, [pc, #180]	; (8005530 <HAL_RCC_OscConfig+0x26c>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f003 0302 	and.w	r3, r3, #2
 8005480:	2b00      	cmp	r3, #0
 8005482:	d0f0      	beq.n	8005466 <HAL_RCC_OscConfig+0x1a2>
 8005484:	4b2a      	ldr	r3, [pc, #168]	; (8005530 <HAL_RCC_OscConfig+0x26c>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	699b      	ldr	r3, [r3, #24]
 8005490:	00db      	lsls	r3, r3, #3
 8005492:	4927      	ldr	r1, [pc, #156]	; (8005530 <HAL_RCC_OscConfig+0x26c>)
 8005494:	4313      	orrs	r3, r2
 8005496:	600b      	str	r3, [r1, #0]
 8005498:	e015      	b.n	80054c6 <HAL_RCC_OscConfig+0x202>
 800549a:	4b26      	ldr	r3, [pc, #152]	; (8005534 <HAL_RCC_OscConfig+0x270>)
 800549c:	2200      	movs	r2, #0
 800549e:	601a      	str	r2, [r3, #0]
 80054a0:	f7fd feaa 	bl	80031f8 <HAL_GetTick>
 80054a4:	6138      	str	r0, [r7, #16]
 80054a6:	e008      	b.n	80054ba <HAL_RCC_OscConfig+0x1f6>
 80054a8:	f7fd fea6 	bl	80031f8 <HAL_GetTick>
 80054ac:	4602      	mov	r2, r0
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	1ad3      	subs	r3, r2, r3
 80054b2:	2b02      	cmp	r3, #2
 80054b4:	d901      	bls.n	80054ba <HAL_RCC_OscConfig+0x1f6>
 80054b6:	2303      	movs	r3, #3
 80054b8:	e212      	b.n	80058e0 <HAL_RCC_OscConfig+0x61c>
 80054ba:	4b1d      	ldr	r3, [pc, #116]	; (8005530 <HAL_RCC_OscConfig+0x26c>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f003 0302 	and.w	r3, r3, #2
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d1f0      	bne.n	80054a8 <HAL_RCC_OscConfig+0x1e4>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 0308 	and.w	r3, r3, #8
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d03a      	beq.n	8005548 <HAL_RCC_OscConfig+0x284>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	69db      	ldr	r3, [r3, #28]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d019      	beq.n	800550e <HAL_RCC_OscConfig+0x24a>
 80054da:	4b17      	ldr	r3, [pc, #92]	; (8005538 <HAL_RCC_OscConfig+0x274>)
 80054dc:	2201      	movs	r2, #1
 80054de:	601a      	str	r2, [r3, #0]
 80054e0:	f7fd fe8a 	bl	80031f8 <HAL_GetTick>
 80054e4:	6138      	str	r0, [r7, #16]
 80054e6:	e008      	b.n	80054fa <HAL_RCC_OscConfig+0x236>
 80054e8:	f7fd fe86 	bl	80031f8 <HAL_GetTick>
 80054ec:	4602      	mov	r2, r0
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	1ad3      	subs	r3, r2, r3
 80054f2:	2b02      	cmp	r3, #2
 80054f4:	d901      	bls.n	80054fa <HAL_RCC_OscConfig+0x236>
 80054f6:	2303      	movs	r3, #3
 80054f8:	e1f2      	b.n	80058e0 <HAL_RCC_OscConfig+0x61c>
 80054fa:	4b0d      	ldr	r3, [pc, #52]	; (8005530 <HAL_RCC_OscConfig+0x26c>)
 80054fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fe:	f003 0302 	and.w	r3, r3, #2
 8005502:	2b00      	cmp	r3, #0
 8005504:	d0f0      	beq.n	80054e8 <HAL_RCC_OscConfig+0x224>
 8005506:	2001      	movs	r0, #1
 8005508:	f000 fba2 	bl	8005c50 <RCC_Delay>
 800550c:	e01c      	b.n	8005548 <HAL_RCC_OscConfig+0x284>
 800550e:	4b0a      	ldr	r3, [pc, #40]	; (8005538 <HAL_RCC_OscConfig+0x274>)
 8005510:	2200      	movs	r2, #0
 8005512:	601a      	str	r2, [r3, #0]
 8005514:	f7fd fe70 	bl	80031f8 <HAL_GetTick>
 8005518:	6138      	str	r0, [r7, #16]
 800551a:	e00f      	b.n	800553c <HAL_RCC_OscConfig+0x278>
 800551c:	f7fd fe6c 	bl	80031f8 <HAL_GetTick>
 8005520:	4602      	mov	r2, r0
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	1ad3      	subs	r3, r2, r3
 8005526:	2b02      	cmp	r3, #2
 8005528:	d908      	bls.n	800553c <HAL_RCC_OscConfig+0x278>
 800552a:	2303      	movs	r3, #3
 800552c:	e1d8      	b.n	80058e0 <HAL_RCC_OscConfig+0x61c>
 800552e:	bf00      	nop
 8005530:	40021000 	.word	0x40021000
 8005534:	42420000 	.word	0x42420000
 8005538:	42420480 	.word	0x42420480
 800553c:	4b9b      	ldr	r3, [pc, #620]	; (80057ac <HAL_RCC_OscConfig+0x4e8>)
 800553e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005540:	f003 0302 	and.w	r3, r3, #2
 8005544:	2b00      	cmp	r3, #0
 8005546:	d1e9      	bne.n	800551c <HAL_RCC_OscConfig+0x258>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 0304 	and.w	r3, r3, #4
 8005550:	2b00      	cmp	r3, #0
 8005552:	f000 80a6 	beq.w	80056a2 <HAL_RCC_OscConfig+0x3de>
 8005556:	2300      	movs	r3, #0
 8005558:	75fb      	strb	r3, [r7, #23]
 800555a:	4b94      	ldr	r3, [pc, #592]	; (80057ac <HAL_RCC_OscConfig+0x4e8>)
 800555c:	69db      	ldr	r3, [r3, #28]
 800555e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005562:	2b00      	cmp	r3, #0
 8005564:	d10d      	bne.n	8005582 <HAL_RCC_OscConfig+0x2be>
 8005566:	4b91      	ldr	r3, [pc, #580]	; (80057ac <HAL_RCC_OscConfig+0x4e8>)
 8005568:	69db      	ldr	r3, [r3, #28]
 800556a:	4a90      	ldr	r2, [pc, #576]	; (80057ac <HAL_RCC_OscConfig+0x4e8>)
 800556c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005570:	61d3      	str	r3, [r2, #28]
 8005572:	4b8e      	ldr	r3, [pc, #568]	; (80057ac <HAL_RCC_OscConfig+0x4e8>)
 8005574:	69db      	ldr	r3, [r3, #28]
 8005576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800557a:	60bb      	str	r3, [r7, #8]
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	2301      	movs	r3, #1
 8005580:	75fb      	strb	r3, [r7, #23]
 8005582:	4b8b      	ldr	r3, [pc, #556]	; (80057b0 <HAL_RCC_OscConfig+0x4ec>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800558a:	2b00      	cmp	r3, #0
 800558c:	d118      	bne.n	80055c0 <HAL_RCC_OscConfig+0x2fc>
 800558e:	4b88      	ldr	r3, [pc, #544]	; (80057b0 <HAL_RCC_OscConfig+0x4ec>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a87      	ldr	r2, [pc, #540]	; (80057b0 <HAL_RCC_OscConfig+0x4ec>)
 8005594:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005598:	6013      	str	r3, [r2, #0]
 800559a:	f7fd fe2d 	bl	80031f8 <HAL_GetTick>
 800559e:	6138      	str	r0, [r7, #16]
 80055a0:	e008      	b.n	80055b4 <HAL_RCC_OscConfig+0x2f0>
 80055a2:	f7fd fe29 	bl	80031f8 <HAL_GetTick>
 80055a6:	4602      	mov	r2, r0
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	1ad3      	subs	r3, r2, r3
 80055ac:	2b64      	cmp	r3, #100	; 0x64
 80055ae:	d901      	bls.n	80055b4 <HAL_RCC_OscConfig+0x2f0>
 80055b0:	2303      	movs	r3, #3
 80055b2:	e195      	b.n	80058e0 <HAL_RCC_OscConfig+0x61c>
 80055b4:	4b7e      	ldr	r3, [pc, #504]	; (80057b0 <HAL_RCC_OscConfig+0x4ec>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d0f0      	beq.n	80055a2 <HAL_RCC_OscConfig+0x2de>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	691b      	ldr	r3, [r3, #16]
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d106      	bne.n	80055d6 <HAL_RCC_OscConfig+0x312>
 80055c8:	4b78      	ldr	r3, [pc, #480]	; (80057ac <HAL_RCC_OscConfig+0x4e8>)
 80055ca:	6a1b      	ldr	r3, [r3, #32]
 80055cc:	4a77      	ldr	r2, [pc, #476]	; (80057ac <HAL_RCC_OscConfig+0x4e8>)
 80055ce:	f043 0301 	orr.w	r3, r3, #1
 80055d2:	6213      	str	r3, [r2, #32]
 80055d4:	e02d      	b.n	8005632 <HAL_RCC_OscConfig+0x36e>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d10c      	bne.n	80055f8 <HAL_RCC_OscConfig+0x334>
 80055de:	4b73      	ldr	r3, [pc, #460]	; (80057ac <HAL_RCC_OscConfig+0x4e8>)
 80055e0:	6a1b      	ldr	r3, [r3, #32]
 80055e2:	4a72      	ldr	r2, [pc, #456]	; (80057ac <HAL_RCC_OscConfig+0x4e8>)
 80055e4:	f023 0301 	bic.w	r3, r3, #1
 80055e8:	6213      	str	r3, [r2, #32]
 80055ea:	4b70      	ldr	r3, [pc, #448]	; (80057ac <HAL_RCC_OscConfig+0x4e8>)
 80055ec:	6a1b      	ldr	r3, [r3, #32]
 80055ee:	4a6f      	ldr	r2, [pc, #444]	; (80057ac <HAL_RCC_OscConfig+0x4e8>)
 80055f0:	f023 0304 	bic.w	r3, r3, #4
 80055f4:	6213      	str	r3, [r2, #32]
 80055f6:	e01c      	b.n	8005632 <HAL_RCC_OscConfig+0x36e>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	691b      	ldr	r3, [r3, #16]
 80055fc:	2b05      	cmp	r3, #5
 80055fe:	d10c      	bne.n	800561a <HAL_RCC_OscConfig+0x356>
 8005600:	4b6a      	ldr	r3, [pc, #424]	; (80057ac <HAL_RCC_OscConfig+0x4e8>)
 8005602:	6a1b      	ldr	r3, [r3, #32]
 8005604:	4a69      	ldr	r2, [pc, #420]	; (80057ac <HAL_RCC_OscConfig+0x4e8>)
 8005606:	f043 0304 	orr.w	r3, r3, #4
 800560a:	6213      	str	r3, [r2, #32]
 800560c:	4b67      	ldr	r3, [pc, #412]	; (80057ac <HAL_RCC_OscConfig+0x4e8>)
 800560e:	6a1b      	ldr	r3, [r3, #32]
 8005610:	4a66      	ldr	r2, [pc, #408]	; (80057ac <HAL_RCC_OscConfig+0x4e8>)
 8005612:	f043 0301 	orr.w	r3, r3, #1
 8005616:	6213      	str	r3, [r2, #32]
 8005618:	e00b      	b.n	8005632 <HAL_RCC_OscConfig+0x36e>
 800561a:	4b64      	ldr	r3, [pc, #400]	; (80057ac <HAL_RCC_OscConfig+0x4e8>)
 800561c:	6a1b      	ldr	r3, [r3, #32]
 800561e:	4a63      	ldr	r2, [pc, #396]	; (80057ac <HAL_RCC_OscConfig+0x4e8>)
 8005620:	f023 0301 	bic.w	r3, r3, #1
 8005624:	6213      	str	r3, [r2, #32]
 8005626:	4b61      	ldr	r3, [pc, #388]	; (80057ac <HAL_RCC_OscConfig+0x4e8>)
 8005628:	6a1b      	ldr	r3, [r3, #32]
 800562a:	4a60      	ldr	r2, [pc, #384]	; (80057ac <HAL_RCC_OscConfig+0x4e8>)
 800562c:	f023 0304 	bic.w	r3, r3, #4
 8005630:	6213      	str	r3, [r2, #32]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	691b      	ldr	r3, [r3, #16]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d015      	beq.n	8005666 <HAL_RCC_OscConfig+0x3a2>
 800563a:	f7fd fddd 	bl	80031f8 <HAL_GetTick>
 800563e:	6138      	str	r0, [r7, #16]
 8005640:	e00a      	b.n	8005658 <HAL_RCC_OscConfig+0x394>
 8005642:	f7fd fdd9 	bl	80031f8 <HAL_GetTick>
 8005646:	4602      	mov	r2, r0
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	1ad3      	subs	r3, r2, r3
 800564c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005650:	4293      	cmp	r3, r2
 8005652:	d901      	bls.n	8005658 <HAL_RCC_OscConfig+0x394>
 8005654:	2303      	movs	r3, #3
 8005656:	e143      	b.n	80058e0 <HAL_RCC_OscConfig+0x61c>
 8005658:	4b54      	ldr	r3, [pc, #336]	; (80057ac <HAL_RCC_OscConfig+0x4e8>)
 800565a:	6a1b      	ldr	r3, [r3, #32]
 800565c:	f003 0302 	and.w	r3, r3, #2
 8005660:	2b00      	cmp	r3, #0
 8005662:	d0ee      	beq.n	8005642 <HAL_RCC_OscConfig+0x37e>
 8005664:	e014      	b.n	8005690 <HAL_RCC_OscConfig+0x3cc>
 8005666:	f7fd fdc7 	bl	80031f8 <HAL_GetTick>
 800566a:	6138      	str	r0, [r7, #16]
 800566c:	e00a      	b.n	8005684 <HAL_RCC_OscConfig+0x3c0>
 800566e:	f7fd fdc3 	bl	80031f8 <HAL_GetTick>
 8005672:	4602      	mov	r2, r0
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	1ad3      	subs	r3, r2, r3
 8005678:	f241 3288 	movw	r2, #5000	; 0x1388
 800567c:	4293      	cmp	r3, r2
 800567e:	d901      	bls.n	8005684 <HAL_RCC_OscConfig+0x3c0>
 8005680:	2303      	movs	r3, #3
 8005682:	e12d      	b.n	80058e0 <HAL_RCC_OscConfig+0x61c>
 8005684:	4b49      	ldr	r3, [pc, #292]	; (80057ac <HAL_RCC_OscConfig+0x4e8>)
 8005686:	6a1b      	ldr	r3, [r3, #32]
 8005688:	f003 0302 	and.w	r3, r3, #2
 800568c:	2b00      	cmp	r3, #0
 800568e:	d1ee      	bne.n	800566e <HAL_RCC_OscConfig+0x3aa>
 8005690:	7dfb      	ldrb	r3, [r7, #23]
 8005692:	2b01      	cmp	r3, #1
 8005694:	d105      	bne.n	80056a2 <HAL_RCC_OscConfig+0x3de>
 8005696:	4b45      	ldr	r3, [pc, #276]	; (80057ac <HAL_RCC_OscConfig+0x4e8>)
 8005698:	69db      	ldr	r3, [r3, #28]
 800569a:	4a44      	ldr	r2, [pc, #272]	; (80057ac <HAL_RCC_OscConfig+0x4e8>)
 800569c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056a0:	61d3      	str	r3, [r2, #28]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	f000 808c 	beq.w	80057c4 <HAL_RCC_OscConfig+0x500>
 80056ac:	4b3f      	ldr	r3, [pc, #252]	; (80057ac <HAL_RCC_OscConfig+0x4e8>)
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056b8:	d10e      	bne.n	80056d8 <HAL_RCC_OscConfig+0x414>
 80056ba:	4b3c      	ldr	r3, [pc, #240]	; (80057ac <HAL_RCC_OscConfig+0x4e8>)
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	f003 030c 	and.w	r3, r3, #12
 80056c2:	2b08      	cmp	r3, #8
 80056c4:	d108      	bne.n	80056d8 <HAL_RCC_OscConfig+0x414>
 80056c6:	4b39      	ldr	r3, [pc, #228]	; (80057ac <HAL_RCC_OscConfig+0x4e8>)
 80056c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056d2:	d101      	bne.n	80056d8 <HAL_RCC_OscConfig+0x414>
 80056d4:	2301      	movs	r3, #1
 80056d6:	e103      	b.n	80058e0 <HAL_RCC_OscConfig+0x61c>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056dc:	2b02      	cmp	r3, #2
 80056de:	d14e      	bne.n	800577e <HAL_RCC_OscConfig+0x4ba>
 80056e0:	4b32      	ldr	r3, [pc, #200]	; (80057ac <HAL_RCC_OscConfig+0x4e8>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d009      	beq.n	8005700 <HAL_RCC_OscConfig+0x43c>
 80056ec:	4b2f      	ldr	r3, [pc, #188]	; (80057ac <HAL_RCC_OscConfig+0x4e8>)
 80056ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d001      	beq.n	8005700 <HAL_RCC_OscConfig+0x43c>
 80056fc:	2301      	movs	r3, #1
 80056fe:	e0ef      	b.n	80058e0 <HAL_RCC_OscConfig+0x61c>
 8005700:	4b2c      	ldr	r3, [pc, #176]	; (80057b4 <HAL_RCC_OscConfig+0x4f0>)
 8005702:	2200      	movs	r2, #0
 8005704:	601a      	str	r2, [r3, #0]
 8005706:	f7fd fd77 	bl	80031f8 <HAL_GetTick>
 800570a:	6138      	str	r0, [r7, #16]
 800570c:	e008      	b.n	8005720 <HAL_RCC_OscConfig+0x45c>
 800570e:	f7fd fd73 	bl	80031f8 <HAL_GetTick>
 8005712:	4602      	mov	r2, r0
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	1ad3      	subs	r3, r2, r3
 8005718:	2b64      	cmp	r3, #100	; 0x64
 800571a:	d901      	bls.n	8005720 <HAL_RCC_OscConfig+0x45c>
 800571c:	2303      	movs	r3, #3
 800571e:	e0df      	b.n	80058e0 <HAL_RCC_OscConfig+0x61c>
 8005720:	4b22      	ldr	r3, [pc, #136]	; (80057ac <HAL_RCC_OscConfig+0x4e8>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005728:	2b00      	cmp	r3, #0
 800572a:	d1f0      	bne.n	800570e <HAL_RCC_OscConfig+0x44a>
 800572c:	4b1f      	ldr	r3, [pc, #124]	; (80057ac <HAL_RCC_OscConfig+0x4e8>)
 800572e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005730:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005738:	491c      	ldr	r1, [pc, #112]	; (80057ac <HAL_RCC_OscConfig+0x4e8>)
 800573a:	4313      	orrs	r3, r2
 800573c:	62cb      	str	r3, [r1, #44]	; 0x2c
 800573e:	4b1b      	ldr	r3, [pc, #108]	; (80057ac <HAL_RCC_OscConfig+0x4e8>)
 8005740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005742:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800574a:	4918      	ldr	r1, [pc, #96]	; (80057ac <HAL_RCC_OscConfig+0x4e8>)
 800574c:	4313      	orrs	r3, r2
 800574e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8005750:	4b18      	ldr	r3, [pc, #96]	; (80057b4 <HAL_RCC_OscConfig+0x4f0>)
 8005752:	2201      	movs	r2, #1
 8005754:	601a      	str	r2, [r3, #0]
 8005756:	f7fd fd4f 	bl	80031f8 <HAL_GetTick>
 800575a:	6138      	str	r0, [r7, #16]
 800575c:	e008      	b.n	8005770 <HAL_RCC_OscConfig+0x4ac>
 800575e:	f7fd fd4b 	bl	80031f8 <HAL_GetTick>
 8005762:	4602      	mov	r2, r0
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	1ad3      	subs	r3, r2, r3
 8005768:	2b64      	cmp	r3, #100	; 0x64
 800576a:	d901      	bls.n	8005770 <HAL_RCC_OscConfig+0x4ac>
 800576c:	2303      	movs	r3, #3
 800576e:	e0b7      	b.n	80058e0 <HAL_RCC_OscConfig+0x61c>
 8005770:	4b0e      	ldr	r3, [pc, #56]	; (80057ac <HAL_RCC_OscConfig+0x4e8>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005778:	2b00      	cmp	r3, #0
 800577a:	d0f0      	beq.n	800575e <HAL_RCC_OscConfig+0x49a>
 800577c:	e022      	b.n	80057c4 <HAL_RCC_OscConfig+0x500>
 800577e:	4b0b      	ldr	r3, [pc, #44]	; (80057ac <HAL_RCC_OscConfig+0x4e8>)
 8005780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005782:	4a0a      	ldr	r2, [pc, #40]	; (80057ac <HAL_RCC_OscConfig+0x4e8>)
 8005784:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005788:	62d3      	str	r3, [r2, #44]	; 0x2c
 800578a:	4b0a      	ldr	r3, [pc, #40]	; (80057b4 <HAL_RCC_OscConfig+0x4f0>)
 800578c:	2200      	movs	r2, #0
 800578e:	601a      	str	r2, [r3, #0]
 8005790:	f7fd fd32 	bl	80031f8 <HAL_GetTick>
 8005794:	6138      	str	r0, [r7, #16]
 8005796:	e00f      	b.n	80057b8 <HAL_RCC_OscConfig+0x4f4>
 8005798:	f7fd fd2e 	bl	80031f8 <HAL_GetTick>
 800579c:	4602      	mov	r2, r0
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	1ad3      	subs	r3, r2, r3
 80057a2:	2b64      	cmp	r3, #100	; 0x64
 80057a4:	d908      	bls.n	80057b8 <HAL_RCC_OscConfig+0x4f4>
 80057a6:	2303      	movs	r3, #3
 80057a8:	e09a      	b.n	80058e0 <HAL_RCC_OscConfig+0x61c>
 80057aa:	bf00      	nop
 80057ac:	40021000 	.word	0x40021000
 80057b0:	40007000 	.word	0x40007000
 80057b4:	42420068 	.word	0x42420068
 80057b8:	4b4b      	ldr	r3, [pc, #300]	; (80058e8 <HAL_RCC_OscConfig+0x624>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d1e9      	bne.n	8005798 <HAL_RCC_OscConfig+0x4d4>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6a1b      	ldr	r3, [r3, #32]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	f000 8088 	beq.w	80058de <HAL_RCC_OscConfig+0x61a>
 80057ce:	4b46      	ldr	r3, [pc, #280]	; (80058e8 <HAL_RCC_OscConfig+0x624>)
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	f003 030c 	and.w	r3, r3, #12
 80057d6:	2b08      	cmp	r3, #8
 80057d8:	d068      	beq.n	80058ac <HAL_RCC_OscConfig+0x5e8>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6a1b      	ldr	r3, [r3, #32]
 80057de:	2b02      	cmp	r3, #2
 80057e0:	d14d      	bne.n	800587e <HAL_RCC_OscConfig+0x5ba>
 80057e2:	4b42      	ldr	r3, [pc, #264]	; (80058ec <HAL_RCC_OscConfig+0x628>)
 80057e4:	2200      	movs	r2, #0
 80057e6:	601a      	str	r2, [r3, #0]
 80057e8:	f7fd fd06 	bl	80031f8 <HAL_GetTick>
 80057ec:	6138      	str	r0, [r7, #16]
 80057ee:	e008      	b.n	8005802 <HAL_RCC_OscConfig+0x53e>
 80057f0:	f7fd fd02 	bl	80031f8 <HAL_GetTick>
 80057f4:	4602      	mov	r2, r0
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	1ad3      	subs	r3, r2, r3
 80057fa:	2b02      	cmp	r3, #2
 80057fc:	d901      	bls.n	8005802 <HAL_RCC_OscConfig+0x53e>
 80057fe:	2303      	movs	r3, #3
 8005800:	e06e      	b.n	80058e0 <HAL_RCC_OscConfig+0x61c>
 8005802:	4b39      	ldr	r3, [pc, #228]	; (80058e8 <HAL_RCC_OscConfig+0x624>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800580a:	2b00      	cmp	r3, #0
 800580c:	d1f0      	bne.n	80057f0 <HAL_RCC_OscConfig+0x52c>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005812:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005816:	d10f      	bne.n	8005838 <HAL_RCC_OscConfig+0x574>
 8005818:	4b33      	ldr	r3, [pc, #204]	; (80058e8 <HAL_RCC_OscConfig+0x624>)
 800581a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	4931      	ldr	r1, [pc, #196]	; (80058e8 <HAL_RCC_OscConfig+0x624>)
 8005822:	4313      	orrs	r3, r2
 8005824:	62cb      	str	r3, [r1, #44]	; 0x2c
 8005826:	4b30      	ldr	r3, [pc, #192]	; (80058e8 <HAL_RCC_OscConfig+0x624>)
 8005828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800582a:	f023 020f 	bic.w	r2, r3, #15
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	68db      	ldr	r3, [r3, #12]
 8005832:	492d      	ldr	r1, [pc, #180]	; (80058e8 <HAL_RCC_OscConfig+0x624>)
 8005834:	4313      	orrs	r3, r2
 8005836:	62cb      	str	r3, [r1, #44]	; 0x2c
 8005838:	4b2b      	ldr	r3, [pc, #172]	; (80058e8 <HAL_RCC_OscConfig+0x624>)
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005848:	430b      	orrs	r3, r1
 800584a:	4927      	ldr	r1, [pc, #156]	; (80058e8 <HAL_RCC_OscConfig+0x624>)
 800584c:	4313      	orrs	r3, r2
 800584e:	604b      	str	r3, [r1, #4]
 8005850:	4b26      	ldr	r3, [pc, #152]	; (80058ec <HAL_RCC_OscConfig+0x628>)
 8005852:	2201      	movs	r2, #1
 8005854:	601a      	str	r2, [r3, #0]
 8005856:	f7fd fccf 	bl	80031f8 <HAL_GetTick>
 800585a:	6138      	str	r0, [r7, #16]
 800585c:	e008      	b.n	8005870 <HAL_RCC_OscConfig+0x5ac>
 800585e:	f7fd fccb 	bl	80031f8 <HAL_GetTick>
 8005862:	4602      	mov	r2, r0
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	1ad3      	subs	r3, r2, r3
 8005868:	2b02      	cmp	r3, #2
 800586a:	d901      	bls.n	8005870 <HAL_RCC_OscConfig+0x5ac>
 800586c:	2303      	movs	r3, #3
 800586e:	e037      	b.n	80058e0 <HAL_RCC_OscConfig+0x61c>
 8005870:	4b1d      	ldr	r3, [pc, #116]	; (80058e8 <HAL_RCC_OscConfig+0x624>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005878:	2b00      	cmp	r3, #0
 800587a:	d0f0      	beq.n	800585e <HAL_RCC_OscConfig+0x59a>
 800587c:	e02f      	b.n	80058de <HAL_RCC_OscConfig+0x61a>
 800587e:	4b1b      	ldr	r3, [pc, #108]	; (80058ec <HAL_RCC_OscConfig+0x628>)
 8005880:	2200      	movs	r2, #0
 8005882:	601a      	str	r2, [r3, #0]
 8005884:	f7fd fcb8 	bl	80031f8 <HAL_GetTick>
 8005888:	6138      	str	r0, [r7, #16]
 800588a:	e008      	b.n	800589e <HAL_RCC_OscConfig+0x5da>
 800588c:	f7fd fcb4 	bl	80031f8 <HAL_GetTick>
 8005890:	4602      	mov	r2, r0
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	1ad3      	subs	r3, r2, r3
 8005896:	2b02      	cmp	r3, #2
 8005898:	d901      	bls.n	800589e <HAL_RCC_OscConfig+0x5da>
 800589a:	2303      	movs	r3, #3
 800589c:	e020      	b.n	80058e0 <HAL_RCC_OscConfig+0x61c>
 800589e:	4b12      	ldr	r3, [pc, #72]	; (80058e8 <HAL_RCC_OscConfig+0x624>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d1f0      	bne.n	800588c <HAL_RCC_OscConfig+0x5c8>
 80058aa:	e018      	b.n	80058de <HAL_RCC_OscConfig+0x61a>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6a1b      	ldr	r3, [r3, #32]
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d101      	bne.n	80058b8 <HAL_RCC_OscConfig+0x5f4>
 80058b4:	2301      	movs	r3, #1
 80058b6:	e013      	b.n	80058e0 <HAL_RCC_OscConfig+0x61c>
 80058b8:	4b0b      	ldr	r3, [pc, #44]	; (80058e8 <HAL_RCC_OscConfig+0x624>)
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	60fb      	str	r3, [r7, #12]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d106      	bne.n	80058da <HAL_RCC_OscConfig+0x616>
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d001      	beq.n	80058de <HAL_RCC_OscConfig+0x61a>
 80058da:	2301      	movs	r3, #1
 80058dc:	e000      	b.n	80058e0 <HAL_RCC_OscConfig+0x61c>
 80058de:	2300      	movs	r3, #0
 80058e0:	4618      	mov	r0, r3
 80058e2:	3718      	adds	r7, #24
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}
 80058e8:	40021000 	.word	0x40021000
 80058ec:	42420060 	.word	0x42420060

080058f0 <HAL_RCC_ClockConfig>:
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b084      	sub	sp, #16
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
 80058f8:	6039      	str	r1, [r7, #0]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d101      	bne.n	8005904 <HAL_RCC_ClockConfig+0x14>
 8005900:	2301      	movs	r3, #1
 8005902:	e0d0      	b.n	8005aa6 <HAL_RCC_ClockConfig+0x1b6>
 8005904:	4b6a      	ldr	r3, [pc, #424]	; (8005ab0 <HAL_RCC_ClockConfig+0x1c0>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f003 0307 	and.w	r3, r3, #7
 800590c:	683a      	ldr	r2, [r7, #0]
 800590e:	429a      	cmp	r2, r3
 8005910:	d910      	bls.n	8005934 <HAL_RCC_ClockConfig+0x44>
 8005912:	4b67      	ldr	r3, [pc, #412]	; (8005ab0 <HAL_RCC_ClockConfig+0x1c0>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f023 0207 	bic.w	r2, r3, #7
 800591a:	4965      	ldr	r1, [pc, #404]	; (8005ab0 <HAL_RCC_ClockConfig+0x1c0>)
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	4313      	orrs	r3, r2
 8005920:	600b      	str	r3, [r1, #0]
 8005922:	4b63      	ldr	r3, [pc, #396]	; (8005ab0 <HAL_RCC_ClockConfig+0x1c0>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 0307 	and.w	r3, r3, #7
 800592a:	683a      	ldr	r2, [r7, #0]
 800592c:	429a      	cmp	r2, r3
 800592e:	d001      	beq.n	8005934 <HAL_RCC_ClockConfig+0x44>
 8005930:	2301      	movs	r3, #1
 8005932:	e0b8      	b.n	8005aa6 <HAL_RCC_ClockConfig+0x1b6>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f003 0302 	and.w	r3, r3, #2
 800593c:	2b00      	cmp	r3, #0
 800593e:	d020      	beq.n	8005982 <HAL_RCC_ClockConfig+0x92>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f003 0304 	and.w	r3, r3, #4
 8005948:	2b00      	cmp	r3, #0
 800594a:	d005      	beq.n	8005958 <HAL_RCC_ClockConfig+0x68>
 800594c:	4b59      	ldr	r3, [pc, #356]	; (8005ab4 <HAL_RCC_ClockConfig+0x1c4>)
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	4a58      	ldr	r2, [pc, #352]	; (8005ab4 <HAL_RCC_ClockConfig+0x1c4>)
 8005952:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005956:	6053      	str	r3, [r2, #4]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f003 0308 	and.w	r3, r3, #8
 8005960:	2b00      	cmp	r3, #0
 8005962:	d005      	beq.n	8005970 <HAL_RCC_ClockConfig+0x80>
 8005964:	4b53      	ldr	r3, [pc, #332]	; (8005ab4 <HAL_RCC_ClockConfig+0x1c4>)
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	4a52      	ldr	r2, [pc, #328]	; (8005ab4 <HAL_RCC_ClockConfig+0x1c4>)
 800596a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800596e:	6053      	str	r3, [r2, #4]
 8005970:	4b50      	ldr	r3, [pc, #320]	; (8005ab4 <HAL_RCC_ClockConfig+0x1c4>)
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	494d      	ldr	r1, [pc, #308]	; (8005ab4 <HAL_RCC_ClockConfig+0x1c4>)
 800597e:	4313      	orrs	r3, r2
 8005980:	604b      	str	r3, [r1, #4]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f003 0301 	and.w	r3, r3, #1
 800598a:	2b00      	cmp	r3, #0
 800598c:	d040      	beq.n	8005a10 <HAL_RCC_ClockConfig+0x120>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	2b01      	cmp	r3, #1
 8005994:	d107      	bne.n	80059a6 <HAL_RCC_ClockConfig+0xb6>
 8005996:	4b47      	ldr	r3, [pc, #284]	; (8005ab4 <HAL_RCC_ClockConfig+0x1c4>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d115      	bne.n	80059ce <HAL_RCC_ClockConfig+0xde>
 80059a2:	2301      	movs	r3, #1
 80059a4:	e07f      	b.n	8005aa6 <HAL_RCC_ClockConfig+0x1b6>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	2b02      	cmp	r3, #2
 80059ac:	d107      	bne.n	80059be <HAL_RCC_ClockConfig+0xce>
 80059ae:	4b41      	ldr	r3, [pc, #260]	; (8005ab4 <HAL_RCC_ClockConfig+0x1c4>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d109      	bne.n	80059ce <HAL_RCC_ClockConfig+0xde>
 80059ba:	2301      	movs	r3, #1
 80059bc:	e073      	b.n	8005aa6 <HAL_RCC_ClockConfig+0x1b6>
 80059be:	4b3d      	ldr	r3, [pc, #244]	; (8005ab4 <HAL_RCC_ClockConfig+0x1c4>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f003 0302 	and.w	r3, r3, #2
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d101      	bne.n	80059ce <HAL_RCC_ClockConfig+0xde>
 80059ca:	2301      	movs	r3, #1
 80059cc:	e06b      	b.n	8005aa6 <HAL_RCC_ClockConfig+0x1b6>
 80059ce:	4b39      	ldr	r3, [pc, #228]	; (8005ab4 <HAL_RCC_ClockConfig+0x1c4>)
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	f023 0203 	bic.w	r2, r3, #3
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	4936      	ldr	r1, [pc, #216]	; (8005ab4 <HAL_RCC_ClockConfig+0x1c4>)
 80059dc:	4313      	orrs	r3, r2
 80059de:	604b      	str	r3, [r1, #4]
 80059e0:	f7fd fc0a 	bl	80031f8 <HAL_GetTick>
 80059e4:	60f8      	str	r0, [r7, #12]
 80059e6:	e00a      	b.n	80059fe <HAL_RCC_ClockConfig+0x10e>
 80059e8:	f7fd fc06 	bl	80031f8 <HAL_GetTick>
 80059ec:	4602      	mov	r2, r0
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	1ad3      	subs	r3, r2, r3
 80059f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d901      	bls.n	80059fe <HAL_RCC_ClockConfig+0x10e>
 80059fa:	2303      	movs	r3, #3
 80059fc:	e053      	b.n	8005aa6 <HAL_RCC_ClockConfig+0x1b6>
 80059fe:	4b2d      	ldr	r3, [pc, #180]	; (8005ab4 <HAL_RCC_ClockConfig+0x1c4>)
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	f003 020c 	and.w	r2, r3, #12
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d1eb      	bne.n	80059e8 <HAL_RCC_ClockConfig+0xf8>
 8005a10:	4b27      	ldr	r3, [pc, #156]	; (8005ab0 <HAL_RCC_ClockConfig+0x1c0>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f003 0307 	and.w	r3, r3, #7
 8005a18:	683a      	ldr	r2, [r7, #0]
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d210      	bcs.n	8005a40 <HAL_RCC_ClockConfig+0x150>
 8005a1e:	4b24      	ldr	r3, [pc, #144]	; (8005ab0 <HAL_RCC_ClockConfig+0x1c0>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f023 0207 	bic.w	r2, r3, #7
 8005a26:	4922      	ldr	r1, [pc, #136]	; (8005ab0 <HAL_RCC_ClockConfig+0x1c0>)
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	600b      	str	r3, [r1, #0]
 8005a2e:	4b20      	ldr	r3, [pc, #128]	; (8005ab0 <HAL_RCC_ClockConfig+0x1c0>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f003 0307 	and.w	r3, r3, #7
 8005a36:	683a      	ldr	r2, [r7, #0]
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d001      	beq.n	8005a40 <HAL_RCC_ClockConfig+0x150>
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	e032      	b.n	8005aa6 <HAL_RCC_ClockConfig+0x1b6>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f003 0304 	and.w	r3, r3, #4
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d008      	beq.n	8005a5e <HAL_RCC_ClockConfig+0x16e>
 8005a4c:	4b19      	ldr	r3, [pc, #100]	; (8005ab4 <HAL_RCC_ClockConfig+0x1c4>)
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	68db      	ldr	r3, [r3, #12]
 8005a58:	4916      	ldr	r1, [pc, #88]	; (8005ab4 <HAL_RCC_ClockConfig+0x1c4>)
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	604b      	str	r3, [r1, #4]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f003 0308 	and.w	r3, r3, #8
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d009      	beq.n	8005a7e <HAL_RCC_ClockConfig+0x18e>
 8005a6a:	4b12      	ldr	r3, [pc, #72]	; (8005ab4 <HAL_RCC_ClockConfig+0x1c4>)
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	691b      	ldr	r3, [r3, #16]
 8005a76:	00db      	lsls	r3, r3, #3
 8005a78:	490e      	ldr	r1, [pc, #56]	; (8005ab4 <HAL_RCC_ClockConfig+0x1c4>)
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	604b      	str	r3, [r1, #4]
 8005a7e:	f000 f821 	bl	8005ac4 <HAL_RCC_GetSysClockFreq>
 8005a82:	4602      	mov	r2, r0
 8005a84:	4b0b      	ldr	r3, [pc, #44]	; (8005ab4 <HAL_RCC_ClockConfig+0x1c4>)
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	091b      	lsrs	r3, r3, #4
 8005a8a:	f003 030f 	and.w	r3, r3, #15
 8005a8e:	490a      	ldr	r1, [pc, #40]	; (8005ab8 <HAL_RCC_ClockConfig+0x1c8>)
 8005a90:	5ccb      	ldrb	r3, [r1, r3]
 8005a92:	fa22 f303 	lsr.w	r3, r2, r3
 8005a96:	4a09      	ldr	r2, [pc, #36]	; (8005abc <HAL_RCC_ClockConfig+0x1cc>)
 8005a98:	6013      	str	r3, [r2, #0]
 8005a9a:	4b09      	ldr	r3, [pc, #36]	; (8005ac0 <HAL_RCC_ClockConfig+0x1d0>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f7fd fb68 	bl	8003174 <HAL_InitTick>
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3710      	adds	r7, #16
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}
 8005aae:	bf00      	nop
 8005ab0:	40022000 	.word	0x40022000
 8005ab4:	40021000 	.word	0x40021000
 8005ab8:	0800b3c0 	.word	0x0800b3c0
 8005abc:	20000084 	.word	0x20000084
 8005ac0:	20000088 	.word	0x20000088

08005ac4 <HAL_RCC_GetSysClockFreq>:
 8005ac4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ac8:	b08e      	sub	sp, #56	; 0x38
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	2300      	movs	r3, #0
 8005ace:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	637b      	str	r3, [r7, #52]	; 0x34
 8005ad8:	2300      	movs	r3, #0
 8005ada:	627b      	str	r3, [r7, #36]	; 0x24
 8005adc:	2300      	movs	r3, #0
 8005ade:	633b      	str	r3, [r7, #48]	; 0x30
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	623b      	str	r3, [r7, #32]
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	61fb      	str	r3, [r7, #28]
 8005ae8:	4b4e      	ldr	r3, [pc, #312]	; (8005c24 <HAL_RCC_GetSysClockFreq+0x160>)
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005af0:	f003 030c 	and.w	r3, r3, #12
 8005af4:	2b04      	cmp	r3, #4
 8005af6:	d002      	beq.n	8005afe <HAL_RCC_GetSysClockFreq+0x3a>
 8005af8:	2b08      	cmp	r3, #8
 8005afa:	d003      	beq.n	8005b04 <HAL_RCC_GetSysClockFreq+0x40>
 8005afc:	e089      	b.n	8005c12 <HAL_RCC_GetSysClockFreq+0x14e>
 8005afe:	4b4a      	ldr	r3, [pc, #296]	; (8005c28 <HAL_RCC_GetSysClockFreq+0x164>)
 8005b00:	633b      	str	r3, [r7, #48]	; 0x30
 8005b02:	e089      	b.n	8005c18 <HAL_RCC_GetSysClockFreq+0x154>
 8005b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b06:	0c9b      	lsrs	r3, r3, #18
 8005b08:	f003 020f 	and.w	r2, r3, #15
 8005b0c:	4b47      	ldr	r3, [pc, #284]	; (8005c2c <HAL_RCC_GetSysClockFreq+0x168>)
 8005b0e:	5c9b      	ldrb	r3, [r3, r2]
 8005b10:	627b      	str	r3, [r7, #36]	; 0x24
 8005b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d072      	beq.n	8005c02 <HAL_RCC_GetSysClockFreq+0x13e>
 8005b1c:	4b41      	ldr	r3, [pc, #260]	; (8005c24 <HAL_RCC_GetSysClockFreq+0x160>)
 8005b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b20:	f003 020f 	and.w	r2, r3, #15
 8005b24:	4b42      	ldr	r3, [pc, #264]	; (8005c30 <HAL_RCC_GetSysClockFreq+0x16c>)
 8005b26:	5c9b      	ldrb	r3, [r3, r2]
 8005b28:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b2a:	4b3e      	ldr	r3, [pc, #248]	; (8005c24 <HAL_RCC_GetSysClockFreq+0x160>)
 8005b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d053      	beq.n	8005bde <HAL_RCC_GetSysClockFreq+0x11a>
 8005b36:	4b3b      	ldr	r3, [pc, #236]	; (8005c24 <HAL_RCC_GetSysClockFreq+0x160>)
 8005b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b3a:	091b      	lsrs	r3, r3, #4
 8005b3c:	f003 030f 	and.w	r3, r3, #15
 8005b40:	3301      	adds	r3, #1
 8005b42:	623b      	str	r3, [r7, #32]
 8005b44:	4b37      	ldr	r3, [pc, #220]	; (8005c24 <HAL_RCC_GetSysClockFreq+0x160>)
 8005b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b48:	0a1b      	lsrs	r3, r3, #8
 8005b4a:	f003 030f 	and.w	r3, r3, #15
 8005b4e:	3302      	adds	r3, #2
 8005b50:	61fb      	str	r3, [r7, #28]
 8005b52:	69fb      	ldr	r3, [r7, #28]
 8005b54:	2200      	movs	r2, #0
 8005b56:	469a      	mov	sl, r3
 8005b58:	4693      	mov	fp, r2
 8005b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	613b      	str	r3, [r7, #16]
 8005b60:	617a      	str	r2, [r7, #20]
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	fb03 f20b 	mul.w	r2, r3, fp
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	fb0a f303 	mul.w	r3, sl, r3
 8005b6e:	4413      	add	r3, r2
 8005b70:	693a      	ldr	r2, [r7, #16]
 8005b72:	fbaa 0102 	umull	r0, r1, sl, r2
 8005b76:	440b      	add	r3, r1
 8005b78:	4619      	mov	r1, r3
 8005b7a:	4b2b      	ldr	r3, [pc, #172]	; (8005c28 <HAL_RCC_GetSysClockFreq+0x164>)
 8005b7c:	fb03 f201 	mul.w	r2, r3, r1
 8005b80:	2300      	movs	r3, #0
 8005b82:	fb00 f303 	mul.w	r3, r0, r3
 8005b86:	4413      	add	r3, r2
 8005b88:	4a27      	ldr	r2, [pc, #156]	; (8005c28 <HAL_RCC_GetSysClockFreq+0x164>)
 8005b8a:	fba0 4502 	umull	r4, r5, r0, r2
 8005b8e:	442b      	add	r3, r5
 8005b90:	461d      	mov	r5, r3
 8005b92:	6a3b      	ldr	r3, [r7, #32]
 8005b94:	2200      	movs	r2, #0
 8005b96:	60bb      	str	r3, [r7, #8]
 8005b98:	60fa      	str	r2, [r7, #12]
 8005b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	603b      	str	r3, [r7, #0]
 8005ba0:	607a      	str	r2, [r7, #4]
 8005ba2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005ba6:	460b      	mov	r3, r1
 8005ba8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005bac:	4652      	mov	r2, sl
 8005bae:	fb02 f203 	mul.w	r2, r2, r3
 8005bb2:	465b      	mov	r3, fp
 8005bb4:	4684      	mov	ip, r0
 8005bb6:	fb0c f303 	mul.w	r3, ip, r3
 8005bba:	4413      	add	r3, r2
 8005bbc:	4602      	mov	r2, r0
 8005bbe:	4651      	mov	r1, sl
 8005bc0:	fba2 8901 	umull	r8, r9, r2, r1
 8005bc4:	444b      	add	r3, r9
 8005bc6:	4699      	mov	r9, r3
 8005bc8:	4642      	mov	r2, r8
 8005bca:	464b      	mov	r3, r9
 8005bcc:	4620      	mov	r0, r4
 8005bce:	4629      	mov	r1, r5
 8005bd0:	f7fb fa6c 	bl	80010ac <__aeabi_uldivmod>
 8005bd4:	4602      	mov	r2, r0
 8005bd6:	460b      	mov	r3, r1
 8005bd8:	4613      	mov	r3, r2
 8005bda:	637b      	str	r3, [r7, #52]	; 0x34
 8005bdc:	e007      	b.n	8005bee <HAL_RCC_GetSysClockFreq+0x12a>
 8005bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be0:	4a11      	ldr	r2, [pc, #68]	; (8005c28 <HAL_RCC_GetSysClockFreq+0x164>)
 8005be2:	fb03 f202 	mul.w	r2, r3, r2
 8005be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bec:	637b      	str	r3, [r7, #52]	; 0x34
 8005bee:	4b0f      	ldr	r3, [pc, #60]	; (8005c2c <HAL_RCC_GetSysClockFreq+0x168>)
 8005bf0:	7b5b      	ldrb	r3, [r3, #13]
 8005bf2:	461a      	mov	r2, r3
 8005bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d108      	bne.n	8005c0c <HAL_RCC_GetSysClockFreq+0x148>
 8005bfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bfc:	085b      	lsrs	r3, r3, #1
 8005bfe:	637b      	str	r3, [r7, #52]	; 0x34
 8005c00:	e004      	b.n	8005c0c <HAL_RCC_GetSysClockFreq+0x148>
 8005c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c04:	4a0b      	ldr	r2, [pc, #44]	; (8005c34 <HAL_RCC_GetSysClockFreq+0x170>)
 8005c06:	fb02 f303 	mul.w	r3, r2, r3
 8005c0a:	637b      	str	r3, [r7, #52]	; 0x34
 8005c0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c0e:	633b      	str	r3, [r7, #48]	; 0x30
 8005c10:	e002      	b.n	8005c18 <HAL_RCC_GetSysClockFreq+0x154>
 8005c12:	4b09      	ldr	r3, [pc, #36]	; (8005c38 <HAL_RCC_GetSysClockFreq+0x174>)
 8005c14:	633b      	str	r3, [r7, #48]	; 0x30
 8005c16:	bf00      	nop
 8005c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3738      	adds	r7, #56	; 0x38
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c24:	40021000 	.word	0x40021000
 8005c28:	017d7840 	.word	0x017d7840
 8005c2c:	0800b3d0 	.word	0x0800b3d0
 8005c30:	0800b3e0 	.word	0x0800b3e0
 8005c34:	003d0900 	.word	0x003d0900
 8005c38:	007a1200 	.word	0x007a1200

08005c3c <HAL_RCC_GetHCLKFreq>:
 8005c3c:	b480      	push	{r7}
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	4b02      	ldr	r3, [pc, #8]	; (8005c4c <HAL_RCC_GetHCLKFreq+0x10>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4618      	mov	r0, r3
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bc80      	pop	{r7}
 8005c4a:	4770      	bx	lr
 8005c4c:	20000084 	.word	0x20000084

08005c50 <RCC_Delay>:
 8005c50:	b480      	push	{r7}
 8005c52:	b085      	sub	sp, #20
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	4b0a      	ldr	r3, [pc, #40]	; (8005c84 <RCC_Delay+0x34>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a0a      	ldr	r2, [pc, #40]	; (8005c88 <RCC_Delay+0x38>)
 8005c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c62:	0a5b      	lsrs	r3, r3, #9
 8005c64:	687a      	ldr	r2, [r7, #4]
 8005c66:	fb02 f303 	mul.w	r3, r2, r3
 8005c6a:	60fb      	str	r3, [r7, #12]
 8005c6c:	bf00      	nop
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	1e5a      	subs	r2, r3, #1
 8005c72:	60fa      	str	r2, [r7, #12]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d1f9      	bne.n	8005c6c <RCC_Delay+0x1c>
 8005c78:	bf00      	nop
 8005c7a:	bf00      	nop
 8005c7c:	3714      	adds	r7, #20
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bc80      	pop	{r7}
 8005c82:	4770      	bx	lr
 8005c84:	20000084 	.word	0x20000084
 8005c88:	10624dd3 	.word	0x10624dd3

08005c8c <HAL_RCCEx_PeriphCLKConfig>:
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b088      	sub	sp, #32
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	2300      	movs	r3, #0
 8005c96:	617b      	str	r3, [r7, #20]
 8005c98:	2300      	movs	r3, #0
 8005c9a:	613b      	str	r3, [r7, #16]
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	61fb      	str	r3, [r7, #28]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f003 0301 	and.w	r3, r3, #1
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d07d      	beq.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8005cac:	2300      	movs	r3, #0
 8005cae:	76fb      	strb	r3, [r7, #27]
 8005cb0:	4b8b      	ldr	r3, [pc, #556]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005cb2:	69db      	ldr	r3, [r3, #28]
 8005cb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d10d      	bne.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x4c>
 8005cbc:	4b88      	ldr	r3, [pc, #544]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005cbe:	69db      	ldr	r3, [r3, #28]
 8005cc0:	4a87      	ldr	r2, [pc, #540]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005cc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cc6:	61d3      	str	r3, [r2, #28]
 8005cc8:	4b85      	ldr	r3, [pc, #532]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005cca:	69db      	ldr	r3, [r3, #28]
 8005ccc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cd0:	60fb      	str	r3, [r7, #12]
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	76fb      	strb	r3, [r7, #27]
 8005cd8:	4b82      	ldr	r3, [pc, #520]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d118      	bne.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8005ce4:	4b7f      	ldr	r3, [pc, #508]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a7e      	ldr	r2, [pc, #504]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005cea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cee:	6013      	str	r3, [r2, #0]
 8005cf0:	f7fd fa82 	bl	80031f8 <HAL_GetTick>
 8005cf4:	6178      	str	r0, [r7, #20]
 8005cf6:	e008      	b.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x7e>
 8005cf8:	f7fd fa7e 	bl	80031f8 <HAL_GetTick>
 8005cfc:	4602      	mov	r2, r0
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	1ad3      	subs	r3, r2, r3
 8005d02:	2b64      	cmp	r3, #100	; 0x64
 8005d04:	d901      	bls.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x7e>
 8005d06:	2303      	movs	r3, #3
 8005d08:	e0e5      	b.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8005d0a:	4b76      	ldr	r3, [pc, #472]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d0f0      	beq.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8005d16:	4b72      	ldr	r3, [pc, #456]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005d18:	6a1b      	ldr	r3, [r3, #32]
 8005d1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d1e:	613b      	str	r3, [r7, #16]
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d02e      	beq.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0xf8>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d2e:	693a      	ldr	r2, [r7, #16]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d027      	beq.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0xf8>
 8005d34:	4b6a      	ldr	r3, [pc, #424]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005d36:	6a1b      	ldr	r3, [r3, #32]
 8005d38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d3c:	613b      	str	r3, [r7, #16]
 8005d3e:	4b6a      	ldr	r3, [pc, #424]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005d40:	2201      	movs	r2, #1
 8005d42:	601a      	str	r2, [r3, #0]
 8005d44:	4b68      	ldr	r3, [pc, #416]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005d46:	2200      	movs	r2, #0
 8005d48:	601a      	str	r2, [r3, #0]
 8005d4a:	4a65      	ldr	r2, [pc, #404]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	6213      	str	r3, [r2, #32]
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	f003 0301 	and.w	r3, r3, #1
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d014      	beq.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0xf8>
 8005d5a:	f7fd fa4d 	bl	80031f8 <HAL_GetTick>
 8005d5e:	6178      	str	r0, [r7, #20]
 8005d60:	e00a      	b.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005d62:	f7fd fa49 	bl	80031f8 <HAL_GetTick>
 8005d66:	4602      	mov	r2, r0
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	1ad3      	subs	r3, r2, r3
 8005d6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d901      	bls.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005d74:	2303      	movs	r3, #3
 8005d76:	e0ae      	b.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8005d78:	4b59      	ldr	r3, [pc, #356]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005d7a:	6a1b      	ldr	r3, [r3, #32]
 8005d7c:	f003 0302 	and.w	r3, r3, #2
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d0ee      	beq.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0xd6>
 8005d84:	4b56      	ldr	r3, [pc, #344]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005d86:	6a1b      	ldr	r3, [r3, #32]
 8005d88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	4953      	ldr	r1, [pc, #332]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005d92:	4313      	orrs	r3, r2
 8005d94:	620b      	str	r3, [r1, #32]
 8005d96:	7efb      	ldrb	r3, [r7, #27]
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d105      	bne.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8005d9c:	4b50      	ldr	r3, [pc, #320]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005d9e:	69db      	ldr	r3, [r3, #28]
 8005da0:	4a4f      	ldr	r2, [pc, #316]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005da2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005da6:	61d3      	str	r3, [r2, #28]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f003 0302 	and.w	r3, r3, #2
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d008      	beq.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
 8005db4:	4b4a      	ldr	r3, [pc, #296]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	4947      	ldr	r1, [pc, #284]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	604b      	str	r3, [r1, #4]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f003 0304 	and.w	r3, r3, #4
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d008      	beq.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8005dd2:	4b43      	ldr	r3, [pc, #268]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	68db      	ldr	r3, [r3, #12]
 8005dde:	4940      	ldr	r1, [pc, #256]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005de0:	4313      	orrs	r3, r2
 8005de2:	62cb      	str	r3, [r1, #44]	; 0x2c
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f003 0308 	and.w	r3, r3, #8
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d008      	beq.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x176>
 8005df0:	4b3b      	ldr	r3, [pc, #236]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	691b      	ldr	r3, [r3, #16]
 8005dfc:	4938      	ldr	r1, [pc, #224]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	62cb      	str	r3, [r1, #44]	; 0x2c
 8005e02:	4b37      	ldr	r3, [pc, #220]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d105      	bne.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x18e>
 8005e0e:	4b34      	ldr	r3, [pc, #208]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d001      	beq.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	61fb      	str	r3, [r7, #28]
 8005e1e:	69fb      	ldr	r3, [r7, #28]
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d148      	bne.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005e24:	4b2e      	ldr	r3, [pc, #184]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d138      	bne.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x216>
 8005e30:	4b2b      	ldr	r3, [pc, #172]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d009      	beq.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
 8005e3c:	4b28      	ldr	r3, [pc, #160]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e40:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	699b      	ldr	r3, [r3, #24]
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d001      	beq.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	e042      	b.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8005e50:	4b23      	ldr	r3, [pc, #140]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	699b      	ldr	r3, [r3, #24]
 8005e5c:	4920      	ldr	r1, [pc, #128]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	62cb      	str	r3, [r1, #44]	; 0x2c
 8005e62:	4b1f      	ldr	r3, [pc, #124]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e66:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	695b      	ldr	r3, [r3, #20]
 8005e6e:	491c      	ldr	r1, [pc, #112]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005e70:	4313      	orrs	r3, r2
 8005e72:	62cb      	str	r3, [r1, #44]	; 0x2c
 8005e74:	4b1d      	ldr	r3, [pc, #116]	; (8005eec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e76:	2201      	movs	r2, #1
 8005e78:	601a      	str	r2, [r3, #0]
 8005e7a:	f7fd f9bd 	bl	80031f8 <HAL_GetTick>
 8005e7e:	6178      	str	r0, [r7, #20]
 8005e80:	e008      	b.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8005e82:	f7fd f9b9 	bl	80031f8 <HAL_GetTick>
 8005e86:	4602      	mov	r2, r0
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	1ad3      	subs	r3, r2, r3
 8005e8c:	2b64      	cmp	r3, #100	; 0x64
 8005e8e:	d901      	bls.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8005e90:	2303      	movs	r3, #3
 8005e92:	e020      	b.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8005e94:	4b12      	ldr	r3, [pc, #72]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d0f0      	beq.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8005ea0:	e009      	b.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005ea2:	4b0f      	ldr	r3, [pc, #60]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea6:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	695b      	ldr	r3, [r3, #20]
 8005eae:	429a      	cmp	r2, r3
 8005eb0:	d001      	beq.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	e00f      	b.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f003 0310 	and.w	r3, r3, #16
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d008      	beq.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x248>
 8005ec2:	4b07      	ldr	r3, [pc, #28]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	69db      	ldr	r3, [r3, #28]
 8005ece:	4904      	ldr	r1, [pc, #16]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	604b      	str	r3, [r1, #4]
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3720      	adds	r7, #32
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}
 8005ede:	bf00      	nop
 8005ee0:	40021000 	.word	0x40021000
 8005ee4:	40007000 	.word	0x40007000
 8005ee8:	42420440 	.word	0x42420440
 8005eec:	42420070 	.word	0x42420070

08005ef0 <HAL_SPI_Init>:
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b082      	sub	sp, #8
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d101      	bne.n	8005f02 <HAL_SPI_Init+0x12>
 8005efe:	2301      	movs	r3, #1
 8005f00:	e076      	b.n	8005ff0 <HAL_SPI_Init+0x100>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d108      	bne.n	8005f1c <HAL_SPI_Init+0x2c>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f12:	d009      	beq.n	8005f28 <HAL_SPI_Init+0x38>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2200      	movs	r2, #0
 8005f18:	61da      	str	r2, [r3, #28]
 8005f1a:	e005      	b.n	8005f28 <HAL_SPI_Init+0x38>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	611a      	str	r2, [r3, #16]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2200      	movs	r2, #0
 8005f26:	615a      	str	r2, [r3, #20]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	629a      	str	r2, [r3, #40]	; 0x28
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f34:	b2db      	uxtb	r3, r3
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d106      	bne.n	8005f48 <HAL_SPI_Init+0x58>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f7fc ff84 	bl	8002e50 <HAL_SPI_MspInit>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2202      	movs	r2, #2
 8005f4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f5e:	601a      	str	r2, [r3, #0]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005f70:	431a      	orrs	r2, r3
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	68db      	ldr	r3, [r3, #12]
 8005f76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f7a:	431a      	orrs	r2, r3
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	691b      	ldr	r3, [r3, #16]
 8005f80:	f003 0302 	and.w	r3, r3, #2
 8005f84:	431a      	orrs	r2, r3
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	695b      	ldr	r3, [r3, #20]
 8005f8a:	f003 0301 	and.w	r3, r3, #1
 8005f8e:	431a      	orrs	r2, r3
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	699b      	ldr	r3, [r3, #24]
 8005f94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f98:	431a      	orrs	r2, r3
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	69db      	ldr	r3, [r3, #28]
 8005f9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005fa2:	431a      	orrs	r2, r3
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6a1b      	ldr	r3, [r3, #32]
 8005fa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fac:	ea42 0103 	orr.w	r1, r2, r3
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fb4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	430a      	orrs	r2, r1
 8005fbe:	601a      	str	r2, [r3, #0]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	699b      	ldr	r3, [r3, #24]
 8005fc4:	0c1a      	lsrs	r2, r3, #16
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f002 0204 	and.w	r2, r2, #4
 8005fce:	605a      	str	r2, [r3, #4]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	69da      	ldr	r2, [r3, #28]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005fde:	61da      	str	r2, [r3, #28]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	655a      	str	r2, [r3, #84]	; 0x54
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2201      	movs	r2, #1
 8005fea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8005fee:	2300      	movs	r3, #0
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3708      	adds	r7, #8
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}

08005ff8 <HAL_SPI_Transmit>:
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b088      	sub	sp, #32
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	60f8      	str	r0, [r7, #12]
 8006000:	60b9      	str	r1, [r7, #8]
 8006002:	603b      	str	r3, [r7, #0]
 8006004:	4613      	mov	r3, r2
 8006006:	80fb      	strh	r3, [r7, #6]
 8006008:	2300      	movs	r3, #0
 800600a:	77fb      	strb	r3, [r7, #31]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006012:	2b01      	cmp	r3, #1
 8006014:	d101      	bne.n	800601a <HAL_SPI_Transmit+0x22>
 8006016:	2302      	movs	r3, #2
 8006018:	e12d      	b.n	8006276 <HAL_SPI_Transmit+0x27e>
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2201      	movs	r2, #1
 800601e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8006022:	f7fd f8e9 	bl	80031f8 <HAL_GetTick>
 8006026:	61b8      	str	r0, [r7, #24]
 8006028:	88fb      	ldrh	r3, [r7, #6]
 800602a:	82fb      	strh	r3, [r7, #22]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006032:	b2db      	uxtb	r3, r3
 8006034:	2b01      	cmp	r3, #1
 8006036:	d002      	beq.n	800603e <HAL_SPI_Transmit+0x46>
 8006038:	2302      	movs	r3, #2
 800603a:	77fb      	strb	r3, [r7, #31]
 800603c:	e116      	b.n	800626c <HAL_SPI_Transmit+0x274>
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d002      	beq.n	800604a <HAL_SPI_Transmit+0x52>
 8006044:	88fb      	ldrh	r3, [r7, #6]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d102      	bne.n	8006050 <HAL_SPI_Transmit+0x58>
 800604a:	2301      	movs	r3, #1
 800604c:	77fb      	strb	r3, [r7, #31]
 800604e:	e10d      	b.n	800626c <HAL_SPI_Transmit+0x274>
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2203      	movs	r2, #3
 8006054:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2200      	movs	r2, #0
 800605c:	655a      	str	r2, [r3, #84]	; 0x54
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	68ba      	ldr	r2, [r7, #8]
 8006062:	631a      	str	r2, [r3, #48]	; 0x30
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	88fa      	ldrh	r2, [r7, #6]
 8006068:	869a      	strh	r2, [r3, #52]	; 0x34
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	88fa      	ldrh	r2, [r7, #6]
 800606e:	86da      	strh	r2, [r3, #54]	; 0x36
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2200      	movs	r2, #0
 8006074:	639a      	str	r2, [r3, #56]	; 0x38
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2200      	movs	r2, #0
 800607a:	879a      	strh	r2, [r3, #60]	; 0x3c
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2200      	movs	r2, #0
 8006080:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2200      	movs	r2, #0
 8006086:	645a      	str	r2, [r3, #68]	; 0x44
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2200      	movs	r2, #0
 800608c:	641a      	str	r2, [r3, #64]	; 0x40
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006096:	d10f      	bne.n	80060b8 <HAL_SPI_Transmit+0xc0>
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060a6:	601a      	str	r2, [r3, #0]
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	681a      	ldr	r2, [r3, #0]
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80060b6:	601a      	str	r2, [r3, #0]
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060c2:	2b40      	cmp	r3, #64	; 0x40
 80060c4:	d007      	beq.n	80060d6 <HAL_SPI_Transmit+0xde>
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060d4:	601a      	str	r2, [r3, #0]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	68db      	ldr	r3, [r3, #12]
 80060da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060de:	d14f      	bne.n	8006180 <HAL_SPI_Transmit+0x188>
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d002      	beq.n	80060ee <HAL_SPI_Transmit+0xf6>
 80060e8:	8afb      	ldrh	r3, [r7, #22]
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d142      	bne.n	8006174 <HAL_SPI_Transmit+0x17c>
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060f2:	881a      	ldrh	r2, [r3, #0]
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	60da      	str	r2, [r3, #12]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060fe:	1c9a      	adds	r2, r3, #2
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	631a      	str	r2, [r3, #48]	; 0x30
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006108:	b29b      	uxth	r3, r3
 800610a:	3b01      	subs	r3, #1
 800610c:	b29a      	uxth	r2, r3
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	86da      	strh	r2, [r3, #54]	; 0x36
 8006112:	e02f      	b.n	8006174 <HAL_SPI_Transmit+0x17c>
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	f003 0302 	and.w	r3, r3, #2
 800611e:	2b02      	cmp	r3, #2
 8006120:	d112      	bne.n	8006148 <HAL_SPI_Transmit+0x150>
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006126:	881a      	ldrh	r2, [r3, #0]
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	60da      	str	r2, [r3, #12]
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006132:	1c9a      	adds	r2, r3, #2
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	631a      	str	r2, [r3, #48]	; 0x30
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800613c:	b29b      	uxth	r3, r3
 800613e:	3b01      	subs	r3, #1
 8006140:	b29a      	uxth	r2, r3
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	86da      	strh	r2, [r3, #54]	; 0x36
 8006146:	e015      	b.n	8006174 <HAL_SPI_Transmit+0x17c>
 8006148:	f7fd f856 	bl	80031f8 <HAL_GetTick>
 800614c:	4602      	mov	r2, r0
 800614e:	69bb      	ldr	r3, [r7, #24]
 8006150:	1ad3      	subs	r3, r2, r3
 8006152:	683a      	ldr	r2, [r7, #0]
 8006154:	429a      	cmp	r2, r3
 8006156:	d803      	bhi.n	8006160 <HAL_SPI_Transmit+0x168>
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800615e:	d102      	bne.n	8006166 <HAL_SPI_Transmit+0x16e>
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d106      	bne.n	8006174 <HAL_SPI_Transmit+0x17c>
 8006166:	2303      	movs	r3, #3
 8006168:	77fb      	strb	r3, [r7, #31]
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2201      	movs	r2, #1
 800616e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8006172:	e07b      	b.n	800626c <HAL_SPI_Transmit+0x274>
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006178:	b29b      	uxth	r3, r3
 800617a:	2b00      	cmp	r3, #0
 800617c:	d1ca      	bne.n	8006114 <HAL_SPI_Transmit+0x11c>
 800617e:	e050      	b.n	8006222 <HAL_SPI_Transmit+0x22a>
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d002      	beq.n	800618e <HAL_SPI_Transmit+0x196>
 8006188:	8afb      	ldrh	r3, [r7, #22]
 800618a:	2b01      	cmp	r3, #1
 800618c:	d144      	bne.n	8006218 <HAL_SPI_Transmit+0x220>
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	330c      	adds	r3, #12
 8006198:	7812      	ldrb	r2, [r2, #0]
 800619a:	701a      	strb	r2, [r3, #0]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061a0:	1c5a      	adds	r2, r3, #1
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	631a      	str	r2, [r3, #48]	; 0x30
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	3b01      	subs	r3, #1
 80061ae:	b29a      	uxth	r2, r3
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	86da      	strh	r2, [r3, #54]	; 0x36
 80061b4:	e030      	b.n	8006218 <HAL_SPI_Transmit+0x220>
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	f003 0302 	and.w	r3, r3, #2
 80061c0:	2b02      	cmp	r3, #2
 80061c2:	d113      	bne.n	80061ec <HAL_SPI_Transmit+0x1f4>
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	330c      	adds	r3, #12
 80061ce:	7812      	ldrb	r2, [r2, #0]
 80061d0:	701a      	strb	r2, [r3, #0]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061d6:	1c5a      	adds	r2, r3, #1
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	631a      	str	r2, [r3, #48]	; 0x30
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	3b01      	subs	r3, #1
 80061e4:	b29a      	uxth	r2, r3
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	86da      	strh	r2, [r3, #54]	; 0x36
 80061ea:	e015      	b.n	8006218 <HAL_SPI_Transmit+0x220>
 80061ec:	f7fd f804 	bl	80031f8 <HAL_GetTick>
 80061f0:	4602      	mov	r2, r0
 80061f2:	69bb      	ldr	r3, [r7, #24]
 80061f4:	1ad3      	subs	r3, r2, r3
 80061f6:	683a      	ldr	r2, [r7, #0]
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d803      	bhi.n	8006204 <HAL_SPI_Transmit+0x20c>
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006202:	d102      	bne.n	800620a <HAL_SPI_Transmit+0x212>
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d106      	bne.n	8006218 <HAL_SPI_Transmit+0x220>
 800620a:	2303      	movs	r3, #3
 800620c:	77fb      	strb	r3, [r7, #31]
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2201      	movs	r2, #1
 8006212:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8006216:	e029      	b.n	800626c <HAL_SPI_Transmit+0x274>
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800621c:	b29b      	uxth	r3, r3
 800621e:	2b00      	cmp	r3, #0
 8006220:	d1c9      	bne.n	80061b6 <HAL_SPI_Transmit+0x1be>
 8006222:	69ba      	ldr	r2, [r7, #24]
 8006224:	6839      	ldr	r1, [r7, #0]
 8006226:	68f8      	ldr	r0, [r7, #12]
 8006228:	f000 fbcc 	bl	80069c4 <SPI_EndRxTxTransaction>
 800622c:	4603      	mov	r3, r0
 800622e:	2b00      	cmp	r3, #0
 8006230:	d002      	beq.n	8006238 <HAL_SPI_Transmit+0x240>
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2220      	movs	r2, #32
 8006236:	655a      	str	r2, [r3, #84]	; 0x54
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d10a      	bne.n	8006256 <HAL_SPI_Transmit+0x25e>
 8006240:	2300      	movs	r3, #0
 8006242:	613b      	str	r3, [r7, #16]
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	68db      	ldr	r3, [r3, #12]
 800624a:	613b      	str	r3, [r7, #16]
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	689b      	ldr	r3, [r3, #8]
 8006252:	613b      	str	r3, [r7, #16]
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800625a:	2b00      	cmp	r3, #0
 800625c:	d002      	beq.n	8006264 <HAL_SPI_Transmit+0x26c>
 800625e:	2301      	movs	r3, #1
 8006260:	77fb      	strb	r3, [r7, #31]
 8006262:	e003      	b.n	800626c <HAL_SPI_Transmit+0x274>
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2201      	movs	r2, #1
 8006268:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2200      	movs	r2, #0
 8006270:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8006274:	7ffb      	ldrb	r3, [r7, #31]
 8006276:	4618      	mov	r0, r3
 8006278:	3720      	adds	r7, #32
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}

0800627e <HAL_SPI_Receive>:
 800627e:	b580      	push	{r7, lr}
 8006280:	b088      	sub	sp, #32
 8006282:	af02      	add	r7, sp, #8
 8006284:	60f8      	str	r0, [r7, #12]
 8006286:	60b9      	str	r1, [r7, #8]
 8006288:	603b      	str	r3, [r7, #0]
 800628a:	4613      	mov	r3, r2
 800628c:	80fb      	strh	r3, [r7, #6]
 800628e:	2300      	movs	r3, #0
 8006290:	75fb      	strb	r3, [r7, #23]
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006298:	b2db      	uxtb	r3, r3
 800629a:	2b01      	cmp	r3, #1
 800629c:	d002      	beq.n	80062a4 <HAL_SPI_Receive+0x26>
 800629e:	2302      	movs	r3, #2
 80062a0:	75fb      	strb	r3, [r7, #23]
 80062a2:	e0fb      	b.n	800649c <HAL_SPI_Receive+0x21e>
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062ac:	d112      	bne.n	80062d4 <HAL_SPI_Receive+0x56>
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d10e      	bne.n	80062d4 <HAL_SPI_Receive+0x56>
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2204      	movs	r2, #4
 80062ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80062be:	88fa      	ldrh	r2, [r7, #6]
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	9300      	str	r3, [sp, #0]
 80062c4:	4613      	mov	r3, r2
 80062c6:	68ba      	ldr	r2, [r7, #8]
 80062c8:	68b9      	ldr	r1, [r7, #8]
 80062ca:	68f8      	ldr	r0, [r7, #12]
 80062cc:	f000 f8ef 	bl	80064ae <HAL_SPI_TransmitReceive>
 80062d0:	4603      	mov	r3, r0
 80062d2:	e0e8      	b.n	80064a6 <HAL_SPI_Receive+0x228>
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80062da:	2b01      	cmp	r3, #1
 80062dc:	d101      	bne.n	80062e2 <HAL_SPI_Receive+0x64>
 80062de:	2302      	movs	r3, #2
 80062e0:	e0e1      	b.n	80064a6 <HAL_SPI_Receive+0x228>
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2201      	movs	r2, #1
 80062e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80062ea:	f7fc ff85 	bl	80031f8 <HAL_GetTick>
 80062ee:	6138      	str	r0, [r7, #16]
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d002      	beq.n	80062fc <HAL_SPI_Receive+0x7e>
 80062f6:	88fb      	ldrh	r3, [r7, #6]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d102      	bne.n	8006302 <HAL_SPI_Receive+0x84>
 80062fc:	2301      	movs	r3, #1
 80062fe:	75fb      	strb	r3, [r7, #23]
 8006300:	e0cc      	b.n	800649c <HAL_SPI_Receive+0x21e>
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2204      	movs	r2, #4
 8006306:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2200      	movs	r2, #0
 800630e:	655a      	str	r2, [r3, #84]	; 0x54
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	68ba      	ldr	r2, [r7, #8]
 8006314:	639a      	str	r2, [r3, #56]	; 0x38
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	88fa      	ldrh	r2, [r7, #6]
 800631a:	879a      	strh	r2, [r3, #60]	; 0x3c
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	88fa      	ldrh	r2, [r7, #6]
 8006320:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2200      	movs	r2, #0
 8006326:	631a      	str	r2, [r3, #48]	; 0x30
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2200      	movs	r2, #0
 800632c:	869a      	strh	r2, [r3, #52]	; 0x34
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2200      	movs	r2, #0
 8006332:	86da      	strh	r2, [r3, #54]	; 0x36
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2200      	movs	r2, #0
 8006338:	641a      	str	r2, [r3, #64]	; 0x40
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2200      	movs	r2, #0
 800633e:	645a      	str	r2, [r3, #68]	; 0x44
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006348:	d10f      	bne.n	800636a <HAL_SPI_Receive+0xec>
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	681a      	ldr	r2, [r3, #0]
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006358:	601a      	str	r2, [r3, #0]
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	681a      	ldr	r2, [r3, #0]
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006368:	601a      	str	r2, [r3, #0]
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006374:	2b40      	cmp	r3, #64	; 0x40
 8006376:	d007      	beq.n	8006388 <HAL_SPI_Receive+0x10a>
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006386:	601a      	str	r2, [r3, #0]
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	68db      	ldr	r3, [r3, #12]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d16a      	bne.n	8006466 <HAL_SPI_Receive+0x1e8>
 8006390:	e032      	b.n	80063f8 <HAL_SPI_Receive+0x17a>
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	689b      	ldr	r3, [r3, #8]
 8006398:	f003 0301 	and.w	r3, r3, #1
 800639c:	2b01      	cmp	r3, #1
 800639e:	d115      	bne.n	80063cc <HAL_SPI_Receive+0x14e>
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f103 020c 	add.w	r2, r3, #12
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ac:	7812      	ldrb	r2, [r2, #0]
 80063ae:	b2d2      	uxtb	r2, r2
 80063b0:	701a      	strb	r2, [r3, #0]
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063b6:	1c5a      	adds	r2, r3, #1
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	639a      	str	r2, [r3, #56]	; 0x38
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063c0:	b29b      	uxth	r3, r3
 80063c2:	3b01      	subs	r3, #1
 80063c4:	b29a      	uxth	r2, r3
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80063ca:	e015      	b.n	80063f8 <HAL_SPI_Receive+0x17a>
 80063cc:	f7fc ff14 	bl	80031f8 <HAL_GetTick>
 80063d0:	4602      	mov	r2, r0
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	1ad3      	subs	r3, r2, r3
 80063d6:	683a      	ldr	r2, [r7, #0]
 80063d8:	429a      	cmp	r2, r3
 80063da:	d803      	bhi.n	80063e4 <HAL_SPI_Receive+0x166>
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063e2:	d102      	bne.n	80063ea <HAL_SPI_Receive+0x16c>
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d106      	bne.n	80063f8 <HAL_SPI_Receive+0x17a>
 80063ea:	2303      	movs	r3, #3
 80063ec:	75fb      	strb	r3, [r7, #23]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2201      	movs	r2, #1
 80063f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80063f6:	e051      	b.n	800649c <HAL_SPI_Receive+0x21e>
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063fc:	b29b      	uxth	r3, r3
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d1c7      	bne.n	8006392 <HAL_SPI_Receive+0x114>
 8006402:	e035      	b.n	8006470 <HAL_SPI_Receive+0x1f2>
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	f003 0301 	and.w	r3, r3, #1
 800640e:	2b01      	cmp	r3, #1
 8006410:	d113      	bne.n	800643a <HAL_SPI_Receive+0x1bc>
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	68da      	ldr	r2, [r3, #12]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800641c:	b292      	uxth	r2, r2
 800641e:	801a      	strh	r2, [r3, #0]
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006424:	1c9a      	adds	r2, r3, #2
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	639a      	str	r2, [r3, #56]	; 0x38
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800642e:	b29b      	uxth	r3, r3
 8006430:	3b01      	subs	r3, #1
 8006432:	b29a      	uxth	r2, r3
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006438:	e015      	b.n	8006466 <HAL_SPI_Receive+0x1e8>
 800643a:	f7fc fedd 	bl	80031f8 <HAL_GetTick>
 800643e:	4602      	mov	r2, r0
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	1ad3      	subs	r3, r2, r3
 8006444:	683a      	ldr	r2, [r7, #0]
 8006446:	429a      	cmp	r2, r3
 8006448:	d803      	bhi.n	8006452 <HAL_SPI_Receive+0x1d4>
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006450:	d102      	bne.n	8006458 <HAL_SPI_Receive+0x1da>
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d106      	bne.n	8006466 <HAL_SPI_Receive+0x1e8>
 8006458:	2303      	movs	r3, #3
 800645a:	75fb      	strb	r3, [r7, #23]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2201      	movs	r2, #1
 8006460:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8006464:	e01a      	b.n	800649c <HAL_SPI_Receive+0x21e>
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800646a:	b29b      	uxth	r3, r3
 800646c:	2b00      	cmp	r3, #0
 800646e:	d1c9      	bne.n	8006404 <HAL_SPI_Receive+0x186>
 8006470:	693a      	ldr	r2, [r7, #16]
 8006472:	6839      	ldr	r1, [r7, #0]
 8006474:	68f8      	ldr	r0, [r7, #12]
 8006476:	f000 fa53 	bl	8006920 <SPI_EndRxTransaction>
 800647a:	4603      	mov	r3, r0
 800647c:	2b00      	cmp	r3, #0
 800647e:	d002      	beq.n	8006486 <HAL_SPI_Receive+0x208>
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2220      	movs	r2, #32
 8006484:	655a      	str	r2, [r3, #84]	; 0x54
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800648a:	2b00      	cmp	r3, #0
 800648c:	d002      	beq.n	8006494 <HAL_SPI_Receive+0x216>
 800648e:	2301      	movs	r3, #1
 8006490:	75fb      	strb	r3, [r7, #23]
 8006492:	e003      	b.n	800649c <HAL_SPI_Receive+0x21e>
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2201      	movs	r2, #1
 8006498:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	2200      	movs	r2, #0
 80064a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80064a4:	7dfb      	ldrb	r3, [r7, #23]
 80064a6:	4618      	mov	r0, r3
 80064a8:	3718      	adds	r7, #24
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}

080064ae <HAL_SPI_TransmitReceive>:
 80064ae:	b580      	push	{r7, lr}
 80064b0:	b08c      	sub	sp, #48	; 0x30
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	60f8      	str	r0, [r7, #12]
 80064b6:	60b9      	str	r1, [r7, #8]
 80064b8:	607a      	str	r2, [r7, #4]
 80064ba:	807b      	strh	r3, [r7, #2]
 80064bc:	2301      	movs	r3, #1
 80064be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064c0:	2300      	movs	r3, #0
 80064c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	d101      	bne.n	80064d4 <HAL_SPI_TransmitReceive+0x26>
 80064d0:	2302      	movs	r3, #2
 80064d2:	e198      	b.n	8006806 <HAL_SPI_TransmitReceive+0x358>
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2201      	movs	r2, #1
 80064d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80064dc:	f7fc fe8c 	bl	80031f8 <HAL_GetTick>
 80064e0:	6278      	str	r0, [r7, #36]	; 0x24
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80064e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	61fb      	str	r3, [r7, #28]
 80064f2:	887b      	ldrh	r3, [r7, #2]
 80064f4:	837b      	strh	r3, [r7, #26]
 80064f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d00f      	beq.n	800651e <HAL_SPI_TransmitReceive+0x70>
 80064fe:	69fb      	ldr	r3, [r7, #28]
 8006500:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006504:	d107      	bne.n	8006516 <HAL_SPI_TransmitReceive+0x68>
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d103      	bne.n	8006516 <HAL_SPI_TransmitReceive+0x68>
 800650e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006512:	2b04      	cmp	r3, #4
 8006514:	d003      	beq.n	800651e <HAL_SPI_TransmitReceive+0x70>
 8006516:	2302      	movs	r3, #2
 8006518:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800651c:	e16d      	b.n	80067fa <HAL_SPI_TransmitReceive+0x34c>
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d005      	beq.n	8006530 <HAL_SPI_TransmitReceive+0x82>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d002      	beq.n	8006530 <HAL_SPI_TransmitReceive+0x82>
 800652a:	887b      	ldrh	r3, [r7, #2]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d103      	bne.n	8006538 <HAL_SPI_TransmitReceive+0x8a>
 8006530:	2301      	movs	r3, #1
 8006532:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006536:	e160      	b.n	80067fa <HAL_SPI_TransmitReceive+0x34c>
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800653e:	b2db      	uxtb	r3, r3
 8006540:	2b04      	cmp	r3, #4
 8006542:	d003      	beq.n	800654c <HAL_SPI_TransmitReceive+0x9e>
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2205      	movs	r2, #5
 8006548:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2200      	movs	r2, #0
 8006550:	655a      	str	r2, [r3, #84]	; 0x54
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	687a      	ldr	r2, [r7, #4]
 8006556:	639a      	str	r2, [r3, #56]	; 0x38
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	887a      	ldrh	r2, [r7, #2]
 800655c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	887a      	ldrh	r2, [r7, #2]
 8006562:	879a      	strh	r2, [r3, #60]	; 0x3c
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	68ba      	ldr	r2, [r7, #8]
 8006568:	631a      	str	r2, [r3, #48]	; 0x30
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	887a      	ldrh	r2, [r7, #2]
 800656e:	86da      	strh	r2, [r3, #54]	; 0x36
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	887a      	ldrh	r2, [r7, #2]
 8006574:	869a      	strh	r2, [r3, #52]	; 0x34
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2200      	movs	r2, #0
 800657a:	641a      	str	r2, [r3, #64]	; 0x40
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2200      	movs	r2, #0
 8006580:	645a      	str	r2, [r3, #68]	; 0x44
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800658c:	2b40      	cmp	r3, #64	; 0x40
 800658e:	d007      	beq.n	80065a0 <HAL_SPI_TransmitReceive+0xf2>
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	681a      	ldr	r2, [r3, #0]
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800659e:	601a      	str	r2, [r3, #0]
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	68db      	ldr	r3, [r3, #12]
 80065a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065a8:	d17c      	bne.n	80066a4 <HAL_SPI_TransmitReceive+0x1f6>
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d002      	beq.n	80065b8 <HAL_SPI_TransmitReceive+0x10a>
 80065b2:	8b7b      	ldrh	r3, [r7, #26]
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	d16a      	bne.n	800668e <HAL_SPI_TransmitReceive+0x1e0>
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065bc:	881a      	ldrh	r2, [r3, #0]
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	60da      	str	r2, [r3, #12]
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065c8:	1c9a      	adds	r2, r3, #2
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	631a      	str	r2, [r3, #48]	; 0x30
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	3b01      	subs	r3, #1
 80065d6:	b29a      	uxth	r2, r3
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	86da      	strh	r2, [r3, #54]	; 0x36
 80065dc:	e057      	b.n	800668e <HAL_SPI_TransmitReceive+0x1e0>
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	689b      	ldr	r3, [r3, #8]
 80065e4:	f003 0302 	and.w	r3, r3, #2
 80065e8:	2b02      	cmp	r3, #2
 80065ea:	d11b      	bne.n	8006624 <HAL_SPI_TransmitReceive+0x176>
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d016      	beq.n	8006624 <HAL_SPI_TransmitReceive+0x176>
 80065f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d113      	bne.n	8006624 <HAL_SPI_TransmitReceive+0x176>
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006600:	881a      	ldrh	r2, [r3, #0]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	60da      	str	r2, [r3, #12]
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800660c:	1c9a      	adds	r2, r3, #2
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	631a      	str	r2, [r3, #48]	; 0x30
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006616:	b29b      	uxth	r3, r3
 8006618:	3b01      	subs	r3, #1
 800661a:	b29a      	uxth	r2, r3
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	86da      	strh	r2, [r3, #54]	; 0x36
 8006620:	2300      	movs	r3, #0
 8006622:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	f003 0301 	and.w	r3, r3, #1
 800662e:	2b01      	cmp	r3, #1
 8006630:	d119      	bne.n	8006666 <HAL_SPI_TransmitReceive+0x1b8>
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006636:	b29b      	uxth	r3, r3
 8006638:	2b00      	cmp	r3, #0
 800663a:	d014      	beq.n	8006666 <HAL_SPI_TransmitReceive+0x1b8>
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	68da      	ldr	r2, [r3, #12]
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006646:	b292      	uxth	r2, r2
 8006648:	801a      	strh	r2, [r3, #0]
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800664e:	1c9a      	adds	r2, r3, #2
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	639a      	str	r2, [r3, #56]	; 0x38
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006658:	b29b      	uxth	r3, r3
 800665a:	3b01      	subs	r3, #1
 800665c:	b29a      	uxth	r2, r3
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006662:	2301      	movs	r3, #1
 8006664:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006666:	f7fc fdc7 	bl	80031f8 <HAL_GetTick>
 800666a:	4602      	mov	r2, r0
 800666c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800666e:	1ad3      	subs	r3, r2, r3
 8006670:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006672:	429a      	cmp	r2, r3
 8006674:	d80b      	bhi.n	800668e <HAL_SPI_TransmitReceive+0x1e0>
 8006676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800667c:	d007      	beq.n	800668e <HAL_SPI_TransmitReceive+0x1e0>
 800667e:	2303      	movs	r3, #3
 8006680:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2201      	movs	r2, #1
 8006688:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800668c:	e0b5      	b.n	80067fa <HAL_SPI_TransmitReceive+0x34c>
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006692:	b29b      	uxth	r3, r3
 8006694:	2b00      	cmp	r3, #0
 8006696:	d1a2      	bne.n	80065de <HAL_SPI_TransmitReceive+0x130>
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800669c:	b29b      	uxth	r3, r3
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d19d      	bne.n	80065de <HAL_SPI_TransmitReceive+0x130>
 80066a2:	e080      	b.n	80067a6 <HAL_SPI_TransmitReceive+0x2f8>
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d002      	beq.n	80066b2 <HAL_SPI_TransmitReceive+0x204>
 80066ac:	8b7b      	ldrh	r3, [r7, #26]
 80066ae:	2b01      	cmp	r3, #1
 80066b0:	d16f      	bne.n	8006792 <HAL_SPI_TransmitReceive+0x2e4>
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	330c      	adds	r3, #12
 80066bc:	7812      	ldrb	r2, [r2, #0]
 80066be:	701a      	strb	r2, [r3, #0]
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066c4:	1c5a      	adds	r2, r3, #1
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	631a      	str	r2, [r3, #48]	; 0x30
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	3b01      	subs	r3, #1
 80066d2:	b29a      	uxth	r2, r3
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	86da      	strh	r2, [r3, #54]	; 0x36
 80066d8:	e05b      	b.n	8006792 <HAL_SPI_TransmitReceive+0x2e4>
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	f003 0302 	and.w	r3, r3, #2
 80066e4:	2b02      	cmp	r3, #2
 80066e6:	d11c      	bne.n	8006722 <HAL_SPI_TransmitReceive+0x274>
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d017      	beq.n	8006722 <HAL_SPI_TransmitReceive+0x274>
 80066f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066f4:	2b01      	cmp	r3, #1
 80066f6:	d114      	bne.n	8006722 <HAL_SPI_TransmitReceive+0x274>
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	330c      	adds	r3, #12
 8006702:	7812      	ldrb	r2, [r2, #0]
 8006704:	701a      	strb	r2, [r3, #0]
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800670a:	1c5a      	adds	r2, r3, #1
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	631a      	str	r2, [r3, #48]	; 0x30
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006714:	b29b      	uxth	r3, r3
 8006716:	3b01      	subs	r3, #1
 8006718:	b29a      	uxth	r2, r3
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	86da      	strh	r2, [r3, #54]	; 0x36
 800671e:	2300      	movs	r3, #0
 8006720:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	689b      	ldr	r3, [r3, #8]
 8006728:	f003 0301 	and.w	r3, r3, #1
 800672c:	2b01      	cmp	r3, #1
 800672e:	d119      	bne.n	8006764 <HAL_SPI_TransmitReceive+0x2b6>
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006734:	b29b      	uxth	r3, r3
 8006736:	2b00      	cmp	r3, #0
 8006738:	d014      	beq.n	8006764 <HAL_SPI_TransmitReceive+0x2b6>
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	68da      	ldr	r2, [r3, #12]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006744:	b2d2      	uxtb	r2, r2
 8006746:	701a      	strb	r2, [r3, #0]
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800674c:	1c5a      	adds	r2, r3, #1
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	639a      	str	r2, [r3, #56]	; 0x38
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006756:	b29b      	uxth	r3, r3
 8006758:	3b01      	subs	r3, #1
 800675a:	b29a      	uxth	r2, r3
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006760:	2301      	movs	r3, #1
 8006762:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006764:	f7fc fd48 	bl	80031f8 <HAL_GetTick>
 8006768:	4602      	mov	r2, r0
 800676a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676c:	1ad3      	subs	r3, r2, r3
 800676e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006770:	429a      	cmp	r2, r3
 8006772:	d803      	bhi.n	800677c <HAL_SPI_TransmitReceive+0x2ce>
 8006774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800677a:	d102      	bne.n	8006782 <HAL_SPI_TransmitReceive+0x2d4>
 800677c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800677e:	2b00      	cmp	r3, #0
 8006780:	d107      	bne.n	8006792 <HAL_SPI_TransmitReceive+0x2e4>
 8006782:	2303      	movs	r3, #3
 8006784:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2201      	movs	r2, #1
 800678c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8006790:	e033      	b.n	80067fa <HAL_SPI_TransmitReceive+0x34c>
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006796:	b29b      	uxth	r3, r3
 8006798:	2b00      	cmp	r3, #0
 800679a:	d19e      	bne.n	80066da <HAL_SPI_TransmitReceive+0x22c>
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d199      	bne.n	80066da <HAL_SPI_TransmitReceive+0x22c>
 80067a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067a8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80067aa:	68f8      	ldr	r0, [r7, #12]
 80067ac:	f000 f90a 	bl	80069c4 <SPI_EndRxTxTransaction>
 80067b0:	4603      	mov	r3, r0
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d006      	beq.n	80067c4 <HAL_SPI_TransmitReceive+0x316>
 80067b6:	2301      	movs	r3, #1
 80067b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2220      	movs	r2, #32
 80067c0:	655a      	str	r2, [r3, #84]	; 0x54
 80067c2:	e01a      	b.n	80067fa <HAL_SPI_TransmitReceive+0x34c>
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d10a      	bne.n	80067e2 <HAL_SPI_TransmitReceive+0x334>
 80067cc:	2300      	movs	r3, #0
 80067ce:	617b      	str	r3, [r7, #20]
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	68db      	ldr	r3, [r3, #12]
 80067d6:	617b      	str	r3, [r7, #20]
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	617b      	str	r3, [r7, #20]
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d003      	beq.n	80067f2 <HAL_SPI_TransmitReceive+0x344>
 80067ea:	2301      	movs	r3, #1
 80067ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067f0:	e003      	b.n	80067fa <HAL_SPI_TransmitReceive+0x34c>
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2201      	movs	r2, #1
 80067f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2200      	movs	r2, #0
 80067fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8006802:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006806:	4618      	mov	r0, r3
 8006808:	3730      	adds	r7, #48	; 0x30
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}
	...

08006810 <SPI_WaitFlagStateUntilTimeout>:
 8006810:	b580      	push	{r7, lr}
 8006812:	b088      	sub	sp, #32
 8006814:	af00      	add	r7, sp, #0
 8006816:	60f8      	str	r0, [r7, #12]
 8006818:	60b9      	str	r1, [r7, #8]
 800681a:	603b      	str	r3, [r7, #0]
 800681c:	4613      	mov	r3, r2
 800681e:	71fb      	strb	r3, [r7, #7]
 8006820:	f7fc fcea 	bl	80031f8 <HAL_GetTick>
 8006824:	4602      	mov	r2, r0
 8006826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006828:	1a9b      	subs	r3, r3, r2
 800682a:	683a      	ldr	r2, [r7, #0]
 800682c:	4413      	add	r3, r2
 800682e:	61fb      	str	r3, [r7, #28]
 8006830:	f7fc fce2 	bl	80031f8 <HAL_GetTick>
 8006834:	61b8      	str	r0, [r7, #24]
 8006836:	4b39      	ldr	r3, [pc, #228]	; (800691c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	015b      	lsls	r3, r3, #5
 800683c:	0d1b      	lsrs	r3, r3, #20
 800683e:	69fa      	ldr	r2, [r7, #28]
 8006840:	fb02 f303 	mul.w	r3, r2, r3
 8006844:	617b      	str	r3, [r7, #20]
 8006846:	e054      	b.n	80068f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800684e:	d050      	beq.n	80068f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
 8006850:	f7fc fcd2 	bl	80031f8 <HAL_GetTick>
 8006854:	4602      	mov	r2, r0
 8006856:	69bb      	ldr	r3, [r7, #24]
 8006858:	1ad3      	subs	r3, r2, r3
 800685a:	69fa      	ldr	r2, [r7, #28]
 800685c:	429a      	cmp	r2, r3
 800685e:	d902      	bls.n	8006866 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006860:	69fb      	ldr	r3, [r7, #28]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d13d      	bne.n	80068e2 <SPI_WaitFlagStateUntilTimeout+0xd2>
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	685a      	ldr	r2, [r3, #4]
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006874:	605a      	str	r2, [r3, #4]
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800687e:	d111      	bne.n	80068a4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006888:	d004      	beq.n	8006894 <SPI_WaitFlagStateUntilTimeout+0x84>
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	689b      	ldr	r3, [r3, #8]
 800688e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006892:	d107      	bne.n	80068a4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068a2:	601a      	str	r2, [r3, #0]
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068ac:	d10f      	bne.n	80068ce <SPI_WaitFlagStateUntilTimeout+0xbe>
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	681a      	ldr	r2, [r3, #0]
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80068bc:	601a      	str	r2, [r3, #0]
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	681a      	ldr	r2, [r3, #0]
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80068cc:	601a      	str	r2, [r3, #0]
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2201      	movs	r2, #1
 80068d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	2200      	movs	r2, #0
 80068da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80068de:	2303      	movs	r3, #3
 80068e0:	e017      	b.n	8006912 <SPI_WaitFlagStateUntilTimeout+0x102>
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d101      	bne.n	80068ec <SPI_WaitFlagStateUntilTimeout+0xdc>
 80068e8:	2300      	movs	r3, #0
 80068ea:	61fb      	str	r3, [r7, #28]
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	3b01      	subs	r3, #1
 80068f0:	617b      	str	r3, [r7, #20]
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	689a      	ldr	r2, [r3, #8]
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	4013      	ands	r3, r2
 80068fc:	68ba      	ldr	r2, [r7, #8]
 80068fe:	429a      	cmp	r2, r3
 8006900:	bf0c      	ite	eq
 8006902:	2301      	moveq	r3, #1
 8006904:	2300      	movne	r3, #0
 8006906:	b2db      	uxtb	r3, r3
 8006908:	461a      	mov	r2, r3
 800690a:	79fb      	ldrb	r3, [r7, #7]
 800690c:	429a      	cmp	r2, r3
 800690e:	d19b      	bne.n	8006848 <SPI_WaitFlagStateUntilTimeout+0x38>
 8006910:	2300      	movs	r3, #0
 8006912:	4618      	mov	r0, r3
 8006914:	3720      	adds	r7, #32
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}
 800691a:	bf00      	nop
 800691c:	20000084 	.word	0x20000084

08006920 <SPI_EndRxTransaction>:
 8006920:	b580      	push	{r7, lr}
 8006922:	b086      	sub	sp, #24
 8006924:	af02      	add	r7, sp, #8
 8006926:	60f8      	str	r0, [r7, #12]
 8006928:	60b9      	str	r1, [r7, #8]
 800692a:	607a      	str	r2, [r7, #4]
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006934:	d111      	bne.n	800695a <SPI_EndRxTransaction+0x3a>
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	689b      	ldr	r3, [r3, #8]
 800693a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800693e:	d004      	beq.n	800694a <SPI_EndRxTransaction+0x2a>
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	689b      	ldr	r3, [r3, #8]
 8006944:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006948:	d107      	bne.n	800695a <SPI_EndRxTransaction+0x3a>
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	681a      	ldr	r2, [r3, #0]
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006958:	601a      	str	r2, [r3, #0]
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006962:	d117      	bne.n	8006994 <SPI_EndRxTransaction+0x74>
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800696c:	d112      	bne.n	8006994 <SPI_EndRxTransaction+0x74>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	9300      	str	r3, [sp, #0]
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	2200      	movs	r2, #0
 8006976:	2101      	movs	r1, #1
 8006978:	68f8      	ldr	r0, [r7, #12]
 800697a:	f7ff ff49 	bl	8006810 <SPI_WaitFlagStateUntilTimeout>
 800697e:	4603      	mov	r3, r0
 8006980:	2b00      	cmp	r3, #0
 8006982:	d01a      	beq.n	80069ba <SPI_EndRxTransaction+0x9a>
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006988:	f043 0220 	orr.w	r2, r3, #32
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	655a      	str	r2, [r3, #84]	; 0x54
 8006990:	2303      	movs	r3, #3
 8006992:	e013      	b.n	80069bc <SPI_EndRxTransaction+0x9c>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	9300      	str	r3, [sp, #0]
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	2200      	movs	r2, #0
 800699c:	2180      	movs	r1, #128	; 0x80
 800699e:	68f8      	ldr	r0, [r7, #12]
 80069a0:	f7ff ff36 	bl	8006810 <SPI_WaitFlagStateUntilTimeout>
 80069a4:	4603      	mov	r3, r0
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d007      	beq.n	80069ba <SPI_EndRxTransaction+0x9a>
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069ae:	f043 0220 	orr.w	r2, r3, #32
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	655a      	str	r2, [r3, #84]	; 0x54
 80069b6:	2303      	movs	r3, #3
 80069b8:	e000      	b.n	80069bc <SPI_EndRxTransaction+0x9c>
 80069ba:	2300      	movs	r3, #0
 80069bc:	4618      	mov	r0, r3
 80069be:	3710      	adds	r7, #16
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}

080069c4 <SPI_EndRxTxTransaction>:
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b086      	sub	sp, #24
 80069c8:	af02      	add	r7, sp, #8
 80069ca:	60f8      	str	r0, [r7, #12]
 80069cc:	60b9      	str	r1, [r7, #8]
 80069ce:	607a      	str	r2, [r7, #4]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	9300      	str	r3, [sp, #0]
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	2200      	movs	r2, #0
 80069d8:	2180      	movs	r1, #128	; 0x80
 80069da:	68f8      	ldr	r0, [r7, #12]
 80069dc:	f7ff ff18 	bl	8006810 <SPI_WaitFlagStateUntilTimeout>
 80069e0:	4603      	mov	r3, r0
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d007      	beq.n	80069f6 <SPI_EndRxTxTransaction+0x32>
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069ea:	f043 0220 	orr.w	r2, r3, #32
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	655a      	str	r2, [r3, #84]	; 0x54
 80069f2:	2303      	movs	r3, #3
 80069f4:	e000      	b.n	80069f8 <SPI_EndRxTxTransaction+0x34>
 80069f6:	2300      	movs	r3, #0
 80069f8:	4618      	mov	r0, r3
 80069fa:	3710      	adds	r7, #16
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}

08006a00 <HAL_TIM_Base_Init>:
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b082      	sub	sp, #8
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d101      	bne.n	8006a12 <HAL_TIM_Base_Init+0x12>
 8006a0e:	2301      	movs	r3, #1
 8006a10:	e041      	b.n	8006a96 <HAL_TIM_Base_Init+0x96>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a18:	b2db      	uxtb	r3, r3
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d106      	bne.n	8006a2c <HAL_TIM_Base_Init+0x2c>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2200      	movs	r2, #0
 8006a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f7fc fb4a 	bl	80030c0 <HAL_TIM_Base_MspInit>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2202      	movs	r2, #2
 8006a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681a      	ldr	r2, [r3, #0]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	3304      	adds	r3, #4
 8006a3c:	4619      	mov	r1, r3
 8006a3e:	4610      	mov	r0, r2
 8006a40:	f000 f82e 	bl	8006aa0 <TIM_Base_SetConfig>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2201      	movs	r2, #1
 8006a48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2201      	movs	r2, #1
 8006a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2201      	movs	r2, #1
 8006a58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2201      	movs	r2, #1
 8006a60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2201      	movs	r2, #1
 8006a68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2201      	movs	r2, #1
 8006a70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2201      	movs	r2, #1
 8006a78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2201      	movs	r2, #1
 8006a80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2201      	movs	r2, #1
 8006a88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2201      	movs	r2, #1
 8006a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006a94:	2300      	movs	r3, #0
 8006a96:	4618      	mov	r0, r3
 8006a98:	3708      	adds	r7, #8
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}
	...

08006aa0 <TIM_Base_SetConfig>:
 8006aa0:	b480      	push	{r7}
 8006aa2:	b085      	sub	sp, #20
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
 8006aa8:	6039      	str	r1, [r7, #0]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	60fb      	str	r3, [r7, #12]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	4a2d      	ldr	r2, [pc, #180]	; (8006b68 <TIM_Base_SetConfig+0xc8>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d00f      	beq.n	8006ad8 <TIM_Base_SetConfig+0x38>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006abe:	d00b      	beq.n	8006ad8 <TIM_Base_SetConfig+0x38>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	4a2a      	ldr	r2, [pc, #168]	; (8006b6c <TIM_Base_SetConfig+0xcc>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d007      	beq.n	8006ad8 <TIM_Base_SetConfig+0x38>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	4a29      	ldr	r2, [pc, #164]	; (8006b70 <TIM_Base_SetConfig+0xd0>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d003      	beq.n	8006ad8 <TIM_Base_SetConfig+0x38>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	4a28      	ldr	r2, [pc, #160]	; (8006b74 <TIM_Base_SetConfig+0xd4>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d108      	bne.n	8006aea <TIM_Base_SetConfig+0x4a>
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ade:	60fb      	str	r3, [r7, #12]
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	68fa      	ldr	r2, [r7, #12]
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	60fb      	str	r3, [r7, #12]
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	4a1e      	ldr	r2, [pc, #120]	; (8006b68 <TIM_Base_SetConfig+0xc8>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d00f      	beq.n	8006b12 <TIM_Base_SetConfig+0x72>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006af8:	d00b      	beq.n	8006b12 <TIM_Base_SetConfig+0x72>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	4a1b      	ldr	r2, [pc, #108]	; (8006b6c <TIM_Base_SetConfig+0xcc>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d007      	beq.n	8006b12 <TIM_Base_SetConfig+0x72>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	4a1a      	ldr	r2, [pc, #104]	; (8006b70 <TIM_Base_SetConfig+0xd0>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d003      	beq.n	8006b12 <TIM_Base_SetConfig+0x72>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	4a19      	ldr	r2, [pc, #100]	; (8006b74 <TIM_Base_SetConfig+0xd4>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d108      	bne.n	8006b24 <TIM_Base_SetConfig+0x84>
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b18:	60fb      	str	r3, [r7, #12]
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	68db      	ldr	r3, [r3, #12]
 8006b1e:	68fa      	ldr	r2, [r7, #12]
 8006b20:	4313      	orrs	r3, r2
 8006b22:	60fb      	str	r3, [r7, #12]
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	695b      	ldr	r3, [r3, #20]
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	60fb      	str	r3, [r7, #12]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	68fa      	ldr	r2, [r7, #12]
 8006b36:	601a      	str	r2, [r3, #0]
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	689a      	ldr	r2, [r3, #8]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	62da      	str	r2, [r3, #44]	; 0x2c
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	681a      	ldr	r2, [r3, #0]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	629a      	str	r2, [r3, #40]	; 0x28
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	4a07      	ldr	r2, [pc, #28]	; (8006b68 <TIM_Base_SetConfig+0xc8>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d103      	bne.n	8006b58 <TIM_Base_SetConfig+0xb8>
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	691a      	ldr	r2, [r3, #16]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	631a      	str	r2, [r3, #48]	; 0x30
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	615a      	str	r2, [r3, #20]
 8006b5e:	bf00      	nop
 8006b60:	3714      	adds	r7, #20
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bc80      	pop	{r7}
 8006b66:	4770      	bx	lr
 8006b68:	40012c00 	.word	0x40012c00
 8006b6c:	40000400 	.word	0x40000400
 8006b70:	40000800 	.word	0x40000800
 8006b74:	40000c00 	.word	0x40000c00

08006b78 <HAL_TIMEx_MasterConfigSynchronization>:
 8006b78:	b480      	push	{r7}
 8006b7a:	b085      	sub	sp, #20
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
 8006b80:	6039      	str	r1, [r7, #0]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d101      	bne.n	8006b90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b8c:	2302      	movs	r3, #2
 8006b8e:	e04b      	b.n	8006c28 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2201      	movs	r2, #1
 8006b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2202      	movs	r2, #2
 8006b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	685b      	ldr	r3, [r3, #4]
 8006ba6:	60fb      	str	r3, [r7, #12]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	60bb      	str	r3, [r7, #8]
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bb6:	60fb      	str	r3, [r7, #12]
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	68fa      	ldr	r2, [r7, #12]
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	60fb      	str	r3, [r7, #12]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	68fa      	ldr	r2, [r7, #12]
 8006bc8:	605a      	str	r2, [r3, #4]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a19      	ldr	r2, [pc, #100]	; (8006c34 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d013      	beq.n	8006bfc <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bdc:	d00e      	beq.n	8006bfc <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a15      	ldr	r2, [pc, #84]	; (8006c38 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d009      	beq.n	8006bfc <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a13      	ldr	r2, [pc, #76]	; (8006c3c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d004      	beq.n	8006bfc <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a12      	ldr	r2, [pc, #72]	; (8006c40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d10c      	bne.n	8006c16 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c02:	60bb      	str	r3, [r7, #8]
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	68ba      	ldr	r2, [r7, #8]
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	60bb      	str	r3, [r7, #8]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	68ba      	ldr	r2, [r7, #8]
 8006c14:	609a      	str	r2, [r3, #8]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2201      	movs	r2, #1
 8006c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2200      	movs	r2, #0
 8006c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006c26:	2300      	movs	r3, #0
 8006c28:	4618      	mov	r0, r3
 8006c2a:	3714      	adds	r7, #20
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bc80      	pop	{r7}
 8006c30:	4770      	bx	lr
 8006c32:	bf00      	nop
 8006c34:	40012c00 	.word	0x40012c00
 8006c38:	40000400 	.word	0x40000400
 8006c3c:	40000800 	.word	0x40000800
 8006c40:	40000c00 	.word	0x40000c00

08006c44 <USB_CoreInit>:
 8006c44:	b084      	sub	sp, #16
 8006c46:	b580      	push	{r7, lr}
 8006c48:	b084      	sub	sp, #16
 8006c4a:	af00      	add	r7, sp, #0
 8006c4c:	6078      	str	r0, [r7, #4]
 8006c4e:	f107 001c 	add.w	r0, r7, #28
 8006c52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	68db      	ldr	r3, [r3, #12]
 8006c5a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	60da      	str	r2, [r3, #12]
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f001 f9de 	bl	8008024 <USB_CoreReset>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	73fb      	strb	r3, [r7, #15]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c70:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	639a      	str	r2, [r3, #56]	; 0x38
 8006c78:	7bfb      	ldrb	r3, [r7, #15]
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3710      	adds	r7, #16
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006c84:	b004      	add	sp, #16
 8006c86:	4770      	bx	lr

08006c88 <USB_SetTurnaroundTime>:
 8006c88:	b480      	push	{r7}
 8006c8a:	b087      	sub	sp, #28
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	60f8      	str	r0, [r7, #12]
 8006c90:	60b9      	str	r1, [r7, #8]
 8006c92:	4613      	mov	r3, r2
 8006c94:	71fb      	strb	r3, [r7, #7]
 8006c96:	79fb      	ldrb	r3, [r7, #7]
 8006c98:	2b02      	cmp	r3, #2
 8006c9a:	d165      	bne.n	8006d68 <USB_SetTurnaroundTime+0xe0>
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	4a3e      	ldr	r2, [pc, #248]	; (8006d98 <USB_SetTurnaroundTime+0x110>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d906      	bls.n	8006cb2 <USB_SetTurnaroundTime+0x2a>
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	4a3d      	ldr	r2, [pc, #244]	; (8006d9c <USB_SetTurnaroundTime+0x114>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d202      	bcs.n	8006cb2 <USB_SetTurnaroundTime+0x2a>
 8006cac:	230f      	movs	r3, #15
 8006cae:	617b      	str	r3, [r7, #20]
 8006cb0:	e05c      	b.n	8006d6c <USB_SetTurnaroundTime+0xe4>
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	4a39      	ldr	r2, [pc, #228]	; (8006d9c <USB_SetTurnaroundTime+0x114>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d306      	bcc.n	8006cc8 <USB_SetTurnaroundTime+0x40>
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	4a38      	ldr	r2, [pc, #224]	; (8006da0 <USB_SetTurnaroundTime+0x118>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d202      	bcs.n	8006cc8 <USB_SetTurnaroundTime+0x40>
 8006cc2:	230e      	movs	r3, #14
 8006cc4:	617b      	str	r3, [r7, #20]
 8006cc6:	e051      	b.n	8006d6c <USB_SetTurnaroundTime+0xe4>
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	4a35      	ldr	r2, [pc, #212]	; (8006da0 <USB_SetTurnaroundTime+0x118>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d306      	bcc.n	8006cde <USB_SetTurnaroundTime+0x56>
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	4a34      	ldr	r2, [pc, #208]	; (8006da4 <USB_SetTurnaroundTime+0x11c>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d202      	bcs.n	8006cde <USB_SetTurnaroundTime+0x56>
 8006cd8:	230d      	movs	r3, #13
 8006cda:	617b      	str	r3, [r7, #20]
 8006cdc:	e046      	b.n	8006d6c <USB_SetTurnaroundTime+0xe4>
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	4a30      	ldr	r2, [pc, #192]	; (8006da4 <USB_SetTurnaroundTime+0x11c>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d306      	bcc.n	8006cf4 <USB_SetTurnaroundTime+0x6c>
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	4a2f      	ldr	r2, [pc, #188]	; (8006da8 <USB_SetTurnaroundTime+0x120>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d802      	bhi.n	8006cf4 <USB_SetTurnaroundTime+0x6c>
 8006cee:	230c      	movs	r3, #12
 8006cf0:	617b      	str	r3, [r7, #20]
 8006cf2:	e03b      	b.n	8006d6c <USB_SetTurnaroundTime+0xe4>
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	4a2c      	ldr	r2, [pc, #176]	; (8006da8 <USB_SetTurnaroundTime+0x120>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d906      	bls.n	8006d0a <USB_SetTurnaroundTime+0x82>
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	4a2b      	ldr	r2, [pc, #172]	; (8006dac <USB_SetTurnaroundTime+0x124>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d802      	bhi.n	8006d0a <USB_SetTurnaroundTime+0x82>
 8006d04:	230b      	movs	r3, #11
 8006d06:	617b      	str	r3, [r7, #20]
 8006d08:	e030      	b.n	8006d6c <USB_SetTurnaroundTime+0xe4>
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	4a27      	ldr	r2, [pc, #156]	; (8006dac <USB_SetTurnaroundTime+0x124>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d906      	bls.n	8006d20 <USB_SetTurnaroundTime+0x98>
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	4a26      	ldr	r2, [pc, #152]	; (8006db0 <USB_SetTurnaroundTime+0x128>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d802      	bhi.n	8006d20 <USB_SetTurnaroundTime+0x98>
 8006d1a:	230a      	movs	r3, #10
 8006d1c:	617b      	str	r3, [r7, #20]
 8006d1e:	e025      	b.n	8006d6c <USB_SetTurnaroundTime+0xe4>
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	4a23      	ldr	r2, [pc, #140]	; (8006db0 <USB_SetTurnaroundTime+0x128>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d906      	bls.n	8006d36 <USB_SetTurnaroundTime+0xae>
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	4a22      	ldr	r2, [pc, #136]	; (8006db4 <USB_SetTurnaroundTime+0x12c>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d202      	bcs.n	8006d36 <USB_SetTurnaroundTime+0xae>
 8006d30:	2309      	movs	r3, #9
 8006d32:	617b      	str	r3, [r7, #20]
 8006d34:	e01a      	b.n	8006d6c <USB_SetTurnaroundTime+0xe4>
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	4a1e      	ldr	r2, [pc, #120]	; (8006db4 <USB_SetTurnaroundTime+0x12c>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d306      	bcc.n	8006d4c <USB_SetTurnaroundTime+0xc4>
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	4a1d      	ldr	r2, [pc, #116]	; (8006db8 <USB_SetTurnaroundTime+0x130>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d802      	bhi.n	8006d4c <USB_SetTurnaroundTime+0xc4>
 8006d46:	2308      	movs	r3, #8
 8006d48:	617b      	str	r3, [r7, #20]
 8006d4a:	e00f      	b.n	8006d6c <USB_SetTurnaroundTime+0xe4>
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	4a1a      	ldr	r2, [pc, #104]	; (8006db8 <USB_SetTurnaroundTime+0x130>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d906      	bls.n	8006d62 <USB_SetTurnaroundTime+0xda>
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	4a19      	ldr	r2, [pc, #100]	; (8006dbc <USB_SetTurnaroundTime+0x134>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d202      	bcs.n	8006d62 <USB_SetTurnaroundTime+0xda>
 8006d5c:	2307      	movs	r3, #7
 8006d5e:	617b      	str	r3, [r7, #20]
 8006d60:	e004      	b.n	8006d6c <USB_SetTurnaroundTime+0xe4>
 8006d62:	2306      	movs	r3, #6
 8006d64:	617b      	str	r3, [r7, #20]
 8006d66:	e001      	b.n	8006d6c <USB_SetTurnaroundTime+0xe4>
 8006d68:	2309      	movs	r3, #9
 8006d6a:	617b      	str	r3, [r7, #20]
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	68db      	ldr	r3, [r3, #12]
 8006d70:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	60da      	str	r2, [r3, #12]
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	68da      	ldr	r2, [r3, #12]
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	029b      	lsls	r3, r3, #10
 8006d80:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006d84:	431a      	orrs	r2, r3
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	60da      	str	r2, [r3, #12]
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	371c      	adds	r7, #28
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bc80      	pop	{r7}
 8006d94:	4770      	bx	lr
 8006d96:	bf00      	nop
 8006d98:	00d8acbf 	.word	0x00d8acbf
 8006d9c:	00e4e1c0 	.word	0x00e4e1c0
 8006da0:	00f42400 	.word	0x00f42400
 8006da4:	01067380 	.word	0x01067380
 8006da8:	011a499f 	.word	0x011a499f
 8006dac:	01312cff 	.word	0x01312cff
 8006db0:	014ca43f 	.word	0x014ca43f
 8006db4:	016e3600 	.word	0x016e3600
 8006db8:	01a6ab1f 	.word	0x01a6ab1f
 8006dbc:	01e84800 	.word	0x01e84800

08006dc0 <USB_EnableGlobalInt>:
 8006dc0:	b480      	push	{r7}
 8006dc2:	b083      	sub	sp, #12
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	689b      	ldr	r3, [r3, #8]
 8006dcc:	f043 0201 	orr.w	r2, r3, #1
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	609a      	str	r2, [r3, #8]
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	370c      	adds	r7, #12
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bc80      	pop	{r7}
 8006dde:	4770      	bx	lr

08006de0 <USB_DisableGlobalInt>:
 8006de0:	b480      	push	{r7}
 8006de2:	b083      	sub	sp, #12
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	f023 0201 	bic.w	r2, r3, #1
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	609a      	str	r2, [r3, #8]
 8006df4:	2300      	movs	r3, #0
 8006df6:	4618      	mov	r0, r3
 8006df8:	370c      	adds	r7, #12
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bc80      	pop	{r7}
 8006dfe:	4770      	bx	lr

08006e00 <USB_SetCurrentMode>:
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b084      	sub	sp, #16
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	460b      	mov	r3, r1
 8006e0a:	70fb      	strb	r3, [r7, #3]
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	60fb      	str	r3, [r7, #12]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	68db      	ldr	r3, [r3, #12]
 8006e14:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	60da      	str	r2, [r3, #12]
 8006e1c:	78fb      	ldrb	r3, [r7, #3]
 8006e1e:	2b01      	cmp	r3, #1
 8006e20:	d115      	bne.n	8006e4e <USB_SetCurrentMode+0x4e>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	68db      	ldr	r3, [r3, #12]
 8006e26:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	60da      	str	r2, [r3, #12]
 8006e2e:	2001      	movs	r0, #1
 8006e30:	f7fc f9ec 	bl	800320c <HAL_Delay>
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	3301      	adds	r3, #1
 8006e38:	60fb      	str	r3, [r7, #12]
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f001 f87a 	bl	8007f34 <USB_GetMode>
 8006e40:	4603      	mov	r3, r0
 8006e42:	2b01      	cmp	r3, #1
 8006e44:	d01e      	beq.n	8006e84 <USB_SetCurrentMode+0x84>
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	2b31      	cmp	r3, #49	; 0x31
 8006e4a:	d9f0      	bls.n	8006e2e <USB_SetCurrentMode+0x2e>
 8006e4c:	e01a      	b.n	8006e84 <USB_SetCurrentMode+0x84>
 8006e4e:	78fb      	ldrb	r3, [r7, #3]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d115      	bne.n	8006e80 <USB_SetCurrentMode+0x80>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	68db      	ldr	r3, [r3, #12]
 8006e58:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	60da      	str	r2, [r3, #12]
 8006e60:	2001      	movs	r0, #1
 8006e62:	f7fc f9d3 	bl	800320c <HAL_Delay>
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	3301      	adds	r3, #1
 8006e6a:	60fb      	str	r3, [r7, #12]
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f001 f861 	bl	8007f34 <USB_GetMode>
 8006e72:	4603      	mov	r3, r0
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d005      	beq.n	8006e84 <USB_SetCurrentMode+0x84>
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	2b31      	cmp	r3, #49	; 0x31
 8006e7c:	d9f0      	bls.n	8006e60 <USB_SetCurrentMode+0x60>
 8006e7e:	e001      	b.n	8006e84 <USB_SetCurrentMode+0x84>
 8006e80:	2301      	movs	r3, #1
 8006e82:	e005      	b.n	8006e90 <USB_SetCurrentMode+0x90>
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	2b32      	cmp	r3, #50	; 0x32
 8006e88:	d101      	bne.n	8006e8e <USB_SetCurrentMode+0x8e>
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	e000      	b.n	8006e90 <USB_SetCurrentMode+0x90>
 8006e8e:	2300      	movs	r3, #0
 8006e90:	4618      	mov	r0, r3
 8006e92:	3710      	adds	r7, #16
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}

08006e98 <USB_DevInit>:
 8006e98:	b084      	sub	sp, #16
 8006e9a:	b580      	push	{r7, lr}
 8006e9c:	b086      	sub	sp, #24
 8006e9e:	af00      	add	r7, sp, #0
 8006ea0:	6078      	str	r0, [r7, #4]
 8006ea2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006ea6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8006eaa:	2300      	movs	r3, #0
 8006eac:	75fb      	strb	r3, [r7, #23]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	60fb      	str	r3, [r7, #12]
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	613b      	str	r3, [r7, #16]
 8006eb6:	e009      	b.n	8006ecc <USB_DevInit+0x34>
 8006eb8:	687a      	ldr	r2, [r7, #4]
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	3340      	adds	r3, #64	; 0x40
 8006ebe:	009b      	lsls	r3, r3, #2
 8006ec0:	4413      	add	r3, r2
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	605a      	str	r2, [r3, #4]
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	3301      	adds	r3, #1
 8006eca:	613b      	str	r3, [r7, #16]
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	2b0e      	cmp	r3, #14
 8006ed0:	d9f2      	bls.n	8006eb8 <USB_DevInit+0x20>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ed6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	639a      	str	r2, [r3, #56]	; 0x38
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006ee4:	461a      	mov	r2, r3
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	6013      	str	r3, [r2, #0]
 8006eea:	2103      	movs	r1, #3
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f000 f959 	bl	80071a4 <USB_SetDevSpeed>
 8006ef2:	2110      	movs	r1, #16
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f000 f8f1 	bl	80070dc <USB_FlushTxFifo>
 8006efa:	4603      	mov	r3, r0
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d001      	beq.n	8006f04 <USB_DevInit+0x6c>
 8006f00:	2301      	movs	r3, #1
 8006f02:	75fb      	strb	r3, [r7, #23]
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f000 f91d 	bl	8007144 <USB_FlushRxFifo>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d001      	beq.n	8006f14 <USB_DevInit+0x7c>
 8006f10:	2301      	movs	r3, #1
 8006f12:	75fb      	strb	r3, [r7, #23]
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f1a:	461a      	mov	r2, r3
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	6113      	str	r3, [r2, #16]
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f26:	461a      	mov	r2, r3
 8006f28:	2300      	movs	r3, #0
 8006f2a:	6153      	str	r3, [r2, #20]
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f32:	461a      	mov	r2, r3
 8006f34:	2300      	movs	r3, #0
 8006f36:	61d3      	str	r3, [r2, #28]
 8006f38:	2300      	movs	r3, #0
 8006f3a:	613b      	str	r3, [r7, #16]
 8006f3c:	e043      	b.n	8006fc6 <USB_DevInit+0x12e>
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	015a      	lsls	r2, r3, #5
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	4413      	add	r3, r2
 8006f46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f54:	d118      	bne.n	8006f88 <USB_DevInit+0xf0>
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d10a      	bne.n	8006f72 <USB_DevInit+0xda>
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	015a      	lsls	r2, r3, #5
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	4413      	add	r3, r2
 8006f64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f68:	461a      	mov	r2, r3
 8006f6a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006f6e:	6013      	str	r3, [r2, #0]
 8006f70:	e013      	b.n	8006f9a <USB_DevInit+0x102>
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	015a      	lsls	r2, r3, #5
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	4413      	add	r3, r2
 8006f7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f7e:	461a      	mov	r2, r3
 8006f80:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006f84:	6013      	str	r3, [r2, #0]
 8006f86:	e008      	b.n	8006f9a <USB_DevInit+0x102>
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	015a      	lsls	r2, r3, #5
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	4413      	add	r3, r2
 8006f90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f94:	461a      	mov	r2, r3
 8006f96:	2300      	movs	r3, #0
 8006f98:	6013      	str	r3, [r2, #0]
 8006f9a:	693b      	ldr	r3, [r7, #16]
 8006f9c:	015a      	lsls	r2, r3, #5
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	4413      	add	r3, r2
 8006fa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	2300      	movs	r3, #0
 8006faa:	6113      	str	r3, [r2, #16]
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	015a      	lsls	r2, r3, #5
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	4413      	add	r3, r2
 8006fb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fb8:	461a      	mov	r2, r3
 8006fba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006fbe:	6093      	str	r3, [r2, #8]
 8006fc0:	693b      	ldr	r3, [r7, #16]
 8006fc2:	3301      	adds	r3, #1
 8006fc4:	613b      	str	r3, [r7, #16]
 8006fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc8:	693a      	ldr	r2, [r7, #16]
 8006fca:	429a      	cmp	r2, r3
 8006fcc:	d3b7      	bcc.n	8006f3e <USB_DevInit+0xa6>
 8006fce:	2300      	movs	r3, #0
 8006fd0:	613b      	str	r3, [r7, #16]
 8006fd2:	e043      	b.n	800705c <USB_DevInit+0x1c4>
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	015a      	lsls	r2, r3, #5
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	4413      	add	r3, r2
 8006fdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006fe6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006fea:	d118      	bne.n	800701e <USB_DevInit+0x186>
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d10a      	bne.n	8007008 <USB_DevInit+0x170>
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	015a      	lsls	r2, r3, #5
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	4413      	add	r3, r2
 8006ffa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ffe:	461a      	mov	r2, r3
 8007000:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007004:	6013      	str	r3, [r2, #0]
 8007006:	e013      	b.n	8007030 <USB_DevInit+0x198>
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	015a      	lsls	r2, r3, #5
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	4413      	add	r3, r2
 8007010:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007014:	461a      	mov	r2, r3
 8007016:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800701a:	6013      	str	r3, [r2, #0]
 800701c:	e008      	b.n	8007030 <USB_DevInit+0x198>
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	015a      	lsls	r2, r3, #5
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	4413      	add	r3, r2
 8007026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800702a:	461a      	mov	r2, r3
 800702c:	2300      	movs	r3, #0
 800702e:	6013      	str	r3, [r2, #0]
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	015a      	lsls	r2, r3, #5
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	4413      	add	r3, r2
 8007038:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800703c:	461a      	mov	r2, r3
 800703e:	2300      	movs	r3, #0
 8007040:	6113      	str	r3, [r2, #16]
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	015a      	lsls	r2, r3, #5
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	4413      	add	r3, r2
 800704a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800704e:	461a      	mov	r2, r3
 8007050:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007054:	6093      	str	r3, [r2, #8]
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	3301      	adds	r3, #1
 800705a:	613b      	str	r3, [r7, #16]
 800705c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800705e:	693a      	ldr	r2, [r7, #16]
 8007060:	429a      	cmp	r2, r3
 8007062:	d3b7      	bcc.n	8006fd4 <USB_DevInit+0x13c>
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800706a:	691b      	ldr	r3, [r3, #16]
 800706c:	68fa      	ldr	r2, [r7, #12]
 800706e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007072:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007076:	6113      	str	r3, [r2, #16]
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2200      	movs	r2, #0
 800707c:	619a      	str	r2, [r3, #24]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007084:	615a      	str	r2, [r3, #20]
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	699b      	ldr	r3, [r3, #24]
 800708a:	f043 0210 	orr.w	r2, r3, #16
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	619a      	str	r2, [r3, #24]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	699a      	ldr	r2, [r3, #24]
 8007096:	4b10      	ldr	r3, [pc, #64]	; (80070d8 <USB_DevInit+0x240>)
 8007098:	4313      	orrs	r3, r2
 800709a:	687a      	ldr	r2, [r7, #4]
 800709c:	6193      	str	r3, [r2, #24]
 800709e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d005      	beq.n	80070b0 <USB_DevInit+0x218>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	699b      	ldr	r3, [r3, #24]
 80070a8:	f043 0208 	orr.w	r2, r3, #8
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	619a      	str	r2, [r3, #24]
 80070b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070b2:	2b01      	cmp	r3, #1
 80070b4:	d107      	bne.n	80070c6 <USB_DevInit+0x22e>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	699b      	ldr	r3, [r3, #24]
 80070ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80070be:	f043 0304 	orr.w	r3, r3, #4
 80070c2:	687a      	ldr	r2, [r7, #4]
 80070c4:	6193      	str	r3, [r2, #24]
 80070c6:	7dfb      	ldrb	r3, [r7, #23]
 80070c8:	4618      	mov	r0, r3
 80070ca:	3718      	adds	r7, #24
 80070cc:	46bd      	mov	sp, r7
 80070ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80070d2:	b004      	add	sp, #16
 80070d4:	4770      	bx	lr
 80070d6:	bf00      	nop
 80070d8:	803c3800 	.word	0x803c3800

080070dc <USB_FlushTxFifo>:
 80070dc:	b480      	push	{r7}
 80070de:	b085      	sub	sp, #20
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
 80070e4:	6039      	str	r1, [r7, #0]
 80070e6:	2300      	movs	r3, #0
 80070e8:	60fb      	str	r3, [r7, #12]
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	3301      	adds	r3, #1
 80070ee:	60fb      	str	r3, [r7, #12]
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	4a13      	ldr	r2, [pc, #76]	; (8007140 <USB_FlushTxFifo+0x64>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d901      	bls.n	80070fc <USB_FlushTxFifo+0x20>
 80070f8:	2303      	movs	r3, #3
 80070fa:	e01b      	b.n	8007134 <USB_FlushTxFifo+0x58>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	691b      	ldr	r3, [r3, #16]
 8007100:	2b00      	cmp	r3, #0
 8007102:	daf2      	bge.n	80070ea <USB_FlushTxFifo+0xe>
 8007104:	2300      	movs	r3, #0
 8007106:	60fb      	str	r3, [r7, #12]
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	019b      	lsls	r3, r3, #6
 800710c:	f043 0220 	orr.w	r2, r3, #32
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	611a      	str	r2, [r3, #16]
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	3301      	adds	r3, #1
 8007118:	60fb      	str	r3, [r7, #12]
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	4a08      	ldr	r2, [pc, #32]	; (8007140 <USB_FlushTxFifo+0x64>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d901      	bls.n	8007126 <USB_FlushTxFifo+0x4a>
 8007122:	2303      	movs	r3, #3
 8007124:	e006      	b.n	8007134 <USB_FlushTxFifo+0x58>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	691b      	ldr	r3, [r3, #16]
 800712a:	f003 0320 	and.w	r3, r3, #32
 800712e:	2b20      	cmp	r3, #32
 8007130:	d0f0      	beq.n	8007114 <USB_FlushTxFifo+0x38>
 8007132:	2300      	movs	r3, #0
 8007134:	4618      	mov	r0, r3
 8007136:	3714      	adds	r7, #20
 8007138:	46bd      	mov	sp, r7
 800713a:	bc80      	pop	{r7}
 800713c:	4770      	bx	lr
 800713e:	bf00      	nop
 8007140:	00030d40 	.word	0x00030d40

08007144 <USB_FlushRxFifo>:
 8007144:	b480      	push	{r7}
 8007146:	b085      	sub	sp, #20
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
 800714c:	2300      	movs	r3, #0
 800714e:	60fb      	str	r3, [r7, #12]
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	3301      	adds	r3, #1
 8007154:	60fb      	str	r3, [r7, #12]
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	4a11      	ldr	r2, [pc, #68]	; (80071a0 <USB_FlushRxFifo+0x5c>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d901      	bls.n	8007162 <USB_FlushRxFifo+0x1e>
 800715e:	2303      	movs	r3, #3
 8007160:	e018      	b.n	8007194 <USB_FlushRxFifo+0x50>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	691b      	ldr	r3, [r3, #16]
 8007166:	2b00      	cmp	r3, #0
 8007168:	daf2      	bge.n	8007150 <USB_FlushRxFifo+0xc>
 800716a:	2300      	movs	r3, #0
 800716c:	60fb      	str	r3, [r7, #12]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2210      	movs	r2, #16
 8007172:	611a      	str	r2, [r3, #16]
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	3301      	adds	r3, #1
 8007178:	60fb      	str	r3, [r7, #12]
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	4a08      	ldr	r2, [pc, #32]	; (80071a0 <USB_FlushRxFifo+0x5c>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d901      	bls.n	8007186 <USB_FlushRxFifo+0x42>
 8007182:	2303      	movs	r3, #3
 8007184:	e006      	b.n	8007194 <USB_FlushRxFifo+0x50>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	691b      	ldr	r3, [r3, #16]
 800718a:	f003 0310 	and.w	r3, r3, #16
 800718e:	2b10      	cmp	r3, #16
 8007190:	d0f0      	beq.n	8007174 <USB_FlushRxFifo+0x30>
 8007192:	2300      	movs	r3, #0
 8007194:	4618      	mov	r0, r3
 8007196:	3714      	adds	r7, #20
 8007198:	46bd      	mov	sp, r7
 800719a:	bc80      	pop	{r7}
 800719c:	4770      	bx	lr
 800719e:	bf00      	nop
 80071a0:	00030d40 	.word	0x00030d40

080071a4 <USB_SetDevSpeed>:
 80071a4:	b480      	push	{r7}
 80071a6:	b085      	sub	sp, #20
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
 80071ac:	460b      	mov	r3, r1
 80071ae:	70fb      	strb	r3, [r7, #3]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	60fb      	str	r3, [r7, #12]
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071ba:	681a      	ldr	r2, [r3, #0]
 80071bc:	78fb      	ldrb	r3, [r7, #3]
 80071be:	68f9      	ldr	r1, [r7, #12]
 80071c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80071c4:	4313      	orrs	r3, r2
 80071c6:	600b      	str	r3, [r1, #0]
 80071c8:	2300      	movs	r3, #0
 80071ca:	4618      	mov	r0, r3
 80071cc:	3714      	adds	r7, #20
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bc80      	pop	{r7}
 80071d2:	4770      	bx	lr

080071d4 <USB_GetDevSpeed>:
 80071d4:	b480      	push	{r7}
 80071d6:	b087      	sub	sp, #28
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	613b      	str	r3, [r7, #16]
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071e6:	689b      	ldr	r3, [r3, #8]
 80071e8:	f003 0306 	and.w	r3, r3, #6
 80071ec:	60fb      	str	r3, [r7, #12]
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	2b02      	cmp	r3, #2
 80071f2:	d002      	beq.n	80071fa <USB_GetDevSpeed+0x26>
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2b06      	cmp	r3, #6
 80071f8:	d102      	bne.n	8007200 <USB_GetDevSpeed+0x2c>
 80071fa:	2302      	movs	r3, #2
 80071fc:	75fb      	strb	r3, [r7, #23]
 80071fe:	e001      	b.n	8007204 <USB_GetDevSpeed+0x30>
 8007200:	230f      	movs	r3, #15
 8007202:	75fb      	strb	r3, [r7, #23]
 8007204:	7dfb      	ldrb	r3, [r7, #23]
 8007206:	4618      	mov	r0, r3
 8007208:	371c      	adds	r7, #28
 800720a:	46bd      	mov	sp, r7
 800720c:	bc80      	pop	{r7}
 800720e:	4770      	bx	lr

08007210 <USB_ActivateEndpoint>:
 8007210:	b480      	push	{r7}
 8007212:	b085      	sub	sp, #20
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
 8007218:	6039      	str	r1, [r7, #0]
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	60fb      	str	r3, [r7, #12]
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	781b      	ldrb	r3, [r3, #0]
 8007222:	60bb      	str	r3, [r7, #8]
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	785b      	ldrb	r3, [r3, #1]
 8007228:	2b01      	cmp	r3, #1
 800722a:	d13a      	bne.n	80072a2 <USB_ActivateEndpoint+0x92>
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007232:	69da      	ldr	r2, [r3, #28]
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	781b      	ldrb	r3, [r3, #0]
 8007238:	f003 030f 	and.w	r3, r3, #15
 800723c:	2101      	movs	r1, #1
 800723e:	fa01 f303 	lsl.w	r3, r1, r3
 8007242:	b29b      	uxth	r3, r3
 8007244:	68f9      	ldr	r1, [r7, #12]
 8007246:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800724a:	4313      	orrs	r3, r2
 800724c:	61cb      	str	r3, [r1, #28]
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	015a      	lsls	r2, r3, #5
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	4413      	add	r3, r2
 8007256:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007260:	2b00      	cmp	r3, #0
 8007262:	d155      	bne.n	8007310 <USB_ActivateEndpoint+0x100>
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	015a      	lsls	r2, r3, #5
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	4413      	add	r3, r2
 800726c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007270:	681a      	ldr	r2, [r3, #0]
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	689b      	ldr	r3, [r3, #8]
 8007276:	f3c3 010a 	ubfx	r1, r3, #0, #11
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	791b      	ldrb	r3, [r3, #4]
 800727e:	049b      	lsls	r3, r3, #18
 8007280:	4319      	orrs	r1, r3
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	059b      	lsls	r3, r3, #22
 8007286:	430b      	orrs	r3, r1
 8007288:	4313      	orrs	r3, r2
 800728a:	68ba      	ldr	r2, [r7, #8]
 800728c:	0151      	lsls	r1, r2, #5
 800728e:	68fa      	ldr	r2, [r7, #12]
 8007290:	440a      	add	r2, r1
 8007292:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007296:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800729a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800729e:	6013      	str	r3, [r2, #0]
 80072a0:	e036      	b.n	8007310 <USB_ActivateEndpoint+0x100>
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072a8:	69da      	ldr	r2, [r3, #28]
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	781b      	ldrb	r3, [r3, #0]
 80072ae:	f003 030f 	and.w	r3, r3, #15
 80072b2:	2101      	movs	r1, #1
 80072b4:	fa01 f303 	lsl.w	r3, r1, r3
 80072b8:	041b      	lsls	r3, r3, #16
 80072ba:	68f9      	ldr	r1, [r7, #12]
 80072bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80072c0:	4313      	orrs	r3, r2
 80072c2:	61cb      	str	r3, [r1, #28]
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	015a      	lsls	r2, r3, #5
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	4413      	add	r3, r2
 80072cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d11a      	bne.n	8007310 <USB_ActivateEndpoint+0x100>
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	015a      	lsls	r2, r3, #5
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	4413      	add	r3, r2
 80072e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072e6:	681a      	ldr	r2, [r3, #0]
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	689b      	ldr	r3, [r3, #8]
 80072ec:	f3c3 010a 	ubfx	r1, r3, #0, #11
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	791b      	ldrb	r3, [r3, #4]
 80072f4:	049b      	lsls	r3, r3, #18
 80072f6:	430b      	orrs	r3, r1
 80072f8:	4313      	orrs	r3, r2
 80072fa:	68ba      	ldr	r2, [r7, #8]
 80072fc:	0151      	lsls	r1, r2, #5
 80072fe:	68fa      	ldr	r2, [r7, #12]
 8007300:	440a      	add	r2, r1
 8007302:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007306:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800730a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800730e:	6013      	str	r3, [r2, #0]
 8007310:	2300      	movs	r3, #0
 8007312:	4618      	mov	r0, r3
 8007314:	3714      	adds	r7, #20
 8007316:	46bd      	mov	sp, r7
 8007318:	bc80      	pop	{r7}
 800731a:	4770      	bx	lr

0800731c <USB_DeactivateEndpoint>:
 800731c:	b480      	push	{r7}
 800731e:	b085      	sub	sp, #20
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
 8007324:	6039      	str	r1, [r7, #0]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	60fb      	str	r3, [r7, #12]
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	781b      	ldrb	r3, [r3, #0]
 800732e:	60bb      	str	r3, [r7, #8]
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	785b      	ldrb	r3, [r3, #1]
 8007334:	2b01      	cmp	r3, #1
 8007336:	d161      	bne.n	80073fc <USB_DeactivateEndpoint+0xe0>
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	015a      	lsls	r2, r3, #5
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	4413      	add	r3, r2
 8007340:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800734a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800734e:	d11f      	bne.n	8007390 <USB_DeactivateEndpoint+0x74>
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	015a      	lsls	r2, r3, #5
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	4413      	add	r3, r2
 8007358:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	68ba      	ldr	r2, [r7, #8]
 8007360:	0151      	lsls	r1, r2, #5
 8007362:	68fa      	ldr	r2, [r7, #12]
 8007364:	440a      	add	r2, r1
 8007366:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800736a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800736e:	6013      	str	r3, [r2, #0]
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	015a      	lsls	r2, r3, #5
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	4413      	add	r3, r2
 8007378:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	68ba      	ldr	r2, [r7, #8]
 8007380:	0151      	lsls	r1, r2, #5
 8007382:	68fa      	ldr	r2, [r7, #12]
 8007384:	440a      	add	r2, r1
 8007386:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800738a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800738e:	6013      	str	r3, [r2, #0]
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007396:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	781b      	ldrb	r3, [r3, #0]
 800739c:	f003 030f 	and.w	r3, r3, #15
 80073a0:	2101      	movs	r1, #1
 80073a2:	fa01 f303 	lsl.w	r3, r1, r3
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	43db      	mvns	r3, r3
 80073aa:	68f9      	ldr	r1, [r7, #12]
 80073ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80073b0:	4013      	ands	r3, r2
 80073b2:	63cb      	str	r3, [r1, #60]	; 0x3c
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073ba:	69da      	ldr	r2, [r3, #28]
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	781b      	ldrb	r3, [r3, #0]
 80073c0:	f003 030f 	and.w	r3, r3, #15
 80073c4:	2101      	movs	r1, #1
 80073c6:	fa01 f303 	lsl.w	r3, r1, r3
 80073ca:	b29b      	uxth	r3, r3
 80073cc:	43db      	mvns	r3, r3
 80073ce:	68f9      	ldr	r1, [r7, #12]
 80073d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80073d4:	4013      	ands	r3, r2
 80073d6:	61cb      	str	r3, [r1, #28]
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	015a      	lsls	r2, r3, #5
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	4413      	add	r3, r2
 80073e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073e4:	681a      	ldr	r2, [r3, #0]
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	0159      	lsls	r1, r3, #5
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	440b      	add	r3, r1
 80073ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073f2:	4619      	mov	r1, r3
 80073f4:	4b35      	ldr	r3, [pc, #212]	; (80074cc <USB_DeactivateEndpoint+0x1b0>)
 80073f6:	4013      	ands	r3, r2
 80073f8:	600b      	str	r3, [r1, #0]
 80073fa:	e060      	b.n	80074be <USB_DeactivateEndpoint+0x1a2>
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	015a      	lsls	r2, r3, #5
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	4413      	add	r3, r2
 8007404:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800740e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007412:	d11f      	bne.n	8007454 <USB_DeactivateEndpoint+0x138>
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	015a      	lsls	r2, r3, #5
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	4413      	add	r3, r2
 800741c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	68ba      	ldr	r2, [r7, #8]
 8007424:	0151      	lsls	r1, r2, #5
 8007426:	68fa      	ldr	r2, [r7, #12]
 8007428:	440a      	add	r2, r1
 800742a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800742e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007432:	6013      	str	r3, [r2, #0]
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	015a      	lsls	r2, r3, #5
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	4413      	add	r3, r2
 800743c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	68ba      	ldr	r2, [r7, #8]
 8007444:	0151      	lsls	r1, r2, #5
 8007446:	68fa      	ldr	r2, [r7, #12]
 8007448:	440a      	add	r2, r1
 800744a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800744e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007452:	6013      	str	r3, [r2, #0]
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800745a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	781b      	ldrb	r3, [r3, #0]
 8007460:	f003 030f 	and.w	r3, r3, #15
 8007464:	2101      	movs	r1, #1
 8007466:	fa01 f303 	lsl.w	r3, r1, r3
 800746a:	041b      	lsls	r3, r3, #16
 800746c:	43db      	mvns	r3, r3
 800746e:	68f9      	ldr	r1, [r7, #12]
 8007470:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007474:	4013      	ands	r3, r2
 8007476:	63cb      	str	r3, [r1, #60]	; 0x3c
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800747e:	69da      	ldr	r2, [r3, #28]
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	781b      	ldrb	r3, [r3, #0]
 8007484:	f003 030f 	and.w	r3, r3, #15
 8007488:	2101      	movs	r1, #1
 800748a:	fa01 f303 	lsl.w	r3, r1, r3
 800748e:	041b      	lsls	r3, r3, #16
 8007490:	43db      	mvns	r3, r3
 8007492:	68f9      	ldr	r1, [r7, #12]
 8007494:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007498:	4013      	ands	r3, r2
 800749a:	61cb      	str	r3, [r1, #28]
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	015a      	lsls	r2, r3, #5
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	4413      	add	r3, r2
 80074a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074a8:	681a      	ldr	r2, [r3, #0]
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	0159      	lsls	r1, r3, #5
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	440b      	add	r3, r1
 80074b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074b6:	4619      	mov	r1, r3
 80074b8:	4b05      	ldr	r3, [pc, #20]	; (80074d0 <USB_DeactivateEndpoint+0x1b4>)
 80074ba:	4013      	ands	r3, r2
 80074bc:	600b      	str	r3, [r1, #0]
 80074be:	2300      	movs	r3, #0
 80074c0:	4618      	mov	r0, r3
 80074c2:	3714      	adds	r7, #20
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bc80      	pop	{r7}
 80074c8:	4770      	bx	lr
 80074ca:	bf00      	nop
 80074cc:	ec337800 	.word	0xec337800
 80074d0:	eff37800 	.word	0xeff37800

080074d4 <USB_EPStartXfer>:
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b086      	sub	sp, #24
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
 80074dc:	6039      	str	r1, [r7, #0]
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	617b      	str	r3, [r7, #20]
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	781b      	ldrb	r3, [r3, #0]
 80074e6:	613b      	str	r3, [r7, #16]
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	785b      	ldrb	r3, [r3, #1]
 80074ec:	2b01      	cmp	r3, #1
 80074ee:	f040 8128 	bne.w	8007742 <USB_EPStartXfer+0x26e>
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	691b      	ldr	r3, [r3, #16]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d132      	bne.n	8007560 <USB_EPStartXfer+0x8c>
 80074fa:	693b      	ldr	r3, [r7, #16]
 80074fc:	015a      	lsls	r2, r3, #5
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	4413      	add	r3, r2
 8007502:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007506:	691b      	ldr	r3, [r3, #16]
 8007508:	693a      	ldr	r2, [r7, #16]
 800750a:	0151      	lsls	r1, r2, #5
 800750c:	697a      	ldr	r2, [r7, #20]
 800750e:	440a      	add	r2, r1
 8007510:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007514:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007518:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800751c:	6113      	str	r3, [r2, #16]
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	015a      	lsls	r2, r3, #5
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	4413      	add	r3, r2
 8007526:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800752a:	691b      	ldr	r3, [r3, #16]
 800752c:	693a      	ldr	r2, [r7, #16]
 800752e:	0151      	lsls	r1, r2, #5
 8007530:	697a      	ldr	r2, [r7, #20]
 8007532:	440a      	add	r2, r1
 8007534:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007538:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800753c:	6113      	str	r3, [r2, #16]
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	015a      	lsls	r2, r3, #5
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	4413      	add	r3, r2
 8007546:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800754a:	691b      	ldr	r3, [r3, #16]
 800754c:	693a      	ldr	r2, [r7, #16]
 800754e:	0151      	lsls	r1, r2, #5
 8007550:	697a      	ldr	r2, [r7, #20]
 8007552:	440a      	add	r2, r1
 8007554:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007558:	0cdb      	lsrs	r3, r3, #19
 800755a:	04db      	lsls	r3, r3, #19
 800755c:	6113      	str	r3, [r2, #16]
 800755e:	e092      	b.n	8007686 <USB_EPStartXfer+0x1b2>
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	015a      	lsls	r2, r3, #5
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	4413      	add	r3, r2
 8007568:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800756c:	691b      	ldr	r3, [r3, #16]
 800756e:	693a      	ldr	r2, [r7, #16]
 8007570:	0151      	lsls	r1, r2, #5
 8007572:	697a      	ldr	r2, [r7, #20]
 8007574:	440a      	add	r2, r1
 8007576:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800757a:	0cdb      	lsrs	r3, r3, #19
 800757c:	04db      	lsls	r3, r3, #19
 800757e:	6113      	str	r3, [r2, #16]
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	015a      	lsls	r2, r3, #5
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	4413      	add	r3, r2
 8007588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800758c:	691b      	ldr	r3, [r3, #16]
 800758e:	693a      	ldr	r2, [r7, #16]
 8007590:	0151      	lsls	r1, r2, #5
 8007592:	697a      	ldr	r2, [r7, #20]
 8007594:	440a      	add	r2, r1
 8007596:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800759a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800759e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80075a2:	6113      	str	r3, [r2, #16]
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d11a      	bne.n	80075e0 <USB_EPStartXfer+0x10c>
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	691a      	ldr	r2, [r3, #16]
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	689b      	ldr	r3, [r3, #8]
 80075b2:	429a      	cmp	r2, r3
 80075b4:	d903      	bls.n	80075be <USB_EPStartXfer+0xea>
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	689a      	ldr	r2, [r3, #8]
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	611a      	str	r2, [r3, #16]
 80075be:	693b      	ldr	r3, [r7, #16]
 80075c0:	015a      	lsls	r2, r3, #5
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	4413      	add	r3, r2
 80075c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075ca:	691b      	ldr	r3, [r3, #16]
 80075cc:	693a      	ldr	r2, [r7, #16]
 80075ce:	0151      	lsls	r1, r2, #5
 80075d0:	697a      	ldr	r2, [r7, #20]
 80075d2:	440a      	add	r2, r1
 80075d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80075dc:	6113      	str	r3, [r2, #16]
 80075de:	e01b      	b.n	8007618 <USB_EPStartXfer+0x144>
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	015a      	lsls	r2, r3, #5
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	4413      	add	r3, r2
 80075e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075ec:	691a      	ldr	r2, [r3, #16]
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	6919      	ldr	r1, [r3, #16]
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	689b      	ldr	r3, [r3, #8]
 80075f6:	440b      	add	r3, r1
 80075f8:	1e59      	subs	r1, r3, #1
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	689b      	ldr	r3, [r3, #8]
 80075fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8007602:	04d9      	lsls	r1, r3, #19
 8007604:	4b8d      	ldr	r3, [pc, #564]	; (800783c <USB_EPStartXfer+0x368>)
 8007606:	400b      	ands	r3, r1
 8007608:	6939      	ldr	r1, [r7, #16]
 800760a:	0148      	lsls	r0, r1, #5
 800760c:	6979      	ldr	r1, [r7, #20]
 800760e:	4401      	add	r1, r0
 8007610:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007614:	4313      	orrs	r3, r2
 8007616:	610b      	str	r3, [r1, #16]
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	015a      	lsls	r2, r3, #5
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	4413      	add	r3, r2
 8007620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007624:	691a      	ldr	r2, [r3, #16]
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	691b      	ldr	r3, [r3, #16]
 800762a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800762e:	6939      	ldr	r1, [r7, #16]
 8007630:	0148      	lsls	r0, r1, #5
 8007632:	6979      	ldr	r1, [r7, #20]
 8007634:	4401      	add	r1, r0
 8007636:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800763a:	4313      	orrs	r3, r2
 800763c:	610b      	str	r3, [r1, #16]
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	791b      	ldrb	r3, [r3, #4]
 8007642:	2b01      	cmp	r3, #1
 8007644:	d11f      	bne.n	8007686 <USB_EPStartXfer+0x1b2>
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	015a      	lsls	r2, r3, #5
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	4413      	add	r3, r2
 800764e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007652:	691b      	ldr	r3, [r3, #16]
 8007654:	693a      	ldr	r2, [r7, #16]
 8007656:	0151      	lsls	r1, r2, #5
 8007658:	697a      	ldr	r2, [r7, #20]
 800765a:	440a      	add	r2, r1
 800765c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007660:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007664:	6113      	str	r3, [r2, #16]
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	015a      	lsls	r2, r3, #5
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	4413      	add	r3, r2
 800766e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007672:	691b      	ldr	r3, [r3, #16]
 8007674:	693a      	ldr	r2, [r7, #16]
 8007676:	0151      	lsls	r1, r2, #5
 8007678:	697a      	ldr	r2, [r7, #20]
 800767a:	440a      	add	r2, r1
 800767c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007680:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007684:	6113      	str	r3, [r2, #16]
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	015a      	lsls	r2, r3, #5
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	4413      	add	r3, r2
 800768e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	693a      	ldr	r2, [r7, #16]
 8007696:	0151      	lsls	r1, r2, #5
 8007698:	697a      	ldr	r2, [r7, #20]
 800769a:	440a      	add	r2, r1
 800769c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076a0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80076a4:	6013      	str	r3, [r2, #0]
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	791b      	ldrb	r3, [r3, #4]
 80076aa:	2b01      	cmp	r3, #1
 80076ac:	d015      	beq.n	80076da <USB_EPStartXfer+0x206>
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	691b      	ldr	r3, [r3, #16]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	f000 8139 	beq.w	800792a <USB_EPStartXfer+0x456>
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	781b      	ldrb	r3, [r3, #0]
 80076c4:	f003 030f 	and.w	r3, r3, #15
 80076c8:	2101      	movs	r1, #1
 80076ca:	fa01 f303 	lsl.w	r3, r1, r3
 80076ce:	6979      	ldr	r1, [r7, #20]
 80076d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80076d4:	4313      	orrs	r3, r2
 80076d6:	634b      	str	r3, [r1, #52]	; 0x34
 80076d8:	e127      	b.n	800792a <USB_EPStartXfer+0x456>
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076e0:	689b      	ldr	r3, [r3, #8]
 80076e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d110      	bne.n	800770c <USB_EPStartXfer+0x238>
 80076ea:	693b      	ldr	r3, [r7, #16]
 80076ec:	015a      	lsls	r2, r3, #5
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	4413      	add	r3, r2
 80076f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	693a      	ldr	r2, [r7, #16]
 80076fa:	0151      	lsls	r1, r2, #5
 80076fc:	697a      	ldr	r2, [r7, #20]
 80076fe:	440a      	add	r2, r1
 8007700:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007704:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007708:	6013      	str	r3, [r2, #0]
 800770a:	e00f      	b.n	800772c <USB_EPStartXfer+0x258>
 800770c:	693b      	ldr	r3, [r7, #16]
 800770e:	015a      	lsls	r2, r3, #5
 8007710:	697b      	ldr	r3, [r7, #20]
 8007712:	4413      	add	r3, r2
 8007714:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	693a      	ldr	r2, [r7, #16]
 800771c:	0151      	lsls	r1, r2, #5
 800771e:	697a      	ldr	r2, [r7, #20]
 8007720:	440a      	add	r2, r1
 8007722:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007726:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800772a:	6013      	str	r3, [r2, #0]
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	68d9      	ldr	r1, [r3, #12]
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	781a      	ldrb	r2, [r3, #0]
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	691b      	ldr	r3, [r3, #16]
 8007738:	b29b      	uxth	r3, r3
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f000 f9a5 	bl	8007a8a <USB_WritePacket>
 8007740:	e0f3      	b.n	800792a <USB_EPStartXfer+0x456>
 8007742:	693b      	ldr	r3, [r7, #16]
 8007744:	015a      	lsls	r2, r3, #5
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	4413      	add	r3, r2
 800774a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800774e:	691b      	ldr	r3, [r3, #16]
 8007750:	693a      	ldr	r2, [r7, #16]
 8007752:	0151      	lsls	r1, r2, #5
 8007754:	697a      	ldr	r2, [r7, #20]
 8007756:	440a      	add	r2, r1
 8007758:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800775c:	0cdb      	lsrs	r3, r3, #19
 800775e:	04db      	lsls	r3, r3, #19
 8007760:	6113      	str	r3, [r2, #16]
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	015a      	lsls	r2, r3, #5
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	4413      	add	r3, r2
 800776a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800776e:	691b      	ldr	r3, [r3, #16]
 8007770:	693a      	ldr	r2, [r7, #16]
 8007772:	0151      	lsls	r1, r2, #5
 8007774:	697a      	ldr	r2, [r7, #20]
 8007776:	440a      	add	r2, r1
 8007778:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800777c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007780:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007784:	6113      	str	r3, [r2, #16]
 8007786:	693b      	ldr	r3, [r7, #16]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d12f      	bne.n	80077ec <USB_EPStartXfer+0x318>
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	691b      	ldr	r3, [r3, #16]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d003      	beq.n	800779c <USB_EPStartXfer+0x2c8>
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	689a      	ldr	r2, [r3, #8]
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	611a      	str	r2, [r3, #16]
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	689a      	ldr	r2, [r3, #8]
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	621a      	str	r2, [r3, #32]
 80077a4:	693b      	ldr	r3, [r7, #16]
 80077a6:	015a      	lsls	r2, r3, #5
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	4413      	add	r3, r2
 80077ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077b0:	691a      	ldr	r2, [r3, #16]
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	6a1b      	ldr	r3, [r3, #32]
 80077b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80077ba:	6939      	ldr	r1, [r7, #16]
 80077bc:	0148      	lsls	r0, r1, #5
 80077be:	6979      	ldr	r1, [r7, #20]
 80077c0:	4401      	add	r1, r0
 80077c2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80077c6:	4313      	orrs	r3, r2
 80077c8:	610b      	str	r3, [r1, #16]
 80077ca:	693b      	ldr	r3, [r7, #16]
 80077cc:	015a      	lsls	r2, r3, #5
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	4413      	add	r3, r2
 80077d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077d6:	691b      	ldr	r3, [r3, #16]
 80077d8:	693a      	ldr	r2, [r7, #16]
 80077da:	0151      	lsls	r1, r2, #5
 80077dc:	697a      	ldr	r2, [r7, #20]
 80077de:	440a      	add	r2, r1
 80077e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80077e8:	6113      	str	r3, [r2, #16]
 80077ea:	e061      	b.n	80078b0 <USB_EPStartXfer+0x3dc>
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	691b      	ldr	r3, [r3, #16]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d125      	bne.n	8007840 <USB_EPStartXfer+0x36c>
 80077f4:	693b      	ldr	r3, [r7, #16]
 80077f6:	015a      	lsls	r2, r3, #5
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	4413      	add	r3, r2
 80077fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007800:	691a      	ldr	r2, [r3, #16]
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	689b      	ldr	r3, [r3, #8]
 8007806:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800780a:	6939      	ldr	r1, [r7, #16]
 800780c:	0148      	lsls	r0, r1, #5
 800780e:	6979      	ldr	r1, [r7, #20]
 8007810:	4401      	add	r1, r0
 8007812:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007816:	4313      	orrs	r3, r2
 8007818:	610b      	str	r3, [r1, #16]
 800781a:	693b      	ldr	r3, [r7, #16]
 800781c:	015a      	lsls	r2, r3, #5
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	4413      	add	r3, r2
 8007822:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007826:	691b      	ldr	r3, [r3, #16]
 8007828:	693a      	ldr	r2, [r7, #16]
 800782a:	0151      	lsls	r1, r2, #5
 800782c:	697a      	ldr	r2, [r7, #20]
 800782e:	440a      	add	r2, r1
 8007830:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007834:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007838:	6113      	str	r3, [r2, #16]
 800783a:	e039      	b.n	80078b0 <USB_EPStartXfer+0x3dc>
 800783c:	1ff80000 	.word	0x1ff80000
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	691a      	ldr	r2, [r3, #16]
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	689b      	ldr	r3, [r3, #8]
 8007848:	4413      	add	r3, r2
 800784a:	1e5a      	subs	r2, r3, #1
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	689b      	ldr	r3, [r3, #8]
 8007850:	fbb2 f3f3 	udiv	r3, r2, r3
 8007854:	81fb      	strh	r3, [r7, #14]
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	689b      	ldr	r3, [r3, #8]
 800785a:	89fa      	ldrh	r2, [r7, #14]
 800785c:	fb03 f202 	mul.w	r2, r3, r2
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	621a      	str	r2, [r3, #32]
 8007864:	693b      	ldr	r3, [r7, #16]
 8007866:	015a      	lsls	r2, r3, #5
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	4413      	add	r3, r2
 800786c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007870:	691a      	ldr	r2, [r3, #16]
 8007872:	89fb      	ldrh	r3, [r7, #14]
 8007874:	04d9      	lsls	r1, r3, #19
 8007876:	4b2f      	ldr	r3, [pc, #188]	; (8007934 <USB_EPStartXfer+0x460>)
 8007878:	400b      	ands	r3, r1
 800787a:	6939      	ldr	r1, [r7, #16]
 800787c:	0148      	lsls	r0, r1, #5
 800787e:	6979      	ldr	r1, [r7, #20]
 8007880:	4401      	add	r1, r0
 8007882:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007886:	4313      	orrs	r3, r2
 8007888:	610b      	str	r3, [r1, #16]
 800788a:	693b      	ldr	r3, [r7, #16]
 800788c:	015a      	lsls	r2, r3, #5
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	4413      	add	r3, r2
 8007892:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007896:	691a      	ldr	r2, [r3, #16]
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	6a1b      	ldr	r3, [r3, #32]
 800789c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80078a0:	6939      	ldr	r1, [r7, #16]
 80078a2:	0148      	lsls	r0, r1, #5
 80078a4:	6979      	ldr	r1, [r7, #20]
 80078a6:	4401      	add	r1, r0
 80078a8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80078ac:	4313      	orrs	r3, r2
 80078ae:	610b      	str	r3, [r1, #16]
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	791b      	ldrb	r3, [r3, #4]
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	d128      	bne.n	800790a <USB_EPStartXfer+0x436>
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078be:	689b      	ldr	r3, [r3, #8]
 80078c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d110      	bne.n	80078ea <USB_EPStartXfer+0x416>
 80078c8:	693b      	ldr	r3, [r7, #16]
 80078ca:	015a      	lsls	r2, r3, #5
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	4413      	add	r3, r2
 80078d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	693a      	ldr	r2, [r7, #16]
 80078d8:	0151      	lsls	r1, r2, #5
 80078da:	697a      	ldr	r2, [r7, #20]
 80078dc:	440a      	add	r2, r1
 80078de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078e2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80078e6:	6013      	str	r3, [r2, #0]
 80078e8:	e00f      	b.n	800790a <USB_EPStartXfer+0x436>
 80078ea:	693b      	ldr	r3, [r7, #16]
 80078ec:	015a      	lsls	r2, r3, #5
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	4413      	add	r3, r2
 80078f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	693a      	ldr	r2, [r7, #16]
 80078fa:	0151      	lsls	r1, r2, #5
 80078fc:	697a      	ldr	r2, [r7, #20]
 80078fe:	440a      	add	r2, r1
 8007900:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007904:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007908:	6013      	str	r3, [r2, #0]
 800790a:	693b      	ldr	r3, [r7, #16]
 800790c:	015a      	lsls	r2, r3, #5
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	4413      	add	r3, r2
 8007912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	693a      	ldr	r2, [r7, #16]
 800791a:	0151      	lsls	r1, r2, #5
 800791c:	697a      	ldr	r2, [r7, #20]
 800791e:	440a      	add	r2, r1
 8007920:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007924:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007928:	6013      	str	r3, [r2, #0]
 800792a:	2300      	movs	r3, #0
 800792c:	4618      	mov	r0, r3
 800792e:	3718      	adds	r7, #24
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}
 8007934:	1ff80000 	.word	0x1ff80000

08007938 <USB_EPStopXfer>:
 8007938:	b480      	push	{r7}
 800793a:	b087      	sub	sp, #28
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
 8007940:	6039      	str	r1, [r7, #0]
 8007942:	2300      	movs	r3, #0
 8007944:	60fb      	str	r3, [r7, #12]
 8007946:	2300      	movs	r3, #0
 8007948:	75fb      	strb	r3, [r7, #23]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	613b      	str	r3, [r7, #16]
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	785b      	ldrb	r3, [r3, #1]
 8007952:	2b01      	cmp	r3, #1
 8007954:	d14a      	bne.n	80079ec <USB_EPStopXfer+0xb4>
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	781b      	ldrb	r3, [r3, #0]
 800795a:	015a      	lsls	r2, r3, #5
 800795c:	693b      	ldr	r3, [r7, #16]
 800795e:	4413      	add	r3, r2
 8007960:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800796a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800796e:	f040 8086 	bne.w	8007a7e <USB_EPStopXfer+0x146>
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	781b      	ldrb	r3, [r3, #0]
 8007976:	015a      	lsls	r2, r3, #5
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	4413      	add	r3, r2
 800797c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	683a      	ldr	r2, [r7, #0]
 8007984:	7812      	ldrb	r2, [r2, #0]
 8007986:	0151      	lsls	r1, r2, #5
 8007988:	693a      	ldr	r2, [r7, #16]
 800798a:	440a      	add	r2, r1
 800798c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007990:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007994:	6013      	str	r3, [r2, #0]
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	781b      	ldrb	r3, [r3, #0]
 800799a:	015a      	lsls	r2, r3, #5
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	4413      	add	r3, r2
 80079a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	683a      	ldr	r2, [r7, #0]
 80079a8:	7812      	ldrb	r2, [r2, #0]
 80079aa:	0151      	lsls	r1, r2, #5
 80079ac:	693a      	ldr	r2, [r7, #16]
 80079ae:	440a      	add	r2, r1
 80079b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80079b8:	6013      	str	r3, [r2, #0]
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	3301      	adds	r3, #1
 80079be:	60fb      	str	r3, [r7, #12]
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	f242 7210 	movw	r2, #10000	; 0x2710
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d902      	bls.n	80079d0 <USB_EPStopXfer+0x98>
 80079ca:	2301      	movs	r3, #1
 80079cc:	75fb      	strb	r3, [r7, #23]
 80079ce:	e056      	b.n	8007a7e <USB_EPStopXfer+0x146>
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	781b      	ldrb	r3, [r3, #0]
 80079d4:	015a      	lsls	r2, r3, #5
 80079d6:	693b      	ldr	r3, [r7, #16]
 80079d8:	4413      	add	r3, r2
 80079da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80079e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80079e8:	d0e7      	beq.n	80079ba <USB_EPStopXfer+0x82>
 80079ea:	e048      	b.n	8007a7e <USB_EPStopXfer+0x146>
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	781b      	ldrb	r3, [r3, #0]
 80079f0:	015a      	lsls	r2, r3, #5
 80079f2:	693b      	ldr	r3, [r7, #16]
 80079f4:	4413      	add	r3, r2
 80079f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a04:	d13b      	bne.n	8007a7e <USB_EPStopXfer+0x146>
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	781b      	ldrb	r3, [r3, #0]
 8007a0a:	015a      	lsls	r2, r3, #5
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	4413      	add	r3, r2
 8007a10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	683a      	ldr	r2, [r7, #0]
 8007a18:	7812      	ldrb	r2, [r2, #0]
 8007a1a:	0151      	lsls	r1, r2, #5
 8007a1c:	693a      	ldr	r2, [r7, #16]
 8007a1e:	440a      	add	r2, r1
 8007a20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a24:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007a28:	6013      	str	r3, [r2, #0]
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	781b      	ldrb	r3, [r3, #0]
 8007a2e:	015a      	lsls	r2, r3, #5
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	4413      	add	r3, r2
 8007a34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	683a      	ldr	r2, [r7, #0]
 8007a3c:	7812      	ldrb	r2, [r2, #0]
 8007a3e:	0151      	lsls	r1, r2, #5
 8007a40:	693a      	ldr	r2, [r7, #16]
 8007a42:	440a      	add	r2, r1
 8007a44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a48:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007a4c:	6013      	str	r3, [r2, #0]
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	3301      	adds	r3, #1
 8007a52:	60fb      	str	r3, [r7, #12]
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	f242 7210 	movw	r2, #10000	; 0x2710
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d902      	bls.n	8007a64 <USB_EPStopXfer+0x12c>
 8007a5e:	2301      	movs	r3, #1
 8007a60:	75fb      	strb	r3, [r7, #23]
 8007a62:	e00c      	b.n	8007a7e <USB_EPStopXfer+0x146>
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	781b      	ldrb	r3, [r3, #0]
 8007a68:	015a      	lsls	r2, r3, #5
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	4413      	add	r3, r2
 8007a6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a7c:	d0e7      	beq.n	8007a4e <USB_EPStopXfer+0x116>
 8007a7e:	7dfb      	ldrb	r3, [r7, #23]
 8007a80:	4618      	mov	r0, r3
 8007a82:	371c      	adds	r7, #28
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bc80      	pop	{r7}
 8007a88:	4770      	bx	lr

08007a8a <USB_WritePacket>:
 8007a8a:	b480      	push	{r7}
 8007a8c:	b089      	sub	sp, #36	; 0x24
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	60f8      	str	r0, [r7, #12]
 8007a92:	60b9      	str	r1, [r7, #8]
 8007a94:	4611      	mov	r1, r2
 8007a96:	461a      	mov	r2, r3
 8007a98:	460b      	mov	r3, r1
 8007a9a:	71fb      	strb	r3, [r7, #7]
 8007a9c:	4613      	mov	r3, r2
 8007a9e:	80bb      	strh	r3, [r7, #4]
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	617b      	str	r3, [r7, #20]
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	61fb      	str	r3, [r7, #28]
 8007aa8:	88bb      	ldrh	r3, [r7, #4]
 8007aaa:	3303      	adds	r3, #3
 8007aac:	089b      	lsrs	r3, r3, #2
 8007aae:	613b      	str	r3, [r7, #16]
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	61bb      	str	r3, [r7, #24]
 8007ab4:	e018      	b.n	8007ae8 <USB_WritePacket+0x5e>
 8007ab6:	79fb      	ldrb	r3, [r7, #7]
 8007ab8:	031a      	lsls	r2, r3, #12
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	4413      	add	r3, r2
 8007abe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ac2:	461a      	mov	r2, r3
 8007ac4:	69fb      	ldr	r3, [r7, #28]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	6013      	str	r3, [r2, #0]
 8007aca:	69fb      	ldr	r3, [r7, #28]
 8007acc:	3301      	adds	r3, #1
 8007ace:	61fb      	str	r3, [r7, #28]
 8007ad0:	69fb      	ldr	r3, [r7, #28]
 8007ad2:	3301      	adds	r3, #1
 8007ad4:	61fb      	str	r3, [r7, #28]
 8007ad6:	69fb      	ldr	r3, [r7, #28]
 8007ad8:	3301      	adds	r3, #1
 8007ada:	61fb      	str	r3, [r7, #28]
 8007adc:	69fb      	ldr	r3, [r7, #28]
 8007ade:	3301      	adds	r3, #1
 8007ae0:	61fb      	str	r3, [r7, #28]
 8007ae2:	69bb      	ldr	r3, [r7, #24]
 8007ae4:	3301      	adds	r3, #1
 8007ae6:	61bb      	str	r3, [r7, #24]
 8007ae8:	69ba      	ldr	r2, [r7, #24]
 8007aea:	693b      	ldr	r3, [r7, #16]
 8007aec:	429a      	cmp	r2, r3
 8007aee:	d3e2      	bcc.n	8007ab6 <USB_WritePacket+0x2c>
 8007af0:	2300      	movs	r3, #0
 8007af2:	4618      	mov	r0, r3
 8007af4:	3724      	adds	r7, #36	; 0x24
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bc80      	pop	{r7}
 8007afa:	4770      	bx	lr

08007afc <USB_ReadPacket>:
 8007afc:	b480      	push	{r7}
 8007afe:	b08b      	sub	sp, #44	; 0x2c
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	60f8      	str	r0, [r7, #12]
 8007b04:	60b9      	str	r1, [r7, #8]
 8007b06:	4613      	mov	r3, r2
 8007b08:	80fb      	strh	r3, [r7, #6]
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	61bb      	str	r3, [r7, #24]
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	627b      	str	r3, [r7, #36]	; 0x24
 8007b12:	88fb      	ldrh	r3, [r7, #6]
 8007b14:	089b      	lsrs	r3, r3, #2
 8007b16:	b29b      	uxth	r3, r3
 8007b18:	617b      	str	r3, [r7, #20]
 8007b1a:	88fb      	ldrh	r3, [r7, #6]
 8007b1c:	f003 0303 	and.w	r3, r3, #3
 8007b20:	83fb      	strh	r3, [r7, #30]
 8007b22:	2300      	movs	r3, #0
 8007b24:	623b      	str	r3, [r7, #32]
 8007b26:	e014      	b.n	8007b52 <USB_ReadPacket+0x56>
 8007b28:	69bb      	ldr	r3, [r7, #24]
 8007b2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b2e:	681a      	ldr	r2, [r3, #0]
 8007b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b32:	601a      	str	r2, [r3, #0]
 8007b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b36:	3301      	adds	r3, #1
 8007b38:	627b      	str	r3, [r7, #36]	; 0x24
 8007b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b3c:	3301      	adds	r3, #1
 8007b3e:	627b      	str	r3, [r7, #36]	; 0x24
 8007b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b42:	3301      	adds	r3, #1
 8007b44:	627b      	str	r3, [r7, #36]	; 0x24
 8007b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b48:	3301      	adds	r3, #1
 8007b4a:	627b      	str	r3, [r7, #36]	; 0x24
 8007b4c:	6a3b      	ldr	r3, [r7, #32]
 8007b4e:	3301      	adds	r3, #1
 8007b50:	623b      	str	r3, [r7, #32]
 8007b52:	6a3a      	ldr	r2, [r7, #32]
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	429a      	cmp	r2, r3
 8007b58:	d3e6      	bcc.n	8007b28 <USB_ReadPacket+0x2c>
 8007b5a:	8bfb      	ldrh	r3, [r7, #30]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d01e      	beq.n	8007b9e <USB_ReadPacket+0xa2>
 8007b60:	2300      	movs	r3, #0
 8007b62:	623b      	str	r3, [r7, #32]
 8007b64:	69bb      	ldr	r3, [r7, #24]
 8007b66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b6a:	461a      	mov	r2, r3
 8007b6c:	f107 0310 	add.w	r3, r7, #16
 8007b70:	6812      	ldr	r2, [r2, #0]
 8007b72:	601a      	str	r2, [r3, #0]
 8007b74:	693a      	ldr	r2, [r7, #16]
 8007b76:	6a3b      	ldr	r3, [r7, #32]
 8007b78:	b2db      	uxtb	r3, r3
 8007b7a:	00db      	lsls	r3, r3, #3
 8007b7c:	fa22 f303 	lsr.w	r3, r2, r3
 8007b80:	b2da      	uxtb	r2, r3
 8007b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b84:	701a      	strb	r2, [r3, #0]
 8007b86:	6a3b      	ldr	r3, [r7, #32]
 8007b88:	3301      	adds	r3, #1
 8007b8a:	623b      	str	r3, [r7, #32]
 8007b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b8e:	3301      	adds	r3, #1
 8007b90:	627b      	str	r3, [r7, #36]	; 0x24
 8007b92:	8bfb      	ldrh	r3, [r7, #30]
 8007b94:	3b01      	subs	r3, #1
 8007b96:	83fb      	strh	r3, [r7, #30]
 8007b98:	8bfb      	ldrh	r3, [r7, #30]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d1ea      	bne.n	8007b74 <USB_ReadPacket+0x78>
 8007b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	372c      	adds	r7, #44	; 0x2c
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bc80      	pop	{r7}
 8007ba8:	4770      	bx	lr

08007baa <USB_EPSetStall>:
 8007baa:	b480      	push	{r7}
 8007bac:	b085      	sub	sp, #20
 8007bae:	af00      	add	r7, sp, #0
 8007bb0:	6078      	str	r0, [r7, #4]
 8007bb2:	6039      	str	r1, [r7, #0]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	60fb      	str	r3, [r7, #12]
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	781b      	ldrb	r3, [r3, #0]
 8007bbc:	60bb      	str	r3, [r7, #8]
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	785b      	ldrb	r3, [r3, #1]
 8007bc2:	2b01      	cmp	r3, #1
 8007bc4:	d12c      	bne.n	8007c20 <USB_EPSetStall+0x76>
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	015a      	lsls	r2, r3, #5
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	4413      	add	r3, r2
 8007bce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	db12      	blt.n	8007bfe <USB_EPSetStall+0x54>
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d00f      	beq.n	8007bfe <USB_EPSetStall+0x54>
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	015a      	lsls	r2, r3, #5
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	4413      	add	r3, r2
 8007be6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	68ba      	ldr	r2, [r7, #8]
 8007bee:	0151      	lsls	r1, r2, #5
 8007bf0:	68fa      	ldr	r2, [r7, #12]
 8007bf2:	440a      	add	r2, r1
 8007bf4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007bf8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007bfc:	6013      	str	r3, [r2, #0]
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	015a      	lsls	r2, r3, #5
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	4413      	add	r3, r2
 8007c06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	68ba      	ldr	r2, [r7, #8]
 8007c0e:	0151      	lsls	r1, r2, #5
 8007c10:	68fa      	ldr	r2, [r7, #12]
 8007c12:	440a      	add	r2, r1
 8007c14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c18:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007c1c:	6013      	str	r3, [r2, #0]
 8007c1e:	e02b      	b.n	8007c78 <USB_EPSetStall+0xce>
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	015a      	lsls	r2, r3, #5
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	4413      	add	r3, r2
 8007c28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	db12      	blt.n	8007c58 <USB_EPSetStall+0xae>
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d00f      	beq.n	8007c58 <USB_EPSetStall+0xae>
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	015a      	lsls	r2, r3, #5
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	4413      	add	r3, r2
 8007c40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	68ba      	ldr	r2, [r7, #8]
 8007c48:	0151      	lsls	r1, r2, #5
 8007c4a:	68fa      	ldr	r2, [r7, #12]
 8007c4c:	440a      	add	r2, r1
 8007c4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c52:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007c56:	6013      	str	r3, [r2, #0]
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	015a      	lsls	r2, r3, #5
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	4413      	add	r3, r2
 8007c60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	68ba      	ldr	r2, [r7, #8]
 8007c68:	0151      	lsls	r1, r2, #5
 8007c6a:	68fa      	ldr	r2, [r7, #12]
 8007c6c:	440a      	add	r2, r1
 8007c6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c72:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007c76:	6013      	str	r3, [r2, #0]
 8007c78:	2300      	movs	r3, #0
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	3714      	adds	r7, #20
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bc80      	pop	{r7}
 8007c82:	4770      	bx	lr

08007c84 <USB_EPClearStall>:
 8007c84:	b480      	push	{r7}
 8007c86:	b085      	sub	sp, #20
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
 8007c8c:	6039      	str	r1, [r7, #0]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	60fb      	str	r3, [r7, #12]
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	781b      	ldrb	r3, [r3, #0]
 8007c96:	60bb      	str	r3, [r7, #8]
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	785b      	ldrb	r3, [r3, #1]
 8007c9c:	2b01      	cmp	r3, #1
 8007c9e:	d128      	bne.n	8007cf2 <USB_EPClearStall+0x6e>
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	015a      	lsls	r2, r3, #5
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	4413      	add	r3, r2
 8007ca8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	68ba      	ldr	r2, [r7, #8]
 8007cb0:	0151      	lsls	r1, r2, #5
 8007cb2:	68fa      	ldr	r2, [r7, #12]
 8007cb4:	440a      	add	r2, r1
 8007cb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007cba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007cbe:	6013      	str	r3, [r2, #0]
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	791b      	ldrb	r3, [r3, #4]
 8007cc4:	2b03      	cmp	r3, #3
 8007cc6:	d003      	beq.n	8007cd0 <USB_EPClearStall+0x4c>
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	791b      	ldrb	r3, [r3, #4]
 8007ccc:	2b02      	cmp	r3, #2
 8007cce:	d138      	bne.n	8007d42 <USB_EPClearStall+0xbe>
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	015a      	lsls	r2, r3, #5
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	4413      	add	r3, r2
 8007cd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	68ba      	ldr	r2, [r7, #8]
 8007ce0:	0151      	lsls	r1, r2, #5
 8007ce2:	68fa      	ldr	r2, [r7, #12]
 8007ce4:	440a      	add	r2, r1
 8007ce6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007cea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007cee:	6013      	str	r3, [r2, #0]
 8007cf0:	e027      	b.n	8007d42 <USB_EPClearStall+0xbe>
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	015a      	lsls	r2, r3, #5
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	4413      	add	r3, r2
 8007cfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	68ba      	ldr	r2, [r7, #8]
 8007d02:	0151      	lsls	r1, r2, #5
 8007d04:	68fa      	ldr	r2, [r7, #12]
 8007d06:	440a      	add	r2, r1
 8007d08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d0c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007d10:	6013      	str	r3, [r2, #0]
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	791b      	ldrb	r3, [r3, #4]
 8007d16:	2b03      	cmp	r3, #3
 8007d18:	d003      	beq.n	8007d22 <USB_EPClearStall+0x9e>
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	791b      	ldrb	r3, [r3, #4]
 8007d1e:	2b02      	cmp	r3, #2
 8007d20:	d10f      	bne.n	8007d42 <USB_EPClearStall+0xbe>
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	015a      	lsls	r2, r3, #5
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	4413      	add	r3, r2
 8007d2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	68ba      	ldr	r2, [r7, #8]
 8007d32:	0151      	lsls	r1, r2, #5
 8007d34:	68fa      	ldr	r2, [r7, #12]
 8007d36:	440a      	add	r2, r1
 8007d38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d40:	6013      	str	r3, [r2, #0]
 8007d42:	2300      	movs	r3, #0
 8007d44:	4618      	mov	r0, r3
 8007d46:	3714      	adds	r7, #20
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bc80      	pop	{r7}
 8007d4c:	4770      	bx	lr

08007d4e <USB_SetDevAddress>:
 8007d4e:	b480      	push	{r7}
 8007d50:	b085      	sub	sp, #20
 8007d52:	af00      	add	r7, sp, #0
 8007d54:	6078      	str	r0, [r7, #4]
 8007d56:	460b      	mov	r3, r1
 8007d58:	70fb      	strb	r3, [r7, #3]
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	60fb      	str	r3, [r7, #12]
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	68fa      	ldr	r2, [r7, #12]
 8007d68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d6c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007d70:	6013      	str	r3, [r2, #0]
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d78:	681a      	ldr	r2, [r3, #0]
 8007d7a:	78fb      	ldrb	r3, [r7, #3]
 8007d7c:	011b      	lsls	r3, r3, #4
 8007d7e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007d82:	68f9      	ldr	r1, [r7, #12]
 8007d84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007d88:	4313      	orrs	r3, r2
 8007d8a:	600b      	str	r3, [r1, #0]
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	4618      	mov	r0, r3
 8007d90:	3714      	adds	r7, #20
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bc80      	pop	{r7}
 8007d96:	4770      	bx	lr

08007d98 <USB_DevConnect>:
 8007d98:	b480      	push	{r7}
 8007d9a:	b085      	sub	sp, #20
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	60fb      	str	r3, [r7, #12]
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	68fa      	ldr	r2, [r7, #12]
 8007dae:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007db2:	f023 0303 	bic.w	r3, r3, #3
 8007db6:	6013      	str	r3, [r2, #0]
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dbe:	685b      	ldr	r3, [r3, #4]
 8007dc0:	68fa      	ldr	r2, [r7, #12]
 8007dc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007dc6:	f023 0302 	bic.w	r3, r3, #2
 8007dca:	6053      	str	r3, [r2, #4]
 8007dcc:	2300      	movs	r3, #0
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3714      	adds	r7, #20
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bc80      	pop	{r7}
 8007dd6:	4770      	bx	lr

08007dd8 <USB_DevDisconnect>:
 8007dd8:	b480      	push	{r7}
 8007dda:	b085      	sub	sp, #20
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	60fb      	str	r3, [r7, #12]
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	68fa      	ldr	r2, [r7, #12]
 8007dee:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007df2:	f023 0303 	bic.w	r3, r3, #3
 8007df6:	6013      	str	r3, [r2, #0]
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dfe:	685b      	ldr	r3, [r3, #4]
 8007e00:	68fa      	ldr	r2, [r7, #12]
 8007e02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e06:	f043 0302 	orr.w	r3, r3, #2
 8007e0a:	6053      	str	r3, [r2, #4]
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3714      	adds	r7, #20
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bc80      	pop	{r7}
 8007e16:	4770      	bx	lr

08007e18 <USB_ReadInterrupts>:
 8007e18:	b480      	push	{r7}
 8007e1a:	b085      	sub	sp, #20
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	695b      	ldr	r3, [r3, #20]
 8007e24:	60fb      	str	r3, [r7, #12]
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	699b      	ldr	r3, [r3, #24]
 8007e2a:	68fa      	ldr	r2, [r7, #12]
 8007e2c:	4013      	ands	r3, r2
 8007e2e:	60fb      	str	r3, [r7, #12]
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	4618      	mov	r0, r3
 8007e34:	3714      	adds	r7, #20
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bc80      	pop	{r7}
 8007e3a:	4770      	bx	lr

08007e3c <USB_ReadDevAllOutEpInterrupt>:
 8007e3c:	b480      	push	{r7}
 8007e3e:	b085      	sub	sp, #20
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	60fb      	str	r3, [r7, #12]
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e4e:	699b      	ldr	r3, [r3, #24]
 8007e50:	60bb      	str	r3, [r7, #8]
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e58:	69db      	ldr	r3, [r3, #28]
 8007e5a:	68ba      	ldr	r2, [r7, #8]
 8007e5c:	4013      	ands	r3, r2
 8007e5e:	60bb      	str	r3, [r7, #8]
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	0c1b      	lsrs	r3, r3, #16
 8007e64:	4618      	mov	r0, r3
 8007e66:	3714      	adds	r7, #20
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bc80      	pop	{r7}
 8007e6c:	4770      	bx	lr

08007e6e <USB_ReadDevAllInEpInterrupt>:
 8007e6e:	b480      	push	{r7}
 8007e70:	b085      	sub	sp, #20
 8007e72:	af00      	add	r7, sp, #0
 8007e74:	6078      	str	r0, [r7, #4]
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	60fb      	str	r3, [r7, #12]
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e80:	699b      	ldr	r3, [r3, #24]
 8007e82:	60bb      	str	r3, [r7, #8]
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e8a:	69db      	ldr	r3, [r3, #28]
 8007e8c:	68ba      	ldr	r2, [r7, #8]
 8007e8e:	4013      	ands	r3, r2
 8007e90:	60bb      	str	r3, [r7, #8]
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	b29b      	uxth	r3, r3
 8007e96:	4618      	mov	r0, r3
 8007e98:	3714      	adds	r7, #20
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bc80      	pop	{r7}
 8007e9e:	4770      	bx	lr

08007ea0 <USB_ReadDevOutEPInterrupt>:
 8007ea0:	b480      	push	{r7}
 8007ea2:	b085      	sub	sp, #20
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
 8007ea8:	460b      	mov	r3, r1
 8007eaa:	70fb      	strb	r3, [r7, #3]
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	60fb      	str	r3, [r7, #12]
 8007eb0:	78fb      	ldrb	r3, [r7, #3]
 8007eb2:	015a      	lsls	r2, r3, #5
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	4413      	add	r3, r2
 8007eb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ebc:	689b      	ldr	r3, [r3, #8]
 8007ebe:	60bb      	str	r3, [r7, #8]
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ec6:	695b      	ldr	r3, [r3, #20]
 8007ec8:	68ba      	ldr	r2, [r7, #8]
 8007eca:	4013      	ands	r3, r2
 8007ecc:	60bb      	str	r3, [r7, #8]
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3714      	adds	r7, #20
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bc80      	pop	{r7}
 8007ed8:	4770      	bx	lr

08007eda <USB_ReadDevInEPInterrupt>:
 8007eda:	b480      	push	{r7}
 8007edc:	b087      	sub	sp, #28
 8007ede:	af00      	add	r7, sp, #0
 8007ee0:	6078      	str	r0, [r7, #4]
 8007ee2:	460b      	mov	r3, r1
 8007ee4:	70fb      	strb	r3, [r7, #3]
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	617b      	str	r3, [r7, #20]
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ef0:	691b      	ldr	r3, [r3, #16]
 8007ef2:	613b      	str	r3, [r7, #16]
 8007ef4:	697b      	ldr	r3, [r7, #20]
 8007ef6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007efa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007efc:	60fb      	str	r3, [r7, #12]
 8007efe:	78fb      	ldrb	r3, [r7, #3]
 8007f00:	f003 030f 	and.w	r3, r3, #15
 8007f04:	68fa      	ldr	r2, [r7, #12]
 8007f06:	fa22 f303 	lsr.w	r3, r2, r3
 8007f0a:	01db      	lsls	r3, r3, #7
 8007f0c:	b2db      	uxtb	r3, r3
 8007f0e:	693a      	ldr	r2, [r7, #16]
 8007f10:	4313      	orrs	r3, r2
 8007f12:	613b      	str	r3, [r7, #16]
 8007f14:	78fb      	ldrb	r3, [r7, #3]
 8007f16:	015a      	lsls	r2, r3, #5
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	4413      	add	r3, r2
 8007f1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f20:	689b      	ldr	r3, [r3, #8]
 8007f22:	693a      	ldr	r2, [r7, #16]
 8007f24:	4013      	ands	r3, r2
 8007f26:	60bb      	str	r3, [r7, #8]
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	371c      	adds	r7, #28
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bc80      	pop	{r7}
 8007f32:	4770      	bx	lr

08007f34 <USB_GetMode>:
 8007f34:	b480      	push	{r7}
 8007f36:	b083      	sub	sp, #12
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	695b      	ldr	r3, [r3, #20]
 8007f40:	f003 0301 	and.w	r3, r3, #1
 8007f44:	4618      	mov	r0, r3
 8007f46:	370c      	adds	r7, #12
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bc80      	pop	{r7}
 8007f4c:	4770      	bx	lr

08007f4e <USB_ActivateSetup>:
 8007f4e:	b480      	push	{r7}
 8007f50:	b085      	sub	sp, #20
 8007f52:	af00      	add	r7, sp, #0
 8007f54:	6078      	str	r0, [r7, #4]
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	60fb      	str	r3, [r7, #12]
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	68fa      	ldr	r2, [r7, #12]
 8007f64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f68:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007f6c:	f023 0307 	bic.w	r3, r3, #7
 8007f70:	6013      	str	r3, [r2, #0]
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f78:	685b      	ldr	r3, [r3, #4]
 8007f7a:	68fa      	ldr	r2, [r7, #12]
 8007f7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f84:	6053      	str	r3, [r2, #4]
 8007f86:	2300      	movs	r3, #0
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3714      	adds	r7, #20
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bc80      	pop	{r7}
 8007f90:	4770      	bx	lr
	...

08007f94 <USB_EP0_OutStart>:
 8007f94:	b480      	push	{r7}
 8007f96:	b085      	sub	sp, #20
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
 8007f9c:	6039      	str	r1, [r7, #0]
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	60fb      	str	r3, [r7, #12]
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	333c      	adds	r3, #60	; 0x3c
 8007fa6:	3304      	adds	r3, #4
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	60bb      	str	r3, [r7, #8]
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	4a1c      	ldr	r2, [pc, #112]	; (8008020 <USB_EP0_OutStart+0x8c>)
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d90a      	bls.n	8007fca <USB_EP0_OutStart+0x36>
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007fc0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007fc4:	d101      	bne.n	8007fca <USB_EP0_OutStart+0x36>
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	e024      	b.n	8008014 <USB_EP0_OutStart+0x80>
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fd0:	461a      	mov	r2, r3
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	6113      	str	r3, [r2, #16]
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fdc:	691b      	ldr	r3, [r3, #16]
 8007fde:	68fa      	ldr	r2, [r7, #12]
 8007fe0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007fe4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007fe8:	6113      	str	r3, [r2, #16]
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ff0:	691b      	ldr	r3, [r3, #16]
 8007ff2:	68fa      	ldr	r2, [r7, #12]
 8007ff4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ff8:	f043 0318 	orr.w	r3, r3, #24
 8007ffc:	6113      	str	r3, [r2, #16]
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008004:	691b      	ldr	r3, [r3, #16]
 8008006:	68fa      	ldr	r2, [r7, #12]
 8008008:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800800c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008010:	6113      	str	r3, [r2, #16]
 8008012:	2300      	movs	r3, #0
 8008014:	4618      	mov	r0, r3
 8008016:	3714      	adds	r7, #20
 8008018:	46bd      	mov	sp, r7
 800801a:	bc80      	pop	{r7}
 800801c:	4770      	bx	lr
 800801e:	bf00      	nop
 8008020:	4f54300a 	.word	0x4f54300a

08008024 <USB_CoreReset>:
 8008024:	b480      	push	{r7}
 8008026:	b085      	sub	sp, #20
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
 800802c:	2300      	movs	r3, #0
 800802e:	60fb      	str	r3, [r7, #12]
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	3301      	adds	r3, #1
 8008034:	60fb      	str	r3, [r7, #12]
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	4a12      	ldr	r2, [pc, #72]	; (8008084 <USB_CoreReset+0x60>)
 800803a:	4293      	cmp	r3, r2
 800803c:	d901      	bls.n	8008042 <USB_CoreReset+0x1e>
 800803e:	2303      	movs	r3, #3
 8008040:	e01b      	b.n	800807a <USB_CoreReset+0x56>
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	691b      	ldr	r3, [r3, #16]
 8008046:	2b00      	cmp	r3, #0
 8008048:	daf2      	bge.n	8008030 <USB_CoreReset+0xc>
 800804a:	2300      	movs	r3, #0
 800804c:	60fb      	str	r3, [r7, #12]
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	691b      	ldr	r3, [r3, #16]
 8008052:	f043 0201 	orr.w	r2, r3, #1
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	611a      	str	r2, [r3, #16]
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	3301      	adds	r3, #1
 800805e:	60fb      	str	r3, [r7, #12]
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	4a08      	ldr	r2, [pc, #32]	; (8008084 <USB_CoreReset+0x60>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d901      	bls.n	800806c <USB_CoreReset+0x48>
 8008068:	2303      	movs	r3, #3
 800806a:	e006      	b.n	800807a <USB_CoreReset+0x56>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	691b      	ldr	r3, [r3, #16]
 8008070:	f003 0301 	and.w	r3, r3, #1
 8008074:	2b01      	cmp	r3, #1
 8008076:	d0f0      	beq.n	800805a <USB_CoreReset+0x36>
 8008078:	2300      	movs	r3, #0
 800807a:	4618      	mov	r0, r3
 800807c:	3714      	adds	r7, #20
 800807e:	46bd      	mov	sp, r7
 8008080:	bc80      	pop	{r7}
 8008082:	4770      	bx	lr
 8008084:	00030d40 	.word	0x00030d40

08008088 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b084      	sub	sp, #16
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
 8008090:	460b      	mov	r3, r1
 8008092:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008094:	2300      	movs	r3, #0
 8008096:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	7c1b      	ldrb	r3, [r3, #16]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d115      	bne.n	80080cc <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80080a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80080a4:	2202      	movs	r2, #2
 80080a6:	2181      	movs	r1, #129	; 0x81
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f001 ff22 	bl	8009ef2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2201      	movs	r2, #1
 80080b2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80080b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80080b8:	2202      	movs	r2, #2
 80080ba:	2101      	movs	r1, #1
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f001 ff18 	bl	8009ef2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2201      	movs	r2, #1
 80080c6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80080ca:	e012      	b.n	80080f2 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80080cc:	2340      	movs	r3, #64	; 0x40
 80080ce:	2202      	movs	r2, #2
 80080d0:	2181      	movs	r1, #129	; 0x81
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f001 ff0d 	bl	8009ef2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2201      	movs	r2, #1
 80080dc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80080de:	2340      	movs	r3, #64	; 0x40
 80080e0:	2202      	movs	r2, #2
 80080e2:	2101      	movs	r1, #1
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f001 ff04 	bl	8009ef2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2201      	movs	r2, #1
 80080ee:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80080f2:	2308      	movs	r3, #8
 80080f4:	2203      	movs	r2, #3
 80080f6:	2182      	movs	r1, #130	; 0x82
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f001 fefa 	bl	8009ef2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2201      	movs	r2, #1
 8008102:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008104:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008108:	f002 f81a 	bl	800a140 <USBD_static_malloc>
 800810c:	4602      	mov	r2, r0
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800811a:	2b00      	cmp	r3, #0
 800811c:	d102      	bne.n	8008124 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800811e:	2301      	movs	r3, #1
 8008120:	73fb      	strb	r3, [r7, #15]
 8008122:	e026      	b.n	8008172 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800812a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	2200      	movs	r2, #0
 800813a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	2200      	movs	r2, #0
 8008142:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	7c1b      	ldrb	r3, [r3, #16]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d109      	bne.n	8008162 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008154:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008158:	2101      	movs	r1, #1
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f001 ffb9 	bl	800a0d2 <USBD_LL_PrepareReceive>
 8008160:	e007      	b.n	8008172 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008168:	2340      	movs	r3, #64	; 0x40
 800816a:	2101      	movs	r1, #1
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f001 ffb0 	bl	800a0d2 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008172:	7bfb      	ldrb	r3, [r7, #15]
}
 8008174:	4618      	mov	r0, r3
 8008176:	3710      	adds	r7, #16
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}

0800817c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b084      	sub	sp, #16
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
 8008184:	460b      	mov	r3, r1
 8008186:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008188:	2300      	movs	r3, #0
 800818a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800818c:	2181      	movs	r1, #129	; 0x81
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f001 fed5 	bl	8009f3e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2200      	movs	r2, #0
 8008198:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800819a:	2101      	movs	r1, #1
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f001 fece 	bl	8009f3e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2200      	movs	r2, #0
 80081a6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80081aa:	2182      	movs	r1, #130	; 0x82
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f001 fec6 	bl	8009f3e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2200      	movs	r2, #0
 80081b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d00e      	beq.n	80081e0 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80081c8:	685b      	ldr	r3, [r3, #4]
 80081ca:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081d2:	4618      	mov	r0, r3
 80081d4:	f001 ffc0 	bl	800a158 <USBD_static_free>
    pdev->pClassData = NULL;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2200      	movs	r2, #0
 80081dc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80081e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3710      	adds	r7, #16
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}

080081ea <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80081ea:	b580      	push	{r7, lr}
 80081ec:	b086      	sub	sp, #24
 80081ee:	af00      	add	r7, sp, #0
 80081f0:	6078      	str	r0, [r7, #4]
 80081f2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081fa:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80081fc:	2300      	movs	r3, #0
 80081fe:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008200:	2300      	movs	r3, #0
 8008202:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8008204:	2300      	movs	r3, #0
 8008206:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	781b      	ldrb	r3, [r3, #0]
 800820c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008210:	2b00      	cmp	r3, #0
 8008212:	d039      	beq.n	8008288 <USBD_CDC_Setup+0x9e>
 8008214:	2b20      	cmp	r3, #32
 8008216:	d17f      	bne.n	8008318 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	88db      	ldrh	r3, [r3, #6]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d029      	beq.n	8008274 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	781b      	ldrb	r3, [r3, #0]
 8008224:	b25b      	sxtb	r3, r3
 8008226:	2b00      	cmp	r3, #0
 8008228:	da11      	bge.n	800824e <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008230:	689b      	ldr	r3, [r3, #8]
 8008232:	683a      	ldr	r2, [r7, #0]
 8008234:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8008236:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008238:	683a      	ldr	r2, [r7, #0]
 800823a:	88d2      	ldrh	r2, [r2, #6]
 800823c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800823e:	6939      	ldr	r1, [r7, #16]
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	88db      	ldrh	r3, [r3, #6]
 8008244:	461a      	mov	r2, r3
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f001 fa41 	bl	80096ce <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800824c:	e06b      	b.n	8008326 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	785a      	ldrb	r2, [r3, #1]
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	88db      	ldrh	r3, [r3, #6]
 800825c:	b2da      	uxtb	r2, r3
 800825e:	693b      	ldr	r3, [r7, #16]
 8008260:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008264:	6939      	ldr	r1, [r7, #16]
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	88db      	ldrh	r3, [r3, #6]
 800826a:	461a      	mov	r2, r3
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f001 fa5c 	bl	800972a <USBD_CtlPrepareRx>
      break;
 8008272:	e058      	b.n	8008326 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800827a:	689b      	ldr	r3, [r3, #8]
 800827c:	683a      	ldr	r2, [r7, #0]
 800827e:	7850      	ldrb	r0, [r2, #1]
 8008280:	2200      	movs	r2, #0
 8008282:	6839      	ldr	r1, [r7, #0]
 8008284:	4798      	blx	r3
      break;
 8008286:	e04e      	b.n	8008326 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	785b      	ldrb	r3, [r3, #1]
 800828c:	2b0b      	cmp	r3, #11
 800828e:	d02e      	beq.n	80082ee <USBD_CDC_Setup+0x104>
 8008290:	2b0b      	cmp	r3, #11
 8008292:	dc38      	bgt.n	8008306 <USBD_CDC_Setup+0x11c>
 8008294:	2b00      	cmp	r3, #0
 8008296:	d002      	beq.n	800829e <USBD_CDC_Setup+0xb4>
 8008298:	2b0a      	cmp	r3, #10
 800829a:	d014      	beq.n	80082c6 <USBD_CDC_Setup+0xdc>
 800829c:	e033      	b.n	8008306 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082a4:	2b03      	cmp	r3, #3
 80082a6:	d107      	bne.n	80082b8 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80082a8:	f107 030c 	add.w	r3, r7, #12
 80082ac:	2202      	movs	r2, #2
 80082ae:	4619      	mov	r1, r3
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f001 fa0c 	bl	80096ce <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80082b6:	e02e      	b.n	8008316 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80082b8:	6839      	ldr	r1, [r7, #0]
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f001 f99d 	bl	80095fa <USBD_CtlError>
            ret = USBD_FAIL;
 80082c0:	2302      	movs	r3, #2
 80082c2:	75fb      	strb	r3, [r7, #23]
          break;
 80082c4:	e027      	b.n	8008316 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082cc:	2b03      	cmp	r3, #3
 80082ce:	d107      	bne.n	80082e0 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80082d0:	f107 030f 	add.w	r3, r7, #15
 80082d4:	2201      	movs	r2, #1
 80082d6:	4619      	mov	r1, r3
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f001 f9f8 	bl	80096ce <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80082de:	e01a      	b.n	8008316 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80082e0:	6839      	ldr	r1, [r7, #0]
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f001 f989 	bl	80095fa <USBD_CtlError>
            ret = USBD_FAIL;
 80082e8:	2302      	movs	r3, #2
 80082ea:	75fb      	strb	r3, [r7, #23]
          break;
 80082ec:	e013      	b.n	8008316 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082f4:	2b03      	cmp	r3, #3
 80082f6:	d00d      	beq.n	8008314 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80082f8:	6839      	ldr	r1, [r7, #0]
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f001 f97d 	bl	80095fa <USBD_CtlError>
            ret = USBD_FAIL;
 8008300:	2302      	movs	r3, #2
 8008302:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008304:	e006      	b.n	8008314 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8008306:	6839      	ldr	r1, [r7, #0]
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f001 f976 	bl	80095fa <USBD_CtlError>
          ret = USBD_FAIL;
 800830e:	2302      	movs	r3, #2
 8008310:	75fb      	strb	r3, [r7, #23]
          break;
 8008312:	e000      	b.n	8008316 <USBD_CDC_Setup+0x12c>
          break;
 8008314:	bf00      	nop
      }
      break;
 8008316:	e006      	b.n	8008326 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008318:	6839      	ldr	r1, [r7, #0]
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f001 f96d 	bl	80095fa <USBD_CtlError>
      ret = USBD_FAIL;
 8008320:	2302      	movs	r3, #2
 8008322:	75fb      	strb	r3, [r7, #23]
      break;
 8008324:	bf00      	nop
  }

  return ret;
 8008326:	7dfb      	ldrb	r3, [r7, #23]
}
 8008328:	4618      	mov	r0, r3
 800832a:	3718      	adds	r7, #24
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}

08008330 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b084      	sub	sp, #16
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
 8008338:	460b      	mov	r3, r1
 800833a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008342:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800834a:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008352:	2b00      	cmp	r3, #0
 8008354:	d03a      	beq.n	80083cc <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008356:	78fa      	ldrb	r2, [r7, #3]
 8008358:	6879      	ldr	r1, [r7, #4]
 800835a:	4613      	mov	r3, r2
 800835c:	009b      	lsls	r3, r3, #2
 800835e:	4413      	add	r3, r2
 8008360:	009b      	lsls	r3, r3, #2
 8008362:	440b      	add	r3, r1
 8008364:	331c      	adds	r3, #28
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d029      	beq.n	80083c0 <USBD_CDC_DataIn+0x90>
 800836c:	78fa      	ldrb	r2, [r7, #3]
 800836e:	6879      	ldr	r1, [r7, #4]
 8008370:	4613      	mov	r3, r2
 8008372:	009b      	lsls	r3, r3, #2
 8008374:	4413      	add	r3, r2
 8008376:	009b      	lsls	r3, r3, #2
 8008378:	440b      	add	r3, r1
 800837a:	331c      	adds	r3, #28
 800837c:	681a      	ldr	r2, [r3, #0]
 800837e:	78f9      	ldrb	r1, [r7, #3]
 8008380:	68b8      	ldr	r0, [r7, #8]
 8008382:	460b      	mov	r3, r1
 8008384:	00db      	lsls	r3, r3, #3
 8008386:	440b      	add	r3, r1
 8008388:	009b      	lsls	r3, r3, #2
 800838a:	4403      	add	r3, r0
 800838c:	3344      	adds	r3, #68	; 0x44
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	fbb2 f1f3 	udiv	r1, r2, r3
 8008394:	fb01 f303 	mul.w	r3, r1, r3
 8008398:	1ad3      	subs	r3, r2, r3
 800839a:	2b00      	cmp	r3, #0
 800839c:	d110      	bne.n	80083c0 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800839e:	78fa      	ldrb	r2, [r7, #3]
 80083a0:	6879      	ldr	r1, [r7, #4]
 80083a2:	4613      	mov	r3, r2
 80083a4:	009b      	lsls	r3, r3, #2
 80083a6:	4413      	add	r3, r2
 80083a8:	009b      	lsls	r3, r3, #2
 80083aa:	440b      	add	r3, r1
 80083ac:	331c      	adds	r3, #28
 80083ae:	2200      	movs	r2, #0
 80083b0:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80083b2:	78f9      	ldrb	r1, [r7, #3]
 80083b4:	2300      	movs	r3, #0
 80083b6:	2200      	movs	r2, #0
 80083b8:	6878      	ldr	r0, [r7, #4]
 80083ba:	f001 fe67 	bl	800a08c <USBD_LL_Transmit>
 80083be:	e003      	b.n	80083c8 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	2200      	movs	r2, #0
 80083c4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80083c8:	2300      	movs	r3, #0
 80083ca:	e000      	b.n	80083ce <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80083cc:	2302      	movs	r3, #2
  }
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	3710      	adds	r7, #16
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}

080083d6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80083d6:	b580      	push	{r7, lr}
 80083d8:	b084      	sub	sp, #16
 80083da:	af00      	add	r7, sp, #0
 80083dc:	6078      	str	r0, [r7, #4]
 80083de:	460b      	mov	r3, r1
 80083e0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083e8:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80083ea:	78fb      	ldrb	r3, [r7, #3]
 80083ec:	4619      	mov	r1, r3
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f001 fe92 	bl	800a118 <USBD_LL_GetRxDataSize>
 80083f4:	4602      	mov	r2, r0
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008402:	2b00      	cmp	r3, #0
 8008404:	d00d      	beq.n	8008422 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800840c:	68db      	ldr	r3, [r3, #12]
 800840e:	68fa      	ldr	r2, [r7, #12]
 8008410:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008414:	68fa      	ldr	r2, [r7, #12]
 8008416:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800841a:	4611      	mov	r1, r2
 800841c:	4798      	blx	r3

    return USBD_OK;
 800841e:	2300      	movs	r3, #0
 8008420:	e000      	b.n	8008424 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008422:	2302      	movs	r3, #2
  }
}
 8008424:	4618      	mov	r0, r3
 8008426:	3710      	adds	r7, #16
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}

0800842c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b084      	sub	sp, #16
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800843a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008442:	2b00      	cmp	r3, #0
 8008444:	d015      	beq.n	8008472 <USBD_CDC_EP0_RxReady+0x46>
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800844c:	2bff      	cmp	r3, #255	; 0xff
 800844e:	d010      	beq.n	8008472 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008456:	689b      	ldr	r3, [r3, #8]
 8008458:	68fa      	ldr	r2, [r7, #12]
 800845a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800845e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008460:	68fa      	ldr	r2, [r7, #12]
 8008462:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008466:	b292      	uxth	r2, r2
 8008468:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	22ff      	movs	r2, #255	; 0xff
 800846e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8008472:	2300      	movs	r3, #0
}
 8008474:	4618      	mov	r0, r3
 8008476:	3710      	adds	r7, #16
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}

0800847c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800847c:	b480      	push	{r7}
 800847e:	b083      	sub	sp, #12
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2243      	movs	r2, #67	; 0x43
 8008488:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800848a:	4b03      	ldr	r3, [pc, #12]	; (8008498 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800848c:	4618      	mov	r0, r3
 800848e:	370c      	adds	r7, #12
 8008490:	46bd      	mov	sp, r7
 8008492:	bc80      	pop	{r7}
 8008494:	4770      	bx	lr
 8008496:	bf00      	nop
 8008498:	20000118 	.word	0x20000118

0800849c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800849c:	b480      	push	{r7}
 800849e:	b083      	sub	sp, #12
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2243      	movs	r2, #67	; 0x43
 80084a8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80084aa:	4b03      	ldr	r3, [pc, #12]	; (80084b8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	370c      	adds	r7, #12
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bc80      	pop	{r7}
 80084b4:	4770      	bx	lr
 80084b6:	bf00      	nop
 80084b8:	200000d4 	.word	0x200000d4

080084bc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80084bc:	b480      	push	{r7}
 80084be:	b083      	sub	sp, #12
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2243      	movs	r2, #67	; 0x43
 80084c8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80084ca:	4b03      	ldr	r3, [pc, #12]	; (80084d8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	370c      	adds	r7, #12
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bc80      	pop	{r7}
 80084d4:	4770      	bx	lr
 80084d6:	bf00      	nop
 80084d8:	2000015c 	.word	0x2000015c

080084dc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80084dc:	b480      	push	{r7}
 80084de:	b083      	sub	sp, #12
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	220a      	movs	r2, #10
 80084e8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80084ea:	4b03      	ldr	r3, [pc, #12]	; (80084f8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	370c      	adds	r7, #12
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bc80      	pop	{r7}
 80084f4:	4770      	bx	lr
 80084f6:	bf00      	nop
 80084f8:	20000090 	.word	0x20000090

080084fc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80084fc:	b480      	push	{r7}
 80084fe:	b085      	sub	sp, #20
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
 8008504:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008506:	2302      	movs	r3, #2
 8008508:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d005      	beq.n	800851c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	683a      	ldr	r2, [r7, #0]
 8008514:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8008518:	2300      	movs	r3, #0
 800851a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800851c:	7bfb      	ldrb	r3, [r7, #15]
}
 800851e:	4618      	mov	r0, r3
 8008520:	3714      	adds	r7, #20
 8008522:	46bd      	mov	sp, r7
 8008524:	bc80      	pop	{r7}
 8008526:	4770      	bx	lr

08008528 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8008528:	b480      	push	{r7}
 800852a:	b087      	sub	sp, #28
 800852c:	af00      	add	r7, sp, #0
 800852e:	60f8      	str	r0, [r7, #12]
 8008530:	60b9      	str	r1, [r7, #8]
 8008532:	4613      	mov	r3, r2
 8008534:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800853c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	68ba      	ldr	r2, [r7, #8]
 8008542:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008546:	88fa      	ldrh	r2, [r7, #6]
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800854e:	2300      	movs	r3, #0
}
 8008550:	4618      	mov	r0, r3
 8008552:	371c      	adds	r7, #28
 8008554:	46bd      	mov	sp, r7
 8008556:	bc80      	pop	{r7}
 8008558:	4770      	bx	lr

0800855a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800855a:	b480      	push	{r7}
 800855c:	b085      	sub	sp, #20
 800855e:	af00      	add	r7, sp, #0
 8008560:	6078      	str	r0, [r7, #4]
 8008562:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800856a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	683a      	ldr	r2, [r7, #0]
 8008570:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8008574:	2300      	movs	r3, #0
}
 8008576:	4618      	mov	r0, r3
 8008578:	3714      	adds	r7, #20
 800857a:	46bd      	mov	sp, r7
 800857c:	bc80      	pop	{r7}
 800857e:	4770      	bx	lr

08008580 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b084      	sub	sp, #16
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800858e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008596:	2b00      	cmp	r3, #0
 8008598:	d01c      	beq.n	80085d4 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d115      	bne.n	80085d0 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	2201      	movs	r2, #1
 80085a8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80085c2:	b29b      	uxth	r3, r3
 80085c4:	2181      	movs	r1, #129	; 0x81
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f001 fd60 	bl	800a08c <USBD_LL_Transmit>

      return USBD_OK;
 80085cc:	2300      	movs	r3, #0
 80085ce:	e002      	b.n	80085d6 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80085d0:	2301      	movs	r3, #1
 80085d2:	e000      	b.n	80085d6 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80085d4:	2302      	movs	r3, #2
  }
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	3710      	adds	r7, #16
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}

080085de <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80085de:	b580      	push	{r7, lr}
 80085e0:	b084      	sub	sp, #16
 80085e2:	af00      	add	r7, sp, #0
 80085e4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085ec:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d017      	beq.n	8008628 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	7c1b      	ldrb	r3, [r3, #16]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d109      	bne.n	8008614 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008606:	f44f 7300 	mov.w	r3, #512	; 0x200
 800860a:	2101      	movs	r1, #1
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f001 fd60 	bl	800a0d2 <USBD_LL_PrepareReceive>
 8008612:	e007      	b.n	8008624 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800861a:	2340      	movs	r3, #64	; 0x40
 800861c:	2101      	movs	r1, #1
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f001 fd57 	bl	800a0d2 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008624:	2300      	movs	r3, #0
 8008626:	e000      	b.n	800862a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008628:	2302      	movs	r3, #2
  }
}
 800862a:	4618      	mov	r0, r3
 800862c:	3710      	adds	r7, #16
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}

08008632 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008632:	b580      	push	{r7, lr}
 8008634:	b084      	sub	sp, #16
 8008636:	af00      	add	r7, sp, #0
 8008638:	60f8      	str	r0, [r7, #12]
 800863a:	60b9      	str	r1, [r7, #8]
 800863c:	4613      	mov	r3, r2
 800863e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d101      	bne.n	800864a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008646:	2302      	movs	r3, #2
 8008648:	e01a      	b.n	8008680 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008650:	2b00      	cmp	r3, #0
 8008652:	d003      	beq.n	800865c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	2200      	movs	r2, #0
 8008658:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d003      	beq.n	800866a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	68ba      	ldr	r2, [r7, #8]
 8008666:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	2201      	movs	r2, #1
 800866e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	79fa      	ldrb	r2, [r7, #7]
 8008676:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008678:	68f8      	ldr	r0, [r7, #12]
 800867a:	f001 fbdb 	bl	8009e34 <USBD_LL_Init>

  return USBD_OK;
 800867e:	2300      	movs	r3, #0
}
 8008680:	4618      	mov	r0, r3
 8008682:	3710      	adds	r7, #16
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}

08008688 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008688:	b480      	push	{r7}
 800868a:	b085      	sub	sp, #20
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
 8008690:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008692:	2300      	movs	r3, #0
 8008694:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d006      	beq.n	80086aa <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	683a      	ldr	r2, [r7, #0]
 80086a0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80086a4:	2300      	movs	r3, #0
 80086a6:	73fb      	strb	r3, [r7, #15]
 80086a8:	e001      	b.n	80086ae <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80086aa:	2302      	movs	r3, #2
 80086ac:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80086ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80086b0:	4618      	mov	r0, r3
 80086b2:	3714      	adds	r7, #20
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bc80      	pop	{r7}
 80086b8:	4770      	bx	lr

080086ba <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80086ba:	b580      	push	{r7, lr}
 80086bc:	b082      	sub	sp, #8
 80086be:	af00      	add	r7, sp, #0
 80086c0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f001 fbfa 	bl	8009ebc <USBD_LL_Start>

  return USBD_OK;
 80086c8:	2300      	movs	r3, #0
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	3708      	adds	r7, #8
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}

080086d2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80086d2:	b480      	push	{r7}
 80086d4:	b083      	sub	sp, #12
 80086d6:	af00      	add	r7, sp, #0
 80086d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80086da:	2300      	movs	r3, #0
}
 80086dc:	4618      	mov	r0, r3
 80086de:	370c      	adds	r7, #12
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bc80      	pop	{r7}
 80086e4:	4770      	bx	lr

080086e6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80086e6:	b580      	push	{r7, lr}
 80086e8:	b084      	sub	sp, #16
 80086ea:	af00      	add	r7, sp, #0
 80086ec:	6078      	str	r0, [r7, #4]
 80086ee:	460b      	mov	r3, r1
 80086f0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80086f2:	2302      	movs	r3, #2
 80086f4:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d00c      	beq.n	800871a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	78fa      	ldrb	r2, [r7, #3]
 800870a:	4611      	mov	r1, r2
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	4798      	blx	r3
 8008710:	4603      	mov	r3, r0
 8008712:	2b00      	cmp	r3, #0
 8008714:	d101      	bne.n	800871a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008716:	2300      	movs	r3, #0
 8008718:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800871a:	7bfb      	ldrb	r3, [r7, #15]
}
 800871c:	4618      	mov	r0, r3
 800871e:	3710      	adds	r7, #16
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}

08008724 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b082      	sub	sp, #8
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
 800872c:	460b      	mov	r3, r1
 800872e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008736:	685b      	ldr	r3, [r3, #4]
 8008738:	78fa      	ldrb	r2, [r7, #3]
 800873a:	4611      	mov	r1, r2
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	4798      	blx	r3

  return USBD_OK;
 8008740:	2300      	movs	r3, #0
}
 8008742:	4618      	mov	r0, r3
 8008744:	3708      	adds	r7, #8
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}

0800874a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800874a:	b580      	push	{r7, lr}
 800874c:	b082      	sub	sp, #8
 800874e:	af00      	add	r7, sp, #0
 8008750:	6078      	str	r0, [r7, #4]
 8008752:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800875a:	6839      	ldr	r1, [r7, #0]
 800875c:	4618      	mov	r0, r3
 800875e:	f000 ff10 	bl	8009582 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2201      	movs	r2, #1
 8008766:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008770:	461a      	mov	r2, r3
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800877e:	f003 031f 	and.w	r3, r3, #31
 8008782:	2b02      	cmp	r3, #2
 8008784:	d016      	beq.n	80087b4 <USBD_LL_SetupStage+0x6a>
 8008786:	2b02      	cmp	r3, #2
 8008788:	d81c      	bhi.n	80087c4 <USBD_LL_SetupStage+0x7a>
 800878a:	2b00      	cmp	r3, #0
 800878c:	d002      	beq.n	8008794 <USBD_LL_SetupStage+0x4a>
 800878e:	2b01      	cmp	r3, #1
 8008790:	d008      	beq.n	80087a4 <USBD_LL_SetupStage+0x5a>
 8008792:	e017      	b.n	80087c4 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800879a:	4619      	mov	r1, r3
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f000 fa03 	bl	8008ba8 <USBD_StdDevReq>
      break;
 80087a2:	e01a      	b.n	80087da <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80087aa:	4619      	mov	r1, r3
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f000 fa65 	bl	8008c7c <USBD_StdItfReq>
      break;
 80087b2:	e012      	b.n	80087da <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80087ba:	4619      	mov	r1, r3
 80087bc:	6878      	ldr	r0, [r7, #4]
 80087be:	f000 faa5 	bl	8008d0c <USBD_StdEPReq>
      break;
 80087c2:	e00a      	b.n	80087da <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80087ca:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80087ce:	b2db      	uxtb	r3, r3
 80087d0:	4619      	mov	r1, r3
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f001 fbd2 	bl	8009f7c <USBD_LL_StallEP>
      break;
 80087d8:	bf00      	nop
  }

  return USBD_OK;
 80087da:	2300      	movs	r3, #0
}
 80087dc:	4618      	mov	r0, r3
 80087de:	3708      	adds	r7, #8
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bd80      	pop	{r7, pc}

080087e4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b086      	sub	sp, #24
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	60f8      	str	r0, [r7, #12]
 80087ec:	460b      	mov	r3, r1
 80087ee:	607a      	str	r2, [r7, #4]
 80087f0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80087f2:	7afb      	ldrb	r3, [r7, #11]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d14b      	bne.n	8008890 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80087fe:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008806:	2b03      	cmp	r3, #3
 8008808:	d134      	bne.n	8008874 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800880a:	697b      	ldr	r3, [r7, #20]
 800880c:	68da      	ldr	r2, [r3, #12]
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	691b      	ldr	r3, [r3, #16]
 8008812:	429a      	cmp	r2, r3
 8008814:	d919      	bls.n	800884a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008816:	697b      	ldr	r3, [r7, #20]
 8008818:	68da      	ldr	r2, [r3, #12]
 800881a:	697b      	ldr	r3, [r7, #20]
 800881c:	691b      	ldr	r3, [r3, #16]
 800881e:	1ad2      	subs	r2, r2, r3
 8008820:	697b      	ldr	r3, [r7, #20]
 8008822:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008824:	697b      	ldr	r3, [r7, #20]
 8008826:	68da      	ldr	r2, [r3, #12]
 8008828:	697b      	ldr	r3, [r7, #20]
 800882a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800882c:	429a      	cmp	r2, r3
 800882e:	d203      	bcs.n	8008838 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008830:	697b      	ldr	r3, [r7, #20]
 8008832:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008834:	b29b      	uxth	r3, r3
 8008836:	e002      	b.n	800883e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008838:	697b      	ldr	r3, [r7, #20]
 800883a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800883c:	b29b      	uxth	r3, r3
 800883e:	461a      	mov	r2, r3
 8008840:	6879      	ldr	r1, [r7, #4]
 8008842:	68f8      	ldr	r0, [r7, #12]
 8008844:	f000 ff8f 	bl	8009766 <USBD_CtlContinueRx>
 8008848:	e038      	b.n	80088bc <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008850:	691b      	ldr	r3, [r3, #16]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d00a      	beq.n	800886c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800885c:	2b03      	cmp	r3, #3
 800885e:	d105      	bne.n	800886c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008866:	691b      	ldr	r3, [r3, #16]
 8008868:	68f8      	ldr	r0, [r7, #12]
 800886a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800886c:	68f8      	ldr	r0, [r7, #12]
 800886e:	f000 ff8c 	bl	800978a <USBD_CtlSendStatus>
 8008872:	e023      	b.n	80088bc <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800887a:	2b05      	cmp	r3, #5
 800887c:	d11e      	bne.n	80088bc <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	2200      	movs	r2, #0
 8008882:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008886:	2100      	movs	r1, #0
 8008888:	68f8      	ldr	r0, [r7, #12]
 800888a:	f001 fb77 	bl	8009f7c <USBD_LL_StallEP>
 800888e:	e015      	b.n	80088bc <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008896:	699b      	ldr	r3, [r3, #24]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d00d      	beq.n	80088b8 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80088a2:	2b03      	cmp	r3, #3
 80088a4:	d108      	bne.n	80088b8 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088ac:	699b      	ldr	r3, [r3, #24]
 80088ae:	7afa      	ldrb	r2, [r7, #11]
 80088b0:	4611      	mov	r1, r2
 80088b2:	68f8      	ldr	r0, [r7, #12]
 80088b4:	4798      	blx	r3
 80088b6:	e001      	b.n	80088bc <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80088b8:	2302      	movs	r3, #2
 80088ba:	e000      	b.n	80088be <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80088bc:	2300      	movs	r3, #0
}
 80088be:	4618      	mov	r0, r3
 80088c0:	3718      	adds	r7, #24
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}

080088c6 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80088c6:	b580      	push	{r7, lr}
 80088c8:	b086      	sub	sp, #24
 80088ca:	af00      	add	r7, sp, #0
 80088cc:	60f8      	str	r0, [r7, #12]
 80088ce:	460b      	mov	r3, r1
 80088d0:	607a      	str	r2, [r7, #4]
 80088d2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80088d4:	7afb      	ldrb	r3, [r7, #11]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d17f      	bne.n	80089da <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	3314      	adds	r3, #20
 80088de:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80088e6:	2b02      	cmp	r3, #2
 80088e8:	d15c      	bne.n	80089a4 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80088ea:	697b      	ldr	r3, [r7, #20]
 80088ec:	68da      	ldr	r2, [r3, #12]
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	691b      	ldr	r3, [r3, #16]
 80088f2:	429a      	cmp	r2, r3
 80088f4:	d915      	bls.n	8008922 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	68da      	ldr	r2, [r3, #12]
 80088fa:	697b      	ldr	r3, [r7, #20]
 80088fc:	691b      	ldr	r3, [r3, #16]
 80088fe:	1ad2      	subs	r2, r2, r3
 8008900:	697b      	ldr	r3, [r7, #20]
 8008902:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008904:	697b      	ldr	r3, [r7, #20]
 8008906:	68db      	ldr	r3, [r3, #12]
 8008908:	b29b      	uxth	r3, r3
 800890a:	461a      	mov	r2, r3
 800890c:	6879      	ldr	r1, [r7, #4]
 800890e:	68f8      	ldr	r0, [r7, #12]
 8008910:	f000 fef9 	bl	8009706 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008914:	2300      	movs	r3, #0
 8008916:	2200      	movs	r2, #0
 8008918:	2100      	movs	r1, #0
 800891a:	68f8      	ldr	r0, [r7, #12]
 800891c:	f001 fbd9 	bl	800a0d2 <USBD_LL_PrepareReceive>
 8008920:	e04e      	b.n	80089c0 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008922:	697b      	ldr	r3, [r7, #20]
 8008924:	689b      	ldr	r3, [r3, #8]
 8008926:	697a      	ldr	r2, [r7, #20]
 8008928:	6912      	ldr	r2, [r2, #16]
 800892a:	fbb3 f1f2 	udiv	r1, r3, r2
 800892e:	fb01 f202 	mul.w	r2, r1, r2
 8008932:	1a9b      	subs	r3, r3, r2
 8008934:	2b00      	cmp	r3, #0
 8008936:	d11c      	bne.n	8008972 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008938:	697b      	ldr	r3, [r7, #20]
 800893a:	689a      	ldr	r2, [r3, #8]
 800893c:	697b      	ldr	r3, [r7, #20]
 800893e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008940:	429a      	cmp	r2, r3
 8008942:	d316      	bcc.n	8008972 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008944:	697b      	ldr	r3, [r7, #20]
 8008946:	689a      	ldr	r2, [r3, #8]
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800894e:	429a      	cmp	r2, r3
 8008950:	d20f      	bcs.n	8008972 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008952:	2200      	movs	r2, #0
 8008954:	2100      	movs	r1, #0
 8008956:	68f8      	ldr	r0, [r7, #12]
 8008958:	f000 fed5 	bl	8009706 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	2200      	movs	r2, #0
 8008960:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008964:	2300      	movs	r3, #0
 8008966:	2200      	movs	r2, #0
 8008968:	2100      	movs	r1, #0
 800896a:	68f8      	ldr	r0, [r7, #12]
 800896c:	f001 fbb1 	bl	800a0d2 <USBD_LL_PrepareReceive>
 8008970:	e026      	b.n	80089c0 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008978:	68db      	ldr	r3, [r3, #12]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d00a      	beq.n	8008994 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008984:	2b03      	cmp	r3, #3
 8008986:	d105      	bne.n	8008994 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800898e:	68db      	ldr	r3, [r3, #12]
 8008990:	68f8      	ldr	r0, [r7, #12]
 8008992:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008994:	2180      	movs	r1, #128	; 0x80
 8008996:	68f8      	ldr	r0, [r7, #12]
 8008998:	f001 faf0 	bl	8009f7c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800899c:	68f8      	ldr	r0, [r7, #12]
 800899e:	f000 ff07 	bl	80097b0 <USBD_CtlReceiveStatus>
 80089a2:	e00d      	b.n	80089c0 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80089aa:	2b04      	cmp	r3, #4
 80089ac:	d004      	beq.n	80089b8 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d103      	bne.n	80089c0 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80089b8:	2180      	movs	r1, #128	; 0x80
 80089ba:	68f8      	ldr	r0, [r7, #12]
 80089bc:	f001 fade 	bl	8009f7c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80089c6:	2b01      	cmp	r3, #1
 80089c8:	d11d      	bne.n	8008a06 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80089ca:	68f8      	ldr	r0, [r7, #12]
 80089cc:	f7ff fe81 	bl	80086d2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	2200      	movs	r2, #0
 80089d4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80089d8:	e015      	b.n	8008a06 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089e0:	695b      	ldr	r3, [r3, #20]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d00d      	beq.n	8008a02 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80089ec:	2b03      	cmp	r3, #3
 80089ee:	d108      	bne.n	8008a02 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089f6:	695b      	ldr	r3, [r3, #20]
 80089f8:	7afa      	ldrb	r2, [r7, #11]
 80089fa:	4611      	mov	r1, r2
 80089fc:	68f8      	ldr	r0, [r7, #12]
 80089fe:	4798      	blx	r3
 8008a00:	e001      	b.n	8008a06 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008a02:	2302      	movs	r3, #2
 8008a04:	e000      	b.n	8008a08 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008a06:	2300      	movs	r3, #0
}
 8008a08:	4618      	mov	r0, r3
 8008a0a:	3718      	adds	r7, #24
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bd80      	pop	{r7, pc}

08008a10 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b082      	sub	sp, #8
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008a18:	2340      	movs	r3, #64	; 0x40
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	2100      	movs	r1, #0
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f001 fa67 	bl	8009ef2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2201      	movs	r2, #1
 8008a28:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2240      	movs	r2, #64	; 0x40
 8008a30:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008a34:	2340      	movs	r3, #64	; 0x40
 8008a36:	2200      	movs	r2, #0
 8008a38:	2180      	movs	r1, #128	; 0x80
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f001 fa59 	bl	8009ef2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2201      	movs	r2, #1
 8008a44:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2240      	movs	r2, #64	; 0x40
 8008a4a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2201      	movs	r2, #1
 8008a50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2200      	movs	r2, #0
 8008a58:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2200      	movs	r2, #0
 8008a60:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2200      	movs	r2, #0
 8008a66:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d009      	beq.n	8008a88 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a7a:	685b      	ldr	r3, [r3, #4]
 8008a7c:	687a      	ldr	r2, [r7, #4]
 8008a7e:	6852      	ldr	r2, [r2, #4]
 8008a80:	b2d2      	uxtb	r2, r2
 8008a82:	4611      	mov	r1, r2
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	4798      	blx	r3
  }

  return USBD_OK;
 8008a88:	2300      	movs	r3, #0
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	3708      	adds	r7, #8
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}

08008a92 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008a92:	b480      	push	{r7}
 8008a94:	b083      	sub	sp, #12
 8008a96:	af00      	add	r7, sp, #0
 8008a98:	6078      	str	r0, [r7, #4]
 8008a9a:	460b      	mov	r3, r1
 8008a9c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	78fa      	ldrb	r2, [r7, #3]
 8008aa2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008aa4:	2300      	movs	r3, #0
}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	370c      	adds	r7, #12
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bc80      	pop	{r7}
 8008aae:	4770      	bx	lr

08008ab0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b083      	sub	sp, #12
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2204      	movs	r2, #4
 8008ac8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008acc:	2300      	movs	r3, #0
}
 8008ace:	4618      	mov	r0, r3
 8008ad0:	370c      	adds	r7, #12
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bc80      	pop	{r7}
 8008ad6:	4770      	bx	lr

08008ad8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b083      	sub	sp, #12
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ae6:	2b04      	cmp	r3, #4
 8008ae8:	d105      	bne.n	8008af6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008af6:	2300      	movs	r3, #0
}
 8008af8:	4618      	mov	r0, r3
 8008afa:	370c      	adds	r7, #12
 8008afc:	46bd      	mov	sp, r7
 8008afe:	bc80      	pop	{r7}
 8008b00:	4770      	bx	lr

08008b02 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008b02:	b580      	push	{r7, lr}
 8008b04:	b082      	sub	sp, #8
 8008b06:	af00      	add	r7, sp, #0
 8008b08:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b10:	2b03      	cmp	r3, #3
 8008b12:	d10b      	bne.n	8008b2c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b1a:	69db      	ldr	r3, [r3, #28]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d005      	beq.n	8008b2c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b26:	69db      	ldr	r3, [r3, #28]
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008b2c:	2300      	movs	r3, #0
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	3708      	adds	r7, #8
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}

08008b36 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008b36:	b480      	push	{r7}
 8008b38:	b083      	sub	sp, #12
 8008b3a:	af00      	add	r7, sp, #0
 8008b3c:	6078      	str	r0, [r7, #4]
 8008b3e:	460b      	mov	r3, r1
 8008b40:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8008b42:	2300      	movs	r3, #0
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	370c      	adds	r7, #12
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bc80      	pop	{r7}
 8008b4c:	4770      	bx	lr

08008b4e <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008b4e:	b480      	push	{r7}
 8008b50:	b083      	sub	sp, #12
 8008b52:	af00      	add	r7, sp, #0
 8008b54:	6078      	str	r0, [r7, #4]
 8008b56:	460b      	mov	r3, r1
 8008b58:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8008b5a:	2300      	movs	r3, #0
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	370c      	adds	r7, #12
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bc80      	pop	{r7}
 8008b64:	4770      	bx	lr

08008b66 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008b66:	b480      	push	{r7}
 8008b68:	b083      	sub	sp, #12
 8008b6a:	af00      	add	r7, sp, #0
 8008b6c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008b6e:	2300      	movs	r3, #0
}
 8008b70:	4618      	mov	r0, r3
 8008b72:	370c      	adds	r7, #12
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bc80      	pop	{r7}
 8008b78:	4770      	bx	lr

08008b7a <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008b7a:	b580      	push	{r7, lr}
 8008b7c:	b082      	sub	sp, #8
 8008b7e:	af00      	add	r7, sp, #0
 8008b80:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2201      	movs	r2, #1
 8008b86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b90:	685b      	ldr	r3, [r3, #4]
 8008b92:	687a      	ldr	r2, [r7, #4]
 8008b94:	6852      	ldr	r2, [r2, #4]
 8008b96:	b2d2      	uxtb	r2, r2
 8008b98:	4611      	mov	r1, r2
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	4798      	blx	r3

  return USBD_OK;
 8008b9e:	2300      	movs	r3, #0
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	3708      	adds	r7, #8
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}

08008ba8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b084      	sub	sp, #16
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
 8008bb0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	781b      	ldrb	r3, [r3, #0]
 8008bba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008bbe:	2b40      	cmp	r3, #64	; 0x40
 8008bc0:	d005      	beq.n	8008bce <USBD_StdDevReq+0x26>
 8008bc2:	2b40      	cmp	r3, #64	; 0x40
 8008bc4:	d84f      	bhi.n	8008c66 <USBD_StdDevReq+0xbe>
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d009      	beq.n	8008bde <USBD_StdDevReq+0x36>
 8008bca:	2b20      	cmp	r3, #32
 8008bcc:	d14b      	bne.n	8008c66 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bd4:	689b      	ldr	r3, [r3, #8]
 8008bd6:	6839      	ldr	r1, [r7, #0]
 8008bd8:	6878      	ldr	r0, [r7, #4]
 8008bda:	4798      	blx	r3
      break;
 8008bdc:	e048      	b.n	8008c70 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	785b      	ldrb	r3, [r3, #1]
 8008be2:	2b09      	cmp	r3, #9
 8008be4:	d839      	bhi.n	8008c5a <USBD_StdDevReq+0xb2>
 8008be6:	a201      	add	r2, pc, #4	; (adr r2, 8008bec <USBD_StdDevReq+0x44>)
 8008be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bec:	08008c3d 	.word	0x08008c3d
 8008bf0:	08008c51 	.word	0x08008c51
 8008bf4:	08008c5b 	.word	0x08008c5b
 8008bf8:	08008c47 	.word	0x08008c47
 8008bfc:	08008c5b 	.word	0x08008c5b
 8008c00:	08008c1f 	.word	0x08008c1f
 8008c04:	08008c15 	.word	0x08008c15
 8008c08:	08008c5b 	.word	0x08008c5b
 8008c0c:	08008c33 	.word	0x08008c33
 8008c10:	08008c29 	.word	0x08008c29
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008c14:	6839      	ldr	r1, [r7, #0]
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	f000 f9dc 	bl	8008fd4 <USBD_GetDescriptor>
          break;
 8008c1c:	e022      	b.n	8008c64 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008c1e:	6839      	ldr	r1, [r7, #0]
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f000 fb3f 	bl	80092a4 <USBD_SetAddress>
          break;
 8008c26:	e01d      	b.n	8008c64 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008c28:	6839      	ldr	r1, [r7, #0]
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f000 fb7e 	bl	800932c <USBD_SetConfig>
          break;
 8008c30:	e018      	b.n	8008c64 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008c32:	6839      	ldr	r1, [r7, #0]
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f000 fc07 	bl	8009448 <USBD_GetConfig>
          break;
 8008c3a:	e013      	b.n	8008c64 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008c3c:	6839      	ldr	r1, [r7, #0]
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	f000 fc37 	bl	80094b2 <USBD_GetStatus>
          break;
 8008c44:	e00e      	b.n	8008c64 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008c46:	6839      	ldr	r1, [r7, #0]
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	f000 fc65 	bl	8009518 <USBD_SetFeature>
          break;
 8008c4e:	e009      	b.n	8008c64 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008c50:	6839      	ldr	r1, [r7, #0]
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f000 fc74 	bl	8009540 <USBD_ClrFeature>
          break;
 8008c58:	e004      	b.n	8008c64 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008c5a:	6839      	ldr	r1, [r7, #0]
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f000 fccc 	bl	80095fa <USBD_CtlError>
          break;
 8008c62:	bf00      	nop
      }
      break;
 8008c64:	e004      	b.n	8008c70 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008c66:	6839      	ldr	r1, [r7, #0]
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f000 fcc6 	bl	80095fa <USBD_CtlError>
      break;
 8008c6e:	bf00      	nop
  }

  return ret;
 8008c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	3710      	adds	r7, #16
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}
 8008c7a:	bf00      	nop

08008c7c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b084      	sub	sp, #16
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
 8008c84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c86:	2300      	movs	r3, #0
 8008c88:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	781b      	ldrb	r3, [r3, #0]
 8008c8e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008c92:	2b40      	cmp	r3, #64	; 0x40
 8008c94:	d005      	beq.n	8008ca2 <USBD_StdItfReq+0x26>
 8008c96:	2b40      	cmp	r3, #64	; 0x40
 8008c98:	d82e      	bhi.n	8008cf8 <USBD_StdItfReq+0x7c>
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d001      	beq.n	8008ca2 <USBD_StdItfReq+0x26>
 8008c9e:	2b20      	cmp	r3, #32
 8008ca0:	d12a      	bne.n	8008cf8 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ca8:	3b01      	subs	r3, #1
 8008caa:	2b02      	cmp	r3, #2
 8008cac:	d81d      	bhi.n	8008cea <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	889b      	ldrh	r3, [r3, #4]
 8008cb2:	b2db      	uxtb	r3, r3
 8008cb4:	2b01      	cmp	r3, #1
 8008cb6:	d813      	bhi.n	8008ce0 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cbe:	689b      	ldr	r3, [r3, #8]
 8008cc0:	6839      	ldr	r1, [r7, #0]
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	4798      	blx	r3
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	88db      	ldrh	r3, [r3, #6]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d110      	bne.n	8008cf4 <USBD_StdItfReq+0x78>
 8008cd2:	7bfb      	ldrb	r3, [r7, #15]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d10d      	bne.n	8008cf4 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f000 fd56 	bl	800978a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008cde:	e009      	b.n	8008cf4 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008ce0:	6839      	ldr	r1, [r7, #0]
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f000 fc89 	bl	80095fa <USBD_CtlError>
          break;
 8008ce8:	e004      	b.n	8008cf4 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8008cea:	6839      	ldr	r1, [r7, #0]
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f000 fc84 	bl	80095fa <USBD_CtlError>
          break;
 8008cf2:	e000      	b.n	8008cf6 <USBD_StdItfReq+0x7a>
          break;
 8008cf4:	bf00      	nop
      }
      break;
 8008cf6:	e004      	b.n	8008d02 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008cf8:	6839      	ldr	r1, [r7, #0]
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f000 fc7d 	bl	80095fa <USBD_CtlError>
      break;
 8008d00:	bf00      	nop
  }

  return USBD_OK;
 8008d02:	2300      	movs	r3, #0
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	3710      	adds	r7, #16
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bd80      	pop	{r7, pc}

08008d0c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b084      	sub	sp, #16
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
 8008d14:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008d16:	2300      	movs	r3, #0
 8008d18:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	889b      	ldrh	r3, [r3, #4]
 8008d1e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	781b      	ldrb	r3, [r3, #0]
 8008d24:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008d28:	2b40      	cmp	r3, #64	; 0x40
 8008d2a:	d007      	beq.n	8008d3c <USBD_StdEPReq+0x30>
 8008d2c:	2b40      	cmp	r3, #64	; 0x40
 8008d2e:	f200 8146 	bhi.w	8008fbe <USBD_StdEPReq+0x2b2>
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d00a      	beq.n	8008d4c <USBD_StdEPReq+0x40>
 8008d36:	2b20      	cmp	r3, #32
 8008d38:	f040 8141 	bne.w	8008fbe <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d42:	689b      	ldr	r3, [r3, #8]
 8008d44:	6839      	ldr	r1, [r7, #0]
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	4798      	blx	r3
      break;
 8008d4a:	e13d      	b.n	8008fc8 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	781b      	ldrb	r3, [r3, #0]
 8008d50:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008d54:	2b20      	cmp	r3, #32
 8008d56:	d10a      	bne.n	8008d6e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d5e:	689b      	ldr	r3, [r3, #8]
 8008d60:	6839      	ldr	r1, [r7, #0]
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	4798      	blx	r3
 8008d66:	4603      	mov	r3, r0
 8008d68:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008d6a:	7bfb      	ldrb	r3, [r7, #15]
 8008d6c:	e12d      	b.n	8008fca <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	785b      	ldrb	r3, [r3, #1]
 8008d72:	2b03      	cmp	r3, #3
 8008d74:	d007      	beq.n	8008d86 <USBD_StdEPReq+0x7a>
 8008d76:	2b03      	cmp	r3, #3
 8008d78:	f300 811b 	bgt.w	8008fb2 <USBD_StdEPReq+0x2a6>
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d072      	beq.n	8008e66 <USBD_StdEPReq+0x15a>
 8008d80:	2b01      	cmp	r3, #1
 8008d82:	d03a      	beq.n	8008dfa <USBD_StdEPReq+0xee>
 8008d84:	e115      	b.n	8008fb2 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d8c:	2b02      	cmp	r3, #2
 8008d8e:	d002      	beq.n	8008d96 <USBD_StdEPReq+0x8a>
 8008d90:	2b03      	cmp	r3, #3
 8008d92:	d015      	beq.n	8008dc0 <USBD_StdEPReq+0xb4>
 8008d94:	e02b      	b.n	8008dee <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008d96:	7bbb      	ldrb	r3, [r7, #14]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d00c      	beq.n	8008db6 <USBD_StdEPReq+0xaa>
 8008d9c:	7bbb      	ldrb	r3, [r7, #14]
 8008d9e:	2b80      	cmp	r3, #128	; 0x80
 8008da0:	d009      	beq.n	8008db6 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008da2:	7bbb      	ldrb	r3, [r7, #14]
 8008da4:	4619      	mov	r1, r3
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	f001 f8e8 	bl	8009f7c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008dac:	2180      	movs	r1, #128	; 0x80
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f001 f8e4 	bl	8009f7c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008db4:	e020      	b.n	8008df8 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8008db6:	6839      	ldr	r1, [r7, #0]
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	f000 fc1e 	bl	80095fa <USBD_CtlError>
              break;
 8008dbe:	e01b      	b.n	8008df8 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	885b      	ldrh	r3, [r3, #2]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d10e      	bne.n	8008de6 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008dc8:	7bbb      	ldrb	r3, [r7, #14]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d00b      	beq.n	8008de6 <USBD_StdEPReq+0xda>
 8008dce:	7bbb      	ldrb	r3, [r7, #14]
 8008dd0:	2b80      	cmp	r3, #128	; 0x80
 8008dd2:	d008      	beq.n	8008de6 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	88db      	ldrh	r3, [r3, #6]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d104      	bne.n	8008de6 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008ddc:	7bbb      	ldrb	r3, [r7, #14]
 8008dde:	4619      	mov	r1, r3
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	f001 f8cb 	bl	8009f7c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f000 fccf 	bl	800978a <USBD_CtlSendStatus>

              break;
 8008dec:	e004      	b.n	8008df8 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8008dee:	6839      	ldr	r1, [r7, #0]
 8008df0:	6878      	ldr	r0, [r7, #4]
 8008df2:	f000 fc02 	bl	80095fa <USBD_CtlError>
              break;
 8008df6:	bf00      	nop
          }
          break;
 8008df8:	e0e0      	b.n	8008fbc <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e00:	2b02      	cmp	r3, #2
 8008e02:	d002      	beq.n	8008e0a <USBD_StdEPReq+0xfe>
 8008e04:	2b03      	cmp	r3, #3
 8008e06:	d015      	beq.n	8008e34 <USBD_StdEPReq+0x128>
 8008e08:	e026      	b.n	8008e58 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008e0a:	7bbb      	ldrb	r3, [r7, #14]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d00c      	beq.n	8008e2a <USBD_StdEPReq+0x11e>
 8008e10:	7bbb      	ldrb	r3, [r7, #14]
 8008e12:	2b80      	cmp	r3, #128	; 0x80
 8008e14:	d009      	beq.n	8008e2a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008e16:	7bbb      	ldrb	r3, [r7, #14]
 8008e18:	4619      	mov	r1, r3
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f001 f8ae 	bl	8009f7c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008e20:	2180      	movs	r1, #128	; 0x80
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	f001 f8aa 	bl	8009f7c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008e28:	e01c      	b.n	8008e64 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8008e2a:	6839      	ldr	r1, [r7, #0]
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	f000 fbe4 	bl	80095fa <USBD_CtlError>
              break;
 8008e32:	e017      	b.n	8008e64 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	885b      	ldrh	r3, [r3, #2]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d112      	bne.n	8008e62 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008e3c:	7bbb      	ldrb	r3, [r7, #14]
 8008e3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d004      	beq.n	8008e50 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008e46:	7bbb      	ldrb	r3, [r7, #14]
 8008e48:	4619      	mov	r1, r3
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f001 f8b5 	bl	8009fba <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008e50:	6878      	ldr	r0, [r7, #4]
 8008e52:	f000 fc9a 	bl	800978a <USBD_CtlSendStatus>
              }
              break;
 8008e56:	e004      	b.n	8008e62 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008e58:	6839      	ldr	r1, [r7, #0]
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f000 fbcd 	bl	80095fa <USBD_CtlError>
              break;
 8008e60:	e000      	b.n	8008e64 <USBD_StdEPReq+0x158>
              break;
 8008e62:	bf00      	nop
          }
          break;
 8008e64:	e0aa      	b.n	8008fbc <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e6c:	2b02      	cmp	r3, #2
 8008e6e:	d002      	beq.n	8008e76 <USBD_StdEPReq+0x16a>
 8008e70:	2b03      	cmp	r3, #3
 8008e72:	d032      	beq.n	8008eda <USBD_StdEPReq+0x1ce>
 8008e74:	e097      	b.n	8008fa6 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008e76:	7bbb      	ldrb	r3, [r7, #14]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d007      	beq.n	8008e8c <USBD_StdEPReq+0x180>
 8008e7c:	7bbb      	ldrb	r3, [r7, #14]
 8008e7e:	2b80      	cmp	r3, #128	; 0x80
 8008e80:	d004      	beq.n	8008e8c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8008e82:	6839      	ldr	r1, [r7, #0]
 8008e84:	6878      	ldr	r0, [r7, #4]
 8008e86:	f000 fbb8 	bl	80095fa <USBD_CtlError>
                break;
 8008e8a:	e091      	b.n	8008fb0 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	da0b      	bge.n	8008eac <USBD_StdEPReq+0x1a0>
 8008e94:	7bbb      	ldrb	r3, [r7, #14]
 8008e96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e9a:	4613      	mov	r3, r2
 8008e9c:	009b      	lsls	r3, r3, #2
 8008e9e:	4413      	add	r3, r2
 8008ea0:	009b      	lsls	r3, r3, #2
 8008ea2:	3310      	adds	r3, #16
 8008ea4:	687a      	ldr	r2, [r7, #4]
 8008ea6:	4413      	add	r3, r2
 8008ea8:	3304      	adds	r3, #4
 8008eaa:	e00b      	b.n	8008ec4 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008eac:	7bbb      	ldrb	r3, [r7, #14]
 8008eae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008eb2:	4613      	mov	r3, r2
 8008eb4:	009b      	lsls	r3, r3, #2
 8008eb6:	4413      	add	r3, r2
 8008eb8:	009b      	lsls	r3, r3, #2
 8008eba:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008ebe:	687a      	ldr	r2, [r7, #4]
 8008ec0:	4413      	add	r3, r2
 8008ec2:	3304      	adds	r3, #4
 8008ec4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	2200      	movs	r2, #0
 8008eca:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	2202      	movs	r2, #2
 8008ed0:	4619      	mov	r1, r3
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	f000 fbfb 	bl	80096ce <USBD_CtlSendData>
              break;
 8008ed8:	e06a      	b.n	8008fb0 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008eda:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	da11      	bge.n	8008f06 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008ee2:	7bbb      	ldrb	r3, [r7, #14]
 8008ee4:	f003 020f 	and.w	r2, r3, #15
 8008ee8:	6879      	ldr	r1, [r7, #4]
 8008eea:	4613      	mov	r3, r2
 8008eec:	009b      	lsls	r3, r3, #2
 8008eee:	4413      	add	r3, r2
 8008ef0:	009b      	lsls	r3, r3, #2
 8008ef2:	440b      	add	r3, r1
 8008ef4:	3318      	adds	r3, #24
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d117      	bne.n	8008f2c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008efc:	6839      	ldr	r1, [r7, #0]
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	f000 fb7b 	bl	80095fa <USBD_CtlError>
                  break;
 8008f04:	e054      	b.n	8008fb0 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008f06:	7bbb      	ldrb	r3, [r7, #14]
 8008f08:	f003 020f 	and.w	r2, r3, #15
 8008f0c:	6879      	ldr	r1, [r7, #4]
 8008f0e:	4613      	mov	r3, r2
 8008f10:	009b      	lsls	r3, r3, #2
 8008f12:	4413      	add	r3, r2
 8008f14:	009b      	lsls	r3, r3, #2
 8008f16:	440b      	add	r3, r1
 8008f18:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d104      	bne.n	8008f2c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008f22:	6839      	ldr	r1, [r7, #0]
 8008f24:	6878      	ldr	r0, [r7, #4]
 8008f26:	f000 fb68 	bl	80095fa <USBD_CtlError>
                  break;
 8008f2a:	e041      	b.n	8008fb0 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008f2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	da0b      	bge.n	8008f4c <USBD_StdEPReq+0x240>
 8008f34:	7bbb      	ldrb	r3, [r7, #14]
 8008f36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008f3a:	4613      	mov	r3, r2
 8008f3c:	009b      	lsls	r3, r3, #2
 8008f3e:	4413      	add	r3, r2
 8008f40:	009b      	lsls	r3, r3, #2
 8008f42:	3310      	adds	r3, #16
 8008f44:	687a      	ldr	r2, [r7, #4]
 8008f46:	4413      	add	r3, r2
 8008f48:	3304      	adds	r3, #4
 8008f4a:	e00b      	b.n	8008f64 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008f4c:	7bbb      	ldrb	r3, [r7, #14]
 8008f4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008f52:	4613      	mov	r3, r2
 8008f54:	009b      	lsls	r3, r3, #2
 8008f56:	4413      	add	r3, r2
 8008f58:	009b      	lsls	r3, r3, #2
 8008f5a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008f5e:	687a      	ldr	r2, [r7, #4]
 8008f60:	4413      	add	r3, r2
 8008f62:	3304      	adds	r3, #4
 8008f64:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008f66:	7bbb      	ldrb	r3, [r7, #14]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d002      	beq.n	8008f72 <USBD_StdEPReq+0x266>
 8008f6c:	7bbb      	ldrb	r3, [r7, #14]
 8008f6e:	2b80      	cmp	r3, #128	; 0x80
 8008f70:	d103      	bne.n	8008f7a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	2200      	movs	r2, #0
 8008f76:	601a      	str	r2, [r3, #0]
 8008f78:	e00e      	b.n	8008f98 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008f7a:	7bbb      	ldrb	r3, [r7, #14]
 8008f7c:	4619      	mov	r1, r3
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	f001 f83a 	bl	8009ff8 <USBD_LL_IsStallEP>
 8008f84:	4603      	mov	r3, r0
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d003      	beq.n	8008f92 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	2201      	movs	r2, #1
 8008f8e:	601a      	str	r2, [r3, #0]
 8008f90:	e002      	b.n	8008f98 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	2200      	movs	r2, #0
 8008f96:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	2202      	movs	r2, #2
 8008f9c:	4619      	mov	r1, r3
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f000 fb95 	bl	80096ce <USBD_CtlSendData>
              break;
 8008fa4:	e004      	b.n	8008fb0 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8008fa6:	6839      	ldr	r1, [r7, #0]
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f000 fb26 	bl	80095fa <USBD_CtlError>
              break;
 8008fae:	bf00      	nop
          }
          break;
 8008fb0:	e004      	b.n	8008fbc <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8008fb2:	6839      	ldr	r1, [r7, #0]
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f000 fb20 	bl	80095fa <USBD_CtlError>
          break;
 8008fba:	bf00      	nop
      }
      break;
 8008fbc:	e004      	b.n	8008fc8 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8008fbe:	6839      	ldr	r1, [r7, #0]
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	f000 fb1a 	bl	80095fa <USBD_CtlError>
      break;
 8008fc6:	bf00      	nop
  }

  return ret;
 8008fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	3710      	adds	r7, #16
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}
	...

08008fd4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b084      	sub	sp, #16
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
 8008fdc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008fde:	2300      	movs	r3, #0
 8008fe0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	885b      	ldrh	r3, [r3, #2]
 8008fee:	0a1b      	lsrs	r3, r3, #8
 8008ff0:	b29b      	uxth	r3, r3
 8008ff2:	3b01      	subs	r3, #1
 8008ff4:	2b06      	cmp	r3, #6
 8008ff6:	f200 8128 	bhi.w	800924a <USBD_GetDescriptor+0x276>
 8008ffa:	a201      	add	r2, pc, #4	; (adr r2, 8009000 <USBD_GetDescriptor+0x2c>)
 8008ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009000:	0800901d 	.word	0x0800901d
 8009004:	08009035 	.word	0x08009035
 8009008:	08009075 	.word	0x08009075
 800900c:	0800924b 	.word	0x0800924b
 8009010:	0800924b 	.word	0x0800924b
 8009014:	080091eb 	.word	0x080091eb
 8009018:	08009217 	.word	0x08009217
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	687a      	ldr	r2, [r7, #4]
 8009026:	7c12      	ldrb	r2, [r2, #16]
 8009028:	f107 0108 	add.w	r1, r7, #8
 800902c:	4610      	mov	r0, r2
 800902e:	4798      	blx	r3
 8009030:	60f8      	str	r0, [r7, #12]
      break;
 8009032:	e112      	b.n	800925a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	7c1b      	ldrb	r3, [r3, #16]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d10d      	bne.n	8009058 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009044:	f107 0208 	add.w	r2, r7, #8
 8009048:	4610      	mov	r0, r2
 800904a:	4798      	blx	r3
 800904c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	3301      	adds	r3, #1
 8009052:	2202      	movs	r2, #2
 8009054:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009056:	e100      	b.n	800925a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800905e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009060:	f107 0208 	add.w	r2, r7, #8
 8009064:	4610      	mov	r0, r2
 8009066:	4798      	blx	r3
 8009068:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	3301      	adds	r3, #1
 800906e:	2202      	movs	r2, #2
 8009070:	701a      	strb	r2, [r3, #0]
      break;
 8009072:	e0f2      	b.n	800925a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	885b      	ldrh	r3, [r3, #2]
 8009078:	b2db      	uxtb	r3, r3
 800907a:	2b05      	cmp	r3, #5
 800907c:	f200 80ac 	bhi.w	80091d8 <USBD_GetDescriptor+0x204>
 8009080:	a201      	add	r2, pc, #4	; (adr r2, 8009088 <USBD_GetDescriptor+0xb4>)
 8009082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009086:	bf00      	nop
 8009088:	080090a1 	.word	0x080090a1
 800908c:	080090d5 	.word	0x080090d5
 8009090:	08009109 	.word	0x08009109
 8009094:	0800913d 	.word	0x0800913d
 8009098:	08009171 	.word	0x08009171
 800909c:	080091a5 	.word	0x080091a5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80090a6:	685b      	ldr	r3, [r3, #4]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d00b      	beq.n	80090c4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80090b2:	685b      	ldr	r3, [r3, #4]
 80090b4:	687a      	ldr	r2, [r7, #4]
 80090b6:	7c12      	ldrb	r2, [r2, #16]
 80090b8:	f107 0108 	add.w	r1, r7, #8
 80090bc:	4610      	mov	r0, r2
 80090be:	4798      	blx	r3
 80090c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80090c2:	e091      	b.n	80091e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80090c4:	6839      	ldr	r1, [r7, #0]
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f000 fa97 	bl	80095fa <USBD_CtlError>
            err++;
 80090cc:	7afb      	ldrb	r3, [r7, #11]
 80090ce:	3301      	adds	r3, #1
 80090d0:	72fb      	strb	r3, [r7, #11]
          break;
 80090d2:	e089      	b.n	80091e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80090da:	689b      	ldr	r3, [r3, #8]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d00b      	beq.n	80090f8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80090e6:	689b      	ldr	r3, [r3, #8]
 80090e8:	687a      	ldr	r2, [r7, #4]
 80090ea:	7c12      	ldrb	r2, [r2, #16]
 80090ec:	f107 0108 	add.w	r1, r7, #8
 80090f0:	4610      	mov	r0, r2
 80090f2:	4798      	blx	r3
 80090f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80090f6:	e077      	b.n	80091e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80090f8:	6839      	ldr	r1, [r7, #0]
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f000 fa7d 	bl	80095fa <USBD_CtlError>
            err++;
 8009100:	7afb      	ldrb	r3, [r7, #11]
 8009102:	3301      	adds	r3, #1
 8009104:	72fb      	strb	r3, [r7, #11]
          break;
 8009106:	e06f      	b.n	80091e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800910e:	68db      	ldr	r3, [r3, #12]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d00b      	beq.n	800912c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800911a:	68db      	ldr	r3, [r3, #12]
 800911c:	687a      	ldr	r2, [r7, #4]
 800911e:	7c12      	ldrb	r2, [r2, #16]
 8009120:	f107 0108 	add.w	r1, r7, #8
 8009124:	4610      	mov	r0, r2
 8009126:	4798      	blx	r3
 8009128:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800912a:	e05d      	b.n	80091e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800912c:	6839      	ldr	r1, [r7, #0]
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f000 fa63 	bl	80095fa <USBD_CtlError>
            err++;
 8009134:	7afb      	ldrb	r3, [r7, #11]
 8009136:	3301      	adds	r3, #1
 8009138:	72fb      	strb	r3, [r7, #11]
          break;
 800913a:	e055      	b.n	80091e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009142:	691b      	ldr	r3, [r3, #16]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d00b      	beq.n	8009160 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800914e:	691b      	ldr	r3, [r3, #16]
 8009150:	687a      	ldr	r2, [r7, #4]
 8009152:	7c12      	ldrb	r2, [r2, #16]
 8009154:	f107 0108 	add.w	r1, r7, #8
 8009158:	4610      	mov	r0, r2
 800915a:	4798      	blx	r3
 800915c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800915e:	e043      	b.n	80091e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009160:	6839      	ldr	r1, [r7, #0]
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f000 fa49 	bl	80095fa <USBD_CtlError>
            err++;
 8009168:	7afb      	ldrb	r3, [r7, #11]
 800916a:	3301      	adds	r3, #1
 800916c:	72fb      	strb	r3, [r7, #11]
          break;
 800916e:	e03b      	b.n	80091e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009176:	695b      	ldr	r3, [r3, #20]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d00b      	beq.n	8009194 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009182:	695b      	ldr	r3, [r3, #20]
 8009184:	687a      	ldr	r2, [r7, #4]
 8009186:	7c12      	ldrb	r2, [r2, #16]
 8009188:	f107 0108 	add.w	r1, r7, #8
 800918c:	4610      	mov	r0, r2
 800918e:	4798      	blx	r3
 8009190:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009192:	e029      	b.n	80091e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009194:	6839      	ldr	r1, [r7, #0]
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	f000 fa2f 	bl	80095fa <USBD_CtlError>
            err++;
 800919c:	7afb      	ldrb	r3, [r7, #11]
 800919e:	3301      	adds	r3, #1
 80091a0:	72fb      	strb	r3, [r7, #11]
          break;
 80091a2:	e021      	b.n	80091e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80091aa:	699b      	ldr	r3, [r3, #24]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d00b      	beq.n	80091c8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80091b6:	699b      	ldr	r3, [r3, #24]
 80091b8:	687a      	ldr	r2, [r7, #4]
 80091ba:	7c12      	ldrb	r2, [r2, #16]
 80091bc:	f107 0108 	add.w	r1, r7, #8
 80091c0:	4610      	mov	r0, r2
 80091c2:	4798      	blx	r3
 80091c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80091c6:	e00f      	b.n	80091e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80091c8:	6839      	ldr	r1, [r7, #0]
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	f000 fa15 	bl	80095fa <USBD_CtlError>
            err++;
 80091d0:	7afb      	ldrb	r3, [r7, #11]
 80091d2:	3301      	adds	r3, #1
 80091d4:	72fb      	strb	r3, [r7, #11]
          break;
 80091d6:	e007      	b.n	80091e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80091d8:	6839      	ldr	r1, [r7, #0]
 80091da:	6878      	ldr	r0, [r7, #4]
 80091dc:	f000 fa0d 	bl	80095fa <USBD_CtlError>
          err++;
 80091e0:	7afb      	ldrb	r3, [r7, #11]
 80091e2:	3301      	adds	r3, #1
 80091e4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80091e6:	e038      	b.n	800925a <USBD_GetDescriptor+0x286>
 80091e8:	e037      	b.n	800925a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	7c1b      	ldrb	r3, [r3, #16]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d109      	bne.n	8009206 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091fa:	f107 0208 	add.w	r2, r7, #8
 80091fe:	4610      	mov	r0, r2
 8009200:	4798      	blx	r3
 8009202:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009204:	e029      	b.n	800925a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009206:	6839      	ldr	r1, [r7, #0]
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	f000 f9f6 	bl	80095fa <USBD_CtlError>
        err++;
 800920e:	7afb      	ldrb	r3, [r7, #11]
 8009210:	3301      	adds	r3, #1
 8009212:	72fb      	strb	r3, [r7, #11]
      break;
 8009214:	e021      	b.n	800925a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	7c1b      	ldrb	r3, [r3, #16]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d10d      	bne.n	800923a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009226:	f107 0208 	add.w	r2, r7, #8
 800922a:	4610      	mov	r0, r2
 800922c:	4798      	blx	r3
 800922e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	3301      	adds	r3, #1
 8009234:	2207      	movs	r2, #7
 8009236:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009238:	e00f      	b.n	800925a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800923a:	6839      	ldr	r1, [r7, #0]
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f000 f9dc 	bl	80095fa <USBD_CtlError>
        err++;
 8009242:	7afb      	ldrb	r3, [r7, #11]
 8009244:	3301      	adds	r3, #1
 8009246:	72fb      	strb	r3, [r7, #11]
      break;
 8009248:	e007      	b.n	800925a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800924a:	6839      	ldr	r1, [r7, #0]
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	f000 f9d4 	bl	80095fa <USBD_CtlError>
      err++;
 8009252:	7afb      	ldrb	r3, [r7, #11]
 8009254:	3301      	adds	r3, #1
 8009256:	72fb      	strb	r3, [r7, #11]
      break;
 8009258:	bf00      	nop
  }

  if (err != 0U)
 800925a:	7afb      	ldrb	r3, [r7, #11]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d11c      	bne.n	800929a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009260:	893b      	ldrh	r3, [r7, #8]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d011      	beq.n	800928a <USBD_GetDescriptor+0x2b6>
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	88db      	ldrh	r3, [r3, #6]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d00d      	beq.n	800928a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	88da      	ldrh	r2, [r3, #6]
 8009272:	893b      	ldrh	r3, [r7, #8]
 8009274:	4293      	cmp	r3, r2
 8009276:	bf28      	it	cs
 8009278:	4613      	movcs	r3, r2
 800927a:	b29b      	uxth	r3, r3
 800927c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800927e:	893b      	ldrh	r3, [r7, #8]
 8009280:	461a      	mov	r2, r3
 8009282:	68f9      	ldr	r1, [r7, #12]
 8009284:	6878      	ldr	r0, [r7, #4]
 8009286:	f000 fa22 	bl	80096ce <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	88db      	ldrh	r3, [r3, #6]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d104      	bne.n	800929c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009292:	6878      	ldr	r0, [r7, #4]
 8009294:	f000 fa79 	bl	800978a <USBD_CtlSendStatus>
 8009298:	e000      	b.n	800929c <USBD_GetDescriptor+0x2c8>
    return;
 800929a:	bf00      	nop
    }
  }
}
 800929c:	3710      	adds	r7, #16
 800929e:	46bd      	mov	sp, r7
 80092a0:	bd80      	pop	{r7, pc}
 80092a2:	bf00      	nop

080092a4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b084      	sub	sp, #16
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
 80092ac:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	889b      	ldrh	r3, [r3, #4]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d130      	bne.n	8009318 <USBD_SetAddress+0x74>
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	88db      	ldrh	r3, [r3, #6]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d12c      	bne.n	8009318 <USBD_SetAddress+0x74>
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	885b      	ldrh	r3, [r3, #2]
 80092c2:	2b7f      	cmp	r3, #127	; 0x7f
 80092c4:	d828      	bhi.n	8009318 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	885b      	ldrh	r3, [r3, #2]
 80092ca:	b2db      	uxtb	r3, r3
 80092cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092d0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092d8:	2b03      	cmp	r3, #3
 80092da:	d104      	bne.n	80092e6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80092dc:	6839      	ldr	r1, [r7, #0]
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f000 f98b 	bl	80095fa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092e4:	e01d      	b.n	8009322 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	7bfa      	ldrb	r2, [r7, #15]
 80092ea:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80092ee:	7bfb      	ldrb	r3, [r7, #15]
 80092f0:	4619      	mov	r1, r3
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f000 feab 	bl	800a04e <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80092f8:	6878      	ldr	r0, [r7, #4]
 80092fa:	f000 fa46 	bl	800978a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80092fe:	7bfb      	ldrb	r3, [r7, #15]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d004      	beq.n	800930e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2202      	movs	r2, #2
 8009308:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800930c:	e009      	b.n	8009322 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2201      	movs	r2, #1
 8009312:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009316:	e004      	b.n	8009322 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009318:	6839      	ldr	r1, [r7, #0]
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f000 f96d 	bl	80095fa <USBD_CtlError>
  }
}
 8009320:	bf00      	nop
 8009322:	bf00      	nop
 8009324:	3710      	adds	r7, #16
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}
	...

0800932c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b082      	sub	sp, #8
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
 8009334:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	885b      	ldrh	r3, [r3, #2]
 800933a:	b2da      	uxtb	r2, r3
 800933c:	4b41      	ldr	r3, [pc, #260]	; (8009444 <USBD_SetConfig+0x118>)
 800933e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009340:	4b40      	ldr	r3, [pc, #256]	; (8009444 <USBD_SetConfig+0x118>)
 8009342:	781b      	ldrb	r3, [r3, #0]
 8009344:	2b01      	cmp	r3, #1
 8009346:	d904      	bls.n	8009352 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009348:	6839      	ldr	r1, [r7, #0]
 800934a:	6878      	ldr	r0, [r7, #4]
 800934c:	f000 f955 	bl	80095fa <USBD_CtlError>
 8009350:	e075      	b.n	800943e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009358:	2b02      	cmp	r3, #2
 800935a:	d002      	beq.n	8009362 <USBD_SetConfig+0x36>
 800935c:	2b03      	cmp	r3, #3
 800935e:	d023      	beq.n	80093a8 <USBD_SetConfig+0x7c>
 8009360:	e062      	b.n	8009428 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009362:	4b38      	ldr	r3, [pc, #224]	; (8009444 <USBD_SetConfig+0x118>)
 8009364:	781b      	ldrb	r3, [r3, #0]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d01a      	beq.n	80093a0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800936a:	4b36      	ldr	r3, [pc, #216]	; (8009444 <USBD_SetConfig+0x118>)
 800936c:	781b      	ldrb	r3, [r3, #0]
 800936e:	461a      	mov	r2, r3
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2203      	movs	r2, #3
 8009378:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800937c:	4b31      	ldr	r3, [pc, #196]	; (8009444 <USBD_SetConfig+0x118>)
 800937e:	781b      	ldrb	r3, [r3, #0]
 8009380:	4619      	mov	r1, r3
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f7ff f9af 	bl	80086e6 <USBD_SetClassConfig>
 8009388:	4603      	mov	r3, r0
 800938a:	2b02      	cmp	r3, #2
 800938c:	d104      	bne.n	8009398 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800938e:	6839      	ldr	r1, [r7, #0]
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	f000 f932 	bl	80095fa <USBD_CtlError>
            return;
 8009396:	e052      	b.n	800943e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	f000 f9f6 	bl	800978a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800939e:	e04e      	b.n	800943e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80093a0:	6878      	ldr	r0, [r7, #4]
 80093a2:	f000 f9f2 	bl	800978a <USBD_CtlSendStatus>
        break;
 80093a6:	e04a      	b.n	800943e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80093a8:	4b26      	ldr	r3, [pc, #152]	; (8009444 <USBD_SetConfig+0x118>)
 80093aa:	781b      	ldrb	r3, [r3, #0]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d112      	bne.n	80093d6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2202      	movs	r2, #2
 80093b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80093b8:	4b22      	ldr	r3, [pc, #136]	; (8009444 <USBD_SetConfig+0x118>)
 80093ba:	781b      	ldrb	r3, [r3, #0]
 80093bc:	461a      	mov	r2, r3
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80093c2:	4b20      	ldr	r3, [pc, #128]	; (8009444 <USBD_SetConfig+0x118>)
 80093c4:	781b      	ldrb	r3, [r3, #0]
 80093c6:	4619      	mov	r1, r3
 80093c8:	6878      	ldr	r0, [r7, #4]
 80093ca:	f7ff f9ab 	bl	8008724 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f000 f9db 	bl	800978a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80093d4:	e033      	b.n	800943e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80093d6:	4b1b      	ldr	r3, [pc, #108]	; (8009444 <USBD_SetConfig+0x118>)
 80093d8:	781b      	ldrb	r3, [r3, #0]
 80093da:	461a      	mov	r2, r3
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	685b      	ldr	r3, [r3, #4]
 80093e0:	429a      	cmp	r2, r3
 80093e2:	d01d      	beq.n	8009420 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	685b      	ldr	r3, [r3, #4]
 80093e8:	b2db      	uxtb	r3, r3
 80093ea:	4619      	mov	r1, r3
 80093ec:	6878      	ldr	r0, [r7, #4]
 80093ee:	f7ff f999 	bl	8008724 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80093f2:	4b14      	ldr	r3, [pc, #80]	; (8009444 <USBD_SetConfig+0x118>)
 80093f4:	781b      	ldrb	r3, [r3, #0]
 80093f6:	461a      	mov	r2, r3
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80093fc:	4b11      	ldr	r3, [pc, #68]	; (8009444 <USBD_SetConfig+0x118>)
 80093fe:	781b      	ldrb	r3, [r3, #0]
 8009400:	4619      	mov	r1, r3
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f7ff f96f 	bl	80086e6 <USBD_SetClassConfig>
 8009408:	4603      	mov	r3, r0
 800940a:	2b02      	cmp	r3, #2
 800940c:	d104      	bne.n	8009418 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800940e:	6839      	ldr	r1, [r7, #0]
 8009410:	6878      	ldr	r0, [r7, #4]
 8009412:	f000 f8f2 	bl	80095fa <USBD_CtlError>
            return;
 8009416:	e012      	b.n	800943e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009418:	6878      	ldr	r0, [r7, #4]
 800941a:	f000 f9b6 	bl	800978a <USBD_CtlSendStatus>
        break;
 800941e:	e00e      	b.n	800943e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	f000 f9b2 	bl	800978a <USBD_CtlSendStatus>
        break;
 8009426:	e00a      	b.n	800943e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009428:	6839      	ldr	r1, [r7, #0]
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f000 f8e5 	bl	80095fa <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009430:	4b04      	ldr	r3, [pc, #16]	; (8009444 <USBD_SetConfig+0x118>)
 8009432:	781b      	ldrb	r3, [r3, #0]
 8009434:	4619      	mov	r1, r3
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f7ff f974 	bl	8008724 <USBD_ClrClassConfig>
        break;
 800943c:	bf00      	nop
    }
  }
}
 800943e:	3708      	adds	r7, #8
 8009440:	46bd      	mov	sp, r7
 8009442:	bd80      	pop	{r7, pc}
 8009444:	200003a4 	.word	0x200003a4

08009448 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b082      	sub	sp, #8
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
 8009450:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	88db      	ldrh	r3, [r3, #6]
 8009456:	2b01      	cmp	r3, #1
 8009458:	d004      	beq.n	8009464 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800945a:	6839      	ldr	r1, [r7, #0]
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	f000 f8cc 	bl	80095fa <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009462:	e022      	b.n	80094aa <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800946a:	2b02      	cmp	r3, #2
 800946c:	dc02      	bgt.n	8009474 <USBD_GetConfig+0x2c>
 800946e:	2b00      	cmp	r3, #0
 8009470:	dc03      	bgt.n	800947a <USBD_GetConfig+0x32>
 8009472:	e015      	b.n	80094a0 <USBD_GetConfig+0x58>
 8009474:	2b03      	cmp	r3, #3
 8009476:	d00b      	beq.n	8009490 <USBD_GetConfig+0x48>
 8009478:	e012      	b.n	80094a0 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	2200      	movs	r2, #0
 800947e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	3308      	adds	r3, #8
 8009484:	2201      	movs	r2, #1
 8009486:	4619      	mov	r1, r3
 8009488:	6878      	ldr	r0, [r7, #4]
 800948a:	f000 f920 	bl	80096ce <USBD_CtlSendData>
        break;
 800948e:	e00c      	b.n	80094aa <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	3304      	adds	r3, #4
 8009494:	2201      	movs	r2, #1
 8009496:	4619      	mov	r1, r3
 8009498:	6878      	ldr	r0, [r7, #4]
 800949a:	f000 f918 	bl	80096ce <USBD_CtlSendData>
        break;
 800949e:	e004      	b.n	80094aa <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80094a0:	6839      	ldr	r1, [r7, #0]
 80094a2:	6878      	ldr	r0, [r7, #4]
 80094a4:	f000 f8a9 	bl	80095fa <USBD_CtlError>
        break;
 80094a8:	bf00      	nop
}
 80094aa:	bf00      	nop
 80094ac:	3708      	adds	r7, #8
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}

080094b2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094b2:	b580      	push	{r7, lr}
 80094b4:	b082      	sub	sp, #8
 80094b6:	af00      	add	r7, sp, #0
 80094b8:	6078      	str	r0, [r7, #4]
 80094ba:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094c2:	3b01      	subs	r3, #1
 80094c4:	2b02      	cmp	r3, #2
 80094c6:	d81e      	bhi.n	8009506 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	88db      	ldrh	r3, [r3, #6]
 80094cc:	2b02      	cmp	r3, #2
 80094ce:	d004      	beq.n	80094da <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80094d0:	6839      	ldr	r1, [r7, #0]
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	f000 f891 	bl	80095fa <USBD_CtlError>
        break;
 80094d8:	e01a      	b.n	8009510 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2201      	movs	r2, #1
 80094de:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d005      	beq.n	80094f6 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	68db      	ldr	r3, [r3, #12]
 80094ee:	f043 0202 	orr.w	r2, r3, #2
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	330c      	adds	r3, #12
 80094fa:	2202      	movs	r2, #2
 80094fc:	4619      	mov	r1, r3
 80094fe:	6878      	ldr	r0, [r7, #4]
 8009500:	f000 f8e5 	bl	80096ce <USBD_CtlSendData>
      break;
 8009504:	e004      	b.n	8009510 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009506:	6839      	ldr	r1, [r7, #0]
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	f000 f876 	bl	80095fa <USBD_CtlError>
      break;
 800950e:	bf00      	nop
  }
}
 8009510:	bf00      	nop
 8009512:	3708      	adds	r7, #8
 8009514:	46bd      	mov	sp, r7
 8009516:	bd80      	pop	{r7, pc}

08009518 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b082      	sub	sp, #8
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
 8009520:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	885b      	ldrh	r3, [r3, #2]
 8009526:	2b01      	cmp	r3, #1
 8009528:	d106      	bne.n	8009538 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2201      	movs	r2, #1
 800952e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	f000 f929 	bl	800978a <USBD_CtlSendStatus>
  }
}
 8009538:	bf00      	nop
 800953a:	3708      	adds	r7, #8
 800953c:	46bd      	mov	sp, r7
 800953e:	bd80      	pop	{r7, pc}

08009540 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b082      	sub	sp, #8
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
 8009548:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009550:	3b01      	subs	r3, #1
 8009552:	2b02      	cmp	r3, #2
 8009554:	d80b      	bhi.n	800956e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	885b      	ldrh	r3, [r3, #2]
 800955a:	2b01      	cmp	r3, #1
 800955c:	d10c      	bne.n	8009578 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	2200      	movs	r2, #0
 8009562:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	f000 f90f 	bl	800978a <USBD_CtlSendStatus>
      }
      break;
 800956c:	e004      	b.n	8009578 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800956e:	6839      	ldr	r1, [r7, #0]
 8009570:	6878      	ldr	r0, [r7, #4]
 8009572:	f000 f842 	bl	80095fa <USBD_CtlError>
      break;
 8009576:	e000      	b.n	800957a <USBD_ClrFeature+0x3a>
      break;
 8009578:	bf00      	nop
  }
}
 800957a:	bf00      	nop
 800957c:	3708      	adds	r7, #8
 800957e:	46bd      	mov	sp, r7
 8009580:	bd80      	pop	{r7, pc}

08009582 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009582:	b480      	push	{r7}
 8009584:	b083      	sub	sp, #12
 8009586:	af00      	add	r7, sp, #0
 8009588:	6078      	str	r0, [r7, #4]
 800958a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	781a      	ldrb	r2, [r3, #0]
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	785a      	ldrb	r2, [r3, #1]
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	3302      	adds	r3, #2
 80095a0:	781b      	ldrb	r3, [r3, #0]
 80095a2:	b29a      	uxth	r2, r3
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	3303      	adds	r3, #3
 80095a8:	781b      	ldrb	r3, [r3, #0]
 80095aa:	b29b      	uxth	r3, r3
 80095ac:	021b      	lsls	r3, r3, #8
 80095ae:	b29b      	uxth	r3, r3
 80095b0:	4413      	add	r3, r2
 80095b2:	b29a      	uxth	r2, r3
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	3304      	adds	r3, #4
 80095bc:	781b      	ldrb	r3, [r3, #0]
 80095be:	b29a      	uxth	r2, r3
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	3305      	adds	r3, #5
 80095c4:	781b      	ldrb	r3, [r3, #0]
 80095c6:	b29b      	uxth	r3, r3
 80095c8:	021b      	lsls	r3, r3, #8
 80095ca:	b29b      	uxth	r3, r3
 80095cc:	4413      	add	r3, r2
 80095ce:	b29a      	uxth	r2, r3
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	3306      	adds	r3, #6
 80095d8:	781b      	ldrb	r3, [r3, #0]
 80095da:	b29a      	uxth	r2, r3
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	3307      	adds	r3, #7
 80095e0:	781b      	ldrb	r3, [r3, #0]
 80095e2:	b29b      	uxth	r3, r3
 80095e4:	021b      	lsls	r3, r3, #8
 80095e6:	b29b      	uxth	r3, r3
 80095e8:	4413      	add	r3, r2
 80095ea:	b29a      	uxth	r2, r3
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	80da      	strh	r2, [r3, #6]

}
 80095f0:	bf00      	nop
 80095f2:	370c      	adds	r7, #12
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bc80      	pop	{r7}
 80095f8:	4770      	bx	lr

080095fa <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80095fa:	b580      	push	{r7, lr}
 80095fc:	b082      	sub	sp, #8
 80095fe:	af00      	add	r7, sp, #0
 8009600:	6078      	str	r0, [r7, #4]
 8009602:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009604:	2180      	movs	r1, #128	; 0x80
 8009606:	6878      	ldr	r0, [r7, #4]
 8009608:	f000 fcb8 	bl	8009f7c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800960c:	2100      	movs	r1, #0
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	f000 fcb4 	bl	8009f7c <USBD_LL_StallEP>
}
 8009614:	bf00      	nop
 8009616:	3708      	adds	r7, #8
 8009618:	46bd      	mov	sp, r7
 800961a:	bd80      	pop	{r7, pc}

0800961c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b086      	sub	sp, #24
 8009620:	af00      	add	r7, sp, #0
 8009622:	60f8      	str	r0, [r7, #12]
 8009624:	60b9      	str	r1, [r7, #8]
 8009626:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009628:	2300      	movs	r3, #0
 800962a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d032      	beq.n	8009698 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009632:	68f8      	ldr	r0, [r7, #12]
 8009634:	f000 f834 	bl	80096a0 <USBD_GetLen>
 8009638:	4603      	mov	r3, r0
 800963a:	3301      	adds	r3, #1
 800963c:	b29b      	uxth	r3, r3
 800963e:	005b      	lsls	r3, r3, #1
 8009640:	b29a      	uxth	r2, r3
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009646:	7dfb      	ldrb	r3, [r7, #23]
 8009648:	1c5a      	adds	r2, r3, #1
 800964a:	75fa      	strb	r2, [r7, #23]
 800964c:	461a      	mov	r2, r3
 800964e:	68bb      	ldr	r3, [r7, #8]
 8009650:	4413      	add	r3, r2
 8009652:	687a      	ldr	r2, [r7, #4]
 8009654:	7812      	ldrb	r2, [r2, #0]
 8009656:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009658:	7dfb      	ldrb	r3, [r7, #23]
 800965a:	1c5a      	adds	r2, r3, #1
 800965c:	75fa      	strb	r2, [r7, #23]
 800965e:	461a      	mov	r2, r3
 8009660:	68bb      	ldr	r3, [r7, #8]
 8009662:	4413      	add	r3, r2
 8009664:	2203      	movs	r2, #3
 8009666:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009668:	e012      	b.n	8009690 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	1c5a      	adds	r2, r3, #1
 800966e:	60fa      	str	r2, [r7, #12]
 8009670:	7dfa      	ldrb	r2, [r7, #23]
 8009672:	1c51      	adds	r1, r2, #1
 8009674:	75f9      	strb	r1, [r7, #23]
 8009676:	4611      	mov	r1, r2
 8009678:	68ba      	ldr	r2, [r7, #8]
 800967a:	440a      	add	r2, r1
 800967c:	781b      	ldrb	r3, [r3, #0]
 800967e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009680:	7dfb      	ldrb	r3, [r7, #23]
 8009682:	1c5a      	adds	r2, r3, #1
 8009684:	75fa      	strb	r2, [r7, #23]
 8009686:	461a      	mov	r2, r3
 8009688:	68bb      	ldr	r3, [r7, #8]
 800968a:	4413      	add	r3, r2
 800968c:	2200      	movs	r2, #0
 800968e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	781b      	ldrb	r3, [r3, #0]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d1e8      	bne.n	800966a <USBD_GetString+0x4e>
    }
  }
}
 8009698:	bf00      	nop
 800969a:	3718      	adds	r7, #24
 800969c:	46bd      	mov	sp, r7
 800969e:	bd80      	pop	{r7, pc}

080096a0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80096a0:	b480      	push	{r7}
 80096a2:	b085      	sub	sp, #20
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80096a8:	2300      	movs	r3, #0
 80096aa:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80096ac:	e005      	b.n	80096ba <USBD_GetLen+0x1a>
  {
    len++;
 80096ae:	7bfb      	ldrb	r3, [r7, #15]
 80096b0:	3301      	adds	r3, #1
 80096b2:	73fb      	strb	r3, [r7, #15]
    buf++;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	3301      	adds	r3, #1
 80096b8:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	781b      	ldrb	r3, [r3, #0]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d1f5      	bne.n	80096ae <USBD_GetLen+0xe>
  }

  return len;
 80096c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80096c4:	4618      	mov	r0, r3
 80096c6:	3714      	adds	r7, #20
 80096c8:	46bd      	mov	sp, r7
 80096ca:	bc80      	pop	{r7}
 80096cc:	4770      	bx	lr

080096ce <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80096ce:	b580      	push	{r7, lr}
 80096d0:	b084      	sub	sp, #16
 80096d2:	af00      	add	r7, sp, #0
 80096d4:	60f8      	str	r0, [r7, #12]
 80096d6:	60b9      	str	r1, [r7, #8]
 80096d8:	4613      	mov	r3, r2
 80096da:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	2202      	movs	r2, #2
 80096e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80096e4:	88fa      	ldrh	r2, [r7, #6]
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80096ea:	88fa      	ldrh	r2, [r7, #6]
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80096f0:	88fb      	ldrh	r3, [r7, #6]
 80096f2:	68ba      	ldr	r2, [r7, #8]
 80096f4:	2100      	movs	r1, #0
 80096f6:	68f8      	ldr	r0, [r7, #12]
 80096f8:	f000 fcc8 	bl	800a08c <USBD_LL_Transmit>

  return USBD_OK;
 80096fc:	2300      	movs	r3, #0
}
 80096fe:	4618      	mov	r0, r3
 8009700:	3710      	adds	r7, #16
 8009702:	46bd      	mov	sp, r7
 8009704:	bd80      	pop	{r7, pc}

08009706 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009706:	b580      	push	{r7, lr}
 8009708:	b084      	sub	sp, #16
 800970a:	af00      	add	r7, sp, #0
 800970c:	60f8      	str	r0, [r7, #12]
 800970e:	60b9      	str	r1, [r7, #8]
 8009710:	4613      	mov	r3, r2
 8009712:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009714:	88fb      	ldrh	r3, [r7, #6]
 8009716:	68ba      	ldr	r2, [r7, #8]
 8009718:	2100      	movs	r1, #0
 800971a:	68f8      	ldr	r0, [r7, #12]
 800971c:	f000 fcb6 	bl	800a08c <USBD_LL_Transmit>

  return USBD_OK;
 8009720:	2300      	movs	r3, #0
}
 8009722:	4618      	mov	r0, r3
 8009724:	3710      	adds	r7, #16
 8009726:	46bd      	mov	sp, r7
 8009728:	bd80      	pop	{r7, pc}

0800972a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800972a:	b580      	push	{r7, lr}
 800972c:	b084      	sub	sp, #16
 800972e:	af00      	add	r7, sp, #0
 8009730:	60f8      	str	r0, [r7, #12]
 8009732:	60b9      	str	r1, [r7, #8]
 8009734:	4613      	mov	r3, r2
 8009736:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	2203      	movs	r2, #3
 800973c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009740:	88fa      	ldrh	r2, [r7, #6]
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009748:	88fa      	ldrh	r2, [r7, #6]
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009750:	88fb      	ldrh	r3, [r7, #6]
 8009752:	68ba      	ldr	r2, [r7, #8]
 8009754:	2100      	movs	r1, #0
 8009756:	68f8      	ldr	r0, [r7, #12]
 8009758:	f000 fcbb 	bl	800a0d2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800975c:	2300      	movs	r3, #0
}
 800975e:	4618      	mov	r0, r3
 8009760:	3710      	adds	r7, #16
 8009762:	46bd      	mov	sp, r7
 8009764:	bd80      	pop	{r7, pc}

08009766 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009766:	b580      	push	{r7, lr}
 8009768:	b084      	sub	sp, #16
 800976a:	af00      	add	r7, sp, #0
 800976c:	60f8      	str	r0, [r7, #12]
 800976e:	60b9      	str	r1, [r7, #8]
 8009770:	4613      	mov	r3, r2
 8009772:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009774:	88fb      	ldrh	r3, [r7, #6]
 8009776:	68ba      	ldr	r2, [r7, #8]
 8009778:	2100      	movs	r1, #0
 800977a:	68f8      	ldr	r0, [r7, #12]
 800977c:	f000 fca9 	bl	800a0d2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009780:	2300      	movs	r3, #0
}
 8009782:	4618      	mov	r0, r3
 8009784:	3710      	adds	r7, #16
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}

0800978a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800978a:	b580      	push	{r7, lr}
 800978c:	b082      	sub	sp, #8
 800978e:	af00      	add	r7, sp, #0
 8009790:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2204      	movs	r2, #4
 8009796:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800979a:	2300      	movs	r3, #0
 800979c:	2200      	movs	r2, #0
 800979e:	2100      	movs	r1, #0
 80097a0:	6878      	ldr	r0, [r7, #4]
 80097a2:	f000 fc73 	bl	800a08c <USBD_LL_Transmit>

  return USBD_OK;
 80097a6:	2300      	movs	r3, #0
}
 80097a8:	4618      	mov	r0, r3
 80097aa:	3708      	adds	r7, #8
 80097ac:	46bd      	mov	sp, r7
 80097ae:	bd80      	pop	{r7, pc}

080097b0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b082      	sub	sp, #8
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2205      	movs	r2, #5
 80097bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80097c0:	2300      	movs	r3, #0
 80097c2:	2200      	movs	r2, #0
 80097c4:	2100      	movs	r1, #0
 80097c6:	6878      	ldr	r0, [r7, #4]
 80097c8:	f000 fc83 	bl	800a0d2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80097cc:	2300      	movs	r3, #0
}
 80097ce:	4618      	mov	r0, r3
 80097d0:	3708      	adds	r7, #8
 80097d2:	46bd      	mov	sp, r7
 80097d4:	bd80      	pop	{r7, pc}

080097d6 <USB_Transmit>:
/* USER CODE END PV */

/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/
void USB_Transmit(char* Buf, uint16_t Len)
{
 80097d6:	b580      	push	{r7, lr}
 80097d8:	b082      	sub	sp, #8
 80097da:	af00      	add	r7, sp, #0
 80097dc:	6078      	str	r0, [r7, #4]
 80097de:	460b      	mov	r3, r1
 80097e0:	807b      	strh	r3, [r7, #2]
	CDC_Transmit_FS((uint8_t*)Buf, Len); //Explicit conversion of char ptr to uint8_t ptr
 80097e2:	887b      	ldrh	r3, [r7, #2]
 80097e4:	4619      	mov	r1, r3
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	f000 f8c2 	bl	8009970 <CDC_Transmit_FS>
}
 80097ec:	bf00      	nop
 80097ee:	3708      	adds	r7, #8
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bd80      	pop	{r7, pc}

080097f4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80097f8:	2200      	movs	r2, #0
 80097fa:	4912      	ldr	r1, [pc, #72]	; (8009844 <MX_USB_DEVICE_Init+0x50>)
 80097fc:	4812      	ldr	r0, [pc, #72]	; (8009848 <MX_USB_DEVICE_Init+0x54>)
 80097fe:	f7fe ff18 	bl	8008632 <USBD_Init>
 8009802:	4603      	mov	r3, r0
 8009804:	2b00      	cmp	r3, #0
 8009806:	d001      	beq.n	800980c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009808:	f7f9 f88a 	bl	8002920 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800980c:	490f      	ldr	r1, [pc, #60]	; (800984c <MX_USB_DEVICE_Init+0x58>)
 800980e:	480e      	ldr	r0, [pc, #56]	; (8009848 <MX_USB_DEVICE_Init+0x54>)
 8009810:	f7fe ff3a 	bl	8008688 <USBD_RegisterClass>
 8009814:	4603      	mov	r3, r0
 8009816:	2b00      	cmp	r3, #0
 8009818:	d001      	beq.n	800981e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800981a:	f7f9 f881 	bl	8002920 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800981e:	490c      	ldr	r1, [pc, #48]	; (8009850 <MX_USB_DEVICE_Init+0x5c>)
 8009820:	4809      	ldr	r0, [pc, #36]	; (8009848 <MX_USB_DEVICE_Init+0x54>)
 8009822:	f7fe fe6b 	bl	80084fc <USBD_CDC_RegisterInterface>
 8009826:	4603      	mov	r3, r0
 8009828:	2b00      	cmp	r3, #0
 800982a:	d001      	beq.n	8009830 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800982c:	f7f9 f878 	bl	8002920 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009830:	4805      	ldr	r0, [pc, #20]	; (8009848 <MX_USB_DEVICE_Init+0x54>)
 8009832:	f7fe ff42 	bl	80086ba <USBD_Start>
 8009836:	4603      	mov	r3, r0
 8009838:	2b00      	cmp	r3, #0
 800983a:	d001      	beq.n	8009840 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800983c:	f7f9 f870 	bl	8002920 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009840:	bf00      	nop
 8009842:	bd80      	pop	{r7, pc}
 8009844:	200001b0 	.word	0x200001b0
 8009848:	200003a8 	.word	0x200003a8
 800984c:	2000009c 	.word	0x2000009c
 8009850:	200001a0 	.word	0x200001a0

08009854 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009858:	2200      	movs	r2, #0
 800985a:	4905      	ldr	r1, [pc, #20]	; (8009870 <CDC_Init_FS+0x1c>)
 800985c:	4805      	ldr	r0, [pc, #20]	; (8009874 <CDC_Init_FS+0x20>)
 800985e:	f7fe fe63 	bl	8008528 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009862:	4905      	ldr	r1, [pc, #20]	; (8009878 <CDC_Init_FS+0x24>)
 8009864:	4803      	ldr	r0, [pc, #12]	; (8009874 <CDC_Init_FS+0x20>)
 8009866:	f7fe fe78 	bl	800855a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800986a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800986c:	4618      	mov	r0, r3
 800986e:	bd80      	pop	{r7, pc}
 8009870:	20000a6c 	.word	0x20000a6c
 8009874:	200003a8 	.word	0x200003a8
 8009878:	2000066c 	.word	0x2000066c

0800987c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800987c:	b480      	push	{r7}
 800987e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009880:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009882:	4618      	mov	r0, r3
 8009884:	46bd      	mov	sp, r7
 8009886:	bc80      	pop	{r7}
 8009888:	4770      	bx	lr
	...

0800988c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800988c:	b480      	push	{r7}
 800988e:	b083      	sub	sp, #12
 8009890:	af00      	add	r7, sp, #0
 8009892:	4603      	mov	r3, r0
 8009894:	6039      	str	r1, [r7, #0]
 8009896:	71fb      	strb	r3, [r7, #7]
 8009898:	4613      	mov	r3, r2
 800989a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800989c:	79fb      	ldrb	r3, [r7, #7]
 800989e:	2b23      	cmp	r3, #35	; 0x23
 80098a0:	d84a      	bhi.n	8009938 <CDC_Control_FS+0xac>
 80098a2:	a201      	add	r2, pc, #4	; (adr r2, 80098a8 <CDC_Control_FS+0x1c>)
 80098a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098a8:	08009939 	.word	0x08009939
 80098ac:	08009939 	.word	0x08009939
 80098b0:	08009939 	.word	0x08009939
 80098b4:	08009939 	.word	0x08009939
 80098b8:	08009939 	.word	0x08009939
 80098bc:	08009939 	.word	0x08009939
 80098c0:	08009939 	.word	0x08009939
 80098c4:	08009939 	.word	0x08009939
 80098c8:	08009939 	.word	0x08009939
 80098cc:	08009939 	.word	0x08009939
 80098d0:	08009939 	.word	0x08009939
 80098d4:	08009939 	.word	0x08009939
 80098d8:	08009939 	.word	0x08009939
 80098dc:	08009939 	.word	0x08009939
 80098e0:	08009939 	.word	0x08009939
 80098e4:	08009939 	.word	0x08009939
 80098e8:	08009939 	.word	0x08009939
 80098ec:	08009939 	.word	0x08009939
 80098f0:	08009939 	.word	0x08009939
 80098f4:	08009939 	.word	0x08009939
 80098f8:	08009939 	.word	0x08009939
 80098fc:	08009939 	.word	0x08009939
 8009900:	08009939 	.word	0x08009939
 8009904:	08009939 	.word	0x08009939
 8009908:	08009939 	.word	0x08009939
 800990c:	08009939 	.word	0x08009939
 8009910:	08009939 	.word	0x08009939
 8009914:	08009939 	.word	0x08009939
 8009918:	08009939 	.word	0x08009939
 800991c:	08009939 	.word	0x08009939
 8009920:	08009939 	.word	0x08009939
 8009924:	08009939 	.word	0x08009939
 8009928:	08009939 	.word	0x08009939
 800992c:	08009939 	.word	0x08009939
 8009930:	08009939 	.word	0x08009939
 8009934:	08009939 	.word	0x08009939
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009938:	bf00      	nop
  }

  return (USBD_OK);
 800993a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800993c:	4618      	mov	r0, r3
 800993e:	370c      	adds	r7, #12
 8009940:	46bd      	mov	sp, r7
 8009942:	bc80      	pop	{r7}
 8009944:	4770      	bx	lr
 8009946:	bf00      	nop

08009948 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b082      	sub	sp, #8
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
 8009950:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009952:	6879      	ldr	r1, [r7, #4]
 8009954:	4805      	ldr	r0, [pc, #20]	; (800996c <CDC_Receive_FS+0x24>)
 8009956:	f7fe fe00 	bl	800855a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800995a:	4804      	ldr	r0, [pc, #16]	; (800996c <CDC_Receive_FS+0x24>)
 800995c:	f7fe fe3f 	bl	80085de <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009960:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009962:	4618      	mov	r0, r3
 8009964:	3708      	adds	r7, #8
 8009966:	46bd      	mov	sp, r7
 8009968:	bd80      	pop	{r7, pc}
 800996a:	bf00      	nop
 800996c:	200003a8 	.word	0x200003a8

08009970 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b084      	sub	sp, #16
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
 8009978:	460b      	mov	r3, r1
 800997a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800997c:	2300      	movs	r3, #0
 800997e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009980:	4b0d      	ldr	r3, [pc, #52]	; (80099b8 <CDC_Transmit_FS+0x48>)
 8009982:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009986:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800998e:	2b00      	cmp	r3, #0
 8009990:	d001      	beq.n	8009996 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009992:	2301      	movs	r3, #1
 8009994:	e00b      	b.n	80099ae <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009996:	887b      	ldrh	r3, [r7, #2]
 8009998:	461a      	mov	r2, r3
 800999a:	6879      	ldr	r1, [r7, #4]
 800999c:	4806      	ldr	r0, [pc, #24]	; (80099b8 <CDC_Transmit_FS+0x48>)
 800999e:	f7fe fdc3 	bl	8008528 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80099a2:	4805      	ldr	r0, [pc, #20]	; (80099b8 <CDC_Transmit_FS+0x48>)
 80099a4:	f7fe fdec 	bl	8008580 <USBD_CDC_TransmitPacket>
 80099a8:	4603      	mov	r3, r0
 80099aa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80099ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80099ae:	4618      	mov	r0, r3
 80099b0:	3710      	adds	r7, #16
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}
 80099b6:	bf00      	nop
 80099b8:	200003a8 	.word	0x200003a8

080099bc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099bc:	b480      	push	{r7}
 80099be:	b083      	sub	sp, #12
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	4603      	mov	r3, r0
 80099c4:	6039      	str	r1, [r7, #0]
 80099c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	2212      	movs	r2, #18
 80099cc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80099ce:	4b03      	ldr	r3, [pc, #12]	; (80099dc <USBD_FS_DeviceDescriptor+0x20>)
}
 80099d0:	4618      	mov	r0, r3
 80099d2:	370c      	adds	r7, #12
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bc80      	pop	{r7}
 80099d8:	4770      	bx	lr
 80099da:	bf00      	nop
 80099dc:	200001cc 	.word	0x200001cc

080099e0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099e0:	b480      	push	{r7}
 80099e2:	b083      	sub	sp, #12
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	4603      	mov	r3, r0
 80099e8:	6039      	str	r1, [r7, #0]
 80099ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	2204      	movs	r2, #4
 80099f0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80099f2:	4b03      	ldr	r3, [pc, #12]	; (8009a00 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80099f4:	4618      	mov	r0, r3
 80099f6:	370c      	adds	r7, #12
 80099f8:	46bd      	mov	sp, r7
 80099fa:	bc80      	pop	{r7}
 80099fc:	4770      	bx	lr
 80099fe:	bf00      	nop
 8009a00:	200001e0 	.word	0x200001e0

08009a04 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b082      	sub	sp, #8
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	4603      	mov	r3, r0
 8009a0c:	6039      	str	r1, [r7, #0]
 8009a0e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009a10:	79fb      	ldrb	r3, [r7, #7]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d105      	bne.n	8009a22 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009a16:	683a      	ldr	r2, [r7, #0]
 8009a18:	4907      	ldr	r1, [pc, #28]	; (8009a38 <USBD_FS_ProductStrDescriptor+0x34>)
 8009a1a:	4808      	ldr	r0, [pc, #32]	; (8009a3c <USBD_FS_ProductStrDescriptor+0x38>)
 8009a1c:	f7ff fdfe 	bl	800961c <USBD_GetString>
 8009a20:	e004      	b.n	8009a2c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009a22:	683a      	ldr	r2, [r7, #0]
 8009a24:	4904      	ldr	r1, [pc, #16]	; (8009a38 <USBD_FS_ProductStrDescriptor+0x34>)
 8009a26:	4805      	ldr	r0, [pc, #20]	; (8009a3c <USBD_FS_ProductStrDescriptor+0x38>)
 8009a28:	f7ff fdf8 	bl	800961c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009a2c:	4b02      	ldr	r3, [pc, #8]	; (8009a38 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009a2e:	4618      	mov	r0, r3
 8009a30:	3708      	adds	r7, #8
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bd80      	pop	{r7, pc}
 8009a36:	bf00      	nop
 8009a38:	20000e6c 	.word	0x20000e6c
 8009a3c:	0800af6c 	.word	0x0800af6c

08009a40 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b082      	sub	sp, #8
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	4603      	mov	r3, r0
 8009a48:	6039      	str	r1, [r7, #0]
 8009a4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009a4c:	683a      	ldr	r2, [r7, #0]
 8009a4e:	4904      	ldr	r1, [pc, #16]	; (8009a60 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009a50:	4804      	ldr	r0, [pc, #16]	; (8009a64 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009a52:	f7ff fde3 	bl	800961c <USBD_GetString>
  return USBD_StrDesc;
 8009a56:	4b02      	ldr	r3, [pc, #8]	; (8009a60 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009a58:	4618      	mov	r0, r3
 8009a5a:	3708      	adds	r7, #8
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	bd80      	pop	{r7, pc}
 8009a60:	20000e6c 	.word	0x20000e6c
 8009a64:	0800af84 	.word	0x0800af84

08009a68 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b082      	sub	sp, #8
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	4603      	mov	r3, r0
 8009a70:	6039      	str	r1, [r7, #0]
 8009a72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009a74:	683b      	ldr	r3, [r7, #0]
 8009a76:	221a      	movs	r2, #26
 8009a78:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009a7a:	f000 f843 	bl	8009b04 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009a7e:	4b02      	ldr	r3, [pc, #8]	; (8009a88 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009a80:	4618      	mov	r0, r3
 8009a82:	3708      	adds	r7, #8
 8009a84:	46bd      	mov	sp, r7
 8009a86:	bd80      	pop	{r7, pc}
 8009a88:	200001e4 	.word	0x200001e4

08009a8c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b082      	sub	sp, #8
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	4603      	mov	r3, r0
 8009a94:	6039      	str	r1, [r7, #0]
 8009a96:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009a98:	79fb      	ldrb	r3, [r7, #7]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d105      	bne.n	8009aaa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009a9e:	683a      	ldr	r2, [r7, #0]
 8009aa0:	4907      	ldr	r1, [pc, #28]	; (8009ac0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009aa2:	4808      	ldr	r0, [pc, #32]	; (8009ac4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009aa4:	f7ff fdba 	bl	800961c <USBD_GetString>
 8009aa8:	e004      	b.n	8009ab4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009aaa:	683a      	ldr	r2, [r7, #0]
 8009aac:	4904      	ldr	r1, [pc, #16]	; (8009ac0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009aae:	4805      	ldr	r0, [pc, #20]	; (8009ac4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009ab0:	f7ff fdb4 	bl	800961c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009ab4:	4b02      	ldr	r3, [pc, #8]	; (8009ac0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	3708      	adds	r7, #8
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bd80      	pop	{r7, pc}
 8009abe:	bf00      	nop
 8009ac0:	20000e6c 	.word	0x20000e6c
 8009ac4:	0800af98 	.word	0x0800af98

08009ac8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b082      	sub	sp, #8
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	4603      	mov	r3, r0
 8009ad0:	6039      	str	r1, [r7, #0]
 8009ad2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009ad4:	79fb      	ldrb	r3, [r7, #7]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d105      	bne.n	8009ae6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009ada:	683a      	ldr	r2, [r7, #0]
 8009adc:	4907      	ldr	r1, [pc, #28]	; (8009afc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009ade:	4808      	ldr	r0, [pc, #32]	; (8009b00 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009ae0:	f7ff fd9c 	bl	800961c <USBD_GetString>
 8009ae4:	e004      	b.n	8009af0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009ae6:	683a      	ldr	r2, [r7, #0]
 8009ae8:	4904      	ldr	r1, [pc, #16]	; (8009afc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009aea:	4805      	ldr	r0, [pc, #20]	; (8009b00 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009aec:	f7ff fd96 	bl	800961c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009af0:	4b02      	ldr	r3, [pc, #8]	; (8009afc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009af2:	4618      	mov	r0, r3
 8009af4:	3708      	adds	r7, #8
 8009af6:	46bd      	mov	sp, r7
 8009af8:	bd80      	pop	{r7, pc}
 8009afa:	bf00      	nop
 8009afc:	20000e6c 	.word	0x20000e6c
 8009b00:	0800afa4 	.word	0x0800afa4

08009b04 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b084      	sub	sp, #16
 8009b08:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009b0a:	4b0f      	ldr	r3, [pc, #60]	; (8009b48 <Get_SerialNum+0x44>)
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009b10:	4b0e      	ldr	r3, [pc, #56]	; (8009b4c <Get_SerialNum+0x48>)
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009b16:	4b0e      	ldr	r3, [pc, #56]	; (8009b50 <Get_SerialNum+0x4c>)
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009b1c:	68fa      	ldr	r2, [r7, #12]
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	4413      	add	r3, r2
 8009b22:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d009      	beq.n	8009b3e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009b2a:	2208      	movs	r2, #8
 8009b2c:	4909      	ldr	r1, [pc, #36]	; (8009b54 <Get_SerialNum+0x50>)
 8009b2e:	68f8      	ldr	r0, [r7, #12]
 8009b30:	f000 f814 	bl	8009b5c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009b34:	2204      	movs	r2, #4
 8009b36:	4908      	ldr	r1, [pc, #32]	; (8009b58 <Get_SerialNum+0x54>)
 8009b38:	68b8      	ldr	r0, [r7, #8]
 8009b3a:	f000 f80f 	bl	8009b5c <IntToUnicode>
  }
}
 8009b3e:	bf00      	nop
 8009b40:	3710      	adds	r7, #16
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bd80      	pop	{r7, pc}
 8009b46:	bf00      	nop
 8009b48:	1ffff7e8 	.word	0x1ffff7e8
 8009b4c:	1ffff7ec 	.word	0x1ffff7ec
 8009b50:	1ffff7f0 	.word	0x1ffff7f0
 8009b54:	200001e6 	.word	0x200001e6
 8009b58:	200001f6 	.word	0x200001f6

08009b5c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009b5c:	b480      	push	{r7}
 8009b5e:	b087      	sub	sp, #28
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	60f8      	str	r0, [r7, #12]
 8009b64:	60b9      	str	r1, [r7, #8]
 8009b66:	4613      	mov	r3, r2
 8009b68:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009b6e:	2300      	movs	r3, #0
 8009b70:	75fb      	strb	r3, [r7, #23]
 8009b72:	e027      	b.n	8009bc4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	0f1b      	lsrs	r3, r3, #28
 8009b78:	2b09      	cmp	r3, #9
 8009b7a:	d80b      	bhi.n	8009b94 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	0f1b      	lsrs	r3, r3, #28
 8009b80:	b2da      	uxtb	r2, r3
 8009b82:	7dfb      	ldrb	r3, [r7, #23]
 8009b84:	005b      	lsls	r3, r3, #1
 8009b86:	4619      	mov	r1, r3
 8009b88:	68bb      	ldr	r3, [r7, #8]
 8009b8a:	440b      	add	r3, r1
 8009b8c:	3230      	adds	r2, #48	; 0x30
 8009b8e:	b2d2      	uxtb	r2, r2
 8009b90:	701a      	strb	r2, [r3, #0]
 8009b92:	e00a      	b.n	8009baa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	0f1b      	lsrs	r3, r3, #28
 8009b98:	b2da      	uxtb	r2, r3
 8009b9a:	7dfb      	ldrb	r3, [r7, #23]
 8009b9c:	005b      	lsls	r3, r3, #1
 8009b9e:	4619      	mov	r1, r3
 8009ba0:	68bb      	ldr	r3, [r7, #8]
 8009ba2:	440b      	add	r3, r1
 8009ba4:	3237      	adds	r2, #55	; 0x37
 8009ba6:	b2d2      	uxtb	r2, r2
 8009ba8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	011b      	lsls	r3, r3, #4
 8009bae:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009bb0:	7dfb      	ldrb	r3, [r7, #23]
 8009bb2:	005b      	lsls	r3, r3, #1
 8009bb4:	3301      	adds	r3, #1
 8009bb6:	68ba      	ldr	r2, [r7, #8]
 8009bb8:	4413      	add	r3, r2
 8009bba:	2200      	movs	r2, #0
 8009bbc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009bbe:	7dfb      	ldrb	r3, [r7, #23]
 8009bc0:	3301      	adds	r3, #1
 8009bc2:	75fb      	strb	r3, [r7, #23]
 8009bc4:	7dfa      	ldrb	r2, [r7, #23]
 8009bc6:	79fb      	ldrb	r3, [r7, #7]
 8009bc8:	429a      	cmp	r2, r3
 8009bca:	d3d3      	bcc.n	8009b74 <IntToUnicode+0x18>
  }
}
 8009bcc:	bf00      	nop
 8009bce:	bf00      	nop
 8009bd0:	371c      	adds	r7, #28
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bc80      	pop	{r7}
 8009bd6:	4770      	bx	lr

08009bd8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b088      	sub	sp, #32
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009be0:	f107 0310 	add.w	r3, r7, #16
 8009be4:	2200      	movs	r2, #0
 8009be6:	601a      	str	r2, [r3, #0]
 8009be8:	605a      	str	r2, [r3, #4]
 8009bea:	609a      	str	r2, [r3, #8]
 8009bec:	60da      	str	r2, [r3, #12]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009bf6:	d12c      	bne.n	8009c52 <HAL_PCD_MspInit+0x7a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009bf8:	4b18      	ldr	r3, [pc, #96]	; (8009c5c <HAL_PCD_MspInit+0x84>)
 8009bfa:	699b      	ldr	r3, [r3, #24]
 8009bfc:	4a17      	ldr	r2, [pc, #92]	; (8009c5c <HAL_PCD_MspInit+0x84>)
 8009bfe:	f043 0304 	orr.w	r3, r3, #4
 8009c02:	6193      	str	r3, [r2, #24]
 8009c04:	4b15      	ldr	r3, [pc, #84]	; (8009c5c <HAL_PCD_MspInit+0x84>)
 8009c06:	699b      	ldr	r3, [r3, #24]
 8009c08:	f003 0304 	and.w	r3, r3, #4
 8009c0c:	60fb      	str	r3, [r7, #12]
 8009c0e:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8009c10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009c14:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009c16:	2300      	movs	r3, #0
 8009c18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009c1e:	f107 0310 	add.w	r3, r7, #16
 8009c22:	4619      	mov	r1, r3
 8009c24:	480e      	ldr	r0, [pc, #56]	; (8009c60 <HAL_PCD_MspInit+0x88>)
 8009c26:	f7fa f867 	bl	8003cf8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009c2a:	4b0c      	ldr	r3, [pc, #48]	; (8009c5c <HAL_PCD_MspInit+0x84>)
 8009c2c:	695b      	ldr	r3, [r3, #20]
 8009c2e:	4a0b      	ldr	r2, [pc, #44]	; (8009c5c <HAL_PCD_MspInit+0x84>)
 8009c30:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009c34:	6153      	str	r3, [r2, #20]
 8009c36:	4b09      	ldr	r3, [pc, #36]	; (8009c5c <HAL_PCD_MspInit+0x84>)
 8009c38:	695b      	ldr	r3, [r3, #20]
 8009c3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009c3e:	60bb      	str	r3, [r7, #8]
 8009c40:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009c42:	2200      	movs	r2, #0
 8009c44:	2100      	movs	r1, #0
 8009c46:	2043      	movs	r0, #67	; 0x43
 8009c48:	f7fa f81f 	bl	8003c8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009c4c:	2043      	movs	r0, #67	; 0x43
 8009c4e:	f7fa f838 	bl	8003cc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009c52:	bf00      	nop
 8009c54:	3720      	adds	r7, #32
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd80      	pop	{r7, pc}
 8009c5a:	bf00      	nop
 8009c5c:	40021000 	.word	0x40021000
 8009c60:	40010800 	.word	0x40010800

08009c64 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b082      	sub	sp, #8
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009c78:	4619      	mov	r1, r3
 8009c7a:	4610      	mov	r0, r2
 8009c7c:	f7fe fd65 	bl	800874a <USBD_LL_SetupStage>
}
 8009c80:	bf00      	nop
 8009c82:	3708      	adds	r7, #8
 8009c84:	46bd      	mov	sp, r7
 8009c86:	bd80      	pop	{r7, pc}

08009c88 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b082      	sub	sp, #8
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
 8009c90:	460b      	mov	r3, r1
 8009c92:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	f8d3 0500 	ldr.w	r0, [r3, #1280]	; 0x500
 8009c9a:	78fa      	ldrb	r2, [r7, #3]
 8009c9c:	6879      	ldr	r1, [r7, #4]
 8009c9e:	4613      	mov	r3, r2
 8009ca0:	00db      	lsls	r3, r3, #3
 8009ca2:	4413      	add	r3, r2
 8009ca4:	009b      	lsls	r3, r3, #2
 8009ca6:	440b      	add	r3, r1
 8009ca8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8009cac:	681a      	ldr	r2, [r3, #0]
 8009cae:	78fb      	ldrb	r3, [r7, #3]
 8009cb0:	4619      	mov	r1, r3
 8009cb2:	f7fe fd97 	bl	80087e4 <USBD_LL_DataOutStage>
}
 8009cb6:	bf00      	nop
 8009cb8:	3708      	adds	r7, #8
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	bd80      	pop	{r7, pc}

08009cbe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009cbe:	b580      	push	{r7, lr}
 8009cc0:	b082      	sub	sp, #8
 8009cc2:	af00      	add	r7, sp, #0
 8009cc4:	6078      	str	r0, [r7, #4]
 8009cc6:	460b      	mov	r3, r1
 8009cc8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	f8d3 0500 	ldr.w	r0, [r3, #1280]	; 0x500
 8009cd0:	78fa      	ldrb	r2, [r7, #3]
 8009cd2:	6879      	ldr	r1, [r7, #4]
 8009cd4:	4613      	mov	r3, r2
 8009cd6:	00db      	lsls	r3, r3, #3
 8009cd8:	4413      	add	r3, r2
 8009cda:	009b      	lsls	r3, r3, #2
 8009cdc:	440b      	add	r3, r1
 8009cde:	3348      	adds	r3, #72	; 0x48
 8009ce0:	681a      	ldr	r2, [r3, #0]
 8009ce2:	78fb      	ldrb	r3, [r7, #3]
 8009ce4:	4619      	mov	r1, r3
 8009ce6:	f7fe fdee 	bl	80088c6 <USBD_LL_DataInStage>
}
 8009cea:	bf00      	nop
 8009cec:	3708      	adds	r7, #8
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	bd80      	pop	{r7, pc}

08009cf2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009cf2:	b580      	push	{r7, lr}
 8009cf4:	b082      	sub	sp, #8
 8009cf6:	af00      	add	r7, sp, #0
 8009cf8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8009d00:	4618      	mov	r0, r3
 8009d02:	f7fe fefe 	bl	8008b02 <USBD_LL_SOF>
}
 8009d06:	bf00      	nop
 8009d08:	3708      	adds	r7, #8
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	bd80      	pop	{r7, pc}

08009d0e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d0e:	b580      	push	{r7, lr}
 8009d10:	b084      	sub	sp, #16
 8009d12:	af00      	add	r7, sp, #0
 8009d14:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009d16:	2301      	movs	r3, #1
 8009d18:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	691b      	ldr	r3, [r3, #16]
 8009d1e:	2b02      	cmp	r3, #2
 8009d20:	d001      	beq.n	8009d26 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009d22:	f7f8 fdfd 	bl	8002920 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8009d2c:	7bfa      	ldrb	r2, [r7, #15]
 8009d2e:	4611      	mov	r1, r2
 8009d30:	4618      	mov	r0, r3
 8009d32:	f7fe feae 	bl	8008a92 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	f7fe fe67 	bl	8008a10 <USBD_LL_Reset>
}
 8009d42:	bf00      	nop
 8009d44:	3710      	adds	r7, #16
 8009d46:	46bd      	mov	sp, r7
 8009d48:	bd80      	pop	{r7, pc}
	...

08009d4c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b082      	sub	sp, #8
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	f7fe fea8 	bl	8008ab0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	687a      	ldr	r2, [r7, #4]
 8009d6c:	6812      	ldr	r2, [r2, #0]
 8009d6e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009d72:	f043 0301 	orr.w	r3, r3, #1
 8009d76:	6013      	str	r3, [r2, #0]
  if (hpcd->Init.low_power_enable)
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	6a1b      	ldr	r3, [r3, #32]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d005      	beq.n	8009d8c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009d80:	4b04      	ldr	r3, [pc, #16]	; (8009d94 <HAL_PCD_SuspendCallback+0x48>)
 8009d82:	691b      	ldr	r3, [r3, #16]
 8009d84:	4a03      	ldr	r2, [pc, #12]	; (8009d94 <HAL_PCD_SuspendCallback+0x48>)
 8009d86:	f043 0306 	orr.w	r3, r3, #6
 8009d8a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009d8c:	bf00      	nop
 8009d8e:	3708      	adds	r7, #8
 8009d90:	46bd      	mov	sp, r7
 8009d92:	bd80      	pop	{r7, pc}
 8009d94:	e000ed00 	.word	0xe000ed00

08009d98 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b082      	sub	sp, #8
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8009da6:	4618      	mov	r0, r3
 8009da8:	f7fe fe96 	bl	8008ad8 <USBD_LL_Resume>
}
 8009dac:	bf00      	nop
 8009dae:	3708      	adds	r7, #8
 8009db0:	46bd      	mov	sp, r7
 8009db2:	bd80      	pop	{r7, pc}

08009db4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b082      	sub	sp, #8
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
 8009dbc:	460b      	mov	r3, r1
 8009dbe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8009dc6:	78fa      	ldrb	r2, [r7, #3]
 8009dc8:	4611      	mov	r1, r2
 8009dca:	4618      	mov	r0, r3
 8009dcc:	f7fe febf 	bl	8008b4e <USBD_LL_IsoOUTIncomplete>
}
 8009dd0:	bf00      	nop
 8009dd2:	3708      	adds	r7, #8
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	bd80      	pop	{r7, pc}

08009dd8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b082      	sub	sp, #8
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
 8009de0:	460b      	mov	r3, r1
 8009de2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8009dea:	78fa      	ldrb	r2, [r7, #3]
 8009dec:	4611      	mov	r1, r2
 8009dee:	4618      	mov	r0, r3
 8009df0:	f7fe fea1 	bl	8008b36 <USBD_LL_IsoINIncomplete>
}
 8009df4:	bf00      	nop
 8009df6:	3708      	adds	r7, #8
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	bd80      	pop	{r7, pc}

08009dfc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b082      	sub	sp, #8
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	f7fe feab 	bl	8008b66 <USBD_LL_DevConnected>
}
 8009e10:	bf00      	nop
 8009e12:	3708      	adds	r7, #8
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bd80      	pop	{r7, pc}

08009e18 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b082      	sub	sp, #8
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8009e26:	4618      	mov	r0, r3
 8009e28:	f7fe fea7 	bl	8008b7a <USBD_LL_DevDisconnected>
}
 8009e2c:	bf00      	nop
 8009e2e:	3708      	adds	r7, #8
 8009e30:	46bd      	mov	sp, r7
 8009e32:	bd80      	pop	{r7, pc}

08009e34 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b082      	sub	sp, #8
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	781b      	ldrb	r3, [r3, #0]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d133      	bne.n	8009eac <USBD_LL_Init+0x78>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009e44:	4a1c      	ldr	r2, [pc, #112]	; (8009eb8 <USBD_LL_Init+0x84>)
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
  pdev->pData = &hpcd_USB_OTG_FS;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	4a1a      	ldr	r2, [pc, #104]	; (8009eb8 <USBD_LL_Init+0x84>)
 8009e50:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009e54:	4b18      	ldr	r3, [pc, #96]	; (8009eb8 <USBD_LL_Init+0x84>)
 8009e56:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009e5a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009e5c:	4b16      	ldr	r3, [pc, #88]	; (8009eb8 <USBD_LL_Init+0x84>)
 8009e5e:	2204      	movs	r2, #4
 8009e60:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009e62:	4b15      	ldr	r3, [pc, #84]	; (8009eb8 <USBD_LL_Init+0x84>)
 8009e64:	2202      	movs	r2, #2
 8009e66:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009e68:	4b13      	ldr	r3, [pc, #76]	; (8009eb8 <USBD_LL_Init+0x84>)
 8009e6a:	2202      	movs	r2, #2
 8009e6c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009e6e:	4b12      	ldr	r3, [pc, #72]	; (8009eb8 <USBD_LL_Init+0x84>)
 8009e70:	2200      	movs	r2, #0
 8009e72:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009e74:	4b10      	ldr	r3, [pc, #64]	; (8009eb8 <USBD_LL_Init+0x84>)
 8009e76:	2200      	movs	r2, #0
 8009e78:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8009e7a:	4b0f      	ldr	r3, [pc, #60]	; (8009eb8 <USBD_LL_Init+0x84>)
 8009e7c:	2201      	movs	r2, #1
 8009e7e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009e80:	480d      	ldr	r0, [pc, #52]	; (8009eb8 <USBD_LL_Init+0x84>)
 8009e82:	f7fa f8ee 	bl	8004062 <HAL_PCD_Init>
 8009e86:	4603      	mov	r3, r0
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d001      	beq.n	8009e90 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8009e8c:	f7f8 fd48 	bl	8002920 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009e90:	2180      	movs	r1, #128	; 0x80
 8009e92:	4809      	ldr	r0, [pc, #36]	; (8009eb8 <USBD_LL_Init+0x84>)
 8009e94:	f7fb fa06 	bl	80052a4 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009e98:	2240      	movs	r2, #64	; 0x40
 8009e9a:	2100      	movs	r1, #0
 8009e9c:	4806      	ldr	r0, [pc, #24]	; (8009eb8 <USBD_LL_Init+0x84>)
 8009e9e:	f7fb f9bb 	bl	8005218 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009ea2:	2280      	movs	r2, #128	; 0x80
 8009ea4:	2101      	movs	r1, #1
 8009ea6:	4804      	ldr	r0, [pc, #16]	; (8009eb8 <USBD_LL_Init+0x84>)
 8009ea8:	f7fb f9b6 	bl	8005218 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009eac:	2300      	movs	r3, #0
}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	3708      	adds	r7, #8
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	bd80      	pop	{r7, pc}
 8009eb6:	bf00      	nop
 8009eb8:	2000106c 	.word	0x2000106c

08009ebc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b084      	sub	sp, #16
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ec8:	2300      	movs	r3, #0
 8009eca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	f7fa f9e2 	bl	800429c <HAL_PCD_Start>
 8009ed8:	4603      	mov	r3, r0
 8009eda:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009edc:	7bfb      	ldrb	r3, [r7, #15]
 8009ede:	4618      	mov	r0, r3
 8009ee0:	f000 f944 	bl	800a16c <USBD_Get_USB_Status>
 8009ee4:	4603      	mov	r3, r0
 8009ee6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ee8:	7bbb      	ldrb	r3, [r7, #14]
}
 8009eea:	4618      	mov	r0, r3
 8009eec:	3710      	adds	r7, #16
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	bd80      	pop	{r7, pc}

08009ef2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009ef2:	b580      	push	{r7, lr}
 8009ef4:	b084      	sub	sp, #16
 8009ef6:	af00      	add	r7, sp, #0
 8009ef8:	6078      	str	r0, [r7, #4]
 8009efa:	4608      	mov	r0, r1
 8009efc:	4611      	mov	r1, r2
 8009efe:	461a      	mov	r2, r3
 8009f00:	4603      	mov	r3, r0
 8009f02:	70fb      	strb	r3, [r7, #3]
 8009f04:	460b      	mov	r3, r1
 8009f06:	70bb      	strb	r3, [r7, #2]
 8009f08:	4613      	mov	r3, r2
 8009f0a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f10:	2300      	movs	r3, #0
 8009f12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009f1a:	78bb      	ldrb	r3, [r7, #2]
 8009f1c:	883a      	ldrh	r2, [r7, #0]
 8009f1e:	78f9      	ldrb	r1, [r7, #3]
 8009f20:	f7fa fe5b 	bl	8004bda <HAL_PCD_EP_Open>
 8009f24:	4603      	mov	r3, r0
 8009f26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f28:	7bfb      	ldrb	r3, [r7, #15]
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	f000 f91e 	bl	800a16c <USBD_Get_USB_Status>
 8009f30:	4603      	mov	r3, r0
 8009f32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f34:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f36:	4618      	mov	r0, r3
 8009f38:	3710      	adds	r7, #16
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	bd80      	pop	{r7, pc}

08009f3e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f3e:	b580      	push	{r7, lr}
 8009f40:	b084      	sub	sp, #16
 8009f42:	af00      	add	r7, sp, #0
 8009f44:	6078      	str	r0, [r7, #4]
 8009f46:	460b      	mov	r3, r1
 8009f48:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f4e:	2300      	movs	r3, #0
 8009f50:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009f58:	78fa      	ldrb	r2, [r7, #3]
 8009f5a:	4611      	mov	r1, r2
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	f7fa fea4 	bl	8004caa <HAL_PCD_EP_Close>
 8009f62:	4603      	mov	r3, r0
 8009f64:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f66:	7bfb      	ldrb	r3, [r7, #15]
 8009f68:	4618      	mov	r0, r3
 8009f6a:	f000 f8ff 	bl	800a16c <USBD_Get_USB_Status>
 8009f6e:	4603      	mov	r3, r0
 8009f70:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f72:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f74:	4618      	mov	r0, r3
 8009f76:	3710      	adds	r7, #16
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	bd80      	pop	{r7, pc}

08009f7c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b084      	sub	sp, #16
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
 8009f84:	460b      	mov	r3, r1
 8009f86:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f88:	2300      	movs	r3, #0
 8009f8a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009f96:	78fa      	ldrb	r2, [r7, #3]
 8009f98:	4611      	mov	r1, r2
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	f7fa ff49 	bl	8004e32 <HAL_PCD_EP_SetStall>
 8009fa0:	4603      	mov	r3, r0
 8009fa2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009fa4:	7bfb      	ldrb	r3, [r7, #15]
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	f000 f8e0 	bl	800a16c <USBD_Get_USB_Status>
 8009fac:	4603      	mov	r3, r0
 8009fae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009fb0:	7bbb      	ldrb	r3, [r7, #14]
}
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	3710      	adds	r7, #16
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	bd80      	pop	{r7, pc}

08009fba <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009fba:	b580      	push	{r7, lr}
 8009fbc:	b084      	sub	sp, #16
 8009fbe:	af00      	add	r7, sp, #0
 8009fc0:	6078      	str	r0, [r7, #4]
 8009fc2:	460b      	mov	r3, r1
 8009fc4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fca:	2300      	movs	r3, #0
 8009fcc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009fd4:	78fa      	ldrb	r2, [r7, #3]
 8009fd6:	4611      	mov	r1, r2
 8009fd8:	4618      	mov	r0, r3
 8009fda:	f7fa ff8c 	bl	8004ef6 <HAL_PCD_EP_ClrStall>
 8009fde:	4603      	mov	r3, r0
 8009fe0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009fe2:	7bfb      	ldrb	r3, [r7, #15]
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	f000 f8c1 	bl	800a16c <USBD_Get_USB_Status>
 8009fea:	4603      	mov	r3, r0
 8009fec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009fee:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	3710      	adds	r7, #16
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	bd80      	pop	{r7, pc}

08009ff8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ff8:	b480      	push	{r7}
 8009ffa:	b085      	sub	sp, #20
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
 800a000:	460b      	mov	r3, r1
 800a002:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a00a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a00c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a010:	2b00      	cmp	r3, #0
 800a012:	da0b      	bge.n	800a02c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a014:	78fb      	ldrb	r3, [r7, #3]
 800a016:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a01a:	68f9      	ldr	r1, [r7, #12]
 800a01c:	4613      	mov	r3, r2
 800a01e:	00db      	lsls	r3, r3, #3
 800a020:	4413      	add	r3, r2
 800a022:	009b      	lsls	r3, r3, #2
 800a024:	440b      	add	r3, r1
 800a026:	333e      	adds	r3, #62	; 0x3e
 800a028:	781b      	ldrb	r3, [r3, #0]
 800a02a:	e00b      	b.n	800a044 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a02c:	78fb      	ldrb	r3, [r7, #3]
 800a02e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a032:	68f9      	ldr	r1, [r7, #12]
 800a034:	4613      	mov	r3, r2
 800a036:	00db      	lsls	r3, r3, #3
 800a038:	4413      	add	r3, r2
 800a03a:	009b      	lsls	r3, r3, #2
 800a03c:	440b      	add	r3, r1
 800a03e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800a042:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a044:	4618      	mov	r0, r3
 800a046:	3714      	adds	r7, #20
 800a048:	46bd      	mov	sp, r7
 800a04a:	bc80      	pop	{r7}
 800a04c:	4770      	bx	lr

0800a04e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a04e:	b580      	push	{r7, lr}
 800a050:	b084      	sub	sp, #16
 800a052:	af00      	add	r7, sp, #0
 800a054:	6078      	str	r0, [r7, #4]
 800a056:	460b      	mov	r3, r1
 800a058:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a05a:	2300      	movs	r3, #0
 800a05c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a05e:	2300      	movs	r3, #0
 800a060:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a068:	78fa      	ldrb	r2, [r7, #3]
 800a06a:	4611      	mov	r1, r2
 800a06c:	4618      	mov	r0, r3
 800a06e:	f7fa fd8f 	bl	8004b90 <HAL_PCD_SetAddress>
 800a072:	4603      	mov	r3, r0
 800a074:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a076:	7bfb      	ldrb	r3, [r7, #15]
 800a078:	4618      	mov	r0, r3
 800a07a:	f000 f877 	bl	800a16c <USBD_Get_USB_Status>
 800a07e:	4603      	mov	r3, r0
 800a080:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a082:	7bbb      	ldrb	r3, [r7, #14]
}
 800a084:	4618      	mov	r0, r3
 800a086:	3710      	adds	r7, #16
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd80      	pop	{r7, pc}

0800a08c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b086      	sub	sp, #24
 800a090:	af00      	add	r7, sp, #0
 800a092:	60f8      	str	r0, [r7, #12]
 800a094:	607a      	str	r2, [r7, #4]
 800a096:	461a      	mov	r2, r3
 800a098:	460b      	mov	r3, r1
 800a09a:	72fb      	strb	r3, [r7, #11]
 800a09c:	4613      	mov	r3, r2
 800a09e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a0ae:	893b      	ldrh	r3, [r7, #8]
 800a0b0:	7af9      	ldrb	r1, [r7, #11]
 800a0b2:	687a      	ldr	r2, [r7, #4]
 800a0b4:	f7fa fe8c 	bl	8004dd0 <HAL_PCD_EP_Transmit>
 800a0b8:	4603      	mov	r3, r0
 800a0ba:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0bc:	7dfb      	ldrb	r3, [r7, #23]
 800a0be:	4618      	mov	r0, r3
 800a0c0:	f000 f854 	bl	800a16c <USBD_Get_USB_Status>
 800a0c4:	4603      	mov	r3, r0
 800a0c6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a0c8:	7dbb      	ldrb	r3, [r7, #22]
}
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	3718      	adds	r7, #24
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	bd80      	pop	{r7, pc}

0800a0d2 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a0d2:	b580      	push	{r7, lr}
 800a0d4:	b086      	sub	sp, #24
 800a0d6:	af00      	add	r7, sp, #0
 800a0d8:	60f8      	str	r0, [r7, #12]
 800a0da:	607a      	str	r2, [r7, #4]
 800a0dc:	461a      	mov	r2, r3
 800a0de:	460b      	mov	r3, r1
 800a0e0:	72fb      	strb	r3, [r7, #11]
 800a0e2:	4613      	mov	r3, r2
 800a0e4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a0f4:	893b      	ldrh	r3, [r7, #8]
 800a0f6:	7af9      	ldrb	r1, [r7, #11]
 800a0f8:	687a      	ldr	r2, [r7, #4]
 800a0fa:	f7fa fe20 	bl	8004d3e <HAL_PCD_EP_Receive>
 800a0fe:	4603      	mov	r3, r0
 800a100:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a102:	7dfb      	ldrb	r3, [r7, #23]
 800a104:	4618      	mov	r0, r3
 800a106:	f000 f831 	bl	800a16c <USBD_Get_USB_Status>
 800a10a:	4603      	mov	r3, r0
 800a10c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a10e:	7dbb      	ldrb	r3, [r7, #22]
}
 800a110:	4618      	mov	r0, r3
 800a112:	3718      	adds	r7, #24
 800a114:	46bd      	mov	sp, r7
 800a116:	bd80      	pop	{r7, pc}

0800a118 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b082      	sub	sp, #8
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
 800a120:	460b      	mov	r3, r1
 800a122:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a12a:	78fa      	ldrb	r2, [r7, #3]
 800a12c:	4611      	mov	r1, r2
 800a12e:	4618      	mov	r0, r3
 800a130:	f7fa fe37 	bl	8004da2 <HAL_PCD_EP_GetRxCount>
 800a134:	4603      	mov	r3, r0
}
 800a136:	4618      	mov	r0, r3
 800a138:	3708      	adds	r7, #8
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bd80      	pop	{r7, pc}
	...

0800a140 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a140:	b480      	push	{r7}
 800a142:	b083      	sub	sp, #12
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a148:	4b02      	ldr	r3, [pc, #8]	; (800a154 <USBD_static_malloc+0x14>)
}
 800a14a:	4618      	mov	r0, r3
 800a14c:	370c      	adds	r7, #12
 800a14e:	46bd      	mov	sp, r7
 800a150:	bc80      	pop	{r7}
 800a152:	4770      	bx	lr
 800a154:	20001570 	.word	0x20001570

0800a158 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a158:	b480      	push	{r7}
 800a15a:	b083      	sub	sp, #12
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]

}
 800a160:	bf00      	nop
 800a162:	370c      	adds	r7, #12
 800a164:	46bd      	mov	sp, r7
 800a166:	bc80      	pop	{r7}
 800a168:	4770      	bx	lr
	...

0800a16c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a16c:	b480      	push	{r7}
 800a16e:	b085      	sub	sp, #20
 800a170:	af00      	add	r7, sp, #0
 800a172:	4603      	mov	r3, r0
 800a174:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a176:	2300      	movs	r3, #0
 800a178:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a17a:	79fb      	ldrb	r3, [r7, #7]
 800a17c:	2b03      	cmp	r3, #3
 800a17e:	d817      	bhi.n	800a1b0 <USBD_Get_USB_Status+0x44>
 800a180:	a201      	add	r2, pc, #4	; (adr r2, 800a188 <USBD_Get_USB_Status+0x1c>)
 800a182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a186:	bf00      	nop
 800a188:	0800a199 	.word	0x0800a199
 800a18c:	0800a19f 	.word	0x0800a19f
 800a190:	0800a1a5 	.word	0x0800a1a5
 800a194:	0800a1ab 	.word	0x0800a1ab
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a198:	2300      	movs	r3, #0
 800a19a:	73fb      	strb	r3, [r7, #15]
    break;
 800a19c:	e00b      	b.n	800a1b6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a19e:	2302      	movs	r3, #2
 800a1a0:	73fb      	strb	r3, [r7, #15]
    break;
 800a1a2:	e008      	b.n	800a1b6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a1a4:	2301      	movs	r3, #1
 800a1a6:	73fb      	strb	r3, [r7, #15]
    break;
 800a1a8:	e005      	b.n	800a1b6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a1aa:	2302      	movs	r3, #2
 800a1ac:	73fb      	strb	r3, [r7, #15]
    break;
 800a1ae:	e002      	b.n	800a1b6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a1b0:	2302      	movs	r3, #2
 800a1b2:	73fb      	strb	r3, [r7, #15]
    break;
 800a1b4:	bf00      	nop
  }
  return usb_status;
 800a1b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	3714      	adds	r7, #20
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	bc80      	pop	{r7}
 800a1c0:	4770      	bx	lr
 800a1c2:	bf00      	nop

0800a1c4 <malloc>:
 800a1c4:	4b02      	ldr	r3, [pc, #8]	; (800a1d0 <malloc+0xc>)
 800a1c6:	4601      	mov	r1, r0
 800a1c8:	6818      	ldr	r0, [r3, #0]
 800a1ca:	f000 b82b 	b.w	800a224 <_malloc_r>
 800a1ce:	bf00      	nop
 800a1d0:	2000024c 	.word	0x2000024c

0800a1d4 <free>:
 800a1d4:	4b02      	ldr	r3, [pc, #8]	; (800a1e0 <free+0xc>)
 800a1d6:	4601      	mov	r1, r0
 800a1d8:	6818      	ldr	r0, [r3, #0]
 800a1da:	f000 b935 	b.w	800a448 <_free_r>
 800a1de:	bf00      	nop
 800a1e0:	2000024c 	.word	0x2000024c

0800a1e4 <sbrk_aligned>:
 800a1e4:	b570      	push	{r4, r5, r6, lr}
 800a1e6:	4e0e      	ldr	r6, [pc, #56]	; (800a220 <sbrk_aligned+0x3c>)
 800a1e8:	460c      	mov	r4, r1
 800a1ea:	6831      	ldr	r1, [r6, #0]
 800a1ec:	4605      	mov	r5, r0
 800a1ee:	b911      	cbnz	r1, 800a1f6 <sbrk_aligned+0x12>
 800a1f0:	f000 f8e0 	bl	800a3b4 <_sbrk_r>
 800a1f4:	6030      	str	r0, [r6, #0]
 800a1f6:	4621      	mov	r1, r4
 800a1f8:	4628      	mov	r0, r5
 800a1fa:	f000 f8db 	bl	800a3b4 <_sbrk_r>
 800a1fe:	1c43      	adds	r3, r0, #1
 800a200:	d00a      	beq.n	800a218 <sbrk_aligned+0x34>
 800a202:	1cc4      	adds	r4, r0, #3
 800a204:	f024 0403 	bic.w	r4, r4, #3
 800a208:	42a0      	cmp	r0, r4
 800a20a:	d007      	beq.n	800a21c <sbrk_aligned+0x38>
 800a20c:	1a21      	subs	r1, r4, r0
 800a20e:	4628      	mov	r0, r5
 800a210:	f000 f8d0 	bl	800a3b4 <_sbrk_r>
 800a214:	3001      	adds	r0, #1
 800a216:	d101      	bne.n	800a21c <sbrk_aligned+0x38>
 800a218:	f04f 34ff 	mov.w	r4, #4294967295
 800a21c:	4620      	mov	r0, r4
 800a21e:	bd70      	pop	{r4, r5, r6, pc}
 800a220:	20001794 	.word	0x20001794

0800a224 <_malloc_r>:
 800a224:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a228:	1ccd      	adds	r5, r1, #3
 800a22a:	f025 0503 	bic.w	r5, r5, #3
 800a22e:	3508      	adds	r5, #8
 800a230:	2d0c      	cmp	r5, #12
 800a232:	bf38      	it	cc
 800a234:	250c      	movcc	r5, #12
 800a236:	2d00      	cmp	r5, #0
 800a238:	4607      	mov	r7, r0
 800a23a:	db01      	blt.n	800a240 <_malloc_r+0x1c>
 800a23c:	42a9      	cmp	r1, r5
 800a23e:	d905      	bls.n	800a24c <_malloc_r+0x28>
 800a240:	230c      	movs	r3, #12
 800a242:	2600      	movs	r6, #0
 800a244:	603b      	str	r3, [r7, #0]
 800a246:	4630      	mov	r0, r6
 800a248:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a24c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a320 <_malloc_r+0xfc>
 800a250:	f000 f868 	bl	800a324 <__malloc_lock>
 800a254:	f8d8 3000 	ldr.w	r3, [r8]
 800a258:	461c      	mov	r4, r3
 800a25a:	bb5c      	cbnz	r4, 800a2b4 <_malloc_r+0x90>
 800a25c:	4629      	mov	r1, r5
 800a25e:	4638      	mov	r0, r7
 800a260:	f7ff ffc0 	bl	800a1e4 <sbrk_aligned>
 800a264:	1c43      	adds	r3, r0, #1
 800a266:	4604      	mov	r4, r0
 800a268:	d155      	bne.n	800a316 <_malloc_r+0xf2>
 800a26a:	f8d8 4000 	ldr.w	r4, [r8]
 800a26e:	4626      	mov	r6, r4
 800a270:	2e00      	cmp	r6, #0
 800a272:	d145      	bne.n	800a300 <_malloc_r+0xdc>
 800a274:	2c00      	cmp	r4, #0
 800a276:	d048      	beq.n	800a30a <_malloc_r+0xe6>
 800a278:	6823      	ldr	r3, [r4, #0]
 800a27a:	4631      	mov	r1, r6
 800a27c:	4638      	mov	r0, r7
 800a27e:	eb04 0903 	add.w	r9, r4, r3
 800a282:	f000 f897 	bl	800a3b4 <_sbrk_r>
 800a286:	4581      	cmp	r9, r0
 800a288:	d13f      	bne.n	800a30a <_malloc_r+0xe6>
 800a28a:	6821      	ldr	r1, [r4, #0]
 800a28c:	4638      	mov	r0, r7
 800a28e:	1a6d      	subs	r5, r5, r1
 800a290:	4629      	mov	r1, r5
 800a292:	f7ff ffa7 	bl	800a1e4 <sbrk_aligned>
 800a296:	3001      	adds	r0, #1
 800a298:	d037      	beq.n	800a30a <_malloc_r+0xe6>
 800a29a:	6823      	ldr	r3, [r4, #0]
 800a29c:	442b      	add	r3, r5
 800a29e:	6023      	str	r3, [r4, #0]
 800a2a0:	f8d8 3000 	ldr.w	r3, [r8]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d038      	beq.n	800a31a <_malloc_r+0xf6>
 800a2a8:	685a      	ldr	r2, [r3, #4]
 800a2aa:	42a2      	cmp	r2, r4
 800a2ac:	d12b      	bne.n	800a306 <_malloc_r+0xe2>
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	605a      	str	r2, [r3, #4]
 800a2b2:	e00f      	b.n	800a2d4 <_malloc_r+0xb0>
 800a2b4:	6822      	ldr	r2, [r4, #0]
 800a2b6:	1b52      	subs	r2, r2, r5
 800a2b8:	d41f      	bmi.n	800a2fa <_malloc_r+0xd6>
 800a2ba:	2a0b      	cmp	r2, #11
 800a2bc:	d917      	bls.n	800a2ee <_malloc_r+0xca>
 800a2be:	1961      	adds	r1, r4, r5
 800a2c0:	42a3      	cmp	r3, r4
 800a2c2:	6025      	str	r5, [r4, #0]
 800a2c4:	bf18      	it	ne
 800a2c6:	6059      	strne	r1, [r3, #4]
 800a2c8:	6863      	ldr	r3, [r4, #4]
 800a2ca:	bf08      	it	eq
 800a2cc:	f8c8 1000 	streq.w	r1, [r8]
 800a2d0:	5162      	str	r2, [r4, r5]
 800a2d2:	604b      	str	r3, [r1, #4]
 800a2d4:	4638      	mov	r0, r7
 800a2d6:	f104 060b 	add.w	r6, r4, #11
 800a2da:	f000 f829 	bl	800a330 <__malloc_unlock>
 800a2de:	f026 0607 	bic.w	r6, r6, #7
 800a2e2:	1d23      	adds	r3, r4, #4
 800a2e4:	1af2      	subs	r2, r6, r3
 800a2e6:	d0ae      	beq.n	800a246 <_malloc_r+0x22>
 800a2e8:	1b9b      	subs	r3, r3, r6
 800a2ea:	50a3      	str	r3, [r4, r2]
 800a2ec:	e7ab      	b.n	800a246 <_malloc_r+0x22>
 800a2ee:	42a3      	cmp	r3, r4
 800a2f0:	6862      	ldr	r2, [r4, #4]
 800a2f2:	d1dd      	bne.n	800a2b0 <_malloc_r+0x8c>
 800a2f4:	f8c8 2000 	str.w	r2, [r8]
 800a2f8:	e7ec      	b.n	800a2d4 <_malloc_r+0xb0>
 800a2fa:	4623      	mov	r3, r4
 800a2fc:	6864      	ldr	r4, [r4, #4]
 800a2fe:	e7ac      	b.n	800a25a <_malloc_r+0x36>
 800a300:	4634      	mov	r4, r6
 800a302:	6876      	ldr	r6, [r6, #4]
 800a304:	e7b4      	b.n	800a270 <_malloc_r+0x4c>
 800a306:	4613      	mov	r3, r2
 800a308:	e7cc      	b.n	800a2a4 <_malloc_r+0x80>
 800a30a:	230c      	movs	r3, #12
 800a30c:	4638      	mov	r0, r7
 800a30e:	603b      	str	r3, [r7, #0]
 800a310:	f000 f80e 	bl	800a330 <__malloc_unlock>
 800a314:	e797      	b.n	800a246 <_malloc_r+0x22>
 800a316:	6025      	str	r5, [r4, #0]
 800a318:	e7dc      	b.n	800a2d4 <_malloc_r+0xb0>
 800a31a:	605b      	str	r3, [r3, #4]
 800a31c:	deff      	udf	#255	; 0xff
 800a31e:	bf00      	nop
 800a320:	20001790 	.word	0x20001790

0800a324 <__malloc_lock>:
 800a324:	4801      	ldr	r0, [pc, #4]	; (800a32c <__malloc_lock+0x8>)
 800a326:	f000 b87f 	b.w	800a428 <__retarget_lock_acquire_recursive>
 800a32a:	bf00      	nop
 800a32c:	200018d4 	.word	0x200018d4

0800a330 <__malloc_unlock>:
 800a330:	4801      	ldr	r0, [pc, #4]	; (800a338 <__malloc_unlock+0x8>)
 800a332:	f000 b87a 	b.w	800a42a <__retarget_lock_release_recursive>
 800a336:	bf00      	nop
 800a338:	200018d4 	.word	0x200018d4

0800a33c <siprintf>:
 800a33c:	b40e      	push	{r1, r2, r3}
 800a33e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a342:	b500      	push	{lr}
 800a344:	b09c      	sub	sp, #112	; 0x70
 800a346:	ab1d      	add	r3, sp, #116	; 0x74
 800a348:	9002      	str	r0, [sp, #8]
 800a34a:	9006      	str	r0, [sp, #24]
 800a34c:	9107      	str	r1, [sp, #28]
 800a34e:	9104      	str	r1, [sp, #16]
 800a350:	4808      	ldr	r0, [pc, #32]	; (800a374 <siprintf+0x38>)
 800a352:	4909      	ldr	r1, [pc, #36]	; (800a378 <siprintf+0x3c>)
 800a354:	f853 2b04 	ldr.w	r2, [r3], #4
 800a358:	9105      	str	r1, [sp, #20]
 800a35a:	6800      	ldr	r0, [r0, #0]
 800a35c:	a902      	add	r1, sp, #8
 800a35e:	9301      	str	r3, [sp, #4]
 800a360:	f000 f914 	bl	800a58c <_svfiprintf_r>
 800a364:	2200      	movs	r2, #0
 800a366:	9b02      	ldr	r3, [sp, #8]
 800a368:	701a      	strb	r2, [r3, #0]
 800a36a:	b01c      	add	sp, #112	; 0x70
 800a36c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a370:	b003      	add	sp, #12
 800a372:	4770      	bx	lr
 800a374:	2000024c 	.word	0x2000024c
 800a378:	ffff0208 	.word	0xffff0208

0800a37c <memset>:
 800a37c:	4603      	mov	r3, r0
 800a37e:	4402      	add	r2, r0
 800a380:	4293      	cmp	r3, r2
 800a382:	d100      	bne.n	800a386 <memset+0xa>
 800a384:	4770      	bx	lr
 800a386:	f803 1b01 	strb.w	r1, [r3], #1
 800a38a:	e7f9      	b.n	800a380 <memset+0x4>

0800a38c <strncat>:
 800a38c:	b530      	push	{r4, r5, lr}
 800a38e:	4604      	mov	r4, r0
 800a390:	7825      	ldrb	r5, [r4, #0]
 800a392:	4623      	mov	r3, r4
 800a394:	3401      	adds	r4, #1
 800a396:	2d00      	cmp	r5, #0
 800a398:	d1fa      	bne.n	800a390 <strncat+0x4>
 800a39a:	3a01      	subs	r2, #1
 800a39c:	d304      	bcc.n	800a3a8 <strncat+0x1c>
 800a39e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a3a2:	f803 4b01 	strb.w	r4, [r3], #1
 800a3a6:	b904      	cbnz	r4, 800a3aa <strncat+0x1e>
 800a3a8:	bd30      	pop	{r4, r5, pc}
 800a3aa:	2a00      	cmp	r2, #0
 800a3ac:	d1f5      	bne.n	800a39a <strncat+0xe>
 800a3ae:	701a      	strb	r2, [r3, #0]
 800a3b0:	e7f3      	b.n	800a39a <strncat+0xe>
	...

0800a3b4 <_sbrk_r>:
 800a3b4:	b538      	push	{r3, r4, r5, lr}
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	4d05      	ldr	r5, [pc, #20]	; (800a3d0 <_sbrk_r+0x1c>)
 800a3ba:	4604      	mov	r4, r0
 800a3bc:	4608      	mov	r0, r1
 800a3be:	602b      	str	r3, [r5, #0]
 800a3c0:	f7f8 fe0c 	bl	8002fdc <_sbrk>
 800a3c4:	1c43      	adds	r3, r0, #1
 800a3c6:	d102      	bne.n	800a3ce <_sbrk_r+0x1a>
 800a3c8:	682b      	ldr	r3, [r5, #0]
 800a3ca:	b103      	cbz	r3, 800a3ce <_sbrk_r+0x1a>
 800a3cc:	6023      	str	r3, [r4, #0]
 800a3ce:	bd38      	pop	{r3, r4, r5, pc}
 800a3d0:	200018d0 	.word	0x200018d0

0800a3d4 <__errno>:
 800a3d4:	4b01      	ldr	r3, [pc, #4]	; (800a3dc <__errno+0x8>)
 800a3d6:	6818      	ldr	r0, [r3, #0]
 800a3d8:	4770      	bx	lr
 800a3da:	bf00      	nop
 800a3dc:	2000024c 	.word	0x2000024c

0800a3e0 <__libc_init_array>:
 800a3e0:	b570      	push	{r4, r5, r6, lr}
 800a3e2:	2600      	movs	r6, #0
 800a3e4:	4d0c      	ldr	r5, [pc, #48]	; (800a418 <__libc_init_array+0x38>)
 800a3e6:	4c0d      	ldr	r4, [pc, #52]	; (800a41c <__libc_init_array+0x3c>)
 800a3e8:	1b64      	subs	r4, r4, r5
 800a3ea:	10a4      	asrs	r4, r4, #2
 800a3ec:	42a6      	cmp	r6, r4
 800a3ee:	d109      	bne.n	800a404 <__libc_init_array+0x24>
 800a3f0:	f000 fda8 	bl	800af44 <_init>
 800a3f4:	2600      	movs	r6, #0
 800a3f6:	4d0a      	ldr	r5, [pc, #40]	; (800a420 <__libc_init_array+0x40>)
 800a3f8:	4c0a      	ldr	r4, [pc, #40]	; (800a424 <__libc_init_array+0x44>)
 800a3fa:	1b64      	subs	r4, r4, r5
 800a3fc:	10a4      	asrs	r4, r4, #2
 800a3fe:	42a6      	cmp	r6, r4
 800a400:	d105      	bne.n	800a40e <__libc_init_array+0x2e>
 800a402:	bd70      	pop	{r4, r5, r6, pc}
 800a404:	f855 3b04 	ldr.w	r3, [r5], #4
 800a408:	4798      	blx	r3
 800a40a:	3601      	adds	r6, #1
 800a40c:	e7ee      	b.n	800a3ec <__libc_init_array+0xc>
 800a40e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a412:	4798      	blx	r3
 800a414:	3601      	adds	r6, #1
 800a416:	e7f2      	b.n	800a3fe <__libc_init_array+0x1e>
 800a418:	0800b42c 	.word	0x0800b42c
 800a41c:	0800b42c 	.word	0x0800b42c
 800a420:	0800b42c 	.word	0x0800b42c
 800a424:	0800b430 	.word	0x0800b430

0800a428 <__retarget_lock_acquire_recursive>:
 800a428:	4770      	bx	lr

0800a42a <__retarget_lock_release_recursive>:
 800a42a:	4770      	bx	lr

0800a42c <memcpy>:
 800a42c:	440a      	add	r2, r1
 800a42e:	4291      	cmp	r1, r2
 800a430:	f100 33ff 	add.w	r3, r0, #4294967295
 800a434:	d100      	bne.n	800a438 <memcpy+0xc>
 800a436:	4770      	bx	lr
 800a438:	b510      	push	{r4, lr}
 800a43a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a43e:	4291      	cmp	r1, r2
 800a440:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a444:	d1f9      	bne.n	800a43a <memcpy+0xe>
 800a446:	bd10      	pop	{r4, pc}

0800a448 <_free_r>:
 800a448:	b538      	push	{r3, r4, r5, lr}
 800a44a:	4605      	mov	r5, r0
 800a44c:	2900      	cmp	r1, #0
 800a44e:	d040      	beq.n	800a4d2 <_free_r+0x8a>
 800a450:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a454:	1f0c      	subs	r4, r1, #4
 800a456:	2b00      	cmp	r3, #0
 800a458:	bfb8      	it	lt
 800a45a:	18e4      	addlt	r4, r4, r3
 800a45c:	f7ff ff62 	bl	800a324 <__malloc_lock>
 800a460:	4a1c      	ldr	r2, [pc, #112]	; (800a4d4 <_free_r+0x8c>)
 800a462:	6813      	ldr	r3, [r2, #0]
 800a464:	b933      	cbnz	r3, 800a474 <_free_r+0x2c>
 800a466:	6063      	str	r3, [r4, #4]
 800a468:	6014      	str	r4, [r2, #0]
 800a46a:	4628      	mov	r0, r5
 800a46c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a470:	f7ff bf5e 	b.w	800a330 <__malloc_unlock>
 800a474:	42a3      	cmp	r3, r4
 800a476:	d908      	bls.n	800a48a <_free_r+0x42>
 800a478:	6820      	ldr	r0, [r4, #0]
 800a47a:	1821      	adds	r1, r4, r0
 800a47c:	428b      	cmp	r3, r1
 800a47e:	bf01      	itttt	eq
 800a480:	6819      	ldreq	r1, [r3, #0]
 800a482:	685b      	ldreq	r3, [r3, #4]
 800a484:	1809      	addeq	r1, r1, r0
 800a486:	6021      	streq	r1, [r4, #0]
 800a488:	e7ed      	b.n	800a466 <_free_r+0x1e>
 800a48a:	461a      	mov	r2, r3
 800a48c:	685b      	ldr	r3, [r3, #4]
 800a48e:	b10b      	cbz	r3, 800a494 <_free_r+0x4c>
 800a490:	42a3      	cmp	r3, r4
 800a492:	d9fa      	bls.n	800a48a <_free_r+0x42>
 800a494:	6811      	ldr	r1, [r2, #0]
 800a496:	1850      	adds	r0, r2, r1
 800a498:	42a0      	cmp	r0, r4
 800a49a:	d10b      	bne.n	800a4b4 <_free_r+0x6c>
 800a49c:	6820      	ldr	r0, [r4, #0]
 800a49e:	4401      	add	r1, r0
 800a4a0:	1850      	adds	r0, r2, r1
 800a4a2:	4283      	cmp	r3, r0
 800a4a4:	6011      	str	r1, [r2, #0]
 800a4a6:	d1e0      	bne.n	800a46a <_free_r+0x22>
 800a4a8:	6818      	ldr	r0, [r3, #0]
 800a4aa:	685b      	ldr	r3, [r3, #4]
 800a4ac:	4408      	add	r0, r1
 800a4ae:	6010      	str	r0, [r2, #0]
 800a4b0:	6053      	str	r3, [r2, #4]
 800a4b2:	e7da      	b.n	800a46a <_free_r+0x22>
 800a4b4:	d902      	bls.n	800a4bc <_free_r+0x74>
 800a4b6:	230c      	movs	r3, #12
 800a4b8:	602b      	str	r3, [r5, #0]
 800a4ba:	e7d6      	b.n	800a46a <_free_r+0x22>
 800a4bc:	6820      	ldr	r0, [r4, #0]
 800a4be:	1821      	adds	r1, r4, r0
 800a4c0:	428b      	cmp	r3, r1
 800a4c2:	bf01      	itttt	eq
 800a4c4:	6819      	ldreq	r1, [r3, #0]
 800a4c6:	685b      	ldreq	r3, [r3, #4]
 800a4c8:	1809      	addeq	r1, r1, r0
 800a4ca:	6021      	streq	r1, [r4, #0]
 800a4cc:	6063      	str	r3, [r4, #4]
 800a4ce:	6054      	str	r4, [r2, #4]
 800a4d0:	e7cb      	b.n	800a46a <_free_r+0x22>
 800a4d2:	bd38      	pop	{r3, r4, r5, pc}
 800a4d4:	20001790 	.word	0x20001790

0800a4d8 <__ssputs_r>:
 800a4d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4dc:	461f      	mov	r7, r3
 800a4de:	688e      	ldr	r6, [r1, #8]
 800a4e0:	4682      	mov	sl, r0
 800a4e2:	42be      	cmp	r6, r7
 800a4e4:	460c      	mov	r4, r1
 800a4e6:	4690      	mov	r8, r2
 800a4e8:	680b      	ldr	r3, [r1, #0]
 800a4ea:	d82c      	bhi.n	800a546 <__ssputs_r+0x6e>
 800a4ec:	898a      	ldrh	r2, [r1, #12]
 800a4ee:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a4f2:	d026      	beq.n	800a542 <__ssputs_r+0x6a>
 800a4f4:	6965      	ldr	r5, [r4, #20]
 800a4f6:	6909      	ldr	r1, [r1, #16]
 800a4f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a4fc:	eba3 0901 	sub.w	r9, r3, r1
 800a500:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a504:	1c7b      	adds	r3, r7, #1
 800a506:	444b      	add	r3, r9
 800a508:	106d      	asrs	r5, r5, #1
 800a50a:	429d      	cmp	r5, r3
 800a50c:	bf38      	it	cc
 800a50e:	461d      	movcc	r5, r3
 800a510:	0553      	lsls	r3, r2, #21
 800a512:	d527      	bpl.n	800a564 <__ssputs_r+0x8c>
 800a514:	4629      	mov	r1, r5
 800a516:	f7ff fe85 	bl	800a224 <_malloc_r>
 800a51a:	4606      	mov	r6, r0
 800a51c:	b360      	cbz	r0, 800a578 <__ssputs_r+0xa0>
 800a51e:	464a      	mov	r2, r9
 800a520:	6921      	ldr	r1, [r4, #16]
 800a522:	f7ff ff83 	bl	800a42c <memcpy>
 800a526:	89a3      	ldrh	r3, [r4, #12]
 800a528:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a52c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a530:	81a3      	strh	r3, [r4, #12]
 800a532:	6126      	str	r6, [r4, #16]
 800a534:	444e      	add	r6, r9
 800a536:	6026      	str	r6, [r4, #0]
 800a538:	463e      	mov	r6, r7
 800a53a:	6165      	str	r5, [r4, #20]
 800a53c:	eba5 0509 	sub.w	r5, r5, r9
 800a540:	60a5      	str	r5, [r4, #8]
 800a542:	42be      	cmp	r6, r7
 800a544:	d900      	bls.n	800a548 <__ssputs_r+0x70>
 800a546:	463e      	mov	r6, r7
 800a548:	4632      	mov	r2, r6
 800a54a:	4641      	mov	r1, r8
 800a54c:	6820      	ldr	r0, [r4, #0]
 800a54e:	f000 faaf 	bl	800aab0 <memmove>
 800a552:	2000      	movs	r0, #0
 800a554:	68a3      	ldr	r3, [r4, #8]
 800a556:	1b9b      	subs	r3, r3, r6
 800a558:	60a3      	str	r3, [r4, #8]
 800a55a:	6823      	ldr	r3, [r4, #0]
 800a55c:	4433      	add	r3, r6
 800a55e:	6023      	str	r3, [r4, #0]
 800a560:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a564:	462a      	mov	r2, r5
 800a566:	f000 facb 	bl	800ab00 <_realloc_r>
 800a56a:	4606      	mov	r6, r0
 800a56c:	2800      	cmp	r0, #0
 800a56e:	d1e0      	bne.n	800a532 <__ssputs_r+0x5a>
 800a570:	4650      	mov	r0, sl
 800a572:	6921      	ldr	r1, [r4, #16]
 800a574:	f7ff ff68 	bl	800a448 <_free_r>
 800a578:	230c      	movs	r3, #12
 800a57a:	f8ca 3000 	str.w	r3, [sl]
 800a57e:	89a3      	ldrh	r3, [r4, #12]
 800a580:	f04f 30ff 	mov.w	r0, #4294967295
 800a584:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a588:	81a3      	strh	r3, [r4, #12]
 800a58a:	e7e9      	b.n	800a560 <__ssputs_r+0x88>

0800a58c <_svfiprintf_r>:
 800a58c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a590:	4698      	mov	r8, r3
 800a592:	898b      	ldrh	r3, [r1, #12]
 800a594:	4607      	mov	r7, r0
 800a596:	061b      	lsls	r3, r3, #24
 800a598:	460d      	mov	r5, r1
 800a59a:	4614      	mov	r4, r2
 800a59c:	b09d      	sub	sp, #116	; 0x74
 800a59e:	d50e      	bpl.n	800a5be <_svfiprintf_r+0x32>
 800a5a0:	690b      	ldr	r3, [r1, #16]
 800a5a2:	b963      	cbnz	r3, 800a5be <_svfiprintf_r+0x32>
 800a5a4:	2140      	movs	r1, #64	; 0x40
 800a5a6:	f7ff fe3d 	bl	800a224 <_malloc_r>
 800a5aa:	6028      	str	r0, [r5, #0]
 800a5ac:	6128      	str	r0, [r5, #16]
 800a5ae:	b920      	cbnz	r0, 800a5ba <_svfiprintf_r+0x2e>
 800a5b0:	230c      	movs	r3, #12
 800a5b2:	603b      	str	r3, [r7, #0]
 800a5b4:	f04f 30ff 	mov.w	r0, #4294967295
 800a5b8:	e0d0      	b.n	800a75c <_svfiprintf_r+0x1d0>
 800a5ba:	2340      	movs	r3, #64	; 0x40
 800a5bc:	616b      	str	r3, [r5, #20]
 800a5be:	2300      	movs	r3, #0
 800a5c0:	9309      	str	r3, [sp, #36]	; 0x24
 800a5c2:	2320      	movs	r3, #32
 800a5c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a5c8:	2330      	movs	r3, #48	; 0x30
 800a5ca:	f04f 0901 	mov.w	r9, #1
 800a5ce:	f8cd 800c 	str.w	r8, [sp, #12]
 800a5d2:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800a774 <_svfiprintf_r+0x1e8>
 800a5d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a5da:	4623      	mov	r3, r4
 800a5dc:	469a      	mov	sl, r3
 800a5de:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a5e2:	b10a      	cbz	r2, 800a5e8 <_svfiprintf_r+0x5c>
 800a5e4:	2a25      	cmp	r2, #37	; 0x25
 800a5e6:	d1f9      	bne.n	800a5dc <_svfiprintf_r+0x50>
 800a5e8:	ebba 0b04 	subs.w	fp, sl, r4
 800a5ec:	d00b      	beq.n	800a606 <_svfiprintf_r+0x7a>
 800a5ee:	465b      	mov	r3, fp
 800a5f0:	4622      	mov	r2, r4
 800a5f2:	4629      	mov	r1, r5
 800a5f4:	4638      	mov	r0, r7
 800a5f6:	f7ff ff6f 	bl	800a4d8 <__ssputs_r>
 800a5fa:	3001      	adds	r0, #1
 800a5fc:	f000 80a9 	beq.w	800a752 <_svfiprintf_r+0x1c6>
 800a600:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a602:	445a      	add	r2, fp
 800a604:	9209      	str	r2, [sp, #36]	; 0x24
 800a606:	f89a 3000 	ldrb.w	r3, [sl]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	f000 80a1 	beq.w	800a752 <_svfiprintf_r+0x1c6>
 800a610:	2300      	movs	r3, #0
 800a612:	f04f 32ff 	mov.w	r2, #4294967295
 800a616:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a61a:	f10a 0a01 	add.w	sl, sl, #1
 800a61e:	9304      	str	r3, [sp, #16]
 800a620:	9307      	str	r3, [sp, #28]
 800a622:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a626:	931a      	str	r3, [sp, #104]	; 0x68
 800a628:	4654      	mov	r4, sl
 800a62a:	2205      	movs	r2, #5
 800a62c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a630:	4850      	ldr	r0, [pc, #320]	; (800a774 <_svfiprintf_r+0x1e8>)
 800a632:	f000 fa57 	bl	800aae4 <memchr>
 800a636:	9a04      	ldr	r2, [sp, #16]
 800a638:	b9d8      	cbnz	r0, 800a672 <_svfiprintf_r+0xe6>
 800a63a:	06d0      	lsls	r0, r2, #27
 800a63c:	bf44      	itt	mi
 800a63e:	2320      	movmi	r3, #32
 800a640:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a644:	0711      	lsls	r1, r2, #28
 800a646:	bf44      	itt	mi
 800a648:	232b      	movmi	r3, #43	; 0x2b
 800a64a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a64e:	f89a 3000 	ldrb.w	r3, [sl]
 800a652:	2b2a      	cmp	r3, #42	; 0x2a
 800a654:	d015      	beq.n	800a682 <_svfiprintf_r+0xf6>
 800a656:	4654      	mov	r4, sl
 800a658:	2000      	movs	r0, #0
 800a65a:	f04f 0c0a 	mov.w	ip, #10
 800a65e:	9a07      	ldr	r2, [sp, #28]
 800a660:	4621      	mov	r1, r4
 800a662:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a666:	3b30      	subs	r3, #48	; 0x30
 800a668:	2b09      	cmp	r3, #9
 800a66a:	d94d      	bls.n	800a708 <_svfiprintf_r+0x17c>
 800a66c:	b1b0      	cbz	r0, 800a69c <_svfiprintf_r+0x110>
 800a66e:	9207      	str	r2, [sp, #28]
 800a670:	e014      	b.n	800a69c <_svfiprintf_r+0x110>
 800a672:	eba0 0308 	sub.w	r3, r0, r8
 800a676:	fa09 f303 	lsl.w	r3, r9, r3
 800a67a:	4313      	orrs	r3, r2
 800a67c:	46a2      	mov	sl, r4
 800a67e:	9304      	str	r3, [sp, #16]
 800a680:	e7d2      	b.n	800a628 <_svfiprintf_r+0x9c>
 800a682:	9b03      	ldr	r3, [sp, #12]
 800a684:	1d19      	adds	r1, r3, #4
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	9103      	str	r1, [sp, #12]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	bfbb      	ittet	lt
 800a68e:	425b      	neglt	r3, r3
 800a690:	f042 0202 	orrlt.w	r2, r2, #2
 800a694:	9307      	strge	r3, [sp, #28]
 800a696:	9307      	strlt	r3, [sp, #28]
 800a698:	bfb8      	it	lt
 800a69a:	9204      	strlt	r2, [sp, #16]
 800a69c:	7823      	ldrb	r3, [r4, #0]
 800a69e:	2b2e      	cmp	r3, #46	; 0x2e
 800a6a0:	d10c      	bne.n	800a6bc <_svfiprintf_r+0x130>
 800a6a2:	7863      	ldrb	r3, [r4, #1]
 800a6a4:	2b2a      	cmp	r3, #42	; 0x2a
 800a6a6:	d134      	bne.n	800a712 <_svfiprintf_r+0x186>
 800a6a8:	9b03      	ldr	r3, [sp, #12]
 800a6aa:	3402      	adds	r4, #2
 800a6ac:	1d1a      	adds	r2, r3, #4
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	9203      	str	r2, [sp, #12]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	bfb8      	it	lt
 800a6b6:	f04f 33ff 	movlt.w	r3, #4294967295
 800a6ba:	9305      	str	r3, [sp, #20]
 800a6bc:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800a778 <_svfiprintf_r+0x1ec>
 800a6c0:	2203      	movs	r2, #3
 800a6c2:	4650      	mov	r0, sl
 800a6c4:	7821      	ldrb	r1, [r4, #0]
 800a6c6:	f000 fa0d 	bl	800aae4 <memchr>
 800a6ca:	b138      	cbz	r0, 800a6dc <_svfiprintf_r+0x150>
 800a6cc:	2240      	movs	r2, #64	; 0x40
 800a6ce:	9b04      	ldr	r3, [sp, #16]
 800a6d0:	eba0 000a 	sub.w	r0, r0, sl
 800a6d4:	4082      	lsls	r2, r0
 800a6d6:	4313      	orrs	r3, r2
 800a6d8:	3401      	adds	r4, #1
 800a6da:	9304      	str	r3, [sp, #16]
 800a6dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6e0:	2206      	movs	r2, #6
 800a6e2:	4826      	ldr	r0, [pc, #152]	; (800a77c <_svfiprintf_r+0x1f0>)
 800a6e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a6e8:	f000 f9fc 	bl	800aae4 <memchr>
 800a6ec:	2800      	cmp	r0, #0
 800a6ee:	d038      	beq.n	800a762 <_svfiprintf_r+0x1d6>
 800a6f0:	4b23      	ldr	r3, [pc, #140]	; (800a780 <_svfiprintf_r+0x1f4>)
 800a6f2:	bb1b      	cbnz	r3, 800a73c <_svfiprintf_r+0x1b0>
 800a6f4:	9b03      	ldr	r3, [sp, #12]
 800a6f6:	3307      	adds	r3, #7
 800a6f8:	f023 0307 	bic.w	r3, r3, #7
 800a6fc:	3308      	adds	r3, #8
 800a6fe:	9303      	str	r3, [sp, #12]
 800a700:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a702:	4433      	add	r3, r6
 800a704:	9309      	str	r3, [sp, #36]	; 0x24
 800a706:	e768      	b.n	800a5da <_svfiprintf_r+0x4e>
 800a708:	460c      	mov	r4, r1
 800a70a:	2001      	movs	r0, #1
 800a70c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a710:	e7a6      	b.n	800a660 <_svfiprintf_r+0xd4>
 800a712:	2300      	movs	r3, #0
 800a714:	f04f 0c0a 	mov.w	ip, #10
 800a718:	4619      	mov	r1, r3
 800a71a:	3401      	adds	r4, #1
 800a71c:	9305      	str	r3, [sp, #20]
 800a71e:	4620      	mov	r0, r4
 800a720:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a724:	3a30      	subs	r2, #48	; 0x30
 800a726:	2a09      	cmp	r2, #9
 800a728:	d903      	bls.n	800a732 <_svfiprintf_r+0x1a6>
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d0c6      	beq.n	800a6bc <_svfiprintf_r+0x130>
 800a72e:	9105      	str	r1, [sp, #20]
 800a730:	e7c4      	b.n	800a6bc <_svfiprintf_r+0x130>
 800a732:	4604      	mov	r4, r0
 800a734:	2301      	movs	r3, #1
 800a736:	fb0c 2101 	mla	r1, ip, r1, r2
 800a73a:	e7f0      	b.n	800a71e <_svfiprintf_r+0x192>
 800a73c:	ab03      	add	r3, sp, #12
 800a73e:	9300      	str	r3, [sp, #0]
 800a740:	462a      	mov	r2, r5
 800a742:	4638      	mov	r0, r7
 800a744:	4b0f      	ldr	r3, [pc, #60]	; (800a784 <_svfiprintf_r+0x1f8>)
 800a746:	a904      	add	r1, sp, #16
 800a748:	f3af 8000 	nop.w
 800a74c:	1c42      	adds	r2, r0, #1
 800a74e:	4606      	mov	r6, r0
 800a750:	d1d6      	bne.n	800a700 <_svfiprintf_r+0x174>
 800a752:	89ab      	ldrh	r3, [r5, #12]
 800a754:	065b      	lsls	r3, r3, #25
 800a756:	f53f af2d 	bmi.w	800a5b4 <_svfiprintf_r+0x28>
 800a75a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a75c:	b01d      	add	sp, #116	; 0x74
 800a75e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a762:	ab03      	add	r3, sp, #12
 800a764:	9300      	str	r3, [sp, #0]
 800a766:	462a      	mov	r2, r5
 800a768:	4638      	mov	r0, r7
 800a76a:	4b06      	ldr	r3, [pc, #24]	; (800a784 <_svfiprintf_r+0x1f8>)
 800a76c:	a904      	add	r1, sp, #16
 800a76e:	f000 f87d 	bl	800a86c <_printf_i>
 800a772:	e7eb      	b.n	800a74c <_svfiprintf_r+0x1c0>
 800a774:	0800b3f0 	.word	0x0800b3f0
 800a778:	0800b3f6 	.word	0x0800b3f6
 800a77c:	0800b3fa 	.word	0x0800b3fa
 800a780:	00000000 	.word	0x00000000
 800a784:	0800a4d9 	.word	0x0800a4d9

0800a788 <_printf_common>:
 800a788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a78c:	4616      	mov	r6, r2
 800a78e:	4699      	mov	r9, r3
 800a790:	688a      	ldr	r2, [r1, #8]
 800a792:	690b      	ldr	r3, [r1, #16]
 800a794:	4607      	mov	r7, r0
 800a796:	4293      	cmp	r3, r2
 800a798:	bfb8      	it	lt
 800a79a:	4613      	movlt	r3, r2
 800a79c:	6033      	str	r3, [r6, #0]
 800a79e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a7a2:	460c      	mov	r4, r1
 800a7a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a7a8:	b10a      	cbz	r2, 800a7ae <_printf_common+0x26>
 800a7aa:	3301      	adds	r3, #1
 800a7ac:	6033      	str	r3, [r6, #0]
 800a7ae:	6823      	ldr	r3, [r4, #0]
 800a7b0:	0699      	lsls	r1, r3, #26
 800a7b2:	bf42      	ittt	mi
 800a7b4:	6833      	ldrmi	r3, [r6, #0]
 800a7b6:	3302      	addmi	r3, #2
 800a7b8:	6033      	strmi	r3, [r6, #0]
 800a7ba:	6825      	ldr	r5, [r4, #0]
 800a7bc:	f015 0506 	ands.w	r5, r5, #6
 800a7c0:	d106      	bne.n	800a7d0 <_printf_common+0x48>
 800a7c2:	f104 0a19 	add.w	sl, r4, #25
 800a7c6:	68e3      	ldr	r3, [r4, #12]
 800a7c8:	6832      	ldr	r2, [r6, #0]
 800a7ca:	1a9b      	subs	r3, r3, r2
 800a7cc:	42ab      	cmp	r3, r5
 800a7ce:	dc2b      	bgt.n	800a828 <_printf_common+0xa0>
 800a7d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a7d4:	1e13      	subs	r3, r2, #0
 800a7d6:	6822      	ldr	r2, [r4, #0]
 800a7d8:	bf18      	it	ne
 800a7da:	2301      	movne	r3, #1
 800a7dc:	0692      	lsls	r2, r2, #26
 800a7de:	d430      	bmi.n	800a842 <_printf_common+0xba>
 800a7e0:	4649      	mov	r1, r9
 800a7e2:	4638      	mov	r0, r7
 800a7e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a7e8:	47c0      	blx	r8
 800a7ea:	3001      	adds	r0, #1
 800a7ec:	d023      	beq.n	800a836 <_printf_common+0xae>
 800a7ee:	6823      	ldr	r3, [r4, #0]
 800a7f0:	6922      	ldr	r2, [r4, #16]
 800a7f2:	f003 0306 	and.w	r3, r3, #6
 800a7f6:	2b04      	cmp	r3, #4
 800a7f8:	bf14      	ite	ne
 800a7fa:	2500      	movne	r5, #0
 800a7fc:	6833      	ldreq	r3, [r6, #0]
 800a7fe:	f04f 0600 	mov.w	r6, #0
 800a802:	bf08      	it	eq
 800a804:	68e5      	ldreq	r5, [r4, #12]
 800a806:	f104 041a 	add.w	r4, r4, #26
 800a80a:	bf08      	it	eq
 800a80c:	1aed      	subeq	r5, r5, r3
 800a80e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800a812:	bf08      	it	eq
 800a814:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a818:	4293      	cmp	r3, r2
 800a81a:	bfc4      	itt	gt
 800a81c:	1a9b      	subgt	r3, r3, r2
 800a81e:	18ed      	addgt	r5, r5, r3
 800a820:	42b5      	cmp	r5, r6
 800a822:	d11a      	bne.n	800a85a <_printf_common+0xd2>
 800a824:	2000      	movs	r0, #0
 800a826:	e008      	b.n	800a83a <_printf_common+0xb2>
 800a828:	2301      	movs	r3, #1
 800a82a:	4652      	mov	r2, sl
 800a82c:	4649      	mov	r1, r9
 800a82e:	4638      	mov	r0, r7
 800a830:	47c0      	blx	r8
 800a832:	3001      	adds	r0, #1
 800a834:	d103      	bne.n	800a83e <_printf_common+0xb6>
 800a836:	f04f 30ff 	mov.w	r0, #4294967295
 800a83a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a83e:	3501      	adds	r5, #1
 800a840:	e7c1      	b.n	800a7c6 <_printf_common+0x3e>
 800a842:	2030      	movs	r0, #48	; 0x30
 800a844:	18e1      	adds	r1, r4, r3
 800a846:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a84a:	1c5a      	adds	r2, r3, #1
 800a84c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a850:	4422      	add	r2, r4
 800a852:	3302      	adds	r3, #2
 800a854:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a858:	e7c2      	b.n	800a7e0 <_printf_common+0x58>
 800a85a:	2301      	movs	r3, #1
 800a85c:	4622      	mov	r2, r4
 800a85e:	4649      	mov	r1, r9
 800a860:	4638      	mov	r0, r7
 800a862:	47c0      	blx	r8
 800a864:	3001      	adds	r0, #1
 800a866:	d0e6      	beq.n	800a836 <_printf_common+0xae>
 800a868:	3601      	adds	r6, #1
 800a86a:	e7d9      	b.n	800a820 <_printf_common+0x98>

0800a86c <_printf_i>:
 800a86c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a870:	7e0f      	ldrb	r7, [r1, #24]
 800a872:	4691      	mov	r9, r2
 800a874:	2f78      	cmp	r7, #120	; 0x78
 800a876:	4680      	mov	r8, r0
 800a878:	460c      	mov	r4, r1
 800a87a:	469a      	mov	sl, r3
 800a87c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a87e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a882:	d807      	bhi.n	800a894 <_printf_i+0x28>
 800a884:	2f62      	cmp	r7, #98	; 0x62
 800a886:	d80a      	bhi.n	800a89e <_printf_i+0x32>
 800a888:	2f00      	cmp	r7, #0
 800a88a:	f000 80d5 	beq.w	800aa38 <_printf_i+0x1cc>
 800a88e:	2f58      	cmp	r7, #88	; 0x58
 800a890:	f000 80c1 	beq.w	800aa16 <_printf_i+0x1aa>
 800a894:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a898:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a89c:	e03a      	b.n	800a914 <_printf_i+0xa8>
 800a89e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a8a2:	2b15      	cmp	r3, #21
 800a8a4:	d8f6      	bhi.n	800a894 <_printf_i+0x28>
 800a8a6:	a101      	add	r1, pc, #4	; (adr r1, 800a8ac <_printf_i+0x40>)
 800a8a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a8ac:	0800a905 	.word	0x0800a905
 800a8b0:	0800a919 	.word	0x0800a919
 800a8b4:	0800a895 	.word	0x0800a895
 800a8b8:	0800a895 	.word	0x0800a895
 800a8bc:	0800a895 	.word	0x0800a895
 800a8c0:	0800a895 	.word	0x0800a895
 800a8c4:	0800a919 	.word	0x0800a919
 800a8c8:	0800a895 	.word	0x0800a895
 800a8cc:	0800a895 	.word	0x0800a895
 800a8d0:	0800a895 	.word	0x0800a895
 800a8d4:	0800a895 	.word	0x0800a895
 800a8d8:	0800aa1f 	.word	0x0800aa1f
 800a8dc:	0800a945 	.word	0x0800a945
 800a8e0:	0800a9d9 	.word	0x0800a9d9
 800a8e4:	0800a895 	.word	0x0800a895
 800a8e8:	0800a895 	.word	0x0800a895
 800a8ec:	0800aa41 	.word	0x0800aa41
 800a8f0:	0800a895 	.word	0x0800a895
 800a8f4:	0800a945 	.word	0x0800a945
 800a8f8:	0800a895 	.word	0x0800a895
 800a8fc:	0800a895 	.word	0x0800a895
 800a900:	0800a9e1 	.word	0x0800a9e1
 800a904:	682b      	ldr	r3, [r5, #0]
 800a906:	1d1a      	adds	r2, r3, #4
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	602a      	str	r2, [r5, #0]
 800a90c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a910:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a914:	2301      	movs	r3, #1
 800a916:	e0a0      	b.n	800aa5a <_printf_i+0x1ee>
 800a918:	6820      	ldr	r0, [r4, #0]
 800a91a:	682b      	ldr	r3, [r5, #0]
 800a91c:	0607      	lsls	r7, r0, #24
 800a91e:	f103 0104 	add.w	r1, r3, #4
 800a922:	6029      	str	r1, [r5, #0]
 800a924:	d501      	bpl.n	800a92a <_printf_i+0xbe>
 800a926:	681e      	ldr	r6, [r3, #0]
 800a928:	e003      	b.n	800a932 <_printf_i+0xc6>
 800a92a:	0646      	lsls	r6, r0, #25
 800a92c:	d5fb      	bpl.n	800a926 <_printf_i+0xba>
 800a92e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a932:	2e00      	cmp	r6, #0
 800a934:	da03      	bge.n	800a93e <_printf_i+0xd2>
 800a936:	232d      	movs	r3, #45	; 0x2d
 800a938:	4276      	negs	r6, r6
 800a93a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a93e:	230a      	movs	r3, #10
 800a940:	4859      	ldr	r0, [pc, #356]	; (800aaa8 <_printf_i+0x23c>)
 800a942:	e012      	b.n	800a96a <_printf_i+0xfe>
 800a944:	682b      	ldr	r3, [r5, #0]
 800a946:	6820      	ldr	r0, [r4, #0]
 800a948:	1d19      	adds	r1, r3, #4
 800a94a:	6029      	str	r1, [r5, #0]
 800a94c:	0605      	lsls	r5, r0, #24
 800a94e:	d501      	bpl.n	800a954 <_printf_i+0xe8>
 800a950:	681e      	ldr	r6, [r3, #0]
 800a952:	e002      	b.n	800a95a <_printf_i+0xee>
 800a954:	0641      	lsls	r1, r0, #25
 800a956:	d5fb      	bpl.n	800a950 <_printf_i+0xe4>
 800a958:	881e      	ldrh	r6, [r3, #0]
 800a95a:	2f6f      	cmp	r7, #111	; 0x6f
 800a95c:	bf0c      	ite	eq
 800a95e:	2308      	moveq	r3, #8
 800a960:	230a      	movne	r3, #10
 800a962:	4851      	ldr	r0, [pc, #324]	; (800aaa8 <_printf_i+0x23c>)
 800a964:	2100      	movs	r1, #0
 800a966:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a96a:	6865      	ldr	r5, [r4, #4]
 800a96c:	2d00      	cmp	r5, #0
 800a96e:	bfa8      	it	ge
 800a970:	6821      	ldrge	r1, [r4, #0]
 800a972:	60a5      	str	r5, [r4, #8]
 800a974:	bfa4      	itt	ge
 800a976:	f021 0104 	bicge.w	r1, r1, #4
 800a97a:	6021      	strge	r1, [r4, #0]
 800a97c:	b90e      	cbnz	r6, 800a982 <_printf_i+0x116>
 800a97e:	2d00      	cmp	r5, #0
 800a980:	d04b      	beq.n	800aa1a <_printf_i+0x1ae>
 800a982:	4615      	mov	r5, r2
 800a984:	fbb6 f1f3 	udiv	r1, r6, r3
 800a988:	fb03 6711 	mls	r7, r3, r1, r6
 800a98c:	5dc7      	ldrb	r7, [r0, r7]
 800a98e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a992:	4637      	mov	r7, r6
 800a994:	42bb      	cmp	r3, r7
 800a996:	460e      	mov	r6, r1
 800a998:	d9f4      	bls.n	800a984 <_printf_i+0x118>
 800a99a:	2b08      	cmp	r3, #8
 800a99c:	d10b      	bne.n	800a9b6 <_printf_i+0x14a>
 800a99e:	6823      	ldr	r3, [r4, #0]
 800a9a0:	07de      	lsls	r6, r3, #31
 800a9a2:	d508      	bpl.n	800a9b6 <_printf_i+0x14a>
 800a9a4:	6923      	ldr	r3, [r4, #16]
 800a9a6:	6861      	ldr	r1, [r4, #4]
 800a9a8:	4299      	cmp	r1, r3
 800a9aa:	bfde      	ittt	le
 800a9ac:	2330      	movle	r3, #48	; 0x30
 800a9ae:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a9b2:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a9b6:	1b52      	subs	r2, r2, r5
 800a9b8:	6122      	str	r2, [r4, #16]
 800a9ba:	464b      	mov	r3, r9
 800a9bc:	4621      	mov	r1, r4
 800a9be:	4640      	mov	r0, r8
 800a9c0:	f8cd a000 	str.w	sl, [sp]
 800a9c4:	aa03      	add	r2, sp, #12
 800a9c6:	f7ff fedf 	bl	800a788 <_printf_common>
 800a9ca:	3001      	adds	r0, #1
 800a9cc:	d14a      	bne.n	800aa64 <_printf_i+0x1f8>
 800a9ce:	f04f 30ff 	mov.w	r0, #4294967295
 800a9d2:	b004      	add	sp, #16
 800a9d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9d8:	6823      	ldr	r3, [r4, #0]
 800a9da:	f043 0320 	orr.w	r3, r3, #32
 800a9de:	6023      	str	r3, [r4, #0]
 800a9e0:	2778      	movs	r7, #120	; 0x78
 800a9e2:	4832      	ldr	r0, [pc, #200]	; (800aaac <_printf_i+0x240>)
 800a9e4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a9e8:	6823      	ldr	r3, [r4, #0]
 800a9ea:	6829      	ldr	r1, [r5, #0]
 800a9ec:	061f      	lsls	r7, r3, #24
 800a9ee:	f851 6b04 	ldr.w	r6, [r1], #4
 800a9f2:	d402      	bmi.n	800a9fa <_printf_i+0x18e>
 800a9f4:	065f      	lsls	r7, r3, #25
 800a9f6:	bf48      	it	mi
 800a9f8:	b2b6      	uxthmi	r6, r6
 800a9fa:	07df      	lsls	r7, r3, #31
 800a9fc:	bf48      	it	mi
 800a9fe:	f043 0320 	orrmi.w	r3, r3, #32
 800aa02:	6029      	str	r1, [r5, #0]
 800aa04:	bf48      	it	mi
 800aa06:	6023      	strmi	r3, [r4, #0]
 800aa08:	b91e      	cbnz	r6, 800aa12 <_printf_i+0x1a6>
 800aa0a:	6823      	ldr	r3, [r4, #0]
 800aa0c:	f023 0320 	bic.w	r3, r3, #32
 800aa10:	6023      	str	r3, [r4, #0]
 800aa12:	2310      	movs	r3, #16
 800aa14:	e7a6      	b.n	800a964 <_printf_i+0xf8>
 800aa16:	4824      	ldr	r0, [pc, #144]	; (800aaa8 <_printf_i+0x23c>)
 800aa18:	e7e4      	b.n	800a9e4 <_printf_i+0x178>
 800aa1a:	4615      	mov	r5, r2
 800aa1c:	e7bd      	b.n	800a99a <_printf_i+0x12e>
 800aa1e:	682b      	ldr	r3, [r5, #0]
 800aa20:	6826      	ldr	r6, [r4, #0]
 800aa22:	1d18      	adds	r0, r3, #4
 800aa24:	6961      	ldr	r1, [r4, #20]
 800aa26:	6028      	str	r0, [r5, #0]
 800aa28:	0635      	lsls	r5, r6, #24
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	d501      	bpl.n	800aa32 <_printf_i+0x1c6>
 800aa2e:	6019      	str	r1, [r3, #0]
 800aa30:	e002      	b.n	800aa38 <_printf_i+0x1cc>
 800aa32:	0670      	lsls	r0, r6, #25
 800aa34:	d5fb      	bpl.n	800aa2e <_printf_i+0x1c2>
 800aa36:	8019      	strh	r1, [r3, #0]
 800aa38:	2300      	movs	r3, #0
 800aa3a:	4615      	mov	r5, r2
 800aa3c:	6123      	str	r3, [r4, #16]
 800aa3e:	e7bc      	b.n	800a9ba <_printf_i+0x14e>
 800aa40:	682b      	ldr	r3, [r5, #0]
 800aa42:	2100      	movs	r1, #0
 800aa44:	1d1a      	adds	r2, r3, #4
 800aa46:	602a      	str	r2, [r5, #0]
 800aa48:	681d      	ldr	r5, [r3, #0]
 800aa4a:	6862      	ldr	r2, [r4, #4]
 800aa4c:	4628      	mov	r0, r5
 800aa4e:	f000 f849 	bl	800aae4 <memchr>
 800aa52:	b108      	cbz	r0, 800aa58 <_printf_i+0x1ec>
 800aa54:	1b40      	subs	r0, r0, r5
 800aa56:	6060      	str	r0, [r4, #4]
 800aa58:	6863      	ldr	r3, [r4, #4]
 800aa5a:	6123      	str	r3, [r4, #16]
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa62:	e7aa      	b.n	800a9ba <_printf_i+0x14e>
 800aa64:	462a      	mov	r2, r5
 800aa66:	4649      	mov	r1, r9
 800aa68:	4640      	mov	r0, r8
 800aa6a:	6923      	ldr	r3, [r4, #16]
 800aa6c:	47d0      	blx	sl
 800aa6e:	3001      	adds	r0, #1
 800aa70:	d0ad      	beq.n	800a9ce <_printf_i+0x162>
 800aa72:	6823      	ldr	r3, [r4, #0]
 800aa74:	079b      	lsls	r3, r3, #30
 800aa76:	d413      	bmi.n	800aaa0 <_printf_i+0x234>
 800aa78:	68e0      	ldr	r0, [r4, #12]
 800aa7a:	9b03      	ldr	r3, [sp, #12]
 800aa7c:	4298      	cmp	r0, r3
 800aa7e:	bfb8      	it	lt
 800aa80:	4618      	movlt	r0, r3
 800aa82:	e7a6      	b.n	800a9d2 <_printf_i+0x166>
 800aa84:	2301      	movs	r3, #1
 800aa86:	4632      	mov	r2, r6
 800aa88:	4649      	mov	r1, r9
 800aa8a:	4640      	mov	r0, r8
 800aa8c:	47d0      	blx	sl
 800aa8e:	3001      	adds	r0, #1
 800aa90:	d09d      	beq.n	800a9ce <_printf_i+0x162>
 800aa92:	3501      	adds	r5, #1
 800aa94:	68e3      	ldr	r3, [r4, #12]
 800aa96:	9903      	ldr	r1, [sp, #12]
 800aa98:	1a5b      	subs	r3, r3, r1
 800aa9a:	42ab      	cmp	r3, r5
 800aa9c:	dcf2      	bgt.n	800aa84 <_printf_i+0x218>
 800aa9e:	e7eb      	b.n	800aa78 <_printf_i+0x20c>
 800aaa0:	2500      	movs	r5, #0
 800aaa2:	f104 0619 	add.w	r6, r4, #25
 800aaa6:	e7f5      	b.n	800aa94 <_printf_i+0x228>
 800aaa8:	0800b401 	.word	0x0800b401
 800aaac:	0800b412 	.word	0x0800b412

0800aab0 <memmove>:
 800aab0:	4288      	cmp	r0, r1
 800aab2:	b510      	push	{r4, lr}
 800aab4:	eb01 0402 	add.w	r4, r1, r2
 800aab8:	d902      	bls.n	800aac0 <memmove+0x10>
 800aaba:	4284      	cmp	r4, r0
 800aabc:	4623      	mov	r3, r4
 800aabe:	d807      	bhi.n	800aad0 <memmove+0x20>
 800aac0:	1e43      	subs	r3, r0, #1
 800aac2:	42a1      	cmp	r1, r4
 800aac4:	d008      	beq.n	800aad8 <memmove+0x28>
 800aac6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aaca:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aace:	e7f8      	b.n	800aac2 <memmove+0x12>
 800aad0:	4601      	mov	r1, r0
 800aad2:	4402      	add	r2, r0
 800aad4:	428a      	cmp	r2, r1
 800aad6:	d100      	bne.n	800aada <memmove+0x2a>
 800aad8:	bd10      	pop	{r4, pc}
 800aada:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aade:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aae2:	e7f7      	b.n	800aad4 <memmove+0x24>

0800aae4 <memchr>:
 800aae4:	4603      	mov	r3, r0
 800aae6:	b510      	push	{r4, lr}
 800aae8:	b2c9      	uxtb	r1, r1
 800aaea:	4402      	add	r2, r0
 800aaec:	4293      	cmp	r3, r2
 800aaee:	4618      	mov	r0, r3
 800aaf0:	d101      	bne.n	800aaf6 <memchr+0x12>
 800aaf2:	2000      	movs	r0, #0
 800aaf4:	e003      	b.n	800aafe <memchr+0x1a>
 800aaf6:	7804      	ldrb	r4, [r0, #0]
 800aaf8:	3301      	adds	r3, #1
 800aafa:	428c      	cmp	r4, r1
 800aafc:	d1f6      	bne.n	800aaec <memchr+0x8>
 800aafe:	bd10      	pop	{r4, pc}

0800ab00 <_realloc_r>:
 800ab00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab04:	4680      	mov	r8, r0
 800ab06:	4614      	mov	r4, r2
 800ab08:	460e      	mov	r6, r1
 800ab0a:	b921      	cbnz	r1, 800ab16 <_realloc_r+0x16>
 800ab0c:	4611      	mov	r1, r2
 800ab0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab12:	f7ff bb87 	b.w	800a224 <_malloc_r>
 800ab16:	b92a      	cbnz	r2, 800ab24 <_realloc_r+0x24>
 800ab18:	f7ff fc96 	bl	800a448 <_free_r>
 800ab1c:	4625      	mov	r5, r4
 800ab1e:	4628      	mov	r0, r5
 800ab20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab24:	f000 f81b 	bl	800ab5e <_malloc_usable_size_r>
 800ab28:	4284      	cmp	r4, r0
 800ab2a:	4607      	mov	r7, r0
 800ab2c:	d802      	bhi.n	800ab34 <_realloc_r+0x34>
 800ab2e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ab32:	d812      	bhi.n	800ab5a <_realloc_r+0x5a>
 800ab34:	4621      	mov	r1, r4
 800ab36:	4640      	mov	r0, r8
 800ab38:	f7ff fb74 	bl	800a224 <_malloc_r>
 800ab3c:	4605      	mov	r5, r0
 800ab3e:	2800      	cmp	r0, #0
 800ab40:	d0ed      	beq.n	800ab1e <_realloc_r+0x1e>
 800ab42:	42bc      	cmp	r4, r7
 800ab44:	4622      	mov	r2, r4
 800ab46:	4631      	mov	r1, r6
 800ab48:	bf28      	it	cs
 800ab4a:	463a      	movcs	r2, r7
 800ab4c:	f7ff fc6e 	bl	800a42c <memcpy>
 800ab50:	4631      	mov	r1, r6
 800ab52:	4640      	mov	r0, r8
 800ab54:	f7ff fc78 	bl	800a448 <_free_r>
 800ab58:	e7e1      	b.n	800ab1e <_realloc_r+0x1e>
 800ab5a:	4635      	mov	r5, r6
 800ab5c:	e7df      	b.n	800ab1e <_realloc_r+0x1e>

0800ab5e <_malloc_usable_size_r>:
 800ab5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab62:	1f18      	subs	r0, r3, #4
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	bfbc      	itt	lt
 800ab68:	580b      	ldrlt	r3, [r1, r0]
 800ab6a:	18c0      	addlt	r0, r0, r3
 800ab6c:	4770      	bx	lr
	...

0800ab70 <log>:
 800ab70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab72:	4604      	mov	r4, r0
 800ab74:	460d      	mov	r5, r1
 800ab76:	f000 f833 	bl	800abe0 <__ieee754_log>
 800ab7a:	4622      	mov	r2, r4
 800ab7c:	4606      	mov	r6, r0
 800ab7e:	460f      	mov	r7, r1
 800ab80:	462b      	mov	r3, r5
 800ab82:	4620      	mov	r0, r4
 800ab84:	4629      	mov	r1, r5
 800ab86:	f7f5 ffad 	bl	8000ae4 <__aeabi_dcmpun>
 800ab8a:	b998      	cbnz	r0, 800abb4 <log+0x44>
 800ab8c:	2200      	movs	r2, #0
 800ab8e:	2300      	movs	r3, #0
 800ab90:	4620      	mov	r0, r4
 800ab92:	4629      	mov	r1, r5
 800ab94:	f7f5 ff9c 	bl	8000ad0 <__aeabi_dcmpgt>
 800ab98:	b960      	cbnz	r0, 800abb4 <log+0x44>
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	4620      	mov	r0, r4
 800aba0:	4629      	mov	r1, r5
 800aba2:	f7f5 ff6d 	bl	8000a80 <__aeabi_dcmpeq>
 800aba6:	b140      	cbz	r0, 800abba <log+0x4a>
 800aba8:	f7ff fc14 	bl	800a3d4 <__errno>
 800abac:	2322      	movs	r3, #34	; 0x22
 800abae:	2600      	movs	r6, #0
 800abb0:	4f06      	ldr	r7, [pc, #24]	; (800abcc <log+0x5c>)
 800abb2:	6003      	str	r3, [r0, #0]
 800abb4:	4630      	mov	r0, r6
 800abb6:	4639      	mov	r1, r7
 800abb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800abba:	f7ff fc0b 	bl	800a3d4 <__errno>
 800abbe:	2321      	movs	r3, #33	; 0x21
 800abc0:	6003      	str	r3, [r0, #0]
 800abc2:	4803      	ldr	r0, [pc, #12]	; (800abd0 <log+0x60>)
 800abc4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800abc8:	f000 b804 	b.w	800abd4 <nan>
 800abcc:	fff00000 	.word	0xfff00000
 800abd0:	0800b3f5 	.word	0x0800b3f5

0800abd4 <nan>:
 800abd4:	2000      	movs	r0, #0
 800abd6:	4901      	ldr	r1, [pc, #4]	; (800abdc <nan+0x8>)
 800abd8:	4770      	bx	lr
 800abda:	bf00      	nop
 800abdc:	7ff80000 	.word	0x7ff80000

0800abe0 <__ieee754_log>:
 800abe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abe4:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800abe8:	4602      	mov	r2, r0
 800abea:	460b      	mov	r3, r1
 800abec:	460d      	mov	r5, r1
 800abee:	b087      	sub	sp, #28
 800abf0:	da24      	bge.n	800ac3c <__ieee754_log+0x5c>
 800abf2:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800abf6:	4304      	orrs	r4, r0
 800abf8:	d108      	bne.n	800ac0c <__ieee754_log+0x2c>
 800abfa:	2200      	movs	r2, #0
 800abfc:	2300      	movs	r3, #0
 800abfe:	2000      	movs	r0, #0
 800ac00:	49cb      	ldr	r1, [pc, #812]	; (800af30 <__ieee754_log+0x350>)
 800ac02:	f7f5 fdff 	bl	8000804 <__aeabi_ddiv>
 800ac06:	b007      	add	sp, #28
 800ac08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac0c:	2900      	cmp	r1, #0
 800ac0e:	da04      	bge.n	800ac1a <__ieee754_log+0x3a>
 800ac10:	f7f5 fb16 	bl	8000240 <__aeabi_dsub>
 800ac14:	2200      	movs	r2, #0
 800ac16:	2300      	movs	r3, #0
 800ac18:	e7f3      	b.n	800ac02 <__ieee754_log+0x22>
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	4bc5      	ldr	r3, [pc, #788]	; (800af34 <__ieee754_log+0x354>)
 800ac1e:	f7f5 fcc7 	bl	80005b0 <__aeabi_dmul>
 800ac22:	460b      	mov	r3, r1
 800ac24:	460d      	mov	r5, r1
 800ac26:	4602      	mov	r2, r0
 800ac28:	f06f 0135 	mvn.w	r1, #53	; 0x35
 800ac2c:	48c2      	ldr	r0, [pc, #776]	; (800af38 <__ieee754_log+0x358>)
 800ac2e:	4285      	cmp	r5, r0
 800ac30:	dd06      	ble.n	800ac40 <__ieee754_log+0x60>
 800ac32:	4610      	mov	r0, r2
 800ac34:	4619      	mov	r1, r3
 800ac36:	f7f5 fb05 	bl	8000244 <__adddf3>
 800ac3a:	e7e4      	b.n	800ac06 <__ieee754_log+0x26>
 800ac3c:	2100      	movs	r1, #0
 800ac3e:	e7f5      	b.n	800ac2c <__ieee754_log+0x4c>
 800ac40:	152c      	asrs	r4, r5, #20
 800ac42:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800ac46:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800ac4a:	440c      	add	r4, r1
 800ac4c:	f505 2115 	add.w	r1, r5, #610304	; 0x95000
 800ac50:	f601 7164 	addw	r1, r1, #3940	; 0xf64
 800ac54:	f401 1680 	and.w	r6, r1, #1048576	; 0x100000
 800ac58:	f086 517f 	eor.w	r1, r6, #1069547520	; 0x3fc00000
 800ac5c:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 800ac60:	ea41 0305 	orr.w	r3, r1, r5
 800ac64:	4610      	mov	r0, r2
 800ac66:	4619      	mov	r1, r3
 800ac68:	2200      	movs	r2, #0
 800ac6a:	4bb4      	ldr	r3, [pc, #720]	; (800af3c <__ieee754_log+0x35c>)
 800ac6c:	f7f5 fae8 	bl	8000240 <__aeabi_dsub>
 800ac70:	1cab      	adds	r3, r5, #2
 800ac72:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ac76:	2b02      	cmp	r3, #2
 800ac78:	4682      	mov	sl, r0
 800ac7a:	468b      	mov	fp, r1
 800ac7c:	f04f 0200 	mov.w	r2, #0
 800ac80:	eb04 5416 	add.w	r4, r4, r6, lsr #20
 800ac84:	dc53      	bgt.n	800ad2e <__ieee754_log+0x14e>
 800ac86:	2300      	movs	r3, #0
 800ac88:	f7f5 fefa 	bl	8000a80 <__aeabi_dcmpeq>
 800ac8c:	b1d0      	cbz	r0, 800acc4 <__ieee754_log+0xe4>
 800ac8e:	2c00      	cmp	r4, #0
 800ac90:	f000 8122 	beq.w	800aed8 <__ieee754_log+0x2f8>
 800ac94:	4620      	mov	r0, r4
 800ac96:	f7f5 fc21 	bl	80004dc <__aeabi_i2d>
 800ac9a:	a391      	add	r3, pc, #580	; (adr r3, 800aee0 <__ieee754_log+0x300>)
 800ac9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aca0:	4606      	mov	r6, r0
 800aca2:	460f      	mov	r7, r1
 800aca4:	f7f5 fc84 	bl	80005b0 <__aeabi_dmul>
 800aca8:	a38f      	add	r3, pc, #572	; (adr r3, 800aee8 <__ieee754_log+0x308>)
 800acaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acae:	4604      	mov	r4, r0
 800acb0:	460d      	mov	r5, r1
 800acb2:	4630      	mov	r0, r6
 800acb4:	4639      	mov	r1, r7
 800acb6:	f7f5 fc7b 	bl	80005b0 <__aeabi_dmul>
 800acba:	4602      	mov	r2, r0
 800acbc:	460b      	mov	r3, r1
 800acbe:	4620      	mov	r0, r4
 800acc0:	4629      	mov	r1, r5
 800acc2:	e7b8      	b.n	800ac36 <__ieee754_log+0x56>
 800acc4:	a38a      	add	r3, pc, #552	; (adr r3, 800aef0 <__ieee754_log+0x310>)
 800acc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acca:	4650      	mov	r0, sl
 800accc:	4659      	mov	r1, fp
 800acce:	f7f5 fc6f 	bl	80005b0 <__aeabi_dmul>
 800acd2:	4602      	mov	r2, r0
 800acd4:	460b      	mov	r3, r1
 800acd6:	2000      	movs	r0, #0
 800acd8:	4999      	ldr	r1, [pc, #612]	; (800af40 <__ieee754_log+0x360>)
 800acda:	f7f5 fab1 	bl	8000240 <__aeabi_dsub>
 800acde:	4652      	mov	r2, sl
 800ace0:	4606      	mov	r6, r0
 800ace2:	460f      	mov	r7, r1
 800ace4:	465b      	mov	r3, fp
 800ace6:	4650      	mov	r0, sl
 800ace8:	4659      	mov	r1, fp
 800acea:	f7f5 fc61 	bl	80005b0 <__aeabi_dmul>
 800acee:	4602      	mov	r2, r0
 800acf0:	460b      	mov	r3, r1
 800acf2:	4630      	mov	r0, r6
 800acf4:	4639      	mov	r1, r7
 800acf6:	f7f5 fc5b 	bl	80005b0 <__aeabi_dmul>
 800acfa:	4606      	mov	r6, r0
 800acfc:	460f      	mov	r7, r1
 800acfe:	b914      	cbnz	r4, 800ad06 <__ieee754_log+0x126>
 800ad00:	4632      	mov	r2, r6
 800ad02:	463b      	mov	r3, r7
 800ad04:	e0a2      	b.n	800ae4c <__ieee754_log+0x26c>
 800ad06:	4620      	mov	r0, r4
 800ad08:	f7f5 fbe8 	bl	80004dc <__aeabi_i2d>
 800ad0c:	a374      	add	r3, pc, #464	; (adr r3, 800aee0 <__ieee754_log+0x300>)
 800ad0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad12:	4680      	mov	r8, r0
 800ad14:	4689      	mov	r9, r1
 800ad16:	f7f5 fc4b 	bl	80005b0 <__aeabi_dmul>
 800ad1a:	a373      	add	r3, pc, #460	; (adr r3, 800aee8 <__ieee754_log+0x308>)
 800ad1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad20:	4604      	mov	r4, r0
 800ad22:	460d      	mov	r5, r1
 800ad24:	4640      	mov	r0, r8
 800ad26:	4649      	mov	r1, r9
 800ad28:	f7f5 fc42 	bl	80005b0 <__aeabi_dmul>
 800ad2c:	e0a7      	b.n	800ae7e <__ieee754_log+0x29e>
 800ad2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ad32:	f7f5 fa87 	bl	8000244 <__adddf3>
 800ad36:	4602      	mov	r2, r0
 800ad38:	460b      	mov	r3, r1
 800ad3a:	4650      	mov	r0, sl
 800ad3c:	4659      	mov	r1, fp
 800ad3e:	f7f5 fd61 	bl	8000804 <__aeabi_ddiv>
 800ad42:	e9cd 0100 	strd	r0, r1, [sp]
 800ad46:	4620      	mov	r0, r4
 800ad48:	f7f5 fbc8 	bl	80004dc <__aeabi_i2d>
 800ad4c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ad50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad54:	4610      	mov	r0, r2
 800ad56:	4619      	mov	r1, r3
 800ad58:	f7f5 fc2a 	bl	80005b0 <__aeabi_dmul>
 800ad5c:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800ad60:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800ad64:	4602      	mov	r2, r0
 800ad66:	9305      	str	r3, [sp, #20]
 800ad68:	460b      	mov	r3, r1
 800ad6a:	4606      	mov	r6, r0
 800ad6c:	460f      	mov	r7, r1
 800ad6e:	f7f5 fc1f 	bl	80005b0 <__aeabi_dmul>
 800ad72:	a361      	add	r3, pc, #388	; (adr r3, 800aef8 <__ieee754_log+0x318>)
 800ad74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad78:	4680      	mov	r8, r0
 800ad7a:	4689      	mov	r9, r1
 800ad7c:	f7f5 fc18 	bl	80005b0 <__aeabi_dmul>
 800ad80:	a35f      	add	r3, pc, #380	; (adr r3, 800af00 <__ieee754_log+0x320>)
 800ad82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad86:	f7f5 fa5d 	bl	8000244 <__adddf3>
 800ad8a:	4642      	mov	r2, r8
 800ad8c:	464b      	mov	r3, r9
 800ad8e:	f7f5 fc0f 	bl	80005b0 <__aeabi_dmul>
 800ad92:	a35d      	add	r3, pc, #372	; (adr r3, 800af08 <__ieee754_log+0x328>)
 800ad94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad98:	f7f5 fa54 	bl	8000244 <__adddf3>
 800ad9c:	4642      	mov	r2, r8
 800ad9e:	464b      	mov	r3, r9
 800ada0:	f7f5 fc06 	bl	80005b0 <__aeabi_dmul>
 800ada4:	a35a      	add	r3, pc, #360	; (adr r3, 800af10 <__ieee754_log+0x330>)
 800ada6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adaa:	f7f5 fa4b 	bl	8000244 <__adddf3>
 800adae:	4632      	mov	r2, r6
 800adb0:	463b      	mov	r3, r7
 800adb2:	f7f5 fbfd 	bl	80005b0 <__aeabi_dmul>
 800adb6:	a358      	add	r3, pc, #352	; (adr r3, 800af18 <__ieee754_log+0x338>)
 800adb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adbc:	4606      	mov	r6, r0
 800adbe:	460f      	mov	r7, r1
 800adc0:	4640      	mov	r0, r8
 800adc2:	4649      	mov	r1, r9
 800adc4:	f7f5 fbf4 	bl	80005b0 <__aeabi_dmul>
 800adc8:	a355      	add	r3, pc, #340	; (adr r3, 800af20 <__ieee754_log+0x340>)
 800adca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adce:	f7f5 fa39 	bl	8000244 <__adddf3>
 800add2:	4642      	mov	r2, r8
 800add4:	464b      	mov	r3, r9
 800add6:	f7f5 fbeb 	bl	80005b0 <__aeabi_dmul>
 800adda:	a353      	add	r3, pc, #332	; (adr r3, 800af28 <__ieee754_log+0x348>)
 800addc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ade0:	f7f5 fa30 	bl	8000244 <__adddf3>
 800ade4:	4642      	mov	r2, r8
 800ade6:	464b      	mov	r3, r9
 800ade8:	f7f5 fbe2 	bl	80005b0 <__aeabi_dmul>
 800adec:	460b      	mov	r3, r1
 800adee:	4602      	mov	r2, r0
 800adf0:	4639      	mov	r1, r7
 800adf2:	4630      	mov	r0, r6
 800adf4:	f7f5 fa26 	bl	8000244 <__adddf3>
 800adf8:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800adfc:	9b05      	ldr	r3, [sp, #20]
 800adfe:	3551      	adds	r5, #81	; 0x51
 800ae00:	431d      	orrs	r5, r3
 800ae02:	2d00      	cmp	r5, #0
 800ae04:	4680      	mov	r8, r0
 800ae06:	4689      	mov	r9, r1
 800ae08:	dd48      	ble.n	800ae9c <__ieee754_log+0x2bc>
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	4b4c      	ldr	r3, [pc, #304]	; (800af40 <__ieee754_log+0x360>)
 800ae0e:	4650      	mov	r0, sl
 800ae10:	4659      	mov	r1, fp
 800ae12:	f7f5 fbcd 	bl	80005b0 <__aeabi_dmul>
 800ae16:	4652      	mov	r2, sl
 800ae18:	465b      	mov	r3, fp
 800ae1a:	f7f5 fbc9 	bl	80005b0 <__aeabi_dmul>
 800ae1e:	4602      	mov	r2, r0
 800ae20:	460b      	mov	r3, r1
 800ae22:	4606      	mov	r6, r0
 800ae24:	460f      	mov	r7, r1
 800ae26:	4640      	mov	r0, r8
 800ae28:	4649      	mov	r1, r9
 800ae2a:	f7f5 fa0b 	bl	8000244 <__adddf3>
 800ae2e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ae32:	f7f5 fbbd 	bl	80005b0 <__aeabi_dmul>
 800ae36:	4680      	mov	r8, r0
 800ae38:	4689      	mov	r9, r1
 800ae3a:	b964      	cbnz	r4, 800ae56 <__ieee754_log+0x276>
 800ae3c:	4602      	mov	r2, r0
 800ae3e:	460b      	mov	r3, r1
 800ae40:	4630      	mov	r0, r6
 800ae42:	4639      	mov	r1, r7
 800ae44:	f7f5 f9fc 	bl	8000240 <__aeabi_dsub>
 800ae48:	4602      	mov	r2, r0
 800ae4a:	460b      	mov	r3, r1
 800ae4c:	4650      	mov	r0, sl
 800ae4e:	4659      	mov	r1, fp
 800ae50:	f7f5 f9f6 	bl	8000240 <__aeabi_dsub>
 800ae54:	e6d7      	b.n	800ac06 <__ieee754_log+0x26>
 800ae56:	a322      	add	r3, pc, #136	; (adr r3, 800aee0 <__ieee754_log+0x300>)
 800ae58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae60:	f7f5 fba6 	bl	80005b0 <__aeabi_dmul>
 800ae64:	a320      	add	r3, pc, #128	; (adr r3, 800aee8 <__ieee754_log+0x308>)
 800ae66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae6a:	4604      	mov	r4, r0
 800ae6c:	460d      	mov	r5, r1
 800ae6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae72:	f7f5 fb9d 	bl	80005b0 <__aeabi_dmul>
 800ae76:	4642      	mov	r2, r8
 800ae78:	464b      	mov	r3, r9
 800ae7a:	f7f5 f9e3 	bl	8000244 <__adddf3>
 800ae7e:	4602      	mov	r2, r0
 800ae80:	460b      	mov	r3, r1
 800ae82:	4630      	mov	r0, r6
 800ae84:	4639      	mov	r1, r7
 800ae86:	f7f5 f9db 	bl	8000240 <__aeabi_dsub>
 800ae8a:	4652      	mov	r2, sl
 800ae8c:	465b      	mov	r3, fp
 800ae8e:	f7f5 f9d7 	bl	8000240 <__aeabi_dsub>
 800ae92:	4602      	mov	r2, r0
 800ae94:	460b      	mov	r3, r1
 800ae96:	4620      	mov	r0, r4
 800ae98:	4629      	mov	r1, r5
 800ae9a:	e7d9      	b.n	800ae50 <__ieee754_log+0x270>
 800ae9c:	4602      	mov	r2, r0
 800ae9e:	460b      	mov	r3, r1
 800aea0:	4650      	mov	r0, sl
 800aea2:	4659      	mov	r1, fp
 800aea4:	f7f5 f9cc 	bl	8000240 <__aeabi_dsub>
 800aea8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aeac:	f7f5 fb80 	bl	80005b0 <__aeabi_dmul>
 800aeb0:	4606      	mov	r6, r0
 800aeb2:	460f      	mov	r7, r1
 800aeb4:	2c00      	cmp	r4, #0
 800aeb6:	f43f af23 	beq.w	800ad00 <__ieee754_log+0x120>
 800aeba:	a309      	add	r3, pc, #36	; (adr r3, 800aee0 <__ieee754_log+0x300>)
 800aebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aec0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aec4:	f7f5 fb74 	bl	80005b0 <__aeabi_dmul>
 800aec8:	a307      	add	r3, pc, #28	; (adr r3, 800aee8 <__ieee754_log+0x308>)
 800aeca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aece:	4604      	mov	r4, r0
 800aed0:	460d      	mov	r5, r1
 800aed2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aed6:	e727      	b.n	800ad28 <__ieee754_log+0x148>
 800aed8:	2000      	movs	r0, #0
 800aeda:	2100      	movs	r1, #0
 800aedc:	e693      	b.n	800ac06 <__ieee754_log+0x26>
 800aede:	bf00      	nop
 800aee0:	fee00000 	.word	0xfee00000
 800aee4:	3fe62e42 	.word	0x3fe62e42
 800aee8:	35793c76 	.word	0x35793c76
 800aeec:	3dea39ef 	.word	0x3dea39ef
 800aef0:	55555555 	.word	0x55555555
 800aef4:	3fd55555 	.word	0x3fd55555
 800aef8:	df3e5244 	.word	0xdf3e5244
 800aefc:	3fc2f112 	.word	0x3fc2f112
 800af00:	96cb03de 	.word	0x96cb03de
 800af04:	3fc74664 	.word	0x3fc74664
 800af08:	94229359 	.word	0x94229359
 800af0c:	3fd24924 	.word	0x3fd24924
 800af10:	55555593 	.word	0x55555593
 800af14:	3fe55555 	.word	0x3fe55555
 800af18:	d078c69f 	.word	0xd078c69f
 800af1c:	3fc39a09 	.word	0x3fc39a09
 800af20:	1d8e78af 	.word	0x1d8e78af
 800af24:	3fcc71c5 	.word	0x3fcc71c5
 800af28:	9997fa04 	.word	0x9997fa04
 800af2c:	3fd99999 	.word	0x3fd99999
 800af30:	c3500000 	.word	0xc3500000
 800af34:	43500000 	.word	0x43500000
 800af38:	7fefffff 	.word	0x7fefffff
 800af3c:	3ff00000 	.word	0x3ff00000
 800af40:	3fe00000 	.word	0x3fe00000

0800af44 <_init>:
 800af44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af46:	bf00      	nop
 800af48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af4a:	bc08      	pop	{r3}
 800af4c:	469e      	mov	lr, r3
 800af4e:	4770      	bx	lr

0800af50 <_fini>:
 800af50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af52:	bf00      	nop
 800af54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af56:	bc08      	pop	{r3}
 800af58:	469e      	mov	lr, r3
 800af5a:	4770      	bx	lr
