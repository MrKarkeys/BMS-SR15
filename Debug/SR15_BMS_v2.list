
SR15_BMS_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab04  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c8  0800acec  0800acec  0001acec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b1b4  0800b1b4  00020214  2**0
                  CONTENTS
  4 .ARM          00000008  0800b1b4  0800b1b4  0001b1b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b1bc  0800b1bc  00020214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b1bc  0800b1bc  0001b1bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b1c0  0800b1c0  0001b1c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  0800b1c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000168c  20000214  0800b3d8  00020214  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200018a0  0800b3d8  000218a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002023d  2**0
                  CONTENTS, READONLY
 13 .debug_info   000170dd  00000000  00000000  00020280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004816  00000000  00000000  0003735d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016e8  00000000  00000000  0003bb78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001155  00000000  00000000  0003d260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024104  00000000  00000000  0003e3b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e9a0  00000000  00000000  000624b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bf22e  00000000  00000000  00080e59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006698  00000000  00000000  00140088  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  00146720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000214 	.word	0x20000214
 8000204:	00000000 	.word	0x00000000
 8000208:	0800acd4 	.word	0x0800acd4

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000218 	.word	0x20000218
 8000224:	0800acd4 	.word	0x0800acd4

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2f>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b18:	bf24      	itt	cs
 8000b1a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b1e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b22:	d90d      	bls.n	8000b40 <__aeabi_d2f+0x30>
 8000b24:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b28:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b2c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b30:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b34:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b38:	bf08      	it	eq
 8000b3a:	f020 0001 	biceq.w	r0, r0, #1
 8000b3e:	4770      	bx	lr
 8000b40:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b44:	d121      	bne.n	8000b8a <__aeabi_d2f+0x7a>
 8000b46:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b4a:	bfbc      	itt	lt
 8000b4c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	4770      	bxlt	lr
 8000b52:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b56:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b5a:	f1c2 0218 	rsb	r2, r2, #24
 8000b5e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b62:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b66:	fa20 f002 	lsr.w	r0, r0, r2
 8000b6a:	bf18      	it	ne
 8000b6c:	f040 0001 	orrne.w	r0, r0, #1
 8000b70:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b74:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b78:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b7c:	ea40 000c 	orr.w	r0, r0, ip
 8000b80:	fa23 f302 	lsr.w	r3, r3, r2
 8000b84:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b88:	e7cc      	b.n	8000b24 <__aeabi_d2f+0x14>
 8000b8a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b8e:	d107      	bne.n	8000ba0 <__aeabi_d2f+0x90>
 8000b90:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b94:	bf1e      	ittt	ne
 8000b96:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b9a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b9e:	4770      	bxne	lr
 8000ba0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ba4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ba8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__aeabi_frsub>:
 8000bb0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bb4:	e002      	b.n	8000bbc <__addsf3>
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_fsub>:
 8000bb8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bbc <__addsf3>:
 8000bbc:	0042      	lsls	r2, r0, #1
 8000bbe:	bf1f      	itttt	ne
 8000bc0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bc4:	ea92 0f03 	teqne	r2, r3
 8000bc8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bcc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bd0:	d06a      	beq.n	8000ca8 <__addsf3+0xec>
 8000bd2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bd6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bda:	bfc1      	itttt	gt
 8000bdc:	18d2      	addgt	r2, r2, r3
 8000bde:	4041      	eorgt	r1, r0
 8000be0:	4048      	eorgt	r0, r1
 8000be2:	4041      	eorgt	r1, r0
 8000be4:	bfb8      	it	lt
 8000be6:	425b      	neglt	r3, r3
 8000be8:	2b19      	cmp	r3, #25
 8000bea:	bf88      	it	hi
 8000bec:	4770      	bxhi	lr
 8000bee:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bf2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bfa:	bf18      	it	ne
 8000bfc:	4240      	negne	r0, r0
 8000bfe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c02:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c06:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c0a:	bf18      	it	ne
 8000c0c:	4249      	negne	r1, r1
 8000c0e:	ea92 0f03 	teq	r2, r3
 8000c12:	d03f      	beq.n	8000c94 <__addsf3+0xd8>
 8000c14:	f1a2 0201 	sub.w	r2, r2, #1
 8000c18:	fa41 fc03 	asr.w	ip, r1, r3
 8000c1c:	eb10 000c 	adds.w	r0, r0, ip
 8000c20:	f1c3 0320 	rsb	r3, r3, #32
 8000c24:	fa01 f103 	lsl.w	r1, r1, r3
 8000c28:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c2c:	d502      	bpl.n	8000c34 <__addsf3+0x78>
 8000c2e:	4249      	negs	r1, r1
 8000c30:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c34:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c38:	d313      	bcc.n	8000c62 <__addsf3+0xa6>
 8000c3a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c3e:	d306      	bcc.n	8000c4e <__addsf3+0x92>
 8000c40:	0840      	lsrs	r0, r0, #1
 8000c42:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c46:	f102 0201 	add.w	r2, r2, #1
 8000c4a:	2afe      	cmp	r2, #254	; 0xfe
 8000c4c:	d251      	bcs.n	8000cf2 <__addsf3+0x136>
 8000c4e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c52:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c56:	bf08      	it	eq
 8000c58:	f020 0001 	biceq.w	r0, r0, #1
 8000c5c:	ea40 0003 	orr.w	r0, r0, r3
 8000c60:	4770      	bx	lr
 8000c62:	0049      	lsls	r1, r1, #1
 8000c64:	eb40 0000 	adc.w	r0, r0, r0
 8000c68:	3a01      	subs	r2, #1
 8000c6a:	bf28      	it	cs
 8000c6c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c70:	d2ed      	bcs.n	8000c4e <__addsf3+0x92>
 8000c72:	fab0 fc80 	clz	ip, r0
 8000c76:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c7a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c7e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c82:	bfaa      	itet	ge
 8000c84:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c88:	4252      	neglt	r2, r2
 8000c8a:	4318      	orrge	r0, r3
 8000c8c:	bfbc      	itt	lt
 8000c8e:	40d0      	lsrlt	r0, r2
 8000c90:	4318      	orrlt	r0, r3
 8000c92:	4770      	bx	lr
 8000c94:	f092 0f00 	teq	r2, #0
 8000c98:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c9c:	bf06      	itte	eq
 8000c9e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000ca2:	3201      	addeq	r2, #1
 8000ca4:	3b01      	subne	r3, #1
 8000ca6:	e7b5      	b.n	8000c14 <__addsf3+0x58>
 8000ca8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cac:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cb0:	bf18      	it	ne
 8000cb2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cb6:	d021      	beq.n	8000cfc <__addsf3+0x140>
 8000cb8:	ea92 0f03 	teq	r2, r3
 8000cbc:	d004      	beq.n	8000cc8 <__addsf3+0x10c>
 8000cbe:	f092 0f00 	teq	r2, #0
 8000cc2:	bf08      	it	eq
 8000cc4:	4608      	moveq	r0, r1
 8000cc6:	4770      	bx	lr
 8000cc8:	ea90 0f01 	teq	r0, r1
 8000ccc:	bf1c      	itt	ne
 8000cce:	2000      	movne	r0, #0
 8000cd0:	4770      	bxne	lr
 8000cd2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cd6:	d104      	bne.n	8000ce2 <__addsf3+0x126>
 8000cd8:	0040      	lsls	r0, r0, #1
 8000cda:	bf28      	it	cs
 8000cdc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ce0:	4770      	bx	lr
 8000ce2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ce6:	bf3c      	itt	cc
 8000ce8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cec:	4770      	bxcc	lr
 8000cee:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cf2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cf6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cfa:	4770      	bx	lr
 8000cfc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d00:	bf16      	itet	ne
 8000d02:	4608      	movne	r0, r1
 8000d04:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d08:	4601      	movne	r1, r0
 8000d0a:	0242      	lsls	r2, r0, #9
 8000d0c:	bf06      	itte	eq
 8000d0e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d12:	ea90 0f01 	teqeq	r0, r1
 8000d16:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d1a:	4770      	bx	lr

08000d1c <__aeabi_ui2f>:
 8000d1c:	f04f 0300 	mov.w	r3, #0
 8000d20:	e004      	b.n	8000d2c <__aeabi_i2f+0x8>
 8000d22:	bf00      	nop

08000d24 <__aeabi_i2f>:
 8000d24:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d28:	bf48      	it	mi
 8000d2a:	4240      	negmi	r0, r0
 8000d2c:	ea5f 0c00 	movs.w	ip, r0
 8000d30:	bf08      	it	eq
 8000d32:	4770      	bxeq	lr
 8000d34:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d38:	4601      	mov	r1, r0
 8000d3a:	f04f 0000 	mov.w	r0, #0
 8000d3e:	e01c      	b.n	8000d7a <__aeabi_l2f+0x2a>

08000d40 <__aeabi_ul2f>:
 8000d40:	ea50 0201 	orrs.w	r2, r0, r1
 8000d44:	bf08      	it	eq
 8000d46:	4770      	bxeq	lr
 8000d48:	f04f 0300 	mov.w	r3, #0
 8000d4c:	e00a      	b.n	8000d64 <__aeabi_l2f+0x14>
 8000d4e:	bf00      	nop

08000d50 <__aeabi_l2f>:
 8000d50:	ea50 0201 	orrs.w	r2, r0, r1
 8000d54:	bf08      	it	eq
 8000d56:	4770      	bxeq	lr
 8000d58:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d5c:	d502      	bpl.n	8000d64 <__aeabi_l2f+0x14>
 8000d5e:	4240      	negs	r0, r0
 8000d60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d64:	ea5f 0c01 	movs.w	ip, r1
 8000d68:	bf02      	ittt	eq
 8000d6a:	4684      	moveq	ip, r0
 8000d6c:	4601      	moveq	r1, r0
 8000d6e:	2000      	moveq	r0, #0
 8000d70:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d74:	bf08      	it	eq
 8000d76:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d7a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d7e:	fabc f28c 	clz	r2, ip
 8000d82:	3a08      	subs	r2, #8
 8000d84:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d88:	db10      	blt.n	8000dac <__aeabi_l2f+0x5c>
 8000d8a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d8e:	4463      	add	r3, ip
 8000d90:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d94:	f1c2 0220 	rsb	r2, r2, #32
 8000d98:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d9c:	fa20 f202 	lsr.w	r2, r0, r2
 8000da0:	eb43 0002 	adc.w	r0, r3, r2
 8000da4:	bf08      	it	eq
 8000da6:	f020 0001 	biceq.w	r0, r0, #1
 8000daa:	4770      	bx	lr
 8000dac:	f102 0220 	add.w	r2, r2, #32
 8000db0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000db4:	f1c2 0220 	rsb	r2, r2, #32
 8000db8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dbc:	fa21 f202 	lsr.w	r2, r1, r2
 8000dc0:	eb43 0002 	adc.w	r0, r3, r2
 8000dc4:	bf08      	it	eq
 8000dc6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dca:	4770      	bx	lr

08000dcc <__aeabi_fmul>:
 8000dcc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000dd0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dd4:	bf1e      	ittt	ne
 8000dd6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dda:	ea92 0f0c 	teqne	r2, ip
 8000dde:	ea93 0f0c 	teqne	r3, ip
 8000de2:	d06f      	beq.n	8000ec4 <__aeabi_fmul+0xf8>
 8000de4:	441a      	add	r2, r3
 8000de6:	ea80 0c01 	eor.w	ip, r0, r1
 8000dea:	0240      	lsls	r0, r0, #9
 8000dec:	bf18      	it	ne
 8000dee:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000df2:	d01e      	beq.n	8000e32 <__aeabi_fmul+0x66>
 8000df4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000df8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dfc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e00:	fba0 3101 	umull	r3, r1, r0, r1
 8000e04:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e08:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e0c:	bf3e      	ittt	cc
 8000e0e:	0049      	lslcc	r1, r1, #1
 8000e10:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e14:	005b      	lslcc	r3, r3, #1
 8000e16:	ea40 0001 	orr.w	r0, r0, r1
 8000e1a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e1e:	2afd      	cmp	r2, #253	; 0xfd
 8000e20:	d81d      	bhi.n	8000e5e <__aeabi_fmul+0x92>
 8000e22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e26:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e2a:	bf08      	it	eq
 8000e2c:	f020 0001 	biceq.w	r0, r0, #1
 8000e30:	4770      	bx	lr
 8000e32:	f090 0f00 	teq	r0, #0
 8000e36:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e3a:	bf08      	it	eq
 8000e3c:	0249      	lsleq	r1, r1, #9
 8000e3e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e42:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e46:	3a7f      	subs	r2, #127	; 0x7f
 8000e48:	bfc2      	ittt	gt
 8000e4a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e4e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e52:	4770      	bxgt	lr
 8000e54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e58:	f04f 0300 	mov.w	r3, #0
 8000e5c:	3a01      	subs	r2, #1
 8000e5e:	dc5d      	bgt.n	8000f1c <__aeabi_fmul+0x150>
 8000e60:	f112 0f19 	cmn.w	r2, #25
 8000e64:	bfdc      	itt	le
 8000e66:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e6a:	4770      	bxle	lr
 8000e6c:	f1c2 0200 	rsb	r2, r2, #0
 8000e70:	0041      	lsls	r1, r0, #1
 8000e72:	fa21 f102 	lsr.w	r1, r1, r2
 8000e76:	f1c2 0220 	rsb	r2, r2, #32
 8000e7a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e7e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e82:	f140 0000 	adc.w	r0, r0, #0
 8000e86:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e8a:	bf08      	it	eq
 8000e8c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e90:	4770      	bx	lr
 8000e92:	f092 0f00 	teq	r2, #0
 8000e96:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e9a:	bf02      	ittt	eq
 8000e9c:	0040      	lsleq	r0, r0, #1
 8000e9e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ea2:	3a01      	subeq	r2, #1
 8000ea4:	d0f9      	beq.n	8000e9a <__aeabi_fmul+0xce>
 8000ea6:	ea40 000c 	orr.w	r0, r0, ip
 8000eaa:	f093 0f00 	teq	r3, #0
 8000eae:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000eb2:	bf02      	ittt	eq
 8000eb4:	0049      	lsleq	r1, r1, #1
 8000eb6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eba:	3b01      	subeq	r3, #1
 8000ebc:	d0f9      	beq.n	8000eb2 <__aeabi_fmul+0xe6>
 8000ebe:	ea41 010c 	orr.w	r1, r1, ip
 8000ec2:	e78f      	b.n	8000de4 <__aeabi_fmul+0x18>
 8000ec4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ec8:	ea92 0f0c 	teq	r2, ip
 8000ecc:	bf18      	it	ne
 8000ece:	ea93 0f0c 	teqne	r3, ip
 8000ed2:	d00a      	beq.n	8000eea <__aeabi_fmul+0x11e>
 8000ed4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ed8:	bf18      	it	ne
 8000eda:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ede:	d1d8      	bne.n	8000e92 <__aeabi_fmul+0xc6>
 8000ee0:	ea80 0001 	eor.w	r0, r0, r1
 8000ee4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ee8:	4770      	bx	lr
 8000eea:	f090 0f00 	teq	r0, #0
 8000eee:	bf17      	itett	ne
 8000ef0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ef4:	4608      	moveq	r0, r1
 8000ef6:	f091 0f00 	teqne	r1, #0
 8000efa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000efe:	d014      	beq.n	8000f2a <__aeabi_fmul+0x15e>
 8000f00:	ea92 0f0c 	teq	r2, ip
 8000f04:	d101      	bne.n	8000f0a <__aeabi_fmul+0x13e>
 8000f06:	0242      	lsls	r2, r0, #9
 8000f08:	d10f      	bne.n	8000f2a <__aeabi_fmul+0x15e>
 8000f0a:	ea93 0f0c 	teq	r3, ip
 8000f0e:	d103      	bne.n	8000f18 <__aeabi_fmul+0x14c>
 8000f10:	024b      	lsls	r3, r1, #9
 8000f12:	bf18      	it	ne
 8000f14:	4608      	movne	r0, r1
 8000f16:	d108      	bne.n	8000f2a <__aeabi_fmul+0x15e>
 8000f18:	ea80 0001 	eor.w	r0, r0, r1
 8000f1c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f28:	4770      	bx	lr
 8000f2a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f2e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f32:	4770      	bx	lr

08000f34 <__aeabi_fdiv>:
 8000f34:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f38:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f3c:	bf1e      	ittt	ne
 8000f3e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f42:	ea92 0f0c 	teqne	r2, ip
 8000f46:	ea93 0f0c 	teqne	r3, ip
 8000f4a:	d069      	beq.n	8001020 <__aeabi_fdiv+0xec>
 8000f4c:	eba2 0203 	sub.w	r2, r2, r3
 8000f50:	ea80 0c01 	eor.w	ip, r0, r1
 8000f54:	0249      	lsls	r1, r1, #9
 8000f56:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f5a:	d037      	beq.n	8000fcc <__aeabi_fdiv+0x98>
 8000f5c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f60:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f64:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f68:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f6c:	428b      	cmp	r3, r1
 8000f6e:	bf38      	it	cc
 8000f70:	005b      	lslcc	r3, r3, #1
 8000f72:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f76:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f7a:	428b      	cmp	r3, r1
 8000f7c:	bf24      	itt	cs
 8000f7e:	1a5b      	subcs	r3, r3, r1
 8000f80:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f84:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f88:	bf24      	itt	cs
 8000f8a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f8e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f92:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f96:	bf24      	itt	cs
 8000f98:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f9c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000fa0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000fa4:	bf24      	itt	cs
 8000fa6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000faa:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000fae:	011b      	lsls	r3, r3, #4
 8000fb0:	bf18      	it	ne
 8000fb2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fb6:	d1e0      	bne.n	8000f7a <__aeabi_fdiv+0x46>
 8000fb8:	2afd      	cmp	r2, #253	; 0xfd
 8000fba:	f63f af50 	bhi.w	8000e5e <__aeabi_fmul+0x92>
 8000fbe:	428b      	cmp	r3, r1
 8000fc0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fc4:	bf08      	it	eq
 8000fc6:	f020 0001 	biceq.w	r0, r0, #1
 8000fca:	4770      	bx	lr
 8000fcc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fd0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fd4:	327f      	adds	r2, #127	; 0x7f
 8000fd6:	bfc2      	ittt	gt
 8000fd8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fdc:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fe0:	4770      	bxgt	lr
 8000fe2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fe6:	f04f 0300 	mov.w	r3, #0
 8000fea:	3a01      	subs	r2, #1
 8000fec:	e737      	b.n	8000e5e <__aeabi_fmul+0x92>
 8000fee:	f092 0f00 	teq	r2, #0
 8000ff2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ff6:	bf02      	ittt	eq
 8000ff8:	0040      	lsleq	r0, r0, #1
 8000ffa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ffe:	3a01      	subeq	r2, #1
 8001000:	d0f9      	beq.n	8000ff6 <__aeabi_fdiv+0xc2>
 8001002:	ea40 000c 	orr.w	r0, r0, ip
 8001006:	f093 0f00 	teq	r3, #0
 800100a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800100e:	bf02      	ittt	eq
 8001010:	0049      	lsleq	r1, r1, #1
 8001012:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8001016:	3b01      	subeq	r3, #1
 8001018:	d0f9      	beq.n	800100e <__aeabi_fdiv+0xda>
 800101a:	ea41 010c 	orr.w	r1, r1, ip
 800101e:	e795      	b.n	8000f4c <__aeabi_fdiv+0x18>
 8001020:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001024:	ea92 0f0c 	teq	r2, ip
 8001028:	d108      	bne.n	800103c <__aeabi_fdiv+0x108>
 800102a:	0242      	lsls	r2, r0, #9
 800102c:	f47f af7d 	bne.w	8000f2a <__aeabi_fmul+0x15e>
 8001030:	ea93 0f0c 	teq	r3, ip
 8001034:	f47f af70 	bne.w	8000f18 <__aeabi_fmul+0x14c>
 8001038:	4608      	mov	r0, r1
 800103a:	e776      	b.n	8000f2a <__aeabi_fmul+0x15e>
 800103c:	ea93 0f0c 	teq	r3, ip
 8001040:	d104      	bne.n	800104c <__aeabi_fdiv+0x118>
 8001042:	024b      	lsls	r3, r1, #9
 8001044:	f43f af4c 	beq.w	8000ee0 <__aeabi_fmul+0x114>
 8001048:	4608      	mov	r0, r1
 800104a:	e76e      	b.n	8000f2a <__aeabi_fmul+0x15e>
 800104c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001050:	bf18      	it	ne
 8001052:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001056:	d1ca      	bne.n	8000fee <__aeabi_fdiv+0xba>
 8001058:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800105c:	f47f af5c 	bne.w	8000f18 <__aeabi_fmul+0x14c>
 8001060:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001064:	f47f af3c 	bne.w	8000ee0 <__aeabi_fmul+0x114>
 8001068:	e75f      	b.n	8000f2a <__aeabi_fmul+0x15e>
 800106a:	bf00      	nop

0800106c <__aeabi_f2uiz>:
 800106c:	0042      	lsls	r2, r0, #1
 800106e:	d20e      	bcs.n	800108e <__aeabi_f2uiz+0x22>
 8001070:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001074:	d30b      	bcc.n	800108e <__aeabi_f2uiz+0x22>
 8001076:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800107a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800107e:	d409      	bmi.n	8001094 <__aeabi_f2uiz+0x28>
 8001080:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001084:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001088:	fa23 f002 	lsr.w	r0, r3, r2
 800108c:	4770      	bx	lr
 800108e:	f04f 0000 	mov.w	r0, #0
 8001092:	4770      	bx	lr
 8001094:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001098:	d101      	bne.n	800109e <__aeabi_f2uiz+0x32>
 800109a:	0242      	lsls	r2, r0, #9
 800109c:	d102      	bne.n	80010a4 <__aeabi_f2uiz+0x38>
 800109e:	f04f 30ff 	mov.w	r0, #4294967295
 80010a2:	4770      	bx	lr
 80010a4:	f04f 0000 	mov.w	r0, #0
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop

080010ac <__aeabi_uldivmod>:
 80010ac:	b953      	cbnz	r3, 80010c4 <__aeabi_uldivmod+0x18>
 80010ae:	b94a      	cbnz	r2, 80010c4 <__aeabi_uldivmod+0x18>
 80010b0:	2900      	cmp	r1, #0
 80010b2:	bf08      	it	eq
 80010b4:	2800      	cmpeq	r0, #0
 80010b6:	bf1c      	itt	ne
 80010b8:	f04f 31ff 	movne.w	r1, #4294967295
 80010bc:	f04f 30ff 	movne.w	r0, #4294967295
 80010c0:	f000 b972 	b.w	80013a8 <__aeabi_idiv0>
 80010c4:	f1ad 0c08 	sub.w	ip, sp, #8
 80010c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80010cc:	f000 f806 	bl	80010dc <__udivmoddi4>
 80010d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010d8:	b004      	add	sp, #16
 80010da:	4770      	bx	lr

080010dc <__udivmoddi4>:
 80010dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010e0:	9e08      	ldr	r6, [sp, #32]
 80010e2:	460d      	mov	r5, r1
 80010e4:	4604      	mov	r4, r0
 80010e6:	468e      	mov	lr, r1
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d14c      	bne.n	8001186 <__udivmoddi4+0xaa>
 80010ec:	428a      	cmp	r2, r1
 80010ee:	4694      	mov	ip, r2
 80010f0:	d967      	bls.n	80011c2 <__udivmoddi4+0xe6>
 80010f2:	fab2 f382 	clz	r3, r2
 80010f6:	b153      	cbz	r3, 800110e <__udivmoddi4+0x32>
 80010f8:	fa02 fc03 	lsl.w	ip, r2, r3
 80010fc:	f1c3 0220 	rsb	r2, r3, #32
 8001100:	fa01 fe03 	lsl.w	lr, r1, r3
 8001104:	fa20 f202 	lsr.w	r2, r0, r2
 8001108:	ea42 0e0e 	orr.w	lr, r2, lr
 800110c:	409c      	lsls	r4, r3
 800110e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001112:	fbbe f1f7 	udiv	r1, lr, r7
 8001116:	fa1f f58c 	uxth.w	r5, ip
 800111a:	fb07 ee11 	mls	lr, r7, r1, lr
 800111e:	fb01 f005 	mul.w	r0, r1, r5
 8001122:	0c22      	lsrs	r2, r4, #16
 8001124:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8001128:	4290      	cmp	r0, r2
 800112a:	d90a      	bls.n	8001142 <__udivmoddi4+0x66>
 800112c:	eb1c 0202 	adds.w	r2, ip, r2
 8001130:	f101 3eff 	add.w	lr, r1, #4294967295
 8001134:	f080 8119 	bcs.w	800136a <__udivmoddi4+0x28e>
 8001138:	4290      	cmp	r0, r2
 800113a:	f240 8116 	bls.w	800136a <__udivmoddi4+0x28e>
 800113e:	3902      	subs	r1, #2
 8001140:	4462      	add	r2, ip
 8001142:	1a12      	subs	r2, r2, r0
 8001144:	fbb2 f0f7 	udiv	r0, r2, r7
 8001148:	fb07 2210 	mls	r2, r7, r0, r2
 800114c:	fb00 f505 	mul.w	r5, r0, r5
 8001150:	b2a4      	uxth	r4, r4
 8001152:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001156:	42a5      	cmp	r5, r4
 8001158:	d90a      	bls.n	8001170 <__udivmoddi4+0x94>
 800115a:	eb1c 0404 	adds.w	r4, ip, r4
 800115e:	f100 32ff 	add.w	r2, r0, #4294967295
 8001162:	f080 8104 	bcs.w	800136e <__udivmoddi4+0x292>
 8001166:	42a5      	cmp	r5, r4
 8001168:	f240 8101 	bls.w	800136e <__udivmoddi4+0x292>
 800116c:	4464      	add	r4, ip
 800116e:	3802      	subs	r0, #2
 8001170:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8001174:	2100      	movs	r1, #0
 8001176:	1b64      	subs	r4, r4, r5
 8001178:	b11e      	cbz	r6, 8001182 <__udivmoddi4+0xa6>
 800117a:	40dc      	lsrs	r4, r3
 800117c:	2300      	movs	r3, #0
 800117e:	e9c6 4300 	strd	r4, r3, [r6]
 8001182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001186:	428b      	cmp	r3, r1
 8001188:	d908      	bls.n	800119c <__udivmoddi4+0xc0>
 800118a:	2e00      	cmp	r6, #0
 800118c:	f000 80ea 	beq.w	8001364 <__udivmoddi4+0x288>
 8001190:	2100      	movs	r1, #0
 8001192:	e9c6 0500 	strd	r0, r5, [r6]
 8001196:	4608      	mov	r0, r1
 8001198:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800119c:	fab3 f183 	clz	r1, r3
 80011a0:	2900      	cmp	r1, #0
 80011a2:	d148      	bne.n	8001236 <__udivmoddi4+0x15a>
 80011a4:	42ab      	cmp	r3, r5
 80011a6:	d302      	bcc.n	80011ae <__udivmoddi4+0xd2>
 80011a8:	4282      	cmp	r2, r0
 80011aa:	f200 80f8 	bhi.w	800139e <__udivmoddi4+0x2c2>
 80011ae:	1a84      	subs	r4, r0, r2
 80011b0:	eb65 0203 	sbc.w	r2, r5, r3
 80011b4:	2001      	movs	r0, #1
 80011b6:	4696      	mov	lr, r2
 80011b8:	2e00      	cmp	r6, #0
 80011ba:	d0e2      	beq.n	8001182 <__udivmoddi4+0xa6>
 80011bc:	e9c6 4e00 	strd	r4, lr, [r6]
 80011c0:	e7df      	b.n	8001182 <__udivmoddi4+0xa6>
 80011c2:	b902      	cbnz	r2, 80011c6 <__udivmoddi4+0xea>
 80011c4:	deff      	udf	#255	; 0xff
 80011c6:	fab2 f382 	clz	r3, r2
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	f040 808e 	bne.w	80012ec <__udivmoddi4+0x210>
 80011d0:	1a88      	subs	r0, r1, r2
 80011d2:	2101      	movs	r1, #1
 80011d4:	0c17      	lsrs	r7, r2, #16
 80011d6:	fa1f fe82 	uxth.w	lr, r2
 80011da:	fbb0 f5f7 	udiv	r5, r0, r7
 80011de:	fb07 0015 	mls	r0, r7, r5, r0
 80011e2:	0c22      	lsrs	r2, r4, #16
 80011e4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80011e8:	fb0e f005 	mul.w	r0, lr, r5
 80011ec:	4290      	cmp	r0, r2
 80011ee:	d908      	bls.n	8001202 <__udivmoddi4+0x126>
 80011f0:	eb1c 0202 	adds.w	r2, ip, r2
 80011f4:	f105 38ff 	add.w	r8, r5, #4294967295
 80011f8:	d202      	bcs.n	8001200 <__udivmoddi4+0x124>
 80011fa:	4290      	cmp	r0, r2
 80011fc:	f200 80cc 	bhi.w	8001398 <__udivmoddi4+0x2bc>
 8001200:	4645      	mov	r5, r8
 8001202:	1a12      	subs	r2, r2, r0
 8001204:	fbb2 f0f7 	udiv	r0, r2, r7
 8001208:	fb07 2210 	mls	r2, r7, r0, r2
 800120c:	fb0e fe00 	mul.w	lr, lr, r0
 8001210:	b2a4      	uxth	r4, r4
 8001212:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001216:	45a6      	cmp	lr, r4
 8001218:	d908      	bls.n	800122c <__udivmoddi4+0x150>
 800121a:	eb1c 0404 	adds.w	r4, ip, r4
 800121e:	f100 32ff 	add.w	r2, r0, #4294967295
 8001222:	d202      	bcs.n	800122a <__udivmoddi4+0x14e>
 8001224:	45a6      	cmp	lr, r4
 8001226:	f200 80b4 	bhi.w	8001392 <__udivmoddi4+0x2b6>
 800122a:	4610      	mov	r0, r2
 800122c:	eba4 040e 	sub.w	r4, r4, lr
 8001230:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8001234:	e7a0      	b.n	8001178 <__udivmoddi4+0x9c>
 8001236:	f1c1 0720 	rsb	r7, r1, #32
 800123a:	408b      	lsls	r3, r1
 800123c:	fa22 fc07 	lsr.w	ip, r2, r7
 8001240:	ea4c 0c03 	orr.w	ip, ip, r3
 8001244:	fa25 fa07 	lsr.w	sl, r5, r7
 8001248:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800124c:	fbba f8f9 	udiv	r8, sl, r9
 8001250:	408d      	lsls	r5, r1
 8001252:	fa20 f307 	lsr.w	r3, r0, r7
 8001256:	fb09 aa18 	mls	sl, r9, r8, sl
 800125a:	fa1f fe8c 	uxth.w	lr, ip
 800125e:	432b      	orrs	r3, r5
 8001260:	fa00 f501 	lsl.w	r5, r0, r1
 8001264:	fb08 f00e 	mul.w	r0, r8, lr
 8001268:	0c1c      	lsrs	r4, r3, #16
 800126a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800126e:	42a0      	cmp	r0, r4
 8001270:	fa02 f201 	lsl.w	r2, r2, r1
 8001274:	d90b      	bls.n	800128e <__udivmoddi4+0x1b2>
 8001276:	eb1c 0404 	adds.w	r4, ip, r4
 800127a:	f108 3aff 	add.w	sl, r8, #4294967295
 800127e:	f080 8086 	bcs.w	800138e <__udivmoddi4+0x2b2>
 8001282:	42a0      	cmp	r0, r4
 8001284:	f240 8083 	bls.w	800138e <__udivmoddi4+0x2b2>
 8001288:	f1a8 0802 	sub.w	r8, r8, #2
 800128c:	4464      	add	r4, ip
 800128e:	1a24      	subs	r4, r4, r0
 8001290:	b298      	uxth	r0, r3
 8001292:	fbb4 f3f9 	udiv	r3, r4, r9
 8001296:	fb09 4413 	mls	r4, r9, r3, r4
 800129a:	fb03 fe0e 	mul.w	lr, r3, lr
 800129e:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 80012a2:	45a6      	cmp	lr, r4
 80012a4:	d908      	bls.n	80012b8 <__udivmoddi4+0x1dc>
 80012a6:	eb1c 0404 	adds.w	r4, ip, r4
 80012aa:	f103 30ff 	add.w	r0, r3, #4294967295
 80012ae:	d26a      	bcs.n	8001386 <__udivmoddi4+0x2aa>
 80012b0:	45a6      	cmp	lr, r4
 80012b2:	d968      	bls.n	8001386 <__udivmoddi4+0x2aa>
 80012b4:	3b02      	subs	r3, #2
 80012b6:	4464      	add	r4, ip
 80012b8:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80012bc:	fba0 9302 	umull	r9, r3, r0, r2
 80012c0:	eba4 040e 	sub.w	r4, r4, lr
 80012c4:	429c      	cmp	r4, r3
 80012c6:	46c8      	mov	r8, r9
 80012c8:	469e      	mov	lr, r3
 80012ca:	d354      	bcc.n	8001376 <__udivmoddi4+0x29a>
 80012cc:	d051      	beq.n	8001372 <__udivmoddi4+0x296>
 80012ce:	2e00      	cmp	r6, #0
 80012d0:	d067      	beq.n	80013a2 <__udivmoddi4+0x2c6>
 80012d2:	ebb5 0308 	subs.w	r3, r5, r8
 80012d6:	eb64 040e 	sbc.w	r4, r4, lr
 80012da:	40cb      	lsrs	r3, r1
 80012dc:	fa04 f707 	lsl.w	r7, r4, r7
 80012e0:	431f      	orrs	r7, r3
 80012e2:	40cc      	lsrs	r4, r1
 80012e4:	e9c6 7400 	strd	r7, r4, [r6]
 80012e8:	2100      	movs	r1, #0
 80012ea:	e74a      	b.n	8001182 <__udivmoddi4+0xa6>
 80012ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80012f0:	f1c3 0020 	rsb	r0, r3, #32
 80012f4:	40c1      	lsrs	r1, r0
 80012f6:	409d      	lsls	r5, r3
 80012f8:	fa24 f000 	lsr.w	r0, r4, r0
 80012fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001300:	4328      	orrs	r0, r5
 8001302:	fbb1 f5f7 	udiv	r5, r1, r7
 8001306:	fb07 1115 	mls	r1, r7, r5, r1
 800130a:	fa1f fe8c 	uxth.w	lr, ip
 800130e:	0c02      	lsrs	r2, r0, #16
 8001310:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001314:	fb05 f10e 	mul.w	r1, r5, lr
 8001318:	4291      	cmp	r1, r2
 800131a:	fa04 f403 	lsl.w	r4, r4, r3
 800131e:	d908      	bls.n	8001332 <__udivmoddi4+0x256>
 8001320:	eb1c 0202 	adds.w	r2, ip, r2
 8001324:	f105 38ff 	add.w	r8, r5, #4294967295
 8001328:	d22f      	bcs.n	800138a <__udivmoddi4+0x2ae>
 800132a:	4291      	cmp	r1, r2
 800132c:	d92d      	bls.n	800138a <__udivmoddi4+0x2ae>
 800132e:	3d02      	subs	r5, #2
 8001330:	4462      	add	r2, ip
 8001332:	1a52      	subs	r2, r2, r1
 8001334:	fbb2 f1f7 	udiv	r1, r2, r7
 8001338:	fb07 2211 	mls	r2, r7, r1, r2
 800133c:	b280      	uxth	r0, r0
 800133e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8001342:	fb01 f20e 	mul.w	r2, r1, lr
 8001346:	4282      	cmp	r2, r0
 8001348:	d908      	bls.n	800135c <__udivmoddi4+0x280>
 800134a:	eb1c 0000 	adds.w	r0, ip, r0
 800134e:	f101 38ff 	add.w	r8, r1, #4294967295
 8001352:	d216      	bcs.n	8001382 <__udivmoddi4+0x2a6>
 8001354:	4282      	cmp	r2, r0
 8001356:	d914      	bls.n	8001382 <__udivmoddi4+0x2a6>
 8001358:	3902      	subs	r1, #2
 800135a:	4460      	add	r0, ip
 800135c:	1a80      	subs	r0, r0, r2
 800135e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8001362:	e73a      	b.n	80011da <__udivmoddi4+0xfe>
 8001364:	4631      	mov	r1, r6
 8001366:	4630      	mov	r0, r6
 8001368:	e70b      	b.n	8001182 <__udivmoddi4+0xa6>
 800136a:	4671      	mov	r1, lr
 800136c:	e6e9      	b.n	8001142 <__udivmoddi4+0x66>
 800136e:	4610      	mov	r0, r2
 8001370:	e6fe      	b.n	8001170 <__udivmoddi4+0x94>
 8001372:	454d      	cmp	r5, r9
 8001374:	d2ab      	bcs.n	80012ce <__udivmoddi4+0x1f2>
 8001376:	ebb9 0802 	subs.w	r8, r9, r2
 800137a:	eb63 0e0c 	sbc.w	lr, r3, ip
 800137e:	3801      	subs	r0, #1
 8001380:	e7a5      	b.n	80012ce <__udivmoddi4+0x1f2>
 8001382:	4641      	mov	r1, r8
 8001384:	e7ea      	b.n	800135c <__udivmoddi4+0x280>
 8001386:	4603      	mov	r3, r0
 8001388:	e796      	b.n	80012b8 <__udivmoddi4+0x1dc>
 800138a:	4645      	mov	r5, r8
 800138c:	e7d1      	b.n	8001332 <__udivmoddi4+0x256>
 800138e:	46d0      	mov	r8, sl
 8001390:	e77d      	b.n	800128e <__udivmoddi4+0x1b2>
 8001392:	4464      	add	r4, ip
 8001394:	3802      	subs	r0, #2
 8001396:	e749      	b.n	800122c <__udivmoddi4+0x150>
 8001398:	3d02      	subs	r5, #2
 800139a:	4462      	add	r2, ip
 800139c:	e731      	b.n	8001202 <__udivmoddi4+0x126>
 800139e:	4608      	mov	r0, r1
 80013a0:	e70a      	b.n	80011b8 <__udivmoddi4+0xdc>
 80013a2:	4631      	mov	r1, r6
 80013a4:	e6ed      	b.n	8001182 <__udivmoddi4+0xa6>
 80013a6:	bf00      	nop

080013a8 <__aeabi_idiv0>:
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop

080013ac <LTC_Set_Num_Devices>:
static const uint8_t num_aux_series_groups = 6; //Number of series groups
static uint8_t num_devices; //Keep visibility within this file
static uint8_t num_series_groups; //Number of series groups

/* Set number of LTC6813/slave devices */
void LTC_Set_Num_Devices(uint8_t num) {
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	71fb      	strb	r3, [r7, #7]
	if (num)
 80013b6:	79fb      	ldrb	r3, [r7, #7]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d002      	beq.n	80013c2 <LTC_Set_Num_Devices+0x16>
		num_devices = num; //Non-zero
 80013bc:	4a03      	ldr	r2, [pc, #12]	; (80013cc <LTC_Set_Num_Devices+0x20>)
 80013be:	79fb      	ldrb	r3, [r7, #7]
 80013c0:	7013      	strb	r3, [r2, #0]
}
 80013c2:	bf00      	nop
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bc80      	pop	{r7}
 80013ca:	4770      	bx	lr
 80013cc:	20000230 	.word	0x20000230

080013d0 <LTC_Get_Num_Devices>:

/* Get number of LTC6813/slave devices */
uint8_t LTC_Get_Num_Devices(void) {
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
	return num_devices;
 80013d4:	4b02      	ldr	r3, [pc, #8]	; (80013e0 <LTC_Get_Num_Devices+0x10>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
}
 80013d8:	4618      	mov	r0, r3
 80013da:	46bd      	mov	sp, r7
 80013dc:	bc80      	pop	{r7}
 80013de:	4770      	bx	lr
 80013e0:	20000230 	.word	0x20000230

080013e4 <LTC_Set_Num_Series_Groups>:

/* Set number of series groups per LTC6813/slave */
void LTC_Set_Num_Series_Groups(uint8_t num) {
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	71fb      	strb	r3, [r7, #7]
	if (num && (num <= 18))
 80013ee:	79fb      	ldrb	r3, [r7, #7]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d005      	beq.n	8001400 <LTC_Set_Num_Series_Groups+0x1c>
 80013f4:	79fb      	ldrb	r3, [r7, #7]
 80013f6:	2b12      	cmp	r3, #18
 80013f8:	d802      	bhi.n	8001400 <LTC_Set_Num_Series_Groups+0x1c>
		num_series_groups = num; //Non-zero and 18 or less
 80013fa:	4a04      	ldr	r2, [pc, #16]	; (800140c <LTC_Set_Num_Series_Groups+0x28>)
 80013fc:	79fb      	ldrb	r3, [r7, #7]
 80013fe:	7013      	strb	r3, [r2, #0]
}
 8001400:	bf00      	nop
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	bc80      	pop	{r7}
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	20000231 	.word	0x20000231

08001410 <LTC_Get_Num_Series_Groups>:

/* Get number of series groups per LTC6813/slave */
uint8_t LTC_Get_Num_Series_Groups(void) {
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
	return num_series_groups;
 8001414:	4b02      	ldr	r3, [pc, #8]	; (8001420 <LTC_Get_Num_Series_Groups+0x10>)
 8001416:	781b      	ldrb	r3, [r3, #0]
}
 8001418:	4618      	mov	r0, r3
 800141a:	46bd      	mov	sp, r7
 800141c:	bc80      	pop	{r7}
 800141e:	4770      	bx	lr
 8001420:	20000231 	.word	0x20000231

08001424 <LTC_Wakeup_Idle>:

/* Wake LTC up from IDLE state into READY state */
void LTC_Wakeup_Idle(void) {
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
	uint8_t hex_ff = 0xFF;
 800142a:	23ff      	movs	r3, #255	; 0xff
 800142c:	70fb      	strb	r3, [r7, #3]
	for (int i = 0; i < LTC_Get_Num_Devices(); i++) {
 800142e:	2300      	movs	r3, #0
 8001430:	607b      	str	r3, [r7, #4]
 8001432:	e00c      	b.n	800144e <LTC_Wakeup_Idle+0x2a>
		LTC_nCS_Low(); //Pull CS low
 8001434:	f001 fc28 	bl	8002c88 <LTC_nCS_Low>
		HAL_SPI_Transmit(&hspi1, &hex_ff, 1, 100); //Send byte 0xFF to wake LTC up
 8001438:	1cf9      	adds	r1, r7, #3
 800143a:	2364      	movs	r3, #100	; 0x64
 800143c:	2201      	movs	r2, #1
 800143e:	480a      	ldr	r0, [pc, #40]	; (8001468 <LTC_Wakeup_Idle+0x44>)
 8001440:	f004 fca0 	bl	8005d84 <HAL_SPI_Transmit>
		LTC_nCS_High(); //Pull CS high
 8001444:	f001 fc14 	bl	8002c70 <LTC_nCS_High>
	for (int i = 0; i < LTC_Get_Num_Devices(); i++) {
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	3301      	adds	r3, #1
 800144c:	607b      	str	r3, [r7, #4]
 800144e:	f7ff ffbf 	bl	80013d0 <LTC_Get_Num_Devices>
 8001452:	4603      	mov	r3, r0
 8001454:	461a      	mov	r2, r3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4293      	cmp	r3, r2
 800145a:	dbeb      	blt.n	8001434 <LTC_Wakeup_Idle+0x10>
	}
}
 800145c:	bf00      	nop
 800145e:	bf00      	nop
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	200002c4 	.word	0x200002c4

0800146c <LTC_Wakeup_Sleep>:

//wake up sleep
void LTC_Wakeup_Sleep(void) {
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0

	for (int i = 0; i < LTC_Get_Num_Devices(); i++) {
 8001472:	2300      	movs	r3, #0
 8001474:	607b      	str	r3, [r7, #4]
 8001476:	e00e      	b.n	8001496 <LTC_Wakeup_Sleep+0x2a>
		LTC_nCS_Low();
 8001478:	f001 fc06 	bl	8002c88 <LTC_nCS_Low>
		HAL_Delay(300);
 800147c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001480:	f001 fd8a 	bl	8002f98 <HAL_Delay>
		LTC_nCS_High();
 8001484:	f001 fbf4 	bl	8002c70 <LTC_nCS_High>
		HAL_Delay(300);
 8001488:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800148c:	f001 fd84 	bl	8002f98 <HAL_Delay>
	for (int i = 0; i < LTC_Get_Num_Devices(); i++) {
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	3301      	adds	r3, #1
 8001494:	607b      	str	r3, [r7, #4]
 8001496:	f7ff ff9b 	bl	80013d0 <LTC_Get_Num_Devices>
 800149a:	4603      	mov	r3, r0
 800149c:	461a      	mov	r2, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4293      	cmp	r3, r2
 80014a2:	dbe9      	blt.n	8001478 <LTC_Wakeup_Sleep+0xc>
	}
}
 80014a4:	bf00      	nop
 80014a6:	bf00      	nop
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
	...

080014b0 <LTC_ReadRawCellVoltages>:

/* Read and store raw cell voltages at uint8_t 2d pointer */
LTC_SPI_StatusTypeDef LTC_ReadRawCellVoltages(uint16_t *read_voltages) {
 80014b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80014b4:	b089      	sub	sp, #36	; 0x24
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]
 80014ba:	466b      	mov	r3, sp
 80014bc:	461e      	mov	r6, r3
	LTC_SPI_StatusTypeDef ret = LTC_SPI_OK;
 80014be:	2300      	movs	r3, #0
 80014c0:	77fb      	strb	r3, [r7, #31]
	LTC_SPI_StatusTypeDef hal_ret;
	const uint8_t ARR_SIZE_REG = LTC_Get_Num_Devices() * REG_LEN;
 80014c2:	f7ff ff85 	bl	80013d0 <LTC_Get_Num_Devices>
 80014c6:	4603      	mov	r3, r0
 80014c8:	461a      	mov	r2, r3
 80014ca:	2308      	movs	r3, #8
 80014cc:	fb02 f303 	mul.w	r3, r2, r3
 80014d0:	773b      	strb	r3, [r7, #28]
	uint8_t read_voltages_reg[ARR_SIZE_REG]; // Increased in size to handle multiple devices
 80014d2:	7f3b      	ldrb	r3, [r7, #28]
 80014d4:	3b01      	subs	r3, #1
 80014d6:	61bb      	str	r3, [r7, #24]
 80014d8:	7f3b      	ldrb	r3, [r7, #28]
 80014da:	2200      	movs	r2, #0
 80014dc:	4698      	mov	r8, r3
 80014de:	4691      	mov	r9, r2
 80014e0:	f04f 0200 	mov.w	r2, #0
 80014e4:	f04f 0300 	mov.w	r3, #0
 80014e8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80014ec:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80014f0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80014f4:	7f3b      	ldrb	r3, [r7, #28]
 80014f6:	2200      	movs	r2, #0
 80014f8:	461c      	mov	r4, r3
 80014fa:	4615      	mov	r5, r2
 80014fc:	f04f 0200 	mov.w	r2, #0
 8001500:	f04f 0300 	mov.w	r3, #0
 8001504:	00eb      	lsls	r3, r5, #3
 8001506:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800150a:	00e2      	lsls	r2, r4, #3
 800150c:	7f3b      	ldrb	r3, [r7, #28]
 800150e:	3307      	adds	r3, #7
 8001510:	08db      	lsrs	r3, r3, #3
 8001512:	00db      	lsls	r3, r3, #3
 8001514:	ebad 0d03 	sub.w	sp, sp, r3
 8001518:	466b      	mov	r3, sp
 800151a:	3300      	adds	r3, #0
 800151c:	617b      	str	r3, [r7, #20]

	for (uint8_t i = 0;
 800151e:	2300      	movs	r3, #0
 8001520:	77bb      	strb	r3, [r7, #30]
 8001522:	e07e      	b.n	8001622 <LTC_ReadRawCellVoltages+0x172>
			i < (LTC_Get_Num_Series_Groups() / LTC_SERIES_GROUPS_PER_RDCV);
			i++) {
		uint8_t cmd[4];
		uint16_t cmd_pec;

		cmd[0] = (0xFF & (LTC_CMD_RDCV[i] >> 8)); //RDCV Register
 8001524:	7fbb      	ldrb	r3, [r7, #30]
 8001526:	4a48      	ldr	r2, [pc, #288]	; (8001648 <LTC_ReadRawCellVoltages+0x198>)
 8001528:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800152c:	0a1b      	lsrs	r3, r3, #8
 800152e:	b29b      	uxth	r3, r3
 8001530:	b2db      	uxtb	r3, r3
 8001532:	723b      	strb	r3, [r7, #8]
		cmd[1] = (0xFF & (LTC_CMD_RDCV[i])); //RDCV Register
 8001534:	7fbb      	ldrb	r3, [r7, #30]
 8001536:	4a44      	ldr	r2, [pc, #272]	; (8001648 <LTC_ReadRawCellVoltages+0x198>)
 8001538:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800153c:	b2db      	uxtb	r3, r3
 800153e:	727b      	strb	r3, [r7, #9]
		cmd_pec = LTC_PEC15_Calc(2, cmd);
 8001540:	f107 0308 	add.w	r3, r7, #8
 8001544:	4619      	mov	r1, r3
 8001546:	2002      	movs	r0, #2
 8001548:	f000 fad6 	bl	8001af8 <LTC_PEC15_Calc>
 800154c:	4603      	mov	r3, r0
 800154e:	827b      	strh	r3, [r7, #18]
		cmd[2] = (uint8_t) (cmd_pec >> 8);
 8001550:	8a7b      	ldrh	r3, [r7, #18]
 8001552:	0a1b      	lsrs	r3, r3, #8
 8001554:	b29b      	uxth	r3, r3
 8001556:	b2db      	uxtb	r3, r3
 8001558:	72bb      	strb	r3, [r7, #10]
		cmd[3] = (uint8_t) (cmd_pec);
 800155a:	8a7b      	ldrh	r3, [r7, #18]
 800155c:	b2db      	uxtb	r3, r3
 800155e:	72fb      	strb	r3, [r7, #11]

		LTC_Wakeup_Idle(); //Wake LTC up
 8001560:	f7ff ff60 	bl	8001424 <LTC_Wakeup_Idle>

		LTC_nCS_Low(); //Pull CS low
 8001564:	f001 fb90 	bl	8002c88 <LTC_nCS_Low>

		hal_ret = HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 8001568:	f107 0108 	add.w	r1, r7, #8
 800156c:	2364      	movs	r3, #100	; 0x64
 800156e:	2204      	movs	r2, #4
 8001570:	4836      	ldr	r0, [pc, #216]	; (800164c <LTC_ReadRawCellVoltages+0x19c>)
 8001572:	f004 fc07 	bl	8005d84 <HAL_SPI_Transmit>
 8001576:	4603      	mov	r3, r0
 8001578:	747b      	strb	r3, [r7, #17]
		if (hal_ret) { //Non-zero means error
 800157a:	7c7b      	ldrb	r3, [r7, #17]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d00b      	beq.n	8001598 <LTC_ReadRawCellVoltages+0xe8>
			ret |= (1 << (hal_ret + LTC_SPI_TX_BIT_OFFSET)); //TX error
 8001580:	7c7b      	ldrb	r3, [r7, #17]
 8001582:	2200      	movs	r2, #0
 8001584:	4413      	add	r3, r2
 8001586:	2201      	movs	r2, #1
 8001588:	fa02 f303 	lsl.w	r3, r2, r3
 800158c:	b25a      	sxtb	r2, r3
 800158e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001592:	4313      	orrs	r3, r2
 8001594:	b25b      	sxtb	r3, r3
 8001596:	77fb      	strb	r3, [r7, #31]
		}

		hal_ret = HAL_SPI_Receive(&hspi1, (uint8_t*) read_voltages_reg,
 8001598:	7f3b      	ldrb	r3, [r7, #28]
 800159a:	b29a      	uxth	r2, r3
 800159c:	2364      	movs	r3, #100	; 0x64
 800159e:	6979      	ldr	r1, [r7, #20]
 80015a0:	482a      	ldr	r0, [pc, #168]	; (800164c <LTC_ReadRawCellVoltages+0x19c>)
 80015a2:	f004 fd32 	bl	800600a <HAL_SPI_Receive>
 80015a6:	4603      	mov	r3, r0
 80015a8:	747b      	strb	r3, [r7, #17]
				ARR_SIZE_REG, 100);
		if (hal_ret) { //Non-zero means error
 80015aa:	7c7b      	ldrb	r3, [r7, #17]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d00b      	beq.n	80015c8 <LTC_ReadRawCellVoltages+0x118>
			ret |= (1 << (hal_ret + LTC_SPI_RX_BIT_OFFSET)); //RX error
 80015b0:	7c7b      	ldrb	r3, [r7, #17]
 80015b2:	2204      	movs	r2, #4
 80015b4:	4413      	add	r3, r2
 80015b6:	2201      	movs	r2, #1
 80015b8:	fa02 f303 	lsl.w	r3, r2, r3
 80015bc:	b25a      	sxtb	r2, r3
 80015be:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80015c2:	4313      	orrs	r3, r2
 80015c4:	b25b      	sxtb	r3, r3
 80015c6:	77fb      	strb	r3, [r7, #31]
		}

		// Process the received data
		for (uint8_t dev_idx = 0; dev_idx < LTC_Get_Num_Devices(); dev_idx++) {
 80015c8:	2300      	movs	r3, #0
 80015ca:	777b      	strb	r3, [r7, #29]
 80015cc:	e01d      	b.n	800160a <LTC_ReadRawCellVoltages+0x15a>
			// Assuming data format is [cell voltage, cell voltage, ..., PEC, PEC]
			// PEC for each device is the last two bytes of its data segment
			uint8_t *data_ptr = &read_voltages_reg[dev_idx * REG_LEN];
 80015ce:	7f7b      	ldrb	r3, [r7, #29]
 80015d0:	2208      	movs	r2, #8
 80015d2:	fb02 f303 	mul.w	r3, r2, r3
 80015d6:	697a      	ldr	r2, [r7, #20]
 80015d8:	4413      	add	r3, r2
 80015da:	60fb      	str	r3, [r7, #12]
			// If PEC matches, copy the voltage data, omitting the PEC bytes
			memcpy(
					&read_voltages[dev_idx * LTC_Get_Num_Series_Groups()
 80015dc:	7f7c      	ldrb	r4, [r7, #29]
 80015de:	f7ff ff17 	bl	8001410 <LTC_Get_Num_Series_Groups>
 80015e2:	4603      	mov	r3, r0
 80015e4:	fb03 f204 	mul.w	r2, r3, r4
							+ i * LTC_SERIES_GROUPS_PER_RDCV], data_ptr,
 80015e8:	7fbb      	ldrb	r3, [r7, #30]
 80015ea:	2103      	movs	r1, #3
 80015ec:	fb01 f303 	mul.w	r3, r1, r3
 80015f0:	4413      	add	r3, r2
					&read_voltages[dev_idx * LTC_Get_Num_Series_Groups()
 80015f2:	005b      	lsls	r3, r3, #1
 80015f4:	687a      	ldr	r2, [r7, #4]
 80015f6:	4413      	add	r3, r2
					REG_LEN - 2);
 80015f8:	2208      	movs	r2, #8
 80015fa:	3a02      	subs	r2, #2
			memcpy(
 80015fc:	68f9      	ldr	r1, [r7, #12]
 80015fe:	4618      	mov	r0, r3
 8001600:	f008 fdda 	bl	800a1b8 <memcpy>
		for (uint8_t dev_idx = 0; dev_idx < LTC_Get_Num_Devices(); dev_idx++) {
 8001604:	7f7b      	ldrb	r3, [r7, #29]
 8001606:	3301      	adds	r3, #1
 8001608:	777b      	strb	r3, [r7, #29]
 800160a:	f7ff fee1 	bl	80013d0 <LTC_Get_Num_Devices>
 800160e:	4603      	mov	r3, r0
 8001610:	461a      	mov	r2, r3
 8001612:	7f7b      	ldrb	r3, [r7, #29]
 8001614:	4293      	cmp	r3, r2
 8001616:	d3da      	bcc.n	80015ce <LTC_ReadRawCellVoltages+0x11e>

		}

		LTC_nCS_High(); //Pull CS high
 8001618:	f001 fb2a 	bl	8002c70 <LTC_nCS_High>
			i++) {
 800161c:	7fbb      	ldrb	r3, [r7, #30]
 800161e:	3301      	adds	r3, #1
 8001620:	77bb      	strb	r3, [r7, #30]
			i < (LTC_Get_Num_Series_Groups() / LTC_SERIES_GROUPS_PER_RDCV);
 8001622:	f7ff fef5 	bl	8001410 <LTC_Get_Num_Series_Groups>
 8001626:	4603      	mov	r3, r0
 8001628:	461a      	mov	r2, r3
 800162a:	2303      	movs	r3, #3
 800162c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001630:	b2db      	uxtb	r3, r3
 8001632:	7fba      	ldrb	r2, [r7, #30]
 8001634:	429a      	cmp	r2, r3
 8001636:	f4ff af75 	bcc.w	8001524 <LTC_ReadRawCellVoltages+0x74>
	}

	return ret;
 800163a:	7ffb      	ldrb	r3, [r7, #31]
 800163c:	46b5      	mov	sp, r6
}
 800163e:	4618      	mov	r0, r3
 8001640:	3724      	adds	r7, #36	; 0x24
 8001642:	46bd      	mov	sp, r7
 8001644:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001648:	0800ad44 	.word	0x0800ad44
 800164c:	200002c4 	.word	0x200002c4

08001650 <ltc6811_wrcomm>:

void ltc6811_wrcomm(uint8_t total_ic, //The number of ICs being written to
		uint8_t comm[6] //A two dimensional array of the comm data that will be written
		) {
 8001650:	b580      	push	{r7, lr}
 8001652:	b086      	sub	sp, #24
 8001654:	af00      	add	r7, sp, #0
 8001656:	4603      	mov	r3, r0
 8001658:	6039      	str	r1, [r7, #0]
 800165a:	71fb      	strb	r3, [r7, #7]
	const uint8_t BYTES_IN_REG = 6;
 800165c:	2306      	movs	r3, #6
 800165e:	753b      	strb	r3, [r7, #20]
	const uint8_t CMD_LEN = 4 + (8 * total_ic);
 8001660:	79fb      	ldrb	r3, [r7, #7]
 8001662:	00db      	lsls	r3, r3, #3
 8001664:	b2db      	uxtb	r3, r3
 8001666:	3304      	adds	r3, #4
 8001668:	74fb      	strb	r3, [r7, #19]
	uint8_t *cmd;
	uint16_t comm_pec;
	uint16_t cmd_pec;
	uint8_t cmd_index; //command counter

	cmd = (uint8_t*) malloc(CMD_LEN * sizeof(uint8_t));
 800166a:	7cfb      	ldrb	r3, [r7, #19]
 800166c:	4618      	mov	r0, r3
 800166e:	f008 fc6f 	bl	8009f50 <malloc>
 8001672:	4603      	mov	r3, r0
 8001674:	60fb      	str	r3, [r7, #12]

	cmd[0] = 0x07;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	2207      	movs	r2, #7
 800167a:	701a      	strb	r2, [r3, #0]
	cmd[1] = 0x21;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	3301      	adds	r3, #1
 8001680:	2221      	movs	r2, #33	; 0x21
 8001682:	701a      	strb	r2, [r3, #0]
	cmd_pec = LTC_PEC15_Calc(2, cmd);
 8001684:	68f9      	ldr	r1, [r7, #12]
 8001686:	2002      	movs	r0, #2
 8001688:	f000 fa36 	bl	8001af8 <LTC_PEC15_Calc>
 800168c:	4603      	mov	r3, r0
 800168e:	817b      	strh	r3, [r7, #10]
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 8001690:	897b      	ldrh	r3, [r7, #10]
 8001692:	0a1b      	lsrs	r3, r3, #8
 8001694:	b29a      	uxth	r2, r3
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	3302      	adds	r3, #2
 800169a:	b2d2      	uxtb	r2, r2
 800169c:	701a      	strb	r2, [r3, #0]
	cmd[3] = (uint8_t) (cmd_pec);
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	3303      	adds	r3, #3
 80016a2:	897a      	ldrh	r2, [r7, #10]
 80016a4:	b2d2      	uxtb	r2, r2
 80016a6:	701a      	strb	r2, [r3, #0]

	cmd_index = 4;
 80016a8:	2304      	movs	r3, #4
 80016aa:	75fb      	strb	r3, [r7, #23]
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--) // executes for each ltc6811 in daisy chain, this loops starts with
 80016ac:	79fb      	ldrb	r3, [r7, #7]
 80016ae:	75bb      	strb	r3, [r7, #22]
 80016b0:	e030      	b.n	8001714 <ltc6811_wrcomm+0xc4>
			{
		// the last IC on the stack. The first configuration written is
		// received by the last IC in the daisy chain

		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG;
 80016b2:	2300      	movs	r3, #0
 80016b4:	757b      	strb	r3, [r7, #21]
 80016b6:	e00d      	b.n	80016d4 <ltc6811_wrcomm+0x84>
				current_byte++) // executes for each of the 6 bytes in the CFGR register
				{
			// current_byte is the byte counter
			cmd[cmd_index] = comm[current_byte]; //adding the config data to the array to be sent
 80016b8:	7d7b      	ldrb	r3, [r7, #21]
 80016ba:	683a      	ldr	r2, [r7, #0]
 80016bc:	441a      	add	r2, r3
 80016be:	7dfb      	ldrb	r3, [r7, #23]
 80016c0:	68f9      	ldr	r1, [r7, #12]
 80016c2:	440b      	add	r3, r1
 80016c4:	7812      	ldrb	r2, [r2, #0]
 80016c6:	701a      	strb	r2, [r3, #0]
			cmd_index = cmd_index + 1;
 80016c8:	7dfb      	ldrb	r3, [r7, #23]
 80016ca:	3301      	adds	r3, #1
 80016cc:	75fb      	strb	r3, [r7, #23]
				current_byte++) // executes for each of the 6 bytes in the CFGR register
 80016ce:	7d7b      	ldrb	r3, [r7, #21]
 80016d0:	3301      	adds	r3, #1
 80016d2:	757b      	strb	r3, [r7, #21]
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG;
 80016d4:	7d7a      	ldrb	r2, [r7, #21]
 80016d6:	7d3b      	ldrb	r3, [r7, #20]
 80016d8:	429a      	cmp	r2, r3
 80016da:	d3ed      	bcc.n	80016b8 <ltc6811_wrcomm+0x68>
		}
		comm_pec = (uint16_t) LTC_PEC15_Calc(BYTES_IN_REG,
 80016dc:	7d3b      	ldrb	r3, [r7, #20]
 80016de:	6839      	ldr	r1, [r7, #0]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f000 fa09 	bl	8001af8 <LTC_PEC15_Calc>
 80016e6:	4603      	mov	r3, r0
 80016e8:	813b      	strh	r3, [r7, #8]
				&comm[0]); // calculating the PEC for each ICs configuration register data
		cmd[cmd_index] = (uint8_t) (comm_pec >> 8);
 80016ea:	893b      	ldrh	r3, [r7, #8]
 80016ec:	0a1b      	lsrs	r3, r3, #8
 80016ee:	b299      	uxth	r1, r3
 80016f0:	7dfb      	ldrb	r3, [r7, #23]
 80016f2:	68fa      	ldr	r2, [r7, #12]
 80016f4:	4413      	add	r3, r2
 80016f6:	b2ca      	uxtb	r2, r1
 80016f8:	701a      	strb	r2, [r3, #0]
		cmd[cmd_index + 1] = (uint8_t) comm_pec;
 80016fa:	7dfb      	ldrb	r3, [r7, #23]
 80016fc:	3301      	adds	r3, #1
 80016fe:	68fa      	ldr	r2, [r7, #12]
 8001700:	4413      	add	r3, r2
 8001702:	893a      	ldrh	r2, [r7, #8]
 8001704:	b2d2      	uxtb	r2, r2
 8001706:	701a      	strb	r2, [r3, #0]
		cmd_index = cmd_index + 2;
 8001708:	7dfb      	ldrb	r3, [r7, #23]
 800170a:	3302      	adds	r3, #2
 800170c:	75fb      	strb	r3, [r7, #23]
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--) // executes for each ltc6811 in daisy chain, this loops starts with
 800170e:	7dbb      	ldrb	r3, [r7, #22]
 8001710:	3b01      	subs	r3, #1
 8001712:	75bb      	strb	r3, [r7, #22]
 8001714:	7dbb      	ldrb	r3, [r7, #22]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d1cb      	bne.n	80016b2 <ltc6811_wrcomm+0x62>
	}

	LTC_Wakeup_Idle(); //This will guarantee that the ltc6811 isoSPI port is awake.This command can be removed.
 800171a:	f7ff fe83 	bl	8001424 <LTC_Wakeup_Idle>
	LTC_nCS_Low();
 800171e:	f001 fab3 	bl	8002c88 <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, CMD_LEN, 100);
 8001722:	7cfb      	ldrb	r3, [r7, #19]
 8001724:	b29a      	uxth	r2, r3
 8001726:	2364      	movs	r3, #100	; 0x64
 8001728:	68f9      	ldr	r1, [r7, #12]
 800172a:	4806      	ldr	r0, [pc, #24]	; (8001744 <ltc6811_wrcomm+0xf4>)
 800172c:	f004 fb2a 	bl	8005d84 <HAL_SPI_Transmit>
	LTC_nCS_High();
 8001730:	f001 fa9e 	bl	8002c70 <LTC_nCS_High>
	free(cmd);
 8001734:	68f8      	ldr	r0, [r7, #12]
 8001736:	f008 fc13 	bl	8009f60 <free>
}
 800173a:	bf00      	nop
 800173c:	3718      	adds	r7, #24
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	200002c4 	.word	0x200002c4

08001748 <ltc6811_stcomm>:

/*
 Shifts data in COMM register out over ltc6811 SPI/I2C port
 */
void ltc6811_stcomm(uint8_t len) {
 8001748:	b580      	push	{r7, lr}
 800174a:	b086      	sub	sp, #24
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	71fb      	strb	r3, [r7, #7]

	uint8_t cmd[4];
	uint16_t cmd_pec;

	cmd[0] = 0x07;
 8001752:	2307      	movs	r3, #7
 8001754:	733b      	strb	r3, [r7, #12]
	cmd[1] = 0x23;
 8001756:	2323      	movs	r3, #35	; 0x23
 8001758:	737b      	strb	r3, [r7, #13]
	cmd_pec = LTC_PEC15_Calc(2, cmd);
 800175a:	f107 030c 	add.w	r3, r7, #12
 800175e:	4619      	mov	r1, r3
 8001760:	2002      	movs	r0, #2
 8001762:	f000 f9c9 	bl	8001af8 <LTC_PEC15_Calc>
 8001766:	4603      	mov	r3, r0
 8001768:	827b      	strh	r3, [r7, #18]
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 800176a:	8a7b      	ldrh	r3, [r7, #18]
 800176c:	0a1b      	lsrs	r3, r3, #8
 800176e:	b29b      	uxth	r3, r3
 8001770:	b2db      	uxtb	r3, r3
 8001772:	73bb      	strb	r3, [r7, #14]
	cmd[3] = (uint8_t) (cmd_pec);
 8001774:	8a7b      	ldrh	r3, [r7, #18]
 8001776:	b2db      	uxtb	r3, r3
 8001778:	73fb      	strb	r3, [r7, #15]

	LTC_Wakeup_Idle(); //This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
 800177a:	f7ff fe53 	bl	8001424 <LTC_Wakeup_Idle>
	LTC_nCS_Low();
 800177e:	f001 fa83 	bl	8002c88 <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 8001782:	f107 010c 	add.w	r1, r7, #12
 8001786:	2364      	movs	r3, #100	; 0x64
 8001788:	2204      	movs	r2, #4
 800178a:	480e      	ldr	r0, [pc, #56]	; (80017c4 <ltc6811_stcomm+0x7c>)
 800178c:	f004 fafa 	bl	8005d84 <HAL_SPI_Transmit>
	for (int i = 0; i < len*3; i++) {
 8001790:	2300      	movs	r3, #0
 8001792:	617b      	str	r3, [r7, #20]
 8001794:	e008      	b.n	80017a8 <ltc6811_stcomm+0x60>
		HAL_SPI_Transmit(&hspi1, (uint8_t*) 0xFF, 1, 100);
 8001796:	2364      	movs	r3, #100	; 0x64
 8001798:	2201      	movs	r2, #1
 800179a:	21ff      	movs	r1, #255	; 0xff
 800179c:	4809      	ldr	r0, [pc, #36]	; (80017c4 <ltc6811_stcomm+0x7c>)
 800179e:	f004 faf1 	bl	8005d84 <HAL_SPI_Transmit>
	for (int i = 0; i < len*3; i++) {
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	3301      	adds	r3, #1
 80017a6:	617b      	str	r3, [r7, #20]
 80017a8:	79fa      	ldrb	r2, [r7, #7]
 80017aa:	4613      	mov	r3, r2
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	4413      	add	r3, r2
 80017b0:	697a      	ldr	r2, [r7, #20]
 80017b2:	429a      	cmp	r2, r3
 80017b4:	dbef      	blt.n	8001796 <ltc6811_stcomm+0x4e>
	}
	LTC_nCS_High();
 80017b6:	f001 fa5b 	bl	8002c70 <LTC_nCS_High>
}
 80017ba:	bf00      	nop
 80017bc:	3718      	adds	r7, #24
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	200002c4 	.word	0x200002c4

080017c8 <LTC_ReadRawCellTemps>:

LTC_SPI_StatusTypeDef LTC_ReadRawCellTemps(uint16_t *read_auxiliary) {
 80017c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80017cc:	b089      	sub	sp, #36	; 0x24
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
 80017d2:	466b      	mov	r3, sp
 80017d4:	461e      	mov	r6, r3
	LTC_SPI_StatusTypeDef ret = LTC_SPI_OK;
 80017d6:	2300      	movs	r3, #0
 80017d8:	77fb      	strb	r3, [r7, #31]
	LTC_SPI_StatusTypeDef hal_ret;
	const uint8_t ARR_SIZE_REG = LTC_Get_Num_Devices() * REG_LEN;
 80017da:	f7ff fdf9 	bl	80013d0 <LTC_Get_Num_Devices>
 80017de:	4603      	mov	r3, r0
 80017e0:	461a      	mov	r2, r3
 80017e2:	2308      	movs	r3, #8
 80017e4:	fb02 f303 	mul.w	r3, r2, r3
 80017e8:	773b      	strb	r3, [r7, #28]
	uint8_t read_auxiliary_reg[ARR_SIZE_REG]; // Increased in size to handle multiple devices
 80017ea:	7f3b      	ldrb	r3, [r7, #28]
 80017ec:	3b01      	subs	r3, #1
 80017ee:	61bb      	str	r3, [r7, #24]
 80017f0:	7f3b      	ldrb	r3, [r7, #28]
 80017f2:	2200      	movs	r2, #0
 80017f4:	4698      	mov	r8, r3
 80017f6:	4691      	mov	r9, r2
 80017f8:	f04f 0200 	mov.w	r2, #0
 80017fc:	f04f 0300 	mov.w	r3, #0
 8001800:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001804:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001808:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800180c:	7f3b      	ldrb	r3, [r7, #28]
 800180e:	2200      	movs	r2, #0
 8001810:	461c      	mov	r4, r3
 8001812:	4615      	mov	r5, r2
 8001814:	f04f 0200 	mov.w	r2, #0
 8001818:	f04f 0300 	mov.w	r3, #0
 800181c:	00eb      	lsls	r3, r5, #3
 800181e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001822:	00e2      	lsls	r2, r4, #3
 8001824:	7f3b      	ldrb	r3, [r7, #28]
 8001826:	3307      	adds	r3, #7
 8001828:	08db      	lsrs	r3, r3, #3
 800182a:	00db      	lsls	r3, r3, #3
 800182c:	ebad 0d03 	sub.w	sp, sp, r3
 8001830:	466b      	mov	r3, sp
 8001832:	3300      	adds	r3, #0
 8001834:	617b      	str	r3, [r7, #20]

	for (uint8_t i = 0;
 8001836:	2300      	movs	r3, #0
 8001838:	77bb      	strb	r3, [r7, #30]
 800183a:	e07c      	b.n	8001936 <LTC_ReadRawCellTemps+0x16e>
			i < (num_aux_series_groups / LTC_SERIES_GROUPS_PER_RDAUX); i++) {
		uint8_t cmd[4];
		uint16_t cmd_pec;

		cmd[0] = (0xFF & (LTC_CMD_AUXREG[i] >> 8)); //RDCV Register
 800183c:	7fbb      	ldrb	r3, [r7, #30]
 800183e:	4a46      	ldr	r2, [pc, #280]	; (8001958 <LTC_ReadRawCellTemps+0x190>)
 8001840:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001844:	0a1b      	lsrs	r3, r3, #8
 8001846:	b29b      	uxth	r3, r3
 8001848:	b2db      	uxtb	r3, r3
 800184a:	723b      	strb	r3, [r7, #8]
		cmd[1] = (0xFF & (LTC_CMD_AUXREG[i])); //RDCV Register
 800184c:	7fbb      	ldrb	r3, [r7, #30]
 800184e:	4a42      	ldr	r2, [pc, #264]	; (8001958 <LTC_ReadRawCellTemps+0x190>)
 8001850:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001854:	b2db      	uxtb	r3, r3
 8001856:	727b      	strb	r3, [r7, #9]
		cmd_pec = LTC_PEC15_Calc(2, cmd);
 8001858:	f107 0308 	add.w	r3, r7, #8
 800185c:	4619      	mov	r1, r3
 800185e:	2002      	movs	r0, #2
 8001860:	f000 f94a 	bl	8001af8 <LTC_PEC15_Calc>
 8001864:	4603      	mov	r3, r0
 8001866:	827b      	strh	r3, [r7, #18]
		cmd[2] = (uint8_t) (cmd_pec >> 8);
 8001868:	8a7b      	ldrh	r3, [r7, #18]
 800186a:	0a1b      	lsrs	r3, r3, #8
 800186c:	b29b      	uxth	r3, r3
 800186e:	b2db      	uxtb	r3, r3
 8001870:	72bb      	strb	r3, [r7, #10]
		cmd[3] = (uint8_t) (cmd_pec);
 8001872:	8a7b      	ldrh	r3, [r7, #18]
 8001874:	b2db      	uxtb	r3, r3
 8001876:	72fb      	strb	r3, [r7, #11]

		LTC_Wakeup_Idle(); //Wake LTC up
 8001878:	f7ff fdd4 	bl	8001424 <LTC_Wakeup_Idle>

		LTC_nCS_Low(); //Pull CS low
 800187c:	f001 fa04 	bl	8002c88 <LTC_nCS_Low>

		hal_ret = HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 8001880:	f107 0108 	add.w	r1, r7, #8
 8001884:	2364      	movs	r3, #100	; 0x64
 8001886:	2204      	movs	r2, #4
 8001888:	4834      	ldr	r0, [pc, #208]	; (800195c <LTC_ReadRawCellTemps+0x194>)
 800188a:	f004 fa7b 	bl	8005d84 <HAL_SPI_Transmit>
 800188e:	4603      	mov	r3, r0
 8001890:	747b      	strb	r3, [r7, #17]
		if (hal_ret) { //Non-zero means error
 8001892:	7c7b      	ldrb	r3, [r7, #17]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d00b      	beq.n	80018b0 <LTC_ReadRawCellTemps+0xe8>
			ret |= (1 << (hal_ret + LTC_SPI_TX_BIT_OFFSET)); //TX error
 8001898:	7c7b      	ldrb	r3, [r7, #17]
 800189a:	2200      	movs	r2, #0
 800189c:	4413      	add	r3, r2
 800189e:	2201      	movs	r2, #1
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	b25a      	sxtb	r2, r3
 80018a6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	b25b      	sxtb	r3, r3
 80018ae:	77fb      	strb	r3, [r7, #31]
		}

		hal_ret = HAL_SPI_Receive(&hspi1, (uint8_t*) read_auxiliary_reg,
 80018b0:	7f3b      	ldrb	r3, [r7, #28]
 80018b2:	b29a      	uxth	r2, r3
 80018b4:	2364      	movs	r3, #100	; 0x64
 80018b6:	6979      	ldr	r1, [r7, #20]
 80018b8:	4828      	ldr	r0, [pc, #160]	; (800195c <LTC_ReadRawCellTemps+0x194>)
 80018ba:	f004 fba6 	bl	800600a <HAL_SPI_Receive>
 80018be:	4603      	mov	r3, r0
 80018c0:	747b      	strb	r3, [r7, #17]
				ARR_SIZE_REG, 100);
		if (hal_ret) { //Non-zero means error
 80018c2:	7c7b      	ldrb	r3, [r7, #17]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d00b      	beq.n	80018e0 <LTC_ReadRawCellTemps+0x118>
			ret |= (1 << (hal_ret + LTC_SPI_RX_BIT_OFFSET)); //RX error
 80018c8:	7c7b      	ldrb	r3, [r7, #17]
 80018ca:	2204      	movs	r2, #4
 80018cc:	4413      	add	r3, r2
 80018ce:	2201      	movs	r2, #1
 80018d0:	fa02 f303 	lsl.w	r3, r2, r3
 80018d4:	b25a      	sxtb	r2, r3
 80018d6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80018da:	4313      	orrs	r3, r2
 80018dc:	b25b      	sxtb	r3, r3
 80018de:	77fb      	strb	r3, [r7, #31]
		}

		// Process the received data
		for (uint8_t dev_idx = 0; dev_idx < LTC_Get_Num_Devices(); dev_idx++) {
 80018e0:	2300      	movs	r3, #0
 80018e2:	777b      	strb	r3, [r7, #29]
 80018e4:	e01b      	b.n	800191e <LTC_ReadRawCellTemps+0x156>
			// Assuming data format is [cell voltage, cell voltage, ..., PEC, PEC]
			// PEC for each device is the last two bytes of its data segment
			uint8_t *data_ptr = &read_auxiliary_reg[dev_idx * REG_LEN];
 80018e6:	7f7b      	ldrb	r3, [r7, #29]
 80018e8:	2208      	movs	r2, #8
 80018ea:	fb02 f303 	mul.w	r3, r2, r3
 80018ee:	697a      	ldr	r2, [r7, #20]
 80018f0:	4413      	add	r3, r2
 80018f2:	60fb      	str	r3, [r7, #12]

			memcpy(
					&read_auxiliary[dev_idx * num_aux_series_groups
 80018f4:	7f7b      	ldrb	r3, [r7, #29]
 80018f6:	2206      	movs	r2, #6
 80018f8:	fb03 f202 	mul.w	r2, r3, r2
							+ i * LTC_SERIES_GROUPS_PER_RDAUX], data_ptr,
 80018fc:	7fbb      	ldrb	r3, [r7, #30]
 80018fe:	2103      	movs	r1, #3
 8001900:	fb01 f303 	mul.w	r3, r1, r3
 8001904:	4413      	add	r3, r2
					&read_auxiliary[dev_idx * num_aux_series_groups
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	687a      	ldr	r2, [r7, #4]
 800190a:	4413      	add	r3, r2
					REG_LEN - 2);
 800190c:	2208      	movs	r2, #8
 800190e:	3a02      	subs	r2, #2
			memcpy(
 8001910:	68f9      	ldr	r1, [r7, #12]
 8001912:	4618      	mov	r0, r3
 8001914:	f008 fc50 	bl	800a1b8 <memcpy>
		for (uint8_t dev_idx = 0; dev_idx < LTC_Get_Num_Devices(); dev_idx++) {
 8001918:	7f7b      	ldrb	r3, [r7, #29]
 800191a:	3301      	adds	r3, #1
 800191c:	777b      	strb	r3, [r7, #29]
 800191e:	f7ff fd57 	bl	80013d0 <LTC_Get_Num_Devices>
 8001922:	4603      	mov	r3, r0
 8001924:	461a      	mov	r2, r3
 8001926:	7f7b      	ldrb	r3, [r7, #29]
 8001928:	4293      	cmp	r3, r2
 800192a:	d3dc      	bcc.n	80018e6 <LTC_ReadRawCellTemps+0x11e>
		}

		LTC_nCS_High(); //Pull CS high
 800192c:	f001 f9a0 	bl	8002c70 <LTC_nCS_High>
			i < (num_aux_series_groups / LTC_SERIES_GROUPS_PER_RDAUX); i++) {
 8001930:	7fbb      	ldrb	r3, [r7, #30]
 8001932:	3301      	adds	r3, #1
 8001934:	77bb      	strb	r3, [r7, #30]
 8001936:	2206      	movs	r2, #6
 8001938:	2303      	movs	r3, #3
 800193a:	fbb2 f3f3 	udiv	r3, r2, r3
 800193e:	b2db      	uxtb	r3, r3
 8001940:	7fba      	ldrb	r2, [r7, #30]
 8001942:	429a      	cmp	r2, r3
 8001944:	f4ff af7a 	bcc.w	800183c <LTC_ReadRawCellTemps+0x74>
	}

	return ret;
 8001948:	7ffb      	ldrb	r3, [r7, #31]
 800194a:	46b5      	mov	sp, r6
}
 800194c:	4618      	mov	r0, r3
 800194e:	3724      	adds	r7, #36	; 0x24
 8001950:	46bd      	mov	sp, r7
 8001952:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001956:	bf00      	nop
 8001958:	0800ad4c 	.word	0x0800ad4c
 800195c:	200002c4 	.word	0x200002c4

08001960 <LTC_ADCV>:
 Starts cell voltage conversion
 */
void LTC_ADCV(uint8_t MD, //ADC Mode
		uint8_t DCP, //Discharge Permit
		uint8_t CH //Cell Channels to be measured
		) {
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	71fb      	strb	r3, [r7, #7]
 800196a:	460b      	mov	r3, r1
 800196c:	71bb      	strb	r3, [r7, #6]
 800196e:	4613      	mov	r3, r2
 8001970:	717b      	strb	r3, [r7, #5]
	uint8_t cmd[4];
	uint16_t cmd_pec;
	uint8_t md_bits;

	md_bits = (MD & 0x02) >> 1;
 8001972:	79fb      	ldrb	r3, [r7, #7]
 8001974:	105b      	asrs	r3, r3, #1
 8001976:	b2db      	uxtb	r3, r3
 8001978:	f003 0301 	and.w	r3, r3, #1
 800197c:	73fb      	strb	r3, [r7, #15]
	cmd[0] = md_bits + 0x02;
 800197e:	7bfb      	ldrb	r3, [r7, #15]
 8001980:	3302      	adds	r3, #2
 8001982:	b2db      	uxtb	r3, r3
 8001984:	723b      	strb	r3, [r7, #8]
	md_bits = (MD & 0x01) << 7;
 8001986:	79fb      	ldrb	r3, [r7, #7]
 8001988:	01db      	lsls	r3, r3, #7
 800198a:	73fb      	strb	r3, [r7, #15]
	cmd[1] = md_bits + 0x60 + (DCP << 4) + CH;
 800198c:	79bb      	ldrb	r3, [r7, #6]
 800198e:	011b      	lsls	r3, r3, #4
 8001990:	b2da      	uxtb	r2, r3
 8001992:	7bfb      	ldrb	r3, [r7, #15]
 8001994:	4413      	add	r3, r2
 8001996:	b2da      	uxtb	r2, r3
 8001998:	797b      	ldrb	r3, [r7, #5]
 800199a:	4413      	add	r3, r2
 800199c:	b2db      	uxtb	r3, r3
 800199e:	3360      	adds	r3, #96	; 0x60
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	727b      	strb	r3, [r7, #9]
	cmd_pec = LTC_PEC15_Calc(2, cmd);
 80019a4:	f107 0308 	add.w	r3, r7, #8
 80019a8:	4619      	mov	r1, r3
 80019aa:	2002      	movs	r0, #2
 80019ac:	f000 f8a4 	bl	8001af8 <LTC_PEC15_Calc>
 80019b0:	4603      	mov	r3, r0
 80019b2:	81bb      	strh	r3, [r7, #12]
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 80019b4:	89bb      	ldrh	r3, [r7, #12]
 80019b6:	0a1b      	lsrs	r3, r3, #8
 80019b8:	b29b      	uxth	r3, r3
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t) (cmd_pec);
 80019be:	89bb      	ldrh	r3, [r7, #12]
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	72fb      	strb	r3, [r7, #11]

	LTC_Wakeup_Idle(); //This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
 80019c4:	f7ff fd2e 	bl	8001424 <LTC_Wakeup_Idle>
	LTC_nCS_Low();
 80019c8:	f001 f95e 	bl	8002c88 <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 80019cc:	f107 0108 	add.w	r1, r7, #8
 80019d0:	2364      	movs	r3, #100	; 0x64
 80019d2:	2204      	movs	r2, #4
 80019d4:	4804      	ldr	r0, [pc, #16]	; (80019e8 <LTC_ADCV+0x88>)
 80019d6:	f004 f9d5 	bl	8005d84 <HAL_SPI_Transmit>
	LTC_nCS_High();
 80019da:	f001 f949 	bl	8002c70 <LTC_nCS_High>
}
 80019de:	bf00      	nop
 80019e0:	3710      	adds	r7, #16
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	200002c4 	.word	0x200002c4

080019ec <LTC_ADAX>:

void LTC_ADAX(uint8_t MD, //ADC Mode
		uint8_t CHG //GPIO Channels to be measured)
		) {
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4603      	mov	r3, r0
 80019f4:	460a      	mov	r2, r1
 80019f6:	71fb      	strb	r3, [r7, #7]
 80019f8:	4613      	mov	r3, r2
 80019fa:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd[4];
	uint16_t cmd_pec;
	uint8_t md_bits;

	md_bits = (MD & 0x02) >> 1;
 80019fc:	79fb      	ldrb	r3, [r7, #7]
 80019fe:	105b      	asrs	r3, r3, #1
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	f003 0301 	and.w	r3, r3, #1
 8001a06:	73fb      	strb	r3, [r7, #15]
	cmd[0] = md_bits + 0x04;
 8001a08:	7bfb      	ldrb	r3, [r7, #15]
 8001a0a:	3304      	adds	r3, #4
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	723b      	strb	r3, [r7, #8]
	md_bits = (MD & 0x01) << 7;
 8001a10:	79fb      	ldrb	r3, [r7, #7]
 8001a12:	01db      	lsls	r3, r3, #7
 8001a14:	73fb      	strb	r3, [r7, #15]
	cmd[1] = md_bits + 0x60 + CHG;
 8001a16:	7bfa      	ldrb	r2, [r7, #15]
 8001a18:	79bb      	ldrb	r3, [r7, #6]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	3360      	adds	r3, #96	; 0x60
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	727b      	strb	r3, [r7, #9]
	cmd_pec = LTC_PEC15_Calc(2, cmd);
 8001a24:	f107 0308 	add.w	r3, r7, #8
 8001a28:	4619      	mov	r1, r3
 8001a2a:	2002      	movs	r0, #2
 8001a2c:	f000 f864 	bl	8001af8 <LTC_PEC15_Calc>
 8001a30:	4603      	mov	r3, r0
 8001a32:	81bb      	strh	r3, [r7, #12]
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 8001a34:	89bb      	ldrh	r3, [r7, #12]
 8001a36:	0a1b      	lsrs	r3, r3, #8
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t) (cmd_pec);
 8001a3e:	89bb      	ldrh	r3, [r7, #12]
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	72fb      	strb	r3, [r7, #11]
	 wakeup_idle (); //This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
	 output_low(LTC6811_CS);
	 spi_write_array(4,cmd);
	 output_high(LTC6811_CS);
	 */
	LTC_Wakeup_Idle(); //This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
 8001a44:	f7ff fcee 	bl	8001424 <LTC_Wakeup_Idle>
	LTC_nCS_Low();
 8001a48:	f001 f91e 	bl	8002c88 <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 8001a4c:	f107 0108 	add.w	r1, r7, #8
 8001a50:	2364      	movs	r3, #100	; 0x64
 8001a52:	2204      	movs	r2, #4
 8001a54:	4804      	ldr	r0, [pc, #16]	; (8001a68 <LTC_ADAX+0x7c>)
 8001a56:	f004 f995 	bl	8005d84 <HAL_SPI_Transmit>
	LTC_nCS_High();
 8001a5a:	f001 f909 	bl	8002c70 <LTC_nCS_High>
}
 8001a5e:	bf00      	nop
 8001a60:	3710      	adds	r7, #16
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	200002c4 	.word	0x200002c4

08001a6c <LTC_PollAdc>:

int32_t LTC_PollAdc() {
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
	uint32_t counter = 0;
 8001a72:	2300      	movs	r3, #0
 8001a74:	60fb      	str	r3, [r7, #12]
	uint8_t finished = 0;
 8001a76:	2300      	movs	r3, #0
 8001a78:	72fb      	strb	r3, [r7, #11]
	uint8_t current_time = 0;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	72bb      	strb	r3, [r7, #10]
	uint8_t cmd[4];
	uint16_t cmd_pec;

	cmd[0] = 0x07;
 8001a7e:	2307      	movs	r3, #7
 8001a80:	713b      	strb	r3, [r7, #4]
	cmd[1] = 0x14;
 8001a82:	2314      	movs	r3, #20
 8001a84:	717b      	strb	r3, [r7, #5]
	cmd_pec = LTC_PEC15_Calc(2, cmd);
 8001a86:	1d3b      	adds	r3, r7, #4
 8001a88:	4619      	mov	r1, r3
 8001a8a:	2002      	movs	r0, #2
 8001a8c:	f000 f834 	bl	8001af8 <LTC_PEC15_Calc>
 8001a90:	4603      	mov	r3, r0
 8001a92:	813b      	strh	r3, [r7, #8]
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 8001a94:	893b      	ldrh	r3, [r7, #8]
 8001a96:	0a1b      	lsrs	r3, r3, #8
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	71bb      	strb	r3, [r7, #6]
	cmd[3] = (uint8_t) (cmd_pec);
 8001a9e:	893b      	ldrh	r3, [r7, #8]
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	71fb      	strb	r3, [r7, #7]

	LTC_Wakeup_Idle(); //This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
 8001aa4:	f7ff fcbe 	bl	8001424 <LTC_Wakeup_Idle>

	LTC_nCS_Low();
 8001aa8:	f001 f8ee 	bl	8002c88 <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 8001aac:	1d39      	adds	r1, r7, #4
 8001aae:	2364      	movs	r3, #100	; 0x64
 8001ab0:	2204      	movs	r2, #4
 8001ab2:	480f      	ldr	r0, [pc, #60]	; (8001af0 <LTC_PollAdc+0x84>)
 8001ab4:	f004 f966 	bl	8005d84 <HAL_SPI_Transmit>

	while ((counter < 200000) && (finished == 0)) {
 8001ab8:	e00c      	b.n	8001ad4 <LTC_PollAdc+0x68>
		current_time = HAL_GetTick();
 8001aba:	f001 fa63 	bl	8002f84 <HAL_GetTick>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	72bb      	strb	r3, [r7, #10]
		if (current_time > 0) {
 8001ac2:	7abb      	ldrb	r3, [r7, #10]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d002      	beq.n	8001ace <LTC_PollAdc+0x62>
			finished = 1;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	72fb      	strb	r3, [r7, #11]
 8001acc:	e002      	b.n	8001ad4 <LTC_PollAdc+0x68>
		} else {
			counter = counter + 10;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	330a      	adds	r3, #10
 8001ad2:	60fb      	str	r3, [r7, #12]
	while ((counter < 200000) && (finished == 0)) {
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	4a07      	ldr	r2, [pc, #28]	; (8001af4 <LTC_PollAdc+0x88>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d802      	bhi.n	8001ae2 <LTC_PollAdc+0x76>
 8001adc:	7afb      	ldrb	r3, [r7, #11]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d0eb      	beq.n	8001aba <LTC_PollAdc+0x4e>
		}
	}
	LTC_nCS_High();
 8001ae2:	f001 f8c5 	bl	8002c70 <LTC_nCS_High>
	return (counter);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3710      	adds	r7, #16
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	200002c4 	.word	0x200002c4
 8001af4:	00030d3f 	.word	0x00030d3f

08001af8 <LTC_PEC15_Calc>:
		0xba39, 0xb10b, 0x7492, 0x5368, 0x96f1, 0x9dc3, 0x585a, 0x8ba7, 0x4e3e,
		0x450c, 0x8095 };

uint16_t LTC_PEC15_Calc(uint8_t len, //Number of bytes that will be used to calculate a PEC
		uint8_t *data //Array of data that will be used to calculate a PEC
		) {
 8001af8:	b480      	push	{r7}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	4603      	mov	r3, r0
 8001b00:	6039      	str	r1, [r7, #0]
 8001b02:	71fb      	strb	r3, [r7, #7]
	uint16_t remainder, addr;
	remainder = 16;	//Initialize the PEC to 0x10000
 8001b04:	2310      	movs	r3, #16
 8001b06:	81fb      	strh	r3, [r7, #14]

	for (uint8_t i = 0; i < len; i++) // loops for each byte in data array
 8001b08:	2300      	movs	r3, #0
 8001b0a:	737b      	strb	r3, [r7, #13]
 8001b0c:	e018      	b.n	8001b40 <LTC_PEC15_Calc+0x48>
			{
		addr = ((remainder >> 7) ^ data[i]) & 0xff; //calculate PEC table address
 8001b0e:	89fb      	ldrh	r3, [r7, #14]
 8001b10:	09db      	lsrs	r3, r3, #7
 8001b12:	b29a      	uxth	r2, r3
 8001b14:	7b7b      	ldrb	r3, [r7, #13]
 8001b16:	6839      	ldr	r1, [r7, #0]
 8001b18:	440b      	add	r3, r1
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	4053      	eors	r3, r2
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	817b      	strh	r3, [r7, #10]
		remainder = (remainder << 8) ^ crc15Table[addr];
 8001b26:	89fb      	ldrh	r3, [r7, #14]
 8001b28:	021b      	lsls	r3, r3, #8
 8001b2a:	b29a      	uxth	r2, r3
 8001b2c:	897b      	ldrh	r3, [r7, #10]
 8001b2e:	490a      	ldr	r1, [pc, #40]	; (8001b58 <LTC_PEC15_Calc+0x60>)
 8001b30:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	4053      	eors	r3, r2
 8001b38:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i < len; i++) // loops for each byte in data array
 8001b3a:	7b7b      	ldrb	r3, [r7, #13]
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	737b      	strb	r3, [r7, #13]
 8001b40:	7b7a      	ldrb	r2, [r7, #13]
 8001b42:	79fb      	ldrb	r3, [r7, #7]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d3e2      	bcc.n	8001b0e <LTC_PEC15_Calc+0x16>
	}

	return (remainder * 2); //The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 8001b48:	89fb      	ldrh	r3, [r7, #14]
 8001b4a:	005b      	lsls	r3, r3, #1
 8001b4c:	b29b      	uxth	r3, r3
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3714      	adds	r7, #20
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bc80      	pop	{r7}
 8001b56:	4770      	bx	lr
 8001b58:	0800ad50 	.word	0x0800ad50

08001b5c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b62:	1d3b      	adds	r3, r7, #4
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	605a      	str	r2, [r3, #4]
 8001b6a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001b6c:	4b18      	ldr	r3, [pc, #96]	; (8001bd0 <MX_ADC1_Init+0x74>)
 8001b6e:	4a19      	ldr	r2, [pc, #100]	; (8001bd4 <MX_ADC1_Init+0x78>)
 8001b70:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001b72:	4b17      	ldr	r3, [pc, #92]	; (8001bd0 <MX_ADC1_Init+0x74>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001b78:	4b15      	ldr	r3, [pc, #84]	; (8001bd0 <MX_ADC1_Init+0x74>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b7e:	4b14      	ldr	r3, [pc, #80]	; (8001bd0 <MX_ADC1_Init+0x74>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b84:	4b12      	ldr	r3, [pc, #72]	; (8001bd0 <MX_ADC1_Init+0x74>)
 8001b86:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001b8a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b8c:	4b10      	ldr	r3, [pc, #64]	; (8001bd0 <MX_ADC1_Init+0x74>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001b92:	4b0f      	ldr	r3, [pc, #60]	; (8001bd0 <MX_ADC1_Init+0x74>)
 8001b94:	2201      	movs	r2, #1
 8001b96:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b98:	480d      	ldr	r0, [pc, #52]	; (8001bd0 <MX_ADC1_Init+0x74>)
 8001b9a:	f001 fa21 	bl	8002fe0 <HAL_ADC_Init>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001ba4:	f000 fd9e 	bl	80026e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001ba8:	230e      	movs	r3, #14
 8001baa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001bac:	2301      	movs	r3, #1
 8001bae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bb4:	1d3b      	adds	r3, r7, #4
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4805      	ldr	r0, [pc, #20]	; (8001bd0 <MX_ADC1_Init+0x74>)
 8001bba:	f001 fae9 	bl	8003190 <HAL_ADC_ConfigChannel>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001bc4:	f000 fd8e 	bl	80026e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001bc8:	bf00      	nop
 8001bca:	3710      	adds	r7, #16
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	20000234 	.word	0x20000234
 8001bd4:	40012400 	.word	0x40012400

08001bd8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001bde:	1d3b      	adds	r3, r7, #4
 8001be0:	2200      	movs	r2, #0
 8001be2:	601a      	str	r2, [r3, #0]
 8001be4:	605a      	str	r2, [r3, #4]
 8001be6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001be8:	4b18      	ldr	r3, [pc, #96]	; (8001c4c <MX_ADC2_Init+0x74>)
 8001bea:	4a19      	ldr	r2, [pc, #100]	; (8001c50 <MX_ADC2_Init+0x78>)
 8001bec:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001bee:	4b17      	ldr	r3, [pc, #92]	; (8001c4c <MX_ADC2_Init+0x74>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001bf4:	4b15      	ldr	r3, [pc, #84]	; (8001c4c <MX_ADC2_Init+0x74>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001bfa:	4b14      	ldr	r3, [pc, #80]	; (8001c4c <MX_ADC2_Init+0x74>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c00:	4b12      	ldr	r3, [pc, #72]	; (8001c4c <MX_ADC2_Init+0x74>)
 8001c02:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001c06:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c08:	4b10      	ldr	r3, [pc, #64]	; (8001c4c <MX_ADC2_Init+0x74>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8001c0e:	4b0f      	ldr	r3, [pc, #60]	; (8001c4c <MX_ADC2_Init+0x74>)
 8001c10:	2201      	movs	r2, #1
 8001c12:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001c14:	480d      	ldr	r0, [pc, #52]	; (8001c4c <MX_ADC2_Init+0x74>)
 8001c16:	f001 f9e3 	bl	8002fe0 <HAL_ADC_Init>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8001c20:	f000 fd60 	bl	80026e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001c24:	230a      	movs	r3, #10
 8001c26:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001c30:	1d3b      	adds	r3, r7, #4
 8001c32:	4619      	mov	r1, r3
 8001c34:	4805      	ldr	r0, [pc, #20]	; (8001c4c <MX_ADC2_Init+0x74>)
 8001c36:	f001 faab 	bl	8003190 <HAL_ADC_ConfigChannel>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8001c40:	f000 fd50 	bl	80026e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001c44:	bf00      	nop
 8001c46:	3710      	adds	r7, #16
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	20000264 	.word	0x20000264
 8001c50:	40012800 	.word	0x40012800

08001c54 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b08a      	sub	sp, #40	; 0x28
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c5c:	f107 0318 	add.w	r3, r7, #24
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	605a      	str	r2, [r3, #4]
 8001c66:	609a      	str	r2, [r3, #8]
 8001c68:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a28      	ldr	r2, [pc, #160]	; (8001d10 <HAL_ADC_MspInit+0xbc>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d122      	bne.n	8001cba <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c74:	4b27      	ldr	r3, [pc, #156]	; (8001d14 <HAL_ADC_MspInit+0xc0>)
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	4a26      	ldr	r2, [pc, #152]	; (8001d14 <HAL_ADC_MspInit+0xc0>)
 8001c7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c7e:	6193      	str	r3, [r2, #24]
 8001c80:	4b24      	ldr	r3, [pc, #144]	; (8001d14 <HAL_ADC_MspInit+0xc0>)
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c88:	617b      	str	r3, [r7, #20]
 8001c8a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c8c:	4b21      	ldr	r3, [pc, #132]	; (8001d14 <HAL_ADC_MspInit+0xc0>)
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	4a20      	ldr	r2, [pc, #128]	; (8001d14 <HAL_ADC_MspInit+0xc0>)
 8001c92:	f043 0310 	orr.w	r3, r3, #16
 8001c96:	6193      	str	r3, [r2, #24]
 8001c98:	4b1e      	ldr	r3, [pc, #120]	; (8001d14 <HAL_ADC_MspInit+0xc0>)
 8001c9a:	699b      	ldr	r3, [r3, #24]
 8001c9c:	f003 0310 	and.w	r3, r3, #16
 8001ca0:	613b      	str	r3, [r7, #16]
 8001ca2:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001ca4:	2330      	movs	r3, #48	; 0x30
 8001ca6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cac:	f107 0318 	add.w	r3, r7, #24
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	4819      	ldr	r0, [pc, #100]	; (8001d18 <HAL_ADC_MspInit+0xc4>)
 8001cb4:	f001 fee6 	bl	8003a84 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001cb8:	e026      	b.n	8001d08 <HAL_ADC_MspInit+0xb4>
  else if(adcHandle->Instance==ADC2)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a17      	ldr	r2, [pc, #92]	; (8001d1c <HAL_ADC_MspInit+0xc8>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d121      	bne.n	8001d08 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001cc4:	4b13      	ldr	r3, [pc, #76]	; (8001d14 <HAL_ADC_MspInit+0xc0>)
 8001cc6:	699b      	ldr	r3, [r3, #24]
 8001cc8:	4a12      	ldr	r2, [pc, #72]	; (8001d14 <HAL_ADC_MspInit+0xc0>)
 8001cca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cce:	6193      	str	r3, [r2, #24]
 8001cd0:	4b10      	ldr	r3, [pc, #64]	; (8001d14 <HAL_ADC_MspInit+0xc0>)
 8001cd2:	699b      	ldr	r3, [r3, #24]
 8001cd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cd8:	60fb      	str	r3, [r7, #12]
 8001cda:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cdc:	4b0d      	ldr	r3, [pc, #52]	; (8001d14 <HAL_ADC_MspInit+0xc0>)
 8001cde:	699b      	ldr	r3, [r3, #24]
 8001ce0:	4a0c      	ldr	r2, [pc, #48]	; (8001d14 <HAL_ADC_MspInit+0xc0>)
 8001ce2:	f043 0310 	orr.w	r3, r3, #16
 8001ce6:	6193      	str	r3, [r2, #24]
 8001ce8:	4b0a      	ldr	r3, [pc, #40]	; (8001d14 <HAL_ADC_MspInit+0xc0>)
 8001cea:	699b      	ldr	r3, [r3, #24]
 8001cec:	f003 0310 	and.w	r3, r3, #16
 8001cf0:	60bb      	str	r3, [r7, #8]
 8001cf2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001cf4:	230f      	movs	r3, #15
 8001cf6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cfc:	f107 0318 	add.w	r3, r7, #24
 8001d00:	4619      	mov	r1, r3
 8001d02:	4805      	ldr	r0, [pc, #20]	; (8001d18 <HAL_ADC_MspInit+0xc4>)
 8001d04:	f001 febe 	bl	8003a84 <HAL_GPIO_Init>
}
 8001d08:	bf00      	nop
 8001d0a:	3728      	adds	r7, #40	; 0x28
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	40012400 	.word	0x40012400
 8001d14:	40021000 	.word	0x40021000
 8001d18:	40011000 	.word	0x40011000
 8001d1c:	40012800 	.word	0x40012800

08001d20 <MX_CAN2_Init>:

CAN_HandleTypeDef hcan2;

/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8001d24:	4b17      	ldr	r3, [pc, #92]	; (8001d84 <MX_CAN2_Init+0x64>)
 8001d26:	4a18      	ldr	r2, [pc, #96]	; (8001d88 <MX_CAN2_Init+0x68>)
 8001d28:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 9;
 8001d2a:	4b16      	ldr	r3, [pc, #88]	; (8001d84 <MX_CAN2_Init+0x64>)
 8001d2c:	2209      	movs	r2, #9
 8001d2e:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001d30:	4b14      	ldr	r3, [pc, #80]	; (8001d84 <MX_CAN2_Init+0x64>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001d36:	4b13      	ldr	r3, [pc, #76]	; (8001d84 <MX_CAN2_Init+0x64>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_3TQ;
 8001d3c:	4b11      	ldr	r3, [pc, #68]	; (8001d84 <MX_CAN2_Init+0x64>)
 8001d3e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d42:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_4TQ;
 8001d44:	4b0f      	ldr	r3, [pc, #60]	; (8001d84 <MX_CAN2_Init+0x64>)
 8001d46:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8001d4a:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8001d4c:	4b0d      	ldr	r3, [pc, #52]	; (8001d84 <MX_CAN2_Init+0x64>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8001d52:	4b0c      	ldr	r3, [pc, #48]	; (8001d84 <MX_CAN2_Init+0x64>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8001d58:	4b0a      	ldr	r3, [pc, #40]	; (8001d84 <MX_CAN2_Init+0x64>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8001d5e:	4b09      	ldr	r3, [pc, #36]	; (8001d84 <MX_CAN2_Init+0x64>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001d64:	4b07      	ldr	r3, [pc, #28]	; (8001d84 <MX_CAN2_Init+0x64>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8001d6a:	4b06      	ldr	r3, [pc, #24]	; (8001d84 <MX_CAN2_Init+0x64>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8001d70:	4804      	ldr	r0, [pc, #16]	; (8001d84 <MX_CAN2_Init+0x64>)
 8001d72:	f001 fb46 	bl	8003402 <HAL_CAN_Init>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d001      	beq.n	8001d80 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8001d7c:	f000 fcb2 	bl	80026e4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8001d80:	bf00      	nop
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	20000294 	.word	0x20000294
 8001d88:	40006800 	.word	0x40006800

08001d8c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b08a      	sub	sp, #40	; 0x28
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d94:	f107 0318 	add.w	r3, r7, #24
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	605a      	str	r2, [r3, #4]
 8001d9e:	609a      	str	r2, [r3, #8]
 8001da0:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN2)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a22      	ldr	r2, [pc, #136]	; (8001e30 <HAL_CAN_MspInit+0xa4>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d13d      	bne.n	8001e28 <HAL_CAN_MspInit+0x9c>
  {
  /* USER CODE BEGIN CAN2_MspInit 0 */

  /* USER CODE END CAN2_MspInit 0 */
    /* CAN2 clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001dac:	4b21      	ldr	r3, [pc, #132]	; (8001e34 <HAL_CAN_MspInit+0xa8>)
 8001dae:	69db      	ldr	r3, [r3, #28]
 8001db0:	4a20      	ldr	r2, [pc, #128]	; (8001e34 <HAL_CAN_MspInit+0xa8>)
 8001db2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001db6:	61d3      	str	r3, [r2, #28]
 8001db8:	4b1e      	ldr	r3, [pc, #120]	; (8001e34 <HAL_CAN_MspInit+0xa8>)
 8001dba:	69db      	ldr	r3, [r3, #28]
 8001dbc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001dc0:	617b      	str	r3, [r7, #20]
 8001dc2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001dc4:	4b1b      	ldr	r3, [pc, #108]	; (8001e34 <HAL_CAN_MspInit+0xa8>)
 8001dc6:	69db      	ldr	r3, [r3, #28]
 8001dc8:	4a1a      	ldr	r2, [pc, #104]	; (8001e34 <HAL_CAN_MspInit+0xa8>)
 8001dca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001dce:	61d3      	str	r3, [r2, #28]
 8001dd0:	4b18      	ldr	r3, [pc, #96]	; (8001e34 <HAL_CAN_MspInit+0xa8>)
 8001dd2:	69db      	ldr	r3, [r3, #28]
 8001dd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dd8:	613b      	str	r3, [r7, #16]
 8001dda:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ddc:	4b15      	ldr	r3, [pc, #84]	; (8001e34 <HAL_CAN_MspInit+0xa8>)
 8001dde:	699b      	ldr	r3, [r3, #24]
 8001de0:	4a14      	ldr	r2, [pc, #80]	; (8001e34 <HAL_CAN_MspInit+0xa8>)
 8001de2:	f043 0308 	orr.w	r3, r3, #8
 8001de6:	6193      	str	r3, [r2, #24]
 8001de8:	4b12      	ldr	r3, [pc, #72]	; (8001e34 <HAL_CAN_MspInit+0xa8>)
 8001dea:	699b      	ldr	r3, [r3, #24]
 8001dec:	f003 0308 	and.w	r3, r3, #8
 8001df0:	60fb      	str	r3, [r7, #12]
 8001df2:	68fb      	ldr	r3, [r7, #12]
    /**CAN2 GPIO Configuration
    PB12     ------> CAN2_RX
    PB13     ------> CAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001df4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001df8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e02:	f107 0318 	add.w	r3, r7, #24
 8001e06:	4619      	mov	r1, r3
 8001e08:	480b      	ldr	r0, [pc, #44]	; (8001e38 <HAL_CAN_MspInit+0xac>)
 8001e0a:	f001 fe3b 	bl	8003a84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001e0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e14:	2302      	movs	r3, #2
 8001e16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e1c:	f107 0318 	add.w	r3, r7, #24
 8001e20:	4619      	mov	r1, r3
 8001e22:	4805      	ldr	r0, [pc, #20]	; (8001e38 <HAL_CAN_MspInit+0xac>)
 8001e24:	f001 fe2e 	bl	8003a84 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8001e28:	bf00      	nop
 8001e2a:	3728      	adds	r7, #40	; 0x28
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	40006800 	.word	0x40006800
 8001e34:	40021000 	.word	0x40021000
 8001e38:	40010c00 	.word	0x40010c00

08001e3c <CAN1_Start>:
  }
}

/* USER CODE BEGIN 1 */

HAL_StatusTypeDef CAN1_Start() {
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
	return HAL_CAN_Start(&hcan2);
 8001e40:	4802      	ldr	r0, [pc, #8]	; (8001e4c <CAN1_Start+0x10>)
 8001e42:	f001 fbd9 	bl	80035f8 <HAL_CAN_Start>
 8001e46:	4603      	mov	r3, r0
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	20000294 	.word	0x20000294

08001e50 <CAN1_Activate>:

HAL_StatusTypeDef CAN1_Activate(){
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
	return HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001e54:	2102      	movs	r1, #2
 8001e56:	4803      	ldr	r0, [pc, #12]	; (8001e64 <CAN1_Activate+0x14>)
 8001e58:	f001 fce1 	bl	800381e <HAL_CAN_ActivateNotification>
 8001e5c:	4603      	mov	r3, r0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	20000294 	.word	0x20000294

08001e68 <CAN1_Send>:


HAL_StatusTypeDef CAN1_Send(struct CANMessage *ptr){
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
	return HAL_CAN_AddTxMessage(&hcan2, &ptr->TxHeader, (uint8_t*) ptr->data, &ptr->TxMailbox);
 8001e70:	6879      	ldr	r1, [r7, #4]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f103 021c 	add.w	r2, r3, #28
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	3318      	adds	r3, #24
 8001e7c:	4803      	ldr	r0, [pc, #12]	; (8001e8c <CAN1_Send+0x24>)
 8001e7e:	f001 fbff 	bl	8003680 <HAL_CAN_AddTxMessage>
 8001e82:	4603      	mov	r3, r0
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3708      	adds	r7, #8
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	20000294 	.word	0x20000294

08001e90 <CAN1_SettingsInit>:

void CAN1_SettingsInit(struct CANMessage *ptr){
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
	CAN1_Start();
 8001e98:	f7ff ffd0 	bl	8001e3c <CAN1_Start>
	CAN1_Activate();
 8001e9c:	f7ff ffd8 	bl	8001e50 <CAN1_Activate>
	ptr->TxHeader.IDE= CAN_ID_STD;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	609a      	str	r2, [r3, #8]
	ptr->TxHeader.StdId = 0x00;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	601a      	str	r2, [r3, #0]
	ptr->TxHeader.RTR = CAN_RTR_DATA;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	60da      	str	r2, [r3, #12]
	ptr->TxHeader.DLC = 8;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2208      	movs	r2, #8
 8001eb6:	611a      	str	r2, [r3, #16]
}
 8001eb8:	bf00      	nop
 8001eba:	3708      	adds	r7, #8
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <setCANId>:

void setCANId(struct CANMessage *ptr,uint32_t id){
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
	ptr->TxHeader.StdId = id;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	683a      	ldr	r2, [r7, #0]
 8001ece:	601a      	str	r2, [r3, #0]
}
 8001ed0:	bf00      	nop
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bc80      	pop	{r7}
 8001ed8:	4770      	bx	lr

08001eda <CAN1_Send_Voltage>:

void CAN1_Send_Voltage(struct CANMessage *ptr, uint16_t *read_volt){
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b086      	sub	sp, #24
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
 8001ee2:	6039      	str	r1, [r7, #0]
	uint16_t CAN_ID = 0x630;
 8001ee4:	f44f 63c6 	mov.w	r3, #1584	; 0x630
 8001ee8:	82fb      	strh	r3, [r7, #22]
	setCANId(ptr, CAN_ID);
 8001eea:	8afb      	ldrh	r3, [r7, #22]
 8001eec:	4619      	mov	r1, r3
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f7ff ffe6 	bl	8001ec0 <setCANId>
	for (int i = 0; i < NUM_CELLS; i++) {
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	613b      	str	r3, [r7, #16]
 8001ef8:	e074      	b.n	8001fe4 <CAN1_Send_Voltage+0x10a>
		if (i % 4 == 0) {
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	f003 0303 	and.w	r3, r3, #3
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d156      	bne.n	8001fb2 <CAN1_Send_Voltage+0xd8>
			uint8_t temp_volt = i;
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	73fb      	strb	r3, [r7, #15]
			ptr->data[0] = read_volt[temp_volt];
 8001f08:	7bfb      	ldrb	r3, [r7, #15]
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	683a      	ldr	r2, [r7, #0]
 8001f0e:	4413      	add	r3, r2
 8001f10:	881b      	ldrh	r3, [r3, #0]
 8001f12:	b2da      	uxtb	r2, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	771a      	strb	r2, [r3, #28]
			ptr->data[1] = read_volt[temp_volt] >> 8;
 8001f18:	7bfb      	ldrb	r3, [r7, #15]
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	683a      	ldr	r2, [r7, #0]
 8001f1e:	4413      	add	r3, r2
 8001f20:	881b      	ldrh	r3, [r3, #0]
 8001f22:	0a1b      	lsrs	r3, r3, #8
 8001f24:	b29b      	uxth	r3, r3
 8001f26:	b2da      	uxtb	r2, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	775a      	strb	r2, [r3, #29]
			temp_volt += 1;
 8001f2c:	7bfb      	ldrb	r3, [r7, #15]
 8001f2e:	3301      	adds	r3, #1
 8001f30:	73fb      	strb	r3, [r7, #15]
			ptr->data[2] = read_volt[temp_volt];
 8001f32:	7bfb      	ldrb	r3, [r7, #15]
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	683a      	ldr	r2, [r7, #0]
 8001f38:	4413      	add	r3, r2
 8001f3a:	881b      	ldrh	r3, [r3, #0]
 8001f3c:	b2da      	uxtb	r2, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	779a      	strb	r2, [r3, #30]
			ptr->data[3] = read_volt[temp_volt] >> 8;
 8001f42:	7bfb      	ldrb	r3, [r7, #15]
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	683a      	ldr	r2, [r7, #0]
 8001f48:	4413      	add	r3, r2
 8001f4a:	881b      	ldrh	r3, [r3, #0]
 8001f4c:	0a1b      	lsrs	r3, r3, #8
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	b2da      	uxtb	r2, r3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	77da      	strb	r2, [r3, #31]
			temp_volt += 1;
 8001f56:	7bfb      	ldrb	r3, [r7, #15]
 8001f58:	3301      	adds	r3, #1
 8001f5a:	73fb      	strb	r3, [r7, #15]
			ptr->data[4] = read_volt[temp_volt];
 8001f5c:	7bfb      	ldrb	r3, [r7, #15]
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	683a      	ldr	r2, [r7, #0]
 8001f62:	4413      	add	r3, r2
 8001f64:	881b      	ldrh	r3, [r3, #0]
 8001f66:	b2da      	uxtb	r2, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f883 2020 	strb.w	r2, [r3, #32]
			ptr->data[5] = read_volt[temp_volt] >> 8;
 8001f6e:	7bfb      	ldrb	r3, [r7, #15]
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	683a      	ldr	r2, [r7, #0]
 8001f74:	4413      	add	r3, r2
 8001f76:	881b      	ldrh	r3, [r3, #0]
 8001f78:	0a1b      	lsrs	r3, r3, #8
 8001f7a:	b29b      	uxth	r3, r3
 8001f7c:	b2da      	uxtb	r2, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			temp_volt += 1;
 8001f84:	7bfb      	ldrb	r3, [r7, #15]
 8001f86:	3301      	adds	r3, #1
 8001f88:	73fb      	strb	r3, [r7, #15]
			ptr->data[6] = read_volt[temp_volt];
 8001f8a:	7bfb      	ldrb	r3, [r7, #15]
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	683a      	ldr	r2, [r7, #0]
 8001f90:	4413      	add	r3, r2
 8001f92:	881b      	ldrh	r3, [r3, #0]
 8001f94:	b2da      	uxtb	r2, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			ptr->data[7] = read_volt[temp_volt] >> 8;
 8001f9c:	7bfb      	ldrb	r3, [r7, #15]
 8001f9e:	005b      	lsls	r3, r3, #1
 8001fa0:	683a      	ldr	r2, [r7, #0]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	881b      	ldrh	r3, [r3, #0]
 8001fa6:	0a1b      	lsrs	r3, r3, #8
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	b2da      	uxtb	r2, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		}
		if (i > 0 && i % 4 == 0) {
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	dd0c      	ble.n	8001fd2 <CAN1_Send_Voltage+0xf8>
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	f003 0303 	and.w	r3, r3, #3
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d107      	bne.n	8001fd2 <CAN1_Send_Voltage+0xf8>
			CAN_ID = CAN_ID + 0x01;
 8001fc2:	8afb      	ldrh	r3, [r7, #22]
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	82fb      	strh	r3, [r7, #22]
			setCANId(ptr, CAN_ID);
 8001fc8:	8afb      	ldrh	r3, [r7, #22]
 8001fca:	4619      	mov	r1, r3
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f7ff ff77 	bl	8001ec0 <setCANId>
		}
		HAL_Delay(10);
 8001fd2:	200a      	movs	r0, #10
 8001fd4:	f000 ffe0 	bl	8002f98 <HAL_Delay>
		CAN1_Send(ptr);
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f7ff ff45 	bl	8001e68 <CAN1_Send>
	for (int i = 0; i < NUM_CELLS; i++) {
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	613b      	str	r3, [r7, #16]
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	2b0b      	cmp	r3, #11
 8001fe8:	dd87      	ble.n	8001efa <CAN1_Send_Voltage+0x20>
	}

}
 8001fea:	bf00      	nop
 8001fec:	bf00      	nop
 8001fee:	3718      	adds	r7, #24
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <CAN1_Send_Temperature>:

void CAN1_Send_Temperature(struct CANMessage *ptr, uint16_t *read_temp){
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	6039      	str	r1, [r7, #0]
	uint16_t CAN_ID = 0x680;
 8001ffe:	f44f 63d0 	mov.w	r3, #1664	; 0x680
 8002002:	81fb      	strh	r3, [r7, #14]
	setCANId(ptr, CAN_ID);
 8002004:	89fb      	ldrh	r3, [r7, #14]
 8002006:	4619      	mov	r1, r3
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f7ff ff59 	bl	8001ec0 <setCANId>
	for (uint8_t i = 0; i < NUM_THERM_TOTAL; i++) {
 800200e:	2300      	movs	r3, #0
 8002010:	737b      	strb	r3, [r7, #13]
 8002012:	e076      	b.n	8002102 <CAN1_Send_Temperature+0x10e>
		if (i % 4 == 0) {
 8002014:	7b7b      	ldrb	r3, [r7, #13]
 8002016:	f003 0303 	and.w	r3, r3, #3
 800201a:	b2db      	uxtb	r3, r3
 800201c:	2b00      	cmp	r3, #0
 800201e:	d156      	bne.n	80020ce <CAN1_Send_Temperature+0xda>
			uint8_t temp_volt = i;
 8002020:	7b7b      	ldrb	r3, [r7, #13]
 8002022:	733b      	strb	r3, [r7, #12]
			ptr->data[0] = read_temp[temp_volt];
 8002024:	7b3b      	ldrb	r3, [r7, #12]
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	683a      	ldr	r2, [r7, #0]
 800202a:	4413      	add	r3, r2
 800202c:	881b      	ldrh	r3, [r3, #0]
 800202e:	b2da      	uxtb	r2, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	771a      	strb	r2, [r3, #28]
			ptr->data[1] = read_temp[temp_volt] >> 8;
 8002034:	7b3b      	ldrb	r3, [r7, #12]
 8002036:	005b      	lsls	r3, r3, #1
 8002038:	683a      	ldr	r2, [r7, #0]
 800203a:	4413      	add	r3, r2
 800203c:	881b      	ldrh	r3, [r3, #0]
 800203e:	0a1b      	lsrs	r3, r3, #8
 8002040:	b29b      	uxth	r3, r3
 8002042:	b2da      	uxtb	r2, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	775a      	strb	r2, [r3, #29]
			temp_volt += 1;
 8002048:	7b3b      	ldrb	r3, [r7, #12]
 800204a:	3301      	adds	r3, #1
 800204c:	733b      	strb	r3, [r7, #12]
			ptr->data[2] = read_temp[temp_volt];
 800204e:	7b3b      	ldrb	r3, [r7, #12]
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	683a      	ldr	r2, [r7, #0]
 8002054:	4413      	add	r3, r2
 8002056:	881b      	ldrh	r3, [r3, #0]
 8002058:	b2da      	uxtb	r2, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	779a      	strb	r2, [r3, #30]
			ptr->data[3] = read_temp[temp_volt] >> 8;
 800205e:	7b3b      	ldrb	r3, [r7, #12]
 8002060:	005b      	lsls	r3, r3, #1
 8002062:	683a      	ldr	r2, [r7, #0]
 8002064:	4413      	add	r3, r2
 8002066:	881b      	ldrh	r3, [r3, #0]
 8002068:	0a1b      	lsrs	r3, r3, #8
 800206a:	b29b      	uxth	r3, r3
 800206c:	b2da      	uxtb	r2, r3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	77da      	strb	r2, [r3, #31]
			temp_volt += 1;
 8002072:	7b3b      	ldrb	r3, [r7, #12]
 8002074:	3301      	adds	r3, #1
 8002076:	733b      	strb	r3, [r7, #12]
			ptr->data[4] = read_temp[temp_volt];
 8002078:	7b3b      	ldrb	r3, [r7, #12]
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	683a      	ldr	r2, [r7, #0]
 800207e:	4413      	add	r3, r2
 8002080:	881b      	ldrh	r3, [r3, #0]
 8002082:	b2da      	uxtb	r2, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f883 2020 	strb.w	r2, [r3, #32]
			ptr->data[5] = read_temp[temp_volt] >> 8;
 800208a:	7b3b      	ldrb	r3, [r7, #12]
 800208c:	005b      	lsls	r3, r3, #1
 800208e:	683a      	ldr	r2, [r7, #0]
 8002090:	4413      	add	r3, r2
 8002092:	881b      	ldrh	r3, [r3, #0]
 8002094:	0a1b      	lsrs	r3, r3, #8
 8002096:	b29b      	uxth	r3, r3
 8002098:	b2da      	uxtb	r2, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			temp_volt += 1;
 80020a0:	7b3b      	ldrb	r3, [r7, #12]
 80020a2:	3301      	adds	r3, #1
 80020a4:	733b      	strb	r3, [r7, #12]
			ptr->data[6] = read_temp[temp_volt];
 80020a6:	7b3b      	ldrb	r3, [r7, #12]
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	683a      	ldr	r2, [r7, #0]
 80020ac:	4413      	add	r3, r2
 80020ae:	881b      	ldrh	r3, [r3, #0]
 80020b0:	b2da      	uxtb	r2, r3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			ptr->data[7] = read_temp[temp_volt] >> 8;
 80020b8:	7b3b      	ldrb	r3, [r7, #12]
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	683a      	ldr	r2, [r7, #0]
 80020be:	4413      	add	r3, r2
 80020c0:	881b      	ldrh	r3, [r3, #0]
 80020c2:	0a1b      	lsrs	r3, r3, #8
 80020c4:	b29b      	uxth	r3, r3
 80020c6:	b2da      	uxtb	r2, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		}
		if (i > 0 && i % 4 == 0) {
 80020ce:	7b7b      	ldrb	r3, [r7, #13]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d00d      	beq.n	80020f0 <CAN1_Send_Temperature+0xfc>
 80020d4:	7b7b      	ldrb	r3, [r7, #13]
 80020d6:	f003 0303 	and.w	r3, r3, #3
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d107      	bne.n	80020f0 <CAN1_Send_Temperature+0xfc>
			CAN_ID = CAN_ID + 0x01;
 80020e0:	89fb      	ldrh	r3, [r7, #14]
 80020e2:	3301      	adds	r3, #1
 80020e4:	81fb      	strh	r3, [r7, #14]
			setCANId(ptr, CAN_ID);
 80020e6:	89fb      	ldrh	r3, [r7, #14]
 80020e8:	4619      	mov	r1, r3
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f7ff fee8 	bl	8001ec0 <setCANId>
		}
		HAL_Delay(10);
 80020f0:	200a      	movs	r0, #10
 80020f2:	f000 ff51 	bl	8002f98 <HAL_Delay>
		CAN1_Send(ptr);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f7ff feb6 	bl	8001e68 <CAN1_Send>
	for (uint8_t i = 0; i < NUM_THERM_TOTAL; i++) {
 80020fc:	7b7b      	ldrb	r3, [r7, #13]
 80020fe:	3301      	adds	r3, #1
 8002100:	737b      	strb	r3, [r7, #13]
 8002102:	7b7b      	ldrb	r3, [r7, #13]
 8002104:	2b0b      	cmp	r3, #11
 8002106:	d985      	bls.n	8002014 <CAN1_Send_Temperature+0x20>
	}

}
 8002108:	bf00      	nop
 800210a:	bf00      	nop
 800210c:	3710      	adds	r7, #16
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}

08002112 <CAN1_Send_Cell_Summary>:

void CAN1_Send_Cell_Summary(struct CANMessage *ptr, struct batteryModuleVoltage *batt){
 8002112:	b580      	push	{r7, lr}
 8002114:	b084      	sub	sp, #16
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
 800211a:	6039      	str	r1, [r7, #0]
	uint16_t CAN_ID = 0x622;
 800211c:	f240 6322 	movw	r3, #1570	; 0x622
 8002120:	81fb      	strh	r3, [r7, #14]
	setCANId(ptr, CAN_ID);
 8002122:	89fb      	ldrh	r3, [r7, #14]
 8002124:	4619      	mov	r1, r3
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f7ff feca 	bl	8001ec0 <setCANId>

	ptr->data[0] = batt->cell_temp_highest;
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	89db      	ldrh	r3, [r3, #14]
 8002130:	b2da      	uxtb	r2, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	771a      	strb	r2, [r3, #28]
	ptr->data[1] = (batt->cell_volt_highest) >> 8;
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	895b      	ldrh	r3, [r3, #10]
 800213a:	0a1b      	lsrs	r3, r3, #8
 800213c:	b29b      	uxth	r3, r3
 800213e:	b2da      	uxtb	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	775a      	strb	r2, [r3, #29]
	ptr->data[2] = batt->cell_volt_lowest;
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	891b      	ldrh	r3, [r3, #8]
 8002148:	b2da      	uxtb	r2, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	779a      	strb	r2, [r3, #30]
	ptr->data[3] = (batt->cell_volt_lowest) >> 8;
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	891b      	ldrh	r3, [r3, #8]
 8002152:	0a1b      	lsrs	r3, r3, #8
 8002154:	b29b      	uxth	r3, r3
 8002156:	b2da      	uxtb	r2, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	77da      	strb	r2, [r3, #31]
	ptr->data[4] = batt->cell_temp_highest;
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	89db      	ldrh	r3, [r3, #14]
 8002160:	b2da      	uxtb	r2, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f883 2020 	strb.w	r2, [r3, #32]
	ptr->data[5] = (batt->cell_temp_highest) >> 8;
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	89db      	ldrh	r3, [r3, #14]
 800216c:	0a1b      	lsrs	r3, r3, #8
 800216e:	b29b      	uxth	r3, r3
 8002170:	b2da      	uxtb	r2, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	ptr->data[6] = batt->cell_temp_lowest;
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	899b      	ldrh	r3, [r3, #12]
 800217c:	b2da      	uxtb	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	ptr->data[7] = (batt->cell_temp_lowest) >> 8;
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	899b      	ldrh	r3, [r3, #12]
 8002188:	0a1b      	lsrs	r3, r3, #8
 800218a:	b29b      	uxth	r3, r3
 800218c:	b2da      	uxtb	r2, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

	HAL_Delay(10);
 8002194:	200a      	movs	r0, #10
 8002196:	f000 feff 	bl	8002f98 <HAL_Delay>
	CAN1_Send(ptr);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f7ff fe64 	bl	8001e68 <CAN1_Send>
}
 80021a0:	bf00      	nop
 80021a2:	3710      	adds	r7, #16
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <MX_GPIO_Init>:
        * EXTI
     PB8   ------> CAN1_RX
     PB9   ------> CAN1_TX
*/
void MX_GPIO_Init(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b08a      	sub	sp, #40	; 0x28
 80021ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ae:	f107 0314 	add.w	r3, r7, #20
 80021b2:	2200      	movs	r2, #0
 80021b4:	601a      	str	r2, [r3, #0]
 80021b6:	605a      	str	r2, [r3, #4]
 80021b8:	609a      	str	r2, [r3, #8]
 80021ba:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021bc:	4b52      	ldr	r3, [pc, #328]	; (8002308 <MX_GPIO_Init+0x160>)
 80021be:	699b      	ldr	r3, [r3, #24]
 80021c0:	4a51      	ldr	r2, [pc, #324]	; (8002308 <MX_GPIO_Init+0x160>)
 80021c2:	f043 0310 	orr.w	r3, r3, #16
 80021c6:	6193      	str	r3, [r2, #24]
 80021c8:	4b4f      	ldr	r3, [pc, #316]	; (8002308 <MX_GPIO_Init+0x160>)
 80021ca:	699b      	ldr	r3, [r3, #24]
 80021cc:	f003 0310 	and.w	r3, r3, #16
 80021d0:	613b      	str	r3, [r7, #16]
 80021d2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80021d4:	4b4c      	ldr	r3, [pc, #304]	; (8002308 <MX_GPIO_Init+0x160>)
 80021d6:	699b      	ldr	r3, [r3, #24]
 80021d8:	4a4b      	ldr	r2, [pc, #300]	; (8002308 <MX_GPIO_Init+0x160>)
 80021da:	f043 0320 	orr.w	r3, r3, #32
 80021de:	6193      	str	r3, [r2, #24]
 80021e0:	4b49      	ldr	r3, [pc, #292]	; (8002308 <MX_GPIO_Init+0x160>)
 80021e2:	699b      	ldr	r3, [r3, #24]
 80021e4:	f003 0320 	and.w	r3, r3, #32
 80021e8:	60fb      	str	r3, [r7, #12]
 80021ea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ec:	4b46      	ldr	r3, [pc, #280]	; (8002308 <MX_GPIO_Init+0x160>)
 80021ee:	699b      	ldr	r3, [r3, #24]
 80021f0:	4a45      	ldr	r2, [pc, #276]	; (8002308 <MX_GPIO_Init+0x160>)
 80021f2:	f043 0304 	orr.w	r3, r3, #4
 80021f6:	6193      	str	r3, [r2, #24]
 80021f8:	4b43      	ldr	r3, [pc, #268]	; (8002308 <MX_GPIO_Init+0x160>)
 80021fa:	699b      	ldr	r3, [r3, #24]
 80021fc:	f003 0304 	and.w	r3, r3, #4
 8002200:	60bb      	str	r3, [r7, #8]
 8002202:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002204:	4b40      	ldr	r3, [pc, #256]	; (8002308 <MX_GPIO_Init+0x160>)
 8002206:	699b      	ldr	r3, [r3, #24]
 8002208:	4a3f      	ldr	r2, [pc, #252]	; (8002308 <MX_GPIO_Init+0x160>)
 800220a:	f043 0308 	orr.w	r3, r3, #8
 800220e:	6193      	str	r3, [r2, #24]
 8002210:	4b3d      	ldr	r3, [pc, #244]	; (8002308 <MX_GPIO_Init+0x160>)
 8002212:	699b      	ldr	r3, [r3, #24]
 8002214:	f003 0308 	and.w	r3, r3, #8
 8002218:	607b      	str	r3, [r7, #4]
 800221a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LTC_nCS_GPIO_Port, LTC_nCS_Pin, GPIO_PIN_RESET);
 800221c:	2200      	movs	r2, #0
 800221e:	2110      	movs	r1, #16
 8002220:	483a      	ldr	r0, [pc, #232]	; (800230c <MX_GPIO_Init+0x164>)
 8002222:	f001 fdb3 	bl	8003d8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8002226:	2200      	movs	r2, #0
 8002228:	2102      	movs	r1, #2
 800222a:	4839      	ldr	r0, [pc, #228]	; (8002310 <MX_GPIO_Init+0x168>)
 800222c:	f001 fdae 	bl	8003d8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCU_HEARTBEAT_LED_GPIO_Port, MCU_HEARTBEAT_LED_Pin, GPIO_PIN_RESET);
 8002230:	2200      	movs	r2, #0
 8002232:	2140      	movs	r1, #64	; 0x40
 8002234:	4837      	ldr	r0, [pc, #220]	; (8002314 <MX_GPIO_Init+0x16c>)
 8002236:	f001 fda9 	bl	8003d8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LTC_nCS_Pin;
 800223a:	2310      	movs	r3, #16
 800223c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800223e:	2301      	movs	r3, #1
 8002240:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002242:	2300      	movs	r3, #0
 8002244:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002246:	2302      	movs	r3, #2
 8002248:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LTC_nCS_GPIO_Port, &GPIO_InitStruct);
 800224a:	f107 0314 	add.w	r3, r7, #20
 800224e:	4619      	mov	r1, r3
 8002250:	482e      	ldr	r0, [pc, #184]	; (800230c <MX_GPIO_Init+0x164>)
 8002252:	f001 fc17 	bl	8003a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002256:	2302      	movs	r3, #2
 8002258:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800225a:	2301      	movs	r3, #1
 800225c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225e:	2300      	movs	r3, #0
 8002260:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002262:	2302      	movs	r3, #2
 8002264:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002266:	f107 0314 	add.w	r3, r7, #20
 800226a:	4619      	mov	r1, r3
 800226c:	4828      	ldr	r0, [pc, #160]	; (8002310 <MX_GPIO_Init+0x168>)
 800226e:	f001 fc09 	bl	8003a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MCU_HEARTBEAT_LED_Pin;
 8002272:	2340      	movs	r3, #64	; 0x40
 8002274:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002276:	2301      	movs	r3, #1
 8002278:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227a:	2300      	movs	r3, #0
 800227c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800227e:	2302      	movs	r3, #2
 8002280:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MCU_HEARTBEAT_LED_GPIO_Port, &GPIO_InitStruct);
 8002282:	f107 0314 	add.w	r3, r7, #20
 8002286:	4619      	mov	r1, r3
 8002288:	4822      	ldr	r0, [pc, #136]	; (8002314 <MX_GPIO_Init+0x16c>)
 800228a:	f001 fbfb 	bl	8003a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PMUX_ST_Pin;
 800228e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002292:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002294:	2300      	movs	r3, #0
 8002296:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002298:	2300      	movs	r3, #0
 800229a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PMUX_ST_GPIO_Port, &GPIO_InitStruct);
 800229c:	f107 0314 	add.w	r3, r7, #20
 80022a0:	4619      	mov	r1, r3
 80022a2:	481c      	ldr	r0, [pc, #112]	; (8002314 <MX_GPIO_Init+0x16c>)
 80022a4:	f001 fbee 	bl	8003a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80022a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022ae:	2300      	movs	r3, #0
 80022b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b2:	2300      	movs	r3, #0
 80022b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022b6:	f107 0314 	add.w	r3, r7, #20
 80022ba:	4619      	mov	r1, r3
 80022bc:	4814      	ldr	r0, [pc, #80]	; (8002310 <MX_GPIO_Init+0x168>)
 80022be:	f001 fbe1 	bl	8003a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80022c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c8:	2302      	movs	r3, #2
 80022ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022cc:	2303      	movs	r3, #3
 80022ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022d0:	f107 0314 	add.w	r3, r7, #20
 80022d4:	4619      	mov	r1, r3
 80022d6:	480e      	ldr	r0, [pc, #56]	; (8002310 <MX_GPIO_Init+0x168>)
 80022d8:	f001 fbd4 	bl	8003a84 <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_CAN1_2();
 80022dc:	4b0e      	ldr	r3, [pc, #56]	; (8002318 <MX_GPIO_Init+0x170>)
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	627b      	str	r3, [r7, #36]	; 0x24
 80022e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e4:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80022e8:	627b      	str	r3, [r7, #36]	; 0x24
 80022ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ec:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80022f0:	627b      	str	r3, [r7, #36]	; 0x24
 80022f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022f8:	627b      	str	r3, [r7, #36]	; 0x24
 80022fa:	4a07      	ldr	r2, [pc, #28]	; (8002318 <MX_GPIO_Init+0x170>)
 80022fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fe:	6053      	str	r3, [r2, #4]

}
 8002300:	bf00      	nop
 8002302:	3728      	adds	r7, #40	; 0x28
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	40021000 	.word	0x40021000
 800230c:	40010800 	.word	0x40010800
 8002310:	40010c00 	.word	0x40010c00
 8002314:	40011000 	.word	0x40011000
 8002318:	40010000 	.word	0x40010000

0800231c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b0a2      	sub	sp, #136	; 0x88
 8002320:	af00      	add	r7, sp, #0
	TimerPacket timerpacket_ltc1;
	TimerPacket timerpacket_ltc2;
	TimerPacket timerpacket_can1;
	TimerPacket timerpacket_safety;

	struct batteryModuleVoltage modVoltage = { .cell_volt = (uint16_t*) malloc(
 8002322:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002326:	2200      	movs	r2, #0
 8002328:	601a      	str	r2, [r3, #0]
 800232a:	605a      	str	r2, [r3, #4]
 800232c:	609a      	str	r2, [r3, #8]
 800232e:	60da      	str	r2, [r3, #12]
 8002330:	611a      	str	r2, [r3, #16]
 8002332:	615a      	str	r2, [r3, #20]
 8002334:	2018      	movs	r0, #24
 8002336:	f007 fe0b 	bl	8009f50 <malloc>
 800233a:	4603      	mov	r3, r0
 800233c:	62fb      	str	r3, [r7, #44]	; 0x2c
	NUM_CELLS * sizeof(uint16_t)), .cell_temp = (uint16_t*) malloc(
 800233e:	2018      	movs	r0, #24
 8002340:	f007 fe06 	bl	8009f50 <malloc>
 8002344:	4603      	mov	r3, r0
	struct batteryModuleVoltage modVoltage = { .cell_volt = (uint16_t*) malloc(
 8002346:	633b      	str	r3, [r7, #48]	; 0x30
	NUM_THERM_TOTAL * sizeof(uint16_t)), .read_auxreg = (uint16_t*) malloc(
 8002348:	200c      	movs	r0, #12
 800234a:	f007 fe01 	bl	8009f50 <malloc>
 800234e:	4603      	mov	r3, r0
	struct batteryModuleVoltage modVoltage = { .cell_volt = (uint16_t*) malloc(
 8002350:	643b      	str	r3, [r7, #64]	; 0x40
			NUM_AUXES * sizeof(uint16_t)) };

	struct CANMessage msg;
	uint8_t safetyFaults = 0;
 8002352:	2300      	movs	r3, #0
 8002354:	71fb      	strb	r3, [r7, #7]
	uint8_t safetyWarnings = 0;
 8002356:	2300      	movs	r3, #0
 8002358:	71bb      	strb	r3, [r7, #6]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800235a:	f000 fdbb 	bl	8002ed4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800235e:	f000 f8e5 	bl	800252c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002362:	f7ff ff21 	bl	80021a8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8002366:	f7ff fbf9 	bl	8001b5c <MX_ADC1_Init>
  MX_ADC2_Init();
 800236a:	f7ff fc35 	bl	8001bd8 <MX_ADC2_Init>
  MX_TIM7_Init();
 800236e:	f000 fd37 	bl	8002de0 <MX_TIM7_Init>
  MX_SPI1_Init();
 8002372:	f000 fbfd 	bl	8002b70 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8002376:	f007 f903 	bl	8009580 <MX_USB_DEVICE_Init>
  MX_CAN2_Init();
 800237a:	f7ff fcd1 	bl	8001d20 <MX_CAN2_Init>
  /* USER CODE BEGIN 2 */
	CAN1_SettingsInit(&msg); // Start CAN at 0x00
 800237e:	f107 0308 	add.w	r3, r7, #8
 8002382:	4618      	mov	r0, r3
 8002384:	f7ff fd84 	bl	8001e90 <CAN1_SettingsInit>
	//Start timer
	GpioTimePacket_Init(&tp_led_heartbeat, MCU_HEARTBEAT_LED_GPIO_Port,
 8002388:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800238c:	2240      	movs	r2, #64	; 0x40
 800238e:	4965      	ldr	r1, [pc, #404]	; (8002524 <main+0x208>)
 8002390:	4618      	mov	r0, r3
 8002392:	f000 f937 	bl	8002604 <GpioTimePacket_Init>
	MCU_HEARTBEAT_LED_Pin);
	TimerPacket_Init(&timerpacket_ltc1, LTC_DELAY1);
 8002396:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800239a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800239e:	4618      	mov	r0, r3
 80023a0:	f000 f970 	bl	8002684 <TimerPacket_Init>
	TimerPacket_Init(&timerpacket_ltc2, LTC_DELAY2);
 80023a4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80023a8:	2100      	movs	r1, #0
 80023aa:	4618      	mov	r0, r3
 80023ac:	f000 f96a 	bl	8002684 <TimerPacket_Init>
	TimerPacket_Init(&timerpacket_can1, CAN1_DELAY);
 80023b0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80023b4:	2164      	movs	r1, #100	; 0x64
 80023b6:	4618      	mov	r0, r3
 80023b8:	f000 f964 	bl	8002684 <TimerPacket_Init>
	TimerPacket_Init(&timerpacket_safety, SAFETY_DELAY);
 80023bc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80023c0:	2132      	movs	r1, #50	; 0x32
 80023c2:	4618      	mov	r0, r3
 80023c4:	f000 f95e 	bl	8002684 <TimerPacket_Init>
	//Pull SPI1 nCS HIGH (deselect)
	LTC_nCS_High();
 80023c8:	f000 fc52 	bl	8002c70 <LTC_nCS_High>
	LTC_Set_Num_Devices(NUM_DEVICES);
 80023cc:	2001      	movs	r0, #1
 80023ce:	f7fe ffed 	bl	80013ac <LTC_Set_Num_Devices>
	LTC_Set_Num_Series_Groups(NUM_CELL_SERIES_GROUP);
 80023d2:	200c      	movs	r0, #12
 80023d4:	f7ff f806 	bl	80013e4 <LTC_Set_Num_Series_Groups>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	uint8_t tempindex = 0;
 80023d8:	2300      	movs	r3, #0
 80023da:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	uint8_t indexpause = 8;
 80023de:	2308      	movs	r3, #8
 80023e0:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
	uint8_t loop_count = 3;
 80023e4:	2303      	movs	r3, #3
 80023e6:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		GpioFixedToggle(&tp_led_heartbeat, LED_HEARTBEAT_DELAY_MS);
 80023ea:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80023ee:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80023f2:	4618      	mov	r0, r3
 80023f4:	f000 f923 	bl	800263e <GpioFixedToggle>
		if (TimerPacket_FixedPulse(&timerpacket_ltc1)) {
 80023f8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80023fc:	4618      	mov	r0, r3
 80023fe:	f000 f954 	bl	80026aa <TimerPacket_FixedPulse>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d005      	beq.n	8002414 <main+0xf8>
			LTC_Wakeup_Sleep();
 8002408:	f7ff f830 	bl	800146c <LTC_Wakeup_Sleep>
			readVolt(modVoltage.cell_volt);
 800240c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800240e:	4618      	mov	r0, r3
 8002410:	f000 fa02 	bl	8002818 <readVolt>
			//print(NUM_CELLS, (uint16_t*) modVoltage.cell_volt);
		}

		if (TimerPacket_FixedPulse(&timerpacket_ltc2)) {
 8002414:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002418:	4618      	mov	r0, r3
 800241a:	f000 f946 	bl	80026aa <TimerPacket_FixedPulse>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d039      	beq.n	8002498 <main+0x17c>
			//start sending to mux to read temperatures
			LTC_Wakeup_Sleep();
 8002424:	f7ff f822 	bl	800146c <LTC_Wakeup_Sleep>
			for (uint8_t i = tempindex; i < indexpause; i++) {
 8002428:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800242c:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
 8002430:	e00e      	b.n	8002450 <main+0x134>
				readTemp(i, modVoltage.cell_temp, modVoltage.read_auxreg);
 8002432:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002434:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002436:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800243a:	4618      	mov	r0, r3
 800243c:	f000 fa02 	bl	8002844 <readTemp>
				HAL_Delay(100);
 8002440:	2064      	movs	r0, #100	; 0x64
 8002442:	f000 fda9 	bl	8002f98 <HAL_Delay>
			for (uint8_t i = tempindex; i < indexpause; i++) {
 8002446:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800244a:	3301      	adds	r3, #1
 800244c:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
 8002450:	f897 2084 	ldrb.w	r2, [r7, #132]	; 0x84
 8002454:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8002458:	429a      	cmp	r2, r3
 800245a:	d3ea      	bcc.n	8002432 <main+0x116>
			}
			if (indexpause == 8) {
 800245c:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8002460:	2b08      	cmp	r3, #8
 8002462:	d106      	bne.n	8002472 <main+0x156>
				tempindex = 8;
 8002464:	2308      	movs	r3, #8
 8002466:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				indexpause = 12;
 800246a:	230c      	movs	r3, #12
 800246c:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 8002470:	e009      	b.n	8002486 <main+0x16a>
			} else if (indexpause == 12) {
 8002472:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8002476:	2b0c      	cmp	r3, #12
 8002478:	d105      	bne.n	8002486 <main+0x16a>
				indexpause = 8;
 800247a:	2308      	movs	r3, #8
 800247c:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
				tempindex = 0;
 8002480:	2300      	movs	r3, #0
 8002482:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			}
			HAL_Delay(2300);
 8002486:	f640 00fc 	movw	r0, #2300	; 0x8fc
 800248a:	f000 fd85 	bl	8002f98 <HAL_Delay>
			print(NUM_THERM_TOTAL, (uint16_t*) modVoltage.cell_temp);
 800248e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002490:	4619      	mov	r1, r3
 8002492:	200c      	movs	r0, #12
 8002494:	f000 fa22 	bl	80028dc <print>
		}

		if(loop_count == 0){
 8002498:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 800249c:	2b00      	cmp	r3, #0
 800249e:	d11c      	bne.n	80024da <main+0x1be>
			if(TimerPacket_FixedPulse(&timerpacket_safety)){
 80024a0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80024a4:	4618      	mov	r0, r3
 80024a6:	f000 f900 	bl	80026aa <TimerPacket_FixedPulse>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d019      	beq.n	80024e4 <main+0x1c8>
				cellSummary(&modVoltage);
 80024b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024b4:	4618      	mov	r0, r3
 80024b6:	f000 fa8b 	bl	80029d0 <cellSummary>
				fault_and_warning(&modVoltage,&safetyFaults, &safetyWarnings);
 80024ba:	1dba      	adds	r2, r7, #6
 80024bc:	1df9      	adds	r1, r7, #7
 80024be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024c2:	4618      	mov	r0, r3
 80024c4:	f000 fb08 	bl	8002ad8 <fault_and_warning>
 				if(safetyFaults != 0){
 80024c8:	79fb      	ldrb	r3, [r7, #7]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d00a      	beq.n	80024e4 <main+0x1c8>
					HAL_GPIO_WritePin(Fault_GPIO_Port, Fault_Pin, GPIO_PIN_SET);
 80024ce:	2201      	movs	r2, #1
 80024d0:	2102      	movs	r1, #2
 80024d2:	4815      	ldr	r0, [pc, #84]	; (8002528 <main+0x20c>)
 80024d4:	f001 fc5a 	bl	8003d8c <HAL_GPIO_WritePin>
 80024d8:	e004      	b.n	80024e4 <main+0x1c8>
				}

			}
		}
		else{
			loop_count--;
 80024da:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 80024de:	3b01      	subs	r3, #1
 80024e0:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
		// TODO: add if statement for if safetyChecker has a single bit flip for first 8 bits?




		if (TimerPacket_FixedPulse(&timerpacket_can1)) {
 80024e4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80024e8:	4618      	mov	r0, r3
 80024ea:	f000 f8de 	bl	80026aa <TimerPacket_FixedPulse>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	f43f af7a 	beq.w	80023ea <main+0xce>
//			CAN1_Send_Safety_Checker(&msg,&safetyChecker);
			CAN1_Send_Cell_Summary(&msg, &modVoltage);
 80024f6:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80024fa:	f107 0308 	add.w	r3, r7, #8
 80024fe:	4611      	mov	r1, r2
 8002500:	4618      	mov	r0, r3
 8002502:	f7ff fe06 	bl	8002112 <CAN1_Send_Cell_Summary>
			CAN1_Send_Voltage(&msg, modVoltage.cell_volt);
 8002506:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002508:	f107 0308 	add.w	r3, r7, #8
 800250c:	4611      	mov	r1, r2
 800250e:	4618      	mov	r0, r3
 8002510:	f7ff fce3 	bl	8001eda <CAN1_Send_Voltage>
			CAN1_Send_Temperature(&msg, modVoltage.cell_temp);
 8002514:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002516:	f107 0308 	add.w	r3, r7, #8
 800251a:	4611      	mov	r1, r2
 800251c:	4618      	mov	r0, r3
 800251e:	f7ff fd69 	bl	8001ff4 <CAN1_Send_Temperature>
		GpioFixedToggle(&tp_led_heartbeat, LED_HEARTBEAT_DELAY_MS);
 8002522:	e762      	b.n	80023ea <main+0xce>
 8002524:	40011000 	.word	0x40011000
 8002528:	40010c00 	.word	0x40010c00

0800252c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b09c      	sub	sp, #112	; 0x70
 8002530:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002532:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002536:	2238      	movs	r2, #56	; 0x38
 8002538:	2100      	movs	r1, #0
 800253a:	4618      	mov	r0, r3
 800253c:	f007 fde4 	bl	800a108 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002540:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002544:	2200      	movs	r2, #0
 8002546:	601a      	str	r2, [r3, #0]
 8002548:	605a      	str	r2, [r3, #4]
 800254a:	609a      	str	r2, [r3, #8]
 800254c:	60da      	str	r2, [r3, #12]
 800254e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002550:	1d3b      	adds	r3, r7, #4
 8002552:	2220      	movs	r2, #32
 8002554:	2100      	movs	r1, #0
 8002556:	4618      	mov	r0, r3
 8002558:	f007 fdd6 	bl	800a108 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800255c:	2301      	movs	r3, #1
 800255e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002560:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002564:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV5;
 8002566:	2304      	movs	r3, #4
 8002568:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800256a:	2301      	movs	r3, #1
 800256c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_PLL2;
 800256e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002572:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002574:	2302      	movs	r3, #2
 8002576:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002578:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800257c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800257e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002582:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL2_ON;
 8002584:	2302      	movs	r3, #2
 8002586:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL2.PLL2MUL = RCC_PLL2_MUL8;
 8002588:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800258c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL2.HSEPrediv2Value = RCC_HSE_PREDIV2_DIV5;
 800258e:	2340      	movs	r3, #64	; 0x40
 8002590:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002592:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002596:	4618      	mov	r0, r3
 8002598:	f002 fd5a 	bl	8005050 <HAL_RCC_OscConfig>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d001      	beq.n	80025a6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80025a2:	f000 f89f 	bl	80026e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025a6:	230f      	movs	r3, #15
 80025a8:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025aa:	2302      	movs	r3, #2
 80025ac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025ae:	2300      	movs	r3, #0
 80025b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80025b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80025b8:	2300      	movs	r3, #0
 80025ba:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80025bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025c0:	2102      	movs	r1, #2
 80025c2:	4618      	mov	r0, r3
 80025c4:	f003 f85a 	bl	800567c <HAL_RCC_ClockConfig>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80025ce:	f000 f889 	bl	80026e4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 80025d2:	2312      	movs	r3, #18
 80025d4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80025d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025da:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV3;
 80025dc:	2300      	movs	r3, #0
 80025de:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025e0:	1d3b      	adds	r3, r7, #4
 80025e2:	4618      	mov	r0, r3
 80025e4:	f003 fa18 	bl	8005a18 <HAL_RCCEx_PeriphCLKConfig>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80025ee:	f000 f879 	bl	80026e4 <Error_Handler>
  }

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 80025f2:	4b03      	ldr	r3, [pc, #12]	; (8002600 <SystemClock_Config+0xd4>)
 80025f4:	2201      	movs	r2, #1
 80025f6:	601a      	str	r2, [r3, #0]
}
 80025f8:	bf00      	nop
 80025fa:	3770      	adds	r7, #112	; 0x70
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	42420070 	.word	0x42420070

08002604 <GpioTimePacket_Init>:

/* USER CODE BEGIN 4 */
//Initialize struct values
//Will initialize GPIO to LOW!
void GpioTimePacket_Init(GpioTimePacket *gtp, GPIO_TypeDef *port, uint16_t pin) {
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	4613      	mov	r3, r2
 8002610:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(port, pin, GPIO_PIN_RESET); //Set GPIO LOW
 8002612:	88fb      	ldrh	r3, [r7, #6]
 8002614:	2200      	movs	r2, #0
 8002616:	4619      	mov	r1, r3
 8002618:	68b8      	ldr	r0, [r7, #8]
 800261a:	f001 fbb7 	bl	8003d8c <HAL_GPIO_WritePin>
	gtp->gpio_port = port;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	68ba      	ldr	r2, [r7, #8]
 8002622:	601a      	str	r2, [r3, #0]
	gtp->gpio_pin = pin;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	88fa      	ldrh	r2, [r7, #6]
 8002628:	809a      	strh	r2, [r3, #4]
	gtp->ts_prev = 0; //Init to 0
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2200      	movs	r2, #0
 800262e:	609a      	str	r2, [r3, #8]
	gtp->ts_curr = 0; //Init to 0
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2200      	movs	r2, #0
 8002634:	60da      	str	r2, [r3, #12]
}
 8002636:	bf00      	nop
 8002638:	3710      	adds	r7, #16
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}

0800263e <GpioFixedToggle>:
//update_ms = update after X ms
void GpioFixedToggle(GpioTimePacket *gtp, uint16_t update_ms) {
 800263e:	b580      	push	{r7, lr}
 8002640:	b082      	sub	sp, #8
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]
 8002646:	460b      	mov	r3, r1
 8002648:	807b      	strh	r3, [r7, #2]
	gtp->ts_curr = HAL_GetTick(); //Record current timestamp
 800264a:	f000 fc9b 	bl	8002f84 <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	60da      	str	r2, [r3, #12]
	if (gtp->ts_curr - gtp->ts_prev > update_ms) {
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	68da      	ldr	r2, [r3, #12]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	1ad2      	subs	r2, r2, r3
 800265e:	887b      	ldrh	r3, [r7, #2]
 8002660:	429a      	cmp	r2, r3
 8002662:	d90b      	bls.n	800267c <GpioFixedToggle+0x3e>
		HAL_GPIO_TogglePin(gtp->gpio_port, gtp->gpio_pin); // Toggle GPIO
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	889b      	ldrh	r3, [r3, #4]
 800266c:	4619      	mov	r1, r3
 800266e:	4610      	mov	r0, r2
 8002670:	f001 fba4 	bl	8003dbc <HAL_GPIO_TogglePin>
		gtp->ts_prev = gtp->ts_curr;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	68da      	ldr	r2, [r3, #12]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	609a      	str	r2, [r3, #8]
	}
}
 800267c:	bf00      	nop
 800267e:	3708      	adds	r7, #8
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}

08002684 <TimerPacket_Init>:
//Initialize struct values
//Will initialize GPIO to LOW!
void TimerPacket_Init(TimerPacket *tp, uint32_t delay) {
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
	tp->ts_prev = 0;		//Init to 0
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	601a      	str	r2, [r3, #0]
	tp->ts_curr = 0; 		//Init to 0
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	605a      	str	r2, [r3, #4]
	tp->delay = delay;	//Init to user value
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	683a      	ldr	r2, [r7, #0]
 800269e:	609a      	str	r2, [r3, #8]
}
 80026a0:	bf00      	nop
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bc80      	pop	{r7}
 80026a8:	4770      	bx	lr

080026aa <TimerPacket_FixedPulse>:
//update_ms = update after X ms
uint8_t TimerPacket_FixedPulse(TimerPacket *tp) {
 80026aa:	b580      	push	{r7, lr}
 80026ac:	b082      	sub	sp, #8
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
	tp->ts_curr = HAL_GetTick(); //Record current timestamp
 80026b2:	f000 fc67 	bl	8002f84 <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	605a      	str	r2, [r3, #4]
	if (tp->ts_curr - tp->ts_prev > tp->delay) {
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685a      	ldr	r2, [r3, #4]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	1ad2      	subs	r2, r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d905      	bls.n	80026da <TimerPacket_FixedPulse+0x30>
		tp->ts_prev = tp->ts_curr; //Update prev timestamp to current
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685a      	ldr	r2, [r3, #4]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	601a      	str	r2, [r3, #0]
		return 1; //Enact event (time interval is a go)
 80026d6:	2301      	movs	r3, #1
 80026d8:	e000      	b.n	80026dc <TimerPacket_FixedPulse+0x32>
	}
	return 0; //Do not enact event
 80026da:	2300      	movs	r3, #0
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3708      	adds	r7, #8
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026e8:	b672      	cpsid	i
}
 80026ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80026ec:	e7fe      	b.n	80026ec <Error_Handler+0x8>
	...

080026f0 <getActualTemps>:
		0x99, 0x7F, 0xF9 }, { 0x69, 0x28, 0x0F, 0x89, 0x7F, 0xF9 }, { 0x69,
		0x08, 0x0F, 0xF9, 0x7F, 0xF9 }, { 0x69, 0x08, 0x0F, 0xE9, 0x7F, 0xF9 },
		{ 0x69, 0x08, 0x0F, 0xD9, 0x7F, 0xF9 }, { 0x69, 0x08, 0x0F, 0xC9, 0x7F, 0xF9 } };

void getActualTemps(uint8_t dev_idx, uint8_t tempindex, uint16_t *actual_temp,
		uint16_t data) {
 80026f0:	b590      	push	{r4, r7, lr}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	603a      	str	r2, [r7, #0]
 80026f8:	461a      	mov	r2, r3
 80026fa:	4603      	mov	r3, r0
 80026fc:	71fb      	strb	r3, [r7, #7]
 80026fe:	460b      	mov	r3, r1
 8002700:	71bb      	strb	r3, [r7, #6]
 8002702:	4613      	mov	r3, r2
 8002704:	80bb      	strh	r3, [r7, #4]
	static float scalar;
	static float steinhart;
	scalar = 30000.0f / (float) (data) - 1.0f;
 8002706:	88bb      	ldrh	r3, [r7, #4]
 8002708:	4618      	mov	r0, r3
 800270a:	f7fe fb07 	bl	8000d1c <__aeabi_ui2f>
 800270e:	4603      	mov	r3, r0
 8002710:	4619      	mov	r1, r3
 8002712:	483a      	ldr	r0, [pc, #232]	; (80027fc <getActualTemps+0x10c>)
 8002714:	f7fe fc0e 	bl	8000f34 <__aeabi_fdiv>
 8002718:	4603      	mov	r3, r0
 800271a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800271e:	4618      	mov	r0, r3
 8002720:	f7fe fa4a 	bl	8000bb8 <__aeabi_fsub>
 8002724:	4603      	mov	r3, r0
 8002726:	461a      	mov	r2, r3
 8002728:	4b35      	ldr	r3, [pc, #212]	; (8002800 <getActualTemps+0x110>)
 800272a:	601a      	str	r2, [r3, #0]
	scalar = (float) ntcSeriesResistance / scalar;
 800272c:	4b34      	ldr	r3, [pc, #208]	; (8002800 <getActualTemps+0x110>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4619      	mov	r1, r3
 8002732:	4834      	ldr	r0, [pc, #208]	; (8002804 <getActualTemps+0x114>)
 8002734:	f7fe fbfe 	bl	8000f34 <__aeabi_fdiv>
 8002738:	4603      	mov	r3, r0
 800273a:	461a      	mov	r2, r3
 800273c:	4b30      	ldr	r3, [pc, #192]	; (8002800 <getActualTemps+0x110>)
 800273e:	601a      	str	r2, [r3, #0]
	steinhart = scalar / (float) ntcNominal;               // (R/Ro)
 8002740:	4b2f      	ldr	r3, [pc, #188]	; (8002800 <getActualTemps+0x110>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	492f      	ldr	r1, [pc, #188]	; (8002804 <getActualTemps+0x114>)
 8002746:	4618      	mov	r0, r3
 8002748:	f7fe fbf4 	bl	8000f34 <__aeabi_fdiv>
 800274c:	4603      	mov	r3, r0
 800274e:	461a      	mov	r2, r3
 8002750:	4b2d      	ldr	r3, [pc, #180]	; (8002808 <getActualTemps+0x118>)
 8002752:	601a      	str	r2, [r3, #0]
	steinhart = log(steinhart);                           // ln(R/Ro)
 8002754:	4b2c      	ldr	r3, [pc, #176]	; (8002808 <getActualTemps+0x118>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4618      	mov	r0, r3
 800275a:	f7fd fed1 	bl	8000500 <__aeabi_f2d>
 800275e:	4602      	mov	r2, r0
 8002760:	460b      	mov	r3, r1
 8002762:	4610      	mov	r0, r2
 8002764:	4619      	mov	r1, r3
 8002766:	f008 f8c9 	bl	800a8fc <log>
 800276a:	4602      	mov	r2, r0
 800276c:	460b      	mov	r3, r1
 800276e:	4610      	mov	r0, r2
 8002770:	4619      	mov	r1, r3
 8002772:	f7fe f9cd 	bl	8000b10 <__aeabi_d2f>
 8002776:	4603      	mov	r3, r0
 8002778:	4a23      	ldr	r2, [pc, #140]	; (8002808 <getActualTemps+0x118>)
 800277a:	6013      	str	r3, [r2, #0]
	steinhart /= (float) ntcBetaFactor;                    // 1/B * ln(R/Ro)
 800277c:	4b22      	ldr	r3, [pc, #136]	; (8002808 <getActualTemps+0x118>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4922      	ldr	r1, [pc, #136]	; (800280c <getActualTemps+0x11c>)
 8002782:	4618      	mov	r0, r3
 8002784:	f7fe fbd6 	bl	8000f34 <__aeabi_fdiv>
 8002788:	4603      	mov	r3, r0
 800278a:	461a      	mov	r2, r3
 800278c:	4b1e      	ldr	r3, [pc, #120]	; (8002808 <getActualTemps+0x118>)
 800278e:	601a      	str	r2, [r3, #0]
	steinhart += 1.0f / ((float) ntcNominalTemp + 273.15f);      // + (1/To)
 8002790:	4b1d      	ldr	r3, [pc, #116]	; (8002808 <getActualTemps+0x118>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	491e      	ldr	r1, [pc, #120]	; (8002810 <getActualTemps+0x120>)
 8002796:	4618      	mov	r0, r3
 8002798:	f7fe fa10 	bl	8000bbc <__addsf3>
 800279c:	4603      	mov	r3, r0
 800279e:	461a      	mov	r2, r3
 80027a0:	4b19      	ldr	r3, [pc, #100]	; (8002808 <getActualTemps+0x118>)
 80027a2:	601a      	str	r2, [r3, #0]
	steinhart = 1.0f / steinhart;                         // Invert
 80027a4:	4b18      	ldr	r3, [pc, #96]	; (8002808 <getActualTemps+0x118>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4619      	mov	r1, r3
 80027aa:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80027ae:	f7fe fbc1 	bl	8000f34 <__aeabi_fdiv>
 80027b2:	4603      	mov	r3, r0
 80027b4:	461a      	mov	r2, r3
 80027b6:	4b14      	ldr	r3, [pc, #80]	; (8002808 <getActualTemps+0x118>)
 80027b8:	601a      	str	r2, [r3, #0]
	steinhart -= 273.15f;    // convert to degree
 80027ba:	4b13      	ldr	r3, [pc, #76]	; (8002808 <getActualTemps+0x118>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4915      	ldr	r1, [pc, #84]	; (8002814 <getActualTemps+0x124>)
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7fe f9f9 	bl	8000bb8 <__aeabi_fsub>
 80027c6:	4603      	mov	r3, r0
 80027c8:	461a      	mov	r2, r3
 80027ca:	4b0f      	ldr	r3, [pc, #60]	; (8002808 <getActualTemps+0x118>)
 80027cc:	601a      	str	r2, [r3, #0]

	actual_temp[dev_idx * NUM_THERM_PER_MOD + tempindex] = steinhart;
 80027ce:	4b0e      	ldr	r3, [pc, #56]	; (8002808 <getActualTemps+0x118>)
 80027d0:	6819      	ldr	r1, [r3, #0]
 80027d2:	79fa      	ldrb	r2, [r7, #7]
 80027d4:	4613      	mov	r3, r2
 80027d6:	005b      	lsls	r3, r3, #1
 80027d8:	4413      	add	r3, r2
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	461a      	mov	r2, r3
 80027de:	79bb      	ldrb	r3, [r7, #6]
 80027e0:	4413      	add	r3, r2
 80027e2:	005b      	lsls	r3, r3, #1
 80027e4:	683a      	ldr	r2, [r7, #0]
 80027e6:	18d4      	adds	r4, r2, r3
 80027e8:	4608      	mov	r0, r1
 80027ea:	f7fe fc3f 	bl	800106c <__aeabi_f2uiz>
 80027ee:	4603      	mov	r3, r0
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	8023      	strh	r3, [r4, #0]

}
 80027f4:	bf00      	nop
 80027f6:	370c      	adds	r7, #12
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd90      	pop	{r4, r7, pc}
 80027fc:	46ea6000 	.word	0x46ea6000
 8002800:	200002bc 	.word	0x200002bc
 8002804:	47435000 	.word	0x47435000
 8002808:	200002c0 	.word	0x200002c0
 800280c:	45534000 	.word	0x45534000
 8002810:	3b5bcf0f 	.word	0x3b5bcf0f
 8002814:	43889333 	.word	0x43889333

08002818 <readVolt>:

void readVolt(uint16_t *read_volt) {
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
	LTC_Wakeup_Idle();
 8002820:	f7fe fe00 	bl	8001424 <LTC_Wakeup_Idle>
	LTC_ADCV(MD_7KHZ_3KHZ, DCP_DISABLED, CELL_CH_ALL);
 8002824:	2302      	movs	r3, #2
 8002826:	2100      	movs	r1, #0
 8002828:	2200      	movs	r2, #0
 800282a:	4618      	mov	r0, r3
 800282c:	f7ff f898 	bl	8001960 <LTC_ADCV>
	LTC_PollAdc();
 8002830:	f7ff f91c 	bl	8001a6c <LTC_PollAdc>
	LTC_ReadRawCellVoltages((uint16_t*) read_volt);
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f7fe fe3b 	bl	80014b0 <LTC_ReadRawCellVoltages>
}
 800283a:	bf00      	nop
 800283c:	3708      	adds	r7, #8
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
	...

08002844 <readTemp>:

void readTemp(uint8_t tempindex, uint16_t *read_temp, uint16_t *read_auxreg) {
 8002844:	b580      	push	{r7, lr}
 8002846:	b086      	sub	sp, #24
 8002848:	af00      	add	r7, sp, #0
 800284a:	4603      	mov	r3, r0
 800284c:	60b9      	str	r1, [r7, #8]
 800284e:	607a      	str	r2, [r7, #4]
 8002850:	73fb      	strb	r3, [r7, #15]
	LTC_Wakeup_Idle();
 8002852:	f7fe fde7 	bl	8001424 <LTC_Wakeup_Idle>
	ltc6811_wrcomm(NUM_DEVICES, BMS_IC[tempindex]);
 8002856:	7bfa      	ldrb	r2, [r7, #15]
 8002858:	4613      	mov	r3, r2
 800285a:	005b      	lsls	r3, r3, #1
 800285c:	4413      	add	r3, r2
 800285e:	005b      	lsls	r3, r3, #1
 8002860:	4a1d      	ldr	r2, [pc, #116]	; (80028d8 <readTemp+0x94>)
 8002862:	4413      	add	r3, r2
 8002864:	4619      	mov	r1, r3
 8002866:	2001      	movs	r0, #1
 8002868:	f7fe fef2 	bl	8001650 <ltc6811_wrcomm>
	LTC_Wakeup_Idle();
 800286c:	f7fe fdda 	bl	8001424 <LTC_Wakeup_Idle>
	ltc6811_stcomm(2);
 8002870:	2002      	movs	r0, #2
 8002872:	f7fe ff69 	bl	8001748 <ltc6811_stcomm>
	//end sending to mux to read temperatures

	LTC_Wakeup_Idle();
 8002876:	f7fe fdd5 	bl	8001424 <LTC_Wakeup_Idle>
	LTC_ADAX(MD_7KHZ_3KHZ, 1); //doing GPIO all conversion
 800287a:	2302      	movs	r3, #2
 800287c:	2101      	movs	r1, #1
 800287e:	4618      	mov	r0, r3
 8002880:	f7ff f8b4 	bl	80019ec <LTC_ADAX>
	LTC_PollAdc();
 8002884:	f7ff f8f2 	bl	8001a6c <LTC_PollAdc>
	if (!LTC_ReadRawCellTemps((uint16_t*) read_auxreg)) // Set to read back all aux registers
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f7fe ff9d 	bl	80017c8 <LTC_ReadRawCellTemps>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d11c      	bne.n	80028ce <readTemp+0x8a>
			{
		for (uint8_t dev_idx = 0; dev_idx < LTC_Get_Num_Devices(); dev_idx++) {
 8002894:	2300      	movs	r3, #0
 8002896:	75fb      	strb	r3, [r7, #23]
 8002898:	e012      	b.n	80028c0 <readTemp+0x7c>
			// Assuming data format is [cell voltage, cell voltage, ..., PEC, PEC]
			// PEC for each device is the last two bytes of its data segment
			uint16_t data = read_auxreg[dev_idx * NUM_AUX_GROUP];
 800289a:	7dfa      	ldrb	r2, [r7, #23]
 800289c:	4613      	mov	r3, r2
 800289e:	005b      	lsls	r3, r3, #1
 80028a0:	4413      	add	r3, r2
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	461a      	mov	r2, r3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4413      	add	r3, r2
 80028aa:	881b      	ldrh	r3, [r3, #0]
 80028ac:	82bb      	strh	r3, [r7, #20]
			//read_temp[dev_idx * NUM_THERM_PER_MOD + tempindex] = data;
			getActualTemps(dev_idx, tempindex, (uint16_t*) read_temp, data); //+5 because vref is the last reg
 80028ae:	8abb      	ldrh	r3, [r7, #20]
 80028b0:	7bf9      	ldrb	r1, [r7, #15]
 80028b2:	7df8      	ldrb	r0, [r7, #23]
 80028b4:	68ba      	ldr	r2, [r7, #8]
 80028b6:	f7ff ff1b 	bl	80026f0 <getActualTemps>
		for (uint8_t dev_idx = 0; dev_idx < LTC_Get_Num_Devices(); dev_idx++) {
 80028ba:	7dfb      	ldrb	r3, [r7, #23]
 80028bc:	3301      	adds	r3, #1
 80028be:	75fb      	strb	r3, [r7, #23]
 80028c0:	f7fe fd86 	bl	80013d0 <LTC_Get_Num_Devices>
 80028c4:	4603      	mov	r3, r0
 80028c6:	461a      	mov	r2, r3
 80028c8:	7dfb      	ldrb	r3, [r7, #23]
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d3e5      	bcc.n	800289a <readTemp+0x56>

		}
	}
}
 80028ce:	bf00      	nop
 80028d0:	3718      	adds	r7, #24
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	20000000 	.word	0x20000000

080028dc <print>:
 *      Author: karth
 */

#include "print.h"

void print(uint8_t len, uint16_t *read_temp) {
 80028dc:	b580      	push	{r7, lr}
 80028de:	f6ad 0d28 	subw	sp, sp, #2088	; 0x828
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	4602      	mov	r2, r0
 80028e6:	f607 0328 	addw	r3, r7, #2088	; 0x828
 80028ea:	f6a3 0328 	subw	r3, r3, #2088	; 0x828
 80028ee:	6019      	str	r1, [r3, #0]
 80028f0:	f607 0328 	addw	r3, r7, #2088	; 0x828
 80028f4:	f6a3 0321 	subw	r3, r3, #2081	; 0x821
 80028f8:	701a      	strb	r2, [r3, #0]
	char buf[20];
	char out_buf[2048] = "";
 80028fa:	f607 0328 	addw	r3, r7, #2088	; 0x828
 80028fe:	f6a3 0318 	subw	r3, r3, #2072	; 0x818
 8002902:	2200      	movs	r2, #0
 8002904:	601a      	str	r2, [r3, #0]
 8002906:	3304      	adds	r3, #4
 8002908:	f240 72fc 	movw	r2, #2044	; 0x7fc
 800290c:	2100      	movs	r1, #0
 800290e:	4618      	mov	r0, r3
 8002910:	f007 fbfa 	bl	800a108 <memset>
	char char_to_str[2];
	char_to_str[0] = '\n';
 8002914:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8002918:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 800291c:	220a      	movs	r2, #10
 800291e:	701a      	strb	r2, [r3, #0]
	char_to_str[1] = '\0';
 8002920:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8002924:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 8002928:	2200      	movs	r2, #0
 800292a:	705a      	strb	r2, [r3, #1]

	for (uint8_t i = 0; i < len; i++) {
 800292c:	2300      	movs	r3, #0
 800292e:	f887 3827 	strb.w	r3, [r7, #2087]	; 0x827
 8002932:	e027      	b.n	8002984 <print+0xa8>
		sprintf(buf, "C%u:%u/10000", i + 1, read_temp[i]);
 8002934:	f897 3827 	ldrb.w	r3, [r7, #2087]	; 0x827
 8002938:	1c59      	adds	r1, r3, #1
 800293a:	f897 3827 	ldrb.w	r3, [r7, #2087]	; 0x827
 800293e:	005b      	lsls	r3, r3, #1
 8002940:	f607 0228 	addw	r2, r7, #2088	; 0x828
 8002944:	f6a2 0228 	subw	r2, r2, #2088	; 0x828
 8002948:	6812      	ldr	r2, [r2, #0]
 800294a:	4413      	add	r3, r2
 800294c:	881b      	ldrh	r3, [r3, #0]
 800294e:	f507 6001 	add.w	r0, r7, #2064	; 0x810
 8002952:	460a      	mov	r2, r1
 8002954:	491d      	ldr	r1, [pc, #116]	; (80029cc <print+0xf0>)
 8002956:	f007 fbb7 	bl	800a0c8 <siprintf>
		strncat(out_buf, buf, 20);
 800295a:	f507 6101 	add.w	r1, r7, #2064	; 0x810
 800295e:	f107 0310 	add.w	r3, r7, #16
 8002962:	2214      	movs	r2, #20
 8002964:	4618      	mov	r0, r3
 8002966:	f007 fbd7 	bl	800a118 <strncat>
		strncat(out_buf, char_to_str, 2);
 800296a:	f107 010c 	add.w	r1, r7, #12
 800296e:	f107 0310 	add.w	r3, r7, #16
 8002972:	2202      	movs	r2, #2
 8002974:	4618      	mov	r0, r3
 8002976:	f007 fbcf 	bl	800a118 <strncat>
	for (uint8_t i = 0; i < len; i++) {
 800297a:	f897 3827 	ldrb.w	r3, [r7, #2087]	; 0x827
 800297e:	3301      	adds	r3, #1
 8002980:	f887 3827 	strb.w	r3, [r7, #2087]	; 0x827
 8002984:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8002988:	f6a3 0321 	subw	r3, r3, #2081	; 0x821
 800298c:	f897 2827 	ldrb.w	r2, [r7, #2087]	; 0x827
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	429a      	cmp	r2, r3
 8002994:	d3ce      	bcc.n	8002934 <print+0x58>
	}
	strncat(out_buf, char_to_str, 2);
 8002996:	f107 010c 	add.w	r1, r7, #12
 800299a:	f107 0310 	add.w	r3, r7, #16
 800299e:	2202      	movs	r2, #2
 80029a0:	4618      	mov	r0, r3
 80029a2:	f007 fbb9 	bl	800a118 <strncat>
	USB_Transmit(out_buf, strlen(out_buf));
 80029a6:	f107 0310 	add.w	r3, r7, #16
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7fd fc3c 	bl	8000228 <strlen>
 80029b0:	4603      	mov	r3, r0
 80029b2:	b29a      	uxth	r2, r3
 80029b4:	f107 0310 	add.w	r3, r7, #16
 80029b8:	4611      	mov	r1, r2
 80029ba:	4618      	mov	r0, r3
 80029bc:	f006 fdd1 	bl	8009562 <USB_Transmit>
}
 80029c0:	bf00      	nop
 80029c2:	f607 0728 	addw	r7, r7, #2088	; 0x828
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	0800acec 	.word	0x0800acec

080029d0 <cellSummary>:
#include "safety.h"
#include "usbd_cdc_if.h"


void cellSummary(struct batteryModuleVoltage *batt){
 80029d0:	b480      	push	{r7}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
	batt->cell_volt_highest = batt->cell_volt[0];
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	881a      	ldrh	r2, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	815a      	strh	r2, [r3, #10]
	batt->cell_volt_lowest = batt->cell_volt[0];
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	881a      	ldrh	r2, [r3, #0]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	811a      	strh	r2, [r3, #8]
	batt->cell_temp_highest = batt->cell_temp[0];
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	881a      	ldrh	r2, [r3, #0]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	81da      	strh	r2, [r3, #14]
	batt->cell_temp_lowest = batt->cell_temp[0];
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	881a      	ldrh	r2, [r3, #0]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	819a      	strh	r2, [r3, #12]

	for(int i = 1; i < NUM_CELLS; i++){
 8002a00:	2301      	movs	r3, #1
 8002a02:	60fb      	str	r3, [r7, #12]
 8002a04:	e032      	b.n	8002a6c <cellSummary+0x9c>

		if(batt->cell_volt[i] > batt->cell_volt_highest){
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	005b      	lsls	r3, r3, #1
 8002a0e:	4413      	add	r3, r2
 8002a10:	881a      	ldrh	r2, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	895b      	ldrh	r3, [r3, #10]
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d907      	bls.n	8002a2a <cellSummary+0x5a>
			batt->cell_volt_highest = batt->cell_volt[i];
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	005b      	lsls	r3, r3, #1
 8002a22:	4413      	add	r3, r2
 8002a24:	881a      	ldrh	r2, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	815a      	strh	r2, [r3, #10]
		}

		if(batt->cell_volt[i] < batt->cell_volt_lowest){
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	005b      	lsls	r3, r3, #1
 8002a32:	4413      	add	r3, r2
 8002a34:	881a      	ldrh	r2, [r3, #0]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	891b      	ldrh	r3, [r3, #8]
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d207      	bcs.n	8002a4e <cellSummary+0x7e>
			batt->cell_temp_lowest = batt->cell_volt[i];
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	4413      	add	r3, r2
 8002a48:	881a      	ldrh	r2, [r3, #0]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	819a      	strh	r2, [r3, #12]
		}

		batt->pack_voltage += batt->cell_volt[i];
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	8a1a      	ldrh	r2, [r3, #16]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6819      	ldr	r1, [r3, #0]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	440b      	add	r3, r1
 8002a5c:	881b      	ldrh	r3, [r3, #0]
 8002a5e:	4413      	add	r3, r2
 8002a60:	b29a      	uxth	r2, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	821a      	strh	r2, [r3, #16]
	for(int i = 1; i < NUM_CELLS; i++){
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	3301      	adds	r3, #1
 8002a6a:	60fb      	str	r3, [r7, #12]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2b0b      	cmp	r3, #11
 8002a70:	ddc9      	ble.n	8002a06 <cellSummary+0x36>
	}

	for(int i = 0; i < NUM_THERM_TOTAL; i++){
 8002a72:	2300      	movs	r3, #0
 8002a74:	60bb      	str	r3, [r7, #8]
 8002a76:	e026      	b.n	8002ac6 <cellSummary+0xf6>
		if(batt->cell_temp_highest < batt->cell_temp[i]){
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	89da      	ldrh	r2, [r3, #14]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6859      	ldr	r1, [r3, #4]
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	005b      	lsls	r3, r3, #1
 8002a84:	440b      	add	r3, r1
 8002a86:	881b      	ldrh	r3, [r3, #0]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d207      	bcs.n	8002a9c <cellSummary+0xcc>
			batt->cell_temp_highest = batt->cell_temp[i];
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	685a      	ldr	r2, [r3, #4]
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	005b      	lsls	r3, r3, #1
 8002a94:	4413      	add	r3, r2
 8002a96:	881a      	ldrh	r2, [r3, #0]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	81da      	strh	r2, [r3, #14]
		}

		if(batt->cell_temp_lowest > batt->cell_temp[i]){
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	899a      	ldrh	r2, [r3, #12]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6859      	ldr	r1, [r3, #4]
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	005b      	lsls	r3, r3, #1
 8002aa8:	440b      	add	r3, r1
 8002aaa:	881b      	ldrh	r3, [r3, #0]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d907      	bls.n	8002ac0 <cellSummary+0xf0>
			batt->cell_temp_lowest = batt->cell_temp[i];
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685a      	ldr	r2, [r3, #4]
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	005b      	lsls	r3, r3, #1
 8002ab8:	4413      	add	r3, r2
 8002aba:	881a      	ldrh	r2, [r3, #0]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	819a      	strh	r2, [r3, #12]
	for(int i = 0; i < NUM_THERM_TOTAL; i++){
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	60bb      	str	r3, [r7, #8]
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	2b0b      	cmp	r3, #11
 8002aca:	ddd5      	ble.n	8002a78 <cellSummary+0xa8>
		}
	}

}
 8002acc:	bf00      	nop
 8002ace:	bf00      	nop
 8002ad0:	3714      	adds	r7, #20
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bc80      	pop	{r7}
 8002ad6:	4770      	bx	lr

08002ad8 <fault_and_warning>:


void fault_and_warning(struct batteryModuleVoltage *batt, uint8_t *fault, uint8_t *warnings){
 8002ad8:	b480      	push	{r7}
 8002ada:	b085      	sub	sp, #20
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	607a      	str	r2, [r7, #4]
//
//	if(batt->cell_volt_highest>= CELL_HIGH_VOLT_FAULT){
//		*fault |= 0b00010000;
//	}

	if(batt->cell_temp_highest >= CELL_HIGH_TEMP_FAULT){
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	89db      	ldrh	r3, [r3, #14]
 8002ae8:	2b3b      	cmp	r3, #59	; 0x3b
 8002aea:	d906      	bls.n	8002afa <fault_and_warning+0x22>
		*fault |= 0b00001000;
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	f043 0308 	orr.w	r3, r3, #8
 8002af4:	b2da      	uxtb	r2, r3
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	701a      	strb	r2, [r3, #0]
	if(batt->pack_voltage >=  PACK_HIGH_VOLT_WARNING){
		*warnings |= 0b10000000;
	}

	if(batt->pack_voltage <= PACK_LOW_VOLT_WARNING){
		*warnings |= 0b01000000;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b02:	b2da      	uxtb	r2, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	701a      	strb	r2, [r3, #0]
	}

	if(batt->cell_volt_lowest <= CELL_LOW_VOLT_WARNING){
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	891b      	ldrh	r3, [r3, #8]
 8002b0c:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8002b10:	d806      	bhi.n	8002b20 <fault_and_warning+0x48>
		*warnings |= 0b00100000;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	f043 0320 	orr.w	r3, r3, #32
 8002b1a:	b2da      	uxtb	r2, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	701a      	strb	r2, [r3, #0]
	}

	if(batt->cell_volt_highest >= CELL_HIGH_VOLT_WARNING){
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	895b      	ldrh	r3, [r3, #10]
 8002b24:	f24a 6203 	movw	r2, #42499	; 0xa603
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d906      	bls.n	8002b3a <fault_and_warning+0x62>
		*warnings |= 0b00010000;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	f043 0310 	orr.w	r3, r3, #16
 8002b34:	b2da      	uxtb	r2, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	701a      	strb	r2, [r3, #0]
	}

	if(batt->cell_temp_highest >= CELL_HIGH_TEMP_WARNING){
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	89db      	ldrh	r3, [r3, #14]
 8002b3e:	2b36      	cmp	r3, #54	; 0x36
 8002b40:	d906      	bls.n	8002b50 <fault_and_warning+0x78>
		*warnings |= 0b00001000;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	f043 0308 	orr.w	r3, r3, #8
 8002b4a:	b2da      	uxtb	r2, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	701a      	strb	r2, [r3, #0]
	}

	if(batt->cell_temp_lowest <= CELL_LOW_TEMP_WARNING){
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	899b      	ldrh	r3, [r3, #12]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d106      	bne.n	8002b66 <fault_and_warning+0x8e>
		*warnings |= 0b00000100;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	f043 0304 	orr.w	r3, r3, #4
 8002b60:	b2da      	uxtb	r2, r3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	701a      	strb	r2, [r3, #0]
	}
}
 8002b66:	bf00      	nop
 8002b68:	3714      	adds	r7, #20
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bc80      	pop	{r7}
 8002b6e:	4770      	bx	lr

08002b70 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002b74:	4b17      	ldr	r3, [pc, #92]	; (8002bd4 <MX_SPI1_Init+0x64>)
 8002b76:	4a18      	ldr	r2, [pc, #96]	; (8002bd8 <MX_SPI1_Init+0x68>)
 8002b78:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002b7a:	4b16      	ldr	r3, [pc, #88]	; (8002bd4 <MX_SPI1_Init+0x64>)
 8002b7c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002b80:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002b82:	4b14      	ldr	r3, [pc, #80]	; (8002bd4 <MX_SPI1_Init+0x64>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b88:	4b12      	ldr	r3, [pc, #72]	; (8002bd4 <MX_SPI1_Init+0x64>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b8e:	4b11      	ldr	r3, [pc, #68]	; (8002bd4 <MX_SPI1_Init+0x64>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b94:	4b0f      	ldr	r3, [pc, #60]	; (8002bd4 <MX_SPI1_Init+0x64>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002b9a:	4b0e      	ldr	r3, [pc, #56]	; (8002bd4 <MX_SPI1_Init+0x64>)
 8002b9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ba0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002ba2:	4b0c      	ldr	r3, [pc, #48]	; (8002bd4 <MX_SPI1_Init+0x64>)
 8002ba4:	2228      	movs	r2, #40	; 0x28
 8002ba6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002ba8:	4b0a      	ldr	r3, [pc, #40]	; (8002bd4 <MX_SPI1_Init+0x64>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002bae:	4b09      	ldr	r3, [pc, #36]	; (8002bd4 <MX_SPI1_Init+0x64>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002bb4:	4b07      	ldr	r3, [pc, #28]	; (8002bd4 <MX_SPI1_Init+0x64>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002bba:	4b06      	ldr	r3, [pc, #24]	; (8002bd4 <MX_SPI1_Init+0x64>)
 8002bbc:	220a      	movs	r2, #10
 8002bbe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002bc0:	4804      	ldr	r0, [pc, #16]	; (8002bd4 <MX_SPI1_Init+0x64>)
 8002bc2:	f003 f85b 	bl	8005c7c <HAL_SPI_Init>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d001      	beq.n	8002bd0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002bcc:	f7ff fd8a 	bl	80026e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002bd0:	bf00      	nop
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	200002c4 	.word	0x200002c4
 8002bd8:	40013000 	.word	0x40013000

08002bdc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b088      	sub	sp, #32
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002be4:	f107 0310 	add.w	r3, r7, #16
 8002be8:	2200      	movs	r2, #0
 8002bea:	601a      	str	r2, [r3, #0]
 8002bec:	605a      	str	r2, [r3, #4]
 8002bee:	609a      	str	r2, [r3, #8]
 8002bf0:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a1b      	ldr	r2, [pc, #108]	; (8002c64 <HAL_SPI_MspInit+0x88>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d12f      	bne.n	8002c5c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002bfc:	4b1a      	ldr	r3, [pc, #104]	; (8002c68 <HAL_SPI_MspInit+0x8c>)
 8002bfe:	699b      	ldr	r3, [r3, #24]
 8002c00:	4a19      	ldr	r2, [pc, #100]	; (8002c68 <HAL_SPI_MspInit+0x8c>)
 8002c02:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c06:	6193      	str	r3, [r2, #24]
 8002c08:	4b17      	ldr	r3, [pc, #92]	; (8002c68 <HAL_SPI_MspInit+0x8c>)
 8002c0a:	699b      	ldr	r3, [r3, #24]
 8002c0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c10:	60fb      	str	r3, [r7, #12]
 8002c12:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c14:	4b14      	ldr	r3, [pc, #80]	; (8002c68 <HAL_SPI_MspInit+0x8c>)
 8002c16:	699b      	ldr	r3, [r3, #24]
 8002c18:	4a13      	ldr	r2, [pc, #76]	; (8002c68 <HAL_SPI_MspInit+0x8c>)
 8002c1a:	f043 0304 	orr.w	r3, r3, #4
 8002c1e:	6193      	str	r3, [r2, #24]
 8002c20:	4b11      	ldr	r3, [pc, #68]	; (8002c68 <HAL_SPI_MspInit+0x8c>)
 8002c22:	699b      	ldr	r3, [r3, #24]
 8002c24:	f003 0304 	and.w	r3, r3, #4
 8002c28:	60bb      	str	r3, [r7, #8]
 8002c2a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002c2c:	23a0      	movs	r3, #160	; 0xa0
 8002c2e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c30:	2302      	movs	r3, #2
 8002c32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c34:	2303      	movs	r3, #3
 8002c36:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c38:	f107 0310 	add.w	r3, r7, #16
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	480b      	ldr	r0, [pc, #44]	; (8002c6c <HAL_SPI_MspInit+0x90>)
 8002c40:	f000 ff20 	bl	8003a84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002c44:	2340      	movs	r3, #64	; 0x40
 8002c46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c50:	f107 0310 	add.w	r3, r7, #16
 8002c54:	4619      	mov	r1, r3
 8002c56:	4805      	ldr	r0, [pc, #20]	; (8002c6c <HAL_SPI_MspInit+0x90>)
 8002c58:	f000 ff14 	bl	8003a84 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002c5c:	bf00      	nop
 8002c5e:	3720      	adds	r7, #32
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	40013000 	.word	0x40013000
 8002c68:	40021000 	.word	0x40021000
 8002c6c:	40010800 	.word	0x40010800

08002c70 <LTC_nCS_High>:
  /* USER CODE END SPI1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void LTC_nCS_High(void) {
 8002c70:	b580      	push	{r7, lr}
 8002c72:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTC_nCS_GPIO_Port, LTC_nCS_Pin, GPIO_PIN_SET); //Pull CS high
 8002c74:	2201      	movs	r2, #1
 8002c76:	2110      	movs	r1, #16
 8002c78:	4802      	ldr	r0, [pc, #8]	; (8002c84 <LTC_nCS_High+0x14>)
 8002c7a:	f001 f887 	bl	8003d8c <HAL_GPIO_WritePin>
}
 8002c7e:	bf00      	nop
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	40010800 	.word	0x40010800

08002c88 <LTC_nCS_Low>:
/* Pull nCS line to SPI1 LOW */
void LTC_nCS_Low(void) {
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTC_nCS_GPIO_Port, LTC_nCS_Pin, GPIO_PIN_RESET); //Pull CS high
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	2110      	movs	r1, #16
 8002c90:	4802      	ldr	r0, [pc, #8]	; (8002c9c <LTC_nCS_Low+0x14>)
 8002c92:	f001 f87b 	bl	8003d8c <HAL_GPIO_WritePin>
}
 8002c96:	bf00      	nop
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	40010800 	.word	0x40010800

08002ca0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b085      	sub	sp, #20
 8002ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002ca6:	4b15      	ldr	r3, [pc, #84]	; (8002cfc <HAL_MspInit+0x5c>)
 8002ca8:	699b      	ldr	r3, [r3, #24]
 8002caa:	4a14      	ldr	r2, [pc, #80]	; (8002cfc <HAL_MspInit+0x5c>)
 8002cac:	f043 0301 	orr.w	r3, r3, #1
 8002cb0:	6193      	str	r3, [r2, #24]
 8002cb2:	4b12      	ldr	r3, [pc, #72]	; (8002cfc <HAL_MspInit+0x5c>)
 8002cb4:	699b      	ldr	r3, [r3, #24]
 8002cb6:	f003 0301 	and.w	r3, r3, #1
 8002cba:	60bb      	str	r3, [r7, #8]
 8002cbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cbe:	4b0f      	ldr	r3, [pc, #60]	; (8002cfc <HAL_MspInit+0x5c>)
 8002cc0:	69db      	ldr	r3, [r3, #28]
 8002cc2:	4a0e      	ldr	r2, [pc, #56]	; (8002cfc <HAL_MspInit+0x5c>)
 8002cc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cc8:	61d3      	str	r3, [r2, #28]
 8002cca:	4b0c      	ldr	r3, [pc, #48]	; (8002cfc <HAL_MspInit+0x5c>)
 8002ccc:	69db      	ldr	r3, [r3, #28]
 8002cce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cd2:	607b      	str	r3, [r7, #4]
 8002cd4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002cd6:	4b0a      	ldr	r3, [pc, #40]	; (8002d00 <HAL_MspInit+0x60>)
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	60fb      	str	r3, [r7, #12]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002ce2:	60fb      	str	r3, [r7, #12]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002cea:	60fb      	str	r3, [r7, #12]
 8002cec:	4a04      	ldr	r2, [pc, #16]	; (8002d00 <HAL_MspInit+0x60>)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cf2:	bf00      	nop
 8002cf4:	3714      	adds	r7, #20
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bc80      	pop	{r7}
 8002cfa:	4770      	bx	lr
 8002cfc:	40021000 	.word	0x40021000
 8002d00:	40010000 	.word	0x40010000

08002d04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002d08:	e7fe      	b.n	8002d08 <NMI_Handler+0x4>

08002d0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d0a:	b480      	push	{r7}
 8002d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d0e:	e7fe      	b.n	8002d0e <HardFault_Handler+0x4>

08002d10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d10:	b480      	push	{r7}
 8002d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d14:	e7fe      	b.n	8002d14 <MemManage_Handler+0x4>

08002d16 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d16:	b480      	push	{r7}
 8002d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d1a:	e7fe      	b.n	8002d1a <BusFault_Handler+0x4>

08002d1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d20:	e7fe      	b.n	8002d20 <UsageFault_Handler+0x4>

08002d22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d22:	b480      	push	{r7}
 8002d24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d26:	bf00      	nop
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bc80      	pop	{r7}
 8002d2c:	4770      	bx	lr

08002d2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d2e:	b480      	push	{r7}
 8002d30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d32:	bf00      	nop
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bc80      	pop	{r7}
 8002d38:	4770      	bx	lr

08002d3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d3a:	b480      	push	{r7}
 8002d3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d3e:	bf00      	nop
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bc80      	pop	{r7}
 8002d44:	4770      	bx	lr

08002d46 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d46:	b580      	push	{r7, lr}
 8002d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d4a:	f000 f909 	bl	8002f60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d4e:	bf00      	nop
 8002d50:	bd80      	pop	{r7, pc}
	...

08002d54 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002d58:	4802      	ldr	r0, [pc, #8]	; (8002d64 <OTG_FS_IRQHandler+0x10>)
 8002d5a:	f001 f987 	bl	800406c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002d5e:	bf00      	nop
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	20001034 	.word	0x20001034

08002d68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b086      	sub	sp, #24
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d70:	4a14      	ldr	r2, [pc, #80]	; (8002dc4 <_sbrk+0x5c>)
 8002d72:	4b15      	ldr	r3, [pc, #84]	; (8002dc8 <_sbrk+0x60>)
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d7c:	4b13      	ldr	r3, [pc, #76]	; (8002dcc <_sbrk+0x64>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d102      	bne.n	8002d8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d84:	4b11      	ldr	r3, [pc, #68]	; (8002dcc <_sbrk+0x64>)
 8002d86:	4a12      	ldr	r2, [pc, #72]	; (8002dd0 <_sbrk+0x68>)
 8002d88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d8a:	4b10      	ldr	r3, [pc, #64]	; (8002dcc <_sbrk+0x64>)
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4413      	add	r3, r2
 8002d92:	693a      	ldr	r2, [r7, #16]
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d207      	bcs.n	8002da8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d98:	f007 f9e2 	bl	800a160 <__errno>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	220c      	movs	r2, #12
 8002da0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002da2:	f04f 33ff 	mov.w	r3, #4294967295
 8002da6:	e009      	b.n	8002dbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002da8:	4b08      	ldr	r3, [pc, #32]	; (8002dcc <_sbrk+0x64>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002dae:	4b07      	ldr	r3, [pc, #28]	; (8002dcc <_sbrk+0x64>)
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4413      	add	r3, r2
 8002db6:	4a05      	ldr	r2, [pc, #20]	; (8002dcc <_sbrk+0x64>)
 8002db8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002dba:	68fb      	ldr	r3, [r7, #12]
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3718      	adds	r7, #24
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	20010000 	.word	0x20010000
 8002dc8:	00000400 	.word	0x00000400
 8002dcc:	2000031c 	.word	0x2000031c
 8002dd0:	200018a0 	.word	0x200018a0

08002dd4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002dd8:	bf00      	nop
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bc80      	pop	{r7}
 8002dde:	4770      	bx	lr

08002de0 <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b082      	sub	sp, #8
 8002de4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002de6:	463b      	mov	r3, r7
 8002de8:	2200      	movs	r2, #0
 8002dea:	601a      	str	r2, [r3, #0]
 8002dec:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002dee:	4b15      	ldr	r3, [pc, #84]	; (8002e44 <MX_TIM7_Init+0x64>)
 8002df0:	4a15      	ldr	r2, [pc, #84]	; (8002e48 <MX_TIM7_Init+0x68>)
 8002df2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8002df4:	4b13      	ldr	r3, [pc, #76]	; (8002e44 <MX_TIM7_Init+0x64>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dfa:	4b12      	ldr	r3, [pc, #72]	; (8002e44 <MX_TIM7_Init+0x64>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8002e00:	4b10      	ldr	r3, [pc, #64]	; (8002e44 <MX_TIM7_Init+0x64>)
 8002e02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e06:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002e08:	4b0e      	ldr	r3, [pc, #56]	; (8002e44 <MX_TIM7_Init+0x64>)
 8002e0a:	2280      	movs	r2, #128	; 0x80
 8002e0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002e0e:	480d      	ldr	r0, [pc, #52]	; (8002e44 <MX_TIM7_Init+0x64>)
 8002e10:	f003 fcbc 	bl	800678c <HAL_TIM_Base_Init>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d001      	beq.n	8002e1e <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8002e1a:	f7ff fc63 	bl	80026e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e22:	2300      	movs	r3, #0
 8002e24:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002e26:	463b      	mov	r3, r7
 8002e28:	4619      	mov	r1, r3
 8002e2a:	4806      	ldr	r0, [pc, #24]	; (8002e44 <MX_TIM7_Init+0x64>)
 8002e2c:	f003 fd6a 	bl	8006904 <HAL_TIMEx_MasterConfigSynchronization>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d001      	beq.n	8002e3a <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8002e36:	f7ff fc55 	bl	80026e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002e3a:	bf00      	nop
 8002e3c:	3708      	adds	r7, #8
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	20000320 	.word	0x20000320
 8002e48:	40001400 	.word	0x40001400

08002e4c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b085      	sub	sp, #20
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a09      	ldr	r2, [pc, #36]	; (8002e80 <HAL_TIM_Base_MspInit+0x34>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d10b      	bne.n	8002e76 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002e5e:	4b09      	ldr	r3, [pc, #36]	; (8002e84 <HAL_TIM_Base_MspInit+0x38>)
 8002e60:	69db      	ldr	r3, [r3, #28]
 8002e62:	4a08      	ldr	r2, [pc, #32]	; (8002e84 <HAL_TIM_Base_MspInit+0x38>)
 8002e64:	f043 0320 	orr.w	r3, r3, #32
 8002e68:	61d3      	str	r3, [r2, #28]
 8002e6a:	4b06      	ldr	r3, [pc, #24]	; (8002e84 <HAL_TIM_Base_MspInit+0x38>)
 8002e6c:	69db      	ldr	r3, [r3, #28]
 8002e6e:	f003 0320 	and.w	r3, r3, #32
 8002e72:	60fb      	str	r3, [r7, #12]
 8002e74:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8002e76:	bf00      	nop
 8002e78:	3714      	adds	r7, #20
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bc80      	pop	{r7}
 8002e7e:	4770      	bx	lr
 8002e80:	40001400 	.word	0x40001400
 8002e84:	40021000 	.word	0x40021000

08002e88 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002e88:	f7ff ffa4 	bl	8002dd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e8c:	480b      	ldr	r0, [pc, #44]	; (8002ebc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002e8e:	490c      	ldr	r1, [pc, #48]	; (8002ec0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002e90:	4a0c      	ldr	r2, [pc, #48]	; (8002ec4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002e92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e94:	e002      	b.n	8002e9c <LoopCopyDataInit>

08002e96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e9a:	3304      	adds	r3, #4

08002e9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ea0:	d3f9      	bcc.n	8002e96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ea2:	4a09      	ldr	r2, [pc, #36]	; (8002ec8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002ea4:	4c09      	ldr	r4, [pc, #36]	; (8002ecc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002ea6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ea8:	e001      	b.n	8002eae <LoopFillZerobss>

08002eaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002eaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002eac:	3204      	adds	r2, #4

08002eae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002eae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002eb0:	d3fb      	bcc.n	8002eaa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002eb2:	f007 f95b 	bl	800a16c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002eb6:	f7ff fa31 	bl	800231c <main>
  bx lr
 8002eba:	4770      	bx	lr
  ldr r0, =_sdata
 8002ebc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ec0:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 8002ec4:	0800b1c4 	.word	0x0800b1c4
  ldr r2, =_sbss
 8002ec8:	20000214 	.word	0x20000214
  ldr r4, =_ebss
 8002ecc:	200018a0 	.word	0x200018a0

08002ed0 <ADC1_2_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002ed0:	e7fe      	b.n	8002ed0 <ADC1_2_IRQHandler>
	...

08002ed4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ed8:	4b08      	ldr	r3, [pc, #32]	; (8002efc <HAL_Init+0x28>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a07      	ldr	r2, [pc, #28]	; (8002efc <HAL_Init+0x28>)
 8002ede:	f043 0310 	orr.w	r3, r3, #16
 8002ee2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ee4:	2003      	movs	r0, #3
 8002ee6:	f000 fd8b 	bl	8003a00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002eea:	200f      	movs	r0, #15
 8002eec:	f000 f808 	bl	8002f00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ef0:	f7ff fed6 	bl	8002ca0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	40022000 	.word	0x40022000

08002f00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f08:	4b12      	ldr	r3, [pc, #72]	; (8002f54 <HAL_InitTick+0x54>)
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	4b12      	ldr	r3, [pc, #72]	; (8002f58 <HAL_InitTick+0x58>)
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	4619      	mov	r1, r3
 8002f12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f16:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f000 fda3 	bl	8003a6a <HAL_SYSTICK_Config>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d001      	beq.n	8002f2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e00e      	b.n	8002f4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2b0f      	cmp	r3, #15
 8002f32:	d80a      	bhi.n	8002f4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f34:	2200      	movs	r2, #0
 8002f36:	6879      	ldr	r1, [r7, #4]
 8002f38:	f04f 30ff 	mov.w	r0, #4294967295
 8002f3c:	f000 fd6b 	bl	8003a16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f40:	4a06      	ldr	r2, [pc, #24]	; (8002f5c <HAL_InitTick+0x5c>)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f46:	2300      	movs	r3, #0
 8002f48:	e000      	b.n	8002f4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3708      	adds	r7, #8
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	20000048 	.word	0x20000048
 8002f58:	20000050 	.word	0x20000050
 8002f5c:	2000004c 	.word	0x2000004c

08002f60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f60:	b480      	push	{r7}
 8002f62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f64:	4b05      	ldr	r3, [pc, #20]	; (8002f7c <HAL_IncTick+0x1c>)
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	461a      	mov	r2, r3
 8002f6a:	4b05      	ldr	r3, [pc, #20]	; (8002f80 <HAL_IncTick+0x20>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4413      	add	r3, r2
 8002f70:	4a03      	ldr	r2, [pc, #12]	; (8002f80 <HAL_IncTick+0x20>)
 8002f72:	6013      	str	r3, [r2, #0]
}
 8002f74:	bf00      	nop
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bc80      	pop	{r7}
 8002f7a:	4770      	bx	lr
 8002f7c:	20000050 	.word	0x20000050
 8002f80:	20000368 	.word	0x20000368

08002f84 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f84:	b480      	push	{r7}
 8002f86:	af00      	add	r7, sp, #0
  return uwTick;
 8002f88:	4b02      	ldr	r3, [pc, #8]	; (8002f94 <HAL_GetTick+0x10>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bc80      	pop	{r7}
 8002f92:	4770      	bx	lr
 8002f94:	20000368 	.word	0x20000368

08002f98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fa0:	f7ff fff0 	bl	8002f84 <HAL_GetTick>
 8002fa4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fb0:	d005      	beq.n	8002fbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002fb2:	4b0a      	ldr	r3, [pc, #40]	; (8002fdc <HAL_Delay+0x44>)
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	4413      	add	r3, r2
 8002fbc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002fbe:	bf00      	nop
 8002fc0:	f7ff ffe0 	bl	8002f84 <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	68fa      	ldr	r2, [r7, #12]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d8f7      	bhi.n	8002fc0 <HAL_Delay+0x28>
  {
  }
}
 8002fd0:	bf00      	nop
 8002fd2:	bf00      	nop
 8002fd4:	3710      	adds	r7, #16
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	20000050 	.word	0x20000050

08002fe0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b086      	sub	sp, #24
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002fec:	2300      	movs	r3, #0
 8002fee:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d101      	bne.n	8003002 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e0be      	b.n	8003180 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800300c:	2b00      	cmp	r3, #0
 800300e:	d109      	bne.n	8003024 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f7fe fe18 	bl	8001c54 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f000 f9ab 	bl	8003380 <ADC_ConversionStop_Disable>
 800302a:	4603      	mov	r3, r0
 800302c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003032:	f003 0310 	and.w	r3, r3, #16
 8003036:	2b00      	cmp	r3, #0
 8003038:	f040 8099 	bne.w	800316e <HAL_ADC_Init+0x18e>
 800303c:	7dfb      	ldrb	r3, [r7, #23]
 800303e:	2b00      	cmp	r3, #0
 8003040:	f040 8095 	bne.w	800316e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003048:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800304c:	f023 0302 	bic.w	r3, r3, #2
 8003050:	f043 0202 	orr.w	r2, r3, #2
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003060:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	7b1b      	ldrb	r3, [r3, #12]
 8003066:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003068:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800306a:	68ba      	ldr	r2, [r7, #8]
 800306c:	4313      	orrs	r3, r2
 800306e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003078:	d003      	beq.n	8003082 <HAL_ADC_Init+0xa2>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	2b01      	cmp	r3, #1
 8003080:	d102      	bne.n	8003088 <HAL_ADC_Init+0xa8>
 8003082:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003086:	e000      	b.n	800308a <HAL_ADC_Init+0xaa>
 8003088:	2300      	movs	r3, #0
 800308a:	693a      	ldr	r2, [r7, #16]
 800308c:	4313      	orrs	r3, r2
 800308e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	7d1b      	ldrb	r3, [r3, #20]
 8003094:	2b01      	cmp	r3, #1
 8003096:	d119      	bne.n	80030cc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	7b1b      	ldrb	r3, [r3, #12]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d109      	bne.n	80030b4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	699b      	ldr	r3, [r3, #24]
 80030a4:	3b01      	subs	r3, #1
 80030a6:	035a      	lsls	r2, r3, #13
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80030b0:	613b      	str	r3, [r7, #16]
 80030b2:	e00b      	b.n	80030cc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b8:	f043 0220 	orr.w	r2, r3, #32
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c4:	f043 0201 	orr.w	r2, r3, #1
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	693a      	ldr	r2, [r7, #16]
 80030dc:	430a      	orrs	r2, r1
 80030de:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	689a      	ldr	r2, [r3, #8]
 80030e6:	4b28      	ldr	r3, [pc, #160]	; (8003188 <HAL_ADC_Init+0x1a8>)
 80030e8:	4013      	ands	r3, r2
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	6812      	ldr	r2, [r2, #0]
 80030ee:	68b9      	ldr	r1, [r7, #8]
 80030f0:	430b      	orrs	r3, r1
 80030f2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030fc:	d003      	beq.n	8003106 <HAL_ADC_Init+0x126>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	2b01      	cmp	r3, #1
 8003104:	d104      	bne.n	8003110 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	691b      	ldr	r3, [r3, #16]
 800310a:	3b01      	subs	r3, #1
 800310c:	051b      	lsls	r3, r3, #20
 800310e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003116:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	68fa      	ldr	r2, [r7, #12]
 8003120:	430a      	orrs	r2, r1
 8003122:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	689a      	ldr	r2, [r3, #8]
 800312a:	4b18      	ldr	r3, [pc, #96]	; (800318c <HAL_ADC_Init+0x1ac>)
 800312c:	4013      	ands	r3, r2
 800312e:	68ba      	ldr	r2, [r7, #8]
 8003130:	429a      	cmp	r2, r3
 8003132:	d10b      	bne.n	800314c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800313e:	f023 0303 	bic.w	r3, r3, #3
 8003142:	f043 0201 	orr.w	r2, r3, #1
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800314a:	e018      	b.n	800317e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003150:	f023 0312 	bic.w	r3, r3, #18
 8003154:	f043 0210 	orr.w	r2, r3, #16
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003160:	f043 0201 	orr.w	r2, r3, #1
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800316c:	e007      	b.n	800317e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003172:	f043 0210 	orr.w	r2, r3, #16
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800317e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003180:	4618      	mov	r0, r3
 8003182:	3718      	adds	r7, #24
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	ffe1f7fd 	.word	0xffe1f7fd
 800318c:	ff1f0efe 	.word	0xff1f0efe

08003190 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003190:	b480      	push	{r7}
 8003192:	b085      	sub	sp, #20
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800319a:	2300      	movs	r3, #0
 800319c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800319e:	2300      	movs	r3, #0
 80031a0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d101      	bne.n	80031b0 <HAL_ADC_ConfigChannel+0x20>
 80031ac:	2302      	movs	r3, #2
 80031ae:	e0dc      	b.n	800336a <HAL_ADC_ConfigChannel+0x1da>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	2b06      	cmp	r3, #6
 80031be:	d81c      	bhi.n	80031fa <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685a      	ldr	r2, [r3, #4]
 80031ca:	4613      	mov	r3, r2
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	4413      	add	r3, r2
 80031d0:	3b05      	subs	r3, #5
 80031d2:	221f      	movs	r2, #31
 80031d4:	fa02 f303 	lsl.w	r3, r2, r3
 80031d8:	43db      	mvns	r3, r3
 80031da:	4019      	ands	r1, r3
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	6818      	ldr	r0, [r3, #0]
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	685a      	ldr	r2, [r3, #4]
 80031e4:	4613      	mov	r3, r2
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	4413      	add	r3, r2
 80031ea:	3b05      	subs	r3, #5
 80031ec:	fa00 f203 	lsl.w	r2, r0, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	430a      	orrs	r2, r1
 80031f6:	635a      	str	r2, [r3, #52]	; 0x34
 80031f8:	e03c      	b.n	8003274 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	2b0c      	cmp	r3, #12
 8003200:	d81c      	bhi.n	800323c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	685a      	ldr	r2, [r3, #4]
 800320c:	4613      	mov	r3, r2
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	4413      	add	r3, r2
 8003212:	3b23      	subs	r3, #35	; 0x23
 8003214:	221f      	movs	r2, #31
 8003216:	fa02 f303 	lsl.w	r3, r2, r3
 800321a:	43db      	mvns	r3, r3
 800321c:	4019      	ands	r1, r3
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	6818      	ldr	r0, [r3, #0]
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	685a      	ldr	r2, [r3, #4]
 8003226:	4613      	mov	r3, r2
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	4413      	add	r3, r2
 800322c:	3b23      	subs	r3, #35	; 0x23
 800322e:	fa00 f203 	lsl.w	r2, r0, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	430a      	orrs	r2, r1
 8003238:	631a      	str	r2, [r3, #48]	; 0x30
 800323a:	e01b      	b.n	8003274 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	685a      	ldr	r2, [r3, #4]
 8003246:	4613      	mov	r3, r2
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	4413      	add	r3, r2
 800324c:	3b41      	subs	r3, #65	; 0x41
 800324e:	221f      	movs	r2, #31
 8003250:	fa02 f303 	lsl.w	r3, r2, r3
 8003254:	43db      	mvns	r3, r3
 8003256:	4019      	ands	r1, r3
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	6818      	ldr	r0, [r3, #0]
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	685a      	ldr	r2, [r3, #4]
 8003260:	4613      	mov	r3, r2
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	4413      	add	r3, r2
 8003266:	3b41      	subs	r3, #65	; 0x41
 8003268:	fa00 f203 	lsl.w	r2, r0, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	430a      	orrs	r2, r1
 8003272:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2b09      	cmp	r3, #9
 800327a:	d91c      	bls.n	80032b6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	68d9      	ldr	r1, [r3, #12]
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	4613      	mov	r3, r2
 8003288:	005b      	lsls	r3, r3, #1
 800328a:	4413      	add	r3, r2
 800328c:	3b1e      	subs	r3, #30
 800328e:	2207      	movs	r2, #7
 8003290:	fa02 f303 	lsl.w	r3, r2, r3
 8003294:	43db      	mvns	r3, r3
 8003296:	4019      	ands	r1, r3
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	6898      	ldr	r0, [r3, #8]
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	4613      	mov	r3, r2
 80032a2:	005b      	lsls	r3, r3, #1
 80032a4:	4413      	add	r3, r2
 80032a6:	3b1e      	subs	r3, #30
 80032a8:	fa00 f203 	lsl.w	r2, r0, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	430a      	orrs	r2, r1
 80032b2:	60da      	str	r2, [r3, #12]
 80032b4:	e019      	b.n	80032ea <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	6919      	ldr	r1, [r3, #16]
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	4613      	mov	r3, r2
 80032c2:	005b      	lsls	r3, r3, #1
 80032c4:	4413      	add	r3, r2
 80032c6:	2207      	movs	r2, #7
 80032c8:	fa02 f303 	lsl.w	r3, r2, r3
 80032cc:	43db      	mvns	r3, r3
 80032ce:	4019      	ands	r1, r3
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	6898      	ldr	r0, [r3, #8]
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	4613      	mov	r3, r2
 80032da:	005b      	lsls	r3, r3, #1
 80032dc:	4413      	add	r3, r2
 80032de:	fa00 f203 	lsl.w	r2, r0, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	430a      	orrs	r2, r1
 80032e8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	2b10      	cmp	r3, #16
 80032f0:	d003      	beq.n	80032fa <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80032f6:	2b11      	cmp	r3, #17
 80032f8:	d132      	bne.n	8003360 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a1d      	ldr	r2, [pc, #116]	; (8003374 <HAL_ADC_ConfigChannel+0x1e4>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d125      	bne.n	8003350 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d126      	bne.n	8003360 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	689a      	ldr	r2, [r3, #8]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003320:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2b10      	cmp	r3, #16
 8003328:	d11a      	bne.n	8003360 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800332a:	4b13      	ldr	r3, [pc, #76]	; (8003378 <HAL_ADC_ConfigChannel+0x1e8>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a13      	ldr	r2, [pc, #76]	; (800337c <HAL_ADC_ConfigChannel+0x1ec>)
 8003330:	fba2 2303 	umull	r2, r3, r2, r3
 8003334:	0c9a      	lsrs	r2, r3, #18
 8003336:	4613      	mov	r3, r2
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	4413      	add	r3, r2
 800333c:	005b      	lsls	r3, r3, #1
 800333e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003340:	e002      	b.n	8003348 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	3b01      	subs	r3, #1
 8003346:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d1f9      	bne.n	8003342 <HAL_ADC_ConfigChannel+0x1b2>
 800334e:	e007      	b.n	8003360 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003354:	f043 0220 	orr.w	r2, r3, #32
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003368:	7bfb      	ldrb	r3, [r7, #15]
}
 800336a:	4618      	mov	r0, r3
 800336c:	3714      	adds	r7, #20
 800336e:	46bd      	mov	sp, r7
 8003370:	bc80      	pop	{r7}
 8003372:	4770      	bx	lr
 8003374:	40012400 	.word	0x40012400
 8003378:	20000048 	.word	0x20000048
 800337c:	431bde83 	.word	0x431bde83

08003380 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003388:	2300      	movs	r3, #0
 800338a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f003 0301 	and.w	r3, r3, #1
 8003396:	2b01      	cmp	r3, #1
 8003398:	d12e      	bne.n	80033f8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	689a      	ldr	r2, [r3, #8]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f022 0201 	bic.w	r2, r2, #1
 80033a8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80033aa:	f7ff fdeb 	bl	8002f84 <HAL_GetTick>
 80033ae:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80033b0:	e01b      	b.n	80033ea <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80033b2:	f7ff fde7 	bl	8002f84 <HAL_GetTick>
 80033b6:	4602      	mov	r2, r0
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d914      	bls.n	80033ea <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f003 0301 	and.w	r3, r3, #1
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d10d      	bne.n	80033ea <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d2:	f043 0210 	orr.w	r2, r3, #16
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033de:	f043 0201 	orr.w	r2, r3, #1
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e007      	b.n	80033fa <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	f003 0301 	and.w	r3, r3, #1
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d0dc      	beq.n	80033b2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3710      	adds	r7, #16
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}

08003402 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003402:	b580      	push	{r7, lr}
 8003404:	b084      	sub	sp, #16
 8003406:	af00      	add	r7, sp, #0
 8003408:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d101      	bne.n	8003414 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e0ed      	b.n	80035f0 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f893 3020 	ldrb.w	r3, [r3, #32]
 800341a:	b2db      	uxtb	r3, r3
 800341c:	2b00      	cmp	r3, #0
 800341e:	d102      	bne.n	8003426 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f7fe fcb3 	bl	8001d8c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f042 0201 	orr.w	r2, r2, #1
 8003434:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003436:	f7ff fda5 	bl	8002f84 <HAL_GetTick>
 800343a:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800343c:	e012      	b.n	8003464 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800343e:	f7ff fda1 	bl	8002f84 <HAL_GetTick>
 8003442:	4602      	mov	r2, r0
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	2b0a      	cmp	r3, #10
 800344a:	d90b      	bls.n	8003464 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003450:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2205      	movs	r2, #5
 800345c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e0c5      	b.n	80035f0 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f003 0301 	and.w	r3, r3, #1
 800346e:	2b00      	cmp	r3, #0
 8003470:	d0e5      	beq.n	800343e <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f022 0202 	bic.w	r2, r2, #2
 8003480:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003482:	f7ff fd7f 	bl	8002f84 <HAL_GetTick>
 8003486:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003488:	e012      	b.n	80034b0 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800348a:	f7ff fd7b 	bl	8002f84 <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	2b0a      	cmp	r3, #10
 8003496:	d90b      	bls.n	80034b0 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2205      	movs	r2, #5
 80034a8:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e09f      	b.n	80035f0 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f003 0302 	and.w	r3, r3, #2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d1e5      	bne.n	800348a <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	7e1b      	ldrb	r3, [r3, #24]
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d108      	bne.n	80034d8 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80034d4:	601a      	str	r2, [r3, #0]
 80034d6:	e007      	b.n	80034e8 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	7e5b      	ldrb	r3, [r3, #25]
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d108      	bne.n	8003502 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034fe:	601a      	str	r2, [r3, #0]
 8003500:	e007      	b.n	8003512 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003510:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	7e9b      	ldrb	r3, [r3, #26]
 8003516:	2b01      	cmp	r3, #1
 8003518:	d108      	bne.n	800352c <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f042 0220 	orr.w	r2, r2, #32
 8003528:	601a      	str	r2, [r3, #0]
 800352a:	e007      	b.n	800353c <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f022 0220 	bic.w	r2, r2, #32
 800353a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	7edb      	ldrb	r3, [r3, #27]
 8003540:	2b01      	cmp	r3, #1
 8003542:	d108      	bne.n	8003556 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f022 0210 	bic.w	r2, r2, #16
 8003552:	601a      	str	r2, [r3, #0]
 8003554:	e007      	b.n	8003566 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f042 0210 	orr.w	r2, r2, #16
 8003564:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	7f1b      	ldrb	r3, [r3, #28]
 800356a:	2b01      	cmp	r3, #1
 800356c:	d108      	bne.n	8003580 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f042 0208 	orr.w	r2, r2, #8
 800357c:	601a      	str	r2, [r3, #0]
 800357e:	e007      	b.n	8003590 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f022 0208 	bic.w	r2, r2, #8
 800358e:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	7f5b      	ldrb	r3, [r3, #29]
 8003594:	2b01      	cmp	r3, #1
 8003596:	d108      	bne.n	80035aa <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f042 0204 	orr.w	r2, r2, #4
 80035a6:	601a      	str	r2, [r3, #0]
 80035a8:	e007      	b.n	80035ba <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f022 0204 	bic.w	r2, r2, #4
 80035b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	689a      	ldr	r2, [r3, #8]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	431a      	orrs	r2, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	691b      	ldr	r3, [r3, #16]
 80035c8:	431a      	orrs	r2, r3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	695b      	ldr	r3, [r3, #20]
 80035ce:	ea42 0103 	orr.w	r1, r2, r3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	1e5a      	subs	r2, r3, #1
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	430a      	orrs	r2, r1
 80035de:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2201      	movs	r2, #1
 80035ea:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80035ee:	2300      	movs	r3, #0
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3710      	adds	r7, #16
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b084      	sub	sp, #16
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003606:	b2db      	uxtb	r3, r3
 8003608:	2b01      	cmp	r3, #1
 800360a:	d12e      	bne.n	800366a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2202      	movs	r2, #2
 8003610:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f022 0201 	bic.w	r2, r2, #1
 8003622:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003624:	f7ff fcae 	bl	8002f84 <HAL_GetTick>
 8003628:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800362a:	e012      	b.n	8003652 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800362c:	f7ff fcaa 	bl	8002f84 <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	2b0a      	cmp	r3, #10
 8003638:	d90b      	bls.n	8003652 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2205      	movs	r2, #5
 800364a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e012      	b.n	8003678 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f003 0301 	and.w	r3, r3, #1
 800365c:	2b00      	cmp	r3, #0
 800365e:	d1e5      	bne.n	800362c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003666:	2300      	movs	r3, #0
 8003668:	e006      	b.n	8003678 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
  }
}
 8003678:	4618      	mov	r0, r3
 800367a:	3710      	adds	r7, #16
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8003680:	b480      	push	{r7}
 8003682:	b089      	sub	sp, #36	; 0x24
 8003684:	af00      	add	r7, sp, #0
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	607a      	str	r2, [r7, #4]
 800368c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003694:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800369e:	7ffb      	ldrb	r3, [r7, #31]
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d003      	beq.n	80036ac <HAL_CAN_AddTxMessage+0x2c>
 80036a4:	7ffb      	ldrb	r3, [r7, #31]
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	f040 80ad 	bne.w	8003806 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d10a      	bne.n	80036cc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d105      	bne.n	80036cc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	f000 8095 	beq.w	80037f6 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	0e1b      	lsrs	r3, r3, #24
 80036d0:	f003 0303 	and.w	r3, r3, #3
 80036d4:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80036d6:	2201      	movs	r2, #1
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	409a      	lsls	r2, r3
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d10d      	bne.n	8003704 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80036f2:	68f9      	ldr	r1, [r7, #12]
 80036f4:	6809      	ldr	r1, [r1, #0]
 80036f6:	431a      	orrs	r2, r3
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	3318      	adds	r3, #24
 80036fc:	011b      	lsls	r3, r3, #4
 80036fe:	440b      	add	r3, r1
 8003700:	601a      	str	r2, [r3, #0]
 8003702:	e00f      	b.n	8003724 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800370e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003714:	68f9      	ldr	r1, [r7, #12]
 8003716:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003718:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	3318      	adds	r3, #24
 800371e:	011b      	lsls	r3, r3, #4
 8003720:	440b      	add	r3, r1
 8003722:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6819      	ldr	r1, [r3, #0]
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	691a      	ldr	r2, [r3, #16]
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	3318      	adds	r3, #24
 8003730:	011b      	lsls	r3, r3, #4
 8003732:	440b      	add	r3, r1
 8003734:	3304      	adds	r3, #4
 8003736:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	7d1b      	ldrb	r3, [r3, #20]
 800373c:	2b01      	cmp	r3, #1
 800373e:	d111      	bne.n	8003764 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	3318      	adds	r3, #24
 8003748:	011b      	lsls	r3, r3, #4
 800374a:	4413      	add	r3, r2
 800374c:	3304      	adds	r3, #4
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	68fa      	ldr	r2, [r7, #12]
 8003752:	6811      	ldr	r1, [r2, #0]
 8003754:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	3318      	adds	r3, #24
 800375c:	011b      	lsls	r3, r3, #4
 800375e:	440b      	add	r3, r1
 8003760:	3304      	adds	r3, #4
 8003762:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	3307      	adds	r3, #7
 8003768:	781b      	ldrb	r3, [r3, #0]
 800376a:	061a      	lsls	r2, r3, #24
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	3306      	adds	r3, #6
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	041b      	lsls	r3, r3, #16
 8003774:	431a      	orrs	r2, r3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	3305      	adds	r3, #5
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	021b      	lsls	r3, r3, #8
 800377e:	4313      	orrs	r3, r2
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	3204      	adds	r2, #4
 8003784:	7812      	ldrb	r2, [r2, #0]
 8003786:	4610      	mov	r0, r2
 8003788:	68fa      	ldr	r2, [r7, #12]
 800378a:	6811      	ldr	r1, [r2, #0]
 800378c:	ea43 0200 	orr.w	r2, r3, r0
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	011b      	lsls	r3, r3, #4
 8003794:	440b      	add	r3, r1
 8003796:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800379a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	3303      	adds	r3, #3
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	061a      	lsls	r2, r3, #24
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	3302      	adds	r3, #2
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	041b      	lsls	r3, r3, #16
 80037ac:	431a      	orrs	r2, r3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	3301      	adds	r3, #1
 80037b2:	781b      	ldrb	r3, [r3, #0]
 80037b4:	021b      	lsls	r3, r3, #8
 80037b6:	4313      	orrs	r3, r2
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	7812      	ldrb	r2, [r2, #0]
 80037bc:	4610      	mov	r0, r2
 80037be:	68fa      	ldr	r2, [r7, #12]
 80037c0:	6811      	ldr	r1, [r2, #0]
 80037c2:	ea43 0200 	orr.w	r2, r3, r0
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	011b      	lsls	r3, r3, #4
 80037ca:	440b      	add	r3, r1
 80037cc:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80037d0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	3318      	adds	r3, #24
 80037da:	011b      	lsls	r3, r3, #4
 80037dc:	4413      	add	r3, r2
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	68fa      	ldr	r2, [r7, #12]
 80037e2:	6811      	ldr	r1, [r2, #0]
 80037e4:	f043 0201 	orr.w	r2, r3, #1
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	3318      	adds	r3, #24
 80037ec:	011b      	lsls	r3, r3, #4
 80037ee:	440b      	add	r3, r1
 80037f0:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80037f2:	2300      	movs	r3, #0
 80037f4:	e00e      	b.n	8003814 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e006      	b.n	8003814 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
  }
}
 8003814:	4618      	mov	r0, r3
 8003816:	3724      	adds	r7, #36	; 0x24
 8003818:	46bd      	mov	sp, r7
 800381a:	bc80      	pop	{r7}
 800381c:	4770      	bx	lr

0800381e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800381e:	b480      	push	{r7}
 8003820:	b085      	sub	sp, #20
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]
 8003826:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800382e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003830:	7bfb      	ldrb	r3, [r7, #15]
 8003832:	2b01      	cmp	r3, #1
 8003834:	d002      	beq.n	800383c <HAL_CAN_ActivateNotification+0x1e>
 8003836:	7bfb      	ldrb	r3, [r7, #15]
 8003838:	2b02      	cmp	r3, #2
 800383a:	d109      	bne.n	8003850 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	6959      	ldr	r1, [r3, #20]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	683a      	ldr	r2, [r7, #0]
 8003848:	430a      	orrs	r2, r1
 800384a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800384c:	2300      	movs	r3, #0
 800384e:	e006      	b.n	800385e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003854:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
  }
}
 800385e:	4618      	mov	r0, r3
 8003860:	3714      	adds	r7, #20
 8003862:	46bd      	mov	sp, r7
 8003864:	bc80      	pop	{r7}
 8003866:	4770      	bx	lr

08003868 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003868:	b480      	push	{r7}
 800386a:	b085      	sub	sp, #20
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f003 0307 	and.w	r3, r3, #7
 8003876:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003878:	4b0c      	ldr	r3, [pc, #48]	; (80038ac <__NVIC_SetPriorityGrouping+0x44>)
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800387e:	68ba      	ldr	r2, [r7, #8]
 8003880:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003884:	4013      	ands	r3, r2
 8003886:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003890:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003894:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003898:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800389a:	4a04      	ldr	r2, [pc, #16]	; (80038ac <__NVIC_SetPriorityGrouping+0x44>)
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	60d3      	str	r3, [r2, #12]
}
 80038a0:	bf00      	nop
 80038a2:	3714      	adds	r7, #20
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bc80      	pop	{r7}
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop
 80038ac:	e000ed00 	.word	0xe000ed00

080038b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038b0:	b480      	push	{r7}
 80038b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038b4:	4b04      	ldr	r3, [pc, #16]	; (80038c8 <__NVIC_GetPriorityGrouping+0x18>)
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	0a1b      	lsrs	r3, r3, #8
 80038ba:	f003 0307 	and.w	r3, r3, #7
}
 80038be:	4618      	mov	r0, r3
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bc80      	pop	{r7}
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	e000ed00 	.word	0xe000ed00

080038cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	4603      	mov	r3, r0
 80038d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	db0b      	blt.n	80038f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038de:	79fb      	ldrb	r3, [r7, #7]
 80038e0:	f003 021f 	and.w	r2, r3, #31
 80038e4:	4906      	ldr	r1, [pc, #24]	; (8003900 <__NVIC_EnableIRQ+0x34>)
 80038e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ea:	095b      	lsrs	r3, r3, #5
 80038ec:	2001      	movs	r0, #1
 80038ee:	fa00 f202 	lsl.w	r2, r0, r2
 80038f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80038f6:	bf00      	nop
 80038f8:	370c      	adds	r7, #12
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bc80      	pop	{r7}
 80038fe:	4770      	bx	lr
 8003900:	e000e100 	.word	0xe000e100

08003904 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	4603      	mov	r3, r0
 800390c:	6039      	str	r1, [r7, #0]
 800390e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003910:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003914:	2b00      	cmp	r3, #0
 8003916:	db0a      	blt.n	800392e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	b2da      	uxtb	r2, r3
 800391c:	490c      	ldr	r1, [pc, #48]	; (8003950 <__NVIC_SetPriority+0x4c>)
 800391e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003922:	0112      	lsls	r2, r2, #4
 8003924:	b2d2      	uxtb	r2, r2
 8003926:	440b      	add	r3, r1
 8003928:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800392c:	e00a      	b.n	8003944 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	b2da      	uxtb	r2, r3
 8003932:	4908      	ldr	r1, [pc, #32]	; (8003954 <__NVIC_SetPriority+0x50>)
 8003934:	79fb      	ldrb	r3, [r7, #7]
 8003936:	f003 030f 	and.w	r3, r3, #15
 800393a:	3b04      	subs	r3, #4
 800393c:	0112      	lsls	r2, r2, #4
 800393e:	b2d2      	uxtb	r2, r2
 8003940:	440b      	add	r3, r1
 8003942:	761a      	strb	r2, [r3, #24]
}
 8003944:	bf00      	nop
 8003946:	370c      	adds	r7, #12
 8003948:	46bd      	mov	sp, r7
 800394a:	bc80      	pop	{r7}
 800394c:	4770      	bx	lr
 800394e:	bf00      	nop
 8003950:	e000e100 	.word	0xe000e100
 8003954:	e000ed00 	.word	0xe000ed00

08003958 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003958:	b480      	push	{r7}
 800395a:	b089      	sub	sp, #36	; 0x24
 800395c:	af00      	add	r7, sp, #0
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	60b9      	str	r1, [r7, #8]
 8003962:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f003 0307 	and.w	r3, r3, #7
 800396a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	f1c3 0307 	rsb	r3, r3, #7
 8003972:	2b04      	cmp	r3, #4
 8003974:	bf28      	it	cs
 8003976:	2304      	movcs	r3, #4
 8003978:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	3304      	adds	r3, #4
 800397e:	2b06      	cmp	r3, #6
 8003980:	d902      	bls.n	8003988 <NVIC_EncodePriority+0x30>
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	3b03      	subs	r3, #3
 8003986:	e000      	b.n	800398a <NVIC_EncodePriority+0x32>
 8003988:	2300      	movs	r3, #0
 800398a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800398c:	f04f 32ff 	mov.w	r2, #4294967295
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	fa02 f303 	lsl.w	r3, r2, r3
 8003996:	43da      	mvns	r2, r3
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	401a      	ands	r2, r3
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039a0:	f04f 31ff 	mov.w	r1, #4294967295
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	fa01 f303 	lsl.w	r3, r1, r3
 80039aa:	43d9      	mvns	r1, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039b0:	4313      	orrs	r3, r2
         );
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3724      	adds	r7, #36	; 0x24
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bc80      	pop	{r7}
 80039ba:	4770      	bx	lr

080039bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	3b01      	subs	r3, #1
 80039c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039cc:	d301      	bcc.n	80039d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80039ce:	2301      	movs	r3, #1
 80039d0:	e00f      	b.n	80039f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039d2:	4a0a      	ldr	r2, [pc, #40]	; (80039fc <SysTick_Config+0x40>)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	3b01      	subs	r3, #1
 80039d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039da:	210f      	movs	r1, #15
 80039dc:	f04f 30ff 	mov.w	r0, #4294967295
 80039e0:	f7ff ff90 	bl	8003904 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039e4:	4b05      	ldr	r3, [pc, #20]	; (80039fc <SysTick_Config+0x40>)
 80039e6:	2200      	movs	r2, #0
 80039e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039ea:	4b04      	ldr	r3, [pc, #16]	; (80039fc <SysTick_Config+0x40>)
 80039ec:	2207      	movs	r2, #7
 80039ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039f0:	2300      	movs	r3, #0
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3708      	adds	r7, #8
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	e000e010 	.word	0xe000e010

08003a00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f7ff ff2d 	bl	8003868 <__NVIC_SetPriorityGrouping>
}
 8003a0e:	bf00      	nop
 8003a10:	3708      	adds	r7, #8
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}

08003a16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a16:	b580      	push	{r7, lr}
 8003a18:	b086      	sub	sp, #24
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	60b9      	str	r1, [r7, #8]
 8003a20:	607a      	str	r2, [r7, #4]
 8003a22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a24:	2300      	movs	r3, #0
 8003a26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a28:	f7ff ff42 	bl	80038b0 <__NVIC_GetPriorityGrouping>
 8003a2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	68b9      	ldr	r1, [r7, #8]
 8003a32:	6978      	ldr	r0, [r7, #20]
 8003a34:	f7ff ff90 	bl	8003958 <NVIC_EncodePriority>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a3e:	4611      	mov	r1, r2
 8003a40:	4618      	mov	r0, r3
 8003a42:	f7ff ff5f 	bl	8003904 <__NVIC_SetPriority>
}
 8003a46:	bf00      	nop
 8003a48:	3718      	adds	r7, #24
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}

08003a4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a4e:	b580      	push	{r7, lr}
 8003a50:	b082      	sub	sp, #8
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	4603      	mov	r3, r0
 8003a56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f7ff ff35 	bl	80038cc <__NVIC_EnableIRQ>
}
 8003a62:	bf00      	nop
 8003a64:	3708      	adds	r7, #8
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}

08003a6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a6a:	b580      	push	{r7, lr}
 8003a6c:	b082      	sub	sp, #8
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f7ff ffa2 	bl	80039bc <SysTick_Config>
 8003a78:	4603      	mov	r3, r0
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3708      	adds	r7, #8
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
	...

08003a84 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b08b      	sub	sp, #44	; 0x2c
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003a92:	2300      	movs	r3, #0
 8003a94:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a96:	e169      	b.n	8003d6c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003a98:	2201      	movs	r2, #1
 8003a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	69fa      	ldr	r2, [r7, #28]
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003aac:	69ba      	ldr	r2, [r7, #24]
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	f040 8158 	bne.w	8003d66 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	4a9a      	ldr	r2, [pc, #616]	; (8003d24 <HAL_GPIO_Init+0x2a0>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d05e      	beq.n	8003b7e <HAL_GPIO_Init+0xfa>
 8003ac0:	4a98      	ldr	r2, [pc, #608]	; (8003d24 <HAL_GPIO_Init+0x2a0>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d875      	bhi.n	8003bb2 <HAL_GPIO_Init+0x12e>
 8003ac6:	4a98      	ldr	r2, [pc, #608]	; (8003d28 <HAL_GPIO_Init+0x2a4>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d058      	beq.n	8003b7e <HAL_GPIO_Init+0xfa>
 8003acc:	4a96      	ldr	r2, [pc, #600]	; (8003d28 <HAL_GPIO_Init+0x2a4>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d86f      	bhi.n	8003bb2 <HAL_GPIO_Init+0x12e>
 8003ad2:	4a96      	ldr	r2, [pc, #600]	; (8003d2c <HAL_GPIO_Init+0x2a8>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d052      	beq.n	8003b7e <HAL_GPIO_Init+0xfa>
 8003ad8:	4a94      	ldr	r2, [pc, #592]	; (8003d2c <HAL_GPIO_Init+0x2a8>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d869      	bhi.n	8003bb2 <HAL_GPIO_Init+0x12e>
 8003ade:	4a94      	ldr	r2, [pc, #592]	; (8003d30 <HAL_GPIO_Init+0x2ac>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d04c      	beq.n	8003b7e <HAL_GPIO_Init+0xfa>
 8003ae4:	4a92      	ldr	r2, [pc, #584]	; (8003d30 <HAL_GPIO_Init+0x2ac>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d863      	bhi.n	8003bb2 <HAL_GPIO_Init+0x12e>
 8003aea:	4a92      	ldr	r2, [pc, #584]	; (8003d34 <HAL_GPIO_Init+0x2b0>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d046      	beq.n	8003b7e <HAL_GPIO_Init+0xfa>
 8003af0:	4a90      	ldr	r2, [pc, #576]	; (8003d34 <HAL_GPIO_Init+0x2b0>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d85d      	bhi.n	8003bb2 <HAL_GPIO_Init+0x12e>
 8003af6:	2b12      	cmp	r3, #18
 8003af8:	d82a      	bhi.n	8003b50 <HAL_GPIO_Init+0xcc>
 8003afa:	2b12      	cmp	r3, #18
 8003afc:	d859      	bhi.n	8003bb2 <HAL_GPIO_Init+0x12e>
 8003afe:	a201      	add	r2, pc, #4	; (adr r2, 8003b04 <HAL_GPIO_Init+0x80>)
 8003b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b04:	08003b7f 	.word	0x08003b7f
 8003b08:	08003b59 	.word	0x08003b59
 8003b0c:	08003b6b 	.word	0x08003b6b
 8003b10:	08003bad 	.word	0x08003bad
 8003b14:	08003bb3 	.word	0x08003bb3
 8003b18:	08003bb3 	.word	0x08003bb3
 8003b1c:	08003bb3 	.word	0x08003bb3
 8003b20:	08003bb3 	.word	0x08003bb3
 8003b24:	08003bb3 	.word	0x08003bb3
 8003b28:	08003bb3 	.word	0x08003bb3
 8003b2c:	08003bb3 	.word	0x08003bb3
 8003b30:	08003bb3 	.word	0x08003bb3
 8003b34:	08003bb3 	.word	0x08003bb3
 8003b38:	08003bb3 	.word	0x08003bb3
 8003b3c:	08003bb3 	.word	0x08003bb3
 8003b40:	08003bb3 	.word	0x08003bb3
 8003b44:	08003bb3 	.word	0x08003bb3
 8003b48:	08003b61 	.word	0x08003b61
 8003b4c:	08003b75 	.word	0x08003b75
 8003b50:	4a79      	ldr	r2, [pc, #484]	; (8003d38 <HAL_GPIO_Init+0x2b4>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d013      	beq.n	8003b7e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003b56:	e02c      	b.n	8003bb2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	623b      	str	r3, [r7, #32]
          break;
 8003b5e:	e029      	b.n	8003bb4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	3304      	adds	r3, #4
 8003b66:	623b      	str	r3, [r7, #32]
          break;
 8003b68:	e024      	b.n	8003bb4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	68db      	ldr	r3, [r3, #12]
 8003b6e:	3308      	adds	r3, #8
 8003b70:	623b      	str	r3, [r7, #32]
          break;
 8003b72:	e01f      	b.n	8003bb4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	330c      	adds	r3, #12
 8003b7a:	623b      	str	r3, [r7, #32]
          break;
 8003b7c:	e01a      	b.n	8003bb4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d102      	bne.n	8003b8c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003b86:	2304      	movs	r3, #4
 8003b88:	623b      	str	r3, [r7, #32]
          break;
 8003b8a:	e013      	b.n	8003bb4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d105      	bne.n	8003ba0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003b94:	2308      	movs	r3, #8
 8003b96:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	69fa      	ldr	r2, [r7, #28]
 8003b9c:	611a      	str	r2, [r3, #16]
          break;
 8003b9e:	e009      	b.n	8003bb4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003ba0:	2308      	movs	r3, #8
 8003ba2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	69fa      	ldr	r2, [r7, #28]
 8003ba8:	615a      	str	r2, [r3, #20]
          break;
 8003baa:	e003      	b.n	8003bb4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003bac:	2300      	movs	r3, #0
 8003bae:	623b      	str	r3, [r7, #32]
          break;
 8003bb0:	e000      	b.n	8003bb4 <HAL_GPIO_Init+0x130>
          break;
 8003bb2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003bb4:	69bb      	ldr	r3, [r7, #24]
 8003bb6:	2bff      	cmp	r3, #255	; 0xff
 8003bb8:	d801      	bhi.n	8003bbe <HAL_GPIO_Init+0x13a>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	e001      	b.n	8003bc2 <HAL_GPIO_Init+0x13e>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	3304      	adds	r3, #4
 8003bc2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	2bff      	cmp	r3, #255	; 0xff
 8003bc8:	d802      	bhi.n	8003bd0 <HAL_GPIO_Init+0x14c>
 8003bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	e002      	b.n	8003bd6 <HAL_GPIO_Init+0x152>
 8003bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd2:	3b08      	subs	r3, #8
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	210f      	movs	r1, #15
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	fa01 f303 	lsl.w	r3, r1, r3
 8003be4:	43db      	mvns	r3, r3
 8003be6:	401a      	ands	r2, r3
 8003be8:	6a39      	ldr	r1, [r7, #32]
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	fa01 f303 	lsl.w	r3, r1, r3
 8003bf0:	431a      	orrs	r2, r3
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	f000 80b1 	beq.w	8003d66 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003c04:	4b4d      	ldr	r3, [pc, #308]	; (8003d3c <HAL_GPIO_Init+0x2b8>)
 8003c06:	699b      	ldr	r3, [r3, #24]
 8003c08:	4a4c      	ldr	r2, [pc, #304]	; (8003d3c <HAL_GPIO_Init+0x2b8>)
 8003c0a:	f043 0301 	orr.w	r3, r3, #1
 8003c0e:	6193      	str	r3, [r2, #24]
 8003c10:	4b4a      	ldr	r3, [pc, #296]	; (8003d3c <HAL_GPIO_Init+0x2b8>)
 8003c12:	699b      	ldr	r3, [r3, #24]
 8003c14:	f003 0301 	and.w	r3, r3, #1
 8003c18:	60bb      	str	r3, [r7, #8]
 8003c1a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003c1c:	4a48      	ldr	r2, [pc, #288]	; (8003d40 <HAL_GPIO_Init+0x2bc>)
 8003c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c20:	089b      	lsrs	r3, r3, #2
 8003c22:	3302      	adds	r3, #2
 8003c24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c28:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2c:	f003 0303 	and.w	r3, r3, #3
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	220f      	movs	r2, #15
 8003c34:	fa02 f303 	lsl.w	r3, r2, r3
 8003c38:	43db      	mvns	r3, r3
 8003c3a:	68fa      	ldr	r2, [r7, #12]
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	4a40      	ldr	r2, [pc, #256]	; (8003d44 <HAL_GPIO_Init+0x2c0>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d013      	beq.n	8003c70 <HAL_GPIO_Init+0x1ec>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	4a3f      	ldr	r2, [pc, #252]	; (8003d48 <HAL_GPIO_Init+0x2c4>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d00d      	beq.n	8003c6c <HAL_GPIO_Init+0x1e8>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	4a3e      	ldr	r2, [pc, #248]	; (8003d4c <HAL_GPIO_Init+0x2c8>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d007      	beq.n	8003c68 <HAL_GPIO_Init+0x1e4>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	4a3d      	ldr	r2, [pc, #244]	; (8003d50 <HAL_GPIO_Init+0x2cc>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d101      	bne.n	8003c64 <HAL_GPIO_Init+0x1e0>
 8003c60:	2303      	movs	r3, #3
 8003c62:	e006      	b.n	8003c72 <HAL_GPIO_Init+0x1ee>
 8003c64:	2304      	movs	r3, #4
 8003c66:	e004      	b.n	8003c72 <HAL_GPIO_Init+0x1ee>
 8003c68:	2302      	movs	r3, #2
 8003c6a:	e002      	b.n	8003c72 <HAL_GPIO_Init+0x1ee>
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e000      	b.n	8003c72 <HAL_GPIO_Init+0x1ee>
 8003c70:	2300      	movs	r3, #0
 8003c72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c74:	f002 0203 	and.w	r2, r2, #3
 8003c78:	0092      	lsls	r2, r2, #2
 8003c7a:	4093      	lsls	r3, r2
 8003c7c:	68fa      	ldr	r2, [r7, #12]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003c82:	492f      	ldr	r1, [pc, #188]	; (8003d40 <HAL_GPIO_Init+0x2bc>)
 8003c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c86:	089b      	lsrs	r3, r3, #2
 8003c88:	3302      	adds	r3, #2
 8003c8a:	68fa      	ldr	r2, [r7, #12]
 8003c8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d006      	beq.n	8003caa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003c9c:	4b2d      	ldr	r3, [pc, #180]	; (8003d54 <HAL_GPIO_Init+0x2d0>)
 8003c9e:	689a      	ldr	r2, [r3, #8]
 8003ca0:	492c      	ldr	r1, [pc, #176]	; (8003d54 <HAL_GPIO_Init+0x2d0>)
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	608b      	str	r3, [r1, #8]
 8003ca8:	e006      	b.n	8003cb8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003caa:	4b2a      	ldr	r3, [pc, #168]	; (8003d54 <HAL_GPIO_Init+0x2d0>)
 8003cac:	689a      	ldr	r2, [r3, #8]
 8003cae:	69bb      	ldr	r3, [r7, #24]
 8003cb0:	43db      	mvns	r3, r3
 8003cb2:	4928      	ldr	r1, [pc, #160]	; (8003d54 <HAL_GPIO_Init+0x2d0>)
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d006      	beq.n	8003cd2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003cc4:	4b23      	ldr	r3, [pc, #140]	; (8003d54 <HAL_GPIO_Init+0x2d0>)
 8003cc6:	68da      	ldr	r2, [r3, #12]
 8003cc8:	4922      	ldr	r1, [pc, #136]	; (8003d54 <HAL_GPIO_Init+0x2d0>)
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	60cb      	str	r3, [r1, #12]
 8003cd0:	e006      	b.n	8003ce0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003cd2:	4b20      	ldr	r3, [pc, #128]	; (8003d54 <HAL_GPIO_Init+0x2d0>)
 8003cd4:	68da      	ldr	r2, [r3, #12]
 8003cd6:	69bb      	ldr	r3, [r7, #24]
 8003cd8:	43db      	mvns	r3, r3
 8003cda:	491e      	ldr	r1, [pc, #120]	; (8003d54 <HAL_GPIO_Init+0x2d0>)
 8003cdc:	4013      	ands	r3, r2
 8003cde:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d006      	beq.n	8003cfa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003cec:	4b19      	ldr	r3, [pc, #100]	; (8003d54 <HAL_GPIO_Init+0x2d0>)
 8003cee:	685a      	ldr	r2, [r3, #4]
 8003cf0:	4918      	ldr	r1, [pc, #96]	; (8003d54 <HAL_GPIO_Init+0x2d0>)
 8003cf2:	69bb      	ldr	r3, [r7, #24]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	604b      	str	r3, [r1, #4]
 8003cf8:	e006      	b.n	8003d08 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003cfa:	4b16      	ldr	r3, [pc, #88]	; (8003d54 <HAL_GPIO_Init+0x2d0>)
 8003cfc:	685a      	ldr	r2, [r3, #4]
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	43db      	mvns	r3, r3
 8003d02:	4914      	ldr	r1, [pc, #80]	; (8003d54 <HAL_GPIO_Init+0x2d0>)
 8003d04:	4013      	ands	r3, r2
 8003d06:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d021      	beq.n	8003d58 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003d14:	4b0f      	ldr	r3, [pc, #60]	; (8003d54 <HAL_GPIO_Init+0x2d0>)
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	490e      	ldr	r1, [pc, #56]	; (8003d54 <HAL_GPIO_Init+0x2d0>)
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	600b      	str	r3, [r1, #0]
 8003d20:	e021      	b.n	8003d66 <HAL_GPIO_Init+0x2e2>
 8003d22:	bf00      	nop
 8003d24:	10320000 	.word	0x10320000
 8003d28:	10310000 	.word	0x10310000
 8003d2c:	10220000 	.word	0x10220000
 8003d30:	10210000 	.word	0x10210000
 8003d34:	10120000 	.word	0x10120000
 8003d38:	10110000 	.word	0x10110000
 8003d3c:	40021000 	.word	0x40021000
 8003d40:	40010000 	.word	0x40010000
 8003d44:	40010800 	.word	0x40010800
 8003d48:	40010c00 	.word	0x40010c00
 8003d4c:	40011000 	.word	0x40011000
 8003d50:	40011400 	.word	0x40011400
 8003d54:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003d58:	4b0b      	ldr	r3, [pc, #44]	; (8003d88 <HAL_GPIO_Init+0x304>)
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	69bb      	ldr	r3, [r7, #24]
 8003d5e:	43db      	mvns	r3, r3
 8003d60:	4909      	ldr	r1, [pc, #36]	; (8003d88 <HAL_GPIO_Init+0x304>)
 8003d62:	4013      	ands	r3, r2
 8003d64:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d68:	3301      	adds	r3, #1
 8003d6a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d72:	fa22 f303 	lsr.w	r3, r2, r3
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	f47f ae8e 	bne.w	8003a98 <HAL_GPIO_Init+0x14>
  }
}
 8003d7c:	bf00      	nop
 8003d7e:	bf00      	nop
 8003d80:	372c      	adds	r7, #44	; 0x2c
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bc80      	pop	{r7}
 8003d86:	4770      	bx	lr
 8003d88:	40010400 	.word	0x40010400

08003d8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	460b      	mov	r3, r1
 8003d96:	807b      	strh	r3, [r7, #2]
 8003d98:	4613      	mov	r3, r2
 8003d9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003d9c:	787b      	ldrb	r3, [r7, #1]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d003      	beq.n	8003daa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003da2:	887a      	ldrh	r2, [r7, #2]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003da8:	e003      	b.n	8003db2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003daa:	887b      	ldrh	r3, [r7, #2]
 8003dac:	041a      	lsls	r2, r3, #16
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	611a      	str	r2, [r3, #16]
}
 8003db2:	bf00      	nop
 8003db4:	370c      	adds	r7, #12
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bc80      	pop	{r7}
 8003dba:	4770      	bx	lr

08003dbc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b085      	sub	sp, #20
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	460b      	mov	r3, r1
 8003dc6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003dce:	887a      	ldrh	r2, [r7, #2]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	041a      	lsls	r2, r3, #16
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	43d9      	mvns	r1, r3
 8003dda:	887b      	ldrh	r3, [r7, #2]
 8003ddc:	400b      	ands	r3, r1
 8003dde:	431a      	orrs	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	611a      	str	r2, [r3, #16]
}
 8003de4:	bf00      	nop
 8003de6:	3714      	adds	r7, #20
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bc80      	pop	{r7}
 8003dec:	4770      	bx	lr

08003dee <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003dee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003df0:	b08f      	sub	sp, #60	; 0x3c
 8003df2:	af0a      	add	r7, sp, #40	; 0x28
 8003df4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d101      	bne.n	8003e00 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e10f      	b.n	8004020 <HAL_PCD_Init+0x232>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d106      	bne.n	8003e20 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f005 fda2 	bl	8009964 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2203      	movs	r2, #3
 8003e24:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d102      	bne.n	8003e3a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f002 fe94 	bl	8006b6c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	603b      	str	r3, [r7, #0]
 8003e4a:	687e      	ldr	r6, [r7, #4]
 8003e4c:	466d      	mov	r5, sp
 8003e4e:	f106 0410 	add.w	r4, r6, #16
 8003e52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e5a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003e5e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003e62:	1d33      	adds	r3, r6, #4
 8003e64:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e66:	6838      	ldr	r0, [r7, #0]
 8003e68:	f002 fdb2 	bl	80069d0 <USB_CoreInit>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d005      	beq.n	8003e7e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2202      	movs	r2, #2
 8003e76:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e0d0      	b.n	8004020 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	2100      	movs	r1, #0
 8003e84:	4618      	mov	r0, r3
 8003e86:	f002 fe81 	bl	8006b8c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	73fb      	strb	r3, [r7, #15]
 8003e8e:	e04a      	b.n	8003f26 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003e90:	7bfa      	ldrb	r2, [r7, #15]
 8003e92:	6879      	ldr	r1, [r7, #4]
 8003e94:	4613      	mov	r3, r2
 8003e96:	00db      	lsls	r3, r3, #3
 8003e98:	4413      	add	r3, r2
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	440b      	add	r3, r1
 8003e9e:	333d      	adds	r3, #61	; 0x3d
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003ea4:	7bfa      	ldrb	r2, [r7, #15]
 8003ea6:	6879      	ldr	r1, [r7, #4]
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	00db      	lsls	r3, r3, #3
 8003eac:	4413      	add	r3, r2
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	440b      	add	r3, r1
 8003eb2:	333c      	adds	r3, #60	; 0x3c
 8003eb4:	7bfa      	ldrb	r2, [r7, #15]
 8003eb6:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003eb8:	7bfa      	ldrb	r2, [r7, #15]
 8003eba:	7bfb      	ldrb	r3, [r7, #15]
 8003ebc:	b298      	uxth	r0, r3
 8003ebe:	6879      	ldr	r1, [r7, #4]
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	00db      	lsls	r3, r3, #3
 8003ec4:	4413      	add	r3, r2
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	440b      	add	r3, r1
 8003eca:	3356      	adds	r3, #86	; 0x56
 8003ecc:	4602      	mov	r2, r0
 8003ece:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003ed0:	7bfa      	ldrb	r2, [r7, #15]
 8003ed2:	6879      	ldr	r1, [r7, #4]
 8003ed4:	4613      	mov	r3, r2
 8003ed6:	00db      	lsls	r3, r3, #3
 8003ed8:	4413      	add	r3, r2
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	440b      	add	r3, r1
 8003ede:	3340      	adds	r3, #64	; 0x40
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003ee4:	7bfa      	ldrb	r2, [r7, #15]
 8003ee6:	6879      	ldr	r1, [r7, #4]
 8003ee8:	4613      	mov	r3, r2
 8003eea:	00db      	lsls	r3, r3, #3
 8003eec:	4413      	add	r3, r2
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	440b      	add	r3, r1
 8003ef2:	3344      	adds	r3, #68	; 0x44
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003ef8:	7bfa      	ldrb	r2, [r7, #15]
 8003efa:	6879      	ldr	r1, [r7, #4]
 8003efc:	4613      	mov	r3, r2
 8003efe:	00db      	lsls	r3, r3, #3
 8003f00:	4413      	add	r3, r2
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	440b      	add	r3, r1
 8003f06:	3348      	adds	r3, #72	; 0x48
 8003f08:	2200      	movs	r2, #0
 8003f0a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003f0c:	7bfa      	ldrb	r2, [r7, #15]
 8003f0e:	6879      	ldr	r1, [r7, #4]
 8003f10:	4613      	mov	r3, r2
 8003f12:	00db      	lsls	r3, r3, #3
 8003f14:	4413      	add	r3, r2
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	440b      	add	r3, r1
 8003f1a:	334c      	adds	r3, #76	; 0x4c
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f20:	7bfb      	ldrb	r3, [r7, #15]
 8003f22:	3301      	adds	r3, #1
 8003f24:	73fb      	strb	r3, [r7, #15]
 8003f26:	7bfa      	ldrb	r2, [r7, #15]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d3af      	bcc.n	8003e90 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f30:	2300      	movs	r3, #0
 8003f32:	73fb      	strb	r3, [r7, #15]
 8003f34:	e044      	b.n	8003fc0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003f36:	7bfa      	ldrb	r2, [r7, #15]
 8003f38:	6879      	ldr	r1, [r7, #4]
 8003f3a:	4613      	mov	r3, r2
 8003f3c:	00db      	lsls	r3, r3, #3
 8003f3e:	4413      	add	r3, r2
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	440b      	add	r3, r1
 8003f44:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003f48:	2200      	movs	r2, #0
 8003f4a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003f4c:	7bfa      	ldrb	r2, [r7, #15]
 8003f4e:	6879      	ldr	r1, [r7, #4]
 8003f50:	4613      	mov	r3, r2
 8003f52:	00db      	lsls	r3, r3, #3
 8003f54:	4413      	add	r3, r2
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	440b      	add	r3, r1
 8003f5a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003f5e:	7bfa      	ldrb	r2, [r7, #15]
 8003f60:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003f62:	7bfa      	ldrb	r2, [r7, #15]
 8003f64:	6879      	ldr	r1, [r7, #4]
 8003f66:	4613      	mov	r3, r2
 8003f68:	00db      	lsls	r3, r3, #3
 8003f6a:	4413      	add	r3, r2
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	440b      	add	r3, r1
 8003f70:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003f74:	2200      	movs	r2, #0
 8003f76:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003f78:	7bfa      	ldrb	r2, [r7, #15]
 8003f7a:	6879      	ldr	r1, [r7, #4]
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	00db      	lsls	r3, r3, #3
 8003f80:	4413      	add	r3, r2
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	440b      	add	r3, r1
 8003f86:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003f8e:	7bfa      	ldrb	r2, [r7, #15]
 8003f90:	6879      	ldr	r1, [r7, #4]
 8003f92:	4613      	mov	r3, r2
 8003f94:	00db      	lsls	r3, r3, #3
 8003f96:	4413      	add	r3, r2
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	440b      	add	r3, r1
 8003f9c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003fa4:	7bfa      	ldrb	r2, [r7, #15]
 8003fa6:	6879      	ldr	r1, [r7, #4]
 8003fa8:	4613      	mov	r3, r2
 8003faa:	00db      	lsls	r3, r3, #3
 8003fac:	4413      	add	r3, r2
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	440b      	add	r3, r1
 8003fb2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fba:	7bfb      	ldrb	r3, [r7, #15]
 8003fbc:	3301      	adds	r3, #1
 8003fbe:	73fb      	strb	r3, [r7, #15]
 8003fc0:	7bfa      	ldrb	r2, [r7, #15]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d3b5      	bcc.n	8003f36 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	603b      	str	r3, [r7, #0]
 8003fd0:	687e      	ldr	r6, [r7, #4]
 8003fd2:	466d      	mov	r5, sp
 8003fd4:	f106 0410 	add.w	r4, r6, #16
 8003fd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003fda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003fdc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003fde:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003fe0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003fe4:	e885 0003 	stmia.w	r5, {r0, r1}
 8003fe8:	1d33      	adds	r3, r6, #4
 8003fea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003fec:	6838      	ldr	r0, [r7, #0]
 8003fee:	f002 fe19 	bl	8006c24 <USB_DevInit>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d005      	beq.n	8004004 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2202      	movs	r2, #2
 8003ffc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e00d      	b.n	8004020 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  (void)USB_DevDisconnect(hpcd->Instance);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4618      	mov	r0, r3
 800401a:	f003 fda3 	bl	8007b64 <USB_DevDisconnect>

  return HAL_OK;
 800401e:	2300      	movs	r3, #0
}
 8004020:	4618      	mov	r0, r3
 8004022:	3714      	adds	r7, #20
 8004024:	46bd      	mov	sp, r7
 8004026:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004028 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b082      	sub	sp, #8
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004036:	2b01      	cmp	r3, #1
 8004038:	d101      	bne.n	800403e <HAL_PCD_Start+0x16>
 800403a:	2302      	movs	r3, #2
 800403c:	e012      	b.n	8004064 <HAL_PCD_Start+0x3c>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2201      	movs	r2, #1
 8004042:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4618      	mov	r0, r3
 800404c:	f002 fd7e 	bl	8006b4c <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4618      	mov	r0, r3
 8004056:	f003 fd65 	bl	8007b24 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004062:	2300      	movs	r3, #0
}
 8004064:	4618      	mov	r0, r3
 8004066:	3708      	adds	r7, #8
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}

0800406c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800406c:	b590      	push	{r4, r7, lr}
 800406e:	b08d      	sub	sp, #52	; 0x34
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800407a:	6a3b      	ldr	r3, [r7, #32]
 800407c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4618      	mov	r0, r3
 8004084:	f003 fe1c 	bl	8007cc0 <USB_GetMode>
 8004088:	4603      	mov	r3, r0
 800408a:	2b00      	cmp	r3, #0
 800408c:	f040 8443 	bne.w	8004916 <HAL_PCD_IRQHandler+0x8aa>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4618      	mov	r0, r3
 8004096:	f003 fd85 	bl	8007ba4 <USB_ReadInterrupts>
 800409a:	4603      	mov	r3, r0
 800409c:	2b00      	cmp	r3, #0
 800409e:	f000 8439 	beq.w	8004914 <HAL_PCD_IRQHandler+0x8a8>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80040a2:	69fb      	ldr	r3, [r7, #28]
 80040a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	0a1b      	lsrs	r3, r3, #8
 80040ac:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4618      	mov	r0, r3
 80040bc:	f003 fd72 	bl	8007ba4 <USB_ReadInterrupts>
 80040c0:	4603      	mov	r3, r0
 80040c2:	f003 0302 	and.w	r3, r3, #2
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	d107      	bne.n	80040da <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	695a      	ldr	r2, [r3, #20]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f002 0202 	and.w	r2, r2, #2
 80040d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4618      	mov	r0, r3
 80040e0:	f003 fd60 	bl	8007ba4 <USB_ReadInterrupts>
 80040e4:	4603      	mov	r3, r0
 80040e6:	f003 0310 	and.w	r3, r3, #16
 80040ea:	2b10      	cmp	r3, #16
 80040ec:	d161      	bne.n	80041b2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	699a      	ldr	r2, [r3, #24]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f022 0210 	bic.w	r2, r2, #16
 80040fc:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80040fe:	6a3b      	ldr	r3, [r7, #32]
 8004100:	6a1b      	ldr	r3, [r3, #32]
 8004102:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	f003 020f 	and.w	r2, r3, #15
 800410a:	4613      	mov	r3, r2
 800410c:	00db      	lsls	r3, r3, #3
 800410e:	4413      	add	r3, r2
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	4413      	add	r3, r2
 800411a:	3304      	adds	r3, #4
 800411c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800411e:	69bb      	ldr	r3, [r7, #24]
 8004120:	0c5b      	lsrs	r3, r3, #17
 8004122:	f003 030f 	and.w	r3, r3, #15
 8004126:	2b02      	cmp	r3, #2
 8004128:	d124      	bne.n	8004174 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800412a:	69ba      	ldr	r2, [r7, #24]
 800412c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004130:	4013      	ands	r3, r2
 8004132:	2b00      	cmp	r3, #0
 8004134:	d035      	beq.n	80041a2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800413a:	69bb      	ldr	r3, [r7, #24]
 800413c:	091b      	lsrs	r3, r3, #4
 800413e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004140:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004144:	b29b      	uxth	r3, r3
 8004146:	461a      	mov	r2, r3
 8004148:	6a38      	ldr	r0, [r7, #32]
 800414a:	f003 fb9d 	bl	8007888 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	68da      	ldr	r2, [r3, #12]
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	091b      	lsrs	r3, r3, #4
 8004156:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800415a:	441a      	add	r2, r3
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	695a      	ldr	r2, [r3, #20]
 8004164:	69bb      	ldr	r3, [r7, #24]
 8004166:	091b      	lsrs	r3, r3, #4
 8004168:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800416c:	441a      	add	r2, r3
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	615a      	str	r2, [r3, #20]
 8004172:	e016      	b.n	80041a2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004174:	69bb      	ldr	r3, [r7, #24]
 8004176:	0c5b      	lsrs	r3, r3, #17
 8004178:	f003 030f 	and.w	r3, r3, #15
 800417c:	2b06      	cmp	r3, #6
 800417e:	d110      	bne.n	80041a2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004186:	2208      	movs	r2, #8
 8004188:	4619      	mov	r1, r3
 800418a:	6a38      	ldr	r0, [r7, #32]
 800418c:	f003 fb7c 	bl	8007888 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	695a      	ldr	r2, [r3, #20]
 8004194:	69bb      	ldr	r3, [r7, #24]
 8004196:	091b      	lsrs	r3, r3, #4
 8004198:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800419c:	441a      	add	r2, r3
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	699a      	ldr	r2, [r3, #24]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f042 0210 	orr.w	r2, r2, #16
 80041b0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4618      	mov	r0, r3
 80041b8:	f003 fcf4 	bl	8007ba4 <USB_ReadInterrupts>
 80041bc:	4603      	mov	r3, r0
 80041be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041c2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80041c6:	f040 80a7 	bne.w	8004318 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80041ca:	2300      	movs	r3, #0
 80041cc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4618      	mov	r0, r3
 80041d4:	f003 fcf8 	bl	8007bc8 <USB_ReadDevAllOutEpInterrupt>
 80041d8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80041da:	e099      	b.n	8004310 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80041dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041de:	f003 0301 	and.w	r3, r3, #1
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	f000 808e 	beq.w	8004304 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041ee:	b2d2      	uxtb	r2, r2
 80041f0:	4611      	mov	r1, r2
 80041f2:	4618      	mov	r0, r3
 80041f4:	f003 fd1a 	bl	8007c2c <USB_ReadDevOutEPInterrupt>
 80041f8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	f003 0301 	and.w	r3, r3, #1
 8004200:	2b00      	cmp	r3, #0
 8004202:	d00c      	beq.n	800421e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004206:	015a      	lsls	r2, r3, #5
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	4413      	add	r3, r2
 800420c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004210:	461a      	mov	r2, r3
 8004212:	2301      	movs	r3, #1
 8004214:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004216:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f000 fe41 	bl	8004ea0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	f003 0308 	and.w	r3, r3, #8
 8004224:	2b00      	cmp	r3, #0
 8004226:	d00c      	beq.n	8004242 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422a:	015a      	lsls	r2, r3, #5
 800422c:	69fb      	ldr	r3, [r7, #28]
 800422e:	4413      	add	r3, r2
 8004230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004234:	461a      	mov	r2, r3
 8004236:	2308      	movs	r3, #8
 8004238:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800423a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f000 fe7d 	bl	8004f3c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	f003 0310 	and.w	r3, r3, #16
 8004248:	2b00      	cmp	r3, #0
 800424a:	d008      	beq.n	800425e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800424c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424e:	015a      	lsls	r2, r3, #5
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	4413      	add	r3, r2
 8004254:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004258:	461a      	mov	r2, r3
 800425a:	2310      	movs	r3, #16
 800425c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	f003 0302 	and.w	r3, r3, #2
 8004264:	2b00      	cmp	r3, #0
 8004266:	d030      	beq.n	80042ca <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004268:	6a3b      	ldr	r3, [r7, #32]
 800426a:	695b      	ldr	r3, [r3, #20]
 800426c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004270:	2b80      	cmp	r3, #128	; 0x80
 8004272:	d109      	bne.n	8004288 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004274:	69fb      	ldr	r3, [r7, #28]
 8004276:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	69fa      	ldr	r2, [r7, #28]
 800427e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004282:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004286:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004288:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800428a:	4613      	mov	r3, r2
 800428c:	00db      	lsls	r3, r3, #3
 800428e:	4413      	add	r3, r2
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	4413      	add	r3, r2
 800429a:	3304      	adds	r3, #4
 800429c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	78db      	ldrb	r3, [r3, #3]
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d108      	bne.n	80042b8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	2200      	movs	r2, #0
 80042aa:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80042ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	4619      	mov	r1, r3
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f005 fc44 	bl	8009b40 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80042b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ba:	015a      	lsls	r2, r3, #5
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	4413      	add	r3, r2
 80042c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042c4:	461a      	mov	r2, r3
 80042c6:	2302      	movs	r3, #2
 80042c8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	f003 0320 	and.w	r3, r3, #32
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d008      	beq.n	80042e6 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80042d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d6:	015a      	lsls	r2, r3, #5
 80042d8:	69fb      	ldr	r3, [r7, #28]
 80042da:	4413      	add	r3, r2
 80042dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042e0:	461a      	mov	r2, r3
 80042e2:	2320      	movs	r3, #32
 80042e4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d009      	beq.n	8004304 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80042f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f2:	015a      	lsls	r2, r3, #5
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	4413      	add	r3, r2
 80042f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042fc:	461a      	mov	r2, r3
 80042fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004302:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004306:	3301      	adds	r3, #1
 8004308:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800430a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800430c:	085b      	lsrs	r3, r3, #1
 800430e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004312:	2b00      	cmp	r3, #0
 8004314:	f47f af62 	bne.w	80041dc <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4618      	mov	r0, r3
 800431e:	f003 fc41 	bl	8007ba4 <USB_ReadInterrupts>
 8004322:	4603      	mov	r3, r0
 8004324:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004328:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800432c:	f040 80a4 	bne.w	8004478 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4618      	mov	r0, r3
 8004336:	f003 fc60 	bl	8007bfa <USB_ReadDevAllInEpInterrupt>
 800433a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800433c:	2300      	movs	r3, #0
 800433e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004340:	e096      	b.n	8004470 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004344:	f003 0301 	and.w	r3, r3, #1
 8004348:	2b00      	cmp	r3, #0
 800434a:	f000 808b 	beq.w	8004464 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004354:	b2d2      	uxtb	r2, r2
 8004356:	4611      	mov	r1, r2
 8004358:	4618      	mov	r0, r3
 800435a:	f003 fc84 	bl	8007c66 <USB_ReadDevInEPInterrupt>
 800435e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	f003 0301 	and.w	r3, r3, #1
 8004366:	2b00      	cmp	r3, #0
 8004368:	d020      	beq.n	80043ac <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800436a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436c:	f003 030f 	and.w	r3, r3, #15
 8004370:	2201      	movs	r2, #1
 8004372:	fa02 f303 	lsl.w	r3, r2, r3
 8004376:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800437e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	43db      	mvns	r3, r3
 8004384:	69f9      	ldr	r1, [r7, #28]
 8004386:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800438a:	4013      	ands	r3, r2
 800438c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800438e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004390:	015a      	lsls	r2, r3, #5
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	4413      	add	r3, r2
 8004396:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800439a:	461a      	mov	r2, r3
 800439c:	2301      	movs	r3, #1
 800439e:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80043a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	4619      	mov	r1, r3
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f005 fb4f 	bl	8009a4a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	f003 0308 	and.w	r3, r3, #8
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d008      	beq.n	80043c8 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80043b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b8:	015a      	lsls	r2, r3, #5
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	4413      	add	r3, r2
 80043be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043c2:	461a      	mov	r2, r3
 80043c4:	2308      	movs	r3, #8
 80043c6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	f003 0310 	and.w	r3, r3, #16
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d008      	beq.n	80043e4 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80043d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d4:	015a      	lsls	r2, r3, #5
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	4413      	add	r3, r2
 80043da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043de:	461a      	mov	r2, r3
 80043e0:	2310      	movs	r3, #16
 80043e2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d008      	beq.n	8004400 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80043ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f0:	015a      	lsls	r2, r3, #5
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	4413      	add	r3, r2
 80043f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043fa:	461a      	mov	r2, r3
 80043fc:	2340      	movs	r3, #64	; 0x40
 80043fe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	f003 0302 	and.w	r3, r3, #2
 8004406:	2b00      	cmp	r3, #0
 8004408:	d023      	beq.n	8004452 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800440a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800440c:	6a38      	ldr	r0, [r7, #32]
 800440e:	f002 fd2b 	bl	8006e68 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004412:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004414:	4613      	mov	r3, r2
 8004416:	00db      	lsls	r3, r3, #3
 8004418:	4413      	add	r3, r2
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	3338      	adds	r3, #56	; 0x38
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	4413      	add	r3, r2
 8004422:	3304      	adds	r3, #4
 8004424:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	78db      	ldrb	r3, [r3, #3]
 800442a:	2b01      	cmp	r3, #1
 800442c:	d108      	bne.n	8004440 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	2200      	movs	r2, #0
 8004432:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004436:	b2db      	uxtb	r3, r3
 8004438:	4619      	mov	r1, r3
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f005 fb92 	bl	8009b64 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004442:	015a      	lsls	r2, r3, #5
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	4413      	add	r3, r2
 8004448:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800444c:	461a      	mov	r2, r3
 800444e:	2302      	movs	r3, #2
 8004450:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004458:	2b00      	cmp	r3, #0
 800445a:	d003      	beq.n	8004464 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800445c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f000 fc96 	bl	8004d90 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004466:	3301      	adds	r3, #1
 8004468:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800446a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800446c:	085b      	lsrs	r3, r3, #1
 800446e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004472:	2b00      	cmp	r3, #0
 8004474:	f47f af65 	bne.w	8004342 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4618      	mov	r0, r3
 800447e:	f003 fb91 	bl	8007ba4 <USB_ReadInterrupts>
 8004482:	4603      	mov	r3, r0
 8004484:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004488:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800448c:	d114      	bne.n	80044b8 <HAL_PCD_IRQHandler+0x44c>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	69fa      	ldr	r2, [r7, #28]
 8004498:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800449c:	f023 0301 	bic.w	r3, r3, #1
 80044a0:	6053      	str	r3, [r2, #4]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResumeCallback(hpcd);
#else
      HAL_PCD_ResumeCallback(hpcd);
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f005 fb3e 	bl	8009b24 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	695a      	ldr	r2, [r3, #20]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80044b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4618      	mov	r0, r3
 80044be:	f003 fb71 	bl	8007ba4 <USB_ReadInterrupts>
 80044c2:	4603      	mov	r3, r0
 80044c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044cc:	d112      	bne.n	80044f4 <HAL_PCD_IRQHandler+0x488>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80044ce:	69fb      	ldr	r3, [r7, #28]
 80044d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	f003 0301 	and.w	r3, r3, #1
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d102      	bne.n	80044e4 <HAL_PCD_IRQHandler+0x478>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f005 fafa 	bl	8009ad8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	695a      	ldr	r2, [r3, #20]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80044f2:	615a      	str	r2, [r3, #20]
    }
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4618      	mov	r0, r3
 80044fa:	f003 fb53 	bl	8007ba4 <USB_ReadInterrupts>
 80044fe:	4603      	mov	r3, r0
 8004500:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004504:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004508:	f040 80b5 	bne.w	8004676 <HAL_PCD_IRQHandler+0x60a>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800450c:	69fb      	ldr	r3, [r7, #28]
 800450e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	69fa      	ldr	r2, [r7, #28]
 8004516:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800451a:	f023 0301 	bic.w	r3, r3, #1
 800451e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	2110      	movs	r1, #16
 8004526:	4618      	mov	r0, r3
 8004528:	f002 fc9e 	bl	8006e68 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800452c:	2300      	movs	r3, #0
 800452e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004530:	e046      	b.n	80045c0 <HAL_PCD_IRQHandler+0x554>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004534:	015a      	lsls	r2, r3, #5
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	4413      	add	r3, r2
 800453a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800453e:	461a      	mov	r2, r3
 8004540:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004544:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004548:	015a      	lsls	r2, r3, #5
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	4413      	add	r3, r2
 800454e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004556:	0151      	lsls	r1, r2, #5
 8004558:	69fa      	ldr	r2, [r7, #28]
 800455a:	440a      	add	r2, r1
 800455c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004560:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004564:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004568:	015a      	lsls	r2, r3, #5
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	4413      	add	r3, r2
 800456e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004572:	461a      	mov	r2, r3
 8004574:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004578:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800457a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800457c:	015a      	lsls	r2, r3, #5
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	4413      	add	r3, r2
 8004582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800458a:	0151      	lsls	r1, r2, #5
 800458c:	69fa      	ldr	r2, [r7, #28]
 800458e:	440a      	add	r2, r1
 8004590:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004594:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004598:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800459a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800459c:	015a      	lsls	r2, r3, #5
 800459e:	69fb      	ldr	r3, [r7, #28]
 80045a0:	4413      	add	r3, r2
 80045a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045aa:	0151      	lsls	r1, r2, #5
 80045ac:	69fa      	ldr	r2, [r7, #28]
 80045ae:	440a      	add	r2, r1
 80045b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045b4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80045b8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045bc:	3301      	adds	r3, #1
 80045be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d3b3      	bcc.n	8004532 <HAL_PCD_IRQHandler+0x4c6>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045d0:	69db      	ldr	r3, [r3, #28]
 80045d2:	69fa      	ldr	r2, [r7, #28]
 80045d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80045d8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80045dc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d016      	beq.n	8004614 <HAL_PCD_IRQHandler+0x5a8>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80045e6:	69fb      	ldr	r3, [r7, #28]
 80045e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045f0:	69fa      	ldr	r2, [r7, #28]
 80045f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80045f6:	f043 030b 	orr.w	r3, r3, #11
 80045fa:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80045fe:	69fb      	ldr	r3, [r7, #28]
 8004600:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004606:	69fa      	ldr	r2, [r7, #28]
 8004608:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800460c:	f043 030b 	orr.w	r3, r3, #11
 8004610:	6453      	str	r3, [r2, #68]	; 0x44
 8004612:	e015      	b.n	8004640 <HAL_PCD_IRQHandler+0x5d4>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004614:	69fb      	ldr	r3, [r7, #28]
 8004616:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800461a:	695b      	ldr	r3, [r3, #20]
 800461c:	69fa      	ldr	r2, [r7, #28]
 800461e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004622:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004626:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800462a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004632:	691b      	ldr	r3, [r3, #16]
 8004634:	69fa      	ldr	r2, [r7, #28]
 8004636:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800463a:	f043 030b 	orr.w	r3, r3, #11
 800463e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004640:	69fb      	ldr	r3, [r7, #28]
 8004642:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	69fa      	ldr	r2, [r7, #28]
 800464a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800464e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004652:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800465e:	4619      	mov	r1, r3
 8004660:	4610      	mov	r0, r2
 8004662:	f003 fb5d 	bl	8007d20 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	695a      	ldr	r2, [r3, #20]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004674:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4618      	mov	r0, r3
 800467c:	f003 fa92 	bl	8007ba4 <USB_ReadInterrupts>
 8004680:	4603      	mov	r3, r0
 8004682:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004686:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800468a:	d124      	bne.n	80046d6 <HAL_PCD_IRQHandler+0x66a>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4618      	mov	r0, r3
 8004692:	f003 fb22 	bl	8007cda <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4618      	mov	r0, r3
 800469c:	f002 fc60 	bl	8006f60 <USB_GetDevSpeed>
 80046a0:	4603      	mov	r3, r0
 80046a2:	461a      	mov	r2, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681c      	ldr	r4, [r3, #0]
 80046ac:	f001 f98c 	bl	80059c8 <HAL_RCC_GetHCLKFreq>
 80046b0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	461a      	mov	r2, r3
 80046ba:	4620      	mov	r0, r4
 80046bc:	f002 f9aa 	bl	8006a14 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f005 f9ea 	bl	8009a9a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	695a      	ldr	r2, [r3, #20]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80046d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4618      	mov	r0, r3
 80046dc:	f003 fa62 	bl	8007ba4 <USB_ReadInterrupts>
 80046e0:	4603      	mov	r3, r0
 80046e2:	f003 0308 	and.w	r3, r3, #8
 80046e6:	2b08      	cmp	r3, #8
 80046e8:	d10a      	bne.n	8004700 <HAL_PCD_IRQHandler+0x694>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f005 f9c7 	bl	8009a7e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	695a      	ldr	r2, [r3, #20]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f002 0208 	and.w	r2, r2, #8
 80046fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4618      	mov	r0, r3
 8004706:	f003 fa4d 	bl	8007ba4 <USB_ReadInterrupts>
 800470a:	4603      	mov	r3, r0
 800470c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004710:	2b80      	cmp	r3, #128	; 0x80
 8004712:	d122      	bne.n	800475a <HAL_PCD_IRQHandler+0x6ee>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004714:	6a3b      	ldr	r3, [r7, #32]
 8004716:	699b      	ldr	r3, [r3, #24]
 8004718:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800471c:	6a3b      	ldr	r3, [r7, #32]
 800471e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004720:	2301      	movs	r3, #1
 8004722:	627b      	str	r3, [r7, #36]	; 0x24
 8004724:	e014      	b.n	8004750 <HAL_PCD_IRQHandler+0x6e4>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004726:	6879      	ldr	r1, [r7, #4]
 8004728:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800472a:	4613      	mov	r3, r2
 800472c:	00db      	lsls	r3, r3, #3
 800472e:	4413      	add	r3, r2
 8004730:	009b      	lsls	r3, r3, #2
 8004732:	440b      	add	r3, r1
 8004734:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004738:	781b      	ldrb	r3, [r3, #0]
 800473a:	2b01      	cmp	r3, #1
 800473c:	d105      	bne.n	800474a <HAL_PCD_IRQHandler+0x6de>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800473e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004740:	b2db      	uxtb	r3, r3
 8004742:	4619      	mov	r1, r3
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f000 faf2 	bl	8004d2e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800474a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474c:	3301      	adds	r3, #1
 800474e:	627b      	str	r3, [r7, #36]	; 0x24
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004756:	429a      	cmp	r2, r3
 8004758:	d3e5      	bcc.n	8004726 <HAL_PCD_IRQHandler+0x6ba>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4618      	mov	r0, r3
 8004760:	f003 fa20 	bl	8007ba4 <USB_ReadInterrupts>
 8004764:	4603      	mov	r3, r0
 8004766:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800476a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800476e:	d13b      	bne.n	80047e8 <HAL_PCD_IRQHandler+0x77c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004770:	2301      	movs	r3, #1
 8004772:	627b      	str	r3, [r7, #36]	; 0x24
 8004774:	e02b      	b.n	80047ce <HAL_PCD_IRQHandler+0x762>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004778:	015a      	lsls	r2, r3, #5
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	4413      	add	r3, r2
 800477e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004786:	6879      	ldr	r1, [r7, #4]
 8004788:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800478a:	4613      	mov	r3, r2
 800478c:	00db      	lsls	r3, r3, #3
 800478e:	4413      	add	r3, r2
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	440b      	add	r3, r1
 8004794:	3340      	adds	r3, #64	; 0x40
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	2b01      	cmp	r3, #1
 800479a:	d115      	bne.n	80047c8 <HAL_PCD_IRQHandler+0x75c>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800479c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800479e:	2b00      	cmp	r3, #0
 80047a0:	da12      	bge.n	80047c8 <HAL_PCD_IRQHandler+0x75c>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80047a2:	6879      	ldr	r1, [r7, #4]
 80047a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047a6:	4613      	mov	r3, r2
 80047a8:	00db      	lsls	r3, r3, #3
 80047aa:	4413      	add	r3, r2
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	440b      	add	r3, r1
 80047b0:	333f      	adds	r3, #63	; 0x3f
 80047b2:	2201      	movs	r2, #1
 80047b4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80047b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	4619      	mov	r1, r3
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f000 fab3 	bl	8004d2e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80047c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ca:	3301      	adds	r3, #1
 80047cc:	627b      	str	r3, [r7, #36]	; 0x24
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d3ce      	bcc.n	8004776 <HAL_PCD_IRQHandler+0x70a>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	695a      	ldr	r2, [r3, #20]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80047e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4618      	mov	r0, r3
 80047ee:	f003 f9d9 	bl	8007ba4 <USB_ReadInterrupts>
 80047f2:	4603      	mov	r3, r0
 80047f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80047fc:	d155      	bne.n	80048aa <HAL_PCD_IRQHandler+0x83e>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80047fe:	2301      	movs	r3, #1
 8004800:	627b      	str	r3, [r7, #36]	; 0x24
 8004802:	e045      	b.n	8004890 <HAL_PCD_IRQHandler+0x824>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004806:	015a      	lsls	r2, r3, #5
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	4413      	add	r3, r2
 800480c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004814:	6879      	ldr	r1, [r7, #4]
 8004816:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004818:	4613      	mov	r3, r2
 800481a:	00db      	lsls	r3, r3, #3
 800481c:	4413      	add	r3, r2
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	440b      	add	r3, r1
 8004822:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	2b01      	cmp	r3, #1
 800482a:	d12e      	bne.n	800488a <HAL_PCD_IRQHandler+0x81e>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800482c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800482e:	2b00      	cmp	r3, #0
 8004830:	da2b      	bge.n	800488a <HAL_PCD_IRQHandler+0x81e>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004832:	69bb      	ldr	r3, [r7, #24]
 8004834:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800483e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004842:	429a      	cmp	r2, r3
 8004844:	d121      	bne.n	800488a <HAL_PCD_IRQHandler+0x81e>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004846:	6879      	ldr	r1, [r7, #4]
 8004848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800484a:	4613      	mov	r3, r2
 800484c:	00db      	lsls	r3, r3, #3
 800484e:	4413      	add	r3, r2
 8004850:	009b      	lsls	r3, r3, #2
 8004852:	440b      	add	r3, r1
 8004854:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004858:	2201      	movs	r2, #1
 800485a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800485c:	6a3b      	ldr	r3, [r7, #32]
 800485e:	699b      	ldr	r3, [r3, #24]
 8004860:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004864:	6a3b      	ldr	r3, [r7, #32]
 8004866:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004868:	6a3b      	ldr	r3, [r7, #32]
 800486a:	695b      	ldr	r3, [r3, #20]
 800486c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004870:	2b00      	cmp	r3, #0
 8004872:	d10a      	bne.n	800488a <HAL_PCD_IRQHandler+0x81e>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	69fa      	ldr	r2, [r7, #28]
 800487e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004882:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004886:	6053      	str	r3, [r2, #4]
            break;
 8004888:	e007      	b.n	800489a <HAL_PCD_IRQHandler+0x82e>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800488a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488c:	3301      	adds	r3, #1
 800488e:	627b      	str	r3, [r7, #36]	; 0x24
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004896:	429a      	cmp	r2, r3
 8004898:	d3b4      	bcc.n	8004804 <HAL_PCD_IRQHandler+0x798>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	695a      	ldr	r2, [r3, #20]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80048a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4618      	mov	r0, r3
 80048b0:	f003 f978 	bl	8007ba4 <USB_ReadInterrupts>
 80048b4:	4603      	mov	r3, r0
 80048b6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80048ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048be:	d10a      	bne.n	80048d6 <HAL_PCD_IRQHandler+0x86a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f005 f961 	bl	8009b88 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	695a      	ldr	r2, [r3, #20]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80048d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4618      	mov	r0, r3
 80048dc:	f003 f962 	bl	8007ba4 <USB_ReadInterrupts>
 80048e0:	4603      	mov	r3, r0
 80048e2:	f003 0304 	and.w	r3, r3, #4
 80048e6:	2b04      	cmp	r3, #4
 80048e8:	d115      	bne.n	8004916 <HAL_PCD_IRQHandler+0x8aa>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80048f2:	69bb      	ldr	r3, [r7, #24]
 80048f4:	f003 0304 	and.w	r3, r3, #4
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d002      	beq.n	8004902 <HAL_PCD_IRQHandler+0x896>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f005 f951 	bl	8009ba4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	6859      	ldr	r1, [r3, #4]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	69ba      	ldr	r2, [r7, #24]
 800490e:	430a      	orrs	r2, r1
 8004910:	605a      	str	r2, [r3, #4]
 8004912:	e000      	b.n	8004916 <HAL_PCD_IRQHandler+0x8aa>
      return;
 8004914:	bf00      	nop
    }
  }
}
 8004916:	3734      	adds	r7, #52	; 0x34
 8004918:	46bd      	mov	sp, r7
 800491a:	bd90      	pop	{r4, r7, pc}

0800491c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b082      	sub	sp, #8
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	460b      	mov	r3, r1
 8004926:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800492e:	2b01      	cmp	r3, #1
 8004930:	d101      	bne.n	8004936 <HAL_PCD_SetAddress+0x1a>
 8004932:	2302      	movs	r3, #2
 8004934:	e013      	b.n	800495e <HAL_PCD_SetAddress+0x42>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2201      	movs	r2, #1
 800493a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	78fa      	ldrb	r2, [r7, #3]
 8004942:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	78fa      	ldrb	r2, [r7, #3]
 800494c:	4611      	mov	r1, r2
 800494e:	4618      	mov	r0, r3
 8004950:	f003 f8c3 	bl	8007ada <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800495c:	2300      	movs	r3, #0
}
 800495e:	4618      	mov	r0, r3
 8004960:	3708      	adds	r7, #8
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}

08004966 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004966:	b580      	push	{r7, lr}
 8004968:	b084      	sub	sp, #16
 800496a:	af00      	add	r7, sp, #0
 800496c:	6078      	str	r0, [r7, #4]
 800496e:	4608      	mov	r0, r1
 8004970:	4611      	mov	r1, r2
 8004972:	461a      	mov	r2, r3
 8004974:	4603      	mov	r3, r0
 8004976:	70fb      	strb	r3, [r7, #3]
 8004978:	460b      	mov	r3, r1
 800497a:	803b      	strh	r3, [r7, #0]
 800497c:	4613      	mov	r3, r2
 800497e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004980:	2300      	movs	r3, #0
 8004982:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004984:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004988:	2b00      	cmp	r3, #0
 800498a:	da0f      	bge.n	80049ac <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800498c:	78fb      	ldrb	r3, [r7, #3]
 800498e:	f003 020f 	and.w	r2, r3, #15
 8004992:	4613      	mov	r3, r2
 8004994:	00db      	lsls	r3, r3, #3
 8004996:	4413      	add	r3, r2
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	3338      	adds	r3, #56	; 0x38
 800499c:	687a      	ldr	r2, [r7, #4]
 800499e:	4413      	add	r3, r2
 80049a0:	3304      	adds	r3, #4
 80049a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2201      	movs	r2, #1
 80049a8:	705a      	strb	r2, [r3, #1]
 80049aa:	e00f      	b.n	80049cc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80049ac:	78fb      	ldrb	r3, [r7, #3]
 80049ae:	f003 020f 	and.w	r2, r3, #15
 80049b2:	4613      	mov	r3, r2
 80049b4:	00db      	lsls	r3, r3, #3
 80049b6:	4413      	add	r3, r2
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	4413      	add	r3, r2
 80049c2:	3304      	adds	r3, #4
 80049c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2200      	movs	r2, #0
 80049ca:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80049cc:	78fb      	ldrb	r3, [r7, #3]
 80049ce:	f003 030f 	and.w	r3, r3, #15
 80049d2:	b2da      	uxtb	r2, r3
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80049d8:	883a      	ldrh	r2, [r7, #0]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	78ba      	ldrb	r2, [r7, #2]
 80049e2:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	785b      	ldrb	r3, [r3, #1]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d004      	beq.n	80049f6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	b29a      	uxth	r2, r3
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80049f6:	78bb      	ldrb	r3, [r7, #2]
 80049f8:	2b02      	cmp	r3, #2
 80049fa:	d102      	bne.n	8004a02 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2200      	movs	r2, #0
 8004a00:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d101      	bne.n	8004a10 <HAL_PCD_EP_Open+0xaa>
 8004a0c:	2302      	movs	r3, #2
 8004a0e:	e00e      	b.n	8004a2e <HAL_PCD_EP_Open+0xc8>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2201      	movs	r2, #1
 8004a14:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	68f9      	ldr	r1, [r7, #12]
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f002 fabc 	bl	8006f9c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8004a2c:	7afb      	ldrb	r3, [r7, #11]
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3710      	adds	r7, #16
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}

08004a36 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a36:	b580      	push	{r7, lr}
 8004a38:	b084      	sub	sp, #16
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	6078      	str	r0, [r7, #4]
 8004a3e:	460b      	mov	r3, r1
 8004a40:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004a42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	da0f      	bge.n	8004a6a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a4a:	78fb      	ldrb	r3, [r7, #3]
 8004a4c:	f003 020f 	and.w	r2, r3, #15
 8004a50:	4613      	mov	r3, r2
 8004a52:	00db      	lsls	r3, r3, #3
 8004a54:	4413      	add	r3, r2
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	3338      	adds	r3, #56	; 0x38
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	4413      	add	r3, r2
 8004a5e:	3304      	adds	r3, #4
 8004a60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2201      	movs	r2, #1
 8004a66:	705a      	strb	r2, [r3, #1]
 8004a68:	e00f      	b.n	8004a8a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a6a:	78fb      	ldrb	r3, [r7, #3]
 8004a6c:	f003 020f 	and.w	r2, r3, #15
 8004a70:	4613      	mov	r3, r2
 8004a72:	00db      	lsls	r3, r3, #3
 8004a74:	4413      	add	r3, r2
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	4413      	add	r3, r2
 8004a80:	3304      	adds	r3, #4
 8004a82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2200      	movs	r2, #0
 8004a88:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a8a:	78fb      	ldrb	r3, [r7, #3]
 8004a8c:	f003 030f 	and.w	r3, r3, #15
 8004a90:	b2da      	uxtb	r2, r3
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d101      	bne.n	8004aa4 <HAL_PCD_EP_Close+0x6e>
 8004aa0:	2302      	movs	r3, #2
 8004aa2:	e00e      	b.n	8004ac2 <HAL_PCD_EP_Close+0x8c>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	68f9      	ldr	r1, [r7, #12]
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f002 faf8 	bl	80070a8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004ac0:	2300      	movs	r3, #0
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3710      	adds	r7, #16
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}

08004aca <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004aca:	b580      	push	{r7, lr}
 8004acc:	b086      	sub	sp, #24
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	60f8      	str	r0, [r7, #12]
 8004ad2:	607a      	str	r2, [r7, #4]
 8004ad4:	603b      	str	r3, [r7, #0]
 8004ad6:	460b      	mov	r3, r1
 8004ad8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ada:	7afb      	ldrb	r3, [r7, #11]
 8004adc:	f003 020f 	and.w	r2, r3, #15
 8004ae0:	4613      	mov	r3, r2
 8004ae2:	00db      	lsls	r3, r3, #3
 8004ae4:	4413      	add	r3, r2
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004aec:	68fa      	ldr	r2, [r7, #12]
 8004aee:	4413      	add	r3, r2
 8004af0:	3304      	adds	r3, #4
 8004af2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	683a      	ldr	r2, [r7, #0]
 8004afe:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	2200      	movs	r2, #0
 8004b04:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b0c:	7afb      	ldrb	r3, [r7, #11]
 8004b0e:	f003 030f 	and.w	r3, r3, #15
 8004b12:	b2da      	uxtb	r2, r3
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	6979      	ldr	r1, [r7, #20]
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f002 fb9e 	bl	8007260 <USB_EPStartXfer>

  return HAL_OK;
 8004b24:	2300      	movs	r3, #0
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3718      	adds	r7, #24
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}

08004b2e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004b2e:	b480      	push	{r7}
 8004b30:	b083      	sub	sp, #12
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	6078      	str	r0, [r7, #4]
 8004b36:	460b      	mov	r3, r1
 8004b38:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004b3a:	78fb      	ldrb	r3, [r7, #3]
 8004b3c:	f003 020f 	and.w	r2, r3, #15
 8004b40:	6879      	ldr	r1, [r7, #4]
 8004b42:	4613      	mov	r3, r2
 8004b44:	00db      	lsls	r3, r3, #3
 8004b46:	4413      	add	r3, r2
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	440b      	add	r3, r1
 8004b4c:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8004b50:	681b      	ldr	r3, [r3, #0]
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	370c      	adds	r7, #12
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bc80      	pop	{r7}
 8004b5a:	4770      	bx	lr

08004b5c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b086      	sub	sp, #24
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	60f8      	str	r0, [r7, #12]
 8004b64:	607a      	str	r2, [r7, #4]
 8004b66:	603b      	str	r3, [r7, #0]
 8004b68:	460b      	mov	r3, r1
 8004b6a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b6c:	7afb      	ldrb	r3, [r7, #11]
 8004b6e:	f003 020f 	and.w	r2, r3, #15
 8004b72:	4613      	mov	r3, r2
 8004b74:	00db      	lsls	r3, r3, #3
 8004b76:	4413      	add	r3, r2
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	3338      	adds	r3, #56	; 0x38
 8004b7c:	68fa      	ldr	r2, [r7, #12]
 8004b7e:	4413      	add	r3, r2
 8004b80:	3304      	adds	r3, #4
 8004b82:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	683a      	ldr	r2, [r7, #0]
 8004b8e:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	2200      	movs	r2, #0
 8004b94:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	2201      	movs	r2, #1
 8004b9a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b9c:	7afb      	ldrb	r3, [r7, #11]
 8004b9e:	f003 030f 	and.w	r3, r3, #15
 8004ba2:	b2da      	uxtb	r2, r3
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	6979      	ldr	r1, [r7, #20]
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f002 fb56 	bl	8007260 <USB_EPStartXfer>

  return HAL_OK;
 8004bb4:	2300      	movs	r3, #0
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3718      	adds	r7, #24
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}

08004bbe <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004bbe:	b580      	push	{r7, lr}
 8004bc0:	b084      	sub	sp, #16
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	6078      	str	r0, [r7, #4]
 8004bc6:	460b      	mov	r3, r1
 8004bc8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004bca:	78fb      	ldrb	r3, [r7, #3]
 8004bcc:	f003 020f 	and.w	r2, r3, #15
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d901      	bls.n	8004bdc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e04e      	b.n	8004c7a <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004bdc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	da0f      	bge.n	8004c04 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004be4:	78fb      	ldrb	r3, [r7, #3]
 8004be6:	f003 020f 	and.w	r2, r3, #15
 8004bea:	4613      	mov	r3, r2
 8004bec:	00db      	lsls	r3, r3, #3
 8004bee:	4413      	add	r3, r2
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	3338      	adds	r3, #56	; 0x38
 8004bf4:	687a      	ldr	r2, [r7, #4]
 8004bf6:	4413      	add	r3, r2
 8004bf8:	3304      	adds	r3, #4
 8004bfa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	705a      	strb	r2, [r3, #1]
 8004c02:	e00d      	b.n	8004c20 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004c04:	78fa      	ldrb	r2, [r7, #3]
 8004c06:	4613      	mov	r3, r2
 8004c08:	00db      	lsls	r3, r3, #3
 8004c0a:	4413      	add	r3, r2
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	4413      	add	r3, r2
 8004c16:	3304      	adds	r3, #4
 8004c18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2201      	movs	r2, #1
 8004c24:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c26:	78fb      	ldrb	r3, [r7, #3]
 8004c28:	f003 030f 	and.w	r3, r3, #15
 8004c2c:	b2da      	uxtb	r2, r3
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d101      	bne.n	8004c40 <HAL_PCD_EP_SetStall+0x82>
 8004c3c:	2302      	movs	r3, #2
 8004c3e:	e01c      	b.n	8004c7a <HAL_PCD_EP_SetStall+0xbc>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	68f9      	ldr	r1, [r7, #12]
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f002 fe71 	bl	8007936 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004c54:	78fb      	ldrb	r3, [r7, #3]
 8004c56:	f003 030f 	and.w	r3, r3, #15
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d108      	bne.n	8004c70 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004c68:	4619      	mov	r1, r3
 8004c6a:	4610      	mov	r0, r2
 8004c6c:	f003 f858 	bl	8007d20 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004c78:	2300      	movs	r3, #0
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3710      	adds	r7, #16
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}

08004c82 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004c82:	b580      	push	{r7, lr}
 8004c84:	b084      	sub	sp, #16
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	6078      	str	r0, [r7, #4]
 8004c8a:	460b      	mov	r3, r1
 8004c8c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004c8e:	78fb      	ldrb	r3, [r7, #3]
 8004c90:	f003 020f 	and.w	r2, r3, #15
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d901      	bls.n	8004ca0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e042      	b.n	8004d26 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004ca0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	da0f      	bge.n	8004cc8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ca8:	78fb      	ldrb	r3, [r7, #3]
 8004caa:	f003 020f 	and.w	r2, r3, #15
 8004cae:	4613      	mov	r3, r2
 8004cb0:	00db      	lsls	r3, r3, #3
 8004cb2:	4413      	add	r3, r2
 8004cb4:	009b      	lsls	r3, r3, #2
 8004cb6:	3338      	adds	r3, #56	; 0x38
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	4413      	add	r3, r2
 8004cbc:	3304      	adds	r3, #4
 8004cbe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	705a      	strb	r2, [r3, #1]
 8004cc6:	e00f      	b.n	8004ce8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004cc8:	78fb      	ldrb	r3, [r7, #3]
 8004cca:	f003 020f 	and.w	r2, r3, #15
 8004cce:	4613      	mov	r3, r2
 8004cd0:	00db      	lsls	r3, r3, #3
 8004cd2:	4413      	add	r3, r2
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	4413      	add	r3, r2
 8004cde:	3304      	adds	r3, #4
 8004ce0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2200      	movs	r2, #0
 8004cec:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004cee:	78fb      	ldrb	r3, [r7, #3]
 8004cf0:	f003 030f 	and.w	r3, r3, #15
 8004cf4:	b2da      	uxtb	r2, r3
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d101      	bne.n	8004d08 <HAL_PCD_EP_ClrStall+0x86>
 8004d04:	2302      	movs	r3, #2
 8004d06:	e00e      	b.n	8004d26 <HAL_PCD_EP_ClrStall+0xa4>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	68f9      	ldr	r1, [r7, #12]
 8004d16:	4618      	mov	r0, r3
 8004d18:	f002 fe7a 	bl	8007a10 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004d24:	2300      	movs	r3, #0
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3710      	adds	r7, #16
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}

08004d2e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d2e:	b580      	push	{r7, lr}
 8004d30:	b084      	sub	sp, #16
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	6078      	str	r0, [r7, #4]
 8004d36:	460b      	mov	r3, r1
 8004d38:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004d3a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	da0c      	bge.n	8004d5c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d42:	78fb      	ldrb	r3, [r7, #3]
 8004d44:	f003 020f 	and.w	r2, r3, #15
 8004d48:	4613      	mov	r3, r2
 8004d4a:	00db      	lsls	r3, r3, #3
 8004d4c:	4413      	add	r3, r2
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	3338      	adds	r3, #56	; 0x38
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	4413      	add	r3, r2
 8004d56:	3304      	adds	r3, #4
 8004d58:	60fb      	str	r3, [r7, #12]
 8004d5a:	e00c      	b.n	8004d76 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004d5c:	78fb      	ldrb	r3, [r7, #3]
 8004d5e:	f003 020f 	and.w	r2, r3, #15
 8004d62:	4613      	mov	r3, r2
 8004d64:	00db      	lsls	r3, r3, #3
 8004d66:	4413      	add	r3, r2
 8004d68:	009b      	lsls	r3, r3, #2
 8004d6a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	4413      	add	r3, r2
 8004d72:	3304      	adds	r3, #4
 8004d74:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	68f9      	ldr	r1, [r7, #12]
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f002 fca1 	bl	80076c4 <USB_EPStopXfer>
 8004d82:	4603      	mov	r3, r0
 8004d84:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004d86:	7afb      	ldrb	r3, [r7, #11]
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3710      	adds	r7, #16
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}

08004d90 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b088      	sub	sp, #32
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
 8004d98:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004da4:	683a      	ldr	r2, [r7, #0]
 8004da6:	4613      	mov	r3, r2
 8004da8:	00db      	lsls	r3, r3, #3
 8004daa:	4413      	add	r3, r2
 8004dac:	009b      	lsls	r3, r3, #2
 8004dae:	3338      	adds	r3, #56	; 0x38
 8004db0:	687a      	ldr	r2, [r7, #4]
 8004db2:	4413      	add	r3, r2
 8004db4:	3304      	adds	r3, #4
 8004db6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	695a      	ldr	r2, [r3, #20]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	691b      	ldr	r3, [r3, #16]
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d901      	bls.n	8004dc8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e067      	b.n	8004e98 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	691a      	ldr	r2, [r3, #16]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	695b      	ldr	r3, [r3, #20]
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	69fa      	ldr	r2, [r7, #28]
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d902      	bls.n	8004de4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004de4:	69fb      	ldr	r3, [r7, #28]
 8004de6:	3303      	adds	r3, #3
 8004de8:	089b      	lsrs	r3, r3, #2
 8004dea:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004dec:	e026      	b.n	8004e3c <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	691a      	ldr	r2, [r3, #16]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	695b      	ldr	r3, [r3, #20]
 8004df6:	1ad3      	subs	r3, r2, r3
 8004df8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	69fa      	ldr	r2, [r7, #28]
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d902      	bls.n	8004e0a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004e0a:	69fb      	ldr	r3, [r7, #28]
 8004e0c:	3303      	adds	r3, #3
 8004e0e:	089b      	lsrs	r3, r3, #2
 8004e10:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	68d9      	ldr	r1, [r3, #12]
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	b2da      	uxtb	r2, r3
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	6978      	ldr	r0, [r7, #20]
 8004e20:	f002 fcf9 	bl	8007816 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	68da      	ldr	r2, [r3, #12]
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	441a      	add	r2, r3
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	695a      	ldr	r2, [r3, #20]
 8004e34:	69fb      	ldr	r3, [r7, #28]
 8004e36:	441a      	add	r2, r3
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	015a      	lsls	r2, r3, #5
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	4413      	add	r3, r2
 8004e44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e48:	699b      	ldr	r3, [r3, #24]
 8004e4a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004e4c:	69ba      	ldr	r2, [r7, #24]
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d809      	bhi.n	8004e66 <PCD_WriteEmptyTxFifo+0xd6>
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	695a      	ldr	r2, [r3, #20]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d203      	bcs.n	8004e66 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	691b      	ldr	r3, [r3, #16]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d1c3      	bne.n	8004dee <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	691a      	ldr	r2, [r3, #16]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	695b      	ldr	r3, [r3, #20]
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d811      	bhi.n	8004e96 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	f003 030f 	and.w	r3, r3, #15
 8004e78:	2201      	movs	r2, #1
 8004e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e7e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	43db      	mvns	r3, r3
 8004e8c:	6939      	ldr	r1, [r7, #16]
 8004e8e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e92:	4013      	ands	r3, r2
 8004e94:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004e96:	2300      	movs	r3, #0
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3720      	adds	r7, #32
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}

08004ea0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b086      	sub	sp, #24
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	333c      	adds	r3, #60	; 0x3c
 8004eb8:	3304      	adds	r3, #4
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	015a      	lsls	r2, r3, #5
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	4413      	add	r3, r2
 8004ec6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	4a19      	ldr	r2, [pc, #100]	; (8004f38 <PCD_EP_OutXfrComplete_int+0x98>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d124      	bne.n	8004f20 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d00a      	beq.n	8004ef6 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	015a      	lsls	r2, r3, #5
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	4413      	add	r3, r2
 8004ee8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eec:	461a      	mov	r2, r3
 8004eee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ef2:	6093      	str	r3, [r2, #8]
 8004ef4:	e01a      	b.n	8004f2c <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	f003 0320 	and.w	r3, r3, #32
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d008      	beq.n	8004f12 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	015a      	lsls	r2, r3, #5
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	4413      	add	r3, r2
 8004f08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	2320      	movs	r3, #32
 8004f10:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	4619      	mov	r1, r3
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f004 fd7b 	bl	8009a14 <HAL_PCD_DataOutStageCallback>
 8004f1e:	e005      	b.n	8004f2c <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	b2db      	uxtb	r3, r3
 8004f24:	4619      	mov	r1, r3
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f004 fd74 	bl	8009a14 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8004f2c:	2300      	movs	r3, #0
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3718      	adds	r7, #24
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop
 8004f38:	4f54310a 	.word	0x4f54310a

08004f3c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b086      	sub	sp, #24
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	333c      	adds	r3, #60	; 0x3c
 8004f54:	3304      	adds	r3, #4
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	015a      	lsls	r2, r3, #5
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	4413      	add	r3, r2
 8004f62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	4a0c      	ldr	r2, [pc, #48]	; (8004fa0 <PCD_EP_OutSetupPacket_int+0x64>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d90e      	bls.n	8004f90 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d009      	beq.n	8004f90 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	015a      	lsls	r2, r3, #5
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	4413      	add	r3, r2
 8004f84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f88:	461a      	mov	r2, r3
 8004f8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f8e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f004 fd2d 	bl	80099f0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8004f96:	2300      	movs	r3, #0
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3718      	adds	r7, #24
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	4f54300a 	.word	0x4f54300a

08004fa4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b085      	sub	sp, #20
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	460b      	mov	r3, r1
 8004fae:	70fb      	strb	r3, [r7, #3]
 8004fb0:	4613      	mov	r3, r2
 8004fb2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fba:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004fbc:	78fb      	ldrb	r3, [r7, #3]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d107      	bne.n	8004fd2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004fc2:	883b      	ldrh	r3, [r7, #0]
 8004fc4:	0419      	lsls	r1, r3, #16
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	68ba      	ldr	r2, [r7, #8]
 8004fcc:	430a      	orrs	r2, r1
 8004fce:	629a      	str	r2, [r3, #40]	; 0x28
 8004fd0:	e028      	b.n	8005024 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fd8:	0c1b      	lsrs	r3, r3, #16
 8004fda:	68ba      	ldr	r2, [r7, #8]
 8004fdc:	4413      	add	r3, r2
 8004fde:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	73fb      	strb	r3, [r7, #15]
 8004fe4:	e00d      	b.n	8005002 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	7bfb      	ldrb	r3, [r7, #15]
 8004fec:	3340      	adds	r3, #64	; 0x40
 8004fee:	009b      	lsls	r3, r3, #2
 8004ff0:	4413      	add	r3, r2
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	0c1b      	lsrs	r3, r3, #16
 8004ff6:	68ba      	ldr	r2, [r7, #8]
 8004ff8:	4413      	add	r3, r2
 8004ffa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004ffc:	7bfb      	ldrb	r3, [r7, #15]
 8004ffe:	3301      	adds	r3, #1
 8005000:	73fb      	strb	r3, [r7, #15]
 8005002:	7bfa      	ldrb	r2, [r7, #15]
 8005004:	78fb      	ldrb	r3, [r7, #3]
 8005006:	3b01      	subs	r3, #1
 8005008:	429a      	cmp	r2, r3
 800500a:	d3ec      	bcc.n	8004fe6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800500c:	883b      	ldrh	r3, [r7, #0]
 800500e:	0418      	lsls	r0, r3, #16
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6819      	ldr	r1, [r3, #0]
 8005014:	78fb      	ldrb	r3, [r7, #3]
 8005016:	3b01      	subs	r3, #1
 8005018:	68ba      	ldr	r2, [r7, #8]
 800501a:	4302      	orrs	r2, r0
 800501c:	3340      	adds	r3, #64	; 0x40
 800501e:	009b      	lsls	r3, r3, #2
 8005020:	440b      	add	r3, r1
 8005022:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005024:	2300      	movs	r3, #0
}
 8005026:	4618      	mov	r0, r3
 8005028:	3714      	adds	r7, #20
 800502a:	46bd      	mov	sp, r7
 800502c:	bc80      	pop	{r7}
 800502e:	4770      	bx	lr

08005030 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005030:	b480      	push	{r7}
 8005032:	b083      	sub	sp, #12
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	460b      	mov	r3, r1
 800503a:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	887a      	ldrh	r2, [r7, #2]
 8005042:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005044:	2300      	movs	r3, #0
}
 8005046:	4618      	mov	r0, r3
 8005048:	370c      	adds	r7, #12
 800504a:	46bd      	mov	sp, r7
 800504c:	bc80      	pop	{r7}
 800504e:	4770      	bx	lr

08005050 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b086      	sub	sp, #24
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d101      	bne.n	8005062 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e304      	b.n	800566c <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 0301 	and.w	r3, r3, #1
 800506a:	2b00      	cmp	r3, #0
 800506c:	f000 8087 	beq.w	800517e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005070:	4b92      	ldr	r3, [pc, #584]	; (80052bc <HAL_RCC_OscConfig+0x26c>)
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	f003 030c 	and.w	r3, r3, #12
 8005078:	2b04      	cmp	r3, #4
 800507a:	d00c      	beq.n	8005096 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800507c:	4b8f      	ldr	r3, [pc, #572]	; (80052bc <HAL_RCC_OscConfig+0x26c>)
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	f003 030c 	and.w	r3, r3, #12
 8005084:	2b08      	cmp	r3, #8
 8005086:	d112      	bne.n	80050ae <HAL_RCC_OscConfig+0x5e>
 8005088:	4b8c      	ldr	r3, [pc, #560]	; (80052bc <HAL_RCC_OscConfig+0x26c>)
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005094:	d10b      	bne.n	80050ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005096:	4b89      	ldr	r3, [pc, #548]	; (80052bc <HAL_RCC_OscConfig+0x26c>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d06c      	beq.n	800517c <HAL_RCC_OscConfig+0x12c>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d168      	bne.n	800517c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e2de      	b.n	800566c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050b6:	d106      	bne.n	80050c6 <HAL_RCC_OscConfig+0x76>
 80050b8:	4b80      	ldr	r3, [pc, #512]	; (80052bc <HAL_RCC_OscConfig+0x26c>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a7f      	ldr	r2, [pc, #508]	; (80052bc <HAL_RCC_OscConfig+0x26c>)
 80050be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050c2:	6013      	str	r3, [r2, #0]
 80050c4:	e02e      	b.n	8005124 <HAL_RCC_OscConfig+0xd4>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d10c      	bne.n	80050e8 <HAL_RCC_OscConfig+0x98>
 80050ce:	4b7b      	ldr	r3, [pc, #492]	; (80052bc <HAL_RCC_OscConfig+0x26c>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a7a      	ldr	r2, [pc, #488]	; (80052bc <HAL_RCC_OscConfig+0x26c>)
 80050d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050d8:	6013      	str	r3, [r2, #0]
 80050da:	4b78      	ldr	r3, [pc, #480]	; (80052bc <HAL_RCC_OscConfig+0x26c>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a77      	ldr	r2, [pc, #476]	; (80052bc <HAL_RCC_OscConfig+0x26c>)
 80050e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050e4:	6013      	str	r3, [r2, #0]
 80050e6:	e01d      	b.n	8005124 <HAL_RCC_OscConfig+0xd4>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80050f0:	d10c      	bne.n	800510c <HAL_RCC_OscConfig+0xbc>
 80050f2:	4b72      	ldr	r3, [pc, #456]	; (80052bc <HAL_RCC_OscConfig+0x26c>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a71      	ldr	r2, [pc, #452]	; (80052bc <HAL_RCC_OscConfig+0x26c>)
 80050f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80050fc:	6013      	str	r3, [r2, #0]
 80050fe:	4b6f      	ldr	r3, [pc, #444]	; (80052bc <HAL_RCC_OscConfig+0x26c>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a6e      	ldr	r2, [pc, #440]	; (80052bc <HAL_RCC_OscConfig+0x26c>)
 8005104:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005108:	6013      	str	r3, [r2, #0]
 800510a:	e00b      	b.n	8005124 <HAL_RCC_OscConfig+0xd4>
 800510c:	4b6b      	ldr	r3, [pc, #428]	; (80052bc <HAL_RCC_OscConfig+0x26c>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a6a      	ldr	r2, [pc, #424]	; (80052bc <HAL_RCC_OscConfig+0x26c>)
 8005112:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005116:	6013      	str	r3, [r2, #0]
 8005118:	4b68      	ldr	r3, [pc, #416]	; (80052bc <HAL_RCC_OscConfig+0x26c>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a67      	ldr	r2, [pc, #412]	; (80052bc <HAL_RCC_OscConfig+0x26c>)
 800511e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005122:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d013      	beq.n	8005154 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800512c:	f7fd ff2a 	bl	8002f84 <HAL_GetTick>
 8005130:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005132:	e008      	b.n	8005146 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005134:	f7fd ff26 	bl	8002f84 <HAL_GetTick>
 8005138:	4602      	mov	r2, r0
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	1ad3      	subs	r3, r2, r3
 800513e:	2b64      	cmp	r3, #100	; 0x64
 8005140:	d901      	bls.n	8005146 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005142:	2303      	movs	r3, #3
 8005144:	e292      	b.n	800566c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005146:	4b5d      	ldr	r3, [pc, #372]	; (80052bc <HAL_RCC_OscConfig+0x26c>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800514e:	2b00      	cmp	r3, #0
 8005150:	d0f0      	beq.n	8005134 <HAL_RCC_OscConfig+0xe4>
 8005152:	e014      	b.n	800517e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005154:	f7fd ff16 	bl	8002f84 <HAL_GetTick>
 8005158:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800515a:	e008      	b.n	800516e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800515c:	f7fd ff12 	bl	8002f84 <HAL_GetTick>
 8005160:	4602      	mov	r2, r0
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	1ad3      	subs	r3, r2, r3
 8005166:	2b64      	cmp	r3, #100	; 0x64
 8005168:	d901      	bls.n	800516e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800516a:	2303      	movs	r3, #3
 800516c:	e27e      	b.n	800566c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800516e:	4b53      	ldr	r3, [pc, #332]	; (80052bc <HAL_RCC_OscConfig+0x26c>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005176:	2b00      	cmp	r3, #0
 8005178:	d1f0      	bne.n	800515c <HAL_RCC_OscConfig+0x10c>
 800517a:	e000      	b.n	800517e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800517c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f003 0302 	and.w	r3, r3, #2
 8005186:	2b00      	cmp	r3, #0
 8005188:	d063      	beq.n	8005252 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800518a:	4b4c      	ldr	r3, [pc, #304]	; (80052bc <HAL_RCC_OscConfig+0x26c>)
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	f003 030c 	and.w	r3, r3, #12
 8005192:	2b00      	cmp	r3, #0
 8005194:	d00b      	beq.n	80051ae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005196:	4b49      	ldr	r3, [pc, #292]	; (80052bc <HAL_RCC_OscConfig+0x26c>)
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	f003 030c 	and.w	r3, r3, #12
 800519e:	2b08      	cmp	r3, #8
 80051a0:	d11c      	bne.n	80051dc <HAL_RCC_OscConfig+0x18c>
 80051a2:	4b46      	ldr	r3, [pc, #280]	; (80052bc <HAL_RCC_OscConfig+0x26c>)
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d116      	bne.n	80051dc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051ae:	4b43      	ldr	r3, [pc, #268]	; (80052bc <HAL_RCC_OscConfig+0x26c>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f003 0302 	and.w	r3, r3, #2
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d005      	beq.n	80051c6 <HAL_RCC_OscConfig+0x176>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	695b      	ldr	r3, [r3, #20]
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d001      	beq.n	80051c6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e252      	b.n	800566c <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051c6:	4b3d      	ldr	r3, [pc, #244]	; (80052bc <HAL_RCC_OscConfig+0x26c>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	699b      	ldr	r3, [r3, #24]
 80051d2:	00db      	lsls	r3, r3, #3
 80051d4:	4939      	ldr	r1, [pc, #228]	; (80052bc <HAL_RCC_OscConfig+0x26c>)
 80051d6:	4313      	orrs	r3, r2
 80051d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051da:	e03a      	b.n	8005252 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	695b      	ldr	r3, [r3, #20]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d020      	beq.n	8005226 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051e4:	4b36      	ldr	r3, [pc, #216]	; (80052c0 <HAL_RCC_OscConfig+0x270>)
 80051e6:	2201      	movs	r2, #1
 80051e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051ea:	f7fd fecb 	bl	8002f84 <HAL_GetTick>
 80051ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051f0:	e008      	b.n	8005204 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051f2:	f7fd fec7 	bl	8002f84 <HAL_GetTick>
 80051f6:	4602      	mov	r2, r0
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	1ad3      	subs	r3, r2, r3
 80051fc:	2b02      	cmp	r3, #2
 80051fe:	d901      	bls.n	8005204 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005200:	2303      	movs	r3, #3
 8005202:	e233      	b.n	800566c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005204:	4b2d      	ldr	r3, [pc, #180]	; (80052bc <HAL_RCC_OscConfig+0x26c>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 0302 	and.w	r3, r3, #2
 800520c:	2b00      	cmp	r3, #0
 800520e:	d0f0      	beq.n	80051f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005210:	4b2a      	ldr	r3, [pc, #168]	; (80052bc <HAL_RCC_OscConfig+0x26c>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	699b      	ldr	r3, [r3, #24]
 800521c:	00db      	lsls	r3, r3, #3
 800521e:	4927      	ldr	r1, [pc, #156]	; (80052bc <HAL_RCC_OscConfig+0x26c>)
 8005220:	4313      	orrs	r3, r2
 8005222:	600b      	str	r3, [r1, #0]
 8005224:	e015      	b.n	8005252 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005226:	4b26      	ldr	r3, [pc, #152]	; (80052c0 <HAL_RCC_OscConfig+0x270>)
 8005228:	2200      	movs	r2, #0
 800522a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800522c:	f7fd feaa 	bl	8002f84 <HAL_GetTick>
 8005230:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005232:	e008      	b.n	8005246 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005234:	f7fd fea6 	bl	8002f84 <HAL_GetTick>
 8005238:	4602      	mov	r2, r0
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	1ad3      	subs	r3, r2, r3
 800523e:	2b02      	cmp	r3, #2
 8005240:	d901      	bls.n	8005246 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005242:	2303      	movs	r3, #3
 8005244:	e212      	b.n	800566c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005246:	4b1d      	ldr	r3, [pc, #116]	; (80052bc <HAL_RCC_OscConfig+0x26c>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f003 0302 	and.w	r3, r3, #2
 800524e:	2b00      	cmp	r3, #0
 8005250:	d1f0      	bne.n	8005234 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 0308 	and.w	r3, r3, #8
 800525a:	2b00      	cmp	r3, #0
 800525c:	d03a      	beq.n	80052d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	69db      	ldr	r3, [r3, #28]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d019      	beq.n	800529a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005266:	4b17      	ldr	r3, [pc, #92]	; (80052c4 <HAL_RCC_OscConfig+0x274>)
 8005268:	2201      	movs	r2, #1
 800526a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800526c:	f7fd fe8a 	bl	8002f84 <HAL_GetTick>
 8005270:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005272:	e008      	b.n	8005286 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005274:	f7fd fe86 	bl	8002f84 <HAL_GetTick>
 8005278:	4602      	mov	r2, r0
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	1ad3      	subs	r3, r2, r3
 800527e:	2b02      	cmp	r3, #2
 8005280:	d901      	bls.n	8005286 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005282:	2303      	movs	r3, #3
 8005284:	e1f2      	b.n	800566c <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005286:	4b0d      	ldr	r3, [pc, #52]	; (80052bc <HAL_RCC_OscConfig+0x26c>)
 8005288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528a:	f003 0302 	and.w	r3, r3, #2
 800528e:	2b00      	cmp	r3, #0
 8005290:	d0f0      	beq.n	8005274 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005292:	2001      	movs	r0, #1
 8005294:	f000 fba2 	bl	80059dc <RCC_Delay>
 8005298:	e01c      	b.n	80052d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800529a:	4b0a      	ldr	r3, [pc, #40]	; (80052c4 <HAL_RCC_OscConfig+0x274>)
 800529c:	2200      	movs	r2, #0
 800529e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052a0:	f7fd fe70 	bl	8002f84 <HAL_GetTick>
 80052a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052a6:	e00f      	b.n	80052c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052a8:	f7fd fe6c 	bl	8002f84 <HAL_GetTick>
 80052ac:	4602      	mov	r2, r0
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	1ad3      	subs	r3, r2, r3
 80052b2:	2b02      	cmp	r3, #2
 80052b4:	d908      	bls.n	80052c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80052b6:	2303      	movs	r3, #3
 80052b8:	e1d8      	b.n	800566c <HAL_RCC_OscConfig+0x61c>
 80052ba:	bf00      	nop
 80052bc:	40021000 	.word	0x40021000
 80052c0:	42420000 	.word	0x42420000
 80052c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052c8:	4b9b      	ldr	r3, [pc, #620]	; (8005538 <HAL_RCC_OscConfig+0x4e8>)
 80052ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052cc:	f003 0302 	and.w	r3, r3, #2
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d1e9      	bne.n	80052a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f003 0304 	and.w	r3, r3, #4
 80052dc:	2b00      	cmp	r3, #0
 80052de:	f000 80a6 	beq.w	800542e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052e2:	2300      	movs	r3, #0
 80052e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052e6:	4b94      	ldr	r3, [pc, #592]	; (8005538 <HAL_RCC_OscConfig+0x4e8>)
 80052e8:	69db      	ldr	r3, [r3, #28]
 80052ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d10d      	bne.n	800530e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052f2:	4b91      	ldr	r3, [pc, #580]	; (8005538 <HAL_RCC_OscConfig+0x4e8>)
 80052f4:	69db      	ldr	r3, [r3, #28]
 80052f6:	4a90      	ldr	r2, [pc, #576]	; (8005538 <HAL_RCC_OscConfig+0x4e8>)
 80052f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052fc:	61d3      	str	r3, [r2, #28]
 80052fe:	4b8e      	ldr	r3, [pc, #568]	; (8005538 <HAL_RCC_OscConfig+0x4e8>)
 8005300:	69db      	ldr	r3, [r3, #28]
 8005302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005306:	60bb      	str	r3, [r7, #8]
 8005308:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800530a:	2301      	movs	r3, #1
 800530c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800530e:	4b8b      	ldr	r3, [pc, #556]	; (800553c <HAL_RCC_OscConfig+0x4ec>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005316:	2b00      	cmp	r3, #0
 8005318:	d118      	bne.n	800534c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800531a:	4b88      	ldr	r3, [pc, #544]	; (800553c <HAL_RCC_OscConfig+0x4ec>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a87      	ldr	r2, [pc, #540]	; (800553c <HAL_RCC_OscConfig+0x4ec>)
 8005320:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005324:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005326:	f7fd fe2d 	bl	8002f84 <HAL_GetTick>
 800532a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800532c:	e008      	b.n	8005340 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800532e:	f7fd fe29 	bl	8002f84 <HAL_GetTick>
 8005332:	4602      	mov	r2, r0
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	1ad3      	subs	r3, r2, r3
 8005338:	2b64      	cmp	r3, #100	; 0x64
 800533a:	d901      	bls.n	8005340 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800533c:	2303      	movs	r3, #3
 800533e:	e195      	b.n	800566c <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005340:	4b7e      	ldr	r3, [pc, #504]	; (800553c <HAL_RCC_OscConfig+0x4ec>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005348:	2b00      	cmp	r3, #0
 800534a:	d0f0      	beq.n	800532e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	691b      	ldr	r3, [r3, #16]
 8005350:	2b01      	cmp	r3, #1
 8005352:	d106      	bne.n	8005362 <HAL_RCC_OscConfig+0x312>
 8005354:	4b78      	ldr	r3, [pc, #480]	; (8005538 <HAL_RCC_OscConfig+0x4e8>)
 8005356:	6a1b      	ldr	r3, [r3, #32]
 8005358:	4a77      	ldr	r2, [pc, #476]	; (8005538 <HAL_RCC_OscConfig+0x4e8>)
 800535a:	f043 0301 	orr.w	r3, r3, #1
 800535e:	6213      	str	r3, [r2, #32]
 8005360:	e02d      	b.n	80053be <HAL_RCC_OscConfig+0x36e>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	691b      	ldr	r3, [r3, #16]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d10c      	bne.n	8005384 <HAL_RCC_OscConfig+0x334>
 800536a:	4b73      	ldr	r3, [pc, #460]	; (8005538 <HAL_RCC_OscConfig+0x4e8>)
 800536c:	6a1b      	ldr	r3, [r3, #32]
 800536e:	4a72      	ldr	r2, [pc, #456]	; (8005538 <HAL_RCC_OscConfig+0x4e8>)
 8005370:	f023 0301 	bic.w	r3, r3, #1
 8005374:	6213      	str	r3, [r2, #32]
 8005376:	4b70      	ldr	r3, [pc, #448]	; (8005538 <HAL_RCC_OscConfig+0x4e8>)
 8005378:	6a1b      	ldr	r3, [r3, #32]
 800537a:	4a6f      	ldr	r2, [pc, #444]	; (8005538 <HAL_RCC_OscConfig+0x4e8>)
 800537c:	f023 0304 	bic.w	r3, r3, #4
 8005380:	6213      	str	r3, [r2, #32]
 8005382:	e01c      	b.n	80053be <HAL_RCC_OscConfig+0x36e>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	691b      	ldr	r3, [r3, #16]
 8005388:	2b05      	cmp	r3, #5
 800538a:	d10c      	bne.n	80053a6 <HAL_RCC_OscConfig+0x356>
 800538c:	4b6a      	ldr	r3, [pc, #424]	; (8005538 <HAL_RCC_OscConfig+0x4e8>)
 800538e:	6a1b      	ldr	r3, [r3, #32]
 8005390:	4a69      	ldr	r2, [pc, #420]	; (8005538 <HAL_RCC_OscConfig+0x4e8>)
 8005392:	f043 0304 	orr.w	r3, r3, #4
 8005396:	6213      	str	r3, [r2, #32]
 8005398:	4b67      	ldr	r3, [pc, #412]	; (8005538 <HAL_RCC_OscConfig+0x4e8>)
 800539a:	6a1b      	ldr	r3, [r3, #32]
 800539c:	4a66      	ldr	r2, [pc, #408]	; (8005538 <HAL_RCC_OscConfig+0x4e8>)
 800539e:	f043 0301 	orr.w	r3, r3, #1
 80053a2:	6213      	str	r3, [r2, #32]
 80053a4:	e00b      	b.n	80053be <HAL_RCC_OscConfig+0x36e>
 80053a6:	4b64      	ldr	r3, [pc, #400]	; (8005538 <HAL_RCC_OscConfig+0x4e8>)
 80053a8:	6a1b      	ldr	r3, [r3, #32]
 80053aa:	4a63      	ldr	r2, [pc, #396]	; (8005538 <HAL_RCC_OscConfig+0x4e8>)
 80053ac:	f023 0301 	bic.w	r3, r3, #1
 80053b0:	6213      	str	r3, [r2, #32]
 80053b2:	4b61      	ldr	r3, [pc, #388]	; (8005538 <HAL_RCC_OscConfig+0x4e8>)
 80053b4:	6a1b      	ldr	r3, [r3, #32]
 80053b6:	4a60      	ldr	r2, [pc, #384]	; (8005538 <HAL_RCC_OscConfig+0x4e8>)
 80053b8:	f023 0304 	bic.w	r3, r3, #4
 80053bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	691b      	ldr	r3, [r3, #16]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d015      	beq.n	80053f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053c6:	f7fd fddd 	bl	8002f84 <HAL_GetTick>
 80053ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053cc:	e00a      	b.n	80053e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053ce:	f7fd fdd9 	bl	8002f84 <HAL_GetTick>
 80053d2:	4602      	mov	r2, r0
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	1ad3      	subs	r3, r2, r3
 80053d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80053dc:	4293      	cmp	r3, r2
 80053de:	d901      	bls.n	80053e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80053e0:	2303      	movs	r3, #3
 80053e2:	e143      	b.n	800566c <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053e4:	4b54      	ldr	r3, [pc, #336]	; (8005538 <HAL_RCC_OscConfig+0x4e8>)
 80053e6:	6a1b      	ldr	r3, [r3, #32]
 80053e8:	f003 0302 	and.w	r3, r3, #2
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d0ee      	beq.n	80053ce <HAL_RCC_OscConfig+0x37e>
 80053f0:	e014      	b.n	800541c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053f2:	f7fd fdc7 	bl	8002f84 <HAL_GetTick>
 80053f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053f8:	e00a      	b.n	8005410 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053fa:	f7fd fdc3 	bl	8002f84 <HAL_GetTick>
 80053fe:	4602      	mov	r2, r0
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	1ad3      	subs	r3, r2, r3
 8005404:	f241 3288 	movw	r2, #5000	; 0x1388
 8005408:	4293      	cmp	r3, r2
 800540a:	d901      	bls.n	8005410 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800540c:	2303      	movs	r3, #3
 800540e:	e12d      	b.n	800566c <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005410:	4b49      	ldr	r3, [pc, #292]	; (8005538 <HAL_RCC_OscConfig+0x4e8>)
 8005412:	6a1b      	ldr	r3, [r3, #32]
 8005414:	f003 0302 	and.w	r3, r3, #2
 8005418:	2b00      	cmp	r3, #0
 800541a:	d1ee      	bne.n	80053fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800541c:	7dfb      	ldrb	r3, [r7, #23]
 800541e:	2b01      	cmp	r3, #1
 8005420:	d105      	bne.n	800542e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005422:	4b45      	ldr	r3, [pc, #276]	; (8005538 <HAL_RCC_OscConfig+0x4e8>)
 8005424:	69db      	ldr	r3, [r3, #28]
 8005426:	4a44      	ldr	r2, [pc, #272]	; (8005538 <HAL_RCC_OscConfig+0x4e8>)
 8005428:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800542c:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005432:	2b00      	cmp	r3, #0
 8005434:	f000 808c 	beq.w	8005550 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8005438:	4b3f      	ldr	r3, [pc, #252]	; (8005538 <HAL_RCC_OscConfig+0x4e8>)
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005440:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005444:	d10e      	bne.n	8005464 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8005446:	4b3c      	ldr	r3, [pc, #240]	; (8005538 <HAL_RCC_OscConfig+0x4e8>)
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 800544e:	2b08      	cmp	r3, #8
 8005450:	d108      	bne.n	8005464 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8005452:	4b39      	ldr	r3, [pc, #228]	; (8005538 <HAL_RCC_OscConfig+0x4e8>)
 8005454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005456:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 800545a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800545e:	d101      	bne.n	8005464 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	e103      	b.n	800566c <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005468:	2b02      	cmp	r3, #2
 800546a:	d14e      	bne.n	800550a <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 800546c:	4b32      	ldr	r3, [pc, #200]	; (8005538 <HAL_RCC_OscConfig+0x4e8>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005474:	2b00      	cmp	r3, #0
 8005476:	d009      	beq.n	800548c <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8005478:	4b2f      	ldr	r3, [pc, #188]	; (8005538 <HAL_RCC_OscConfig+0x4e8>)
 800547a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800547c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8005484:	429a      	cmp	r2, r3
 8005486:	d001      	beq.n	800548c <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	e0ef      	b.n	800566c <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 800548c:	4b2c      	ldr	r3, [pc, #176]	; (8005540 <HAL_RCC_OscConfig+0x4f0>)
 800548e:	2200      	movs	r2, #0
 8005490:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005492:	f7fd fd77 	bl	8002f84 <HAL_GetTick>
 8005496:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8005498:	e008      	b.n	80054ac <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800549a:	f7fd fd73 	bl	8002f84 <HAL_GetTick>
 800549e:	4602      	mov	r2, r0
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	1ad3      	subs	r3, r2, r3
 80054a4:	2b64      	cmp	r3, #100	; 0x64
 80054a6:	d901      	bls.n	80054ac <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80054a8:	2303      	movs	r3, #3
 80054aa:	e0df      	b.n	800566c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 80054ac:	4b22      	ldr	r3, [pc, #136]	; (8005538 <HAL_RCC_OscConfig+0x4e8>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d1f0      	bne.n	800549a <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 80054b8:	4b1f      	ldr	r3, [pc, #124]	; (8005538 <HAL_RCC_OscConfig+0x4e8>)
 80054ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054c4:	491c      	ldr	r1, [pc, #112]	; (8005538 <HAL_RCC_OscConfig+0x4e8>)
 80054c6:	4313      	orrs	r3, r2
 80054c8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 80054ca:	4b1b      	ldr	r3, [pc, #108]	; (8005538 <HAL_RCC_OscConfig+0x4e8>)
 80054cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ce:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054d6:	4918      	ldr	r1, [pc, #96]	; (8005538 <HAL_RCC_OscConfig+0x4e8>)
 80054d8:	4313      	orrs	r3, r2
 80054da:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 80054dc:	4b18      	ldr	r3, [pc, #96]	; (8005540 <HAL_RCC_OscConfig+0x4f0>)
 80054de:	2201      	movs	r2, #1
 80054e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054e2:	f7fd fd4f 	bl	8002f84 <HAL_GetTick>
 80054e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 80054e8:	e008      	b.n	80054fc <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80054ea:	f7fd fd4b 	bl	8002f84 <HAL_GetTick>
 80054ee:	4602      	mov	r2, r0
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	1ad3      	subs	r3, r2, r3
 80054f4:	2b64      	cmp	r3, #100	; 0x64
 80054f6:	d901      	bls.n	80054fc <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 80054f8:	2303      	movs	r3, #3
 80054fa:	e0b7      	b.n	800566c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 80054fc:	4b0e      	ldr	r3, [pc, #56]	; (8005538 <HAL_RCC_OscConfig+0x4e8>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005504:	2b00      	cmp	r3, #0
 8005506:	d0f0      	beq.n	80054ea <HAL_RCC_OscConfig+0x49a>
 8005508:	e022      	b.n	8005550 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 800550a:	4b0b      	ldr	r3, [pc, #44]	; (8005538 <HAL_RCC_OscConfig+0x4e8>)
 800550c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800550e:	4a0a      	ldr	r2, [pc, #40]	; (8005538 <HAL_RCC_OscConfig+0x4e8>)
 8005510:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005514:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8005516:	4b0a      	ldr	r3, [pc, #40]	; (8005540 <HAL_RCC_OscConfig+0x4f0>)
 8005518:	2200      	movs	r2, #0
 800551a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800551c:	f7fd fd32 	bl	8002f84 <HAL_GetTick>
 8005520:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8005522:	e00f      	b.n	8005544 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005524:	f7fd fd2e 	bl	8002f84 <HAL_GetTick>
 8005528:	4602      	mov	r2, r0
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	1ad3      	subs	r3, r2, r3
 800552e:	2b64      	cmp	r3, #100	; 0x64
 8005530:	d908      	bls.n	8005544 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8005532:	2303      	movs	r3, #3
 8005534:	e09a      	b.n	800566c <HAL_RCC_OscConfig+0x61c>
 8005536:	bf00      	nop
 8005538:	40021000 	.word	0x40021000
 800553c:	40007000 	.word	0x40007000
 8005540:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8005544:	4b4b      	ldr	r3, [pc, #300]	; (8005674 <HAL_RCC_OscConfig+0x624>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800554c:	2b00      	cmp	r3, #0
 800554e:	d1e9      	bne.n	8005524 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6a1b      	ldr	r3, [r3, #32]
 8005554:	2b00      	cmp	r3, #0
 8005556:	f000 8088 	beq.w	800566a <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800555a:	4b46      	ldr	r3, [pc, #280]	; (8005674 <HAL_RCC_OscConfig+0x624>)
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	f003 030c 	and.w	r3, r3, #12
 8005562:	2b08      	cmp	r3, #8
 8005564:	d068      	beq.n	8005638 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6a1b      	ldr	r3, [r3, #32]
 800556a:	2b02      	cmp	r3, #2
 800556c:	d14d      	bne.n	800560a <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800556e:	4b42      	ldr	r3, [pc, #264]	; (8005678 <HAL_RCC_OscConfig+0x628>)
 8005570:	2200      	movs	r2, #0
 8005572:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005574:	f7fd fd06 	bl	8002f84 <HAL_GetTick>
 8005578:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800557a:	e008      	b.n	800558e <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800557c:	f7fd fd02 	bl	8002f84 <HAL_GetTick>
 8005580:	4602      	mov	r2, r0
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	1ad3      	subs	r3, r2, r3
 8005586:	2b02      	cmp	r3, #2
 8005588:	d901      	bls.n	800558e <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 800558a:	2303      	movs	r3, #3
 800558c:	e06e      	b.n	800566c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800558e:	4b39      	ldr	r3, [pc, #228]	; (8005674 <HAL_RCC_OscConfig+0x624>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005596:	2b00      	cmp	r3, #0
 8005598:	d1f0      	bne.n	800557c <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800559e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055a2:	d10f      	bne.n	80055c4 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 80055a4:	4b33      	ldr	r3, [pc, #204]	; (8005674 <HAL_RCC_OscConfig+0x624>)
 80055a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	4931      	ldr	r1, [pc, #196]	; (8005674 <HAL_RCC_OscConfig+0x624>)
 80055ae:	4313      	orrs	r3, r2
 80055b0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80055b2:	4b30      	ldr	r3, [pc, #192]	; (8005674 <HAL_RCC_OscConfig+0x624>)
 80055b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b6:	f023 020f 	bic.w	r2, r3, #15
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	68db      	ldr	r3, [r3, #12]
 80055be:	492d      	ldr	r1, [pc, #180]	; (8005674 <HAL_RCC_OscConfig+0x624>)
 80055c0:	4313      	orrs	r3, r2
 80055c2:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80055c4:	4b2b      	ldr	r3, [pc, #172]	; (8005674 <HAL_RCC_OscConfig+0x624>)
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055d4:	430b      	orrs	r3, r1
 80055d6:	4927      	ldr	r1, [pc, #156]	; (8005674 <HAL_RCC_OscConfig+0x624>)
 80055d8:	4313      	orrs	r3, r2
 80055da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80055dc:	4b26      	ldr	r3, [pc, #152]	; (8005678 <HAL_RCC_OscConfig+0x628>)
 80055de:	2201      	movs	r2, #1
 80055e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055e2:	f7fd fccf 	bl	8002f84 <HAL_GetTick>
 80055e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80055e8:	e008      	b.n	80055fc <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055ea:	f7fd fccb 	bl	8002f84 <HAL_GetTick>
 80055ee:	4602      	mov	r2, r0
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	1ad3      	subs	r3, r2, r3
 80055f4:	2b02      	cmp	r3, #2
 80055f6:	d901      	bls.n	80055fc <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 80055f8:	2303      	movs	r3, #3
 80055fa:	e037      	b.n	800566c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80055fc:	4b1d      	ldr	r3, [pc, #116]	; (8005674 <HAL_RCC_OscConfig+0x624>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005604:	2b00      	cmp	r3, #0
 8005606:	d0f0      	beq.n	80055ea <HAL_RCC_OscConfig+0x59a>
 8005608:	e02f      	b.n	800566a <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800560a:	4b1b      	ldr	r3, [pc, #108]	; (8005678 <HAL_RCC_OscConfig+0x628>)
 800560c:	2200      	movs	r2, #0
 800560e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005610:	f7fd fcb8 	bl	8002f84 <HAL_GetTick>
 8005614:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005616:	e008      	b.n	800562a <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005618:	f7fd fcb4 	bl	8002f84 <HAL_GetTick>
 800561c:	4602      	mov	r2, r0
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	1ad3      	subs	r3, r2, r3
 8005622:	2b02      	cmp	r3, #2
 8005624:	d901      	bls.n	800562a <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8005626:	2303      	movs	r3, #3
 8005628:	e020      	b.n	800566c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800562a:	4b12      	ldr	r3, [pc, #72]	; (8005674 <HAL_RCC_OscConfig+0x624>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005632:	2b00      	cmp	r3, #0
 8005634:	d1f0      	bne.n	8005618 <HAL_RCC_OscConfig+0x5c8>
 8005636:	e018      	b.n	800566a <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6a1b      	ldr	r3, [r3, #32]
 800563c:	2b01      	cmp	r3, #1
 800563e:	d101      	bne.n	8005644 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	e013      	b.n	800566c <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005644:	4b0b      	ldr	r3, [pc, #44]	; (8005674 <HAL_RCC_OscConfig+0x624>)
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005654:	429a      	cmp	r2, r3
 8005656:	d106      	bne.n	8005666 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005662:	429a      	cmp	r2, r3
 8005664:	d001      	beq.n	800566a <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	e000      	b.n	800566c <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 800566a:	2300      	movs	r3, #0
}
 800566c:	4618      	mov	r0, r3
 800566e:	3718      	adds	r7, #24
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}
 8005674:	40021000 	.word	0x40021000
 8005678:	42420060 	.word	0x42420060

0800567c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b084      	sub	sp, #16
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d101      	bne.n	8005690 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	e0d0      	b.n	8005832 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005690:	4b6a      	ldr	r3, [pc, #424]	; (800583c <HAL_RCC_ClockConfig+0x1c0>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f003 0307 	and.w	r3, r3, #7
 8005698:	683a      	ldr	r2, [r7, #0]
 800569a:	429a      	cmp	r2, r3
 800569c:	d910      	bls.n	80056c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800569e:	4b67      	ldr	r3, [pc, #412]	; (800583c <HAL_RCC_ClockConfig+0x1c0>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f023 0207 	bic.w	r2, r3, #7
 80056a6:	4965      	ldr	r1, [pc, #404]	; (800583c <HAL_RCC_ClockConfig+0x1c0>)
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056ae:	4b63      	ldr	r3, [pc, #396]	; (800583c <HAL_RCC_ClockConfig+0x1c0>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f003 0307 	and.w	r3, r3, #7
 80056b6:	683a      	ldr	r2, [r7, #0]
 80056b8:	429a      	cmp	r2, r3
 80056ba:	d001      	beq.n	80056c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	e0b8      	b.n	8005832 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f003 0302 	and.w	r3, r3, #2
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d020      	beq.n	800570e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f003 0304 	and.w	r3, r3, #4
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d005      	beq.n	80056e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80056d8:	4b59      	ldr	r3, [pc, #356]	; (8005840 <HAL_RCC_ClockConfig+0x1c4>)
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	4a58      	ldr	r2, [pc, #352]	; (8005840 <HAL_RCC_ClockConfig+0x1c4>)
 80056de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80056e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f003 0308 	and.w	r3, r3, #8
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d005      	beq.n	80056fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80056f0:	4b53      	ldr	r3, [pc, #332]	; (8005840 <HAL_RCC_ClockConfig+0x1c4>)
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	4a52      	ldr	r2, [pc, #328]	; (8005840 <HAL_RCC_ClockConfig+0x1c4>)
 80056f6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80056fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056fc:	4b50      	ldr	r3, [pc, #320]	; (8005840 <HAL_RCC_ClockConfig+0x1c4>)
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	494d      	ldr	r1, [pc, #308]	; (8005840 <HAL_RCC_ClockConfig+0x1c4>)
 800570a:	4313      	orrs	r3, r2
 800570c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f003 0301 	and.w	r3, r3, #1
 8005716:	2b00      	cmp	r3, #0
 8005718:	d040      	beq.n	800579c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	2b01      	cmp	r3, #1
 8005720:	d107      	bne.n	8005732 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005722:	4b47      	ldr	r3, [pc, #284]	; (8005840 <HAL_RCC_ClockConfig+0x1c4>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800572a:	2b00      	cmp	r3, #0
 800572c:	d115      	bne.n	800575a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	e07f      	b.n	8005832 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	2b02      	cmp	r3, #2
 8005738:	d107      	bne.n	800574a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800573a:	4b41      	ldr	r3, [pc, #260]	; (8005840 <HAL_RCC_ClockConfig+0x1c4>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005742:	2b00      	cmp	r3, #0
 8005744:	d109      	bne.n	800575a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	e073      	b.n	8005832 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800574a:	4b3d      	ldr	r3, [pc, #244]	; (8005840 <HAL_RCC_ClockConfig+0x1c4>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f003 0302 	and.w	r3, r3, #2
 8005752:	2b00      	cmp	r3, #0
 8005754:	d101      	bne.n	800575a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	e06b      	b.n	8005832 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800575a:	4b39      	ldr	r3, [pc, #228]	; (8005840 <HAL_RCC_ClockConfig+0x1c4>)
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	f023 0203 	bic.w	r2, r3, #3
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	4936      	ldr	r1, [pc, #216]	; (8005840 <HAL_RCC_ClockConfig+0x1c4>)
 8005768:	4313      	orrs	r3, r2
 800576a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800576c:	f7fd fc0a 	bl	8002f84 <HAL_GetTick>
 8005770:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005772:	e00a      	b.n	800578a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005774:	f7fd fc06 	bl	8002f84 <HAL_GetTick>
 8005778:	4602      	mov	r2, r0
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	1ad3      	subs	r3, r2, r3
 800577e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005782:	4293      	cmp	r3, r2
 8005784:	d901      	bls.n	800578a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005786:	2303      	movs	r3, #3
 8005788:	e053      	b.n	8005832 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800578a:	4b2d      	ldr	r3, [pc, #180]	; (8005840 <HAL_RCC_ClockConfig+0x1c4>)
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	f003 020c 	and.w	r2, r3, #12
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	429a      	cmp	r2, r3
 800579a:	d1eb      	bne.n	8005774 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800579c:	4b27      	ldr	r3, [pc, #156]	; (800583c <HAL_RCC_ClockConfig+0x1c0>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f003 0307 	and.w	r3, r3, #7
 80057a4:	683a      	ldr	r2, [r7, #0]
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d210      	bcs.n	80057cc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057aa:	4b24      	ldr	r3, [pc, #144]	; (800583c <HAL_RCC_ClockConfig+0x1c0>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f023 0207 	bic.w	r2, r3, #7
 80057b2:	4922      	ldr	r1, [pc, #136]	; (800583c <HAL_RCC_ClockConfig+0x1c0>)
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057ba:	4b20      	ldr	r3, [pc, #128]	; (800583c <HAL_RCC_ClockConfig+0x1c0>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f003 0307 	and.w	r3, r3, #7
 80057c2:	683a      	ldr	r2, [r7, #0]
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d001      	beq.n	80057cc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	e032      	b.n	8005832 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f003 0304 	and.w	r3, r3, #4
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d008      	beq.n	80057ea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057d8:	4b19      	ldr	r3, [pc, #100]	; (8005840 <HAL_RCC_ClockConfig+0x1c4>)
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	68db      	ldr	r3, [r3, #12]
 80057e4:	4916      	ldr	r1, [pc, #88]	; (8005840 <HAL_RCC_ClockConfig+0x1c4>)
 80057e6:	4313      	orrs	r3, r2
 80057e8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f003 0308 	and.w	r3, r3, #8
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d009      	beq.n	800580a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80057f6:	4b12      	ldr	r3, [pc, #72]	; (8005840 <HAL_RCC_ClockConfig+0x1c4>)
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	691b      	ldr	r3, [r3, #16]
 8005802:	00db      	lsls	r3, r3, #3
 8005804:	490e      	ldr	r1, [pc, #56]	; (8005840 <HAL_RCC_ClockConfig+0x1c4>)
 8005806:	4313      	orrs	r3, r2
 8005808:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800580a:	f000 f821 	bl	8005850 <HAL_RCC_GetSysClockFreq>
 800580e:	4602      	mov	r2, r0
 8005810:	4b0b      	ldr	r3, [pc, #44]	; (8005840 <HAL_RCC_ClockConfig+0x1c4>)
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	091b      	lsrs	r3, r3, #4
 8005816:	f003 030f 	and.w	r3, r3, #15
 800581a:	490a      	ldr	r1, [pc, #40]	; (8005844 <HAL_RCC_ClockConfig+0x1c8>)
 800581c:	5ccb      	ldrb	r3, [r1, r3]
 800581e:	fa22 f303 	lsr.w	r3, r2, r3
 8005822:	4a09      	ldr	r2, [pc, #36]	; (8005848 <HAL_RCC_ClockConfig+0x1cc>)
 8005824:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005826:	4b09      	ldr	r3, [pc, #36]	; (800584c <HAL_RCC_ClockConfig+0x1d0>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4618      	mov	r0, r3
 800582c:	f7fd fb68 	bl	8002f00 <HAL_InitTick>

  return HAL_OK;
 8005830:	2300      	movs	r3, #0
}
 8005832:	4618      	mov	r0, r3
 8005834:	3710      	adds	r7, #16
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
 800583a:	bf00      	nop
 800583c:	40022000 	.word	0x40022000
 8005840:	40021000 	.word	0x40021000
 8005844:	0800b150 	.word	0x0800b150
 8005848:	20000048 	.word	0x20000048
 800584c:	2000004c 	.word	0x2000004c

08005850 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005850:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005854:	b08e      	sub	sp, #56	; 0x38
 8005856:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005858:	2300      	movs	r3, #0
 800585a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800585c:	2300      	movs	r3, #0
 800585e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005860:	2300      	movs	r3, #0
 8005862:	637b      	str	r3, [r7, #52]	; 0x34
 8005864:	2300      	movs	r3, #0
 8005866:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8005868:	2300      	movs	r3, #0
 800586a:	633b      	str	r3, [r7, #48]	; 0x30
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 800586c:	2300      	movs	r3, #0
 800586e:	623b      	str	r3, [r7, #32]
 8005870:	2300      	movs	r3, #0
 8005872:	61fb      	str	r3, [r7, #28]
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005874:	4b4e      	ldr	r3, [pc, #312]	; (80059b0 <HAL_RCC_GetSysClockFreq+0x160>)
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800587a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800587c:	f003 030c 	and.w	r3, r3, #12
 8005880:	2b04      	cmp	r3, #4
 8005882:	d002      	beq.n	800588a <HAL_RCC_GetSysClockFreq+0x3a>
 8005884:	2b08      	cmp	r3, #8
 8005886:	d003      	beq.n	8005890 <HAL_RCC_GetSysClockFreq+0x40>
 8005888:	e089      	b.n	800599e <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800588a:	4b4a      	ldr	r3, [pc, #296]	; (80059b4 <HAL_RCC_GetSysClockFreq+0x164>)
 800588c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800588e:	e089      	b.n	80059a4 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005892:	0c9b      	lsrs	r3, r3, #18
 8005894:	f003 020f 	and.w	r2, r3, #15
 8005898:	4b47      	ldr	r3, [pc, #284]	; (80059b8 <HAL_RCC_GetSysClockFreq+0x168>)
 800589a:	5c9b      	ldrb	r3, [r3, r2]
 800589c:	627b      	str	r3, [r7, #36]	; 0x24
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800589e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d072      	beq.n	800598e <HAL_RCC_GetSysClockFreq+0x13e>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 80058a8:	4b41      	ldr	r3, [pc, #260]	; (80059b0 <HAL_RCC_GetSysClockFreq+0x160>)
 80058aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ac:	f003 020f 	and.w	r2, r3, #15
 80058b0:	4b42      	ldr	r3, [pc, #264]	; (80059bc <HAL_RCC_GetSysClockFreq+0x16c>)
 80058b2:	5c9b      	ldrb	r3, [r3, r2]
 80058b4:	62bb      	str	r3, [r7, #40]	; 0x28
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 80058b6:	4b3e      	ldr	r3, [pc, #248]	; (80059b0 <HAL_RCC_GetSysClockFreq+0x160>)
 80058b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d053      	beq.n	800596a <HAL_RCC_GetSysClockFreq+0x11a>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 80058c2:	4b3b      	ldr	r3, [pc, #236]	; (80059b0 <HAL_RCC_GetSysClockFreq+0x160>)
 80058c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058c6:	091b      	lsrs	r3, r3, #4
 80058c8:	f003 030f 	and.w	r3, r3, #15
 80058cc:	3301      	adds	r3, #1
 80058ce:	623b      	str	r3, [r7, #32]
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 80058d0:	4b37      	ldr	r3, [pc, #220]	; (80059b0 <HAL_RCC_GetSysClockFreq+0x160>)
 80058d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d4:	0a1b      	lsrs	r3, r3, #8
 80058d6:	f003 030f 	and.w	r3, r3, #15
 80058da:	3302      	adds	r3, #2
 80058dc:	61fb      	str	r3, [r7, #28]
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	2200      	movs	r2, #0
 80058e2:	469a      	mov	sl, r3
 80058e4:	4693      	mov	fp, r2
 80058e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e8:	2200      	movs	r2, #0
 80058ea:	613b      	str	r3, [r7, #16]
 80058ec:	617a      	str	r2, [r7, #20]
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	fb03 f20b 	mul.w	r2, r3, fp
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	fb0a f303 	mul.w	r3, sl, r3
 80058fa:	4413      	add	r3, r2
 80058fc:	693a      	ldr	r2, [r7, #16]
 80058fe:	fbaa 0102 	umull	r0, r1, sl, r2
 8005902:	440b      	add	r3, r1
 8005904:	4619      	mov	r1, r3
 8005906:	4b2b      	ldr	r3, [pc, #172]	; (80059b4 <HAL_RCC_GetSysClockFreq+0x164>)
 8005908:	fb03 f201 	mul.w	r2, r3, r1
 800590c:	2300      	movs	r3, #0
 800590e:	fb00 f303 	mul.w	r3, r0, r3
 8005912:	4413      	add	r3, r2
 8005914:	4a27      	ldr	r2, [pc, #156]	; (80059b4 <HAL_RCC_GetSysClockFreq+0x164>)
 8005916:	fba0 4502 	umull	r4, r5, r0, r2
 800591a:	442b      	add	r3, r5
 800591c:	461d      	mov	r5, r3
 800591e:	6a3b      	ldr	r3, [r7, #32]
 8005920:	2200      	movs	r2, #0
 8005922:	60bb      	str	r3, [r7, #8]
 8005924:	60fa      	str	r2, [r7, #12]
 8005926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005928:	2200      	movs	r2, #0
 800592a:	603b      	str	r3, [r7, #0]
 800592c:	607a      	str	r2, [r7, #4]
 800592e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005932:	460b      	mov	r3, r1
 8005934:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005938:	4652      	mov	r2, sl
 800593a:	fb02 f203 	mul.w	r2, r2, r3
 800593e:	465b      	mov	r3, fp
 8005940:	4684      	mov	ip, r0
 8005942:	fb0c f303 	mul.w	r3, ip, r3
 8005946:	4413      	add	r3, r2
 8005948:	4602      	mov	r2, r0
 800594a:	4651      	mov	r1, sl
 800594c:	fba2 8901 	umull	r8, r9, r2, r1
 8005950:	444b      	add	r3, r9
 8005952:	4699      	mov	r9, r3
 8005954:	4642      	mov	r2, r8
 8005956:	464b      	mov	r3, r9
 8005958:	4620      	mov	r0, r4
 800595a:	4629      	mov	r1, r5
 800595c:	f7fb fba6 	bl	80010ac <__aeabi_uldivmod>
 8005960:	4602      	mov	r2, r0
 8005962:	460b      	mov	r3, r1
 8005964:	4613      	mov	r3, r2
 8005966:	637b      	str	r3, [r7, #52]	; 0x34
 8005968:	e007      	b.n	800597a <HAL_RCC_GetSysClockFreq+0x12a>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 800596a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596c:	4a11      	ldr	r2, [pc, #68]	; (80059b4 <HAL_RCC_GetSysClockFreq+0x164>)
 800596e:	fb03 f202 	mul.w	r2, r3, r2
 8005972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005974:	fbb2 f3f3 	udiv	r3, r2, r3
 8005978:	637b      	str	r3, [r7, #52]	; 0x34
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 800597a:	4b0f      	ldr	r3, [pc, #60]	; (80059b8 <HAL_RCC_GetSysClockFreq+0x168>)
 800597c:	7b5b      	ldrb	r3, [r3, #13]
 800597e:	461a      	mov	r2, r3
 8005980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005982:	4293      	cmp	r3, r2
 8005984:	d108      	bne.n	8005998 <HAL_RCC_GetSysClockFreq+0x148>
        {
          pllclk = pllclk / 2;
 8005986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005988:	085b      	lsrs	r3, r3, #1
 800598a:	637b      	str	r3, [r7, #52]	; 0x34
 800598c:	e004      	b.n	8005998 <HAL_RCC_GetSysClockFreq+0x148>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800598e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005990:	4a0b      	ldr	r2, [pc, #44]	; (80059c0 <HAL_RCC_GetSysClockFreq+0x170>)
 8005992:	fb02 f303 	mul.w	r3, r2, r3
 8005996:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllclk;
 8005998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800599a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800599c:	e002      	b.n	80059a4 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800599e:	4b09      	ldr	r3, [pc, #36]	; (80059c4 <HAL_RCC_GetSysClockFreq+0x174>)
 80059a0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80059a2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80059a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3738      	adds	r7, #56	; 0x38
 80059aa:	46bd      	mov	sp, r7
 80059ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80059b0:	40021000 	.word	0x40021000
 80059b4:	017d7840 	.word	0x017d7840
 80059b8:	0800b160 	.word	0x0800b160
 80059bc:	0800b170 	.word	0x0800b170
 80059c0:	003d0900 	.word	0x003d0900
 80059c4:	007a1200 	.word	0x007a1200

080059c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059c8:	b480      	push	{r7}
 80059ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80059cc:	4b02      	ldr	r3, [pc, #8]	; (80059d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80059ce:	681b      	ldr	r3, [r3, #0]
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bc80      	pop	{r7}
 80059d6:	4770      	bx	lr
 80059d8:	20000048 	.word	0x20000048

080059dc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80059dc:	b480      	push	{r7}
 80059de:	b085      	sub	sp, #20
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80059e4:	4b0a      	ldr	r3, [pc, #40]	; (8005a10 <RCC_Delay+0x34>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a0a      	ldr	r2, [pc, #40]	; (8005a14 <RCC_Delay+0x38>)
 80059ea:	fba2 2303 	umull	r2, r3, r2, r3
 80059ee:	0a5b      	lsrs	r3, r3, #9
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	fb02 f303 	mul.w	r3, r2, r3
 80059f6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80059f8:	bf00      	nop
  }
  while (Delay --);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	1e5a      	subs	r2, r3, #1
 80059fe:	60fa      	str	r2, [r7, #12]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d1f9      	bne.n	80059f8 <RCC_Delay+0x1c>
}
 8005a04:	bf00      	nop
 8005a06:	bf00      	nop
 8005a08:	3714      	adds	r7, #20
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bc80      	pop	{r7}
 8005a0e:	4770      	bx	lr
 8005a10:	20000048 	.word	0x20000048
 8005a14:	10624dd3 	.word	0x10624dd3

08005a18 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b088      	sub	sp, #32
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005a20:	2300      	movs	r3, #0
 8005a22:	617b      	str	r3, [r7, #20]
 8005a24:	2300      	movs	r3, #0
 8005a26:	613b      	str	r3, [r7, #16]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f003 0301 	and.w	r3, r3, #1
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d07d      	beq.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    FlagStatus pwrclkchanged = RESET;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	76fb      	strb	r3, [r7, #27]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a3c:	4b8b      	ldr	r3, [pc, #556]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005a3e:	69db      	ldr	r3, [r3, #28]
 8005a40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d10d      	bne.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a48:	4b88      	ldr	r3, [pc, #544]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005a4a:	69db      	ldr	r3, [r3, #28]
 8005a4c:	4a87      	ldr	r2, [pc, #540]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005a4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a52:	61d3      	str	r3, [r2, #28]
 8005a54:	4b85      	ldr	r3, [pc, #532]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005a56:	69db      	ldr	r3, [r3, #28]
 8005a58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a5c:	60fb      	str	r3, [r7, #12]
 8005a5e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005a60:	2301      	movs	r3, #1
 8005a62:	76fb      	strb	r3, [r7, #27]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a64:	4b82      	ldr	r3, [pc, #520]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d118      	bne.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a70:	4b7f      	ldr	r3, [pc, #508]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a7e      	ldr	r2, [pc, #504]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005a76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a7a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a7c:	f7fd fa82 	bl	8002f84 <HAL_GetTick>
 8005a80:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a82:	e008      	b.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a84:	f7fd fa7e 	bl	8002f84 <HAL_GetTick>
 8005a88:	4602      	mov	r2, r0
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	1ad3      	subs	r3, r2, r3
 8005a8e:	2b64      	cmp	r3, #100	; 0x64
 8005a90:	d901      	bls.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        {
          return HAL_TIMEOUT;
 8005a92:	2303      	movs	r3, #3
 8005a94:	e0e5      	b.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a96:	4b76      	ldr	r3, [pc, #472]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d0f0      	beq.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x6c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005aa2:	4b72      	ldr	r3, [pc, #456]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005aa4:	6a1b      	ldr	r3, [r3, #32]
 8005aa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005aaa:	613b      	str	r3, [r7, #16]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d02e      	beq.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0xf8>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005aba:	693a      	ldr	r2, [r7, #16]
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d027      	beq.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005ac0:	4b6a      	ldr	r3, [pc, #424]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005ac2:	6a1b      	ldr	r3, [r3, #32]
 8005ac4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ac8:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005aca:	4b6a      	ldr	r3, [pc, #424]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005acc:	2201      	movs	r2, #1
 8005ace:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005ad0:	4b68      	ldr	r3, [pc, #416]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005ad6:	4a65      	ldr	r2, [pc, #404]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	f003 0301 	and.w	r3, r3, #1
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d014      	beq.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ae6:	f7fd fa4d 	bl	8002f84 <HAL_GetTick>
 8005aea:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005aec:	e00a      	b.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0xec>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005aee:	f7fd fa49 	bl	8002f84 <HAL_GetTick>
 8005af2:	4602      	mov	r2, r0
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	1ad3      	subs	r3, r2, r3
 8005af8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d901      	bls.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0xec>
          {
            return HAL_TIMEOUT;
 8005b00:	2303      	movs	r3, #3
 8005b02:	e0ae      	b.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x24a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b04:	4b59      	ldr	r3, [pc, #356]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005b06:	6a1b      	ldr	r3, [r3, #32]
 8005b08:	f003 0302 	and.w	r3, r3, #2
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d0ee      	beq.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0xd6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b10:	4b56      	ldr	r3, [pc, #344]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005b12:	6a1b      	ldr	r3, [r3, #32]
 8005b14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	4953      	ldr	r1, [pc, #332]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005b22:	7efb      	ldrb	r3, [r7, #27]
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d105      	bne.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b28:	4b50      	ldr	r3, [pc, #320]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005b2a:	69db      	ldr	r3, [r3, #28]
 8005b2c:	4a4f      	ldr	r2, [pc, #316]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005b2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b32:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f003 0302 	and.w	r3, r3, #2
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d008      	beq.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005b40:	4b4a      	ldr	r3, [pc, #296]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	4947      	ldr	r1, [pc, #284]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	604b      	str	r3, [r1, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f003 0304 	and.w	r3, r3, #4
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d008      	beq.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8005b5e:	4b43      	ldr	r3, [pc, #268]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b62:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	68db      	ldr	r3, [r3, #12]
 8005b6a:	4940      	ldr	r1, [pc, #256]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 0308 	and.w	r3, r3, #8
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d008      	beq.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));

    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 8005b7c:	4b3b      	ldr	r3, [pc, #236]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b80:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	691b      	ldr	r3, [r3, #16]
 8005b88:	4938      	ldr	r1, [pc, #224]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 8005b8e:	4b37      	ldr	r3, [pc, #220]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d105      	bne.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x18e>
 8005b9a:	4b34      	ldr	r3, [pc, #208]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d001      	beq.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Update flag to indicate that PLL I2S should be active */
    pllactive = 1;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	61fb      	str	r3, [r7, #28]
  }

  /* Check if PLL I2S need to be enabled */
  if (pllactive == 1)
 8005baa:	69fb      	ldr	r3, [r7, #28]
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d148      	bne.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    /* Enable PLL I2S only if not active */
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 8005bb0:	4b2e      	ldr	r3, [pc, #184]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d138      	bne.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x216>
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8005bbc:	4b2b      	ldr	r3, [pc, #172]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d009      	beq.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
          (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 8005bc8:	4b28      	ldr	r3, [pc, #160]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bcc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	699b      	ldr	r3, [r3, #24]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d001      	beq.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      {
        return HAL_ERROR;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	e042      	b.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      }

      /* Configure the HSE prediv2 factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 8005bdc:	4b23      	ldr	r3, [pc, #140]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	699b      	ldr	r3, [r3, #24]
 8005be8:	4920      	ldr	r1, [pc, #128]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005bea:	4313      	orrs	r3, r2
 8005bec:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Configure the main PLLI2S multiplication factors. */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 8005bee:	4b1f      	ldr	r3, [pc, #124]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf2:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	695b      	ldr	r3, [r3, #20]
 8005bfa:	491c      	ldr	r1, [pc, #112]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Enable the main PLLI2S. */
      __HAL_RCC_PLLI2S_ENABLE();
 8005c00:	4b1d      	ldr	r3, [pc, #116]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c02:	2201      	movs	r2, #1
 8005c04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c06:	f7fd f9bd 	bl	8002f84 <HAL_GetTick>
 8005c0a:	6178      	str	r0, [r7, #20]

      /* Wait till PLLI2S is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005c0c:	e008      	b.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x208>
      {
        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005c0e:	f7fd f9b9 	bl	8002f84 <HAL_GetTick>
 8005c12:	4602      	mov	r2, r0
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	1ad3      	subs	r3, r2, r3
 8005c18:	2b64      	cmp	r3, #100	; 0x64
 8005c1a:	d901      	bls.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x208>
        {
          return HAL_TIMEOUT;
 8005c1c:	2303      	movs	r3, #3
 8005c1e:	e020      	b.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005c20:	4b12      	ldr	r3, [pc, #72]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d0f0      	beq.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8005c2c:	e009      	b.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x22a>
      }
    }
    else
    {
      /* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 8005c2e:	4b0f      	ldr	r3, [pc, #60]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c32:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	695b      	ldr	r3, [r3, #20]
 8005c3a:	429a      	cmp	r2, r3
 8005c3c:	d001      	beq.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x22a>
      {
        return HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e00f      	b.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x24a>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f003 0310 	and.w	r3, r3, #16
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d008      	beq.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005c4e:	4b07      	ldr	r3, [pc, #28]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	69db      	ldr	r3, [r3, #28]
 8005c5a:	4904      	ldr	r1, [pc, #16]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005c60:	2300      	movs	r3, #0
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3720      	adds	r7, #32
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}
 8005c6a:	bf00      	nop
 8005c6c:	40021000 	.word	0x40021000
 8005c70:	40007000 	.word	0x40007000
 8005c74:	42420440 	.word	0x42420440
 8005c78:	42420070 	.word	0x42420070

08005c7c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b082      	sub	sp, #8
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d101      	bne.n	8005c8e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e076      	b.n	8005d7c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d108      	bne.n	8005ca8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c9e:	d009      	beq.n	8005cb4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	61da      	str	r2, [r3, #28]
 8005ca6:	e005      	b.n	8005cb4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2200      	movs	r2, #0
 8005cac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005cc0:	b2db      	uxtb	r3, r3
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d106      	bne.n	8005cd4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f7fc ff84 	bl	8002bdc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2202      	movs	r2, #2
 8005cd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005cfc:	431a      	orrs	r2, r3
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d06:	431a      	orrs	r2, r3
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	691b      	ldr	r3, [r3, #16]
 8005d0c:	f003 0302 	and.w	r3, r3, #2
 8005d10:	431a      	orrs	r2, r3
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	695b      	ldr	r3, [r3, #20]
 8005d16:	f003 0301 	and.w	r3, r3, #1
 8005d1a:	431a      	orrs	r2, r3
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	699b      	ldr	r3, [r3, #24]
 8005d20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d24:	431a      	orrs	r2, r3
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	69db      	ldr	r3, [r3, #28]
 8005d2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d2e:	431a      	orrs	r2, r3
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6a1b      	ldr	r3, [r3, #32]
 8005d34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d38:	ea42 0103 	orr.w	r1, r2, r3
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d40:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	430a      	orrs	r2, r1
 8005d4a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	699b      	ldr	r3, [r3, #24]
 8005d50:	0c1a      	lsrs	r2, r3, #16
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f002 0204 	and.w	r2, r2, #4
 8005d5a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	69da      	ldr	r2, [r3, #28]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d6a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2201      	movs	r2, #1
 8005d76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005d7a:	2300      	movs	r3, #0
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3708      	adds	r7, #8
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}

08005d84 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b088      	sub	sp, #32
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	60f8      	str	r0, [r7, #12]
 8005d8c:	60b9      	str	r1, [r7, #8]
 8005d8e:	603b      	str	r3, [r7, #0]
 8005d90:	4613      	mov	r3, r2
 8005d92:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005d94:	2300      	movs	r3, #0
 8005d96:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d101      	bne.n	8005da6 <HAL_SPI_Transmit+0x22>
 8005da2:	2302      	movs	r3, #2
 8005da4:	e12d      	b.n	8006002 <HAL_SPI_Transmit+0x27e>
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2201      	movs	r2, #1
 8005daa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005dae:	f7fd f8e9 	bl	8002f84 <HAL_GetTick>
 8005db2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005db4:	88fb      	ldrh	r3, [r7, #6]
 8005db6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005dbe:	b2db      	uxtb	r3, r3
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d002      	beq.n	8005dca <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005dc4:	2302      	movs	r3, #2
 8005dc6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005dc8:	e116      	b.n	8005ff8 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d002      	beq.n	8005dd6 <HAL_SPI_Transmit+0x52>
 8005dd0:	88fb      	ldrh	r3, [r7, #6]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d102      	bne.n	8005ddc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005dda:	e10d      	b.n	8005ff8 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2203      	movs	r2, #3
 8005de0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2200      	movs	r2, #0
 8005de8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	68ba      	ldr	r2, [r7, #8]
 8005dee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	88fa      	ldrh	r2, [r7, #6]
 8005df4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	88fa      	ldrh	r2, [r7, #6]
 8005dfa:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2200      	movs	r2, #0
 8005e06:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2200      	movs	r2, #0
 8005e12:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2200      	movs	r2, #0
 8005e18:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	689b      	ldr	r3, [r3, #8]
 8005e1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e22:	d10f      	bne.n	8005e44 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	681a      	ldr	r2, [r3, #0]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e32:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e42:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e4e:	2b40      	cmp	r3, #64	; 0x40
 8005e50:	d007      	beq.n	8005e62 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e60:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	68db      	ldr	r3, [r3, #12]
 8005e66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e6a:	d14f      	bne.n	8005f0c <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d002      	beq.n	8005e7a <HAL_SPI_Transmit+0xf6>
 8005e74:	8afb      	ldrh	r3, [r7, #22]
 8005e76:	2b01      	cmp	r3, #1
 8005e78:	d142      	bne.n	8005f00 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e7e:	881a      	ldrh	r2, [r3, #0]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e8a:	1c9a      	adds	r2, r3, #2
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	3b01      	subs	r3, #1
 8005e98:	b29a      	uxth	r2, r3
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005e9e:	e02f      	b.n	8005f00 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	f003 0302 	and.w	r3, r3, #2
 8005eaa:	2b02      	cmp	r3, #2
 8005eac:	d112      	bne.n	8005ed4 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eb2:	881a      	ldrh	r2, [r3, #0]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ebe:	1c9a      	adds	r2, r3, #2
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	3b01      	subs	r3, #1
 8005ecc:	b29a      	uxth	r2, r3
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	86da      	strh	r2, [r3, #54]	; 0x36
 8005ed2:	e015      	b.n	8005f00 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ed4:	f7fd f856 	bl	8002f84 <HAL_GetTick>
 8005ed8:	4602      	mov	r2, r0
 8005eda:	69bb      	ldr	r3, [r7, #24]
 8005edc:	1ad3      	subs	r3, r2, r3
 8005ede:	683a      	ldr	r2, [r7, #0]
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d803      	bhi.n	8005eec <HAL_SPI_Transmit+0x168>
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eea:	d102      	bne.n	8005ef2 <HAL_SPI_Transmit+0x16e>
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d106      	bne.n	8005f00 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8005ef2:	2303      	movs	r3, #3
 8005ef4:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2201      	movs	r2, #1
 8005efa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005efe:	e07b      	b.n	8005ff8 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d1ca      	bne.n	8005ea0 <HAL_SPI_Transmit+0x11c>
 8005f0a:	e050      	b.n	8005fae <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d002      	beq.n	8005f1a <HAL_SPI_Transmit+0x196>
 8005f14:	8afb      	ldrh	r3, [r7, #22]
 8005f16:	2b01      	cmp	r3, #1
 8005f18:	d144      	bne.n	8005fa4 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	330c      	adds	r3, #12
 8005f24:	7812      	ldrb	r2, [r2, #0]
 8005f26:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f2c:	1c5a      	adds	r2, r3, #1
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f36:	b29b      	uxth	r3, r3
 8005f38:	3b01      	subs	r3, #1
 8005f3a:	b29a      	uxth	r2, r3
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005f40:	e030      	b.n	8005fa4 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	f003 0302 	and.w	r3, r3, #2
 8005f4c:	2b02      	cmp	r3, #2
 8005f4e:	d113      	bne.n	8005f78 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	330c      	adds	r3, #12
 8005f5a:	7812      	ldrb	r2, [r2, #0]
 8005f5c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f62:	1c5a      	adds	r2, r3, #1
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	3b01      	subs	r3, #1
 8005f70:	b29a      	uxth	r2, r3
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	86da      	strh	r2, [r3, #54]	; 0x36
 8005f76:	e015      	b.n	8005fa4 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f78:	f7fd f804 	bl	8002f84 <HAL_GetTick>
 8005f7c:	4602      	mov	r2, r0
 8005f7e:	69bb      	ldr	r3, [r7, #24]
 8005f80:	1ad3      	subs	r3, r2, r3
 8005f82:	683a      	ldr	r2, [r7, #0]
 8005f84:	429a      	cmp	r2, r3
 8005f86:	d803      	bhi.n	8005f90 <HAL_SPI_Transmit+0x20c>
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f8e:	d102      	bne.n	8005f96 <HAL_SPI_Transmit+0x212>
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d106      	bne.n	8005fa4 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8005f96:	2303      	movs	r3, #3
 8005f98:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005fa2:	e029      	b.n	8005ff8 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fa8:	b29b      	uxth	r3, r3
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d1c9      	bne.n	8005f42 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005fae:	69ba      	ldr	r2, [r7, #24]
 8005fb0:	6839      	ldr	r1, [r7, #0]
 8005fb2:	68f8      	ldr	r0, [r7, #12]
 8005fb4:	f000 fbcc 	bl	8006750 <SPI_EndRxTxTransaction>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d002      	beq.n	8005fc4 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2220      	movs	r2, #32
 8005fc2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d10a      	bne.n	8005fe2 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005fcc:	2300      	movs	r3, #0
 8005fce:	613b      	str	r3, [r7, #16]
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	68db      	ldr	r3, [r3, #12]
 8005fd6:	613b      	str	r3, [r7, #16]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	613b      	str	r3, [r7, #16]
 8005fe0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d002      	beq.n	8005ff0 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8005fea:	2301      	movs	r3, #1
 8005fec:	77fb      	strb	r3, [r7, #31]
 8005fee:	e003      	b.n	8005ff8 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006000:	7ffb      	ldrb	r3, [r7, #31]
}
 8006002:	4618      	mov	r0, r3
 8006004:	3720      	adds	r7, #32
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}

0800600a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800600a:	b580      	push	{r7, lr}
 800600c:	b088      	sub	sp, #32
 800600e:	af02      	add	r7, sp, #8
 8006010:	60f8      	str	r0, [r7, #12]
 8006012:	60b9      	str	r1, [r7, #8]
 8006014:	603b      	str	r3, [r7, #0]
 8006016:	4613      	mov	r3, r2
 8006018:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800601a:	2300      	movs	r3, #0
 800601c:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006024:	b2db      	uxtb	r3, r3
 8006026:	2b01      	cmp	r3, #1
 8006028:	d002      	beq.n	8006030 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800602a:	2302      	movs	r3, #2
 800602c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800602e:	e0fb      	b.n	8006228 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006038:	d112      	bne.n	8006060 <HAL_SPI_Receive+0x56>
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d10e      	bne.n	8006060 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2204      	movs	r2, #4
 8006046:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800604a:	88fa      	ldrh	r2, [r7, #6]
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	9300      	str	r3, [sp, #0]
 8006050:	4613      	mov	r3, r2
 8006052:	68ba      	ldr	r2, [r7, #8]
 8006054:	68b9      	ldr	r1, [r7, #8]
 8006056:	68f8      	ldr	r0, [r7, #12]
 8006058:	f000 f8ef 	bl	800623a <HAL_SPI_TransmitReceive>
 800605c:	4603      	mov	r3, r0
 800605e:	e0e8      	b.n	8006232 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006066:	2b01      	cmp	r3, #1
 8006068:	d101      	bne.n	800606e <HAL_SPI_Receive+0x64>
 800606a:	2302      	movs	r3, #2
 800606c:	e0e1      	b.n	8006232 <HAL_SPI_Receive+0x228>
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2201      	movs	r2, #1
 8006072:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006076:	f7fc ff85 	bl	8002f84 <HAL_GetTick>
 800607a:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d002      	beq.n	8006088 <HAL_SPI_Receive+0x7e>
 8006082:	88fb      	ldrh	r3, [r7, #6]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d102      	bne.n	800608e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006088:	2301      	movs	r3, #1
 800608a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800608c:	e0cc      	b.n	8006228 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2204      	movs	r2, #4
 8006092:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2200      	movs	r2, #0
 800609a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	68ba      	ldr	r2, [r7, #8]
 80060a0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	88fa      	ldrh	r2, [r7, #6]
 80060a6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	88fa      	ldrh	r2, [r7, #6]
 80060ac:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2200      	movs	r2, #0
 80060b2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2200      	movs	r2, #0
 80060b8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2200      	movs	r2, #0
 80060be:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2200      	movs	r2, #0
 80060c4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2200      	movs	r2, #0
 80060ca:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060d4:	d10f      	bne.n	80060f6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060e4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80060f4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006100:	2b40      	cmp	r3, #64	; 0x40
 8006102:	d007      	beq.n	8006114 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006112:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	68db      	ldr	r3, [r3, #12]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d16a      	bne.n	80061f2 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800611c:	e032      	b.n	8006184 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	689b      	ldr	r3, [r3, #8]
 8006124:	f003 0301 	and.w	r3, r3, #1
 8006128:	2b01      	cmp	r3, #1
 800612a:	d115      	bne.n	8006158 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f103 020c 	add.w	r2, r3, #12
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006138:	7812      	ldrb	r2, [r2, #0]
 800613a:	b2d2      	uxtb	r2, r2
 800613c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006142:	1c5a      	adds	r2, r3, #1
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800614c:	b29b      	uxth	r3, r3
 800614e:	3b01      	subs	r3, #1
 8006150:	b29a      	uxth	r2, r3
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006156:	e015      	b.n	8006184 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006158:	f7fc ff14 	bl	8002f84 <HAL_GetTick>
 800615c:	4602      	mov	r2, r0
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	1ad3      	subs	r3, r2, r3
 8006162:	683a      	ldr	r2, [r7, #0]
 8006164:	429a      	cmp	r2, r3
 8006166:	d803      	bhi.n	8006170 <HAL_SPI_Receive+0x166>
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800616e:	d102      	bne.n	8006176 <HAL_SPI_Receive+0x16c>
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d106      	bne.n	8006184 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8006176:	2303      	movs	r3, #3
 8006178:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2201      	movs	r2, #1
 800617e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8006182:	e051      	b.n	8006228 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006188:	b29b      	uxth	r3, r3
 800618a:	2b00      	cmp	r3, #0
 800618c:	d1c7      	bne.n	800611e <HAL_SPI_Receive+0x114>
 800618e:	e035      	b.n	80061fc <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	689b      	ldr	r3, [r3, #8]
 8006196:	f003 0301 	and.w	r3, r3, #1
 800619a:	2b01      	cmp	r3, #1
 800619c:	d113      	bne.n	80061c6 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	68da      	ldr	r2, [r3, #12]
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061a8:	b292      	uxth	r2, r2
 80061aa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061b0:	1c9a      	adds	r2, r3, #2
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061ba:	b29b      	uxth	r3, r3
 80061bc:	3b01      	subs	r3, #1
 80061be:	b29a      	uxth	r2, r3
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80061c4:	e015      	b.n	80061f2 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80061c6:	f7fc fedd 	bl	8002f84 <HAL_GetTick>
 80061ca:	4602      	mov	r2, r0
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	1ad3      	subs	r3, r2, r3
 80061d0:	683a      	ldr	r2, [r7, #0]
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d803      	bhi.n	80061de <HAL_SPI_Receive+0x1d4>
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061dc:	d102      	bne.n	80061e4 <HAL_SPI_Receive+0x1da>
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d106      	bne.n	80061f2 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 80061e4:	2303      	movs	r3, #3
 80061e6:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2201      	movs	r2, #1
 80061ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80061f0:	e01a      	b.n	8006228 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d1c9      	bne.n	8006190 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80061fc:	693a      	ldr	r2, [r7, #16]
 80061fe:	6839      	ldr	r1, [r7, #0]
 8006200:	68f8      	ldr	r0, [r7, #12]
 8006202:	f000 fa53 	bl	80066ac <SPI_EndRxTransaction>
 8006206:	4603      	mov	r3, r0
 8006208:	2b00      	cmp	r3, #0
 800620a:	d002      	beq.n	8006212 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2220      	movs	r2, #32
 8006210:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006216:	2b00      	cmp	r3, #0
 8006218:	d002      	beq.n	8006220 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 800621a:	2301      	movs	r3, #1
 800621c:	75fb      	strb	r3, [r7, #23]
 800621e:	e003      	b.n	8006228 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2201      	movs	r2, #1
 8006224:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2200      	movs	r2, #0
 800622c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006230:	7dfb      	ldrb	r3, [r7, #23]
}
 8006232:	4618      	mov	r0, r3
 8006234:	3718      	adds	r7, #24
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}

0800623a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800623a:	b580      	push	{r7, lr}
 800623c:	b08c      	sub	sp, #48	; 0x30
 800623e:	af00      	add	r7, sp, #0
 8006240:	60f8      	str	r0, [r7, #12]
 8006242:	60b9      	str	r1, [r7, #8]
 8006244:	607a      	str	r2, [r7, #4]
 8006246:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006248:	2301      	movs	r3, #1
 800624a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800624c:	2300      	movs	r3, #0
 800624e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006258:	2b01      	cmp	r3, #1
 800625a:	d101      	bne.n	8006260 <HAL_SPI_TransmitReceive+0x26>
 800625c:	2302      	movs	r3, #2
 800625e:	e198      	b.n	8006592 <HAL_SPI_TransmitReceive+0x358>
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2201      	movs	r2, #1
 8006264:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006268:	f7fc fe8c 	bl	8002f84 <HAL_GetTick>
 800626c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006274:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800627e:	887b      	ldrh	r3, [r7, #2]
 8006280:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006282:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006286:	2b01      	cmp	r3, #1
 8006288:	d00f      	beq.n	80062aa <HAL_SPI_TransmitReceive+0x70>
 800628a:	69fb      	ldr	r3, [r7, #28]
 800628c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006290:	d107      	bne.n	80062a2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d103      	bne.n	80062a2 <HAL_SPI_TransmitReceive+0x68>
 800629a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800629e:	2b04      	cmp	r3, #4
 80062a0:	d003      	beq.n	80062aa <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80062a2:	2302      	movs	r3, #2
 80062a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80062a8:	e16d      	b.n	8006586 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d005      	beq.n	80062bc <HAL_SPI_TransmitReceive+0x82>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d002      	beq.n	80062bc <HAL_SPI_TransmitReceive+0x82>
 80062b6:	887b      	ldrh	r3, [r7, #2]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d103      	bne.n	80062c4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80062bc:	2301      	movs	r3, #1
 80062be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80062c2:	e160      	b.n	8006586 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80062ca:	b2db      	uxtb	r3, r3
 80062cc:	2b04      	cmp	r3, #4
 80062ce:	d003      	beq.n	80062d8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2205      	movs	r2, #5
 80062d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2200      	movs	r2, #0
 80062dc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	687a      	ldr	r2, [r7, #4]
 80062e2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	887a      	ldrh	r2, [r7, #2]
 80062e8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	887a      	ldrh	r2, [r7, #2]
 80062ee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	68ba      	ldr	r2, [r7, #8]
 80062f4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	887a      	ldrh	r2, [r7, #2]
 80062fa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	887a      	ldrh	r2, [r7, #2]
 8006300:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2200      	movs	r2, #0
 8006306:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2200      	movs	r2, #0
 800630c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006318:	2b40      	cmp	r3, #64	; 0x40
 800631a:	d007      	beq.n	800632c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800632a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	68db      	ldr	r3, [r3, #12]
 8006330:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006334:	d17c      	bne.n	8006430 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d002      	beq.n	8006344 <HAL_SPI_TransmitReceive+0x10a>
 800633e:	8b7b      	ldrh	r3, [r7, #26]
 8006340:	2b01      	cmp	r3, #1
 8006342:	d16a      	bne.n	800641a <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006348:	881a      	ldrh	r2, [r3, #0]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006354:	1c9a      	adds	r2, r3, #2
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800635e:	b29b      	uxth	r3, r3
 8006360:	3b01      	subs	r3, #1
 8006362:	b29a      	uxth	r2, r3
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006368:	e057      	b.n	800641a <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	f003 0302 	and.w	r3, r3, #2
 8006374:	2b02      	cmp	r3, #2
 8006376:	d11b      	bne.n	80063b0 <HAL_SPI_TransmitReceive+0x176>
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800637c:	b29b      	uxth	r3, r3
 800637e:	2b00      	cmp	r3, #0
 8006380:	d016      	beq.n	80063b0 <HAL_SPI_TransmitReceive+0x176>
 8006382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006384:	2b01      	cmp	r3, #1
 8006386:	d113      	bne.n	80063b0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800638c:	881a      	ldrh	r2, [r3, #0]
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006398:	1c9a      	adds	r2, r3, #2
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	3b01      	subs	r3, #1
 80063a6:	b29a      	uxth	r2, r3
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80063ac:	2300      	movs	r3, #0
 80063ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	689b      	ldr	r3, [r3, #8]
 80063b6:	f003 0301 	and.w	r3, r3, #1
 80063ba:	2b01      	cmp	r3, #1
 80063bc:	d119      	bne.n	80063f2 <HAL_SPI_TransmitReceive+0x1b8>
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d014      	beq.n	80063f2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	68da      	ldr	r2, [r3, #12]
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063d2:	b292      	uxth	r2, r2
 80063d4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063da:	1c9a      	adds	r2, r3, #2
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063e4:	b29b      	uxth	r3, r3
 80063e6:	3b01      	subs	r3, #1
 80063e8:	b29a      	uxth	r2, r3
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80063ee:	2301      	movs	r3, #1
 80063f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80063f2:	f7fc fdc7 	bl	8002f84 <HAL_GetTick>
 80063f6:	4602      	mov	r2, r0
 80063f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fa:	1ad3      	subs	r3, r2, r3
 80063fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063fe:	429a      	cmp	r2, r3
 8006400:	d80b      	bhi.n	800641a <HAL_SPI_TransmitReceive+0x1e0>
 8006402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006408:	d007      	beq.n	800641a <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800640a:	2303      	movs	r3, #3
 800640c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2201      	movs	r2, #1
 8006414:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8006418:	e0b5      	b.n	8006586 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800641e:	b29b      	uxth	r3, r3
 8006420:	2b00      	cmp	r3, #0
 8006422:	d1a2      	bne.n	800636a <HAL_SPI_TransmitReceive+0x130>
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006428:	b29b      	uxth	r3, r3
 800642a:	2b00      	cmp	r3, #0
 800642c:	d19d      	bne.n	800636a <HAL_SPI_TransmitReceive+0x130>
 800642e:	e080      	b.n	8006532 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d002      	beq.n	800643e <HAL_SPI_TransmitReceive+0x204>
 8006438:	8b7b      	ldrh	r3, [r7, #26]
 800643a:	2b01      	cmp	r3, #1
 800643c:	d16f      	bne.n	800651e <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	330c      	adds	r3, #12
 8006448:	7812      	ldrb	r2, [r2, #0]
 800644a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006450:	1c5a      	adds	r2, r3, #1
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800645a:	b29b      	uxth	r3, r3
 800645c:	3b01      	subs	r3, #1
 800645e:	b29a      	uxth	r2, r3
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006464:	e05b      	b.n	800651e <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	689b      	ldr	r3, [r3, #8]
 800646c:	f003 0302 	and.w	r3, r3, #2
 8006470:	2b02      	cmp	r3, #2
 8006472:	d11c      	bne.n	80064ae <HAL_SPI_TransmitReceive+0x274>
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006478:	b29b      	uxth	r3, r3
 800647a:	2b00      	cmp	r3, #0
 800647c:	d017      	beq.n	80064ae <HAL_SPI_TransmitReceive+0x274>
 800647e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006480:	2b01      	cmp	r3, #1
 8006482:	d114      	bne.n	80064ae <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	330c      	adds	r3, #12
 800648e:	7812      	ldrb	r2, [r2, #0]
 8006490:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006496:	1c5a      	adds	r2, r3, #1
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	3b01      	subs	r3, #1
 80064a4:	b29a      	uxth	r2, r3
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80064aa:	2300      	movs	r3, #0
 80064ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	f003 0301 	and.w	r3, r3, #1
 80064b8:	2b01      	cmp	r3, #1
 80064ba:	d119      	bne.n	80064f0 <HAL_SPI_TransmitReceive+0x2b6>
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d014      	beq.n	80064f0 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	68da      	ldr	r2, [r3, #12]
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064d0:	b2d2      	uxtb	r2, r2
 80064d2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064d8:	1c5a      	adds	r2, r3, #1
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	3b01      	subs	r3, #1
 80064e6:	b29a      	uxth	r2, r3
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80064ec:	2301      	movs	r3, #1
 80064ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80064f0:	f7fc fd48 	bl	8002f84 <HAL_GetTick>
 80064f4:	4602      	mov	r2, r0
 80064f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f8:	1ad3      	subs	r3, r2, r3
 80064fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80064fc:	429a      	cmp	r2, r3
 80064fe:	d803      	bhi.n	8006508 <HAL_SPI_TransmitReceive+0x2ce>
 8006500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006506:	d102      	bne.n	800650e <HAL_SPI_TransmitReceive+0x2d4>
 8006508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800650a:	2b00      	cmp	r3, #0
 800650c:	d107      	bne.n	800651e <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800650e:	2303      	movs	r3, #3
 8006510:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	2201      	movs	r2, #1
 8006518:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800651c:	e033      	b.n	8006586 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006522:	b29b      	uxth	r3, r3
 8006524:	2b00      	cmp	r3, #0
 8006526:	d19e      	bne.n	8006466 <HAL_SPI_TransmitReceive+0x22c>
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800652c:	b29b      	uxth	r3, r3
 800652e:	2b00      	cmp	r3, #0
 8006530:	d199      	bne.n	8006466 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006532:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006534:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006536:	68f8      	ldr	r0, [r7, #12]
 8006538:	f000 f90a 	bl	8006750 <SPI_EndRxTxTransaction>
 800653c:	4603      	mov	r3, r0
 800653e:	2b00      	cmp	r3, #0
 8006540:	d006      	beq.n	8006550 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2220      	movs	r2, #32
 800654c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800654e:	e01a      	b.n	8006586 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d10a      	bne.n	800656e <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006558:	2300      	movs	r3, #0
 800655a:	617b      	str	r3, [r7, #20]
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	68db      	ldr	r3, [r3, #12]
 8006562:	617b      	str	r3, [r7, #20]
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	617b      	str	r3, [r7, #20]
 800656c:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006572:	2b00      	cmp	r3, #0
 8006574:	d003      	beq.n	800657e <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800657c:	e003      	b.n	8006586 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	2201      	movs	r2, #1
 8006582:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2200      	movs	r2, #0
 800658a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800658e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006592:	4618      	mov	r0, r3
 8006594:	3730      	adds	r7, #48	; 0x30
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}
	...

0800659c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b088      	sub	sp, #32
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	60f8      	str	r0, [r7, #12]
 80065a4:	60b9      	str	r1, [r7, #8]
 80065a6:	603b      	str	r3, [r7, #0]
 80065a8:	4613      	mov	r3, r2
 80065aa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80065ac:	f7fc fcea 	bl	8002f84 <HAL_GetTick>
 80065b0:	4602      	mov	r2, r0
 80065b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b4:	1a9b      	subs	r3, r3, r2
 80065b6:	683a      	ldr	r2, [r7, #0]
 80065b8:	4413      	add	r3, r2
 80065ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80065bc:	f7fc fce2 	bl	8002f84 <HAL_GetTick>
 80065c0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80065c2:	4b39      	ldr	r3, [pc, #228]	; (80066a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	015b      	lsls	r3, r3, #5
 80065c8:	0d1b      	lsrs	r3, r3, #20
 80065ca:	69fa      	ldr	r2, [r7, #28]
 80065cc:	fb02 f303 	mul.w	r3, r2, r3
 80065d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80065d2:	e054      	b.n	800667e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065da:	d050      	beq.n	800667e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80065dc:	f7fc fcd2 	bl	8002f84 <HAL_GetTick>
 80065e0:	4602      	mov	r2, r0
 80065e2:	69bb      	ldr	r3, [r7, #24]
 80065e4:	1ad3      	subs	r3, r2, r3
 80065e6:	69fa      	ldr	r2, [r7, #28]
 80065e8:	429a      	cmp	r2, r3
 80065ea:	d902      	bls.n	80065f2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80065ec:	69fb      	ldr	r3, [r7, #28]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d13d      	bne.n	800666e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	685a      	ldr	r2, [r3, #4]
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006600:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800660a:	d111      	bne.n	8006630 <SPI_WaitFlagStateUntilTimeout+0x94>
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006614:	d004      	beq.n	8006620 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	689b      	ldr	r3, [r3, #8]
 800661a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800661e:	d107      	bne.n	8006630 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	681a      	ldr	r2, [r3, #0]
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800662e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006634:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006638:	d10f      	bne.n	800665a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	681a      	ldr	r2, [r3, #0]
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006648:	601a      	str	r2, [r3, #0]
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006658:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2201      	movs	r2, #1
 800665e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2200      	movs	r2, #0
 8006666:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800666a:	2303      	movs	r3, #3
 800666c:	e017      	b.n	800669e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d101      	bne.n	8006678 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006674:	2300      	movs	r3, #0
 8006676:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	3b01      	subs	r3, #1
 800667c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	689a      	ldr	r2, [r3, #8]
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	4013      	ands	r3, r2
 8006688:	68ba      	ldr	r2, [r7, #8]
 800668a:	429a      	cmp	r2, r3
 800668c:	bf0c      	ite	eq
 800668e:	2301      	moveq	r3, #1
 8006690:	2300      	movne	r3, #0
 8006692:	b2db      	uxtb	r3, r3
 8006694:	461a      	mov	r2, r3
 8006696:	79fb      	ldrb	r3, [r7, #7]
 8006698:	429a      	cmp	r2, r3
 800669a:	d19b      	bne.n	80065d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800669c:	2300      	movs	r3, #0
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3720      	adds	r7, #32
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}
 80066a6:	bf00      	nop
 80066a8:	20000048 	.word	0x20000048

080066ac <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b086      	sub	sp, #24
 80066b0:	af02      	add	r7, sp, #8
 80066b2:	60f8      	str	r0, [r7, #12]
 80066b4:	60b9      	str	r1, [r7, #8]
 80066b6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066c0:	d111      	bne.n	80066e6 <SPI_EndRxTransaction+0x3a>
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	689b      	ldr	r3, [r3, #8]
 80066c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066ca:	d004      	beq.n	80066d6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	689b      	ldr	r3, [r3, #8]
 80066d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066d4:	d107      	bne.n	80066e6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066e4:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066ee:	d117      	bne.n	8006720 <SPI_EndRxTransaction+0x74>
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	689b      	ldr	r3, [r3, #8]
 80066f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066f8:	d112      	bne.n	8006720 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	9300      	str	r3, [sp, #0]
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	2200      	movs	r2, #0
 8006702:	2101      	movs	r1, #1
 8006704:	68f8      	ldr	r0, [r7, #12]
 8006706:	f7ff ff49 	bl	800659c <SPI_WaitFlagStateUntilTimeout>
 800670a:	4603      	mov	r3, r0
 800670c:	2b00      	cmp	r3, #0
 800670e:	d01a      	beq.n	8006746 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006714:	f043 0220 	orr.w	r2, r3, #32
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800671c:	2303      	movs	r3, #3
 800671e:	e013      	b.n	8006748 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	9300      	str	r3, [sp, #0]
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	2200      	movs	r2, #0
 8006728:	2180      	movs	r1, #128	; 0x80
 800672a:	68f8      	ldr	r0, [r7, #12]
 800672c:	f7ff ff36 	bl	800659c <SPI_WaitFlagStateUntilTimeout>
 8006730:	4603      	mov	r3, r0
 8006732:	2b00      	cmp	r3, #0
 8006734:	d007      	beq.n	8006746 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800673a:	f043 0220 	orr.w	r2, r3, #32
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006742:	2303      	movs	r3, #3
 8006744:	e000      	b.n	8006748 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8006746:	2300      	movs	r3, #0
}
 8006748:	4618      	mov	r0, r3
 800674a:	3710      	adds	r7, #16
 800674c:	46bd      	mov	sp, r7
 800674e:	bd80      	pop	{r7, pc}

08006750 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b086      	sub	sp, #24
 8006754:	af02      	add	r7, sp, #8
 8006756:	60f8      	str	r0, [r7, #12]
 8006758:	60b9      	str	r1, [r7, #8]
 800675a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	9300      	str	r3, [sp, #0]
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	2200      	movs	r2, #0
 8006764:	2180      	movs	r1, #128	; 0x80
 8006766:	68f8      	ldr	r0, [r7, #12]
 8006768:	f7ff ff18 	bl	800659c <SPI_WaitFlagStateUntilTimeout>
 800676c:	4603      	mov	r3, r0
 800676e:	2b00      	cmp	r3, #0
 8006770:	d007      	beq.n	8006782 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006776:	f043 0220 	orr.w	r2, r3, #32
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800677e:	2303      	movs	r3, #3
 8006780:	e000      	b.n	8006784 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8006782:	2300      	movs	r3, #0
}
 8006784:	4618      	mov	r0, r3
 8006786:	3710      	adds	r7, #16
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}

0800678c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b082      	sub	sp, #8
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d101      	bne.n	800679e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800679a:	2301      	movs	r3, #1
 800679c:	e041      	b.n	8006822 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067a4:	b2db      	uxtb	r3, r3
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d106      	bne.n	80067b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2200      	movs	r2, #0
 80067ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f7fc fb4a 	bl	8002e4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2202      	movs	r2, #2
 80067bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681a      	ldr	r2, [r3, #0]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	3304      	adds	r3, #4
 80067c8:	4619      	mov	r1, r3
 80067ca:	4610      	mov	r0, r2
 80067cc:	f000 f82e 	bl	800682c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2201      	movs	r2, #1
 80067d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2201      	movs	r2, #1
 80067dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2201      	movs	r2, #1
 80067e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2201      	movs	r2, #1
 80067ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2201      	movs	r2, #1
 80067f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2201      	movs	r2, #1
 80067fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2201      	movs	r2, #1
 8006804:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2201      	movs	r2, #1
 800680c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2201      	movs	r2, #1
 8006814:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2201      	movs	r2, #1
 800681c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006820:	2300      	movs	r3, #0
}
 8006822:	4618      	mov	r0, r3
 8006824:	3708      	adds	r7, #8
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}
	...

0800682c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800682c:	b480      	push	{r7}
 800682e:	b085      	sub	sp, #20
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	4a2d      	ldr	r2, [pc, #180]	; (80068f4 <TIM_Base_SetConfig+0xc8>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d00f      	beq.n	8006864 <TIM_Base_SetConfig+0x38>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800684a:	d00b      	beq.n	8006864 <TIM_Base_SetConfig+0x38>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	4a2a      	ldr	r2, [pc, #168]	; (80068f8 <TIM_Base_SetConfig+0xcc>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d007      	beq.n	8006864 <TIM_Base_SetConfig+0x38>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	4a29      	ldr	r2, [pc, #164]	; (80068fc <TIM_Base_SetConfig+0xd0>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d003      	beq.n	8006864 <TIM_Base_SetConfig+0x38>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	4a28      	ldr	r2, [pc, #160]	; (8006900 <TIM_Base_SetConfig+0xd4>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d108      	bne.n	8006876 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800686a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	68fa      	ldr	r2, [r7, #12]
 8006872:	4313      	orrs	r3, r2
 8006874:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	4a1e      	ldr	r2, [pc, #120]	; (80068f4 <TIM_Base_SetConfig+0xc8>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d00f      	beq.n	800689e <TIM_Base_SetConfig+0x72>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006884:	d00b      	beq.n	800689e <TIM_Base_SetConfig+0x72>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	4a1b      	ldr	r2, [pc, #108]	; (80068f8 <TIM_Base_SetConfig+0xcc>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d007      	beq.n	800689e <TIM_Base_SetConfig+0x72>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	4a1a      	ldr	r2, [pc, #104]	; (80068fc <TIM_Base_SetConfig+0xd0>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d003      	beq.n	800689e <TIM_Base_SetConfig+0x72>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	4a19      	ldr	r2, [pc, #100]	; (8006900 <TIM_Base_SetConfig+0xd4>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d108      	bne.n	80068b0 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	68db      	ldr	r3, [r3, #12]
 80068aa:	68fa      	ldr	r2, [r7, #12]
 80068ac:	4313      	orrs	r3, r2
 80068ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	695b      	ldr	r3, [r3, #20]
 80068ba:	4313      	orrs	r3, r2
 80068bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	68fa      	ldr	r2, [r7, #12]
 80068c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	689a      	ldr	r2, [r3, #8]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	681a      	ldr	r2, [r3, #0]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	4a07      	ldr	r2, [pc, #28]	; (80068f4 <TIM_Base_SetConfig+0xc8>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d103      	bne.n	80068e4 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	691a      	ldr	r2, [r3, #16]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2201      	movs	r2, #1
 80068e8:	615a      	str	r2, [r3, #20]
}
 80068ea:	bf00      	nop
 80068ec:	3714      	adds	r7, #20
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bc80      	pop	{r7}
 80068f2:	4770      	bx	lr
 80068f4:	40012c00 	.word	0x40012c00
 80068f8:	40000400 	.word	0x40000400
 80068fc:	40000800 	.word	0x40000800
 8006900:	40000c00 	.word	0x40000c00

08006904 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006904:	b480      	push	{r7}
 8006906:	b085      	sub	sp, #20
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
 800690c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006914:	2b01      	cmp	r3, #1
 8006916:	d101      	bne.n	800691c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006918:	2302      	movs	r3, #2
 800691a:	e04b      	b.n	80069b4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2201      	movs	r2, #1
 8006920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2202      	movs	r2, #2
 8006928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	689b      	ldr	r3, [r3, #8]
 800693a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006942:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	68fa      	ldr	r2, [r7, #12]
 800694a:	4313      	orrs	r3, r2
 800694c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	68fa      	ldr	r2, [r7, #12]
 8006954:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a19      	ldr	r2, [pc, #100]	; (80069c0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d013      	beq.n	8006988 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006968:	d00e      	beq.n	8006988 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a15      	ldr	r2, [pc, #84]	; (80069c4 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d009      	beq.n	8006988 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a13      	ldr	r2, [pc, #76]	; (80069c8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d004      	beq.n	8006988 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a12      	ldr	r2, [pc, #72]	; (80069cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d10c      	bne.n	80069a2 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800698e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	68ba      	ldr	r2, [r7, #8]
 8006996:	4313      	orrs	r3, r2
 8006998:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	68ba      	ldr	r2, [r7, #8]
 80069a0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2201      	movs	r2, #1
 80069a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2200      	movs	r2, #0
 80069ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069b2:	2300      	movs	r3, #0
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3714      	adds	r7, #20
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bc80      	pop	{r7}
 80069bc:	4770      	bx	lr
 80069be:	bf00      	nop
 80069c0:	40012c00 	.word	0x40012c00
 80069c4:	40000400 	.word	0x40000400
 80069c8:	40000800 	.word	0x40000800
 80069cc:	40000c00 	.word	0x40000c00

080069d0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80069d0:	b084      	sub	sp, #16
 80069d2:	b580      	push	{r7, lr}
 80069d4:	b084      	sub	sp, #16
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	6078      	str	r0, [r7, #4]
 80069da:	f107 001c 	add.w	r0, r7, #28
 80069de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	68db      	ldr	r3, [r3, #12]
 80069e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f001 f9de 	bl	8007db0 <USB_CoreReset>
 80069f4:	4603      	mov	r3, r0
 80069f6:	73fb      	strb	r3, [r7, #15]

  /* Activate the USB Transceiver */
  USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069fc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	639a      	str	r2, [r3, #56]	; 0x38

  return ret;
 8006a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3710      	adds	r7, #16
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a10:	b004      	add	sp, #16
 8006a12:	4770      	bx	lr

08006a14 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b087      	sub	sp, #28
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	60f8      	str	r0, [r7, #12]
 8006a1c:	60b9      	str	r1, [r7, #8]
 8006a1e:	4613      	mov	r3, r2
 8006a20:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006a22:	79fb      	ldrb	r3, [r7, #7]
 8006a24:	2b02      	cmp	r3, #2
 8006a26:	d165      	bne.n	8006af4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	4a3e      	ldr	r2, [pc, #248]	; (8006b24 <USB_SetTurnaroundTime+0x110>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d906      	bls.n	8006a3e <USB_SetTurnaroundTime+0x2a>
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	4a3d      	ldr	r2, [pc, #244]	; (8006b28 <USB_SetTurnaroundTime+0x114>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d202      	bcs.n	8006a3e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006a38:	230f      	movs	r3, #15
 8006a3a:	617b      	str	r3, [r7, #20]
 8006a3c:	e05c      	b.n	8006af8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	4a39      	ldr	r2, [pc, #228]	; (8006b28 <USB_SetTurnaroundTime+0x114>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d306      	bcc.n	8006a54 <USB_SetTurnaroundTime+0x40>
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	4a38      	ldr	r2, [pc, #224]	; (8006b2c <USB_SetTurnaroundTime+0x118>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d202      	bcs.n	8006a54 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006a4e:	230e      	movs	r3, #14
 8006a50:	617b      	str	r3, [r7, #20]
 8006a52:	e051      	b.n	8006af8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	4a35      	ldr	r2, [pc, #212]	; (8006b2c <USB_SetTurnaroundTime+0x118>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d306      	bcc.n	8006a6a <USB_SetTurnaroundTime+0x56>
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	4a34      	ldr	r2, [pc, #208]	; (8006b30 <USB_SetTurnaroundTime+0x11c>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d202      	bcs.n	8006a6a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006a64:	230d      	movs	r3, #13
 8006a66:	617b      	str	r3, [r7, #20]
 8006a68:	e046      	b.n	8006af8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	4a30      	ldr	r2, [pc, #192]	; (8006b30 <USB_SetTurnaroundTime+0x11c>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d306      	bcc.n	8006a80 <USB_SetTurnaroundTime+0x6c>
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	4a2f      	ldr	r2, [pc, #188]	; (8006b34 <USB_SetTurnaroundTime+0x120>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d802      	bhi.n	8006a80 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006a7a:	230c      	movs	r3, #12
 8006a7c:	617b      	str	r3, [r7, #20]
 8006a7e:	e03b      	b.n	8006af8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	4a2c      	ldr	r2, [pc, #176]	; (8006b34 <USB_SetTurnaroundTime+0x120>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d906      	bls.n	8006a96 <USB_SetTurnaroundTime+0x82>
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	4a2b      	ldr	r2, [pc, #172]	; (8006b38 <USB_SetTurnaroundTime+0x124>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d802      	bhi.n	8006a96 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006a90:	230b      	movs	r3, #11
 8006a92:	617b      	str	r3, [r7, #20]
 8006a94:	e030      	b.n	8006af8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	4a27      	ldr	r2, [pc, #156]	; (8006b38 <USB_SetTurnaroundTime+0x124>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d906      	bls.n	8006aac <USB_SetTurnaroundTime+0x98>
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	4a26      	ldr	r2, [pc, #152]	; (8006b3c <USB_SetTurnaroundTime+0x128>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d802      	bhi.n	8006aac <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006aa6:	230a      	movs	r3, #10
 8006aa8:	617b      	str	r3, [r7, #20]
 8006aaa:	e025      	b.n	8006af8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	4a23      	ldr	r2, [pc, #140]	; (8006b3c <USB_SetTurnaroundTime+0x128>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d906      	bls.n	8006ac2 <USB_SetTurnaroundTime+0xae>
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	4a22      	ldr	r2, [pc, #136]	; (8006b40 <USB_SetTurnaroundTime+0x12c>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d202      	bcs.n	8006ac2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006abc:	2309      	movs	r3, #9
 8006abe:	617b      	str	r3, [r7, #20]
 8006ac0:	e01a      	b.n	8006af8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	4a1e      	ldr	r2, [pc, #120]	; (8006b40 <USB_SetTurnaroundTime+0x12c>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d306      	bcc.n	8006ad8 <USB_SetTurnaroundTime+0xc4>
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	4a1d      	ldr	r2, [pc, #116]	; (8006b44 <USB_SetTurnaroundTime+0x130>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d802      	bhi.n	8006ad8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006ad2:	2308      	movs	r3, #8
 8006ad4:	617b      	str	r3, [r7, #20]
 8006ad6:	e00f      	b.n	8006af8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	4a1a      	ldr	r2, [pc, #104]	; (8006b44 <USB_SetTurnaroundTime+0x130>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d906      	bls.n	8006aee <USB_SetTurnaroundTime+0xda>
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	4a19      	ldr	r2, [pc, #100]	; (8006b48 <USB_SetTurnaroundTime+0x134>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d202      	bcs.n	8006aee <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006ae8:	2307      	movs	r3, #7
 8006aea:	617b      	str	r3, [r7, #20]
 8006aec:	e004      	b.n	8006af8 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006aee:	2306      	movs	r3, #6
 8006af0:	617b      	str	r3, [r7, #20]
 8006af2:	e001      	b.n	8006af8 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006af4:	2309      	movs	r3, #9
 8006af6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	68db      	ldr	r3, [r3, #12]
 8006afc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	68da      	ldr	r2, [r3, #12]
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	029b      	lsls	r3, r3, #10
 8006b0c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006b10:	431a      	orrs	r2, r3
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006b16:	2300      	movs	r3, #0
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	371c      	adds	r7, #28
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bc80      	pop	{r7}
 8006b20:	4770      	bx	lr
 8006b22:	bf00      	nop
 8006b24:	00d8acbf 	.word	0x00d8acbf
 8006b28:	00e4e1c0 	.word	0x00e4e1c0
 8006b2c:	00f42400 	.word	0x00f42400
 8006b30:	01067380 	.word	0x01067380
 8006b34:	011a499f 	.word	0x011a499f
 8006b38:	01312cff 	.word	0x01312cff
 8006b3c:	014ca43f 	.word	0x014ca43f
 8006b40:	016e3600 	.word	0x016e3600
 8006b44:	01a6ab1f 	.word	0x01a6ab1f
 8006b48:	01e84800 	.word	0x01e84800

08006b4c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b083      	sub	sp, #12
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	689b      	ldr	r3, [r3, #8]
 8006b58:	f043 0201 	orr.w	r2, r3, #1
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006b60:	2300      	movs	r3, #0
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	370c      	adds	r7, #12
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bc80      	pop	{r7}
 8006b6a:	4770      	bx	lr

08006b6c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b083      	sub	sp, #12
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	689b      	ldr	r3, [r3, #8]
 8006b78:	f023 0201 	bic.w	r2, r3, #1
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006b80:	2300      	movs	r3, #0
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	370c      	adds	r7, #12
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bc80      	pop	{r7}
 8006b8a:	4770      	bx	lr

08006b8c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b084      	sub	sp, #16
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
 8006b94:	460b      	mov	r3, r1
 8006b96:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006b98:	2300      	movs	r3, #0
 8006b9a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	68db      	ldr	r3, [r3, #12]
 8006ba0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006ba8:	78fb      	ldrb	r3, [r7, #3]
 8006baa:	2b01      	cmp	r3, #1
 8006bac:	d115      	bne.n	8006bda <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	68db      	ldr	r3, [r3, #12]
 8006bb2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006bba:	2001      	movs	r0, #1
 8006bbc:	f7fc f9ec 	bl	8002f98 <HAL_Delay>
      ms++;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	3301      	adds	r3, #1
 8006bc4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f001 f87a 	bl	8007cc0 <USB_GetMode>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	2b01      	cmp	r3, #1
 8006bd0:	d01e      	beq.n	8006c10 <USB_SetCurrentMode+0x84>
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2b31      	cmp	r3, #49	; 0x31
 8006bd6:	d9f0      	bls.n	8006bba <USB_SetCurrentMode+0x2e>
 8006bd8:	e01a      	b.n	8006c10 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006bda:	78fb      	ldrb	r3, [r7, #3]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d115      	bne.n	8006c0c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	68db      	ldr	r3, [r3, #12]
 8006be4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006bec:	2001      	movs	r0, #1
 8006bee:	f7fc f9d3 	bl	8002f98 <HAL_Delay>
      ms++;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	3301      	adds	r3, #1
 8006bf6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f001 f861 	bl	8007cc0 <USB_GetMode>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d005      	beq.n	8006c10 <USB_SetCurrentMode+0x84>
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2b31      	cmp	r3, #49	; 0x31
 8006c08:	d9f0      	bls.n	8006bec <USB_SetCurrentMode+0x60>
 8006c0a:	e001      	b.n	8006c10 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	e005      	b.n	8006c1c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2b32      	cmp	r3, #50	; 0x32
 8006c14:	d101      	bne.n	8006c1a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006c16:	2301      	movs	r3, #1
 8006c18:	e000      	b.n	8006c1c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006c1a:	2300      	movs	r3, #0
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3710      	adds	r7, #16
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}

08006c24 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006c24:	b084      	sub	sp, #16
 8006c26:	b580      	push	{r7, lr}
 8006c28:	b086      	sub	sp, #24
 8006c2a:	af00      	add	r7, sp, #0
 8006c2c:	6078      	str	r0, [r7, #4]
 8006c2e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006c32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006c36:	2300      	movs	r3, #0
 8006c38:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006c3e:	2300      	movs	r3, #0
 8006c40:	613b      	str	r3, [r7, #16]
 8006c42:	e009      	b.n	8006c58 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006c44:	687a      	ldr	r2, [r7, #4]
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	3340      	adds	r3, #64	; 0x40
 8006c4a:	009b      	lsls	r3, r3, #2
 8006c4c:	4413      	add	r3, r2
 8006c4e:	2200      	movs	r2, #0
 8006c50:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	3301      	adds	r3, #1
 8006c56:	613b      	str	r3, [r7, #16]
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	2b0e      	cmp	r3, #14
 8006c5c:	d9f2      	bls.n	8006c44 <USB_DevInit+0x20>
  }

  /* Enable HW VBUS sensing */
  USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c62:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	639a      	str	r2, [r3, #56]	; 0x38

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006c70:	461a      	mov	r2, r3
 8006c72:	2300      	movs	r3, #0
 8006c74:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006c76:	2103      	movs	r1, #3
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f000 f959 	bl	8006f30 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006c7e:	2110      	movs	r1, #16
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f000 f8f1 	bl	8006e68 <USB_FlushTxFifo>
 8006c86:	4603      	mov	r3, r0
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d001      	beq.n	8006c90 <USB_DevInit+0x6c>
  {
    ret = HAL_ERROR;
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f000 f91d 	bl	8006ed0 <USB_FlushRxFifo>
 8006c96:	4603      	mov	r3, r0
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d001      	beq.n	8006ca0 <USB_DevInit+0x7c>
  {
    ret = HAL_ERROR;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ca6:	461a      	mov	r2, r3
 8006ca8:	2300      	movs	r3, #0
 8006caa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cb2:	461a      	mov	r2, r3
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cbe:	461a      	mov	r2, r3
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	613b      	str	r3, [r7, #16]
 8006cc8:	e043      	b.n	8006d52 <USB_DevInit+0x12e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	015a      	lsls	r2, r3, #5
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	4413      	add	r3, r2
 8006cd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006cdc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ce0:	d118      	bne.n	8006d14 <USB_DevInit+0xf0>
    {
      if (i == 0U)
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d10a      	bne.n	8006cfe <USB_DevInit+0xda>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	015a      	lsls	r2, r3, #5
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	4413      	add	r3, r2
 8006cf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cf4:	461a      	mov	r2, r3
 8006cf6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006cfa:	6013      	str	r3, [r2, #0]
 8006cfc:	e013      	b.n	8006d26 <USB_DevInit+0x102>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	015a      	lsls	r2, r3, #5
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	4413      	add	r3, r2
 8006d06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d0a:	461a      	mov	r2, r3
 8006d0c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006d10:	6013      	str	r3, [r2, #0]
 8006d12:	e008      	b.n	8006d26 <USB_DevInit+0x102>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	015a      	lsls	r2, r3, #5
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	4413      	add	r3, r2
 8006d1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d20:	461a      	mov	r2, r3
 8006d22:	2300      	movs	r3, #0
 8006d24:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	015a      	lsls	r2, r3, #5
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	4413      	add	r3, r2
 8006d2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d32:	461a      	mov	r2, r3
 8006d34:	2300      	movs	r3, #0
 8006d36:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	015a      	lsls	r2, r3, #5
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	4413      	add	r3, r2
 8006d40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d44:	461a      	mov	r2, r3
 8006d46:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006d4a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	3301      	adds	r3, #1
 8006d50:	613b      	str	r3, [r7, #16]
 8006d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d54:	693a      	ldr	r2, [r7, #16]
 8006d56:	429a      	cmp	r2, r3
 8006d58:	d3b7      	bcc.n	8006cca <USB_DevInit+0xa6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	613b      	str	r3, [r7, #16]
 8006d5e:	e043      	b.n	8006de8 <USB_DevInit+0x1c4>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	015a      	lsls	r2, r3, #5
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	4413      	add	r3, r2
 8006d68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d76:	d118      	bne.n	8006daa <USB_DevInit+0x186>
    {
      if (i == 0U)
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d10a      	bne.n	8006d94 <USB_DevInit+0x170>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	015a      	lsls	r2, r3, #5
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	4413      	add	r3, r2
 8006d86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d8a:	461a      	mov	r2, r3
 8006d8c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006d90:	6013      	str	r3, [r2, #0]
 8006d92:	e013      	b.n	8006dbc <USB_DevInit+0x198>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	015a      	lsls	r2, r3, #5
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	4413      	add	r3, r2
 8006d9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006da0:	461a      	mov	r2, r3
 8006da2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006da6:	6013      	str	r3, [r2, #0]
 8006da8:	e008      	b.n	8006dbc <USB_DevInit+0x198>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	015a      	lsls	r2, r3, #5
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	4413      	add	r3, r2
 8006db2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006db6:	461a      	mov	r2, r3
 8006db8:	2300      	movs	r3, #0
 8006dba:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	015a      	lsls	r2, r3, #5
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	4413      	add	r3, r2
 8006dc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dc8:	461a      	mov	r2, r3
 8006dca:	2300      	movs	r3, #0
 8006dcc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	015a      	lsls	r2, r3, #5
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	4413      	add	r3, r2
 8006dd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dda:	461a      	mov	r2, r3
 8006ddc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006de0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	3301      	adds	r3, #1
 8006de6:	613b      	str	r3, [r7, #16]
 8006de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dea:	693a      	ldr	r2, [r7, #16]
 8006dec:	429a      	cmp	r2, r3
 8006dee:	d3b7      	bcc.n	8006d60 <USB_DevInit+0x13c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006df6:	691b      	ldr	r3, [r3, #16]
 8006df8:	68fa      	ldr	r2, [r7, #12]
 8006dfa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006dfe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e02:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2200      	movs	r2, #0
 8006e08:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006e10:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	699b      	ldr	r3, [r3, #24]
 8006e16:	f043 0210 	orr.w	r2, r3, #16
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	699a      	ldr	r2, [r3, #24]
 8006e22:	4b10      	ldr	r3, [pc, #64]	; (8006e64 <USB_DevInit+0x240>)
 8006e24:	4313      	orrs	r3, r2
 8006e26:	687a      	ldr	r2, [r7, #4]
 8006e28:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006e2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d005      	beq.n	8006e3c <USB_DevInit+0x218>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	699b      	ldr	r3, [r3, #24]
 8006e34:	f043 0208 	orr.w	r2, r3, #8
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006e3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e3e:	2b01      	cmp	r3, #1
 8006e40:	d107      	bne.n	8006e52 <USB_DevInit+0x22e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	699b      	ldr	r3, [r3, #24]
 8006e46:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e4a:	f043 0304 	orr.w	r3, r3, #4
 8006e4e:	687a      	ldr	r2, [r7, #4]
 8006e50:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006e52:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	3718      	adds	r7, #24
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006e5e:	b004      	add	sp, #16
 8006e60:	4770      	bx	lr
 8006e62:	bf00      	nop
 8006e64:	803c3800 	.word	0x803c3800

08006e68 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b085      	sub	sp, #20
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
 8006e70:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006e72:	2300      	movs	r3, #0
 8006e74:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	3301      	adds	r3, #1
 8006e7a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	4a13      	ldr	r2, [pc, #76]	; (8006ecc <USB_FlushTxFifo+0x64>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d901      	bls.n	8006e88 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006e84:	2303      	movs	r3, #3
 8006e86:	e01b      	b.n	8006ec0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	691b      	ldr	r3, [r3, #16]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	daf2      	bge.n	8006e76 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006e90:	2300      	movs	r3, #0
 8006e92:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	019b      	lsls	r3, r3, #6
 8006e98:	f043 0220 	orr.w	r2, r3, #32
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	3301      	adds	r3, #1
 8006ea4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	4a08      	ldr	r2, [pc, #32]	; (8006ecc <USB_FlushTxFifo+0x64>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d901      	bls.n	8006eb2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006eae:	2303      	movs	r3, #3
 8006eb0:	e006      	b.n	8006ec0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	691b      	ldr	r3, [r3, #16]
 8006eb6:	f003 0320 	and.w	r3, r3, #32
 8006eba:	2b20      	cmp	r3, #32
 8006ebc:	d0f0      	beq.n	8006ea0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006ebe:	2300      	movs	r3, #0
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3714      	adds	r7, #20
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bc80      	pop	{r7}
 8006ec8:	4770      	bx	lr
 8006eca:	bf00      	nop
 8006ecc:	00030d40 	.word	0x00030d40

08006ed0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b085      	sub	sp, #20
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006ed8:	2300      	movs	r3, #0
 8006eda:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	3301      	adds	r3, #1
 8006ee0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	4a11      	ldr	r2, [pc, #68]	; (8006f2c <USB_FlushRxFifo+0x5c>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d901      	bls.n	8006eee <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006eea:	2303      	movs	r3, #3
 8006eec:	e018      	b.n	8006f20 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	691b      	ldr	r3, [r3, #16]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	daf2      	bge.n	8006edc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2210      	movs	r2, #16
 8006efe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	3301      	adds	r3, #1
 8006f04:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	4a08      	ldr	r2, [pc, #32]	; (8006f2c <USB_FlushRxFifo+0x5c>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d901      	bls.n	8006f12 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006f0e:	2303      	movs	r3, #3
 8006f10:	e006      	b.n	8006f20 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	691b      	ldr	r3, [r3, #16]
 8006f16:	f003 0310 	and.w	r3, r3, #16
 8006f1a:	2b10      	cmp	r3, #16
 8006f1c:	d0f0      	beq.n	8006f00 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006f1e:	2300      	movs	r3, #0
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	3714      	adds	r7, #20
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bc80      	pop	{r7}
 8006f28:	4770      	bx	lr
 8006f2a:	bf00      	nop
 8006f2c:	00030d40 	.word	0x00030d40

08006f30 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b085      	sub	sp, #20
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
 8006f38:	460b      	mov	r3, r1
 8006f3a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f46:	681a      	ldr	r2, [r3, #0]
 8006f48:	78fb      	ldrb	r3, [r7, #3]
 8006f4a:	68f9      	ldr	r1, [r7, #12]
 8006f4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f50:	4313      	orrs	r3, r2
 8006f52:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006f54:	2300      	movs	r3, #0
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3714      	adds	r7, #20
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bc80      	pop	{r7}
 8006f5e:	4770      	bx	lr

08006f60 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b087      	sub	sp, #28
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f72:	689b      	ldr	r3, [r3, #8]
 8006f74:	f003 0306 	and.w	r3, r3, #6
 8006f78:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2b02      	cmp	r3, #2
 8006f7e:	d002      	beq.n	8006f86 <USB_GetDevSpeed+0x26>
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2b06      	cmp	r3, #6
 8006f84:	d102      	bne.n	8006f8c <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006f86:	2302      	movs	r3, #2
 8006f88:	75fb      	strb	r3, [r7, #23]
 8006f8a:	e001      	b.n	8006f90 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8006f8c:	230f      	movs	r3, #15
 8006f8e:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006f90:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	371c      	adds	r7, #28
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bc80      	pop	{r7}
 8006f9a:	4770      	bx	lr

08006f9c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b085      	sub	sp, #20
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	781b      	ldrb	r3, [r3, #0]
 8006fae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	785b      	ldrb	r3, [r3, #1]
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d13a      	bne.n	800702e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fbe:	69da      	ldr	r2, [r3, #28]
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	781b      	ldrb	r3, [r3, #0]
 8006fc4:	f003 030f 	and.w	r3, r3, #15
 8006fc8:	2101      	movs	r1, #1
 8006fca:	fa01 f303 	lsl.w	r3, r1, r3
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	68f9      	ldr	r1, [r7, #12]
 8006fd2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006fd6:	4313      	orrs	r3, r2
 8006fd8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	015a      	lsls	r2, r3, #5
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	4413      	add	r3, r2
 8006fe2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d155      	bne.n	800709c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	015a      	lsls	r2, r3, #5
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	4413      	add	r3, r2
 8006ff8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ffc:	681a      	ldr	r2, [r3, #0]
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	689b      	ldr	r3, [r3, #8]
 8007002:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	791b      	ldrb	r3, [r3, #4]
 800700a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800700c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	059b      	lsls	r3, r3, #22
 8007012:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007014:	4313      	orrs	r3, r2
 8007016:	68ba      	ldr	r2, [r7, #8]
 8007018:	0151      	lsls	r1, r2, #5
 800701a:	68fa      	ldr	r2, [r7, #12]
 800701c:	440a      	add	r2, r1
 800701e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007022:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007026:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800702a:	6013      	str	r3, [r2, #0]
 800702c:	e036      	b.n	800709c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007034:	69da      	ldr	r2, [r3, #28]
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	781b      	ldrb	r3, [r3, #0]
 800703a:	f003 030f 	and.w	r3, r3, #15
 800703e:	2101      	movs	r1, #1
 8007040:	fa01 f303 	lsl.w	r3, r1, r3
 8007044:	041b      	lsls	r3, r3, #16
 8007046:	68f9      	ldr	r1, [r7, #12]
 8007048:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800704c:	4313      	orrs	r3, r2
 800704e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	015a      	lsls	r2, r3, #5
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	4413      	add	r3, r2
 8007058:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007062:	2b00      	cmp	r3, #0
 8007064:	d11a      	bne.n	800709c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	015a      	lsls	r2, r3, #5
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	4413      	add	r3, r2
 800706e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007072:	681a      	ldr	r2, [r3, #0]
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	689b      	ldr	r3, [r3, #8]
 8007078:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	791b      	ldrb	r3, [r3, #4]
 8007080:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007082:	430b      	orrs	r3, r1
 8007084:	4313      	orrs	r3, r2
 8007086:	68ba      	ldr	r2, [r7, #8]
 8007088:	0151      	lsls	r1, r2, #5
 800708a:	68fa      	ldr	r2, [r7, #12]
 800708c:	440a      	add	r2, r1
 800708e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007092:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007096:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800709a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800709c:	2300      	movs	r3, #0
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3714      	adds	r7, #20
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bc80      	pop	{r7}
 80070a6:	4770      	bx	lr

080070a8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b085      	sub	sp, #20
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
 80070b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	781b      	ldrb	r3, [r3, #0]
 80070ba:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	785b      	ldrb	r3, [r3, #1]
 80070c0:	2b01      	cmp	r3, #1
 80070c2:	d161      	bne.n	8007188 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	015a      	lsls	r2, r3, #5
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	4413      	add	r3, r2
 80070cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80070d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070da:	d11f      	bne.n	800711c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	015a      	lsls	r2, r3, #5
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	4413      	add	r3, r2
 80070e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	68ba      	ldr	r2, [r7, #8]
 80070ec:	0151      	lsls	r1, r2, #5
 80070ee:	68fa      	ldr	r2, [r7, #12]
 80070f0:	440a      	add	r2, r1
 80070f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070f6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80070fa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	015a      	lsls	r2, r3, #5
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	4413      	add	r3, r2
 8007104:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	68ba      	ldr	r2, [r7, #8]
 800710c:	0151      	lsls	r1, r2, #5
 800710e:	68fa      	ldr	r2, [r7, #12]
 8007110:	440a      	add	r2, r1
 8007112:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007116:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800711a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007122:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	781b      	ldrb	r3, [r3, #0]
 8007128:	f003 030f 	and.w	r3, r3, #15
 800712c:	2101      	movs	r1, #1
 800712e:	fa01 f303 	lsl.w	r3, r1, r3
 8007132:	b29b      	uxth	r3, r3
 8007134:	43db      	mvns	r3, r3
 8007136:	68f9      	ldr	r1, [r7, #12]
 8007138:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800713c:	4013      	ands	r3, r2
 800713e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007146:	69da      	ldr	r2, [r3, #28]
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	781b      	ldrb	r3, [r3, #0]
 800714c:	f003 030f 	and.w	r3, r3, #15
 8007150:	2101      	movs	r1, #1
 8007152:	fa01 f303 	lsl.w	r3, r1, r3
 8007156:	b29b      	uxth	r3, r3
 8007158:	43db      	mvns	r3, r3
 800715a:	68f9      	ldr	r1, [r7, #12]
 800715c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007160:	4013      	ands	r3, r2
 8007162:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	015a      	lsls	r2, r3, #5
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	4413      	add	r3, r2
 800716c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007170:	681a      	ldr	r2, [r3, #0]
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	0159      	lsls	r1, r3, #5
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	440b      	add	r3, r1
 800717a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800717e:	4619      	mov	r1, r3
 8007180:	4b35      	ldr	r3, [pc, #212]	; (8007258 <USB_DeactivateEndpoint+0x1b0>)
 8007182:	4013      	ands	r3, r2
 8007184:	600b      	str	r3, [r1, #0]
 8007186:	e060      	b.n	800724a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	015a      	lsls	r2, r3, #5
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	4413      	add	r3, r2
 8007190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800719a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800719e:	d11f      	bne.n	80071e0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	015a      	lsls	r2, r3, #5
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	4413      	add	r3, r2
 80071a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	68ba      	ldr	r2, [r7, #8]
 80071b0:	0151      	lsls	r1, r2, #5
 80071b2:	68fa      	ldr	r2, [r7, #12]
 80071b4:	440a      	add	r2, r1
 80071b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071ba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80071be:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	015a      	lsls	r2, r3, #5
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	4413      	add	r3, r2
 80071c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	68ba      	ldr	r2, [r7, #8]
 80071d0:	0151      	lsls	r1, r2, #5
 80071d2:	68fa      	ldr	r2, [r7, #12]
 80071d4:	440a      	add	r2, r1
 80071d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80071de:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	781b      	ldrb	r3, [r3, #0]
 80071ec:	f003 030f 	and.w	r3, r3, #15
 80071f0:	2101      	movs	r1, #1
 80071f2:	fa01 f303 	lsl.w	r3, r1, r3
 80071f6:	041b      	lsls	r3, r3, #16
 80071f8:	43db      	mvns	r3, r3
 80071fa:	68f9      	ldr	r1, [r7, #12]
 80071fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007200:	4013      	ands	r3, r2
 8007202:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800720a:	69da      	ldr	r2, [r3, #28]
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	781b      	ldrb	r3, [r3, #0]
 8007210:	f003 030f 	and.w	r3, r3, #15
 8007214:	2101      	movs	r1, #1
 8007216:	fa01 f303 	lsl.w	r3, r1, r3
 800721a:	041b      	lsls	r3, r3, #16
 800721c:	43db      	mvns	r3, r3
 800721e:	68f9      	ldr	r1, [r7, #12]
 8007220:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007224:	4013      	ands	r3, r2
 8007226:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	015a      	lsls	r2, r3, #5
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	4413      	add	r3, r2
 8007230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007234:	681a      	ldr	r2, [r3, #0]
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	0159      	lsls	r1, r3, #5
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	440b      	add	r3, r1
 800723e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007242:	4619      	mov	r1, r3
 8007244:	4b05      	ldr	r3, [pc, #20]	; (800725c <USB_DeactivateEndpoint+0x1b4>)
 8007246:	4013      	ands	r3, r2
 8007248:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800724a:	2300      	movs	r3, #0
}
 800724c:	4618      	mov	r0, r3
 800724e:	3714      	adds	r7, #20
 8007250:	46bd      	mov	sp, r7
 8007252:	bc80      	pop	{r7}
 8007254:	4770      	bx	lr
 8007256:	bf00      	nop
 8007258:	ec337800 	.word	0xec337800
 800725c:	eff37800 	.word	0xeff37800

08007260 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b086      	sub	sp, #24
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	781b      	ldrb	r3, [r3, #0]
 8007272:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	785b      	ldrb	r3, [r3, #1]
 8007278:	2b01      	cmp	r3, #1
 800727a:	f040 8128 	bne.w	80074ce <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	691b      	ldr	r3, [r3, #16]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d132      	bne.n	80072ec <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	015a      	lsls	r2, r3, #5
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	4413      	add	r3, r2
 800728e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007292:	691b      	ldr	r3, [r3, #16]
 8007294:	693a      	ldr	r2, [r7, #16]
 8007296:	0151      	lsls	r1, r2, #5
 8007298:	697a      	ldr	r2, [r7, #20]
 800729a:	440a      	add	r2, r1
 800729c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072a0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80072a4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80072a8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	015a      	lsls	r2, r3, #5
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	4413      	add	r3, r2
 80072b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072b6:	691b      	ldr	r3, [r3, #16]
 80072b8:	693a      	ldr	r2, [r7, #16]
 80072ba:	0151      	lsls	r1, r2, #5
 80072bc:	697a      	ldr	r2, [r7, #20]
 80072be:	440a      	add	r2, r1
 80072c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80072c8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	015a      	lsls	r2, r3, #5
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	4413      	add	r3, r2
 80072d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072d6:	691b      	ldr	r3, [r3, #16]
 80072d8:	693a      	ldr	r2, [r7, #16]
 80072da:	0151      	lsls	r1, r2, #5
 80072dc:	697a      	ldr	r2, [r7, #20]
 80072de:	440a      	add	r2, r1
 80072e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072e4:	0cdb      	lsrs	r3, r3, #19
 80072e6:	04db      	lsls	r3, r3, #19
 80072e8:	6113      	str	r3, [r2, #16]
 80072ea:	e092      	b.n	8007412 <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	015a      	lsls	r2, r3, #5
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	4413      	add	r3, r2
 80072f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072f8:	691b      	ldr	r3, [r3, #16]
 80072fa:	693a      	ldr	r2, [r7, #16]
 80072fc:	0151      	lsls	r1, r2, #5
 80072fe:	697a      	ldr	r2, [r7, #20]
 8007300:	440a      	add	r2, r1
 8007302:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007306:	0cdb      	lsrs	r3, r3, #19
 8007308:	04db      	lsls	r3, r3, #19
 800730a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	015a      	lsls	r2, r3, #5
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	4413      	add	r3, r2
 8007314:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007318:	691b      	ldr	r3, [r3, #16]
 800731a:	693a      	ldr	r2, [r7, #16]
 800731c:	0151      	lsls	r1, r2, #5
 800731e:	697a      	ldr	r2, [r7, #20]
 8007320:	440a      	add	r2, r1
 8007322:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007326:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800732a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800732e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8007330:	693b      	ldr	r3, [r7, #16]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d11a      	bne.n	800736c <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	691a      	ldr	r2, [r3, #16]
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	689b      	ldr	r3, [r3, #8]
 800733e:	429a      	cmp	r2, r3
 8007340:	d903      	bls.n	800734a <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	689a      	ldr	r2, [r3, #8]
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	015a      	lsls	r2, r3, #5
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	4413      	add	r3, r2
 8007352:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007356:	691b      	ldr	r3, [r3, #16]
 8007358:	693a      	ldr	r2, [r7, #16]
 800735a:	0151      	lsls	r1, r2, #5
 800735c:	697a      	ldr	r2, [r7, #20]
 800735e:	440a      	add	r2, r1
 8007360:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007364:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007368:	6113      	str	r3, [r2, #16]
 800736a:	e01b      	b.n	80073a4 <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	015a      	lsls	r2, r3, #5
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	4413      	add	r3, r2
 8007374:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007378:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	6919      	ldr	r1, [r3, #16]
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	689b      	ldr	r3, [r3, #8]
 8007382:	440b      	add	r3, r1
 8007384:	1e59      	subs	r1, r3, #1
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	689b      	ldr	r3, [r3, #8]
 800738a:	fbb1 f3f3 	udiv	r3, r1, r3
 800738e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007390:	4b8d      	ldr	r3, [pc, #564]	; (80075c8 <USB_EPStartXfer+0x368>)
 8007392:	400b      	ands	r3, r1
 8007394:	6939      	ldr	r1, [r7, #16]
 8007396:	0148      	lsls	r0, r1, #5
 8007398:	6979      	ldr	r1, [r7, #20]
 800739a:	4401      	add	r1, r0
 800739c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80073a0:	4313      	orrs	r3, r2
 80073a2:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	015a      	lsls	r2, r3, #5
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	4413      	add	r3, r2
 80073ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073b0:	691a      	ldr	r2, [r3, #16]
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	691b      	ldr	r3, [r3, #16]
 80073b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80073ba:	6939      	ldr	r1, [r7, #16]
 80073bc:	0148      	lsls	r0, r1, #5
 80073be:	6979      	ldr	r1, [r7, #20]
 80073c0:	4401      	add	r1, r0
 80073c2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80073c6:	4313      	orrs	r3, r2
 80073c8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	791b      	ldrb	r3, [r3, #4]
 80073ce:	2b01      	cmp	r3, #1
 80073d0:	d11f      	bne.n	8007412 <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80073d2:	693b      	ldr	r3, [r7, #16]
 80073d4:	015a      	lsls	r2, r3, #5
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	4413      	add	r3, r2
 80073da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073de:	691b      	ldr	r3, [r3, #16]
 80073e0:	693a      	ldr	r2, [r7, #16]
 80073e2:	0151      	lsls	r1, r2, #5
 80073e4:	697a      	ldr	r2, [r7, #20]
 80073e6:	440a      	add	r2, r1
 80073e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073ec:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80073f0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80073f2:	693b      	ldr	r3, [r7, #16]
 80073f4:	015a      	lsls	r2, r3, #5
 80073f6:	697b      	ldr	r3, [r7, #20]
 80073f8:	4413      	add	r3, r2
 80073fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073fe:	691b      	ldr	r3, [r3, #16]
 8007400:	693a      	ldr	r2, [r7, #16]
 8007402:	0151      	lsls	r1, r2, #5
 8007404:	697a      	ldr	r2, [r7, #20]
 8007406:	440a      	add	r2, r1
 8007408:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800740c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007410:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	015a      	lsls	r2, r3, #5
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	4413      	add	r3, r2
 800741a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	693a      	ldr	r2, [r7, #16]
 8007422:	0151      	lsls	r1, r2, #5
 8007424:	697a      	ldr	r2, [r7, #20]
 8007426:	440a      	add	r2, r1
 8007428:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800742c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007430:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	791b      	ldrb	r3, [r3, #4]
 8007436:	2b01      	cmp	r3, #1
 8007438:	d015      	beq.n	8007466 <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	691b      	ldr	r3, [r3, #16]
 800743e:	2b00      	cmp	r3, #0
 8007440:	f000 8139 	beq.w	80076b6 <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800744a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	781b      	ldrb	r3, [r3, #0]
 8007450:	f003 030f 	and.w	r3, r3, #15
 8007454:	2101      	movs	r1, #1
 8007456:	fa01 f303 	lsl.w	r3, r1, r3
 800745a:	6979      	ldr	r1, [r7, #20]
 800745c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007460:	4313      	orrs	r3, r2
 8007462:	634b      	str	r3, [r1, #52]	; 0x34
 8007464:	e127      	b.n	80076b6 <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800746c:	689b      	ldr	r3, [r3, #8]
 800746e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007472:	2b00      	cmp	r3, #0
 8007474:	d110      	bne.n	8007498 <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007476:	693b      	ldr	r3, [r7, #16]
 8007478:	015a      	lsls	r2, r3, #5
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	4413      	add	r3, r2
 800747e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	693a      	ldr	r2, [r7, #16]
 8007486:	0151      	lsls	r1, r2, #5
 8007488:	697a      	ldr	r2, [r7, #20]
 800748a:	440a      	add	r2, r1
 800748c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007490:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007494:	6013      	str	r3, [r2, #0]
 8007496:	e00f      	b.n	80074b8 <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	015a      	lsls	r2, r3, #5
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	4413      	add	r3, r2
 80074a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	693a      	ldr	r2, [r7, #16]
 80074a8:	0151      	lsls	r1, r2, #5
 80074aa:	697a      	ldr	r2, [r7, #20]
 80074ac:	440a      	add	r2, r1
 80074ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074b6:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	68d9      	ldr	r1, [r3, #12]
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	781a      	ldrb	r2, [r3, #0]
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	691b      	ldr	r3, [r3, #16]
 80074c4:	b29b      	uxth	r3, r3
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f000 f9a5 	bl	8007816 <USB_WritePacket>
 80074cc:	e0f3      	b.n	80076b6 <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80074ce:	693b      	ldr	r3, [r7, #16]
 80074d0:	015a      	lsls	r2, r3, #5
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	4413      	add	r3, r2
 80074d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074da:	691b      	ldr	r3, [r3, #16]
 80074dc:	693a      	ldr	r2, [r7, #16]
 80074de:	0151      	lsls	r1, r2, #5
 80074e0:	697a      	ldr	r2, [r7, #20]
 80074e2:	440a      	add	r2, r1
 80074e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074e8:	0cdb      	lsrs	r3, r3, #19
 80074ea:	04db      	lsls	r3, r3, #19
 80074ec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80074ee:	693b      	ldr	r3, [r7, #16]
 80074f0:	015a      	lsls	r2, r3, #5
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	4413      	add	r3, r2
 80074f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074fa:	691b      	ldr	r3, [r3, #16]
 80074fc:	693a      	ldr	r2, [r7, #16]
 80074fe:	0151      	lsls	r1, r2, #5
 8007500:	697a      	ldr	r2, [r7, #20]
 8007502:	440a      	add	r2, r1
 8007504:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007508:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800750c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007510:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d12f      	bne.n	8007578 <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	691b      	ldr	r3, [r3, #16]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d003      	beq.n	8007528 <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	689a      	ldr	r2, [r3, #8]
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	689a      	ldr	r2, [r3, #8]
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	015a      	lsls	r2, r3, #5
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	4413      	add	r3, r2
 8007538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800753c:	691a      	ldr	r2, [r3, #16]
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	6a1b      	ldr	r3, [r3, #32]
 8007542:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007546:	6939      	ldr	r1, [r7, #16]
 8007548:	0148      	lsls	r0, r1, #5
 800754a:	6979      	ldr	r1, [r7, #20]
 800754c:	4401      	add	r1, r0
 800754e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007552:	4313      	orrs	r3, r2
 8007554:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007556:	693b      	ldr	r3, [r7, #16]
 8007558:	015a      	lsls	r2, r3, #5
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	4413      	add	r3, r2
 800755e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007562:	691b      	ldr	r3, [r3, #16]
 8007564:	693a      	ldr	r2, [r7, #16]
 8007566:	0151      	lsls	r1, r2, #5
 8007568:	697a      	ldr	r2, [r7, #20]
 800756a:	440a      	add	r2, r1
 800756c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007570:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007574:	6113      	str	r3, [r2, #16]
 8007576:	e061      	b.n	800763c <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	691b      	ldr	r3, [r3, #16]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d125      	bne.n	80075cc <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	015a      	lsls	r2, r3, #5
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	4413      	add	r3, r2
 8007588:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800758c:	691a      	ldr	r2, [r3, #16]
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	689b      	ldr	r3, [r3, #8]
 8007592:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007596:	6939      	ldr	r1, [r7, #16]
 8007598:	0148      	lsls	r0, r1, #5
 800759a:	6979      	ldr	r1, [r7, #20]
 800759c:	4401      	add	r1, r0
 800759e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80075a2:	4313      	orrs	r3, r2
 80075a4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	015a      	lsls	r2, r3, #5
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	4413      	add	r3, r2
 80075ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075b2:	691b      	ldr	r3, [r3, #16]
 80075b4:	693a      	ldr	r2, [r7, #16]
 80075b6:	0151      	lsls	r1, r2, #5
 80075b8:	697a      	ldr	r2, [r7, #20]
 80075ba:	440a      	add	r2, r1
 80075bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80075c4:	6113      	str	r3, [r2, #16]
 80075c6:	e039      	b.n	800763c <USB_EPStartXfer+0x3dc>
 80075c8:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	691a      	ldr	r2, [r3, #16]
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	689b      	ldr	r3, [r3, #8]
 80075d4:	4413      	add	r3, r2
 80075d6:	1e5a      	subs	r2, r3, #1
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	689b      	ldr	r3, [r3, #8]
 80075dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80075e0:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	689b      	ldr	r3, [r3, #8]
 80075e6:	89fa      	ldrh	r2, [r7, #14]
 80075e8:	fb03 f202 	mul.w	r2, r3, r2
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	015a      	lsls	r2, r3, #5
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	4413      	add	r3, r2
 80075f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075fc:	691a      	ldr	r2, [r3, #16]
 80075fe:	89fb      	ldrh	r3, [r7, #14]
 8007600:	04d9      	lsls	r1, r3, #19
 8007602:	4b2f      	ldr	r3, [pc, #188]	; (80076c0 <USB_EPStartXfer+0x460>)
 8007604:	400b      	ands	r3, r1
 8007606:	6939      	ldr	r1, [r7, #16]
 8007608:	0148      	lsls	r0, r1, #5
 800760a:	6979      	ldr	r1, [r7, #20]
 800760c:	4401      	add	r1, r0
 800760e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007612:	4313      	orrs	r3, r2
 8007614:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007616:	693b      	ldr	r3, [r7, #16]
 8007618:	015a      	lsls	r2, r3, #5
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	4413      	add	r3, r2
 800761e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007622:	691a      	ldr	r2, [r3, #16]
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	6a1b      	ldr	r3, [r3, #32]
 8007628:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800762c:	6939      	ldr	r1, [r7, #16]
 800762e:	0148      	lsls	r0, r1, #5
 8007630:	6979      	ldr	r1, [r7, #20]
 8007632:	4401      	add	r1, r0
 8007634:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007638:	4313      	orrs	r3, r2
 800763a:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	791b      	ldrb	r3, [r3, #4]
 8007640:	2b01      	cmp	r3, #1
 8007642:	d128      	bne.n	8007696 <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800764a:	689b      	ldr	r3, [r3, #8]
 800764c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007650:	2b00      	cmp	r3, #0
 8007652:	d110      	bne.n	8007676 <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	015a      	lsls	r2, r3, #5
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	4413      	add	r3, r2
 800765c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	693a      	ldr	r2, [r7, #16]
 8007664:	0151      	lsls	r1, r2, #5
 8007666:	697a      	ldr	r2, [r7, #20]
 8007668:	440a      	add	r2, r1
 800766a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800766e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007672:	6013      	str	r3, [r2, #0]
 8007674:	e00f      	b.n	8007696 <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	015a      	lsls	r2, r3, #5
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	4413      	add	r3, r2
 800767e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	693a      	ldr	r2, [r7, #16]
 8007686:	0151      	lsls	r1, r2, #5
 8007688:	697a      	ldr	r2, [r7, #20]
 800768a:	440a      	add	r2, r1
 800768c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007690:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007694:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007696:	693b      	ldr	r3, [r7, #16]
 8007698:	015a      	lsls	r2, r3, #5
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	4413      	add	r3, r2
 800769e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	693a      	ldr	r2, [r7, #16]
 80076a6:	0151      	lsls	r1, r2, #5
 80076a8:	697a      	ldr	r2, [r7, #20]
 80076aa:	440a      	add	r2, r1
 80076ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076b0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80076b4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80076b6:	2300      	movs	r3, #0
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	3718      	adds	r7, #24
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd80      	pop	{r7, pc}
 80076c0:	1ff80000 	.word	0x1ff80000

080076c4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b087      	sub	sp, #28
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80076ce:	2300      	movs	r3, #0
 80076d0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80076d2:	2300      	movs	r3, #0
 80076d4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	785b      	ldrb	r3, [r3, #1]
 80076de:	2b01      	cmp	r3, #1
 80076e0:	d14a      	bne.n	8007778 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	781b      	ldrb	r3, [r3, #0]
 80076e6:	015a      	lsls	r2, r3, #5
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	4413      	add	r3, r2
 80076ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80076f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80076fa:	f040 8086 	bne.w	800780a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	781b      	ldrb	r3, [r3, #0]
 8007702:	015a      	lsls	r2, r3, #5
 8007704:	693b      	ldr	r3, [r7, #16]
 8007706:	4413      	add	r3, r2
 8007708:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	683a      	ldr	r2, [r7, #0]
 8007710:	7812      	ldrb	r2, [r2, #0]
 8007712:	0151      	lsls	r1, r2, #5
 8007714:	693a      	ldr	r2, [r7, #16]
 8007716:	440a      	add	r2, r1
 8007718:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800771c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007720:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	781b      	ldrb	r3, [r3, #0]
 8007726:	015a      	lsls	r2, r3, #5
 8007728:	693b      	ldr	r3, [r7, #16]
 800772a:	4413      	add	r3, r2
 800772c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	683a      	ldr	r2, [r7, #0]
 8007734:	7812      	ldrb	r2, [r2, #0]
 8007736:	0151      	lsls	r1, r2, #5
 8007738:	693a      	ldr	r2, [r7, #16]
 800773a:	440a      	add	r2, r1
 800773c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007740:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007744:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	3301      	adds	r3, #1
 800774a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	f242 7210 	movw	r2, #10000	; 0x2710
 8007752:	4293      	cmp	r3, r2
 8007754:	d902      	bls.n	800775c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007756:	2301      	movs	r3, #1
 8007758:	75fb      	strb	r3, [r7, #23]
          break;
 800775a:	e056      	b.n	800780a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	781b      	ldrb	r3, [r3, #0]
 8007760:	015a      	lsls	r2, r3, #5
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	4413      	add	r3, r2
 8007766:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007770:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007774:	d0e7      	beq.n	8007746 <USB_EPStopXfer+0x82>
 8007776:	e048      	b.n	800780a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	781b      	ldrb	r3, [r3, #0]
 800777c:	015a      	lsls	r2, r3, #5
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	4413      	add	r3, r2
 8007782:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800778c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007790:	d13b      	bne.n	800780a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	781b      	ldrb	r3, [r3, #0]
 8007796:	015a      	lsls	r2, r3, #5
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	4413      	add	r3, r2
 800779c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	683a      	ldr	r2, [r7, #0]
 80077a4:	7812      	ldrb	r2, [r2, #0]
 80077a6:	0151      	lsls	r1, r2, #5
 80077a8:	693a      	ldr	r2, [r7, #16]
 80077aa:	440a      	add	r2, r1
 80077ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077b0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80077b4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	781b      	ldrb	r3, [r3, #0]
 80077ba:	015a      	lsls	r2, r3, #5
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	4413      	add	r3, r2
 80077c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	683a      	ldr	r2, [r7, #0]
 80077c8:	7812      	ldrb	r2, [r2, #0]
 80077ca:	0151      	lsls	r1, r2, #5
 80077cc:	693a      	ldr	r2, [r7, #16]
 80077ce:	440a      	add	r2, r1
 80077d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80077d8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	3301      	adds	r3, #1
 80077de:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	f242 7210 	movw	r2, #10000	; 0x2710
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d902      	bls.n	80077f0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80077ea:	2301      	movs	r3, #1
 80077ec:	75fb      	strb	r3, [r7, #23]
          break;
 80077ee:	e00c      	b.n	800780a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	781b      	ldrb	r3, [r3, #0]
 80077f4:	015a      	lsls	r2, r3, #5
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	4413      	add	r3, r2
 80077fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007804:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007808:	d0e7      	beq.n	80077da <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800780a:	7dfb      	ldrb	r3, [r7, #23]
}
 800780c:	4618      	mov	r0, r3
 800780e:	371c      	adds	r7, #28
 8007810:	46bd      	mov	sp, r7
 8007812:	bc80      	pop	{r7}
 8007814:	4770      	bx	lr

08007816 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8007816:	b480      	push	{r7}
 8007818:	b089      	sub	sp, #36	; 0x24
 800781a:	af00      	add	r7, sp, #0
 800781c:	60f8      	str	r0, [r7, #12]
 800781e:	60b9      	str	r1, [r7, #8]
 8007820:	4611      	mov	r1, r2
 8007822:	461a      	mov	r2, r3
 8007824:	460b      	mov	r3, r1
 8007826:	71fb      	strb	r3, [r7, #7]
 8007828:	4613      	mov	r3, r2
 800782a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8007834:	88bb      	ldrh	r3, [r7, #4]
 8007836:	3303      	adds	r3, #3
 8007838:	089b      	lsrs	r3, r3, #2
 800783a:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800783c:	2300      	movs	r3, #0
 800783e:	61bb      	str	r3, [r7, #24]
 8007840:	e018      	b.n	8007874 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007842:	79fb      	ldrb	r3, [r7, #7]
 8007844:	031a      	lsls	r2, r3, #12
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	4413      	add	r3, r2
 800784a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800784e:	461a      	mov	r2, r3
 8007850:	69fb      	ldr	r3, [r7, #28]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	6013      	str	r3, [r2, #0]
    pSrc++;
 8007856:	69fb      	ldr	r3, [r7, #28]
 8007858:	3301      	adds	r3, #1
 800785a:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800785c:	69fb      	ldr	r3, [r7, #28]
 800785e:	3301      	adds	r3, #1
 8007860:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8007862:	69fb      	ldr	r3, [r7, #28]
 8007864:	3301      	adds	r3, #1
 8007866:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8007868:	69fb      	ldr	r3, [r7, #28]
 800786a:	3301      	adds	r3, #1
 800786c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800786e:	69bb      	ldr	r3, [r7, #24]
 8007870:	3301      	adds	r3, #1
 8007872:	61bb      	str	r3, [r7, #24]
 8007874:	69ba      	ldr	r2, [r7, #24]
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	429a      	cmp	r2, r3
 800787a:	d3e2      	bcc.n	8007842 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800787c:	2300      	movs	r3, #0
}
 800787e:	4618      	mov	r0, r3
 8007880:	3724      	adds	r7, #36	; 0x24
 8007882:	46bd      	mov	sp, r7
 8007884:	bc80      	pop	{r7}
 8007886:	4770      	bx	lr

08007888 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007888:	b480      	push	{r7}
 800788a:	b08b      	sub	sp, #44	; 0x2c
 800788c:	af00      	add	r7, sp, #0
 800788e:	60f8      	str	r0, [r7, #12]
 8007890:	60b9      	str	r1, [r7, #8]
 8007892:	4613      	mov	r3, r2
 8007894:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800789e:	88fb      	ldrh	r3, [r7, #6]
 80078a0:	089b      	lsrs	r3, r3, #2
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80078a6:	88fb      	ldrh	r3, [r7, #6]
 80078a8:	f003 0303 	and.w	r3, r3, #3
 80078ac:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80078ae:	2300      	movs	r3, #0
 80078b0:	623b      	str	r3, [r7, #32]
 80078b2:	e014      	b.n	80078de <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80078b4:	69bb      	ldr	r3, [r7, #24]
 80078b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078ba:	681a      	ldr	r2, [r3, #0]
 80078bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078be:	601a      	str	r2, [r3, #0]
    pDest++;
 80078c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c2:	3301      	adds	r3, #1
 80078c4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80078c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c8:	3301      	adds	r3, #1
 80078ca:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80078cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ce:	3301      	adds	r3, #1
 80078d0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80078d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d4:	3301      	adds	r3, #1
 80078d6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80078d8:	6a3b      	ldr	r3, [r7, #32]
 80078da:	3301      	adds	r3, #1
 80078dc:	623b      	str	r3, [r7, #32]
 80078de:	6a3a      	ldr	r2, [r7, #32]
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	429a      	cmp	r2, r3
 80078e4:	d3e6      	bcc.n	80078b4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80078e6:	8bfb      	ldrh	r3, [r7, #30]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d01e      	beq.n	800792a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80078ec:	2300      	movs	r3, #0
 80078ee:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80078f0:	69bb      	ldr	r3, [r7, #24]
 80078f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078f6:	461a      	mov	r2, r3
 80078f8:	f107 0310 	add.w	r3, r7, #16
 80078fc:	6812      	ldr	r2, [r2, #0]
 80078fe:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007900:	693a      	ldr	r2, [r7, #16]
 8007902:	6a3b      	ldr	r3, [r7, #32]
 8007904:	b2db      	uxtb	r3, r3
 8007906:	00db      	lsls	r3, r3, #3
 8007908:	fa22 f303 	lsr.w	r3, r2, r3
 800790c:	b2da      	uxtb	r2, r3
 800790e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007910:	701a      	strb	r2, [r3, #0]
      i++;
 8007912:	6a3b      	ldr	r3, [r7, #32]
 8007914:	3301      	adds	r3, #1
 8007916:	623b      	str	r3, [r7, #32]
      pDest++;
 8007918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800791a:	3301      	adds	r3, #1
 800791c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800791e:	8bfb      	ldrh	r3, [r7, #30]
 8007920:	3b01      	subs	r3, #1
 8007922:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007924:	8bfb      	ldrh	r3, [r7, #30]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d1ea      	bne.n	8007900 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800792a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800792c:	4618      	mov	r0, r3
 800792e:	372c      	adds	r7, #44	; 0x2c
 8007930:	46bd      	mov	sp, r7
 8007932:	bc80      	pop	{r7}
 8007934:	4770      	bx	lr

08007936 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007936:	b480      	push	{r7}
 8007938:	b085      	sub	sp, #20
 800793a:	af00      	add	r7, sp, #0
 800793c:	6078      	str	r0, [r7, #4]
 800793e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	781b      	ldrb	r3, [r3, #0]
 8007948:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	785b      	ldrb	r3, [r3, #1]
 800794e:	2b01      	cmp	r3, #1
 8007950:	d12c      	bne.n	80079ac <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	015a      	lsls	r2, r3, #5
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	4413      	add	r3, r2
 800795a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	2b00      	cmp	r3, #0
 8007962:	db12      	blt.n	800798a <USB_EPSetStall+0x54>
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d00f      	beq.n	800798a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	015a      	lsls	r2, r3, #5
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	4413      	add	r3, r2
 8007972:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	68ba      	ldr	r2, [r7, #8]
 800797a:	0151      	lsls	r1, r2, #5
 800797c:	68fa      	ldr	r2, [r7, #12]
 800797e:	440a      	add	r2, r1
 8007980:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007984:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007988:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	015a      	lsls	r2, r3, #5
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	4413      	add	r3, r2
 8007992:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	68ba      	ldr	r2, [r7, #8]
 800799a:	0151      	lsls	r1, r2, #5
 800799c:	68fa      	ldr	r2, [r7, #12]
 800799e:	440a      	add	r2, r1
 80079a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80079a8:	6013      	str	r3, [r2, #0]
 80079aa:	e02b      	b.n	8007a04 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	015a      	lsls	r2, r3, #5
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	4413      	add	r3, r2
 80079b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	db12      	blt.n	80079e4 <USB_EPSetStall+0xae>
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d00f      	beq.n	80079e4 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	015a      	lsls	r2, r3, #5
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	4413      	add	r3, r2
 80079cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	68ba      	ldr	r2, [r7, #8]
 80079d4:	0151      	lsls	r1, r2, #5
 80079d6:	68fa      	ldr	r2, [r7, #12]
 80079d8:	440a      	add	r2, r1
 80079da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079de:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80079e2:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	015a      	lsls	r2, r3, #5
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	4413      	add	r3, r2
 80079ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	68ba      	ldr	r2, [r7, #8]
 80079f4:	0151      	lsls	r1, r2, #5
 80079f6:	68fa      	ldr	r2, [r7, #12]
 80079f8:	440a      	add	r2, r1
 80079fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007a02:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007a04:	2300      	movs	r3, #0
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	3714      	adds	r7, #20
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bc80      	pop	{r7}
 8007a0e:	4770      	bx	lr

08007a10 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007a10:	b480      	push	{r7}
 8007a12:	b085      	sub	sp, #20
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
 8007a18:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	781b      	ldrb	r3, [r3, #0]
 8007a22:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	785b      	ldrb	r3, [r3, #1]
 8007a28:	2b01      	cmp	r3, #1
 8007a2a:	d128      	bne.n	8007a7e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	015a      	lsls	r2, r3, #5
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	4413      	add	r3, r2
 8007a34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	68ba      	ldr	r2, [r7, #8]
 8007a3c:	0151      	lsls	r1, r2, #5
 8007a3e:	68fa      	ldr	r2, [r7, #12]
 8007a40:	440a      	add	r2, r1
 8007a42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a46:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007a4a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	791b      	ldrb	r3, [r3, #4]
 8007a50:	2b03      	cmp	r3, #3
 8007a52:	d003      	beq.n	8007a5c <USB_EPClearStall+0x4c>
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	791b      	ldrb	r3, [r3, #4]
 8007a58:	2b02      	cmp	r3, #2
 8007a5a:	d138      	bne.n	8007ace <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	015a      	lsls	r2, r3, #5
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	4413      	add	r3, r2
 8007a64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	68ba      	ldr	r2, [r7, #8]
 8007a6c:	0151      	lsls	r1, r2, #5
 8007a6e:	68fa      	ldr	r2, [r7, #12]
 8007a70:	440a      	add	r2, r1
 8007a72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a7a:	6013      	str	r3, [r2, #0]
 8007a7c:	e027      	b.n	8007ace <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	015a      	lsls	r2, r3, #5
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	4413      	add	r3, r2
 8007a86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	68ba      	ldr	r2, [r7, #8]
 8007a8e:	0151      	lsls	r1, r2, #5
 8007a90:	68fa      	ldr	r2, [r7, #12]
 8007a92:	440a      	add	r2, r1
 8007a94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a98:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007a9c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	791b      	ldrb	r3, [r3, #4]
 8007aa2:	2b03      	cmp	r3, #3
 8007aa4:	d003      	beq.n	8007aae <USB_EPClearStall+0x9e>
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	791b      	ldrb	r3, [r3, #4]
 8007aaa:	2b02      	cmp	r3, #2
 8007aac:	d10f      	bne.n	8007ace <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	015a      	lsls	r2, r3, #5
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	4413      	add	r3, r2
 8007ab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	68ba      	ldr	r2, [r7, #8]
 8007abe:	0151      	lsls	r1, r2, #5
 8007ac0:	68fa      	ldr	r2, [r7, #12]
 8007ac2:	440a      	add	r2, r1
 8007ac4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ac8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007acc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007ace:	2300      	movs	r3, #0
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	3714      	adds	r7, #20
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bc80      	pop	{r7}
 8007ad8:	4770      	bx	lr

08007ada <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007ada:	b480      	push	{r7}
 8007adc:	b085      	sub	sp, #20
 8007ade:	af00      	add	r7, sp, #0
 8007ae0:	6078      	str	r0, [r7, #4]
 8007ae2:	460b      	mov	r3, r1
 8007ae4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	68fa      	ldr	r2, [r7, #12]
 8007af4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007af8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007afc:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b04:	681a      	ldr	r2, [r3, #0]
 8007b06:	78fb      	ldrb	r3, [r7, #3]
 8007b08:	011b      	lsls	r3, r3, #4
 8007b0a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007b0e:	68f9      	ldr	r1, [r7, #12]
 8007b10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007b14:	4313      	orrs	r3, r2
 8007b16:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007b18:	2300      	movs	r3, #0
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	3714      	adds	r7, #20
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bc80      	pop	{r7}
 8007b22:	4770      	bx	lr

08007b24 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b085      	sub	sp, #20
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	68fa      	ldr	r2, [r7, #12]
 8007b3a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007b3e:	f023 0303 	bic.w	r3, r3, #3
 8007b42:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b4a:	685b      	ldr	r3, [r3, #4]
 8007b4c:	68fa      	ldr	r2, [r7, #12]
 8007b4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b52:	f023 0302 	bic.w	r3, r3, #2
 8007b56:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007b58:	2300      	movs	r3, #0
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3714      	adds	r7, #20
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bc80      	pop	{r7}
 8007b62:	4770      	bx	lr

08007b64 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b085      	sub	sp, #20
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	68fa      	ldr	r2, [r7, #12]
 8007b7a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007b7e:	f023 0303 	bic.w	r3, r3, #3
 8007b82:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	68fa      	ldr	r2, [r7, #12]
 8007b8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b92:	f043 0302 	orr.w	r3, r3, #2
 8007b96:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007b98:	2300      	movs	r3, #0
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	3714      	adds	r7, #20
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bc80      	pop	{r7}
 8007ba2:	4770      	bx	lr

08007ba4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b085      	sub	sp, #20
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	695b      	ldr	r3, [r3, #20]
 8007bb0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	699b      	ldr	r3, [r3, #24]
 8007bb6:	68fa      	ldr	r2, [r7, #12]
 8007bb8:	4013      	ands	r3, r2
 8007bba:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
}
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	3714      	adds	r7, #20
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bc80      	pop	{r7}
 8007bc6:	4770      	bx	lr

08007bc8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b085      	sub	sp, #20
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bda:	699b      	ldr	r3, [r3, #24]
 8007bdc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007be4:	69db      	ldr	r3, [r3, #28]
 8007be6:	68ba      	ldr	r2, [r7, #8]
 8007be8:	4013      	ands	r3, r2
 8007bea:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	0c1b      	lsrs	r3, r3, #16
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3714      	adds	r7, #20
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bc80      	pop	{r7}
 8007bf8:	4770      	bx	lr

08007bfa <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007bfa:	b480      	push	{r7}
 8007bfc:	b085      	sub	sp, #20
 8007bfe:	af00      	add	r7, sp, #0
 8007c00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c0c:	699b      	ldr	r3, [r3, #24]
 8007c0e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c16:	69db      	ldr	r3, [r3, #28]
 8007c18:	68ba      	ldr	r2, [r7, #8]
 8007c1a:	4013      	ands	r3, r2
 8007c1c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	b29b      	uxth	r3, r3
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	3714      	adds	r7, #20
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bc80      	pop	{r7}
 8007c2a:	4770      	bx	lr

08007c2c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b085      	sub	sp, #20
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
 8007c34:	460b      	mov	r3, r1
 8007c36:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007c3c:	78fb      	ldrb	r3, [r7, #3]
 8007c3e:	015a      	lsls	r2, r3, #5
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	4413      	add	r3, r2
 8007c44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c48:	689b      	ldr	r3, [r3, #8]
 8007c4a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c52:	695b      	ldr	r3, [r3, #20]
 8007c54:	68ba      	ldr	r2, [r7, #8]
 8007c56:	4013      	ands	r3, r2
 8007c58:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007c5a:	68bb      	ldr	r3, [r7, #8]
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	3714      	adds	r7, #20
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bc80      	pop	{r7}
 8007c64:	4770      	bx	lr

08007c66 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007c66:	b480      	push	{r7}
 8007c68:	b087      	sub	sp, #28
 8007c6a:	af00      	add	r7, sp, #0
 8007c6c:	6078      	str	r0, [r7, #4]
 8007c6e:	460b      	mov	r3, r1
 8007c70:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c7c:	691b      	ldr	r3, [r3, #16]
 8007c7e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007c80:	697b      	ldr	r3, [r7, #20]
 8007c82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c88:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007c8a:	78fb      	ldrb	r3, [r7, #3]
 8007c8c:	f003 030f 	and.w	r3, r3, #15
 8007c90:	68fa      	ldr	r2, [r7, #12]
 8007c92:	fa22 f303 	lsr.w	r3, r2, r3
 8007c96:	01db      	lsls	r3, r3, #7
 8007c98:	b2db      	uxtb	r3, r3
 8007c9a:	693a      	ldr	r2, [r7, #16]
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007ca0:	78fb      	ldrb	r3, [r7, #3]
 8007ca2:	015a      	lsls	r2, r3, #5
 8007ca4:	697b      	ldr	r3, [r7, #20]
 8007ca6:	4413      	add	r3, r2
 8007ca8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cac:	689b      	ldr	r3, [r3, #8]
 8007cae:	693a      	ldr	r2, [r7, #16]
 8007cb0:	4013      	ands	r3, r2
 8007cb2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007cb4:	68bb      	ldr	r3, [r7, #8]
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	371c      	adds	r7, #28
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bc80      	pop	{r7}
 8007cbe:	4770      	bx	lr

08007cc0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b083      	sub	sp, #12
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	695b      	ldr	r3, [r3, #20]
 8007ccc:	f003 0301 	and.w	r3, r3, #1
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	370c      	adds	r7, #12
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bc80      	pop	{r7}
 8007cd8:	4770      	bx	lr

08007cda <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007cda:	b480      	push	{r7}
 8007cdc:	b085      	sub	sp, #20
 8007cde:	af00      	add	r7, sp, #0
 8007ce0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	68fa      	ldr	r2, [r7, #12]
 8007cf0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007cf4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007cf8:	f023 0307 	bic.w	r3, r3, #7
 8007cfc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d04:	685b      	ldr	r3, [r3, #4]
 8007d06:	68fa      	ldr	r2, [r7, #12]
 8007d08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d10:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007d12:	2300      	movs	r3, #0
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	3714      	adds	r7, #20
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bc80      	pop	{r7}
 8007d1c:	4770      	bx	lr
	...

08007d20 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8007d20:	b480      	push	{r7}
 8007d22:	b085      	sub	sp, #20
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
 8007d28:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	333c      	adds	r3, #60	; 0x3c
 8007d32:	3304      	adds	r3, #4
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	4a1c      	ldr	r2, [pc, #112]	; (8007dac <USB_EP0_OutStart+0x8c>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d90a      	bls.n	8007d56 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d50:	d101      	bne.n	8007d56 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8007d52:	2300      	movs	r3, #0
 8007d54:	e024      	b.n	8007da0 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d5c:	461a      	mov	r2, r3
 8007d5e:	2300      	movs	r3, #0
 8007d60:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d68:	691b      	ldr	r3, [r3, #16]
 8007d6a:	68fa      	ldr	r2, [r7, #12]
 8007d6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d70:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007d74:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d7c:	691b      	ldr	r3, [r3, #16]
 8007d7e:	68fa      	ldr	r2, [r7, #12]
 8007d80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d84:	f043 0318 	orr.w	r3, r3, #24
 8007d88:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d90:	691b      	ldr	r3, [r3, #16]
 8007d92:	68fa      	ldr	r2, [r7, #12]
 8007d94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d98:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007d9c:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8007d9e:	2300      	movs	r3, #0
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	3714      	adds	r7, #20
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bc80      	pop	{r7}
 8007da8:	4770      	bx	lr
 8007daa:	bf00      	nop
 8007dac:	4f54300a 	.word	0x4f54300a

08007db0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007db0:	b480      	push	{r7}
 8007db2:	b085      	sub	sp, #20
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007db8:	2300      	movs	r3, #0
 8007dba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	3301      	adds	r3, #1
 8007dc0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	4a12      	ldr	r2, [pc, #72]	; (8007e10 <USB_CoreReset+0x60>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d901      	bls.n	8007dce <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007dca:	2303      	movs	r3, #3
 8007dcc:	e01b      	b.n	8007e06 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	691b      	ldr	r3, [r3, #16]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	daf2      	bge.n	8007dbc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	691b      	ldr	r3, [r3, #16]
 8007dde:	f043 0201 	orr.w	r2, r3, #1
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	3301      	adds	r3, #1
 8007dea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	4a08      	ldr	r2, [pc, #32]	; (8007e10 <USB_CoreReset+0x60>)
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d901      	bls.n	8007df8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007df4:	2303      	movs	r3, #3
 8007df6:	e006      	b.n	8007e06 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	691b      	ldr	r3, [r3, #16]
 8007dfc:	f003 0301 	and.w	r3, r3, #1
 8007e00:	2b01      	cmp	r3, #1
 8007e02:	d0f0      	beq.n	8007de6 <USB_CoreReset+0x36>

  return HAL_OK;
 8007e04:	2300      	movs	r3, #0
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	3714      	adds	r7, #20
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bc80      	pop	{r7}
 8007e0e:	4770      	bx	lr
 8007e10:	00030d40 	.word	0x00030d40

08007e14 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b084      	sub	sp, #16
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
 8007e1c:	460b      	mov	r3, r1
 8007e1e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007e20:	2300      	movs	r3, #0
 8007e22:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	7c1b      	ldrb	r3, [r3, #16]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d115      	bne.n	8007e58 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007e2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e30:	2202      	movs	r2, #2
 8007e32:	2181      	movs	r1, #129	; 0x81
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f001 ff22 	bl	8009c7e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2201      	movs	r2, #1
 8007e3e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007e40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e44:	2202      	movs	r2, #2
 8007e46:	2101      	movs	r1, #1
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f001 ff18 	bl	8009c7e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2201      	movs	r2, #1
 8007e52:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8007e56:	e012      	b.n	8007e7e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007e58:	2340      	movs	r3, #64	; 0x40
 8007e5a:	2202      	movs	r2, #2
 8007e5c:	2181      	movs	r1, #129	; 0x81
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f001 ff0d 	bl	8009c7e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2201      	movs	r2, #1
 8007e68:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007e6a:	2340      	movs	r3, #64	; 0x40
 8007e6c:	2202      	movs	r2, #2
 8007e6e:	2101      	movs	r1, #1
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f001 ff04 	bl	8009c7e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2201      	movs	r2, #1
 8007e7a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007e7e:	2308      	movs	r3, #8
 8007e80:	2203      	movs	r2, #3
 8007e82:	2182      	movs	r1, #130	; 0x82
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f001 fefa 	bl	8009c7e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2201      	movs	r2, #1
 8007e8e:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007e90:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007e94:	f002 f81a 	bl	8009ecc <USBD_static_malloc>
 8007e98:	4602      	mov	r2, r0
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d102      	bne.n	8007eb0 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007eaa:	2301      	movs	r3, #1
 8007eac:	73fb      	strb	r3, [r7, #15]
 8007eae:	e026      	b.n	8007efe <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007eb6:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	7c1b      	ldrb	r3, [r3, #16]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d109      	bne.n	8007eee <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007ee0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ee4:	2101      	movs	r1, #1
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f001 ffb9 	bl	8009e5e <USBD_LL_PrepareReceive>
 8007eec:	e007      	b.n	8007efe <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007ef4:	2340      	movs	r3, #64	; 0x40
 8007ef6:	2101      	movs	r1, #1
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f001 ffb0 	bl	8009e5e <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007efe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3710      	adds	r7, #16
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}

08007f08 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b084      	sub	sp, #16
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
 8007f10:	460b      	mov	r3, r1
 8007f12:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007f14:	2300      	movs	r3, #0
 8007f16:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007f18:	2181      	movs	r1, #129	; 0x81
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f001 fed5 	bl	8009cca <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2200      	movs	r2, #0
 8007f24:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007f26:	2101      	movs	r1, #1
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f001 fece 	bl	8009cca <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2200      	movs	r2, #0
 8007f32:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007f36:	2182      	movs	r1, #130	; 0x82
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f001 fec6 	bl	8009cca <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2200      	movs	r2, #0
 8007f42:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d00e      	beq.n	8007f6c <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f54:	685b      	ldr	r3, [r3, #4]
 8007f56:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f001 ffc0 	bl	8009ee4 <USBD_static_free>
    pdev->pClassData = NULL;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2200      	movs	r2, #0
 8007f68:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8007f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3710      	adds	r7, #16
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}

08007f76 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007f76:	b580      	push	{r7, lr}
 8007f78:	b086      	sub	sp, #24
 8007f7a:	af00      	add	r7, sp, #0
 8007f7c:	6078      	str	r0, [r7, #4]
 8007f7e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f86:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007f88:	2300      	movs	r3, #0
 8007f8a:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007f90:	2300      	movs	r3, #0
 8007f92:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	781b      	ldrb	r3, [r3, #0]
 8007f98:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d039      	beq.n	8008014 <USBD_CDC_Setup+0x9e>
 8007fa0:	2b20      	cmp	r3, #32
 8007fa2:	d17f      	bne.n	80080a4 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	88db      	ldrh	r3, [r3, #6]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d029      	beq.n	8008000 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	781b      	ldrb	r3, [r3, #0]
 8007fb0:	b25b      	sxtb	r3, r3
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	da11      	bge.n	8007fda <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007fbc:	689b      	ldr	r3, [r3, #8]
 8007fbe:	683a      	ldr	r2, [r7, #0]
 8007fc0:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8007fc2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007fc4:	683a      	ldr	r2, [r7, #0]
 8007fc6:	88d2      	ldrh	r2, [r2, #6]
 8007fc8:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007fca:	6939      	ldr	r1, [r7, #16]
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	88db      	ldrh	r3, [r3, #6]
 8007fd0:	461a      	mov	r2, r3
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f001 fa41 	bl	800945a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8007fd8:	e06b      	b.n	80080b2 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	785a      	ldrb	r2, [r3, #1]
 8007fde:	693b      	ldr	r3, [r7, #16]
 8007fe0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	88db      	ldrh	r3, [r3, #6]
 8007fe8:	b2da      	uxtb	r2, r3
 8007fea:	693b      	ldr	r3, [r7, #16]
 8007fec:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007ff0:	6939      	ldr	r1, [r7, #16]
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	88db      	ldrh	r3, [r3, #6]
 8007ff6:	461a      	mov	r2, r3
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f001 fa5c 	bl	80094b6 <USBD_CtlPrepareRx>
      break;
 8007ffe:	e058      	b.n	80080b2 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008006:	689b      	ldr	r3, [r3, #8]
 8008008:	683a      	ldr	r2, [r7, #0]
 800800a:	7850      	ldrb	r0, [r2, #1]
 800800c:	2200      	movs	r2, #0
 800800e:	6839      	ldr	r1, [r7, #0]
 8008010:	4798      	blx	r3
      break;
 8008012:	e04e      	b.n	80080b2 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	785b      	ldrb	r3, [r3, #1]
 8008018:	2b0b      	cmp	r3, #11
 800801a:	d02e      	beq.n	800807a <USBD_CDC_Setup+0x104>
 800801c:	2b0b      	cmp	r3, #11
 800801e:	dc38      	bgt.n	8008092 <USBD_CDC_Setup+0x11c>
 8008020:	2b00      	cmp	r3, #0
 8008022:	d002      	beq.n	800802a <USBD_CDC_Setup+0xb4>
 8008024:	2b0a      	cmp	r3, #10
 8008026:	d014      	beq.n	8008052 <USBD_CDC_Setup+0xdc>
 8008028:	e033      	b.n	8008092 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008030:	2b03      	cmp	r3, #3
 8008032:	d107      	bne.n	8008044 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008034:	f107 030c 	add.w	r3, r7, #12
 8008038:	2202      	movs	r2, #2
 800803a:	4619      	mov	r1, r3
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f001 fa0c 	bl	800945a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008042:	e02e      	b.n	80080a2 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008044:	6839      	ldr	r1, [r7, #0]
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f001 f99d 	bl	8009386 <USBD_CtlError>
            ret = USBD_FAIL;
 800804c:	2302      	movs	r3, #2
 800804e:	75fb      	strb	r3, [r7, #23]
          break;
 8008050:	e027      	b.n	80080a2 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008058:	2b03      	cmp	r3, #3
 800805a:	d107      	bne.n	800806c <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800805c:	f107 030f 	add.w	r3, r7, #15
 8008060:	2201      	movs	r2, #1
 8008062:	4619      	mov	r1, r3
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f001 f9f8 	bl	800945a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800806a:	e01a      	b.n	80080a2 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800806c:	6839      	ldr	r1, [r7, #0]
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f001 f989 	bl	8009386 <USBD_CtlError>
            ret = USBD_FAIL;
 8008074:	2302      	movs	r3, #2
 8008076:	75fb      	strb	r3, [r7, #23]
          break;
 8008078:	e013      	b.n	80080a2 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008080:	2b03      	cmp	r3, #3
 8008082:	d00d      	beq.n	80080a0 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8008084:	6839      	ldr	r1, [r7, #0]
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f001 f97d 	bl	8009386 <USBD_CtlError>
            ret = USBD_FAIL;
 800808c:	2302      	movs	r3, #2
 800808e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008090:	e006      	b.n	80080a0 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8008092:	6839      	ldr	r1, [r7, #0]
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f001 f976 	bl	8009386 <USBD_CtlError>
          ret = USBD_FAIL;
 800809a:	2302      	movs	r3, #2
 800809c:	75fb      	strb	r3, [r7, #23]
          break;
 800809e:	e000      	b.n	80080a2 <USBD_CDC_Setup+0x12c>
          break;
 80080a0:	bf00      	nop
      }
      break;
 80080a2:	e006      	b.n	80080b2 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80080a4:	6839      	ldr	r1, [r7, #0]
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f001 f96d 	bl	8009386 <USBD_CtlError>
      ret = USBD_FAIL;
 80080ac:	2302      	movs	r3, #2
 80080ae:	75fb      	strb	r3, [r7, #23]
      break;
 80080b0:	bf00      	nop
  }

  return ret;
 80080b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	3718      	adds	r7, #24
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}

080080bc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b084      	sub	sp, #16
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
 80080c4:	460b      	mov	r3, r1
 80080c6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080ce:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80080d6:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d03a      	beq.n	8008158 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80080e2:	78fa      	ldrb	r2, [r7, #3]
 80080e4:	6879      	ldr	r1, [r7, #4]
 80080e6:	4613      	mov	r3, r2
 80080e8:	009b      	lsls	r3, r3, #2
 80080ea:	4413      	add	r3, r2
 80080ec:	009b      	lsls	r3, r3, #2
 80080ee:	440b      	add	r3, r1
 80080f0:	331c      	adds	r3, #28
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d029      	beq.n	800814c <USBD_CDC_DataIn+0x90>
 80080f8:	78fa      	ldrb	r2, [r7, #3]
 80080fa:	6879      	ldr	r1, [r7, #4]
 80080fc:	4613      	mov	r3, r2
 80080fe:	009b      	lsls	r3, r3, #2
 8008100:	4413      	add	r3, r2
 8008102:	009b      	lsls	r3, r3, #2
 8008104:	440b      	add	r3, r1
 8008106:	331c      	adds	r3, #28
 8008108:	681a      	ldr	r2, [r3, #0]
 800810a:	78f9      	ldrb	r1, [r7, #3]
 800810c:	68b8      	ldr	r0, [r7, #8]
 800810e:	460b      	mov	r3, r1
 8008110:	00db      	lsls	r3, r3, #3
 8008112:	440b      	add	r3, r1
 8008114:	009b      	lsls	r3, r3, #2
 8008116:	4403      	add	r3, r0
 8008118:	3344      	adds	r3, #68	; 0x44
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	fbb2 f1f3 	udiv	r1, r2, r3
 8008120:	fb01 f303 	mul.w	r3, r1, r3
 8008124:	1ad3      	subs	r3, r2, r3
 8008126:	2b00      	cmp	r3, #0
 8008128:	d110      	bne.n	800814c <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800812a:	78fa      	ldrb	r2, [r7, #3]
 800812c:	6879      	ldr	r1, [r7, #4]
 800812e:	4613      	mov	r3, r2
 8008130:	009b      	lsls	r3, r3, #2
 8008132:	4413      	add	r3, r2
 8008134:	009b      	lsls	r3, r3, #2
 8008136:	440b      	add	r3, r1
 8008138:	331c      	adds	r3, #28
 800813a:	2200      	movs	r2, #0
 800813c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800813e:	78f9      	ldrb	r1, [r7, #3]
 8008140:	2300      	movs	r3, #0
 8008142:	2200      	movs	r2, #0
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f001 fe67 	bl	8009e18 <USBD_LL_Transmit>
 800814a:	e003      	b.n	8008154 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	2200      	movs	r2, #0
 8008150:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8008154:	2300      	movs	r3, #0
 8008156:	e000      	b.n	800815a <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008158:	2302      	movs	r3, #2
  }
}
 800815a:	4618      	mov	r0, r3
 800815c:	3710      	adds	r7, #16
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}

08008162 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008162:	b580      	push	{r7, lr}
 8008164:	b084      	sub	sp, #16
 8008166:	af00      	add	r7, sp, #0
 8008168:	6078      	str	r0, [r7, #4]
 800816a:	460b      	mov	r3, r1
 800816c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008174:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008176:	78fb      	ldrb	r3, [r7, #3]
 8008178:	4619      	mov	r1, r3
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f001 fe92 	bl	8009ea4 <USBD_LL_GetRxDataSize>
 8008180:	4602      	mov	r2, r0
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800818e:	2b00      	cmp	r3, #0
 8008190:	d00d      	beq.n	80081ae <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008198:	68db      	ldr	r3, [r3, #12]
 800819a:	68fa      	ldr	r2, [r7, #12]
 800819c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80081a0:	68fa      	ldr	r2, [r7, #12]
 80081a2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80081a6:	4611      	mov	r1, r2
 80081a8:	4798      	blx	r3

    return USBD_OK;
 80081aa:	2300      	movs	r3, #0
 80081ac:	e000      	b.n	80081b0 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80081ae:	2302      	movs	r3, #2
  }
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	3710      	adds	r7, #16
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}

080081b8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b084      	sub	sp, #16
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081c6:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d015      	beq.n	80081fe <USBD_CDC_EP0_RxReady+0x46>
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80081d8:	2bff      	cmp	r3, #255	; 0xff
 80081da:	d010      	beq.n	80081fe <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80081e2:	689b      	ldr	r3, [r3, #8]
 80081e4:	68fa      	ldr	r2, [r7, #12]
 80081e6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80081ea:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80081ec:	68fa      	ldr	r2, [r7, #12]
 80081ee:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80081f2:	b292      	uxth	r2, r2
 80081f4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	22ff      	movs	r2, #255	; 0xff
 80081fa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80081fe:	2300      	movs	r3, #0
}
 8008200:	4618      	mov	r0, r3
 8008202:	3710      	adds	r7, #16
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}

08008208 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008208:	b480      	push	{r7}
 800820a:	b083      	sub	sp, #12
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2243      	movs	r2, #67	; 0x43
 8008214:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008216:	4b03      	ldr	r3, [pc, #12]	; (8008224 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008218:	4618      	mov	r0, r3
 800821a:	370c      	adds	r7, #12
 800821c:	46bd      	mov	sp, r7
 800821e:	bc80      	pop	{r7}
 8008220:	4770      	bx	lr
 8008222:	bf00      	nop
 8008224:	200000dc 	.word	0x200000dc

08008228 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008228:	b480      	push	{r7}
 800822a:	b083      	sub	sp, #12
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2243      	movs	r2, #67	; 0x43
 8008234:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008236:	4b03      	ldr	r3, [pc, #12]	; (8008244 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008238:	4618      	mov	r0, r3
 800823a:	370c      	adds	r7, #12
 800823c:	46bd      	mov	sp, r7
 800823e:	bc80      	pop	{r7}
 8008240:	4770      	bx	lr
 8008242:	bf00      	nop
 8008244:	20000098 	.word	0x20000098

08008248 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008248:	b480      	push	{r7}
 800824a:	b083      	sub	sp, #12
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2243      	movs	r2, #67	; 0x43
 8008254:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008256:	4b03      	ldr	r3, [pc, #12]	; (8008264 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008258:	4618      	mov	r0, r3
 800825a:	370c      	adds	r7, #12
 800825c:	46bd      	mov	sp, r7
 800825e:	bc80      	pop	{r7}
 8008260:	4770      	bx	lr
 8008262:	bf00      	nop
 8008264:	20000120 	.word	0x20000120

08008268 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008268:	b480      	push	{r7}
 800826a:	b083      	sub	sp, #12
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	220a      	movs	r2, #10
 8008274:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008276:	4b03      	ldr	r3, [pc, #12]	; (8008284 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008278:	4618      	mov	r0, r3
 800827a:	370c      	adds	r7, #12
 800827c:	46bd      	mov	sp, r7
 800827e:	bc80      	pop	{r7}
 8008280:	4770      	bx	lr
 8008282:	bf00      	nop
 8008284:	20000054 	.word	0x20000054

08008288 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008288:	b480      	push	{r7}
 800828a:	b085      	sub	sp, #20
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
 8008290:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008292:	2302      	movs	r3, #2
 8008294:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d005      	beq.n	80082a8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	683a      	ldr	r2, [r7, #0]
 80082a0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80082a4:	2300      	movs	r3, #0
 80082a6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80082a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	3714      	adds	r7, #20
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bc80      	pop	{r7}
 80082b2:	4770      	bx	lr

080082b4 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80082b4:	b480      	push	{r7}
 80082b6:	b087      	sub	sp, #28
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	60f8      	str	r0, [r7, #12]
 80082bc:	60b9      	str	r1, [r7, #8]
 80082be:	4613      	mov	r3, r2
 80082c0:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082c8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	68ba      	ldr	r2, [r7, #8]
 80082ce:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80082d2:	88fa      	ldrh	r2, [r7, #6]
 80082d4:	697b      	ldr	r3, [r7, #20]
 80082d6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80082da:	2300      	movs	r3, #0
}
 80082dc:	4618      	mov	r0, r3
 80082de:	371c      	adds	r7, #28
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bc80      	pop	{r7}
 80082e4:	4770      	bx	lr

080082e6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80082e6:	b480      	push	{r7}
 80082e8:	b085      	sub	sp, #20
 80082ea:	af00      	add	r7, sp, #0
 80082ec:	6078      	str	r0, [r7, #4]
 80082ee:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082f6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	683a      	ldr	r2, [r7, #0]
 80082fc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8008300:	2300      	movs	r3, #0
}
 8008302:	4618      	mov	r0, r3
 8008304:	3714      	adds	r7, #20
 8008306:	46bd      	mov	sp, r7
 8008308:	bc80      	pop	{r7}
 800830a:	4770      	bx	lr

0800830c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b084      	sub	sp, #16
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800831a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008322:	2b00      	cmp	r3, #0
 8008324:	d01c      	beq.n	8008360 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800832c:	2b00      	cmp	r3, #0
 800832e:	d115      	bne.n	800835c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	2201      	movs	r2, #1
 8008334:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800834e:	b29b      	uxth	r3, r3
 8008350:	2181      	movs	r1, #129	; 0x81
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f001 fd60 	bl	8009e18 <USBD_LL_Transmit>

      return USBD_OK;
 8008358:	2300      	movs	r3, #0
 800835a:	e002      	b.n	8008362 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800835c:	2301      	movs	r3, #1
 800835e:	e000      	b.n	8008362 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8008360:	2302      	movs	r3, #2
  }
}
 8008362:	4618      	mov	r0, r3
 8008364:	3710      	adds	r7, #16
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}

0800836a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800836a:	b580      	push	{r7, lr}
 800836c:	b084      	sub	sp, #16
 800836e:	af00      	add	r7, sp, #0
 8008370:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008378:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008380:	2b00      	cmp	r3, #0
 8008382:	d017      	beq.n	80083b4 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	7c1b      	ldrb	r3, [r3, #16]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d109      	bne.n	80083a0 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008392:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008396:	2101      	movs	r1, #1
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f001 fd60 	bl	8009e5e <USBD_LL_PrepareReceive>
 800839e:	e007      	b.n	80083b0 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80083a6:	2340      	movs	r3, #64	; 0x40
 80083a8:	2101      	movs	r1, #1
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f001 fd57 	bl	8009e5e <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80083b0:	2300      	movs	r3, #0
 80083b2:	e000      	b.n	80083b6 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80083b4:	2302      	movs	r3, #2
  }
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	3710      	adds	r7, #16
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}

080083be <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80083be:	b580      	push	{r7, lr}
 80083c0:	b084      	sub	sp, #16
 80083c2:	af00      	add	r7, sp, #0
 80083c4:	60f8      	str	r0, [r7, #12]
 80083c6:	60b9      	str	r1, [r7, #8]
 80083c8:	4613      	mov	r3, r2
 80083ca:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d101      	bne.n	80083d6 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80083d2:	2302      	movs	r3, #2
 80083d4:	e01a      	b.n	800840c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d003      	beq.n	80083e8 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	2200      	movs	r2, #0
 80083e4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d003      	beq.n	80083f6 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	68ba      	ldr	r2, [r7, #8]
 80083f2:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	2201      	movs	r2, #1
 80083fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	79fa      	ldrb	r2, [r7, #7]
 8008402:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008404:	68f8      	ldr	r0, [r7, #12]
 8008406:	f001 fbdb 	bl	8009bc0 <USBD_LL_Init>

  return USBD_OK;
 800840a:	2300      	movs	r3, #0
}
 800840c:	4618      	mov	r0, r3
 800840e:	3710      	adds	r7, #16
 8008410:	46bd      	mov	sp, r7
 8008412:	bd80      	pop	{r7, pc}

08008414 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008414:	b480      	push	{r7}
 8008416:	b085      	sub	sp, #20
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
 800841c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800841e:	2300      	movs	r3, #0
 8008420:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d006      	beq.n	8008436 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	683a      	ldr	r2, [r7, #0]
 800842c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8008430:	2300      	movs	r3, #0
 8008432:	73fb      	strb	r3, [r7, #15]
 8008434:	e001      	b.n	800843a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008436:	2302      	movs	r3, #2
 8008438:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800843a:	7bfb      	ldrb	r3, [r7, #15]
}
 800843c:	4618      	mov	r0, r3
 800843e:	3714      	adds	r7, #20
 8008440:	46bd      	mov	sp, r7
 8008442:	bc80      	pop	{r7}
 8008444:	4770      	bx	lr

08008446 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008446:	b580      	push	{r7, lr}
 8008448:	b082      	sub	sp, #8
 800844a:	af00      	add	r7, sp, #0
 800844c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f001 fbfa 	bl	8009c48 <USBD_LL_Start>

  return USBD_OK;
 8008454:	2300      	movs	r3, #0
}
 8008456:	4618      	mov	r0, r3
 8008458:	3708      	adds	r7, #8
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}

0800845e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800845e:	b480      	push	{r7}
 8008460:	b083      	sub	sp, #12
 8008462:	af00      	add	r7, sp, #0
 8008464:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008466:	2300      	movs	r3, #0
}
 8008468:	4618      	mov	r0, r3
 800846a:	370c      	adds	r7, #12
 800846c:	46bd      	mov	sp, r7
 800846e:	bc80      	pop	{r7}
 8008470:	4770      	bx	lr

08008472 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008472:	b580      	push	{r7, lr}
 8008474:	b084      	sub	sp, #16
 8008476:	af00      	add	r7, sp, #0
 8008478:	6078      	str	r0, [r7, #4]
 800847a:	460b      	mov	r3, r1
 800847c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800847e:	2302      	movs	r3, #2
 8008480:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008488:	2b00      	cmp	r3, #0
 800848a:	d00c      	beq.n	80084a6 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	78fa      	ldrb	r2, [r7, #3]
 8008496:	4611      	mov	r1, r2
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	4798      	blx	r3
 800849c:	4603      	mov	r3, r0
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d101      	bne.n	80084a6 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80084a2:	2300      	movs	r3, #0
 80084a4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80084a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	3710      	adds	r7, #16
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}

080084b0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b082      	sub	sp, #8
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
 80084b8:	460b      	mov	r3, r1
 80084ba:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084c2:	685b      	ldr	r3, [r3, #4]
 80084c4:	78fa      	ldrb	r2, [r7, #3]
 80084c6:	4611      	mov	r1, r2
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	4798      	blx	r3

  return USBD_OK;
 80084cc:	2300      	movs	r3, #0
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	3708      	adds	r7, #8
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}

080084d6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80084d6:	b580      	push	{r7, lr}
 80084d8:	b082      	sub	sp, #8
 80084da:	af00      	add	r7, sp, #0
 80084dc:	6078      	str	r0, [r7, #4]
 80084de:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80084e6:	6839      	ldr	r1, [r7, #0]
 80084e8:	4618      	mov	r0, r3
 80084ea:	f000 ff10 	bl	800930e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2201      	movs	r2, #1
 80084f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80084fc:	461a      	mov	r2, r3
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800850a:	f003 031f 	and.w	r3, r3, #31
 800850e:	2b02      	cmp	r3, #2
 8008510:	d016      	beq.n	8008540 <USBD_LL_SetupStage+0x6a>
 8008512:	2b02      	cmp	r3, #2
 8008514:	d81c      	bhi.n	8008550 <USBD_LL_SetupStage+0x7a>
 8008516:	2b00      	cmp	r3, #0
 8008518:	d002      	beq.n	8008520 <USBD_LL_SetupStage+0x4a>
 800851a:	2b01      	cmp	r3, #1
 800851c:	d008      	beq.n	8008530 <USBD_LL_SetupStage+0x5a>
 800851e:	e017      	b.n	8008550 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008526:	4619      	mov	r1, r3
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f000 fa03 	bl	8008934 <USBD_StdDevReq>
      break;
 800852e:	e01a      	b.n	8008566 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008536:	4619      	mov	r1, r3
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f000 fa65 	bl	8008a08 <USBD_StdItfReq>
      break;
 800853e:	e012      	b.n	8008566 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008546:	4619      	mov	r1, r3
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f000 faa5 	bl	8008a98 <USBD_StdEPReq>
      break;
 800854e:	e00a      	b.n	8008566 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008556:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800855a:	b2db      	uxtb	r3, r3
 800855c:	4619      	mov	r1, r3
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f001 fbd2 	bl	8009d08 <USBD_LL_StallEP>
      break;
 8008564:	bf00      	nop
  }

  return USBD_OK;
 8008566:	2300      	movs	r3, #0
}
 8008568:	4618      	mov	r0, r3
 800856a:	3708      	adds	r7, #8
 800856c:	46bd      	mov	sp, r7
 800856e:	bd80      	pop	{r7, pc}

08008570 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b086      	sub	sp, #24
 8008574:	af00      	add	r7, sp, #0
 8008576:	60f8      	str	r0, [r7, #12]
 8008578:	460b      	mov	r3, r1
 800857a:	607a      	str	r2, [r7, #4]
 800857c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800857e:	7afb      	ldrb	r3, [r7, #11]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d14b      	bne.n	800861c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800858a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008592:	2b03      	cmp	r3, #3
 8008594:	d134      	bne.n	8008600 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008596:	697b      	ldr	r3, [r7, #20]
 8008598:	68da      	ldr	r2, [r3, #12]
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	691b      	ldr	r3, [r3, #16]
 800859e:	429a      	cmp	r2, r3
 80085a0:	d919      	bls.n	80085d6 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	68da      	ldr	r2, [r3, #12]
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	691b      	ldr	r3, [r3, #16]
 80085aa:	1ad2      	subs	r2, r2, r3
 80085ac:	697b      	ldr	r3, [r7, #20]
 80085ae:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80085b0:	697b      	ldr	r3, [r7, #20]
 80085b2:	68da      	ldr	r2, [r3, #12]
 80085b4:	697b      	ldr	r3, [r7, #20]
 80085b6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80085b8:	429a      	cmp	r2, r3
 80085ba:	d203      	bcs.n	80085c4 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80085bc:	697b      	ldr	r3, [r7, #20]
 80085be:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80085c0:	b29b      	uxth	r3, r3
 80085c2:	e002      	b.n	80085ca <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80085c8:	b29b      	uxth	r3, r3
 80085ca:	461a      	mov	r2, r3
 80085cc:	6879      	ldr	r1, [r7, #4]
 80085ce:	68f8      	ldr	r0, [r7, #12]
 80085d0:	f000 ff8f 	bl	80094f2 <USBD_CtlContinueRx>
 80085d4:	e038      	b.n	8008648 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085dc:	691b      	ldr	r3, [r3, #16]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d00a      	beq.n	80085f8 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80085e8:	2b03      	cmp	r3, #3
 80085ea:	d105      	bne.n	80085f8 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085f2:	691b      	ldr	r3, [r3, #16]
 80085f4:	68f8      	ldr	r0, [r7, #12]
 80085f6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80085f8:	68f8      	ldr	r0, [r7, #12]
 80085fa:	f000 ff8c 	bl	8009516 <USBD_CtlSendStatus>
 80085fe:	e023      	b.n	8008648 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008606:	2b05      	cmp	r3, #5
 8008608:	d11e      	bne.n	8008648 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	2200      	movs	r2, #0
 800860e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008612:	2100      	movs	r1, #0
 8008614:	68f8      	ldr	r0, [r7, #12]
 8008616:	f001 fb77 	bl	8009d08 <USBD_LL_StallEP>
 800861a:	e015      	b.n	8008648 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008622:	699b      	ldr	r3, [r3, #24]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d00d      	beq.n	8008644 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800862e:	2b03      	cmp	r3, #3
 8008630:	d108      	bne.n	8008644 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008638:	699b      	ldr	r3, [r3, #24]
 800863a:	7afa      	ldrb	r2, [r7, #11]
 800863c:	4611      	mov	r1, r2
 800863e:	68f8      	ldr	r0, [r7, #12]
 8008640:	4798      	blx	r3
 8008642:	e001      	b.n	8008648 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008644:	2302      	movs	r3, #2
 8008646:	e000      	b.n	800864a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008648:	2300      	movs	r3, #0
}
 800864a:	4618      	mov	r0, r3
 800864c:	3718      	adds	r7, #24
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}

08008652 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008652:	b580      	push	{r7, lr}
 8008654:	b086      	sub	sp, #24
 8008656:	af00      	add	r7, sp, #0
 8008658:	60f8      	str	r0, [r7, #12]
 800865a:	460b      	mov	r3, r1
 800865c:	607a      	str	r2, [r7, #4]
 800865e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008660:	7afb      	ldrb	r3, [r7, #11]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d17f      	bne.n	8008766 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	3314      	adds	r3, #20
 800866a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008672:	2b02      	cmp	r3, #2
 8008674:	d15c      	bne.n	8008730 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	68da      	ldr	r2, [r3, #12]
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	691b      	ldr	r3, [r3, #16]
 800867e:	429a      	cmp	r2, r3
 8008680:	d915      	bls.n	80086ae <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008682:	697b      	ldr	r3, [r7, #20]
 8008684:	68da      	ldr	r2, [r3, #12]
 8008686:	697b      	ldr	r3, [r7, #20]
 8008688:	691b      	ldr	r3, [r3, #16]
 800868a:	1ad2      	subs	r2, r2, r3
 800868c:	697b      	ldr	r3, [r7, #20]
 800868e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008690:	697b      	ldr	r3, [r7, #20]
 8008692:	68db      	ldr	r3, [r3, #12]
 8008694:	b29b      	uxth	r3, r3
 8008696:	461a      	mov	r2, r3
 8008698:	6879      	ldr	r1, [r7, #4]
 800869a:	68f8      	ldr	r0, [r7, #12]
 800869c:	f000 fef9 	bl	8009492 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80086a0:	2300      	movs	r3, #0
 80086a2:	2200      	movs	r2, #0
 80086a4:	2100      	movs	r1, #0
 80086a6:	68f8      	ldr	r0, [r7, #12]
 80086a8:	f001 fbd9 	bl	8009e5e <USBD_LL_PrepareReceive>
 80086ac:	e04e      	b.n	800874c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80086ae:	697b      	ldr	r3, [r7, #20]
 80086b0:	689b      	ldr	r3, [r3, #8]
 80086b2:	697a      	ldr	r2, [r7, #20]
 80086b4:	6912      	ldr	r2, [r2, #16]
 80086b6:	fbb3 f1f2 	udiv	r1, r3, r2
 80086ba:	fb01 f202 	mul.w	r2, r1, r2
 80086be:	1a9b      	subs	r3, r3, r2
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d11c      	bne.n	80086fe <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80086c4:	697b      	ldr	r3, [r7, #20]
 80086c6:	689a      	ldr	r2, [r3, #8]
 80086c8:	697b      	ldr	r3, [r7, #20]
 80086ca:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80086cc:	429a      	cmp	r2, r3
 80086ce:	d316      	bcc.n	80086fe <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80086d0:	697b      	ldr	r3, [r7, #20]
 80086d2:	689a      	ldr	r2, [r3, #8]
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80086da:	429a      	cmp	r2, r3
 80086dc:	d20f      	bcs.n	80086fe <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80086de:	2200      	movs	r2, #0
 80086e0:	2100      	movs	r1, #0
 80086e2:	68f8      	ldr	r0, [r7, #12]
 80086e4:	f000 fed5 	bl	8009492 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	2200      	movs	r2, #0
 80086ec:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80086f0:	2300      	movs	r3, #0
 80086f2:	2200      	movs	r2, #0
 80086f4:	2100      	movs	r1, #0
 80086f6:	68f8      	ldr	r0, [r7, #12]
 80086f8:	f001 fbb1 	bl	8009e5e <USBD_LL_PrepareReceive>
 80086fc:	e026      	b.n	800874c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008704:	68db      	ldr	r3, [r3, #12]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d00a      	beq.n	8008720 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008710:	2b03      	cmp	r3, #3
 8008712:	d105      	bne.n	8008720 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800871a:	68db      	ldr	r3, [r3, #12]
 800871c:	68f8      	ldr	r0, [r7, #12]
 800871e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008720:	2180      	movs	r1, #128	; 0x80
 8008722:	68f8      	ldr	r0, [r7, #12]
 8008724:	f001 faf0 	bl	8009d08 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008728:	68f8      	ldr	r0, [r7, #12]
 800872a:	f000 ff07 	bl	800953c <USBD_CtlReceiveStatus>
 800872e:	e00d      	b.n	800874c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008736:	2b04      	cmp	r3, #4
 8008738:	d004      	beq.n	8008744 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008740:	2b00      	cmp	r3, #0
 8008742:	d103      	bne.n	800874c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008744:	2180      	movs	r1, #128	; 0x80
 8008746:	68f8      	ldr	r0, [r7, #12]
 8008748:	f001 fade 	bl	8009d08 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008752:	2b01      	cmp	r3, #1
 8008754:	d11d      	bne.n	8008792 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008756:	68f8      	ldr	r0, [r7, #12]
 8008758:	f7ff fe81 	bl	800845e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	2200      	movs	r2, #0
 8008760:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008764:	e015      	b.n	8008792 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800876c:	695b      	ldr	r3, [r3, #20]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d00d      	beq.n	800878e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008778:	2b03      	cmp	r3, #3
 800877a:	d108      	bne.n	800878e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008782:	695b      	ldr	r3, [r3, #20]
 8008784:	7afa      	ldrb	r2, [r7, #11]
 8008786:	4611      	mov	r1, r2
 8008788:	68f8      	ldr	r0, [r7, #12]
 800878a:	4798      	blx	r3
 800878c:	e001      	b.n	8008792 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800878e:	2302      	movs	r3, #2
 8008790:	e000      	b.n	8008794 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008792:	2300      	movs	r3, #0
}
 8008794:	4618      	mov	r0, r3
 8008796:	3718      	adds	r7, #24
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}

0800879c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b082      	sub	sp, #8
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80087a4:	2340      	movs	r3, #64	; 0x40
 80087a6:	2200      	movs	r2, #0
 80087a8:	2100      	movs	r1, #0
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f001 fa67 	bl	8009c7e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2201      	movs	r2, #1
 80087b4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2240      	movs	r2, #64	; 0x40
 80087bc:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80087c0:	2340      	movs	r3, #64	; 0x40
 80087c2:	2200      	movs	r2, #0
 80087c4:	2180      	movs	r1, #128	; 0x80
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f001 fa59 	bl	8009c7e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2201      	movs	r2, #1
 80087d0:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2240      	movs	r2, #64	; 0x40
 80087d6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2201      	movs	r2, #1
 80087dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2200      	movs	r2, #0
 80087e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2200      	movs	r2, #0
 80087ec:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2200      	movs	r2, #0
 80087f2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d009      	beq.n	8008814 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008806:	685b      	ldr	r3, [r3, #4]
 8008808:	687a      	ldr	r2, [r7, #4]
 800880a:	6852      	ldr	r2, [r2, #4]
 800880c:	b2d2      	uxtb	r2, r2
 800880e:	4611      	mov	r1, r2
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	4798      	blx	r3
  }

  return USBD_OK;
 8008814:	2300      	movs	r3, #0
}
 8008816:	4618      	mov	r0, r3
 8008818:	3708      	adds	r7, #8
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}

0800881e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800881e:	b480      	push	{r7}
 8008820:	b083      	sub	sp, #12
 8008822:	af00      	add	r7, sp, #0
 8008824:	6078      	str	r0, [r7, #4]
 8008826:	460b      	mov	r3, r1
 8008828:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	78fa      	ldrb	r2, [r7, #3]
 800882e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008830:	2300      	movs	r3, #0
}
 8008832:	4618      	mov	r0, r3
 8008834:	370c      	adds	r7, #12
 8008836:	46bd      	mov	sp, r7
 8008838:	bc80      	pop	{r7}
 800883a:	4770      	bx	lr

0800883c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800883c:	b480      	push	{r7}
 800883e:	b083      	sub	sp, #12
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2204      	movs	r2, #4
 8008854:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008858:	2300      	movs	r3, #0
}
 800885a:	4618      	mov	r0, r3
 800885c:	370c      	adds	r7, #12
 800885e:	46bd      	mov	sp, r7
 8008860:	bc80      	pop	{r7}
 8008862:	4770      	bx	lr

08008864 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008864:	b480      	push	{r7}
 8008866:	b083      	sub	sp, #12
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008872:	2b04      	cmp	r3, #4
 8008874:	d105      	bne.n	8008882 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008882:	2300      	movs	r3, #0
}
 8008884:	4618      	mov	r0, r3
 8008886:	370c      	adds	r7, #12
 8008888:	46bd      	mov	sp, r7
 800888a:	bc80      	pop	{r7}
 800888c:	4770      	bx	lr

0800888e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800888e:	b580      	push	{r7, lr}
 8008890:	b082      	sub	sp, #8
 8008892:	af00      	add	r7, sp, #0
 8008894:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800889c:	2b03      	cmp	r3, #3
 800889e:	d10b      	bne.n	80088b8 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088a6:	69db      	ldr	r3, [r3, #28]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d005      	beq.n	80088b8 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088b2:	69db      	ldr	r3, [r3, #28]
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80088b8:	2300      	movs	r3, #0
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	3708      	adds	r7, #8
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}

080088c2 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80088c2:	b480      	push	{r7}
 80088c4:	b083      	sub	sp, #12
 80088c6:	af00      	add	r7, sp, #0
 80088c8:	6078      	str	r0, [r7, #4]
 80088ca:	460b      	mov	r3, r1
 80088cc:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80088ce:	2300      	movs	r3, #0
}
 80088d0:	4618      	mov	r0, r3
 80088d2:	370c      	adds	r7, #12
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bc80      	pop	{r7}
 80088d8:	4770      	bx	lr

080088da <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80088da:	b480      	push	{r7}
 80088dc:	b083      	sub	sp, #12
 80088de:	af00      	add	r7, sp, #0
 80088e0:	6078      	str	r0, [r7, #4]
 80088e2:	460b      	mov	r3, r1
 80088e4:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80088e6:	2300      	movs	r3, #0
}
 80088e8:	4618      	mov	r0, r3
 80088ea:	370c      	adds	r7, #12
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bc80      	pop	{r7}
 80088f0:	4770      	bx	lr

080088f2 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80088f2:	b480      	push	{r7}
 80088f4:	b083      	sub	sp, #12
 80088f6:	af00      	add	r7, sp, #0
 80088f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80088fa:	2300      	movs	r3, #0
}
 80088fc:	4618      	mov	r0, r3
 80088fe:	370c      	adds	r7, #12
 8008900:	46bd      	mov	sp, r7
 8008902:	bc80      	pop	{r7}
 8008904:	4770      	bx	lr

08008906 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008906:	b580      	push	{r7, lr}
 8008908:	b082      	sub	sp, #8
 800890a:	af00      	add	r7, sp, #0
 800890c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2201      	movs	r2, #1
 8008912:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800891c:	685b      	ldr	r3, [r3, #4]
 800891e:	687a      	ldr	r2, [r7, #4]
 8008920:	6852      	ldr	r2, [r2, #4]
 8008922:	b2d2      	uxtb	r2, r2
 8008924:	4611      	mov	r1, r2
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	4798      	blx	r3

  return USBD_OK;
 800892a:	2300      	movs	r3, #0
}
 800892c:	4618      	mov	r0, r3
 800892e:	3708      	adds	r7, #8
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}

08008934 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b084      	sub	sp, #16
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
 800893c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800893e:	2300      	movs	r3, #0
 8008940:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	781b      	ldrb	r3, [r3, #0]
 8008946:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800894a:	2b40      	cmp	r3, #64	; 0x40
 800894c:	d005      	beq.n	800895a <USBD_StdDevReq+0x26>
 800894e:	2b40      	cmp	r3, #64	; 0x40
 8008950:	d84f      	bhi.n	80089f2 <USBD_StdDevReq+0xbe>
 8008952:	2b00      	cmp	r3, #0
 8008954:	d009      	beq.n	800896a <USBD_StdDevReq+0x36>
 8008956:	2b20      	cmp	r3, #32
 8008958:	d14b      	bne.n	80089f2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008960:	689b      	ldr	r3, [r3, #8]
 8008962:	6839      	ldr	r1, [r7, #0]
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	4798      	blx	r3
      break;
 8008968:	e048      	b.n	80089fc <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	785b      	ldrb	r3, [r3, #1]
 800896e:	2b09      	cmp	r3, #9
 8008970:	d839      	bhi.n	80089e6 <USBD_StdDevReq+0xb2>
 8008972:	a201      	add	r2, pc, #4	; (adr r2, 8008978 <USBD_StdDevReq+0x44>)
 8008974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008978:	080089c9 	.word	0x080089c9
 800897c:	080089dd 	.word	0x080089dd
 8008980:	080089e7 	.word	0x080089e7
 8008984:	080089d3 	.word	0x080089d3
 8008988:	080089e7 	.word	0x080089e7
 800898c:	080089ab 	.word	0x080089ab
 8008990:	080089a1 	.word	0x080089a1
 8008994:	080089e7 	.word	0x080089e7
 8008998:	080089bf 	.word	0x080089bf
 800899c:	080089b5 	.word	0x080089b5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80089a0:	6839      	ldr	r1, [r7, #0]
 80089a2:	6878      	ldr	r0, [r7, #4]
 80089a4:	f000 f9dc 	bl	8008d60 <USBD_GetDescriptor>
          break;
 80089a8:	e022      	b.n	80089f0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80089aa:	6839      	ldr	r1, [r7, #0]
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f000 fb3f 	bl	8009030 <USBD_SetAddress>
          break;
 80089b2:	e01d      	b.n	80089f0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80089b4:	6839      	ldr	r1, [r7, #0]
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f000 fb7e 	bl	80090b8 <USBD_SetConfig>
          break;
 80089bc:	e018      	b.n	80089f0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80089be:	6839      	ldr	r1, [r7, #0]
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	f000 fc07 	bl	80091d4 <USBD_GetConfig>
          break;
 80089c6:	e013      	b.n	80089f0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80089c8:	6839      	ldr	r1, [r7, #0]
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f000 fc37 	bl	800923e <USBD_GetStatus>
          break;
 80089d0:	e00e      	b.n	80089f0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80089d2:	6839      	ldr	r1, [r7, #0]
 80089d4:	6878      	ldr	r0, [r7, #4]
 80089d6:	f000 fc65 	bl	80092a4 <USBD_SetFeature>
          break;
 80089da:	e009      	b.n	80089f0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80089dc:	6839      	ldr	r1, [r7, #0]
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f000 fc74 	bl	80092cc <USBD_ClrFeature>
          break;
 80089e4:	e004      	b.n	80089f0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80089e6:	6839      	ldr	r1, [r7, #0]
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	f000 fccc 	bl	8009386 <USBD_CtlError>
          break;
 80089ee:	bf00      	nop
      }
      break;
 80089f0:	e004      	b.n	80089fc <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80089f2:	6839      	ldr	r1, [r7, #0]
 80089f4:	6878      	ldr	r0, [r7, #4]
 80089f6:	f000 fcc6 	bl	8009386 <USBD_CtlError>
      break;
 80089fa:	bf00      	nop
  }

  return ret;
 80089fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	3710      	adds	r7, #16
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}
 8008a06:	bf00      	nop

08008a08 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b084      	sub	sp, #16
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
 8008a10:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a12:	2300      	movs	r3, #0
 8008a14:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	781b      	ldrb	r3, [r3, #0]
 8008a1a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008a1e:	2b40      	cmp	r3, #64	; 0x40
 8008a20:	d005      	beq.n	8008a2e <USBD_StdItfReq+0x26>
 8008a22:	2b40      	cmp	r3, #64	; 0x40
 8008a24:	d82e      	bhi.n	8008a84 <USBD_StdItfReq+0x7c>
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d001      	beq.n	8008a2e <USBD_StdItfReq+0x26>
 8008a2a:	2b20      	cmp	r3, #32
 8008a2c:	d12a      	bne.n	8008a84 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a34:	3b01      	subs	r3, #1
 8008a36:	2b02      	cmp	r3, #2
 8008a38:	d81d      	bhi.n	8008a76 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	889b      	ldrh	r3, [r3, #4]
 8008a3e:	b2db      	uxtb	r3, r3
 8008a40:	2b01      	cmp	r3, #1
 8008a42:	d813      	bhi.n	8008a6c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a4a:	689b      	ldr	r3, [r3, #8]
 8008a4c:	6839      	ldr	r1, [r7, #0]
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	4798      	blx	r3
 8008a52:	4603      	mov	r3, r0
 8008a54:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	88db      	ldrh	r3, [r3, #6]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d110      	bne.n	8008a80 <USBD_StdItfReq+0x78>
 8008a5e:	7bfb      	ldrb	r3, [r7, #15]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d10d      	bne.n	8008a80 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f000 fd56 	bl	8009516 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008a6a:	e009      	b.n	8008a80 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008a6c:	6839      	ldr	r1, [r7, #0]
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f000 fc89 	bl	8009386 <USBD_CtlError>
          break;
 8008a74:	e004      	b.n	8008a80 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8008a76:	6839      	ldr	r1, [r7, #0]
 8008a78:	6878      	ldr	r0, [r7, #4]
 8008a7a:	f000 fc84 	bl	8009386 <USBD_CtlError>
          break;
 8008a7e:	e000      	b.n	8008a82 <USBD_StdItfReq+0x7a>
          break;
 8008a80:	bf00      	nop
      }
      break;
 8008a82:	e004      	b.n	8008a8e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008a84:	6839      	ldr	r1, [r7, #0]
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f000 fc7d 	bl	8009386 <USBD_CtlError>
      break;
 8008a8c:	bf00      	nop
  }

  return USBD_OK;
 8008a8e:	2300      	movs	r3, #0
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	3710      	adds	r7, #16
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bd80      	pop	{r7, pc}

08008a98 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b084      	sub	sp, #16
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
 8008aa0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	889b      	ldrh	r3, [r3, #4]
 8008aaa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	781b      	ldrb	r3, [r3, #0]
 8008ab0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008ab4:	2b40      	cmp	r3, #64	; 0x40
 8008ab6:	d007      	beq.n	8008ac8 <USBD_StdEPReq+0x30>
 8008ab8:	2b40      	cmp	r3, #64	; 0x40
 8008aba:	f200 8146 	bhi.w	8008d4a <USBD_StdEPReq+0x2b2>
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d00a      	beq.n	8008ad8 <USBD_StdEPReq+0x40>
 8008ac2:	2b20      	cmp	r3, #32
 8008ac4:	f040 8141 	bne.w	8008d4a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ace:	689b      	ldr	r3, [r3, #8]
 8008ad0:	6839      	ldr	r1, [r7, #0]
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	4798      	blx	r3
      break;
 8008ad6:	e13d      	b.n	8008d54 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	781b      	ldrb	r3, [r3, #0]
 8008adc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008ae0:	2b20      	cmp	r3, #32
 8008ae2:	d10a      	bne.n	8008afa <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008aea:	689b      	ldr	r3, [r3, #8]
 8008aec:	6839      	ldr	r1, [r7, #0]
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	4798      	blx	r3
 8008af2:	4603      	mov	r3, r0
 8008af4:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008af6:	7bfb      	ldrb	r3, [r7, #15]
 8008af8:	e12d      	b.n	8008d56 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	785b      	ldrb	r3, [r3, #1]
 8008afe:	2b03      	cmp	r3, #3
 8008b00:	d007      	beq.n	8008b12 <USBD_StdEPReq+0x7a>
 8008b02:	2b03      	cmp	r3, #3
 8008b04:	f300 811b 	bgt.w	8008d3e <USBD_StdEPReq+0x2a6>
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d072      	beq.n	8008bf2 <USBD_StdEPReq+0x15a>
 8008b0c:	2b01      	cmp	r3, #1
 8008b0e:	d03a      	beq.n	8008b86 <USBD_StdEPReq+0xee>
 8008b10:	e115      	b.n	8008d3e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b18:	2b02      	cmp	r3, #2
 8008b1a:	d002      	beq.n	8008b22 <USBD_StdEPReq+0x8a>
 8008b1c:	2b03      	cmp	r3, #3
 8008b1e:	d015      	beq.n	8008b4c <USBD_StdEPReq+0xb4>
 8008b20:	e02b      	b.n	8008b7a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008b22:	7bbb      	ldrb	r3, [r7, #14]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d00c      	beq.n	8008b42 <USBD_StdEPReq+0xaa>
 8008b28:	7bbb      	ldrb	r3, [r7, #14]
 8008b2a:	2b80      	cmp	r3, #128	; 0x80
 8008b2c:	d009      	beq.n	8008b42 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008b2e:	7bbb      	ldrb	r3, [r7, #14]
 8008b30:	4619      	mov	r1, r3
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f001 f8e8 	bl	8009d08 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008b38:	2180      	movs	r1, #128	; 0x80
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f001 f8e4 	bl	8009d08 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008b40:	e020      	b.n	8008b84 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8008b42:	6839      	ldr	r1, [r7, #0]
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f000 fc1e 	bl	8009386 <USBD_CtlError>
              break;
 8008b4a:	e01b      	b.n	8008b84 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	885b      	ldrh	r3, [r3, #2]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d10e      	bne.n	8008b72 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008b54:	7bbb      	ldrb	r3, [r7, #14]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d00b      	beq.n	8008b72 <USBD_StdEPReq+0xda>
 8008b5a:	7bbb      	ldrb	r3, [r7, #14]
 8008b5c:	2b80      	cmp	r3, #128	; 0x80
 8008b5e:	d008      	beq.n	8008b72 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	88db      	ldrh	r3, [r3, #6]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d104      	bne.n	8008b72 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008b68:	7bbb      	ldrb	r3, [r7, #14]
 8008b6a:	4619      	mov	r1, r3
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f001 f8cb 	bl	8009d08 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	f000 fccf 	bl	8009516 <USBD_CtlSendStatus>

              break;
 8008b78:	e004      	b.n	8008b84 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8008b7a:	6839      	ldr	r1, [r7, #0]
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f000 fc02 	bl	8009386 <USBD_CtlError>
              break;
 8008b82:	bf00      	nop
          }
          break;
 8008b84:	e0e0      	b.n	8008d48 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b8c:	2b02      	cmp	r3, #2
 8008b8e:	d002      	beq.n	8008b96 <USBD_StdEPReq+0xfe>
 8008b90:	2b03      	cmp	r3, #3
 8008b92:	d015      	beq.n	8008bc0 <USBD_StdEPReq+0x128>
 8008b94:	e026      	b.n	8008be4 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008b96:	7bbb      	ldrb	r3, [r7, #14]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d00c      	beq.n	8008bb6 <USBD_StdEPReq+0x11e>
 8008b9c:	7bbb      	ldrb	r3, [r7, #14]
 8008b9e:	2b80      	cmp	r3, #128	; 0x80
 8008ba0:	d009      	beq.n	8008bb6 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008ba2:	7bbb      	ldrb	r3, [r7, #14]
 8008ba4:	4619      	mov	r1, r3
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f001 f8ae 	bl	8009d08 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008bac:	2180      	movs	r1, #128	; 0x80
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f001 f8aa 	bl	8009d08 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008bb4:	e01c      	b.n	8008bf0 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8008bb6:	6839      	ldr	r1, [r7, #0]
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	f000 fbe4 	bl	8009386 <USBD_CtlError>
              break;
 8008bbe:	e017      	b.n	8008bf0 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	885b      	ldrh	r3, [r3, #2]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d112      	bne.n	8008bee <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008bc8:	7bbb      	ldrb	r3, [r7, #14]
 8008bca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d004      	beq.n	8008bdc <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008bd2:	7bbb      	ldrb	r3, [r7, #14]
 8008bd4:	4619      	mov	r1, r3
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	f001 f8b5 	bl	8009d46 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f000 fc9a 	bl	8009516 <USBD_CtlSendStatus>
              }
              break;
 8008be2:	e004      	b.n	8008bee <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008be4:	6839      	ldr	r1, [r7, #0]
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f000 fbcd 	bl	8009386 <USBD_CtlError>
              break;
 8008bec:	e000      	b.n	8008bf0 <USBD_StdEPReq+0x158>
              break;
 8008bee:	bf00      	nop
          }
          break;
 8008bf0:	e0aa      	b.n	8008d48 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bf8:	2b02      	cmp	r3, #2
 8008bfa:	d002      	beq.n	8008c02 <USBD_StdEPReq+0x16a>
 8008bfc:	2b03      	cmp	r3, #3
 8008bfe:	d032      	beq.n	8008c66 <USBD_StdEPReq+0x1ce>
 8008c00:	e097      	b.n	8008d32 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008c02:	7bbb      	ldrb	r3, [r7, #14]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d007      	beq.n	8008c18 <USBD_StdEPReq+0x180>
 8008c08:	7bbb      	ldrb	r3, [r7, #14]
 8008c0a:	2b80      	cmp	r3, #128	; 0x80
 8008c0c:	d004      	beq.n	8008c18 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8008c0e:	6839      	ldr	r1, [r7, #0]
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	f000 fbb8 	bl	8009386 <USBD_CtlError>
                break;
 8008c16:	e091      	b.n	8008d3c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c18:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	da0b      	bge.n	8008c38 <USBD_StdEPReq+0x1a0>
 8008c20:	7bbb      	ldrb	r3, [r7, #14]
 8008c22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c26:	4613      	mov	r3, r2
 8008c28:	009b      	lsls	r3, r3, #2
 8008c2a:	4413      	add	r3, r2
 8008c2c:	009b      	lsls	r3, r3, #2
 8008c2e:	3310      	adds	r3, #16
 8008c30:	687a      	ldr	r2, [r7, #4]
 8008c32:	4413      	add	r3, r2
 8008c34:	3304      	adds	r3, #4
 8008c36:	e00b      	b.n	8008c50 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008c38:	7bbb      	ldrb	r3, [r7, #14]
 8008c3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c3e:	4613      	mov	r3, r2
 8008c40:	009b      	lsls	r3, r3, #2
 8008c42:	4413      	add	r3, r2
 8008c44:	009b      	lsls	r3, r3, #2
 8008c46:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008c4a:	687a      	ldr	r2, [r7, #4]
 8008c4c:	4413      	add	r3, r2
 8008c4e:	3304      	adds	r3, #4
 8008c50:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	2200      	movs	r2, #0
 8008c56:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	2202      	movs	r2, #2
 8008c5c:	4619      	mov	r1, r3
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	f000 fbfb 	bl	800945a <USBD_CtlSendData>
              break;
 8008c64:	e06a      	b.n	8008d3c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008c66:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	da11      	bge.n	8008c92 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008c6e:	7bbb      	ldrb	r3, [r7, #14]
 8008c70:	f003 020f 	and.w	r2, r3, #15
 8008c74:	6879      	ldr	r1, [r7, #4]
 8008c76:	4613      	mov	r3, r2
 8008c78:	009b      	lsls	r3, r3, #2
 8008c7a:	4413      	add	r3, r2
 8008c7c:	009b      	lsls	r3, r3, #2
 8008c7e:	440b      	add	r3, r1
 8008c80:	3318      	adds	r3, #24
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d117      	bne.n	8008cb8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008c88:	6839      	ldr	r1, [r7, #0]
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f000 fb7b 	bl	8009386 <USBD_CtlError>
                  break;
 8008c90:	e054      	b.n	8008d3c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008c92:	7bbb      	ldrb	r3, [r7, #14]
 8008c94:	f003 020f 	and.w	r2, r3, #15
 8008c98:	6879      	ldr	r1, [r7, #4]
 8008c9a:	4613      	mov	r3, r2
 8008c9c:	009b      	lsls	r3, r3, #2
 8008c9e:	4413      	add	r3, r2
 8008ca0:	009b      	lsls	r3, r3, #2
 8008ca2:	440b      	add	r3, r1
 8008ca4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d104      	bne.n	8008cb8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008cae:	6839      	ldr	r1, [r7, #0]
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f000 fb68 	bl	8009386 <USBD_CtlError>
                  break;
 8008cb6:	e041      	b.n	8008d3c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008cb8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	da0b      	bge.n	8008cd8 <USBD_StdEPReq+0x240>
 8008cc0:	7bbb      	ldrb	r3, [r7, #14]
 8008cc2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008cc6:	4613      	mov	r3, r2
 8008cc8:	009b      	lsls	r3, r3, #2
 8008cca:	4413      	add	r3, r2
 8008ccc:	009b      	lsls	r3, r3, #2
 8008cce:	3310      	adds	r3, #16
 8008cd0:	687a      	ldr	r2, [r7, #4]
 8008cd2:	4413      	add	r3, r2
 8008cd4:	3304      	adds	r3, #4
 8008cd6:	e00b      	b.n	8008cf0 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008cd8:	7bbb      	ldrb	r3, [r7, #14]
 8008cda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008cde:	4613      	mov	r3, r2
 8008ce0:	009b      	lsls	r3, r3, #2
 8008ce2:	4413      	add	r3, r2
 8008ce4:	009b      	lsls	r3, r3, #2
 8008ce6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008cea:	687a      	ldr	r2, [r7, #4]
 8008cec:	4413      	add	r3, r2
 8008cee:	3304      	adds	r3, #4
 8008cf0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008cf2:	7bbb      	ldrb	r3, [r7, #14]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d002      	beq.n	8008cfe <USBD_StdEPReq+0x266>
 8008cf8:	7bbb      	ldrb	r3, [r7, #14]
 8008cfa:	2b80      	cmp	r3, #128	; 0x80
 8008cfc:	d103      	bne.n	8008d06 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	2200      	movs	r2, #0
 8008d02:	601a      	str	r2, [r3, #0]
 8008d04:	e00e      	b.n	8008d24 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008d06:	7bbb      	ldrb	r3, [r7, #14]
 8008d08:	4619      	mov	r1, r3
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f001 f83a 	bl	8009d84 <USBD_LL_IsStallEP>
 8008d10:	4603      	mov	r3, r0
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d003      	beq.n	8008d1e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	2201      	movs	r2, #1
 8008d1a:	601a      	str	r2, [r3, #0]
 8008d1c:	e002      	b.n	8008d24 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	2200      	movs	r2, #0
 8008d22:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	2202      	movs	r2, #2
 8008d28:	4619      	mov	r1, r3
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f000 fb95 	bl	800945a <USBD_CtlSendData>
              break;
 8008d30:	e004      	b.n	8008d3c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8008d32:	6839      	ldr	r1, [r7, #0]
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f000 fb26 	bl	8009386 <USBD_CtlError>
              break;
 8008d3a:	bf00      	nop
          }
          break;
 8008d3c:	e004      	b.n	8008d48 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8008d3e:	6839      	ldr	r1, [r7, #0]
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f000 fb20 	bl	8009386 <USBD_CtlError>
          break;
 8008d46:	bf00      	nop
      }
      break;
 8008d48:	e004      	b.n	8008d54 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8008d4a:	6839      	ldr	r1, [r7, #0]
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f000 fb1a 	bl	8009386 <USBD_CtlError>
      break;
 8008d52:	bf00      	nop
  }

  return ret;
 8008d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	3710      	adds	r7, #16
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}
	...

08008d60 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b084      	sub	sp, #16
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
 8008d68:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008d72:	2300      	movs	r3, #0
 8008d74:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	885b      	ldrh	r3, [r3, #2]
 8008d7a:	0a1b      	lsrs	r3, r3, #8
 8008d7c:	b29b      	uxth	r3, r3
 8008d7e:	3b01      	subs	r3, #1
 8008d80:	2b06      	cmp	r3, #6
 8008d82:	f200 8128 	bhi.w	8008fd6 <USBD_GetDescriptor+0x276>
 8008d86:	a201      	add	r2, pc, #4	; (adr r2, 8008d8c <USBD_GetDescriptor+0x2c>)
 8008d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d8c:	08008da9 	.word	0x08008da9
 8008d90:	08008dc1 	.word	0x08008dc1
 8008d94:	08008e01 	.word	0x08008e01
 8008d98:	08008fd7 	.word	0x08008fd7
 8008d9c:	08008fd7 	.word	0x08008fd7
 8008da0:	08008f77 	.word	0x08008f77
 8008da4:	08008fa3 	.word	0x08008fa3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	687a      	ldr	r2, [r7, #4]
 8008db2:	7c12      	ldrb	r2, [r2, #16]
 8008db4:	f107 0108 	add.w	r1, r7, #8
 8008db8:	4610      	mov	r0, r2
 8008dba:	4798      	blx	r3
 8008dbc:	60f8      	str	r0, [r7, #12]
      break;
 8008dbe:	e112      	b.n	8008fe6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	7c1b      	ldrb	r3, [r3, #16]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d10d      	bne.n	8008de4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dd0:	f107 0208 	add.w	r2, r7, #8
 8008dd4:	4610      	mov	r0, r2
 8008dd6:	4798      	blx	r3
 8008dd8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	3301      	adds	r3, #1
 8008dde:	2202      	movs	r2, #2
 8008de0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008de2:	e100      	b.n	8008fe6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dec:	f107 0208 	add.w	r2, r7, #8
 8008df0:	4610      	mov	r0, r2
 8008df2:	4798      	blx	r3
 8008df4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	3301      	adds	r3, #1
 8008dfa:	2202      	movs	r2, #2
 8008dfc:	701a      	strb	r2, [r3, #0]
      break;
 8008dfe:	e0f2      	b.n	8008fe6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	885b      	ldrh	r3, [r3, #2]
 8008e04:	b2db      	uxtb	r3, r3
 8008e06:	2b05      	cmp	r3, #5
 8008e08:	f200 80ac 	bhi.w	8008f64 <USBD_GetDescriptor+0x204>
 8008e0c:	a201      	add	r2, pc, #4	; (adr r2, 8008e14 <USBD_GetDescriptor+0xb4>)
 8008e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e12:	bf00      	nop
 8008e14:	08008e2d 	.word	0x08008e2d
 8008e18:	08008e61 	.word	0x08008e61
 8008e1c:	08008e95 	.word	0x08008e95
 8008e20:	08008ec9 	.word	0x08008ec9
 8008e24:	08008efd 	.word	0x08008efd
 8008e28:	08008f31 	.word	0x08008f31
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008e32:	685b      	ldr	r3, [r3, #4]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d00b      	beq.n	8008e50 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008e3e:	685b      	ldr	r3, [r3, #4]
 8008e40:	687a      	ldr	r2, [r7, #4]
 8008e42:	7c12      	ldrb	r2, [r2, #16]
 8008e44:	f107 0108 	add.w	r1, r7, #8
 8008e48:	4610      	mov	r0, r2
 8008e4a:	4798      	blx	r3
 8008e4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e4e:	e091      	b.n	8008f74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e50:	6839      	ldr	r1, [r7, #0]
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f000 fa97 	bl	8009386 <USBD_CtlError>
            err++;
 8008e58:	7afb      	ldrb	r3, [r7, #11]
 8008e5a:	3301      	adds	r3, #1
 8008e5c:	72fb      	strb	r3, [r7, #11]
          break;
 8008e5e:	e089      	b.n	8008f74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008e66:	689b      	ldr	r3, [r3, #8]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d00b      	beq.n	8008e84 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008e72:	689b      	ldr	r3, [r3, #8]
 8008e74:	687a      	ldr	r2, [r7, #4]
 8008e76:	7c12      	ldrb	r2, [r2, #16]
 8008e78:	f107 0108 	add.w	r1, r7, #8
 8008e7c:	4610      	mov	r0, r2
 8008e7e:	4798      	blx	r3
 8008e80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e82:	e077      	b.n	8008f74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e84:	6839      	ldr	r1, [r7, #0]
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f000 fa7d 	bl	8009386 <USBD_CtlError>
            err++;
 8008e8c:	7afb      	ldrb	r3, [r7, #11]
 8008e8e:	3301      	adds	r3, #1
 8008e90:	72fb      	strb	r3, [r7, #11]
          break;
 8008e92:	e06f      	b.n	8008f74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008e9a:	68db      	ldr	r3, [r3, #12]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d00b      	beq.n	8008eb8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008ea6:	68db      	ldr	r3, [r3, #12]
 8008ea8:	687a      	ldr	r2, [r7, #4]
 8008eaa:	7c12      	ldrb	r2, [r2, #16]
 8008eac:	f107 0108 	add.w	r1, r7, #8
 8008eb0:	4610      	mov	r0, r2
 8008eb2:	4798      	blx	r3
 8008eb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008eb6:	e05d      	b.n	8008f74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008eb8:	6839      	ldr	r1, [r7, #0]
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	f000 fa63 	bl	8009386 <USBD_CtlError>
            err++;
 8008ec0:	7afb      	ldrb	r3, [r7, #11]
 8008ec2:	3301      	adds	r3, #1
 8008ec4:	72fb      	strb	r3, [r7, #11]
          break;
 8008ec6:	e055      	b.n	8008f74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008ece:	691b      	ldr	r3, [r3, #16]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d00b      	beq.n	8008eec <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008eda:	691b      	ldr	r3, [r3, #16]
 8008edc:	687a      	ldr	r2, [r7, #4]
 8008ede:	7c12      	ldrb	r2, [r2, #16]
 8008ee0:	f107 0108 	add.w	r1, r7, #8
 8008ee4:	4610      	mov	r0, r2
 8008ee6:	4798      	blx	r3
 8008ee8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008eea:	e043      	b.n	8008f74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008eec:	6839      	ldr	r1, [r7, #0]
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	f000 fa49 	bl	8009386 <USBD_CtlError>
            err++;
 8008ef4:	7afb      	ldrb	r3, [r7, #11]
 8008ef6:	3301      	adds	r3, #1
 8008ef8:	72fb      	strb	r3, [r7, #11]
          break;
 8008efa:	e03b      	b.n	8008f74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f02:	695b      	ldr	r3, [r3, #20]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d00b      	beq.n	8008f20 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f0e:	695b      	ldr	r3, [r3, #20]
 8008f10:	687a      	ldr	r2, [r7, #4]
 8008f12:	7c12      	ldrb	r2, [r2, #16]
 8008f14:	f107 0108 	add.w	r1, r7, #8
 8008f18:	4610      	mov	r0, r2
 8008f1a:	4798      	blx	r3
 8008f1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f1e:	e029      	b.n	8008f74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f20:	6839      	ldr	r1, [r7, #0]
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f000 fa2f 	bl	8009386 <USBD_CtlError>
            err++;
 8008f28:	7afb      	ldrb	r3, [r7, #11]
 8008f2a:	3301      	adds	r3, #1
 8008f2c:	72fb      	strb	r3, [r7, #11]
          break;
 8008f2e:	e021      	b.n	8008f74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f36:	699b      	ldr	r3, [r3, #24]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d00b      	beq.n	8008f54 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f42:	699b      	ldr	r3, [r3, #24]
 8008f44:	687a      	ldr	r2, [r7, #4]
 8008f46:	7c12      	ldrb	r2, [r2, #16]
 8008f48:	f107 0108 	add.w	r1, r7, #8
 8008f4c:	4610      	mov	r0, r2
 8008f4e:	4798      	blx	r3
 8008f50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f52:	e00f      	b.n	8008f74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f54:	6839      	ldr	r1, [r7, #0]
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f000 fa15 	bl	8009386 <USBD_CtlError>
            err++;
 8008f5c:	7afb      	ldrb	r3, [r7, #11]
 8008f5e:	3301      	adds	r3, #1
 8008f60:	72fb      	strb	r3, [r7, #11]
          break;
 8008f62:	e007      	b.n	8008f74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008f64:	6839      	ldr	r1, [r7, #0]
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	f000 fa0d 	bl	8009386 <USBD_CtlError>
          err++;
 8008f6c:	7afb      	ldrb	r3, [r7, #11]
 8008f6e:	3301      	adds	r3, #1
 8008f70:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008f72:	e038      	b.n	8008fe6 <USBD_GetDescriptor+0x286>
 8008f74:	e037      	b.n	8008fe6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	7c1b      	ldrb	r3, [r3, #16]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d109      	bne.n	8008f92 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f86:	f107 0208 	add.w	r2, r7, #8
 8008f8a:	4610      	mov	r0, r2
 8008f8c:	4798      	blx	r3
 8008f8e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008f90:	e029      	b.n	8008fe6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008f92:	6839      	ldr	r1, [r7, #0]
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f000 f9f6 	bl	8009386 <USBD_CtlError>
        err++;
 8008f9a:	7afb      	ldrb	r3, [r7, #11]
 8008f9c:	3301      	adds	r3, #1
 8008f9e:	72fb      	strb	r3, [r7, #11]
      break;
 8008fa0:	e021      	b.n	8008fe6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	7c1b      	ldrb	r3, [r3, #16]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d10d      	bne.n	8008fc6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fb2:	f107 0208 	add.w	r2, r7, #8
 8008fb6:	4610      	mov	r0, r2
 8008fb8:	4798      	blx	r3
 8008fba:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	3301      	adds	r3, #1
 8008fc0:	2207      	movs	r2, #7
 8008fc2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008fc4:	e00f      	b.n	8008fe6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008fc6:	6839      	ldr	r1, [r7, #0]
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f000 f9dc 	bl	8009386 <USBD_CtlError>
        err++;
 8008fce:	7afb      	ldrb	r3, [r7, #11]
 8008fd0:	3301      	adds	r3, #1
 8008fd2:	72fb      	strb	r3, [r7, #11]
      break;
 8008fd4:	e007      	b.n	8008fe6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008fd6:	6839      	ldr	r1, [r7, #0]
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f000 f9d4 	bl	8009386 <USBD_CtlError>
      err++;
 8008fde:	7afb      	ldrb	r3, [r7, #11]
 8008fe0:	3301      	adds	r3, #1
 8008fe2:	72fb      	strb	r3, [r7, #11]
      break;
 8008fe4:	bf00      	nop
  }

  if (err != 0U)
 8008fe6:	7afb      	ldrb	r3, [r7, #11]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d11c      	bne.n	8009026 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008fec:	893b      	ldrh	r3, [r7, #8]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d011      	beq.n	8009016 <USBD_GetDescriptor+0x2b6>
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	88db      	ldrh	r3, [r3, #6]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d00d      	beq.n	8009016 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	88da      	ldrh	r2, [r3, #6]
 8008ffe:	893b      	ldrh	r3, [r7, #8]
 8009000:	4293      	cmp	r3, r2
 8009002:	bf28      	it	cs
 8009004:	4613      	movcs	r3, r2
 8009006:	b29b      	uxth	r3, r3
 8009008:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800900a:	893b      	ldrh	r3, [r7, #8]
 800900c:	461a      	mov	r2, r3
 800900e:	68f9      	ldr	r1, [r7, #12]
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	f000 fa22 	bl	800945a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	88db      	ldrh	r3, [r3, #6]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d104      	bne.n	8009028 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f000 fa79 	bl	8009516 <USBD_CtlSendStatus>
 8009024:	e000      	b.n	8009028 <USBD_GetDescriptor+0x2c8>
    return;
 8009026:	bf00      	nop
    }
  }
}
 8009028:	3710      	adds	r7, #16
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}
 800902e:	bf00      	nop

08009030 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b084      	sub	sp, #16
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
 8009038:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	889b      	ldrh	r3, [r3, #4]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d130      	bne.n	80090a4 <USBD_SetAddress+0x74>
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	88db      	ldrh	r3, [r3, #6]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d12c      	bne.n	80090a4 <USBD_SetAddress+0x74>
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	885b      	ldrh	r3, [r3, #2]
 800904e:	2b7f      	cmp	r3, #127	; 0x7f
 8009050:	d828      	bhi.n	80090a4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	885b      	ldrh	r3, [r3, #2]
 8009056:	b2db      	uxtb	r3, r3
 8009058:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800905c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009064:	2b03      	cmp	r3, #3
 8009066:	d104      	bne.n	8009072 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009068:	6839      	ldr	r1, [r7, #0]
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	f000 f98b 	bl	8009386 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009070:	e01d      	b.n	80090ae <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	7bfa      	ldrb	r2, [r7, #15]
 8009076:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800907a:	7bfb      	ldrb	r3, [r7, #15]
 800907c:	4619      	mov	r1, r3
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f000 feab 	bl	8009dda <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f000 fa46 	bl	8009516 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800908a:	7bfb      	ldrb	r3, [r7, #15]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d004      	beq.n	800909a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2202      	movs	r2, #2
 8009094:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009098:	e009      	b.n	80090ae <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2201      	movs	r2, #1
 800909e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090a2:	e004      	b.n	80090ae <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80090a4:	6839      	ldr	r1, [r7, #0]
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f000 f96d 	bl	8009386 <USBD_CtlError>
  }
}
 80090ac:	bf00      	nop
 80090ae:	bf00      	nop
 80090b0:	3710      	adds	r7, #16
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}
	...

080090b8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b082      	sub	sp, #8
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
 80090c0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	885b      	ldrh	r3, [r3, #2]
 80090c6:	b2da      	uxtb	r2, r3
 80090c8:	4b41      	ldr	r3, [pc, #260]	; (80091d0 <USBD_SetConfig+0x118>)
 80090ca:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80090cc:	4b40      	ldr	r3, [pc, #256]	; (80091d0 <USBD_SetConfig+0x118>)
 80090ce:	781b      	ldrb	r3, [r3, #0]
 80090d0:	2b01      	cmp	r3, #1
 80090d2:	d904      	bls.n	80090de <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80090d4:	6839      	ldr	r1, [r7, #0]
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f000 f955 	bl	8009386 <USBD_CtlError>
 80090dc:	e075      	b.n	80091ca <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090e4:	2b02      	cmp	r3, #2
 80090e6:	d002      	beq.n	80090ee <USBD_SetConfig+0x36>
 80090e8:	2b03      	cmp	r3, #3
 80090ea:	d023      	beq.n	8009134 <USBD_SetConfig+0x7c>
 80090ec:	e062      	b.n	80091b4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80090ee:	4b38      	ldr	r3, [pc, #224]	; (80091d0 <USBD_SetConfig+0x118>)
 80090f0:	781b      	ldrb	r3, [r3, #0]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d01a      	beq.n	800912c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80090f6:	4b36      	ldr	r3, [pc, #216]	; (80091d0 <USBD_SetConfig+0x118>)
 80090f8:	781b      	ldrb	r3, [r3, #0]
 80090fa:	461a      	mov	r2, r3
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2203      	movs	r2, #3
 8009104:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009108:	4b31      	ldr	r3, [pc, #196]	; (80091d0 <USBD_SetConfig+0x118>)
 800910a:	781b      	ldrb	r3, [r3, #0]
 800910c:	4619      	mov	r1, r3
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	f7ff f9af 	bl	8008472 <USBD_SetClassConfig>
 8009114:	4603      	mov	r3, r0
 8009116:	2b02      	cmp	r3, #2
 8009118:	d104      	bne.n	8009124 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800911a:	6839      	ldr	r1, [r7, #0]
 800911c:	6878      	ldr	r0, [r7, #4]
 800911e:	f000 f932 	bl	8009386 <USBD_CtlError>
            return;
 8009122:	e052      	b.n	80091ca <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	f000 f9f6 	bl	8009516 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800912a:	e04e      	b.n	80091ca <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800912c:	6878      	ldr	r0, [r7, #4]
 800912e:	f000 f9f2 	bl	8009516 <USBD_CtlSendStatus>
        break;
 8009132:	e04a      	b.n	80091ca <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009134:	4b26      	ldr	r3, [pc, #152]	; (80091d0 <USBD_SetConfig+0x118>)
 8009136:	781b      	ldrb	r3, [r3, #0]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d112      	bne.n	8009162 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2202      	movs	r2, #2
 8009140:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8009144:	4b22      	ldr	r3, [pc, #136]	; (80091d0 <USBD_SetConfig+0x118>)
 8009146:	781b      	ldrb	r3, [r3, #0]
 8009148:	461a      	mov	r2, r3
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800914e:	4b20      	ldr	r3, [pc, #128]	; (80091d0 <USBD_SetConfig+0x118>)
 8009150:	781b      	ldrb	r3, [r3, #0]
 8009152:	4619      	mov	r1, r3
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f7ff f9ab 	bl	80084b0 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	f000 f9db 	bl	8009516 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009160:	e033      	b.n	80091ca <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009162:	4b1b      	ldr	r3, [pc, #108]	; (80091d0 <USBD_SetConfig+0x118>)
 8009164:	781b      	ldrb	r3, [r3, #0]
 8009166:	461a      	mov	r2, r3
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	685b      	ldr	r3, [r3, #4]
 800916c:	429a      	cmp	r2, r3
 800916e:	d01d      	beq.n	80091ac <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	685b      	ldr	r3, [r3, #4]
 8009174:	b2db      	uxtb	r3, r3
 8009176:	4619      	mov	r1, r3
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f7ff f999 	bl	80084b0 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800917e:	4b14      	ldr	r3, [pc, #80]	; (80091d0 <USBD_SetConfig+0x118>)
 8009180:	781b      	ldrb	r3, [r3, #0]
 8009182:	461a      	mov	r2, r3
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009188:	4b11      	ldr	r3, [pc, #68]	; (80091d0 <USBD_SetConfig+0x118>)
 800918a:	781b      	ldrb	r3, [r3, #0]
 800918c:	4619      	mov	r1, r3
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	f7ff f96f 	bl	8008472 <USBD_SetClassConfig>
 8009194:	4603      	mov	r3, r0
 8009196:	2b02      	cmp	r3, #2
 8009198:	d104      	bne.n	80091a4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800919a:	6839      	ldr	r1, [r7, #0]
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f000 f8f2 	bl	8009386 <USBD_CtlError>
            return;
 80091a2:	e012      	b.n	80091ca <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f000 f9b6 	bl	8009516 <USBD_CtlSendStatus>
        break;
 80091aa:	e00e      	b.n	80091ca <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80091ac:	6878      	ldr	r0, [r7, #4]
 80091ae:	f000 f9b2 	bl	8009516 <USBD_CtlSendStatus>
        break;
 80091b2:	e00a      	b.n	80091ca <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80091b4:	6839      	ldr	r1, [r7, #0]
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f000 f8e5 	bl	8009386 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80091bc:	4b04      	ldr	r3, [pc, #16]	; (80091d0 <USBD_SetConfig+0x118>)
 80091be:	781b      	ldrb	r3, [r3, #0]
 80091c0:	4619      	mov	r1, r3
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f7ff f974 	bl	80084b0 <USBD_ClrClassConfig>
        break;
 80091c8:	bf00      	nop
    }
  }
}
 80091ca:	3708      	adds	r7, #8
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}
 80091d0:	2000036c 	.word	0x2000036c

080091d4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b082      	sub	sp, #8
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
 80091dc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	88db      	ldrh	r3, [r3, #6]
 80091e2:	2b01      	cmp	r3, #1
 80091e4:	d004      	beq.n	80091f0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80091e6:	6839      	ldr	r1, [r7, #0]
 80091e8:	6878      	ldr	r0, [r7, #4]
 80091ea:	f000 f8cc 	bl	8009386 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80091ee:	e022      	b.n	8009236 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091f6:	2b02      	cmp	r3, #2
 80091f8:	dc02      	bgt.n	8009200 <USBD_GetConfig+0x2c>
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	dc03      	bgt.n	8009206 <USBD_GetConfig+0x32>
 80091fe:	e015      	b.n	800922c <USBD_GetConfig+0x58>
 8009200:	2b03      	cmp	r3, #3
 8009202:	d00b      	beq.n	800921c <USBD_GetConfig+0x48>
 8009204:	e012      	b.n	800922c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2200      	movs	r2, #0
 800920a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	3308      	adds	r3, #8
 8009210:	2201      	movs	r2, #1
 8009212:	4619      	mov	r1, r3
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	f000 f920 	bl	800945a <USBD_CtlSendData>
        break;
 800921a:	e00c      	b.n	8009236 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	3304      	adds	r3, #4
 8009220:	2201      	movs	r2, #1
 8009222:	4619      	mov	r1, r3
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	f000 f918 	bl	800945a <USBD_CtlSendData>
        break;
 800922a:	e004      	b.n	8009236 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800922c:	6839      	ldr	r1, [r7, #0]
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	f000 f8a9 	bl	8009386 <USBD_CtlError>
        break;
 8009234:	bf00      	nop
}
 8009236:	bf00      	nop
 8009238:	3708      	adds	r7, #8
 800923a:	46bd      	mov	sp, r7
 800923c:	bd80      	pop	{r7, pc}

0800923e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800923e:	b580      	push	{r7, lr}
 8009240:	b082      	sub	sp, #8
 8009242:	af00      	add	r7, sp, #0
 8009244:	6078      	str	r0, [r7, #4]
 8009246:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800924e:	3b01      	subs	r3, #1
 8009250:	2b02      	cmp	r3, #2
 8009252:	d81e      	bhi.n	8009292 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	88db      	ldrh	r3, [r3, #6]
 8009258:	2b02      	cmp	r3, #2
 800925a:	d004      	beq.n	8009266 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800925c:	6839      	ldr	r1, [r7, #0]
 800925e:	6878      	ldr	r0, [r7, #4]
 8009260:	f000 f891 	bl	8009386 <USBD_CtlError>
        break;
 8009264:	e01a      	b.n	800929c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2201      	movs	r2, #1
 800926a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009272:	2b00      	cmp	r3, #0
 8009274:	d005      	beq.n	8009282 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	68db      	ldr	r3, [r3, #12]
 800927a:	f043 0202 	orr.w	r2, r3, #2
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	330c      	adds	r3, #12
 8009286:	2202      	movs	r2, #2
 8009288:	4619      	mov	r1, r3
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f000 f8e5 	bl	800945a <USBD_CtlSendData>
      break;
 8009290:	e004      	b.n	800929c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009292:	6839      	ldr	r1, [r7, #0]
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	f000 f876 	bl	8009386 <USBD_CtlError>
      break;
 800929a:	bf00      	nop
  }
}
 800929c:	bf00      	nop
 800929e:	3708      	adds	r7, #8
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bd80      	pop	{r7, pc}

080092a4 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b082      	sub	sp, #8
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
 80092ac:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	885b      	ldrh	r3, [r3, #2]
 80092b2:	2b01      	cmp	r3, #1
 80092b4:	d106      	bne.n	80092c4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	2201      	movs	r2, #1
 80092ba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80092be:	6878      	ldr	r0, [r7, #4]
 80092c0:	f000 f929 	bl	8009516 <USBD_CtlSendStatus>
  }
}
 80092c4:	bf00      	nop
 80092c6:	3708      	adds	r7, #8
 80092c8:	46bd      	mov	sp, r7
 80092ca:	bd80      	pop	{r7, pc}

080092cc <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b082      	sub	sp, #8
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
 80092d4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092dc:	3b01      	subs	r3, #1
 80092de:	2b02      	cmp	r3, #2
 80092e0:	d80b      	bhi.n	80092fa <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	885b      	ldrh	r3, [r3, #2]
 80092e6:	2b01      	cmp	r3, #1
 80092e8:	d10c      	bne.n	8009304 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2200      	movs	r2, #0
 80092ee:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f000 f90f 	bl	8009516 <USBD_CtlSendStatus>
      }
      break;
 80092f8:	e004      	b.n	8009304 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80092fa:	6839      	ldr	r1, [r7, #0]
 80092fc:	6878      	ldr	r0, [r7, #4]
 80092fe:	f000 f842 	bl	8009386 <USBD_CtlError>
      break;
 8009302:	e000      	b.n	8009306 <USBD_ClrFeature+0x3a>
      break;
 8009304:	bf00      	nop
  }
}
 8009306:	bf00      	nop
 8009308:	3708      	adds	r7, #8
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}

0800930e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800930e:	b480      	push	{r7}
 8009310:	b083      	sub	sp, #12
 8009312:	af00      	add	r7, sp, #0
 8009314:	6078      	str	r0, [r7, #4]
 8009316:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	781a      	ldrb	r2, [r3, #0]
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	785a      	ldrb	r2, [r3, #1]
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	3302      	adds	r3, #2
 800932c:	781b      	ldrb	r3, [r3, #0]
 800932e:	b29a      	uxth	r2, r3
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	3303      	adds	r3, #3
 8009334:	781b      	ldrb	r3, [r3, #0]
 8009336:	b29b      	uxth	r3, r3
 8009338:	021b      	lsls	r3, r3, #8
 800933a:	b29b      	uxth	r3, r3
 800933c:	4413      	add	r3, r2
 800933e:	b29a      	uxth	r2, r3
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	3304      	adds	r3, #4
 8009348:	781b      	ldrb	r3, [r3, #0]
 800934a:	b29a      	uxth	r2, r3
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	3305      	adds	r3, #5
 8009350:	781b      	ldrb	r3, [r3, #0]
 8009352:	b29b      	uxth	r3, r3
 8009354:	021b      	lsls	r3, r3, #8
 8009356:	b29b      	uxth	r3, r3
 8009358:	4413      	add	r3, r2
 800935a:	b29a      	uxth	r2, r3
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	3306      	adds	r3, #6
 8009364:	781b      	ldrb	r3, [r3, #0]
 8009366:	b29a      	uxth	r2, r3
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	3307      	adds	r3, #7
 800936c:	781b      	ldrb	r3, [r3, #0]
 800936e:	b29b      	uxth	r3, r3
 8009370:	021b      	lsls	r3, r3, #8
 8009372:	b29b      	uxth	r3, r3
 8009374:	4413      	add	r3, r2
 8009376:	b29a      	uxth	r2, r3
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	80da      	strh	r2, [r3, #6]

}
 800937c:	bf00      	nop
 800937e:	370c      	adds	r7, #12
 8009380:	46bd      	mov	sp, r7
 8009382:	bc80      	pop	{r7}
 8009384:	4770      	bx	lr

08009386 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009386:	b580      	push	{r7, lr}
 8009388:	b082      	sub	sp, #8
 800938a:	af00      	add	r7, sp, #0
 800938c:	6078      	str	r0, [r7, #4]
 800938e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009390:	2180      	movs	r1, #128	; 0x80
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f000 fcb8 	bl	8009d08 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009398:	2100      	movs	r1, #0
 800939a:	6878      	ldr	r0, [r7, #4]
 800939c:	f000 fcb4 	bl	8009d08 <USBD_LL_StallEP>
}
 80093a0:	bf00      	nop
 80093a2:	3708      	adds	r7, #8
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bd80      	pop	{r7, pc}

080093a8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b086      	sub	sp, #24
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	60f8      	str	r0, [r7, #12]
 80093b0:	60b9      	str	r1, [r7, #8]
 80093b2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80093b4:	2300      	movs	r3, #0
 80093b6:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d032      	beq.n	8009424 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80093be:	68f8      	ldr	r0, [r7, #12]
 80093c0:	f000 f834 	bl	800942c <USBD_GetLen>
 80093c4:	4603      	mov	r3, r0
 80093c6:	3301      	adds	r3, #1
 80093c8:	b29b      	uxth	r3, r3
 80093ca:	005b      	lsls	r3, r3, #1
 80093cc:	b29a      	uxth	r2, r3
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80093d2:	7dfb      	ldrb	r3, [r7, #23]
 80093d4:	1c5a      	adds	r2, r3, #1
 80093d6:	75fa      	strb	r2, [r7, #23]
 80093d8:	461a      	mov	r2, r3
 80093da:	68bb      	ldr	r3, [r7, #8]
 80093dc:	4413      	add	r3, r2
 80093de:	687a      	ldr	r2, [r7, #4]
 80093e0:	7812      	ldrb	r2, [r2, #0]
 80093e2:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80093e4:	7dfb      	ldrb	r3, [r7, #23]
 80093e6:	1c5a      	adds	r2, r3, #1
 80093e8:	75fa      	strb	r2, [r7, #23]
 80093ea:	461a      	mov	r2, r3
 80093ec:	68bb      	ldr	r3, [r7, #8]
 80093ee:	4413      	add	r3, r2
 80093f0:	2203      	movs	r2, #3
 80093f2:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80093f4:	e012      	b.n	800941c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	1c5a      	adds	r2, r3, #1
 80093fa:	60fa      	str	r2, [r7, #12]
 80093fc:	7dfa      	ldrb	r2, [r7, #23]
 80093fe:	1c51      	adds	r1, r2, #1
 8009400:	75f9      	strb	r1, [r7, #23]
 8009402:	4611      	mov	r1, r2
 8009404:	68ba      	ldr	r2, [r7, #8]
 8009406:	440a      	add	r2, r1
 8009408:	781b      	ldrb	r3, [r3, #0]
 800940a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800940c:	7dfb      	ldrb	r3, [r7, #23]
 800940e:	1c5a      	adds	r2, r3, #1
 8009410:	75fa      	strb	r2, [r7, #23]
 8009412:	461a      	mov	r2, r3
 8009414:	68bb      	ldr	r3, [r7, #8]
 8009416:	4413      	add	r3, r2
 8009418:	2200      	movs	r2, #0
 800941a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	781b      	ldrb	r3, [r3, #0]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d1e8      	bne.n	80093f6 <USBD_GetString+0x4e>
    }
  }
}
 8009424:	bf00      	nop
 8009426:	3718      	adds	r7, #24
 8009428:	46bd      	mov	sp, r7
 800942a:	bd80      	pop	{r7, pc}

0800942c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800942c:	b480      	push	{r7}
 800942e:	b085      	sub	sp, #20
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009434:	2300      	movs	r3, #0
 8009436:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009438:	e005      	b.n	8009446 <USBD_GetLen+0x1a>
  {
    len++;
 800943a:	7bfb      	ldrb	r3, [r7, #15]
 800943c:	3301      	adds	r3, #1
 800943e:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	3301      	adds	r3, #1
 8009444:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	781b      	ldrb	r3, [r3, #0]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d1f5      	bne.n	800943a <USBD_GetLen+0xe>
  }

  return len;
 800944e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009450:	4618      	mov	r0, r3
 8009452:	3714      	adds	r7, #20
 8009454:	46bd      	mov	sp, r7
 8009456:	bc80      	pop	{r7}
 8009458:	4770      	bx	lr

0800945a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800945a:	b580      	push	{r7, lr}
 800945c:	b084      	sub	sp, #16
 800945e:	af00      	add	r7, sp, #0
 8009460:	60f8      	str	r0, [r7, #12]
 8009462:	60b9      	str	r1, [r7, #8]
 8009464:	4613      	mov	r3, r2
 8009466:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	2202      	movs	r2, #2
 800946c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009470:	88fa      	ldrh	r2, [r7, #6]
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009476:	88fa      	ldrh	r2, [r7, #6]
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800947c:	88fb      	ldrh	r3, [r7, #6]
 800947e:	68ba      	ldr	r2, [r7, #8]
 8009480:	2100      	movs	r1, #0
 8009482:	68f8      	ldr	r0, [r7, #12]
 8009484:	f000 fcc8 	bl	8009e18 <USBD_LL_Transmit>

  return USBD_OK;
 8009488:	2300      	movs	r3, #0
}
 800948a:	4618      	mov	r0, r3
 800948c:	3710      	adds	r7, #16
 800948e:	46bd      	mov	sp, r7
 8009490:	bd80      	pop	{r7, pc}

08009492 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009492:	b580      	push	{r7, lr}
 8009494:	b084      	sub	sp, #16
 8009496:	af00      	add	r7, sp, #0
 8009498:	60f8      	str	r0, [r7, #12]
 800949a:	60b9      	str	r1, [r7, #8]
 800949c:	4613      	mov	r3, r2
 800949e:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80094a0:	88fb      	ldrh	r3, [r7, #6]
 80094a2:	68ba      	ldr	r2, [r7, #8]
 80094a4:	2100      	movs	r1, #0
 80094a6:	68f8      	ldr	r0, [r7, #12]
 80094a8:	f000 fcb6 	bl	8009e18 <USBD_LL_Transmit>

  return USBD_OK;
 80094ac:	2300      	movs	r3, #0
}
 80094ae:	4618      	mov	r0, r3
 80094b0:	3710      	adds	r7, #16
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bd80      	pop	{r7, pc}

080094b6 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80094b6:	b580      	push	{r7, lr}
 80094b8:	b084      	sub	sp, #16
 80094ba:	af00      	add	r7, sp, #0
 80094bc:	60f8      	str	r0, [r7, #12]
 80094be:	60b9      	str	r1, [r7, #8]
 80094c0:	4613      	mov	r3, r2
 80094c2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	2203      	movs	r2, #3
 80094c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80094cc:	88fa      	ldrh	r2, [r7, #6]
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80094d4:	88fa      	ldrh	r2, [r7, #6]
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80094dc:	88fb      	ldrh	r3, [r7, #6]
 80094de:	68ba      	ldr	r2, [r7, #8]
 80094e0:	2100      	movs	r1, #0
 80094e2:	68f8      	ldr	r0, [r7, #12]
 80094e4:	f000 fcbb 	bl	8009e5e <USBD_LL_PrepareReceive>

  return USBD_OK;
 80094e8:	2300      	movs	r3, #0
}
 80094ea:	4618      	mov	r0, r3
 80094ec:	3710      	adds	r7, #16
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}

080094f2 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80094f2:	b580      	push	{r7, lr}
 80094f4:	b084      	sub	sp, #16
 80094f6:	af00      	add	r7, sp, #0
 80094f8:	60f8      	str	r0, [r7, #12]
 80094fa:	60b9      	str	r1, [r7, #8]
 80094fc:	4613      	mov	r3, r2
 80094fe:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009500:	88fb      	ldrh	r3, [r7, #6]
 8009502:	68ba      	ldr	r2, [r7, #8]
 8009504:	2100      	movs	r1, #0
 8009506:	68f8      	ldr	r0, [r7, #12]
 8009508:	f000 fca9 	bl	8009e5e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800950c:	2300      	movs	r3, #0
}
 800950e:	4618      	mov	r0, r3
 8009510:	3710      	adds	r7, #16
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}

08009516 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009516:	b580      	push	{r7, lr}
 8009518:	b082      	sub	sp, #8
 800951a:	af00      	add	r7, sp, #0
 800951c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2204      	movs	r2, #4
 8009522:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009526:	2300      	movs	r3, #0
 8009528:	2200      	movs	r2, #0
 800952a:	2100      	movs	r1, #0
 800952c:	6878      	ldr	r0, [r7, #4]
 800952e:	f000 fc73 	bl	8009e18 <USBD_LL_Transmit>

  return USBD_OK;
 8009532:	2300      	movs	r3, #0
}
 8009534:	4618      	mov	r0, r3
 8009536:	3708      	adds	r7, #8
 8009538:	46bd      	mov	sp, r7
 800953a:	bd80      	pop	{r7, pc}

0800953c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b082      	sub	sp, #8
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2205      	movs	r2, #5
 8009548:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800954c:	2300      	movs	r3, #0
 800954e:	2200      	movs	r2, #0
 8009550:	2100      	movs	r1, #0
 8009552:	6878      	ldr	r0, [r7, #4]
 8009554:	f000 fc83 	bl	8009e5e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009558:	2300      	movs	r3, #0
}
 800955a:	4618      	mov	r0, r3
 800955c:	3708      	adds	r7, #8
 800955e:	46bd      	mov	sp, r7
 8009560:	bd80      	pop	{r7, pc}

08009562 <USB_Transmit>:
/* USER CODE END PV */

/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/
void USB_Transmit(char* Buf, uint16_t Len)
{
 8009562:	b580      	push	{r7, lr}
 8009564:	b082      	sub	sp, #8
 8009566:	af00      	add	r7, sp, #0
 8009568:	6078      	str	r0, [r7, #4]
 800956a:	460b      	mov	r3, r1
 800956c:	807b      	strh	r3, [r7, #2]
	CDC_Transmit_FS((uint8_t*)Buf, Len); //Explicit conversion of char ptr to uint8_t ptr
 800956e:	887b      	ldrh	r3, [r7, #2]
 8009570:	4619      	mov	r1, r3
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f000 f8c2 	bl	80096fc <CDC_Transmit_FS>
}
 8009578:	bf00      	nop
 800957a:	3708      	adds	r7, #8
 800957c:	46bd      	mov	sp, r7
 800957e:	bd80      	pop	{r7, pc}

08009580 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009584:	2200      	movs	r2, #0
 8009586:	4912      	ldr	r1, [pc, #72]	; (80095d0 <MX_USB_DEVICE_Init+0x50>)
 8009588:	4812      	ldr	r0, [pc, #72]	; (80095d4 <MX_USB_DEVICE_Init+0x54>)
 800958a:	f7fe ff18 	bl	80083be <USBD_Init>
 800958e:	4603      	mov	r3, r0
 8009590:	2b00      	cmp	r3, #0
 8009592:	d001      	beq.n	8009598 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009594:	f7f9 f8a6 	bl	80026e4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009598:	490f      	ldr	r1, [pc, #60]	; (80095d8 <MX_USB_DEVICE_Init+0x58>)
 800959a:	480e      	ldr	r0, [pc, #56]	; (80095d4 <MX_USB_DEVICE_Init+0x54>)
 800959c:	f7fe ff3a 	bl	8008414 <USBD_RegisterClass>
 80095a0:	4603      	mov	r3, r0
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d001      	beq.n	80095aa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80095a6:	f7f9 f89d 	bl	80026e4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80095aa:	490c      	ldr	r1, [pc, #48]	; (80095dc <MX_USB_DEVICE_Init+0x5c>)
 80095ac:	4809      	ldr	r0, [pc, #36]	; (80095d4 <MX_USB_DEVICE_Init+0x54>)
 80095ae:	f7fe fe6b 	bl	8008288 <USBD_CDC_RegisterInterface>
 80095b2:	4603      	mov	r3, r0
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d001      	beq.n	80095bc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80095b8:	f7f9 f894 	bl	80026e4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80095bc:	4805      	ldr	r0, [pc, #20]	; (80095d4 <MX_USB_DEVICE_Init+0x54>)
 80095be:	f7fe ff42 	bl	8008446 <USBD_Start>
 80095c2:	4603      	mov	r3, r0
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d001      	beq.n	80095cc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80095c8:	f7f9 f88c 	bl	80026e4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80095cc:	bf00      	nop
 80095ce:	bd80      	pop	{r7, pc}
 80095d0:	20000174 	.word	0x20000174
 80095d4:	20000370 	.word	0x20000370
 80095d8:	20000060 	.word	0x20000060
 80095dc:	20000164 	.word	0x20000164

080095e0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80095e4:	2200      	movs	r2, #0
 80095e6:	4905      	ldr	r1, [pc, #20]	; (80095fc <CDC_Init_FS+0x1c>)
 80095e8:	4805      	ldr	r0, [pc, #20]	; (8009600 <CDC_Init_FS+0x20>)
 80095ea:	f7fe fe63 	bl	80082b4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80095ee:	4905      	ldr	r1, [pc, #20]	; (8009604 <CDC_Init_FS+0x24>)
 80095f0:	4803      	ldr	r0, [pc, #12]	; (8009600 <CDC_Init_FS+0x20>)
 80095f2:	f7fe fe78 	bl	80082e6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80095f6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80095f8:	4618      	mov	r0, r3
 80095fa:	bd80      	pop	{r7, pc}
 80095fc:	20000a34 	.word	0x20000a34
 8009600:	20000370 	.word	0x20000370
 8009604:	20000634 	.word	0x20000634

08009608 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009608:	b480      	push	{r7}
 800960a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800960c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800960e:	4618      	mov	r0, r3
 8009610:	46bd      	mov	sp, r7
 8009612:	bc80      	pop	{r7}
 8009614:	4770      	bx	lr
	...

08009618 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009618:	b480      	push	{r7}
 800961a:	b083      	sub	sp, #12
 800961c:	af00      	add	r7, sp, #0
 800961e:	4603      	mov	r3, r0
 8009620:	6039      	str	r1, [r7, #0]
 8009622:	71fb      	strb	r3, [r7, #7]
 8009624:	4613      	mov	r3, r2
 8009626:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009628:	79fb      	ldrb	r3, [r7, #7]
 800962a:	2b23      	cmp	r3, #35	; 0x23
 800962c:	d84a      	bhi.n	80096c4 <CDC_Control_FS+0xac>
 800962e:	a201      	add	r2, pc, #4	; (adr r2, 8009634 <CDC_Control_FS+0x1c>)
 8009630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009634:	080096c5 	.word	0x080096c5
 8009638:	080096c5 	.word	0x080096c5
 800963c:	080096c5 	.word	0x080096c5
 8009640:	080096c5 	.word	0x080096c5
 8009644:	080096c5 	.word	0x080096c5
 8009648:	080096c5 	.word	0x080096c5
 800964c:	080096c5 	.word	0x080096c5
 8009650:	080096c5 	.word	0x080096c5
 8009654:	080096c5 	.word	0x080096c5
 8009658:	080096c5 	.word	0x080096c5
 800965c:	080096c5 	.word	0x080096c5
 8009660:	080096c5 	.word	0x080096c5
 8009664:	080096c5 	.word	0x080096c5
 8009668:	080096c5 	.word	0x080096c5
 800966c:	080096c5 	.word	0x080096c5
 8009670:	080096c5 	.word	0x080096c5
 8009674:	080096c5 	.word	0x080096c5
 8009678:	080096c5 	.word	0x080096c5
 800967c:	080096c5 	.word	0x080096c5
 8009680:	080096c5 	.word	0x080096c5
 8009684:	080096c5 	.word	0x080096c5
 8009688:	080096c5 	.word	0x080096c5
 800968c:	080096c5 	.word	0x080096c5
 8009690:	080096c5 	.word	0x080096c5
 8009694:	080096c5 	.word	0x080096c5
 8009698:	080096c5 	.word	0x080096c5
 800969c:	080096c5 	.word	0x080096c5
 80096a0:	080096c5 	.word	0x080096c5
 80096a4:	080096c5 	.word	0x080096c5
 80096a8:	080096c5 	.word	0x080096c5
 80096ac:	080096c5 	.word	0x080096c5
 80096b0:	080096c5 	.word	0x080096c5
 80096b4:	080096c5 	.word	0x080096c5
 80096b8:	080096c5 	.word	0x080096c5
 80096bc:	080096c5 	.word	0x080096c5
 80096c0:	080096c5 	.word	0x080096c5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80096c4:	bf00      	nop
  }

  return (USBD_OK);
 80096c6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80096c8:	4618      	mov	r0, r3
 80096ca:	370c      	adds	r7, #12
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bc80      	pop	{r7}
 80096d0:	4770      	bx	lr
 80096d2:	bf00      	nop

080096d4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b082      	sub	sp, #8
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
 80096dc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80096de:	6879      	ldr	r1, [r7, #4]
 80096e0:	4805      	ldr	r0, [pc, #20]	; (80096f8 <CDC_Receive_FS+0x24>)
 80096e2:	f7fe fe00 	bl	80082e6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80096e6:	4804      	ldr	r0, [pc, #16]	; (80096f8 <CDC_Receive_FS+0x24>)
 80096e8:	f7fe fe3f 	bl	800836a <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80096ec:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80096ee:	4618      	mov	r0, r3
 80096f0:	3708      	adds	r7, #8
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}
 80096f6:	bf00      	nop
 80096f8:	20000370 	.word	0x20000370

080096fc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b084      	sub	sp, #16
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
 8009704:	460b      	mov	r3, r1
 8009706:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009708:	2300      	movs	r3, #0
 800970a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800970c:	4b0d      	ldr	r3, [pc, #52]	; (8009744 <CDC_Transmit_FS+0x48>)
 800970e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009712:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009714:	68bb      	ldr	r3, [r7, #8]
 8009716:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800971a:	2b00      	cmp	r3, #0
 800971c:	d001      	beq.n	8009722 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800971e:	2301      	movs	r3, #1
 8009720:	e00b      	b.n	800973a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009722:	887b      	ldrh	r3, [r7, #2]
 8009724:	461a      	mov	r2, r3
 8009726:	6879      	ldr	r1, [r7, #4]
 8009728:	4806      	ldr	r0, [pc, #24]	; (8009744 <CDC_Transmit_FS+0x48>)
 800972a:	f7fe fdc3 	bl	80082b4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800972e:	4805      	ldr	r0, [pc, #20]	; (8009744 <CDC_Transmit_FS+0x48>)
 8009730:	f7fe fdec 	bl	800830c <USBD_CDC_TransmitPacket>
 8009734:	4603      	mov	r3, r0
 8009736:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009738:	7bfb      	ldrb	r3, [r7, #15]
}
 800973a:	4618      	mov	r0, r3
 800973c:	3710      	adds	r7, #16
 800973e:	46bd      	mov	sp, r7
 8009740:	bd80      	pop	{r7, pc}
 8009742:	bf00      	nop
 8009744:	20000370 	.word	0x20000370

08009748 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009748:	b480      	push	{r7}
 800974a:	b083      	sub	sp, #12
 800974c:	af00      	add	r7, sp, #0
 800974e:	4603      	mov	r3, r0
 8009750:	6039      	str	r1, [r7, #0]
 8009752:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	2212      	movs	r2, #18
 8009758:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800975a:	4b03      	ldr	r3, [pc, #12]	; (8009768 <USBD_FS_DeviceDescriptor+0x20>)
}
 800975c:	4618      	mov	r0, r3
 800975e:	370c      	adds	r7, #12
 8009760:	46bd      	mov	sp, r7
 8009762:	bc80      	pop	{r7}
 8009764:	4770      	bx	lr
 8009766:	bf00      	nop
 8009768:	20000190 	.word	0x20000190

0800976c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800976c:	b480      	push	{r7}
 800976e:	b083      	sub	sp, #12
 8009770:	af00      	add	r7, sp, #0
 8009772:	4603      	mov	r3, r0
 8009774:	6039      	str	r1, [r7, #0]
 8009776:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	2204      	movs	r2, #4
 800977c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800977e:	4b03      	ldr	r3, [pc, #12]	; (800978c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009780:	4618      	mov	r0, r3
 8009782:	370c      	adds	r7, #12
 8009784:	46bd      	mov	sp, r7
 8009786:	bc80      	pop	{r7}
 8009788:	4770      	bx	lr
 800978a:	bf00      	nop
 800978c:	200001a4 	.word	0x200001a4

08009790 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b082      	sub	sp, #8
 8009794:	af00      	add	r7, sp, #0
 8009796:	4603      	mov	r3, r0
 8009798:	6039      	str	r1, [r7, #0]
 800979a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800979c:	79fb      	ldrb	r3, [r7, #7]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d105      	bne.n	80097ae <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80097a2:	683a      	ldr	r2, [r7, #0]
 80097a4:	4907      	ldr	r1, [pc, #28]	; (80097c4 <USBD_FS_ProductStrDescriptor+0x34>)
 80097a6:	4808      	ldr	r0, [pc, #32]	; (80097c8 <USBD_FS_ProductStrDescriptor+0x38>)
 80097a8:	f7ff fdfe 	bl	80093a8 <USBD_GetString>
 80097ac:	e004      	b.n	80097b8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80097ae:	683a      	ldr	r2, [r7, #0]
 80097b0:	4904      	ldr	r1, [pc, #16]	; (80097c4 <USBD_FS_ProductStrDescriptor+0x34>)
 80097b2:	4805      	ldr	r0, [pc, #20]	; (80097c8 <USBD_FS_ProductStrDescriptor+0x38>)
 80097b4:	f7ff fdf8 	bl	80093a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80097b8:	4b02      	ldr	r3, [pc, #8]	; (80097c4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80097ba:	4618      	mov	r0, r3
 80097bc:	3708      	adds	r7, #8
 80097be:	46bd      	mov	sp, r7
 80097c0:	bd80      	pop	{r7, pc}
 80097c2:	bf00      	nop
 80097c4:	20000e34 	.word	0x20000e34
 80097c8:	0800acfc 	.word	0x0800acfc

080097cc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b082      	sub	sp, #8
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	4603      	mov	r3, r0
 80097d4:	6039      	str	r1, [r7, #0]
 80097d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80097d8:	683a      	ldr	r2, [r7, #0]
 80097da:	4904      	ldr	r1, [pc, #16]	; (80097ec <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80097dc:	4804      	ldr	r0, [pc, #16]	; (80097f0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80097de:	f7ff fde3 	bl	80093a8 <USBD_GetString>
  return USBD_StrDesc;
 80097e2:	4b02      	ldr	r3, [pc, #8]	; (80097ec <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80097e4:	4618      	mov	r0, r3
 80097e6:	3708      	adds	r7, #8
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd80      	pop	{r7, pc}
 80097ec:	20000e34 	.word	0x20000e34
 80097f0:	0800ad14 	.word	0x0800ad14

080097f4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b082      	sub	sp, #8
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	4603      	mov	r3, r0
 80097fc:	6039      	str	r1, [r7, #0]
 80097fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	221a      	movs	r2, #26
 8009804:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009806:	f000 f843 	bl	8009890 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800980a:	4b02      	ldr	r3, [pc, #8]	; (8009814 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800980c:	4618      	mov	r0, r3
 800980e:	3708      	adds	r7, #8
 8009810:	46bd      	mov	sp, r7
 8009812:	bd80      	pop	{r7, pc}
 8009814:	200001a8 	.word	0x200001a8

08009818 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b082      	sub	sp, #8
 800981c:	af00      	add	r7, sp, #0
 800981e:	4603      	mov	r3, r0
 8009820:	6039      	str	r1, [r7, #0]
 8009822:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009824:	79fb      	ldrb	r3, [r7, #7]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d105      	bne.n	8009836 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800982a:	683a      	ldr	r2, [r7, #0]
 800982c:	4907      	ldr	r1, [pc, #28]	; (800984c <USBD_FS_ConfigStrDescriptor+0x34>)
 800982e:	4808      	ldr	r0, [pc, #32]	; (8009850 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009830:	f7ff fdba 	bl	80093a8 <USBD_GetString>
 8009834:	e004      	b.n	8009840 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009836:	683a      	ldr	r2, [r7, #0]
 8009838:	4904      	ldr	r1, [pc, #16]	; (800984c <USBD_FS_ConfigStrDescriptor+0x34>)
 800983a:	4805      	ldr	r0, [pc, #20]	; (8009850 <USBD_FS_ConfigStrDescriptor+0x38>)
 800983c:	f7ff fdb4 	bl	80093a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009840:	4b02      	ldr	r3, [pc, #8]	; (800984c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009842:	4618      	mov	r0, r3
 8009844:	3708      	adds	r7, #8
 8009846:	46bd      	mov	sp, r7
 8009848:	bd80      	pop	{r7, pc}
 800984a:	bf00      	nop
 800984c:	20000e34 	.word	0x20000e34
 8009850:	0800ad28 	.word	0x0800ad28

08009854 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b082      	sub	sp, #8
 8009858:	af00      	add	r7, sp, #0
 800985a:	4603      	mov	r3, r0
 800985c:	6039      	str	r1, [r7, #0]
 800985e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009860:	79fb      	ldrb	r3, [r7, #7]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d105      	bne.n	8009872 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009866:	683a      	ldr	r2, [r7, #0]
 8009868:	4907      	ldr	r1, [pc, #28]	; (8009888 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800986a:	4808      	ldr	r0, [pc, #32]	; (800988c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800986c:	f7ff fd9c 	bl	80093a8 <USBD_GetString>
 8009870:	e004      	b.n	800987c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009872:	683a      	ldr	r2, [r7, #0]
 8009874:	4904      	ldr	r1, [pc, #16]	; (8009888 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009876:	4805      	ldr	r0, [pc, #20]	; (800988c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009878:	f7ff fd96 	bl	80093a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800987c:	4b02      	ldr	r3, [pc, #8]	; (8009888 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800987e:	4618      	mov	r0, r3
 8009880:	3708      	adds	r7, #8
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}
 8009886:	bf00      	nop
 8009888:	20000e34 	.word	0x20000e34
 800988c:	0800ad34 	.word	0x0800ad34

08009890 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b084      	sub	sp, #16
 8009894:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009896:	4b0f      	ldr	r3, [pc, #60]	; (80098d4 <Get_SerialNum+0x44>)
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800989c:	4b0e      	ldr	r3, [pc, #56]	; (80098d8 <Get_SerialNum+0x48>)
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80098a2:	4b0e      	ldr	r3, [pc, #56]	; (80098dc <Get_SerialNum+0x4c>)
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80098a8:	68fa      	ldr	r2, [r7, #12]
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	4413      	add	r3, r2
 80098ae:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d009      	beq.n	80098ca <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80098b6:	2208      	movs	r2, #8
 80098b8:	4909      	ldr	r1, [pc, #36]	; (80098e0 <Get_SerialNum+0x50>)
 80098ba:	68f8      	ldr	r0, [r7, #12]
 80098bc:	f000 f814 	bl	80098e8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80098c0:	2204      	movs	r2, #4
 80098c2:	4908      	ldr	r1, [pc, #32]	; (80098e4 <Get_SerialNum+0x54>)
 80098c4:	68b8      	ldr	r0, [r7, #8]
 80098c6:	f000 f80f 	bl	80098e8 <IntToUnicode>
  }
}
 80098ca:	bf00      	nop
 80098cc:	3710      	adds	r7, #16
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bd80      	pop	{r7, pc}
 80098d2:	bf00      	nop
 80098d4:	1ffff7e8 	.word	0x1ffff7e8
 80098d8:	1ffff7ec 	.word	0x1ffff7ec
 80098dc:	1ffff7f0 	.word	0x1ffff7f0
 80098e0:	200001aa 	.word	0x200001aa
 80098e4:	200001ba 	.word	0x200001ba

080098e8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80098e8:	b480      	push	{r7}
 80098ea:	b087      	sub	sp, #28
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	60f8      	str	r0, [r7, #12]
 80098f0:	60b9      	str	r1, [r7, #8]
 80098f2:	4613      	mov	r3, r2
 80098f4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80098f6:	2300      	movs	r3, #0
 80098f8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80098fa:	2300      	movs	r3, #0
 80098fc:	75fb      	strb	r3, [r7, #23]
 80098fe:	e027      	b.n	8009950 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	0f1b      	lsrs	r3, r3, #28
 8009904:	2b09      	cmp	r3, #9
 8009906:	d80b      	bhi.n	8009920 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	0f1b      	lsrs	r3, r3, #28
 800990c:	b2da      	uxtb	r2, r3
 800990e:	7dfb      	ldrb	r3, [r7, #23]
 8009910:	005b      	lsls	r3, r3, #1
 8009912:	4619      	mov	r1, r3
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	440b      	add	r3, r1
 8009918:	3230      	adds	r2, #48	; 0x30
 800991a:	b2d2      	uxtb	r2, r2
 800991c:	701a      	strb	r2, [r3, #0]
 800991e:	e00a      	b.n	8009936 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	0f1b      	lsrs	r3, r3, #28
 8009924:	b2da      	uxtb	r2, r3
 8009926:	7dfb      	ldrb	r3, [r7, #23]
 8009928:	005b      	lsls	r3, r3, #1
 800992a:	4619      	mov	r1, r3
 800992c:	68bb      	ldr	r3, [r7, #8]
 800992e:	440b      	add	r3, r1
 8009930:	3237      	adds	r2, #55	; 0x37
 8009932:	b2d2      	uxtb	r2, r2
 8009934:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	011b      	lsls	r3, r3, #4
 800993a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800993c:	7dfb      	ldrb	r3, [r7, #23]
 800993e:	005b      	lsls	r3, r3, #1
 8009940:	3301      	adds	r3, #1
 8009942:	68ba      	ldr	r2, [r7, #8]
 8009944:	4413      	add	r3, r2
 8009946:	2200      	movs	r2, #0
 8009948:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800994a:	7dfb      	ldrb	r3, [r7, #23]
 800994c:	3301      	adds	r3, #1
 800994e:	75fb      	strb	r3, [r7, #23]
 8009950:	7dfa      	ldrb	r2, [r7, #23]
 8009952:	79fb      	ldrb	r3, [r7, #7]
 8009954:	429a      	cmp	r2, r3
 8009956:	d3d3      	bcc.n	8009900 <IntToUnicode+0x18>
  }
}
 8009958:	bf00      	nop
 800995a:	bf00      	nop
 800995c:	371c      	adds	r7, #28
 800995e:	46bd      	mov	sp, r7
 8009960:	bc80      	pop	{r7}
 8009962:	4770      	bx	lr

08009964 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b088      	sub	sp, #32
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800996c:	f107 0310 	add.w	r3, r7, #16
 8009970:	2200      	movs	r2, #0
 8009972:	601a      	str	r2, [r3, #0]
 8009974:	605a      	str	r2, [r3, #4]
 8009976:	609a      	str	r2, [r3, #8]
 8009978:	60da      	str	r2, [r3, #12]
  if(pcdHandle->Instance==USB_OTG_FS)
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009982:	d12c      	bne.n	80099de <HAL_PCD_MspInit+0x7a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009984:	4b18      	ldr	r3, [pc, #96]	; (80099e8 <HAL_PCD_MspInit+0x84>)
 8009986:	699b      	ldr	r3, [r3, #24]
 8009988:	4a17      	ldr	r2, [pc, #92]	; (80099e8 <HAL_PCD_MspInit+0x84>)
 800998a:	f043 0304 	orr.w	r3, r3, #4
 800998e:	6193      	str	r3, [r2, #24]
 8009990:	4b15      	ldr	r3, [pc, #84]	; (80099e8 <HAL_PCD_MspInit+0x84>)
 8009992:	699b      	ldr	r3, [r3, #24]
 8009994:	f003 0304 	and.w	r3, r3, #4
 8009998:	60fb      	str	r3, [r7, #12]
 800999a:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800999c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80099a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80099a2:	2300      	movs	r3, #0
 80099a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80099a6:	2300      	movs	r3, #0
 80099a8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80099aa:	f107 0310 	add.w	r3, r7, #16
 80099ae:	4619      	mov	r1, r3
 80099b0:	480e      	ldr	r0, [pc, #56]	; (80099ec <HAL_PCD_MspInit+0x88>)
 80099b2:	f7fa f867 	bl	8003a84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80099b6:	4b0c      	ldr	r3, [pc, #48]	; (80099e8 <HAL_PCD_MspInit+0x84>)
 80099b8:	695b      	ldr	r3, [r3, #20]
 80099ba:	4a0b      	ldr	r2, [pc, #44]	; (80099e8 <HAL_PCD_MspInit+0x84>)
 80099bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80099c0:	6153      	str	r3, [r2, #20]
 80099c2:	4b09      	ldr	r3, [pc, #36]	; (80099e8 <HAL_PCD_MspInit+0x84>)
 80099c4:	695b      	ldr	r3, [r3, #20]
 80099c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80099ca:	60bb      	str	r3, [r7, #8]
 80099cc:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80099ce:	2200      	movs	r2, #0
 80099d0:	2100      	movs	r1, #0
 80099d2:	2043      	movs	r0, #67	; 0x43
 80099d4:	f7fa f81f 	bl	8003a16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80099d8:	2043      	movs	r0, #67	; 0x43
 80099da:	f7fa f838 	bl	8003a4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80099de:	bf00      	nop
 80099e0:	3720      	adds	r7, #32
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}
 80099e6:	bf00      	nop
 80099e8:	40021000 	.word	0x40021000
 80099ec:	40010800 	.word	0x40010800

080099f0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b082      	sub	sp, #8
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009a04:	4619      	mov	r1, r3
 8009a06:	4610      	mov	r0, r2
 8009a08:	f7fe fd65 	bl	80084d6 <USBD_LL_SetupStage>
}
 8009a0c:	bf00      	nop
 8009a0e:	3708      	adds	r7, #8
 8009a10:	46bd      	mov	sp, r7
 8009a12:	bd80      	pop	{r7, pc}

08009a14 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b082      	sub	sp, #8
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
 8009a1c:	460b      	mov	r3, r1
 8009a1e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f8d3 0500 	ldr.w	r0, [r3, #1280]	; 0x500
 8009a26:	78fa      	ldrb	r2, [r7, #3]
 8009a28:	6879      	ldr	r1, [r7, #4]
 8009a2a:	4613      	mov	r3, r2
 8009a2c:	00db      	lsls	r3, r3, #3
 8009a2e:	4413      	add	r3, r2
 8009a30:	009b      	lsls	r3, r3, #2
 8009a32:	440b      	add	r3, r1
 8009a34:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8009a38:	681a      	ldr	r2, [r3, #0]
 8009a3a:	78fb      	ldrb	r3, [r7, #3]
 8009a3c:	4619      	mov	r1, r3
 8009a3e:	f7fe fd97 	bl	8008570 <USBD_LL_DataOutStage>
}
 8009a42:	bf00      	nop
 8009a44:	3708      	adds	r7, #8
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bd80      	pop	{r7, pc}

08009a4a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a4a:	b580      	push	{r7, lr}
 8009a4c:	b082      	sub	sp, #8
 8009a4e:	af00      	add	r7, sp, #0
 8009a50:	6078      	str	r0, [r7, #4]
 8009a52:	460b      	mov	r3, r1
 8009a54:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	f8d3 0500 	ldr.w	r0, [r3, #1280]	; 0x500
 8009a5c:	78fa      	ldrb	r2, [r7, #3]
 8009a5e:	6879      	ldr	r1, [r7, #4]
 8009a60:	4613      	mov	r3, r2
 8009a62:	00db      	lsls	r3, r3, #3
 8009a64:	4413      	add	r3, r2
 8009a66:	009b      	lsls	r3, r3, #2
 8009a68:	440b      	add	r3, r1
 8009a6a:	3348      	adds	r3, #72	; 0x48
 8009a6c:	681a      	ldr	r2, [r3, #0]
 8009a6e:	78fb      	ldrb	r3, [r7, #3]
 8009a70:	4619      	mov	r1, r3
 8009a72:	f7fe fdee 	bl	8008652 <USBD_LL_DataInStage>
}
 8009a76:	bf00      	nop
 8009a78:	3708      	adds	r7, #8
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bd80      	pop	{r7, pc}

08009a7e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a7e:	b580      	push	{r7, lr}
 8009a80:	b082      	sub	sp, #8
 8009a82:	af00      	add	r7, sp, #0
 8009a84:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	f7fe fefe 	bl	800888e <USBD_LL_SOF>
}
 8009a92:	bf00      	nop
 8009a94:	3708      	adds	r7, #8
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bd80      	pop	{r7, pc}

08009a9a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a9a:	b580      	push	{r7, lr}
 8009a9c:	b084      	sub	sp, #16
 8009a9e:	af00      	add	r7, sp, #0
 8009aa0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	691b      	ldr	r3, [r3, #16]
 8009aaa:	2b02      	cmp	r3, #2
 8009aac:	d001      	beq.n	8009ab2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009aae:	f7f8 fe19 	bl	80026e4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8009ab8:	7bfa      	ldrb	r2, [r7, #15]
 8009aba:	4611      	mov	r1, r2
 8009abc:	4618      	mov	r0, r3
 8009abe:	f7fe feae 	bl	800881e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8009ac8:	4618      	mov	r0, r3
 8009aca:	f7fe fe67 	bl	800879c <USBD_LL_Reset>
}
 8009ace:	bf00      	nop
 8009ad0:	3710      	adds	r7, #16
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	bd80      	pop	{r7, pc}
	...

08009ad8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b082      	sub	sp, #8
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	f7fe fea8 	bl	800883c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	687a      	ldr	r2, [r7, #4]
 8009af8:	6812      	ldr	r2, [r2, #0]
 8009afa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009afe:	f043 0301 	orr.w	r3, r3, #1
 8009b02:	6013      	str	r3, [r2, #0]
  if (hpcd->Init.low_power_enable)
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	6a1b      	ldr	r3, [r3, #32]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d005      	beq.n	8009b18 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009b0c:	4b04      	ldr	r3, [pc, #16]	; (8009b20 <HAL_PCD_SuspendCallback+0x48>)
 8009b0e:	691b      	ldr	r3, [r3, #16]
 8009b10:	4a03      	ldr	r2, [pc, #12]	; (8009b20 <HAL_PCD_SuspendCallback+0x48>)
 8009b12:	f043 0306 	orr.w	r3, r3, #6
 8009b16:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009b18:	bf00      	nop
 8009b1a:	3708      	adds	r7, #8
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	bd80      	pop	{r7, pc}
 8009b20:	e000ed00 	.word	0xe000ed00

08009b24 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b082      	sub	sp, #8
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8009b32:	4618      	mov	r0, r3
 8009b34:	f7fe fe96 	bl	8008864 <USBD_LL_Resume>
}
 8009b38:	bf00      	nop
 8009b3a:	3708      	adds	r7, #8
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	bd80      	pop	{r7, pc}

08009b40 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b082      	sub	sp, #8
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
 8009b48:	460b      	mov	r3, r1
 8009b4a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8009b52:	78fa      	ldrb	r2, [r7, #3]
 8009b54:	4611      	mov	r1, r2
 8009b56:	4618      	mov	r0, r3
 8009b58:	f7fe febf 	bl	80088da <USBD_LL_IsoOUTIncomplete>
}
 8009b5c:	bf00      	nop
 8009b5e:	3708      	adds	r7, #8
 8009b60:	46bd      	mov	sp, r7
 8009b62:	bd80      	pop	{r7, pc}

08009b64 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b082      	sub	sp, #8
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
 8009b6c:	460b      	mov	r3, r1
 8009b6e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8009b76:	78fa      	ldrb	r2, [r7, #3]
 8009b78:	4611      	mov	r1, r2
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	f7fe fea1 	bl	80088c2 <USBD_LL_IsoINIncomplete>
}
 8009b80:	bf00      	nop
 8009b82:	3708      	adds	r7, #8
 8009b84:	46bd      	mov	sp, r7
 8009b86:	bd80      	pop	{r7, pc}

08009b88 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b082      	sub	sp, #8
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8009b96:	4618      	mov	r0, r3
 8009b98:	f7fe feab 	bl	80088f2 <USBD_LL_DevConnected>
}
 8009b9c:	bf00      	nop
 8009b9e:	3708      	adds	r7, #8
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bd80      	pop	{r7, pc}

08009ba4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b082      	sub	sp, #8
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	f7fe fea7 	bl	8008906 <USBD_LL_DevDisconnected>
}
 8009bb8:	bf00      	nop
 8009bba:	3708      	adds	r7, #8
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	bd80      	pop	{r7, pc}

08009bc0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b082      	sub	sp, #8
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	781b      	ldrb	r3, [r3, #0]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d133      	bne.n	8009c38 <USBD_LL_Init+0x78>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009bd0:	4a1c      	ldr	r2, [pc, #112]	; (8009c44 <USBD_LL_Init+0x84>)
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
  pdev->pData = &hpcd_USB_OTG_FS;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	4a1a      	ldr	r2, [pc, #104]	; (8009c44 <USBD_LL_Init+0x84>)
 8009bdc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009be0:	4b18      	ldr	r3, [pc, #96]	; (8009c44 <USBD_LL_Init+0x84>)
 8009be2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009be6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009be8:	4b16      	ldr	r3, [pc, #88]	; (8009c44 <USBD_LL_Init+0x84>)
 8009bea:	2204      	movs	r2, #4
 8009bec:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009bee:	4b15      	ldr	r3, [pc, #84]	; (8009c44 <USBD_LL_Init+0x84>)
 8009bf0:	2202      	movs	r2, #2
 8009bf2:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009bf4:	4b13      	ldr	r3, [pc, #76]	; (8009c44 <USBD_LL_Init+0x84>)
 8009bf6:	2202      	movs	r2, #2
 8009bf8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009bfa:	4b12      	ldr	r3, [pc, #72]	; (8009c44 <USBD_LL_Init+0x84>)
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009c00:	4b10      	ldr	r3, [pc, #64]	; (8009c44 <USBD_LL_Init+0x84>)
 8009c02:	2200      	movs	r2, #0
 8009c04:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8009c06:	4b0f      	ldr	r3, [pc, #60]	; (8009c44 <USBD_LL_Init+0x84>)
 8009c08:	2201      	movs	r2, #1
 8009c0a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009c0c:	480d      	ldr	r0, [pc, #52]	; (8009c44 <USBD_LL_Init+0x84>)
 8009c0e:	f7fa f8ee 	bl	8003dee <HAL_PCD_Init>
 8009c12:	4603      	mov	r3, r0
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d001      	beq.n	8009c1c <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8009c18:	f7f8 fd64 	bl	80026e4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009c1c:	2180      	movs	r1, #128	; 0x80
 8009c1e:	4809      	ldr	r0, [pc, #36]	; (8009c44 <USBD_LL_Init+0x84>)
 8009c20:	f7fb fa06 	bl	8005030 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009c24:	2240      	movs	r2, #64	; 0x40
 8009c26:	2100      	movs	r1, #0
 8009c28:	4806      	ldr	r0, [pc, #24]	; (8009c44 <USBD_LL_Init+0x84>)
 8009c2a:	f7fb f9bb 	bl	8004fa4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009c2e:	2280      	movs	r2, #128	; 0x80
 8009c30:	2101      	movs	r1, #1
 8009c32:	4804      	ldr	r0, [pc, #16]	; (8009c44 <USBD_LL_Init+0x84>)
 8009c34:	f7fb f9b6 	bl	8004fa4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009c38:	2300      	movs	r3, #0
}
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	3708      	adds	r7, #8
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bd80      	pop	{r7, pc}
 8009c42:	bf00      	nop
 8009c44:	20001034 	.word	0x20001034

08009c48 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b084      	sub	sp, #16
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c50:	2300      	movs	r3, #0
 8009c52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c54:	2300      	movs	r3, #0
 8009c56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009c5e:	4618      	mov	r0, r3
 8009c60:	f7fa f9e2 	bl	8004028 <HAL_PCD_Start>
 8009c64:	4603      	mov	r3, r0
 8009c66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c68:	7bfb      	ldrb	r3, [r7, #15]
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	f000 f944 	bl	8009ef8 <USBD_Get_USB_Status>
 8009c70:	4603      	mov	r3, r0
 8009c72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c74:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c76:	4618      	mov	r0, r3
 8009c78:	3710      	adds	r7, #16
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	bd80      	pop	{r7, pc}

08009c7e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009c7e:	b580      	push	{r7, lr}
 8009c80:	b084      	sub	sp, #16
 8009c82:	af00      	add	r7, sp, #0
 8009c84:	6078      	str	r0, [r7, #4]
 8009c86:	4608      	mov	r0, r1
 8009c88:	4611      	mov	r1, r2
 8009c8a:	461a      	mov	r2, r3
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	70fb      	strb	r3, [r7, #3]
 8009c90:	460b      	mov	r3, r1
 8009c92:	70bb      	strb	r3, [r7, #2]
 8009c94:	4613      	mov	r3, r2
 8009c96:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c98:	2300      	movs	r3, #0
 8009c9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009ca6:	78bb      	ldrb	r3, [r7, #2]
 8009ca8:	883a      	ldrh	r2, [r7, #0]
 8009caa:	78f9      	ldrb	r1, [r7, #3]
 8009cac:	f7fa fe5b 	bl	8004966 <HAL_PCD_EP_Open>
 8009cb0:	4603      	mov	r3, r0
 8009cb2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009cb4:	7bfb      	ldrb	r3, [r7, #15]
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	f000 f91e 	bl	8009ef8 <USBD_Get_USB_Status>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009cc0:	7bbb      	ldrb	r3, [r7, #14]
}
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	3710      	adds	r7, #16
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	bd80      	pop	{r7, pc}

08009cca <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009cca:	b580      	push	{r7, lr}
 8009ccc:	b084      	sub	sp, #16
 8009cce:	af00      	add	r7, sp, #0
 8009cd0:	6078      	str	r0, [r7, #4]
 8009cd2:	460b      	mov	r3, r1
 8009cd4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cda:	2300      	movs	r3, #0
 8009cdc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009ce4:	78fa      	ldrb	r2, [r7, #3]
 8009ce6:	4611      	mov	r1, r2
 8009ce8:	4618      	mov	r0, r3
 8009cea:	f7fa fea4 	bl	8004a36 <HAL_PCD_EP_Close>
 8009cee:	4603      	mov	r3, r0
 8009cf0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009cf2:	7bfb      	ldrb	r3, [r7, #15]
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	f000 f8ff 	bl	8009ef8 <USBD_Get_USB_Status>
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009cfe:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d00:	4618      	mov	r0, r3
 8009d02:	3710      	adds	r7, #16
 8009d04:	46bd      	mov	sp, r7
 8009d06:	bd80      	pop	{r7, pc}

08009d08 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b084      	sub	sp, #16
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
 8009d10:	460b      	mov	r3, r1
 8009d12:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d14:	2300      	movs	r3, #0
 8009d16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d18:	2300      	movs	r3, #0
 8009d1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009d22:	78fa      	ldrb	r2, [r7, #3]
 8009d24:	4611      	mov	r1, r2
 8009d26:	4618      	mov	r0, r3
 8009d28:	f7fa ff49 	bl	8004bbe <HAL_PCD_EP_SetStall>
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d30:	7bfb      	ldrb	r3, [r7, #15]
 8009d32:	4618      	mov	r0, r3
 8009d34:	f000 f8e0 	bl	8009ef8 <USBD_Get_USB_Status>
 8009d38:	4603      	mov	r3, r0
 8009d3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d3c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d3e:	4618      	mov	r0, r3
 8009d40:	3710      	adds	r7, #16
 8009d42:	46bd      	mov	sp, r7
 8009d44:	bd80      	pop	{r7, pc}

08009d46 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d46:	b580      	push	{r7, lr}
 8009d48:	b084      	sub	sp, #16
 8009d4a:	af00      	add	r7, sp, #0
 8009d4c:	6078      	str	r0, [r7, #4]
 8009d4e:	460b      	mov	r3, r1
 8009d50:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d52:	2300      	movs	r3, #0
 8009d54:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d56:	2300      	movs	r3, #0
 8009d58:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009d60:	78fa      	ldrb	r2, [r7, #3]
 8009d62:	4611      	mov	r1, r2
 8009d64:	4618      	mov	r0, r3
 8009d66:	f7fa ff8c 	bl	8004c82 <HAL_PCD_EP_ClrStall>
 8009d6a:	4603      	mov	r3, r0
 8009d6c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d6e:	7bfb      	ldrb	r3, [r7, #15]
 8009d70:	4618      	mov	r0, r3
 8009d72:	f000 f8c1 	bl	8009ef8 <USBD_Get_USB_Status>
 8009d76:	4603      	mov	r3, r0
 8009d78:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d7a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	3710      	adds	r7, #16
 8009d80:	46bd      	mov	sp, r7
 8009d82:	bd80      	pop	{r7, pc}

08009d84 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d84:	b480      	push	{r7}
 8009d86:	b085      	sub	sp, #20
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
 8009d8c:	460b      	mov	r3, r1
 8009d8e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009d96:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009d98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	da0b      	bge.n	8009db8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009da0:	78fb      	ldrb	r3, [r7, #3]
 8009da2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009da6:	68f9      	ldr	r1, [r7, #12]
 8009da8:	4613      	mov	r3, r2
 8009daa:	00db      	lsls	r3, r3, #3
 8009dac:	4413      	add	r3, r2
 8009dae:	009b      	lsls	r3, r3, #2
 8009db0:	440b      	add	r3, r1
 8009db2:	333e      	adds	r3, #62	; 0x3e
 8009db4:	781b      	ldrb	r3, [r3, #0]
 8009db6:	e00b      	b.n	8009dd0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009db8:	78fb      	ldrb	r3, [r7, #3]
 8009dba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009dbe:	68f9      	ldr	r1, [r7, #12]
 8009dc0:	4613      	mov	r3, r2
 8009dc2:	00db      	lsls	r3, r3, #3
 8009dc4:	4413      	add	r3, r2
 8009dc6:	009b      	lsls	r3, r3, #2
 8009dc8:	440b      	add	r3, r1
 8009dca:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8009dce:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	3714      	adds	r7, #20
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	bc80      	pop	{r7}
 8009dd8:	4770      	bx	lr

08009dda <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009dda:	b580      	push	{r7, lr}
 8009ddc:	b084      	sub	sp, #16
 8009dde:	af00      	add	r7, sp, #0
 8009de0:	6078      	str	r0, [r7, #4]
 8009de2:	460b      	mov	r3, r1
 8009de4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009de6:	2300      	movs	r3, #0
 8009de8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009dea:	2300      	movs	r3, #0
 8009dec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009df4:	78fa      	ldrb	r2, [r7, #3]
 8009df6:	4611      	mov	r1, r2
 8009df8:	4618      	mov	r0, r3
 8009dfa:	f7fa fd8f 	bl	800491c <HAL_PCD_SetAddress>
 8009dfe:	4603      	mov	r3, r0
 8009e00:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e02:	7bfb      	ldrb	r3, [r7, #15]
 8009e04:	4618      	mov	r0, r3
 8009e06:	f000 f877 	bl	8009ef8 <USBD_Get_USB_Status>
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e0e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e10:	4618      	mov	r0, r3
 8009e12:	3710      	adds	r7, #16
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bd80      	pop	{r7, pc}

08009e18 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b086      	sub	sp, #24
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	60f8      	str	r0, [r7, #12]
 8009e20:	607a      	str	r2, [r7, #4]
 8009e22:	461a      	mov	r2, r3
 8009e24:	460b      	mov	r3, r1
 8009e26:	72fb      	strb	r3, [r7, #11]
 8009e28:	4613      	mov	r3, r2
 8009e2a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e30:	2300      	movs	r3, #0
 8009e32:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009e3a:	893b      	ldrh	r3, [r7, #8]
 8009e3c:	7af9      	ldrb	r1, [r7, #11]
 8009e3e:	687a      	ldr	r2, [r7, #4]
 8009e40:	f7fa fe8c 	bl	8004b5c <HAL_PCD_EP_Transmit>
 8009e44:	4603      	mov	r3, r0
 8009e46:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e48:	7dfb      	ldrb	r3, [r7, #23]
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	f000 f854 	bl	8009ef8 <USBD_Get_USB_Status>
 8009e50:	4603      	mov	r3, r0
 8009e52:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009e54:	7dbb      	ldrb	r3, [r7, #22]
}
 8009e56:	4618      	mov	r0, r3
 8009e58:	3718      	adds	r7, #24
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bd80      	pop	{r7, pc}

08009e5e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009e5e:	b580      	push	{r7, lr}
 8009e60:	b086      	sub	sp, #24
 8009e62:	af00      	add	r7, sp, #0
 8009e64:	60f8      	str	r0, [r7, #12]
 8009e66:	607a      	str	r2, [r7, #4]
 8009e68:	461a      	mov	r2, r3
 8009e6a:	460b      	mov	r3, r1
 8009e6c:	72fb      	strb	r3, [r7, #11]
 8009e6e:	4613      	mov	r3, r2
 8009e70:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e72:	2300      	movs	r3, #0
 8009e74:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e76:	2300      	movs	r3, #0
 8009e78:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009e80:	893b      	ldrh	r3, [r7, #8]
 8009e82:	7af9      	ldrb	r1, [r7, #11]
 8009e84:	687a      	ldr	r2, [r7, #4]
 8009e86:	f7fa fe20 	bl	8004aca <HAL_PCD_EP_Receive>
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e8e:	7dfb      	ldrb	r3, [r7, #23]
 8009e90:	4618      	mov	r0, r3
 8009e92:	f000 f831 	bl	8009ef8 <USBD_Get_USB_Status>
 8009e96:	4603      	mov	r3, r0
 8009e98:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009e9a:	7dbb      	ldrb	r3, [r7, #22]
}
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	3718      	adds	r7, #24
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	bd80      	pop	{r7, pc}

08009ea4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b082      	sub	sp, #8
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
 8009eac:	460b      	mov	r3, r1
 8009eae:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009eb6:	78fa      	ldrb	r2, [r7, #3]
 8009eb8:	4611      	mov	r1, r2
 8009eba:	4618      	mov	r0, r3
 8009ebc:	f7fa fe37 	bl	8004b2e <HAL_PCD_EP_GetRxCount>
 8009ec0:	4603      	mov	r3, r0
}
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	3708      	adds	r7, #8
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bd80      	pop	{r7, pc}
	...

08009ecc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009ecc:	b480      	push	{r7}
 8009ece:	b083      	sub	sp, #12
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009ed4:	4b02      	ldr	r3, [pc, #8]	; (8009ee0 <USBD_static_malloc+0x14>)
}
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	370c      	adds	r7, #12
 8009eda:	46bd      	mov	sp, r7
 8009edc:	bc80      	pop	{r7}
 8009ede:	4770      	bx	lr
 8009ee0:	20001538 	.word	0x20001538

08009ee4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009ee4:	b480      	push	{r7}
 8009ee6:	b083      	sub	sp, #12
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]

}
 8009eec:	bf00      	nop
 8009eee:	370c      	adds	r7, #12
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	bc80      	pop	{r7}
 8009ef4:	4770      	bx	lr
	...

08009ef8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009ef8:	b480      	push	{r7}
 8009efa:	b085      	sub	sp, #20
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	4603      	mov	r3, r0
 8009f00:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f02:	2300      	movs	r3, #0
 8009f04:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009f06:	79fb      	ldrb	r3, [r7, #7]
 8009f08:	2b03      	cmp	r3, #3
 8009f0a:	d817      	bhi.n	8009f3c <USBD_Get_USB_Status+0x44>
 8009f0c:	a201      	add	r2, pc, #4	; (adr r2, 8009f14 <USBD_Get_USB_Status+0x1c>)
 8009f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f12:	bf00      	nop
 8009f14:	08009f25 	.word	0x08009f25
 8009f18:	08009f2b 	.word	0x08009f2b
 8009f1c:	08009f31 	.word	0x08009f31
 8009f20:	08009f37 	.word	0x08009f37
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009f24:	2300      	movs	r3, #0
 8009f26:	73fb      	strb	r3, [r7, #15]
    break;
 8009f28:	e00b      	b.n	8009f42 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009f2a:	2302      	movs	r3, #2
 8009f2c:	73fb      	strb	r3, [r7, #15]
    break;
 8009f2e:	e008      	b.n	8009f42 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009f30:	2301      	movs	r3, #1
 8009f32:	73fb      	strb	r3, [r7, #15]
    break;
 8009f34:	e005      	b.n	8009f42 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009f36:	2302      	movs	r3, #2
 8009f38:	73fb      	strb	r3, [r7, #15]
    break;
 8009f3a:	e002      	b.n	8009f42 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009f3c:	2302      	movs	r3, #2
 8009f3e:	73fb      	strb	r3, [r7, #15]
    break;
 8009f40:	bf00      	nop
  }
  return usb_status;
 8009f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f44:	4618      	mov	r0, r3
 8009f46:	3714      	adds	r7, #20
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	bc80      	pop	{r7}
 8009f4c:	4770      	bx	lr
 8009f4e:	bf00      	nop

08009f50 <malloc>:
 8009f50:	4b02      	ldr	r3, [pc, #8]	; (8009f5c <malloc+0xc>)
 8009f52:	4601      	mov	r1, r0
 8009f54:	6818      	ldr	r0, [r3, #0]
 8009f56:	f000 b82b 	b.w	8009fb0 <_malloc_r>
 8009f5a:	bf00      	nop
 8009f5c:	20000210 	.word	0x20000210

08009f60 <free>:
 8009f60:	4b02      	ldr	r3, [pc, #8]	; (8009f6c <free+0xc>)
 8009f62:	4601      	mov	r1, r0
 8009f64:	6818      	ldr	r0, [r3, #0]
 8009f66:	f000 b935 	b.w	800a1d4 <_free_r>
 8009f6a:	bf00      	nop
 8009f6c:	20000210 	.word	0x20000210

08009f70 <sbrk_aligned>:
 8009f70:	b570      	push	{r4, r5, r6, lr}
 8009f72:	4e0e      	ldr	r6, [pc, #56]	; (8009fac <sbrk_aligned+0x3c>)
 8009f74:	460c      	mov	r4, r1
 8009f76:	6831      	ldr	r1, [r6, #0]
 8009f78:	4605      	mov	r5, r0
 8009f7a:	b911      	cbnz	r1, 8009f82 <sbrk_aligned+0x12>
 8009f7c:	f000 f8e0 	bl	800a140 <_sbrk_r>
 8009f80:	6030      	str	r0, [r6, #0]
 8009f82:	4621      	mov	r1, r4
 8009f84:	4628      	mov	r0, r5
 8009f86:	f000 f8db 	bl	800a140 <_sbrk_r>
 8009f8a:	1c43      	adds	r3, r0, #1
 8009f8c:	d00a      	beq.n	8009fa4 <sbrk_aligned+0x34>
 8009f8e:	1cc4      	adds	r4, r0, #3
 8009f90:	f024 0403 	bic.w	r4, r4, #3
 8009f94:	42a0      	cmp	r0, r4
 8009f96:	d007      	beq.n	8009fa8 <sbrk_aligned+0x38>
 8009f98:	1a21      	subs	r1, r4, r0
 8009f9a:	4628      	mov	r0, r5
 8009f9c:	f000 f8d0 	bl	800a140 <_sbrk_r>
 8009fa0:	3001      	adds	r0, #1
 8009fa2:	d101      	bne.n	8009fa8 <sbrk_aligned+0x38>
 8009fa4:	f04f 34ff 	mov.w	r4, #4294967295
 8009fa8:	4620      	mov	r0, r4
 8009faa:	bd70      	pop	{r4, r5, r6, pc}
 8009fac:	2000175c 	.word	0x2000175c

08009fb0 <_malloc_r>:
 8009fb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009fb4:	1ccd      	adds	r5, r1, #3
 8009fb6:	f025 0503 	bic.w	r5, r5, #3
 8009fba:	3508      	adds	r5, #8
 8009fbc:	2d0c      	cmp	r5, #12
 8009fbe:	bf38      	it	cc
 8009fc0:	250c      	movcc	r5, #12
 8009fc2:	2d00      	cmp	r5, #0
 8009fc4:	4607      	mov	r7, r0
 8009fc6:	db01      	blt.n	8009fcc <_malloc_r+0x1c>
 8009fc8:	42a9      	cmp	r1, r5
 8009fca:	d905      	bls.n	8009fd8 <_malloc_r+0x28>
 8009fcc:	230c      	movs	r3, #12
 8009fce:	2600      	movs	r6, #0
 8009fd0:	603b      	str	r3, [r7, #0]
 8009fd2:	4630      	mov	r0, r6
 8009fd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009fd8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a0ac <_malloc_r+0xfc>
 8009fdc:	f000 f868 	bl	800a0b0 <__malloc_lock>
 8009fe0:	f8d8 3000 	ldr.w	r3, [r8]
 8009fe4:	461c      	mov	r4, r3
 8009fe6:	bb5c      	cbnz	r4, 800a040 <_malloc_r+0x90>
 8009fe8:	4629      	mov	r1, r5
 8009fea:	4638      	mov	r0, r7
 8009fec:	f7ff ffc0 	bl	8009f70 <sbrk_aligned>
 8009ff0:	1c43      	adds	r3, r0, #1
 8009ff2:	4604      	mov	r4, r0
 8009ff4:	d155      	bne.n	800a0a2 <_malloc_r+0xf2>
 8009ff6:	f8d8 4000 	ldr.w	r4, [r8]
 8009ffa:	4626      	mov	r6, r4
 8009ffc:	2e00      	cmp	r6, #0
 8009ffe:	d145      	bne.n	800a08c <_malloc_r+0xdc>
 800a000:	2c00      	cmp	r4, #0
 800a002:	d048      	beq.n	800a096 <_malloc_r+0xe6>
 800a004:	6823      	ldr	r3, [r4, #0]
 800a006:	4631      	mov	r1, r6
 800a008:	4638      	mov	r0, r7
 800a00a:	eb04 0903 	add.w	r9, r4, r3
 800a00e:	f000 f897 	bl	800a140 <_sbrk_r>
 800a012:	4581      	cmp	r9, r0
 800a014:	d13f      	bne.n	800a096 <_malloc_r+0xe6>
 800a016:	6821      	ldr	r1, [r4, #0]
 800a018:	4638      	mov	r0, r7
 800a01a:	1a6d      	subs	r5, r5, r1
 800a01c:	4629      	mov	r1, r5
 800a01e:	f7ff ffa7 	bl	8009f70 <sbrk_aligned>
 800a022:	3001      	adds	r0, #1
 800a024:	d037      	beq.n	800a096 <_malloc_r+0xe6>
 800a026:	6823      	ldr	r3, [r4, #0]
 800a028:	442b      	add	r3, r5
 800a02a:	6023      	str	r3, [r4, #0]
 800a02c:	f8d8 3000 	ldr.w	r3, [r8]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d038      	beq.n	800a0a6 <_malloc_r+0xf6>
 800a034:	685a      	ldr	r2, [r3, #4]
 800a036:	42a2      	cmp	r2, r4
 800a038:	d12b      	bne.n	800a092 <_malloc_r+0xe2>
 800a03a:	2200      	movs	r2, #0
 800a03c:	605a      	str	r2, [r3, #4]
 800a03e:	e00f      	b.n	800a060 <_malloc_r+0xb0>
 800a040:	6822      	ldr	r2, [r4, #0]
 800a042:	1b52      	subs	r2, r2, r5
 800a044:	d41f      	bmi.n	800a086 <_malloc_r+0xd6>
 800a046:	2a0b      	cmp	r2, #11
 800a048:	d917      	bls.n	800a07a <_malloc_r+0xca>
 800a04a:	1961      	adds	r1, r4, r5
 800a04c:	42a3      	cmp	r3, r4
 800a04e:	6025      	str	r5, [r4, #0]
 800a050:	bf18      	it	ne
 800a052:	6059      	strne	r1, [r3, #4]
 800a054:	6863      	ldr	r3, [r4, #4]
 800a056:	bf08      	it	eq
 800a058:	f8c8 1000 	streq.w	r1, [r8]
 800a05c:	5162      	str	r2, [r4, r5]
 800a05e:	604b      	str	r3, [r1, #4]
 800a060:	4638      	mov	r0, r7
 800a062:	f104 060b 	add.w	r6, r4, #11
 800a066:	f000 f829 	bl	800a0bc <__malloc_unlock>
 800a06a:	f026 0607 	bic.w	r6, r6, #7
 800a06e:	1d23      	adds	r3, r4, #4
 800a070:	1af2      	subs	r2, r6, r3
 800a072:	d0ae      	beq.n	8009fd2 <_malloc_r+0x22>
 800a074:	1b9b      	subs	r3, r3, r6
 800a076:	50a3      	str	r3, [r4, r2]
 800a078:	e7ab      	b.n	8009fd2 <_malloc_r+0x22>
 800a07a:	42a3      	cmp	r3, r4
 800a07c:	6862      	ldr	r2, [r4, #4]
 800a07e:	d1dd      	bne.n	800a03c <_malloc_r+0x8c>
 800a080:	f8c8 2000 	str.w	r2, [r8]
 800a084:	e7ec      	b.n	800a060 <_malloc_r+0xb0>
 800a086:	4623      	mov	r3, r4
 800a088:	6864      	ldr	r4, [r4, #4]
 800a08a:	e7ac      	b.n	8009fe6 <_malloc_r+0x36>
 800a08c:	4634      	mov	r4, r6
 800a08e:	6876      	ldr	r6, [r6, #4]
 800a090:	e7b4      	b.n	8009ffc <_malloc_r+0x4c>
 800a092:	4613      	mov	r3, r2
 800a094:	e7cc      	b.n	800a030 <_malloc_r+0x80>
 800a096:	230c      	movs	r3, #12
 800a098:	4638      	mov	r0, r7
 800a09a:	603b      	str	r3, [r7, #0]
 800a09c:	f000 f80e 	bl	800a0bc <__malloc_unlock>
 800a0a0:	e797      	b.n	8009fd2 <_malloc_r+0x22>
 800a0a2:	6025      	str	r5, [r4, #0]
 800a0a4:	e7dc      	b.n	800a060 <_malloc_r+0xb0>
 800a0a6:	605b      	str	r3, [r3, #4]
 800a0a8:	deff      	udf	#255	; 0xff
 800a0aa:	bf00      	nop
 800a0ac:	20001758 	.word	0x20001758

0800a0b0 <__malloc_lock>:
 800a0b0:	4801      	ldr	r0, [pc, #4]	; (800a0b8 <__malloc_lock+0x8>)
 800a0b2:	f000 b87f 	b.w	800a1b4 <__retarget_lock_acquire_recursive>
 800a0b6:	bf00      	nop
 800a0b8:	2000189c 	.word	0x2000189c

0800a0bc <__malloc_unlock>:
 800a0bc:	4801      	ldr	r0, [pc, #4]	; (800a0c4 <__malloc_unlock+0x8>)
 800a0be:	f000 b87a 	b.w	800a1b6 <__retarget_lock_release_recursive>
 800a0c2:	bf00      	nop
 800a0c4:	2000189c 	.word	0x2000189c

0800a0c8 <siprintf>:
 800a0c8:	b40e      	push	{r1, r2, r3}
 800a0ca:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a0ce:	b500      	push	{lr}
 800a0d0:	b09c      	sub	sp, #112	; 0x70
 800a0d2:	ab1d      	add	r3, sp, #116	; 0x74
 800a0d4:	9002      	str	r0, [sp, #8]
 800a0d6:	9006      	str	r0, [sp, #24]
 800a0d8:	9107      	str	r1, [sp, #28]
 800a0da:	9104      	str	r1, [sp, #16]
 800a0dc:	4808      	ldr	r0, [pc, #32]	; (800a100 <siprintf+0x38>)
 800a0de:	4909      	ldr	r1, [pc, #36]	; (800a104 <siprintf+0x3c>)
 800a0e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a0e4:	9105      	str	r1, [sp, #20]
 800a0e6:	6800      	ldr	r0, [r0, #0]
 800a0e8:	a902      	add	r1, sp, #8
 800a0ea:	9301      	str	r3, [sp, #4]
 800a0ec:	f000 f914 	bl	800a318 <_svfiprintf_r>
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	9b02      	ldr	r3, [sp, #8]
 800a0f4:	701a      	strb	r2, [r3, #0]
 800a0f6:	b01c      	add	sp, #112	; 0x70
 800a0f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a0fc:	b003      	add	sp, #12
 800a0fe:	4770      	bx	lr
 800a100:	20000210 	.word	0x20000210
 800a104:	ffff0208 	.word	0xffff0208

0800a108 <memset>:
 800a108:	4603      	mov	r3, r0
 800a10a:	4402      	add	r2, r0
 800a10c:	4293      	cmp	r3, r2
 800a10e:	d100      	bne.n	800a112 <memset+0xa>
 800a110:	4770      	bx	lr
 800a112:	f803 1b01 	strb.w	r1, [r3], #1
 800a116:	e7f9      	b.n	800a10c <memset+0x4>

0800a118 <strncat>:
 800a118:	b530      	push	{r4, r5, lr}
 800a11a:	4604      	mov	r4, r0
 800a11c:	7825      	ldrb	r5, [r4, #0]
 800a11e:	4623      	mov	r3, r4
 800a120:	3401      	adds	r4, #1
 800a122:	2d00      	cmp	r5, #0
 800a124:	d1fa      	bne.n	800a11c <strncat+0x4>
 800a126:	3a01      	subs	r2, #1
 800a128:	d304      	bcc.n	800a134 <strncat+0x1c>
 800a12a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a12e:	f803 4b01 	strb.w	r4, [r3], #1
 800a132:	b904      	cbnz	r4, 800a136 <strncat+0x1e>
 800a134:	bd30      	pop	{r4, r5, pc}
 800a136:	2a00      	cmp	r2, #0
 800a138:	d1f5      	bne.n	800a126 <strncat+0xe>
 800a13a:	701a      	strb	r2, [r3, #0]
 800a13c:	e7f3      	b.n	800a126 <strncat+0xe>
	...

0800a140 <_sbrk_r>:
 800a140:	b538      	push	{r3, r4, r5, lr}
 800a142:	2300      	movs	r3, #0
 800a144:	4d05      	ldr	r5, [pc, #20]	; (800a15c <_sbrk_r+0x1c>)
 800a146:	4604      	mov	r4, r0
 800a148:	4608      	mov	r0, r1
 800a14a:	602b      	str	r3, [r5, #0]
 800a14c:	f7f8 fe0c 	bl	8002d68 <_sbrk>
 800a150:	1c43      	adds	r3, r0, #1
 800a152:	d102      	bne.n	800a15a <_sbrk_r+0x1a>
 800a154:	682b      	ldr	r3, [r5, #0]
 800a156:	b103      	cbz	r3, 800a15a <_sbrk_r+0x1a>
 800a158:	6023      	str	r3, [r4, #0]
 800a15a:	bd38      	pop	{r3, r4, r5, pc}
 800a15c:	20001898 	.word	0x20001898

0800a160 <__errno>:
 800a160:	4b01      	ldr	r3, [pc, #4]	; (800a168 <__errno+0x8>)
 800a162:	6818      	ldr	r0, [r3, #0]
 800a164:	4770      	bx	lr
 800a166:	bf00      	nop
 800a168:	20000210 	.word	0x20000210

0800a16c <__libc_init_array>:
 800a16c:	b570      	push	{r4, r5, r6, lr}
 800a16e:	2600      	movs	r6, #0
 800a170:	4d0c      	ldr	r5, [pc, #48]	; (800a1a4 <__libc_init_array+0x38>)
 800a172:	4c0d      	ldr	r4, [pc, #52]	; (800a1a8 <__libc_init_array+0x3c>)
 800a174:	1b64      	subs	r4, r4, r5
 800a176:	10a4      	asrs	r4, r4, #2
 800a178:	42a6      	cmp	r6, r4
 800a17a:	d109      	bne.n	800a190 <__libc_init_array+0x24>
 800a17c:	f000 fdaa 	bl	800acd4 <_init>
 800a180:	2600      	movs	r6, #0
 800a182:	4d0a      	ldr	r5, [pc, #40]	; (800a1ac <__libc_init_array+0x40>)
 800a184:	4c0a      	ldr	r4, [pc, #40]	; (800a1b0 <__libc_init_array+0x44>)
 800a186:	1b64      	subs	r4, r4, r5
 800a188:	10a4      	asrs	r4, r4, #2
 800a18a:	42a6      	cmp	r6, r4
 800a18c:	d105      	bne.n	800a19a <__libc_init_array+0x2e>
 800a18e:	bd70      	pop	{r4, r5, r6, pc}
 800a190:	f855 3b04 	ldr.w	r3, [r5], #4
 800a194:	4798      	blx	r3
 800a196:	3601      	adds	r6, #1
 800a198:	e7ee      	b.n	800a178 <__libc_init_array+0xc>
 800a19a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a19e:	4798      	blx	r3
 800a1a0:	3601      	adds	r6, #1
 800a1a2:	e7f2      	b.n	800a18a <__libc_init_array+0x1e>
 800a1a4:	0800b1bc 	.word	0x0800b1bc
 800a1a8:	0800b1bc 	.word	0x0800b1bc
 800a1ac:	0800b1bc 	.word	0x0800b1bc
 800a1b0:	0800b1c0 	.word	0x0800b1c0

0800a1b4 <__retarget_lock_acquire_recursive>:
 800a1b4:	4770      	bx	lr

0800a1b6 <__retarget_lock_release_recursive>:
 800a1b6:	4770      	bx	lr

0800a1b8 <memcpy>:
 800a1b8:	440a      	add	r2, r1
 800a1ba:	4291      	cmp	r1, r2
 800a1bc:	f100 33ff 	add.w	r3, r0, #4294967295
 800a1c0:	d100      	bne.n	800a1c4 <memcpy+0xc>
 800a1c2:	4770      	bx	lr
 800a1c4:	b510      	push	{r4, lr}
 800a1c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a1ca:	4291      	cmp	r1, r2
 800a1cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a1d0:	d1f9      	bne.n	800a1c6 <memcpy+0xe>
 800a1d2:	bd10      	pop	{r4, pc}

0800a1d4 <_free_r>:
 800a1d4:	b538      	push	{r3, r4, r5, lr}
 800a1d6:	4605      	mov	r5, r0
 800a1d8:	2900      	cmp	r1, #0
 800a1da:	d040      	beq.n	800a25e <_free_r+0x8a>
 800a1dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a1e0:	1f0c      	subs	r4, r1, #4
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	bfb8      	it	lt
 800a1e6:	18e4      	addlt	r4, r4, r3
 800a1e8:	f7ff ff62 	bl	800a0b0 <__malloc_lock>
 800a1ec:	4a1c      	ldr	r2, [pc, #112]	; (800a260 <_free_r+0x8c>)
 800a1ee:	6813      	ldr	r3, [r2, #0]
 800a1f0:	b933      	cbnz	r3, 800a200 <_free_r+0x2c>
 800a1f2:	6063      	str	r3, [r4, #4]
 800a1f4:	6014      	str	r4, [r2, #0]
 800a1f6:	4628      	mov	r0, r5
 800a1f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a1fc:	f7ff bf5e 	b.w	800a0bc <__malloc_unlock>
 800a200:	42a3      	cmp	r3, r4
 800a202:	d908      	bls.n	800a216 <_free_r+0x42>
 800a204:	6820      	ldr	r0, [r4, #0]
 800a206:	1821      	adds	r1, r4, r0
 800a208:	428b      	cmp	r3, r1
 800a20a:	bf01      	itttt	eq
 800a20c:	6819      	ldreq	r1, [r3, #0]
 800a20e:	685b      	ldreq	r3, [r3, #4]
 800a210:	1809      	addeq	r1, r1, r0
 800a212:	6021      	streq	r1, [r4, #0]
 800a214:	e7ed      	b.n	800a1f2 <_free_r+0x1e>
 800a216:	461a      	mov	r2, r3
 800a218:	685b      	ldr	r3, [r3, #4]
 800a21a:	b10b      	cbz	r3, 800a220 <_free_r+0x4c>
 800a21c:	42a3      	cmp	r3, r4
 800a21e:	d9fa      	bls.n	800a216 <_free_r+0x42>
 800a220:	6811      	ldr	r1, [r2, #0]
 800a222:	1850      	adds	r0, r2, r1
 800a224:	42a0      	cmp	r0, r4
 800a226:	d10b      	bne.n	800a240 <_free_r+0x6c>
 800a228:	6820      	ldr	r0, [r4, #0]
 800a22a:	4401      	add	r1, r0
 800a22c:	1850      	adds	r0, r2, r1
 800a22e:	4283      	cmp	r3, r0
 800a230:	6011      	str	r1, [r2, #0]
 800a232:	d1e0      	bne.n	800a1f6 <_free_r+0x22>
 800a234:	6818      	ldr	r0, [r3, #0]
 800a236:	685b      	ldr	r3, [r3, #4]
 800a238:	4408      	add	r0, r1
 800a23a:	6010      	str	r0, [r2, #0]
 800a23c:	6053      	str	r3, [r2, #4]
 800a23e:	e7da      	b.n	800a1f6 <_free_r+0x22>
 800a240:	d902      	bls.n	800a248 <_free_r+0x74>
 800a242:	230c      	movs	r3, #12
 800a244:	602b      	str	r3, [r5, #0]
 800a246:	e7d6      	b.n	800a1f6 <_free_r+0x22>
 800a248:	6820      	ldr	r0, [r4, #0]
 800a24a:	1821      	adds	r1, r4, r0
 800a24c:	428b      	cmp	r3, r1
 800a24e:	bf01      	itttt	eq
 800a250:	6819      	ldreq	r1, [r3, #0]
 800a252:	685b      	ldreq	r3, [r3, #4]
 800a254:	1809      	addeq	r1, r1, r0
 800a256:	6021      	streq	r1, [r4, #0]
 800a258:	6063      	str	r3, [r4, #4]
 800a25a:	6054      	str	r4, [r2, #4]
 800a25c:	e7cb      	b.n	800a1f6 <_free_r+0x22>
 800a25e:	bd38      	pop	{r3, r4, r5, pc}
 800a260:	20001758 	.word	0x20001758

0800a264 <__ssputs_r>:
 800a264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a268:	461f      	mov	r7, r3
 800a26a:	688e      	ldr	r6, [r1, #8]
 800a26c:	4682      	mov	sl, r0
 800a26e:	42be      	cmp	r6, r7
 800a270:	460c      	mov	r4, r1
 800a272:	4690      	mov	r8, r2
 800a274:	680b      	ldr	r3, [r1, #0]
 800a276:	d82c      	bhi.n	800a2d2 <__ssputs_r+0x6e>
 800a278:	898a      	ldrh	r2, [r1, #12]
 800a27a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a27e:	d026      	beq.n	800a2ce <__ssputs_r+0x6a>
 800a280:	6965      	ldr	r5, [r4, #20]
 800a282:	6909      	ldr	r1, [r1, #16]
 800a284:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a288:	eba3 0901 	sub.w	r9, r3, r1
 800a28c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a290:	1c7b      	adds	r3, r7, #1
 800a292:	444b      	add	r3, r9
 800a294:	106d      	asrs	r5, r5, #1
 800a296:	429d      	cmp	r5, r3
 800a298:	bf38      	it	cc
 800a29a:	461d      	movcc	r5, r3
 800a29c:	0553      	lsls	r3, r2, #21
 800a29e:	d527      	bpl.n	800a2f0 <__ssputs_r+0x8c>
 800a2a0:	4629      	mov	r1, r5
 800a2a2:	f7ff fe85 	bl	8009fb0 <_malloc_r>
 800a2a6:	4606      	mov	r6, r0
 800a2a8:	b360      	cbz	r0, 800a304 <__ssputs_r+0xa0>
 800a2aa:	464a      	mov	r2, r9
 800a2ac:	6921      	ldr	r1, [r4, #16]
 800a2ae:	f7ff ff83 	bl	800a1b8 <memcpy>
 800a2b2:	89a3      	ldrh	r3, [r4, #12]
 800a2b4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a2b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2bc:	81a3      	strh	r3, [r4, #12]
 800a2be:	6126      	str	r6, [r4, #16]
 800a2c0:	444e      	add	r6, r9
 800a2c2:	6026      	str	r6, [r4, #0]
 800a2c4:	463e      	mov	r6, r7
 800a2c6:	6165      	str	r5, [r4, #20]
 800a2c8:	eba5 0509 	sub.w	r5, r5, r9
 800a2cc:	60a5      	str	r5, [r4, #8]
 800a2ce:	42be      	cmp	r6, r7
 800a2d0:	d900      	bls.n	800a2d4 <__ssputs_r+0x70>
 800a2d2:	463e      	mov	r6, r7
 800a2d4:	4632      	mov	r2, r6
 800a2d6:	4641      	mov	r1, r8
 800a2d8:	6820      	ldr	r0, [r4, #0]
 800a2da:	f000 faaf 	bl	800a83c <memmove>
 800a2de:	2000      	movs	r0, #0
 800a2e0:	68a3      	ldr	r3, [r4, #8]
 800a2e2:	1b9b      	subs	r3, r3, r6
 800a2e4:	60a3      	str	r3, [r4, #8]
 800a2e6:	6823      	ldr	r3, [r4, #0]
 800a2e8:	4433      	add	r3, r6
 800a2ea:	6023      	str	r3, [r4, #0]
 800a2ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2f0:	462a      	mov	r2, r5
 800a2f2:	f000 facb 	bl	800a88c <_realloc_r>
 800a2f6:	4606      	mov	r6, r0
 800a2f8:	2800      	cmp	r0, #0
 800a2fa:	d1e0      	bne.n	800a2be <__ssputs_r+0x5a>
 800a2fc:	4650      	mov	r0, sl
 800a2fe:	6921      	ldr	r1, [r4, #16]
 800a300:	f7ff ff68 	bl	800a1d4 <_free_r>
 800a304:	230c      	movs	r3, #12
 800a306:	f8ca 3000 	str.w	r3, [sl]
 800a30a:	89a3      	ldrh	r3, [r4, #12]
 800a30c:	f04f 30ff 	mov.w	r0, #4294967295
 800a310:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a314:	81a3      	strh	r3, [r4, #12]
 800a316:	e7e9      	b.n	800a2ec <__ssputs_r+0x88>

0800a318 <_svfiprintf_r>:
 800a318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a31c:	4698      	mov	r8, r3
 800a31e:	898b      	ldrh	r3, [r1, #12]
 800a320:	4607      	mov	r7, r0
 800a322:	061b      	lsls	r3, r3, #24
 800a324:	460d      	mov	r5, r1
 800a326:	4614      	mov	r4, r2
 800a328:	b09d      	sub	sp, #116	; 0x74
 800a32a:	d50e      	bpl.n	800a34a <_svfiprintf_r+0x32>
 800a32c:	690b      	ldr	r3, [r1, #16]
 800a32e:	b963      	cbnz	r3, 800a34a <_svfiprintf_r+0x32>
 800a330:	2140      	movs	r1, #64	; 0x40
 800a332:	f7ff fe3d 	bl	8009fb0 <_malloc_r>
 800a336:	6028      	str	r0, [r5, #0]
 800a338:	6128      	str	r0, [r5, #16]
 800a33a:	b920      	cbnz	r0, 800a346 <_svfiprintf_r+0x2e>
 800a33c:	230c      	movs	r3, #12
 800a33e:	603b      	str	r3, [r7, #0]
 800a340:	f04f 30ff 	mov.w	r0, #4294967295
 800a344:	e0d0      	b.n	800a4e8 <_svfiprintf_r+0x1d0>
 800a346:	2340      	movs	r3, #64	; 0x40
 800a348:	616b      	str	r3, [r5, #20]
 800a34a:	2300      	movs	r3, #0
 800a34c:	9309      	str	r3, [sp, #36]	; 0x24
 800a34e:	2320      	movs	r3, #32
 800a350:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a354:	2330      	movs	r3, #48	; 0x30
 800a356:	f04f 0901 	mov.w	r9, #1
 800a35a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a35e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800a500 <_svfiprintf_r+0x1e8>
 800a362:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a366:	4623      	mov	r3, r4
 800a368:	469a      	mov	sl, r3
 800a36a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a36e:	b10a      	cbz	r2, 800a374 <_svfiprintf_r+0x5c>
 800a370:	2a25      	cmp	r2, #37	; 0x25
 800a372:	d1f9      	bne.n	800a368 <_svfiprintf_r+0x50>
 800a374:	ebba 0b04 	subs.w	fp, sl, r4
 800a378:	d00b      	beq.n	800a392 <_svfiprintf_r+0x7a>
 800a37a:	465b      	mov	r3, fp
 800a37c:	4622      	mov	r2, r4
 800a37e:	4629      	mov	r1, r5
 800a380:	4638      	mov	r0, r7
 800a382:	f7ff ff6f 	bl	800a264 <__ssputs_r>
 800a386:	3001      	adds	r0, #1
 800a388:	f000 80a9 	beq.w	800a4de <_svfiprintf_r+0x1c6>
 800a38c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a38e:	445a      	add	r2, fp
 800a390:	9209      	str	r2, [sp, #36]	; 0x24
 800a392:	f89a 3000 	ldrb.w	r3, [sl]
 800a396:	2b00      	cmp	r3, #0
 800a398:	f000 80a1 	beq.w	800a4de <_svfiprintf_r+0x1c6>
 800a39c:	2300      	movs	r3, #0
 800a39e:	f04f 32ff 	mov.w	r2, #4294967295
 800a3a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a3a6:	f10a 0a01 	add.w	sl, sl, #1
 800a3aa:	9304      	str	r3, [sp, #16]
 800a3ac:	9307      	str	r3, [sp, #28]
 800a3ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a3b2:	931a      	str	r3, [sp, #104]	; 0x68
 800a3b4:	4654      	mov	r4, sl
 800a3b6:	2205      	movs	r2, #5
 800a3b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3bc:	4850      	ldr	r0, [pc, #320]	; (800a500 <_svfiprintf_r+0x1e8>)
 800a3be:	f000 fa57 	bl	800a870 <memchr>
 800a3c2:	9a04      	ldr	r2, [sp, #16]
 800a3c4:	b9d8      	cbnz	r0, 800a3fe <_svfiprintf_r+0xe6>
 800a3c6:	06d0      	lsls	r0, r2, #27
 800a3c8:	bf44      	itt	mi
 800a3ca:	2320      	movmi	r3, #32
 800a3cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a3d0:	0711      	lsls	r1, r2, #28
 800a3d2:	bf44      	itt	mi
 800a3d4:	232b      	movmi	r3, #43	; 0x2b
 800a3d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a3da:	f89a 3000 	ldrb.w	r3, [sl]
 800a3de:	2b2a      	cmp	r3, #42	; 0x2a
 800a3e0:	d015      	beq.n	800a40e <_svfiprintf_r+0xf6>
 800a3e2:	4654      	mov	r4, sl
 800a3e4:	2000      	movs	r0, #0
 800a3e6:	f04f 0c0a 	mov.w	ip, #10
 800a3ea:	9a07      	ldr	r2, [sp, #28]
 800a3ec:	4621      	mov	r1, r4
 800a3ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a3f2:	3b30      	subs	r3, #48	; 0x30
 800a3f4:	2b09      	cmp	r3, #9
 800a3f6:	d94d      	bls.n	800a494 <_svfiprintf_r+0x17c>
 800a3f8:	b1b0      	cbz	r0, 800a428 <_svfiprintf_r+0x110>
 800a3fa:	9207      	str	r2, [sp, #28]
 800a3fc:	e014      	b.n	800a428 <_svfiprintf_r+0x110>
 800a3fe:	eba0 0308 	sub.w	r3, r0, r8
 800a402:	fa09 f303 	lsl.w	r3, r9, r3
 800a406:	4313      	orrs	r3, r2
 800a408:	46a2      	mov	sl, r4
 800a40a:	9304      	str	r3, [sp, #16]
 800a40c:	e7d2      	b.n	800a3b4 <_svfiprintf_r+0x9c>
 800a40e:	9b03      	ldr	r3, [sp, #12]
 800a410:	1d19      	adds	r1, r3, #4
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	9103      	str	r1, [sp, #12]
 800a416:	2b00      	cmp	r3, #0
 800a418:	bfbb      	ittet	lt
 800a41a:	425b      	neglt	r3, r3
 800a41c:	f042 0202 	orrlt.w	r2, r2, #2
 800a420:	9307      	strge	r3, [sp, #28]
 800a422:	9307      	strlt	r3, [sp, #28]
 800a424:	bfb8      	it	lt
 800a426:	9204      	strlt	r2, [sp, #16]
 800a428:	7823      	ldrb	r3, [r4, #0]
 800a42a:	2b2e      	cmp	r3, #46	; 0x2e
 800a42c:	d10c      	bne.n	800a448 <_svfiprintf_r+0x130>
 800a42e:	7863      	ldrb	r3, [r4, #1]
 800a430:	2b2a      	cmp	r3, #42	; 0x2a
 800a432:	d134      	bne.n	800a49e <_svfiprintf_r+0x186>
 800a434:	9b03      	ldr	r3, [sp, #12]
 800a436:	3402      	adds	r4, #2
 800a438:	1d1a      	adds	r2, r3, #4
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	9203      	str	r2, [sp, #12]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	bfb8      	it	lt
 800a442:	f04f 33ff 	movlt.w	r3, #4294967295
 800a446:	9305      	str	r3, [sp, #20]
 800a448:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800a504 <_svfiprintf_r+0x1ec>
 800a44c:	2203      	movs	r2, #3
 800a44e:	4650      	mov	r0, sl
 800a450:	7821      	ldrb	r1, [r4, #0]
 800a452:	f000 fa0d 	bl	800a870 <memchr>
 800a456:	b138      	cbz	r0, 800a468 <_svfiprintf_r+0x150>
 800a458:	2240      	movs	r2, #64	; 0x40
 800a45a:	9b04      	ldr	r3, [sp, #16]
 800a45c:	eba0 000a 	sub.w	r0, r0, sl
 800a460:	4082      	lsls	r2, r0
 800a462:	4313      	orrs	r3, r2
 800a464:	3401      	adds	r4, #1
 800a466:	9304      	str	r3, [sp, #16]
 800a468:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a46c:	2206      	movs	r2, #6
 800a46e:	4826      	ldr	r0, [pc, #152]	; (800a508 <_svfiprintf_r+0x1f0>)
 800a470:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a474:	f000 f9fc 	bl	800a870 <memchr>
 800a478:	2800      	cmp	r0, #0
 800a47a:	d038      	beq.n	800a4ee <_svfiprintf_r+0x1d6>
 800a47c:	4b23      	ldr	r3, [pc, #140]	; (800a50c <_svfiprintf_r+0x1f4>)
 800a47e:	bb1b      	cbnz	r3, 800a4c8 <_svfiprintf_r+0x1b0>
 800a480:	9b03      	ldr	r3, [sp, #12]
 800a482:	3307      	adds	r3, #7
 800a484:	f023 0307 	bic.w	r3, r3, #7
 800a488:	3308      	adds	r3, #8
 800a48a:	9303      	str	r3, [sp, #12]
 800a48c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a48e:	4433      	add	r3, r6
 800a490:	9309      	str	r3, [sp, #36]	; 0x24
 800a492:	e768      	b.n	800a366 <_svfiprintf_r+0x4e>
 800a494:	460c      	mov	r4, r1
 800a496:	2001      	movs	r0, #1
 800a498:	fb0c 3202 	mla	r2, ip, r2, r3
 800a49c:	e7a6      	b.n	800a3ec <_svfiprintf_r+0xd4>
 800a49e:	2300      	movs	r3, #0
 800a4a0:	f04f 0c0a 	mov.w	ip, #10
 800a4a4:	4619      	mov	r1, r3
 800a4a6:	3401      	adds	r4, #1
 800a4a8:	9305      	str	r3, [sp, #20]
 800a4aa:	4620      	mov	r0, r4
 800a4ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a4b0:	3a30      	subs	r2, #48	; 0x30
 800a4b2:	2a09      	cmp	r2, #9
 800a4b4:	d903      	bls.n	800a4be <_svfiprintf_r+0x1a6>
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d0c6      	beq.n	800a448 <_svfiprintf_r+0x130>
 800a4ba:	9105      	str	r1, [sp, #20]
 800a4bc:	e7c4      	b.n	800a448 <_svfiprintf_r+0x130>
 800a4be:	4604      	mov	r4, r0
 800a4c0:	2301      	movs	r3, #1
 800a4c2:	fb0c 2101 	mla	r1, ip, r1, r2
 800a4c6:	e7f0      	b.n	800a4aa <_svfiprintf_r+0x192>
 800a4c8:	ab03      	add	r3, sp, #12
 800a4ca:	9300      	str	r3, [sp, #0]
 800a4cc:	462a      	mov	r2, r5
 800a4ce:	4638      	mov	r0, r7
 800a4d0:	4b0f      	ldr	r3, [pc, #60]	; (800a510 <_svfiprintf_r+0x1f8>)
 800a4d2:	a904      	add	r1, sp, #16
 800a4d4:	f3af 8000 	nop.w
 800a4d8:	1c42      	adds	r2, r0, #1
 800a4da:	4606      	mov	r6, r0
 800a4dc:	d1d6      	bne.n	800a48c <_svfiprintf_r+0x174>
 800a4de:	89ab      	ldrh	r3, [r5, #12]
 800a4e0:	065b      	lsls	r3, r3, #25
 800a4e2:	f53f af2d 	bmi.w	800a340 <_svfiprintf_r+0x28>
 800a4e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a4e8:	b01d      	add	sp, #116	; 0x74
 800a4ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4ee:	ab03      	add	r3, sp, #12
 800a4f0:	9300      	str	r3, [sp, #0]
 800a4f2:	462a      	mov	r2, r5
 800a4f4:	4638      	mov	r0, r7
 800a4f6:	4b06      	ldr	r3, [pc, #24]	; (800a510 <_svfiprintf_r+0x1f8>)
 800a4f8:	a904      	add	r1, sp, #16
 800a4fa:	f000 f87d 	bl	800a5f8 <_printf_i>
 800a4fe:	e7eb      	b.n	800a4d8 <_svfiprintf_r+0x1c0>
 800a500:	0800b180 	.word	0x0800b180
 800a504:	0800b186 	.word	0x0800b186
 800a508:	0800b18a 	.word	0x0800b18a
 800a50c:	00000000 	.word	0x00000000
 800a510:	0800a265 	.word	0x0800a265

0800a514 <_printf_common>:
 800a514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a518:	4616      	mov	r6, r2
 800a51a:	4699      	mov	r9, r3
 800a51c:	688a      	ldr	r2, [r1, #8]
 800a51e:	690b      	ldr	r3, [r1, #16]
 800a520:	4607      	mov	r7, r0
 800a522:	4293      	cmp	r3, r2
 800a524:	bfb8      	it	lt
 800a526:	4613      	movlt	r3, r2
 800a528:	6033      	str	r3, [r6, #0]
 800a52a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a52e:	460c      	mov	r4, r1
 800a530:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a534:	b10a      	cbz	r2, 800a53a <_printf_common+0x26>
 800a536:	3301      	adds	r3, #1
 800a538:	6033      	str	r3, [r6, #0]
 800a53a:	6823      	ldr	r3, [r4, #0]
 800a53c:	0699      	lsls	r1, r3, #26
 800a53e:	bf42      	ittt	mi
 800a540:	6833      	ldrmi	r3, [r6, #0]
 800a542:	3302      	addmi	r3, #2
 800a544:	6033      	strmi	r3, [r6, #0]
 800a546:	6825      	ldr	r5, [r4, #0]
 800a548:	f015 0506 	ands.w	r5, r5, #6
 800a54c:	d106      	bne.n	800a55c <_printf_common+0x48>
 800a54e:	f104 0a19 	add.w	sl, r4, #25
 800a552:	68e3      	ldr	r3, [r4, #12]
 800a554:	6832      	ldr	r2, [r6, #0]
 800a556:	1a9b      	subs	r3, r3, r2
 800a558:	42ab      	cmp	r3, r5
 800a55a:	dc2b      	bgt.n	800a5b4 <_printf_common+0xa0>
 800a55c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a560:	1e13      	subs	r3, r2, #0
 800a562:	6822      	ldr	r2, [r4, #0]
 800a564:	bf18      	it	ne
 800a566:	2301      	movne	r3, #1
 800a568:	0692      	lsls	r2, r2, #26
 800a56a:	d430      	bmi.n	800a5ce <_printf_common+0xba>
 800a56c:	4649      	mov	r1, r9
 800a56e:	4638      	mov	r0, r7
 800a570:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a574:	47c0      	blx	r8
 800a576:	3001      	adds	r0, #1
 800a578:	d023      	beq.n	800a5c2 <_printf_common+0xae>
 800a57a:	6823      	ldr	r3, [r4, #0]
 800a57c:	6922      	ldr	r2, [r4, #16]
 800a57e:	f003 0306 	and.w	r3, r3, #6
 800a582:	2b04      	cmp	r3, #4
 800a584:	bf14      	ite	ne
 800a586:	2500      	movne	r5, #0
 800a588:	6833      	ldreq	r3, [r6, #0]
 800a58a:	f04f 0600 	mov.w	r6, #0
 800a58e:	bf08      	it	eq
 800a590:	68e5      	ldreq	r5, [r4, #12]
 800a592:	f104 041a 	add.w	r4, r4, #26
 800a596:	bf08      	it	eq
 800a598:	1aed      	subeq	r5, r5, r3
 800a59a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800a59e:	bf08      	it	eq
 800a5a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a5a4:	4293      	cmp	r3, r2
 800a5a6:	bfc4      	itt	gt
 800a5a8:	1a9b      	subgt	r3, r3, r2
 800a5aa:	18ed      	addgt	r5, r5, r3
 800a5ac:	42b5      	cmp	r5, r6
 800a5ae:	d11a      	bne.n	800a5e6 <_printf_common+0xd2>
 800a5b0:	2000      	movs	r0, #0
 800a5b2:	e008      	b.n	800a5c6 <_printf_common+0xb2>
 800a5b4:	2301      	movs	r3, #1
 800a5b6:	4652      	mov	r2, sl
 800a5b8:	4649      	mov	r1, r9
 800a5ba:	4638      	mov	r0, r7
 800a5bc:	47c0      	blx	r8
 800a5be:	3001      	adds	r0, #1
 800a5c0:	d103      	bne.n	800a5ca <_printf_common+0xb6>
 800a5c2:	f04f 30ff 	mov.w	r0, #4294967295
 800a5c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5ca:	3501      	adds	r5, #1
 800a5cc:	e7c1      	b.n	800a552 <_printf_common+0x3e>
 800a5ce:	2030      	movs	r0, #48	; 0x30
 800a5d0:	18e1      	adds	r1, r4, r3
 800a5d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a5d6:	1c5a      	adds	r2, r3, #1
 800a5d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a5dc:	4422      	add	r2, r4
 800a5de:	3302      	adds	r3, #2
 800a5e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a5e4:	e7c2      	b.n	800a56c <_printf_common+0x58>
 800a5e6:	2301      	movs	r3, #1
 800a5e8:	4622      	mov	r2, r4
 800a5ea:	4649      	mov	r1, r9
 800a5ec:	4638      	mov	r0, r7
 800a5ee:	47c0      	blx	r8
 800a5f0:	3001      	adds	r0, #1
 800a5f2:	d0e6      	beq.n	800a5c2 <_printf_common+0xae>
 800a5f4:	3601      	adds	r6, #1
 800a5f6:	e7d9      	b.n	800a5ac <_printf_common+0x98>

0800a5f8 <_printf_i>:
 800a5f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a5fc:	7e0f      	ldrb	r7, [r1, #24]
 800a5fe:	4691      	mov	r9, r2
 800a600:	2f78      	cmp	r7, #120	; 0x78
 800a602:	4680      	mov	r8, r0
 800a604:	460c      	mov	r4, r1
 800a606:	469a      	mov	sl, r3
 800a608:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a60a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a60e:	d807      	bhi.n	800a620 <_printf_i+0x28>
 800a610:	2f62      	cmp	r7, #98	; 0x62
 800a612:	d80a      	bhi.n	800a62a <_printf_i+0x32>
 800a614:	2f00      	cmp	r7, #0
 800a616:	f000 80d5 	beq.w	800a7c4 <_printf_i+0x1cc>
 800a61a:	2f58      	cmp	r7, #88	; 0x58
 800a61c:	f000 80c1 	beq.w	800a7a2 <_printf_i+0x1aa>
 800a620:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a624:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a628:	e03a      	b.n	800a6a0 <_printf_i+0xa8>
 800a62a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a62e:	2b15      	cmp	r3, #21
 800a630:	d8f6      	bhi.n	800a620 <_printf_i+0x28>
 800a632:	a101      	add	r1, pc, #4	; (adr r1, 800a638 <_printf_i+0x40>)
 800a634:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a638:	0800a691 	.word	0x0800a691
 800a63c:	0800a6a5 	.word	0x0800a6a5
 800a640:	0800a621 	.word	0x0800a621
 800a644:	0800a621 	.word	0x0800a621
 800a648:	0800a621 	.word	0x0800a621
 800a64c:	0800a621 	.word	0x0800a621
 800a650:	0800a6a5 	.word	0x0800a6a5
 800a654:	0800a621 	.word	0x0800a621
 800a658:	0800a621 	.word	0x0800a621
 800a65c:	0800a621 	.word	0x0800a621
 800a660:	0800a621 	.word	0x0800a621
 800a664:	0800a7ab 	.word	0x0800a7ab
 800a668:	0800a6d1 	.word	0x0800a6d1
 800a66c:	0800a765 	.word	0x0800a765
 800a670:	0800a621 	.word	0x0800a621
 800a674:	0800a621 	.word	0x0800a621
 800a678:	0800a7cd 	.word	0x0800a7cd
 800a67c:	0800a621 	.word	0x0800a621
 800a680:	0800a6d1 	.word	0x0800a6d1
 800a684:	0800a621 	.word	0x0800a621
 800a688:	0800a621 	.word	0x0800a621
 800a68c:	0800a76d 	.word	0x0800a76d
 800a690:	682b      	ldr	r3, [r5, #0]
 800a692:	1d1a      	adds	r2, r3, #4
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	602a      	str	r2, [r5, #0]
 800a698:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a69c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a6a0:	2301      	movs	r3, #1
 800a6a2:	e0a0      	b.n	800a7e6 <_printf_i+0x1ee>
 800a6a4:	6820      	ldr	r0, [r4, #0]
 800a6a6:	682b      	ldr	r3, [r5, #0]
 800a6a8:	0607      	lsls	r7, r0, #24
 800a6aa:	f103 0104 	add.w	r1, r3, #4
 800a6ae:	6029      	str	r1, [r5, #0]
 800a6b0:	d501      	bpl.n	800a6b6 <_printf_i+0xbe>
 800a6b2:	681e      	ldr	r6, [r3, #0]
 800a6b4:	e003      	b.n	800a6be <_printf_i+0xc6>
 800a6b6:	0646      	lsls	r6, r0, #25
 800a6b8:	d5fb      	bpl.n	800a6b2 <_printf_i+0xba>
 800a6ba:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a6be:	2e00      	cmp	r6, #0
 800a6c0:	da03      	bge.n	800a6ca <_printf_i+0xd2>
 800a6c2:	232d      	movs	r3, #45	; 0x2d
 800a6c4:	4276      	negs	r6, r6
 800a6c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a6ca:	230a      	movs	r3, #10
 800a6cc:	4859      	ldr	r0, [pc, #356]	; (800a834 <_printf_i+0x23c>)
 800a6ce:	e012      	b.n	800a6f6 <_printf_i+0xfe>
 800a6d0:	682b      	ldr	r3, [r5, #0]
 800a6d2:	6820      	ldr	r0, [r4, #0]
 800a6d4:	1d19      	adds	r1, r3, #4
 800a6d6:	6029      	str	r1, [r5, #0]
 800a6d8:	0605      	lsls	r5, r0, #24
 800a6da:	d501      	bpl.n	800a6e0 <_printf_i+0xe8>
 800a6dc:	681e      	ldr	r6, [r3, #0]
 800a6de:	e002      	b.n	800a6e6 <_printf_i+0xee>
 800a6e0:	0641      	lsls	r1, r0, #25
 800a6e2:	d5fb      	bpl.n	800a6dc <_printf_i+0xe4>
 800a6e4:	881e      	ldrh	r6, [r3, #0]
 800a6e6:	2f6f      	cmp	r7, #111	; 0x6f
 800a6e8:	bf0c      	ite	eq
 800a6ea:	2308      	moveq	r3, #8
 800a6ec:	230a      	movne	r3, #10
 800a6ee:	4851      	ldr	r0, [pc, #324]	; (800a834 <_printf_i+0x23c>)
 800a6f0:	2100      	movs	r1, #0
 800a6f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a6f6:	6865      	ldr	r5, [r4, #4]
 800a6f8:	2d00      	cmp	r5, #0
 800a6fa:	bfa8      	it	ge
 800a6fc:	6821      	ldrge	r1, [r4, #0]
 800a6fe:	60a5      	str	r5, [r4, #8]
 800a700:	bfa4      	itt	ge
 800a702:	f021 0104 	bicge.w	r1, r1, #4
 800a706:	6021      	strge	r1, [r4, #0]
 800a708:	b90e      	cbnz	r6, 800a70e <_printf_i+0x116>
 800a70a:	2d00      	cmp	r5, #0
 800a70c:	d04b      	beq.n	800a7a6 <_printf_i+0x1ae>
 800a70e:	4615      	mov	r5, r2
 800a710:	fbb6 f1f3 	udiv	r1, r6, r3
 800a714:	fb03 6711 	mls	r7, r3, r1, r6
 800a718:	5dc7      	ldrb	r7, [r0, r7]
 800a71a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a71e:	4637      	mov	r7, r6
 800a720:	42bb      	cmp	r3, r7
 800a722:	460e      	mov	r6, r1
 800a724:	d9f4      	bls.n	800a710 <_printf_i+0x118>
 800a726:	2b08      	cmp	r3, #8
 800a728:	d10b      	bne.n	800a742 <_printf_i+0x14a>
 800a72a:	6823      	ldr	r3, [r4, #0]
 800a72c:	07de      	lsls	r6, r3, #31
 800a72e:	d508      	bpl.n	800a742 <_printf_i+0x14a>
 800a730:	6923      	ldr	r3, [r4, #16]
 800a732:	6861      	ldr	r1, [r4, #4]
 800a734:	4299      	cmp	r1, r3
 800a736:	bfde      	ittt	le
 800a738:	2330      	movle	r3, #48	; 0x30
 800a73a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a73e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a742:	1b52      	subs	r2, r2, r5
 800a744:	6122      	str	r2, [r4, #16]
 800a746:	464b      	mov	r3, r9
 800a748:	4621      	mov	r1, r4
 800a74a:	4640      	mov	r0, r8
 800a74c:	f8cd a000 	str.w	sl, [sp]
 800a750:	aa03      	add	r2, sp, #12
 800a752:	f7ff fedf 	bl	800a514 <_printf_common>
 800a756:	3001      	adds	r0, #1
 800a758:	d14a      	bne.n	800a7f0 <_printf_i+0x1f8>
 800a75a:	f04f 30ff 	mov.w	r0, #4294967295
 800a75e:	b004      	add	sp, #16
 800a760:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a764:	6823      	ldr	r3, [r4, #0]
 800a766:	f043 0320 	orr.w	r3, r3, #32
 800a76a:	6023      	str	r3, [r4, #0]
 800a76c:	2778      	movs	r7, #120	; 0x78
 800a76e:	4832      	ldr	r0, [pc, #200]	; (800a838 <_printf_i+0x240>)
 800a770:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a774:	6823      	ldr	r3, [r4, #0]
 800a776:	6829      	ldr	r1, [r5, #0]
 800a778:	061f      	lsls	r7, r3, #24
 800a77a:	f851 6b04 	ldr.w	r6, [r1], #4
 800a77e:	d402      	bmi.n	800a786 <_printf_i+0x18e>
 800a780:	065f      	lsls	r7, r3, #25
 800a782:	bf48      	it	mi
 800a784:	b2b6      	uxthmi	r6, r6
 800a786:	07df      	lsls	r7, r3, #31
 800a788:	bf48      	it	mi
 800a78a:	f043 0320 	orrmi.w	r3, r3, #32
 800a78e:	6029      	str	r1, [r5, #0]
 800a790:	bf48      	it	mi
 800a792:	6023      	strmi	r3, [r4, #0]
 800a794:	b91e      	cbnz	r6, 800a79e <_printf_i+0x1a6>
 800a796:	6823      	ldr	r3, [r4, #0]
 800a798:	f023 0320 	bic.w	r3, r3, #32
 800a79c:	6023      	str	r3, [r4, #0]
 800a79e:	2310      	movs	r3, #16
 800a7a0:	e7a6      	b.n	800a6f0 <_printf_i+0xf8>
 800a7a2:	4824      	ldr	r0, [pc, #144]	; (800a834 <_printf_i+0x23c>)
 800a7a4:	e7e4      	b.n	800a770 <_printf_i+0x178>
 800a7a6:	4615      	mov	r5, r2
 800a7a8:	e7bd      	b.n	800a726 <_printf_i+0x12e>
 800a7aa:	682b      	ldr	r3, [r5, #0]
 800a7ac:	6826      	ldr	r6, [r4, #0]
 800a7ae:	1d18      	adds	r0, r3, #4
 800a7b0:	6961      	ldr	r1, [r4, #20]
 800a7b2:	6028      	str	r0, [r5, #0]
 800a7b4:	0635      	lsls	r5, r6, #24
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	d501      	bpl.n	800a7be <_printf_i+0x1c6>
 800a7ba:	6019      	str	r1, [r3, #0]
 800a7bc:	e002      	b.n	800a7c4 <_printf_i+0x1cc>
 800a7be:	0670      	lsls	r0, r6, #25
 800a7c0:	d5fb      	bpl.n	800a7ba <_printf_i+0x1c2>
 800a7c2:	8019      	strh	r1, [r3, #0]
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	4615      	mov	r5, r2
 800a7c8:	6123      	str	r3, [r4, #16]
 800a7ca:	e7bc      	b.n	800a746 <_printf_i+0x14e>
 800a7cc:	682b      	ldr	r3, [r5, #0]
 800a7ce:	2100      	movs	r1, #0
 800a7d0:	1d1a      	adds	r2, r3, #4
 800a7d2:	602a      	str	r2, [r5, #0]
 800a7d4:	681d      	ldr	r5, [r3, #0]
 800a7d6:	6862      	ldr	r2, [r4, #4]
 800a7d8:	4628      	mov	r0, r5
 800a7da:	f000 f849 	bl	800a870 <memchr>
 800a7de:	b108      	cbz	r0, 800a7e4 <_printf_i+0x1ec>
 800a7e0:	1b40      	subs	r0, r0, r5
 800a7e2:	6060      	str	r0, [r4, #4]
 800a7e4:	6863      	ldr	r3, [r4, #4]
 800a7e6:	6123      	str	r3, [r4, #16]
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a7ee:	e7aa      	b.n	800a746 <_printf_i+0x14e>
 800a7f0:	462a      	mov	r2, r5
 800a7f2:	4649      	mov	r1, r9
 800a7f4:	4640      	mov	r0, r8
 800a7f6:	6923      	ldr	r3, [r4, #16]
 800a7f8:	47d0      	blx	sl
 800a7fa:	3001      	adds	r0, #1
 800a7fc:	d0ad      	beq.n	800a75a <_printf_i+0x162>
 800a7fe:	6823      	ldr	r3, [r4, #0]
 800a800:	079b      	lsls	r3, r3, #30
 800a802:	d413      	bmi.n	800a82c <_printf_i+0x234>
 800a804:	68e0      	ldr	r0, [r4, #12]
 800a806:	9b03      	ldr	r3, [sp, #12]
 800a808:	4298      	cmp	r0, r3
 800a80a:	bfb8      	it	lt
 800a80c:	4618      	movlt	r0, r3
 800a80e:	e7a6      	b.n	800a75e <_printf_i+0x166>
 800a810:	2301      	movs	r3, #1
 800a812:	4632      	mov	r2, r6
 800a814:	4649      	mov	r1, r9
 800a816:	4640      	mov	r0, r8
 800a818:	47d0      	blx	sl
 800a81a:	3001      	adds	r0, #1
 800a81c:	d09d      	beq.n	800a75a <_printf_i+0x162>
 800a81e:	3501      	adds	r5, #1
 800a820:	68e3      	ldr	r3, [r4, #12]
 800a822:	9903      	ldr	r1, [sp, #12]
 800a824:	1a5b      	subs	r3, r3, r1
 800a826:	42ab      	cmp	r3, r5
 800a828:	dcf2      	bgt.n	800a810 <_printf_i+0x218>
 800a82a:	e7eb      	b.n	800a804 <_printf_i+0x20c>
 800a82c:	2500      	movs	r5, #0
 800a82e:	f104 0619 	add.w	r6, r4, #25
 800a832:	e7f5      	b.n	800a820 <_printf_i+0x228>
 800a834:	0800b191 	.word	0x0800b191
 800a838:	0800b1a2 	.word	0x0800b1a2

0800a83c <memmove>:
 800a83c:	4288      	cmp	r0, r1
 800a83e:	b510      	push	{r4, lr}
 800a840:	eb01 0402 	add.w	r4, r1, r2
 800a844:	d902      	bls.n	800a84c <memmove+0x10>
 800a846:	4284      	cmp	r4, r0
 800a848:	4623      	mov	r3, r4
 800a84a:	d807      	bhi.n	800a85c <memmove+0x20>
 800a84c:	1e43      	subs	r3, r0, #1
 800a84e:	42a1      	cmp	r1, r4
 800a850:	d008      	beq.n	800a864 <memmove+0x28>
 800a852:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a856:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a85a:	e7f8      	b.n	800a84e <memmove+0x12>
 800a85c:	4601      	mov	r1, r0
 800a85e:	4402      	add	r2, r0
 800a860:	428a      	cmp	r2, r1
 800a862:	d100      	bne.n	800a866 <memmove+0x2a>
 800a864:	bd10      	pop	{r4, pc}
 800a866:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a86a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a86e:	e7f7      	b.n	800a860 <memmove+0x24>

0800a870 <memchr>:
 800a870:	4603      	mov	r3, r0
 800a872:	b510      	push	{r4, lr}
 800a874:	b2c9      	uxtb	r1, r1
 800a876:	4402      	add	r2, r0
 800a878:	4293      	cmp	r3, r2
 800a87a:	4618      	mov	r0, r3
 800a87c:	d101      	bne.n	800a882 <memchr+0x12>
 800a87e:	2000      	movs	r0, #0
 800a880:	e003      	b.n	800a88a <memchr+0x1a>
 800a882:	7804      	ldrb	r4, [r0, #0]
 800a884:	3301      	adds	r3, #1
 800a886:	428c      	cmp	r4, r1
 800a888:	d1f6      	bne.n	800a878 <memchr+0x8>
 800a88a:	bd10      	pop	{r4, pc}

0800a88c <_realloc_r>:
 800a88c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a890:	4680      	mov	r8, r0
 800a892:	4614      	mov	r4, r2
 800a894:	460e      	mov	r6, r1
 800a896:	b921      	cbnz	r1, 800a8a2 <_realloc_r+0x16>
 800a898:	4611      	mov	r1, r2
 800a89a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a89e:	f7ff bb87 	b.w	8009fb0 <_malloc_r>
 800a8a2:	b92a      	cbnz	r2, 800a8b0 <_realloc_r+0x24>
 800a8a4:	f7ff fc96 	bl	800a1d4 <_free_r>
 800a8a8:	4625      	mov	r5, r4
 800a8aa:	4628      	mov	r0, r5
 800a8ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8b0:	f000 f81b 	bl	800a8ea <_malloc_usable_size_r>
 800a8b4:	4284      	cmp	r4, r0
 800a8b6:	4607      	mov	r7, r0
 800a8b8:	d802      	bhi.n	800a8c0 <_realloc_r+0x34>
 800a8ba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a8be:	d812      	bhi.n	800a8e6 <_realloc_r+0x5a>
 800a8c0:	4621      	mov	r1, r4
 800a8c2:	4640      	mov	r0, r8
 800a8c4:	f7ff fb74 	bl	8009fb0 <_malloc_r>
 800a8c8:	4605      	mov	r5, r0
 800a8ca:	2800      	cmp	r0, #0
 800a8cc:	d0ed      	beq.n	800a8aa <_realloc_r+0x1e>
 800a8ce:	42bc      	cmp	r4, r7
 800a8d0:	4622      	mov	r2, r4
 800a8d2:	4631      	mov	r1, r6
 800a8d4:	bf28      	it	cs
 800a8d6:	463a      	movcs	r2, r7
 800a8d8:	f7ff fc6e 	bl	800a1b8 <memcpy>
 800a8dc:	4631      	mov	r1, r6
 800a8de:	4640      	mov	r0, r8
 800a8e0:	f7ff fc78 	bl	800a1d4 <_free_r>
 800a8e4:	e7e1      	b.n	800a8aa <_realloc_r+0x1e>
 800a8e6:	4635      	mov	r5, r6
 800a8e8:	e7df      	b.n	800a8aa <_realloc_r+0x1e>

0800a8ea <_malloc_usable_size_r>:
 800a8ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8ee:	1f18      	subs	r0, r3, #4
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	bfbc      	itt	lt
 800a8f4:	580b      	ldrlt	r3, [r1, r0]
 800a8f6:	18c0      	addlt	r0, r0, r3
 800a8f8:	4770      	bx	lr
	...

0800a8fc <log>:
 800a8fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8fe:	4604      	mov	r4, r0
 800a900:	460d      	mov	r5, r1
 800a902:	f000 f835 	bl	800a970 <__ieee754_log>
 800a906:	4622      	mov	r2, r4
 800a908:	4606      	mov	r6, r0
 800a90a:	460f      	mov	r7, r1
 800a90c:	462b      	mov	r3, r5
 800a90e:	4620      	mov	r0, r4
 800a910:	4629      	mov	r1, r5
 800a912:	f7f6 f8e7 	bl	8000ae4 <__aeabi_dcmpun>
 800a916:	b998      	cbnz	r0, 800a940 <log+0x44>
 800a918:	2200      	movs	r2, #0
 800a91a:	2300      	movs	r3, #0
 800a91c:	4620      	mov	r0, r4
 800a91e:	4629      	mov	r1, r5
 800a920:	f7f6 f8d6 	bl	8000ad0 <__aeabi_dcmpgt>
 800a924:	b960      	cbnz	r0, 800a940 <log+0x44>
 800a926:	2200      	movs	r2, #0
 800a928:	2300      	movs	r3, #0
 800a92a:	4620      	mov	r0, r4
 800a92c:	4629      	mov	r1, r5
 800a92e:	f7f6 f8a7 	bl	8000a80 <__aeabi_dcmpeq>
 800a932:	b140      	cbz	r0, 800a946 <log+0x4a>
 800a934:	f7ff fc14 	bl	800a160 <__errno>
 800a938:	2322      	movs	r3, #34	; 0x22
 800a93a:	2600      	movs	r6, #0
 800a93c:	4f06      	ldr	r7, [pc, #24]	; (800a958 <log+0x5c>)
 800a93e:	6003      	str	r3, [r0, #0]
 800a940:	4630      	mov	r0, r6
 800a942:	4639      	mov	r1, r7
 800a944:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a946:	f7ff fc0b 	bl	800a160 <__errno>
 800a94a:	2321      	movs	r3, #33	; 0x21
 800a94c:	6003      	str	r3, [r0, #0]
 800a94e:	4803      	ldr	r0, [pc, #12]	; (800a95c <log+0x60>)
 800a950:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a954:	f000 b804 	b.w	800a960 <nan>
 800a958:	fff00000 	.word	0xfff00000
 800a95c:	0800b185 	.word	0x0800b185

0800a960 <nan>:
 800a960:	2000      	movs	r0, #0
 800a962:	4901      	ldr	r1, [pc, #4]	; (800a968 <nan+0x8>)
 800a964:	4770      	bx	lr
 800a966:	bf00      	nop
 800a968:	7ff80000 	.word	0x7ff80000
 800a96c:	00000000 	.word	0x00000000

0800a970 <__ieee754_log>:
 800a970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a974:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800a978:	4602      	mov	r2, r0
 800a97a:	460b      	mov	r3, r1
 800a97c:	460d      	mov	r5, r1
 800a97e:	b087      	sub	sp, #28
 800a980:	da24      	bge.n	800a9cc <__ieee754_log+0x5c>
 800a982:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800a986:	4304      	orrs	r4, r0
 800a988:	d108      	bne.n	800a99c <__ieee754_log+0x2c>
 800a98a:	2200      	movs	r2, #0
 800a98c:	2300      	movs	r3, #0
 800a98e:	2000      	movs	r0, #0
 800a990:	49cb      	ldr	r1, [pc, #812]	; (800acc0 <__ieee754_log+0x350>)
 800a992:	f7f5 ff37 	bl	8000804 <__aeabi_ddiv>
 800a996:	b007      	add	sp, #28
 800a998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a99c:	2900      	cmp	r1, #0
 800a99e:	da04      	bge.n	800a9aa <__ieee754_log+0x3a>
 800a9a0:	f7f5 fc4e 	bl	8000240 <__aeabi_dsub>
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	e7f3      	b.n	800a992 <__ieee754_log+0x22>
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	4bc5      	ldr	r3, [pc, #788]	; (800acc4 <__ieee754_log+0x354>)
 800a9ae:	f7f5 fdff 	bl	80005b0 <__aeabi_dmul>
 800a9b2:	460b      	mov	r3, r1
 800a9b4:	460d      	mov	r5, r1
 800a9b6:	4602      	mov	r2, r0
 800a9b8:	f06f 0135 	mvn.w	r1, #53	; 0x35
 800a9bc:	48c2      	ldr	r0, [pc, #776]	; (800acc8 <__ieee754_log+0x358>)
 800a9be:	4285      	cmp	r5, r0
 800a9c0:	dd06      	ble.n	800a9d0 <__ieee754_log+0x60>
 800a9c2:	4610      	mov	r0, r2
 800a9c4:	4619      	mov	r1, r3
 800a9c6:	f7f5 fc3d 	bl	8000244 <__adddf3>
 800a9ca:	e7e4      	b.n	800a996 <__ieee754_log+0x26>
 800a9cc:	2100      	movs	r1, #0
 800a9ce:	e7f5      	b.n	800a9bc <__ieee754_log+0x4c>
 800a9d0:	152c      	asrs	r4, r5, #20
 800a9d2:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800a9d6:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800a9da:	440c      	add	r4, r1
 800a9dc:	f505 2115 	add.w	r1, r5, #610304	; 0x95000
 800a9e0:	f601 7164 	addw	r1, r1, #3940	; 0xf64
 800a9e4:	f401 1680 	and.w	r6, r1, #1048576	; 0x100000
 800a9e8:	f086 517f 	eor.w	r1, r6, #1069547520	; 0x3fc00000
 800a9ec:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 800a9f0:	ea41 0305 	orr.w	r3, r1, r5
 800a9f4:	4610      	mov	r0, r2
 800a9f6:	4619      	mov	r1, r3
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	4bb4      	ldr	r3, [pc, #720]	; (800accc <__ieee754_log+0x35c>)
 800a9fc:	f7f5 fc20 	bl	8000240 <__aeabi_dsub>
 800aa00:	1cab      	adds	r3, r5, #2
 800aa02:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aa06:	2b02      	cmp	r3, #2
 800aa08:	4682      	mov	sl, r0
 800aa0a:	468b      	mov	fp, r1
 800aa0c:	f04f 0200 	mov.w	r2, #0
 800aa10:	eb04 5416 	add.w	r4, r4, r6, lsr #20
 800aa14:	dc53      	bgt.n	800aabe <__ieee754_log+0x14e>
 800aa16:	2300      	movs	r3, #0
 800aa18:	f7f6 f832 	bl	8000a80 <__aeabi_dcmpeq>
 800aa1c:	b1d0      	cbz	r0, 800aa54 <__ieee754_log+0xe4>
 800aa1e:	2c00      	cmp	r4, #0
 800aa20:	f000 8122 	beq.w	800ac68 <__ieee754_log+0x2f8>
 800aa24:	4620      	mov	r0, r4
 800aa26:	f7f5 fd59 	bl	80004dc <__aeabi_i2d>
 800aa2a:	a391      	add	r3, pc, #580	; (adr r3, 800ac70 <__ieee754_log+0x300>)
 800aa2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa30:	4606      	mov	r6, r0
 800aa32:	460f      	mov	r7, r1
 800aa34:	f7f5 fdbc 	bl	80005b0 <__aeabi_dmul>
 800aa38:	a38f      	add	r3, pc, #572	; (adr r3, 800ac78 <__ieee754_log+0x308>)
 800aa3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa3e:	4604      	mov	r4, r0
 800aa40:	460d      	mov	r5, r1
 800aa42:	4630      	mov	r0, r6
 800aa44:	4639      	mov	r1, r7
 800aa46:	f7f5 fdb3 	bl	80005b0 <__aeabi_dmul>
 800aa4a:	4602      	mov	r2, r0
 800aa4c:	460b      	mov	r3, r1
 800aa4e:	4620      	mov	r0, r4
 800aa50:	4629      	mov	r1, r5
 800aa52:	e7b8      	b.n	800a9c6 <__ieee754_log+0x56>
 800aa54:	a38a      	add	r3, pc, #552	; (adr r3, 800ac80 <__ieee754_log+0x310>)
 800aa56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa5a:	4650      	mov	r0, sl
 800aa5c:	4659      	mov	r1, fp
 800aa5e:	f7f5 fda7 	bl	80005b0 <__aeabi_dmul>
 800aa62:	4602      	mov	r2, r0
 800aa64:	460b      	mov	r3, r1
 800aa66:	2000      	movs	r0, #0
 800aa68:	4999      	ldr	r1, [pc, #612]	; (800acd0 <__ieee754_log+0x360>)
 800aa6a:	f7f5 fbe9 	bl	8000240 <__aeabi_dsub>
 800aa6e:	4652      	mov	r2, sl
 800aa70:	4606      	mov	r6, r0
 800aa72:	460f      	mov	r7, r1
 800aa74:	465b      	mov	r3, fp
 800aa76:	4650      	mov	r0, sl
 800aa78:	4659      	mov	r1, fp
 800aa7a:	f7f5 fd99 	bl	80005b0 <__aeabi_dmul>
 800aa7e:	4602      	mov	r2, r0
 800aa80:	460b      	mov	r3, r1
 800aa82:	4630      	mov	r0, r6
 800aa84:	4639      	mov	r1, r7
 800aa86:	f7f5 fd93 	bl	80005b0 <__aeabi_dmul>
 800aa8a:	4606      	mov	r6, r0
 800aa8c:	460f      	mov	r7, r1
 800aa8e:	b914      	cbnz	r4, 800aa96 <__ieee754_log+0x126>
 800aa90:	4632      	mov	r2, r6
 800aa92:	463b      	mov	r3, r7
 800aa94:	e0a2      	b.n	800abdc <__ieee754_log+0x26c>
 800aa96:	4620      	mov	r0, r4
 800aa98:	f7f5 fd20 	bl	80004dc <__aeabi_i2d>
 800aa9c:	a374      	add	r3, pc, #464	; (adr r3, 800ac70 <__ieee754_log+0x300>)
 800aa9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaa2:	4680      	mov	r8, r0
 800aaa4:	4689      	mov	r9, r1
 800aaa6:	f7f5 fd83 	bl	80005b0 <__aeabi_dmul>
 800aaaa:	a373      	add	r3, pc, #460	; (adr r3, 800ac78 <__ieee754_log+0x308>)
 800aaac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aab0:	4604      	mov	r4, r0
 800aab2:	460d      	mov	r5, r1
 800aab4:	4640      	mov	r0, r8
 800aab6:	4649      	mov	r1, r9
 800aab8:	f7f5 fd7a 	bl	80005b0 <__aeabi_dmul>
 800aabc:	e0a7      	b.n	800ac0e <__ieee754_log+0x29e>
 800aabe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800aac2:	f7f5 fbbf 	bl	8000244 <__adddf3>
 800aac6:	4602      	mov	r2, r0
 800aac8:	460b      	mov	r3, r1
 800aaca:	4650      	mov	r0, sl
 800aacc:	4659      	mov	r1, fp
 800aace:	f7f5 fe99 	bl	8000804 <__aeabi_ddiv>
 800aad2:	e9cd 0100 	strd	r0, r1, [sp]
 800aad6:	4620      	mov	r0, r4
 800aad8:	f7f5 fd00 	bl	80004dc <__aeabi_i2d>
 800aadc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aae0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aae4:	4610      	mov	r0, r2
 800aae6:	4619      	mov	r1, r3
 800aae8:	f7f5 fd62 	bl	80005b0 <__aeabi_dmul>
 800aaec:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800aaf0:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800aaf4:	4602      	mov	r2, r0
 800aaf6:	9305      	str	r3, [sp, #20]
 800aaf8:	460b      	mov	r3, r1
 800aafa:	4606      	mov	r6, r0
 800aafc:	460f      	mov	r7, r1
 800aafe:	f7f5 fd57 	bl	80005b0 <__aeabi_dmul>
 800ab02:	a361      	add	r3, pc, #388	; (adr r3, 800ac88 <__ieee754_log+0x318>)
 800ab04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab08:	4680      	mov	r8, r0
 800ab0a:	4689      	mov	r9, r1
 800ab0c:	f7f5 fd50 	bl	80005b0 <__aeabi_dmul>
 800ab10:	a35f      	add	r3, pc, #380	; (adr r3, 800ac90 <__ieee754_log+0x320>)
 800ab12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab16:	f7f5 fb95 	bl	8000244 <__adddf3>
 800ab1a:	4642      	mov	r2, r8
 800ab1c:	464b      	mov	r3, r9
 800ab1e:	f7f5 fd47 	bl	80005b0 <__aeabi_dmul>
 800ab22:	a35d      	add	r3, pc, #372	; (adr r3, 800ac98 <__ieee754_log+0x328>)
 800ab24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab28:	f7f5 fb8c 	bl	8000244 <__adddf3>
 800ab2c:	4642      	mov	r2, r8
 800ab2e:	464b      	mov	r3, r9
 800ab30:	f7f5 fd3e 	bl	80005b0 <__aeabi_dmul>
 800ab34:	a35a      	add	r3, pc, #360	; (adr r3, 800aca0 <__ieee754_log+0x330>)
 800ab36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab3a:	f7f5 fb83 	bl	8000244 <__adddf3>
 800ab3e:	4632      	mov	r2, r6
 800ab40:	463b      	mov	r3, r7
 800ab42:	f7f5 fd35 	bl	80005b0 <__aeabi_dmul>
 800ab46:	a358      	add	r3, pc, #352	; (adr r3, 800aca8 <__ieee754_log+0x338>)
 800ab48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab4c:	4606      	mov	r6, r0
 800ab4e:	460f      	mov	r7, r1
 800ab50:	4640      	mov	r0, r8
 800ab52:	4649      	mov	r1, r9
 800ab54:	f7f5 fd2c 	bl	80005b0 <__aeabi_dmul>
 800ab58:	a355      	add	r3, pc, #340	; (adr r3, 800acb0 <__ieee754_log+0x340>)
 800ab5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab5e:	f7f5 fb71 	bl	8000244 <__adddf3>
 800ab62:	4642      	mov	r2, r8
 800ab64:	464b      	mov	r3, r9
 800ab66:	f7f5 fd23 	bl	80005b0 <__aeabi_dmul>
 800ab6a:	a353      	add	r3, pc, #332	; (adr r3, 800acb8 <__ieee754_log+0x348>)
 800ab6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab70:	f7f5 fb68 	bl	8000244 <__adddf3>
 800ab74:	4642      	mov	r2, r8
 800ab76:	464b      	mov	r3, r9
 800ab78:	f7f5 fd1a 	bl	80005b0 <__aeabi_dmul>
 800ab7c:	460b      	mov	r3, r1
 800ab7e:	4602      	mov	r2, r0
 800ab80:	4639      	mov	r1, r7
 800ab82:	4630      	mov	r0, r6
 800ab84:	f7f5 fb5e 	bl	8000244 <__adddf3>
 800ab88:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800ab8c:	9b05      	ldr	r3, [sp, #20]
 800ab8e:	3551      	adds	r5, #81	; 0x51
 800ab90:	431d      	orrs	r5, r3
 800ab92:	2d00      	cmp	r5, #0
 800ab94:	4680      	mov	r8, r0
 800ab96:	4689      	mov	r9, r1
 800ab98:	dd48      	ble.n	800ac2c <__ieee754_log+0x2bc>
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	4b4c      	ldr	r3, [pc, #304]	; (800acd0 <__ieee754_log+0x360>)
 800ab9e:	4650      	mov	r0, sl
 800aba0:	4659      	mov	r1, fp
 800aba2:	f7f5 fd05 	bl	80005b0 <__aeabi_dmul>
 800aba6:	4652      	mov	r2, sl
 800aba8:	465b      	mov	r3, fp
 800abaa:	f7f5 fd01 	bl	80005b0 <__aeabi_dmul>
 800abae:	4602      	mov	r2, r0
 800abb0:	460b      	mov	r3, r1
 800abb2:	4606      	mov	r6, r0
 800abb4:	460f      	mov	r7, r1
 800abb6:	4640      	mov	r0, r8
 800abb8:	4649      	mov	r1, r9
 800abba:	f7f5 fb43 	bl	8000244 <__adddf3>
 800abbe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800abc2:	f7f5 fcf5 	bl	80005b0 <__aeabi_dmul>
 800abc6:	4680      	mov	r8, r0
 800abc8:	4689      	mov	r9, r1
 800abca:	b964      	cbnz	r4, 800abe6 <__ieee754_log+0x276>
 800abcc:	4602      	mov	r2, r0
 800abce:	460b      	mov	r3, r1
 800abd0:	4630      	mov	r0, r6
 800abd2:	4639      	mov	r1, r7
 800abd4:	f7f5 fb34 	bl	8000240 <__aeabi_dsub>
 800abd8:	4602      	mov	r2, r0
 800abda:	460b      	mov	r3, r1
 800abdc:	4650      	mov	r0, sl
 800abde:	4659      	mov	r1, fp
 800abe0:	f7f5 fb2e 	bl	8000240 <__aeabi_dsub>
 800abe4:	e6d7      	b.n	800a996 <__ieee754_log+0x26>
 800abe6:	a322      	add	r3, pc, #136	; (adr r3, 800ac70 <__ieee754_log+0x300>)
 800abe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800abf0:	f7f5 fcde 	bl	80005b0 <__aeabi_dmul>
 800abf4:	a320      	add	r3, pc, #128	; (adr r3, 800ac78 <__ieee754_log+0x308>)
 800abf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abfa:	4604      	mov	r4, r0
 800abfc:	460d      	mov	r5, r1
 800abfe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac02:	f7f5 fcd5 	bl	80005b0 <__aeabi_dmul>
 800ac06:	4642      	mov	r2, r8
 800ac08:	464b      	mov	r3, r9
 800ac0a:	f7f5 fb1b 	bl	8000244 <__adddf3>
 800ac0e:	4602      	mov	r2, r0
 800ac10:	460b      	mov	r3, r1
 800ac12:	4630      	mov	r0, r6
 800ac14:	4639      	mov	r1, r7
 800ac16:	f7f5 fb13 	bl	8000240 <__aeabi_dsub>
 800ac1a:	4652      	mov	r2, sl
 800ac1c:	465b      	mov	r3, fp
 800ac1e:	f7f5 fb0f 	bl	8000240 <__aeabi_dsub>
 800ac22:	4602      	mov	r2, r0
 800ac24:	460b      	mov	r3, r1
 800ac26:	4620      	mov	r0, r4
 800ac28:	4629      	mov	r1, r5
 800ac2a:	e7d9      	b.n	800abe0 <__ieee754_log+0x270>
 800ac2c:	4602      	mov	r2, r0
 800ac2e:	460b      	mov	r3, r1
 800ac30:	4650      	mov	r0, sl
 800ac32:	4659      	mov	r1, fp
 800ac34:	f7f5 fb04 	bl	8000240 <__aeabi_dsub>
 800ac38:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ac3c:	f7f5 fcb8 	bl	80005b0 <__aeabi_dmul>
 800ac40:	4606      	mov	r6, r0
 800ac42:	460f      	mov	r7, r1
 800ac44:	2c00      	cmp	r4, #0
 800ac46:	f43f af23 	beq.w	800aa90 <__ieee754_log+0x120>
 800ac4a:	a309      	add	r3, pc, #36	; (adr r3, 800ac70 <__ieee754_log+0x300>)
 800ac4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac54:	f7f5 fcac 	bl	80005b0 <__aeabi_dmul>
 800ac58:	a307      	add	r3, pc, #28	; (adr r3, 800ac78 <__ieee754_log+0x308>)
 800ac5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac5e:	4604      	mov	r4, r0
 800ac60:	460d      	mov	r5, r1
 800ac62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac66:	e727      	b.n	800aab8 <__ieee754_log+0x148>
 800ac68:	2000      	movs	r0, #0
 800ac6a:	2100      	movs	r1, #0
 800ac6c:	e693      	b.n	800a996 <__ieee754_log+0x26>
 800ac6e:	bf00      	nop
 800ac70:	fee00000 	.word	0xfee00000
 800ac74:	3fe62e42 	.word	0x3fe62e42
 800ac78:	35793c76 	.word	0x35793c76
 800ac7c:	3dea39ef 	.word	0x3dea39ef
 800ac80:	55555555 	.word	0x55555555
 800ac84:	3fd55555 	.word	0x3fd55555
 800ac88:	df3e5244 	.word	0xdf3e5244
 800ac8c:	3fc2f112 	.word	0x3fc2f112
 800ac90:	96cb03de 	.word	0x96cb03de
 800ac94:	3fc74664 	.word	0x3fc74664
 800ac98:	94229359 	.word	0x94229359
 800ac9c:	3fd24924 	.word	0x3fd24924
 800aca0:	55555593 	.word	0x55555593
 800aca4:	3fe55555 	.word	0x3fe55555
 800aca8:	d078c69f 	.word	0xd078c69f
 800acac:	3fc39a09 	.word	0x3fc39a09
 800acb0:	1d8e78af 	.word	0x1d8e78af
 800acb4:	3fcc71c5 	.word	0x3fcc71c5
 800acb8:	9997fa04 	.word	0x9997fa04
 800acbc:	3fd99999 	.word	0x3fd99999
 800acc0:	c3500000 	.word	0xc3500000
 800acc4:	43500000 	.word	0x43500000
 800acc8:	7fefffff 	.word	0x7fefffff
 800accc:	3ff00000 	.word	0x3ff00000
 800acd0:	3fe00000 	.word	0x3fe00000

0800acd4 <_init>:
 800acd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acd6:	bf00      	nop
 800acd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acda:	bc08      	pop	{r3}
 800acdc:	469e      	mov	lr, r3
 800acde:	4770      	bx	lr

0800ace0 <_fini>:
 800ace0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ace2:	bf00      	nop
 800ace4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ace6:	bc08      	pop	{r3}
 800ace8:	469e      	mov	lr, r3
 800acea:	4770      	bx	lr
