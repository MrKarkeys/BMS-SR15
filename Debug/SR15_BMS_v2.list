
SR15_BMS_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e30  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000484  08009014  08009014  00019014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009498  08009498  00020238  2**0
                  CONTENTS
  4 .ARM          00000008  08009498  08009498  00019498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080094a0  080094a0  00020238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080094a0  080094a0  000194a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080094a4  080094a4  000194a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000238  20000000  080094a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001680  20000238  080096e0  00020238  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200018b8  080096e0  000218b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020261  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016eaf  00000000  00000000  000202a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004699  00000000  00000000  00037153  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016b8  00000000  00000000  0003b7f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001137  00000000  00000000  0003cea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023bba  00000000  00000000  0003dfdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001de04  00000000  00000000  00061b99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bf180  00000000  00000000  0007f99d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000060a0  00000000  00000000  0013eb20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00144bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000238 	.word	0x20000238
 8000200:	00000000 	.word	0x00000000
 8000204:	08008ffc 	.word	0x08008ffc

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	2000023c 	.word	0x2000023c
 8000220:	08008ffc 	.word	0x08008ffc

08000224 <__aeabi_uldivmod>:
 8000224:	b953      	cbnz	r3, 800023c <__aeabi_uldivmod+0x18>
 8000226:	b94a      	cbnz	r2, 800023c <__aeabi_uldivmod+0x18>
 8000228:	2900      	cmp	r1, #0
 800022a:	bf08      	it	eq
 800022c:	2800      	cmpeq	r0, #0
 800022e:	bf1c      	itt	ne
 8000230:	f04f 31ff 	movne.w	r1, #4294967295
 8000234:	f04f 30ff 	movne.w	r0, #4294967295
 8000238:	f000 b972 	b.w	8000520 <__aeabi_idiv0>
 800023c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000240:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000244:	f000 f806 	bl	8000254 <__udivmoddi4>
 8000248:	f8dd e004 	ldr.w	lr, [sp, #4]
 800024c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000250:	b004      	add	sp, #16
 8000252:	4770      	bx	lr

08000254 <__udivmoddi4>:
 8000254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000258:	9e08      	ldr	r6, [sp, #32]
 800025a:	460d      	mov	r5, r1
 800025c:	4604      	mov	r4, r0
 800025e:	468e      	mov	lr, r1
 8000260:	2b00      	cmp	r3, #0
 8000262:	d14c      	bne.n	80002fe <__udivmoddi4+0xaa>
 8000264:	428a      	cmp	r2, r1
 8000266:	4694      	mov	ip, r2
 8000268:	d967      	bls.n	800033a <__udivmoddi4+0xe6>
 800026a:	fab2 f382 	clz	r3, r2
 800026e:	b153      	cbz	r3, 8000286 <__udivmoddi4+0x32>
 8000270:	fa02 fc03 	lsl.w	ip, r2, r3
 8000274:	f1c3 0220 	rsb	r2, r3, #32
 8000278:	fa01 fe03 	lsl.w	lr, r1, r3
 800027c:	fa20 f202 	lsr.w	r2, r0, r2
 8000280:	ea42 0e0e 	orr.w	lr, r2, lr
 8000284:	409c      	lsls	r4, r3
 8000286:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800028a:	fbbe f1f7 	udiv	r1, lr, r7
 800028e:	fa1f f58c 	uxth.w	r5, ip
 8000292:	fb07 ee11 	mls	lr, r7, r1, lr
 8000296:	fb01 f005 	mul.w	r0, r1, r5
 800029a:	0c22      	lsrs	r2, r4, #16
 800029c:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 80002a0:	4290      	cmp	r0, r2
 80002a2:	d90a      	bls.n	80002ba <__udivmoddi4+0x66>
 80002a4:	eb1c 0202 	adds.w	r2, ip, r2
 80002a8:	f101 3eff 	add.w	lr, r1, #4294967295
 80002ac:	f080 8119 	bcs.w	80004e2 <__udivmoddi4+0x28e>
 80002b0:	4290      	cmp	r0, r2
 80002b2:	f240 8116 	bls.w	80004e2 <__udivmoddi4+0x28e>
 80002b6:	3902      	subs	r1, #2
 80002b8:	4462      	add	r2, ip
 80002ba:	1a12      	subs	r2, r2, r0
 80002bc:	fbb2 f0f7 	udiv	r0, r2, r7
 80002c0:	fb07 2210 	mls	r2, r7, r0, r2
 80002c4:	fb00 f505 	mul.w	r5, r0, r5
 80002c8:	b2a4      	uxth	r4, r4
 80002ca:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	d90a      	bls.n	80002e8 <__udivmoddi4+0x94>
 80002d2:	eb1c 0404 	adds.w	r4, ip, r4
 80002d6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002da:	f080 8104 	bcs.w	80004e6 <__udivmoddi4+0x292>
 80002de:	42a5      	cmp	r5, r4
 80002e0:	f240 8101 	bls.w	80004e6 <__udivmoddi4+0x292>
 80002e4:	4464      	add	r4, ip
 80002e6:	3802      	subs	r0, #2
 80002e8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002ec:	2100      	movs	r1, #0
 80002ee:	1b64      	subs	r4, r4, r5
 80002f0:	b11e      	cbz	r6, 80002fa <__udivmoddi4+0xa6>
 80002f2:	40dc      	lsrs	r4, r3
 80002f4:	2300      	movs	r3, #0
 80002f6:	e9c6 4300 	strd	r4, r3, [r6]
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	428b      	cmp	r3, r1
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0xc0>
 8000302:	2e00      	cmp	r6, #0
 8000304:	f000 80ea 	beq.w	80004dc <__udivmoddi4+0x288>
 8000308:	2100      	movs	r1, #0
 800030a:	e9c6 0500 	strd	r0, r5, [r6]
 800030e:	4608      	mov	r0, r1
 8000310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000314:	fab3 f183 	clz	r1, r3
 8000318:	2900      	cmp	r1, #0
 800031a:	d148      	bne.n	80003ae <__udivmoddi4+0x15a>
 800031c:	42ab      	cmp	r3, r5
 800031e:	d302      	bcc.n	8000326 <__udivmoddi4+0xd2>
 8000320:	4282      	cmp	r2, r0
 8000322:	f200 80f8 	bhi.w	8000516 <__udivmoddi4+0x2c2>
 8000326:	1a84      	subs	r4, r0, r2
 8000328:	eb65 0203 	sbc.w	r2, r5, r3
 800032c:	2001      	movs	r0, #1
 800032e:	4696      	mov	lr, r2
 8000330:	2e00      	cmp	r6, #0
 8000332:	d0e2      	beq.n	80002fa <__udivmoddi4+0xa6>
 8000334:	e9c6 4e00 	strd	r4, lr, [r6]
 8000338:	e7df      	b.n	80002fa <__udivmoddi4+0xa6>
 800033a:	b902      	cbnz	r2, 800033e <__udivmoddi4+0xea>
 800033c:	deff      	udf	#255	; 0xff
 800033e:	fab2 f382 	clz	r3, r2
 8000342:	2b00      	cmp	r3, #0
 8000344:	f040 808e 	bne.w	8000464 <__udivmoddi4+0x210>
 8000348:	1a88      	subs	r0, r1, r2
 800034a:	2101      	movs	r1, #1
 800034c:	0c17      	lsrs	r7, r2, #16
 800034e:	fa1f fe82 	uxth.w	lr, r2
 8000352:	fbb0 f5f7 	udiv	r5, r0, r7
 8000356:	fb07 0015 	mls	r0, r7, r5, r0
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000360:	fb0e f005 	mul.w	r0, lr, r5
 8000364:	4290      	cmp	r0, r2
 8000366:	d908      	bls.n	800037a <__udivmoddi4+0x126>
 8000368:	eb1c 0202 	adds.w	r2, ip, r2
 800036c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000370:	d202      	bcs.n	8000378 <__udivmoddi4+0x124>
 8000372:	4290      	cmp	r0, r2
 8000374:	f200 80cc 	bhi.w	8000510 <__udivmoddi4+0x2bc>
 8000378:	4645      	mov	r5, r8
 800037a:	1a12      	subs	r2, r2, r0
 800037c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000380:	fb07 2210 	mls	r2, r7, r0, r2
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	b2a4      	uxth	r4, r4
 800038a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800038e:	45a6      	cmp	lr, r4
 8000390:	d908      	bls.n	80003a4 <__udivmoddi4+0x150>
 8000392:	eb1c 0404 	adds.w	r4, ip, r4
 8000396:	f100 32ff 	add.w	r2, r0, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0x14e>
 800039c:	45a6      	cmp	lr, r4
 800039e:	f200 80b4 	bhi.w	800050a <__udivmoddi4+0x2b6>
 80003a2:	4610      	mov	r0, r2
 80003a4:	eba4 040e 	sub.w	r4, r4, lr
 80003a8:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003ac:	e7a0      	b.n	80002f0 <__udivmoddi4+0x9c>
 80003ae:	f1c1 0720 	rsb	r7, r1, #32
 80003b2:	408b      	lsls	r3, r1
 80003b4:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b8:	ea4c 0c03 	orr.w	ip, ip, r3
 80003bc:	fa25 fa07 	lsr.w	sl, r5, r7
 80003c0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c4:	fbba f8f9 	udiv	r8, sl, r9
 80003c8:	408d      	lsls	r5, r1
 80003ca:	fa20 f307 	lsr.w	r3, r0, r7
 80003ce:	fb09 aa18 	mls	sl, r9, r8, sl
 80003d2:	fa1f fe8c 	uxth.w	lr, ip
 80003d6:	432b      	orrs	r3, r5
 80003d8:	fa00 f501 	lsl.w	r5, r0, r1
 80003dc:	fb08 f00e 	mul.w	r0, r8, lr
 80003e0:	0c1c      	lsrs	r4, r3, #16
 80003e2:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80003e6:	42a0      	cmp	r0, r4
 80003e8:	fa02 f201 	lsl.w	r2, r2, r1
 80003ec:	d90b      	bls.n	8000406 <__udivmoddi4+0x1b2>
 80003ee:	eb1c 0404 	adds.w	r4, ip, r4
 80003f2:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f6:	f080 8086 	bcs.w	8000506 <__udivmoddi4+0x2b2>
 80003fa:	42a0      	cmp	r0, r4
 80003fc:	f240 8083 	bls.w	8000506 <__udivmoddi4+0x2b2>
 8000400:	f1a8 0802 	sub.w	r8, r8, #2
 8000404:	4464      	add	r4, ip
 8000406:	1a24      	subs	r4, r4, r0
 8000408:	b298      	uxth	r0, r3
 800040a:	fbb4 f3f9 	udiv	r3, r4, r9
 800040e:	fb09 4413 	mls	r4, r9, r3, r4
 8000412:	fb03 fe0e 	mul.w	lr, r3, lr
 8000416:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 800041a:	45a6      	cmp	lr, r4
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x1dc>
 800041e:	eb1c 0404 	adds.w	r4, ip, r4
 8000422:	f103 30ff 	add.w	r0, r3, #4294967295
 8000426:	d26a      	bcs.n	80004fe <__udivmoddi4+0x2aa>
 8000428:	45a6      	cmp	lr, r4
 800042a:	d968      	bls.n	80004fe <__udivmoddi4+0x2aa>
 800042c:	3b02      	subs	r3, #2
 800042e:	4464      	add	r4, ip
 8000430:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000434:	fba0 9302 	umull	r9, r3, r0, r2
 8000438:	eba4 040e 	sub.w	r4, r4, lr
 800043c:	429c      	cmp	r4, r3
 800043e:	46c8      	mov	r8, r9
 8000440:	469e      	mov	lr, r3
 8000442:	d354      	bcc.n	80004ee <__udivmoddi4+0x29a>
 8000444:	d051      	beq.n	80004ea <__udivmoddi4+0x296>
 8000446:	2e00      	cmp	r6, #0
 8000448:	d067      	beq.n	800051a <__udivmoddi4+0x2c6>
 800044a:	ebb5 0308 	subs.w	r3, r5, r8
 800044e:	eb64 040e 	sbc.w	r4, r4, lr
 8000452:	40cb      	lsrs	r3, r1
 8000454:	fa04 f707 	lsl.w	r7, r4, r7
 8000458:	431f      	orrs	r7, r3
 800045a:	40cc      	lsrs	r4, r1
 800045c:	e9c6 7400 	strd	r7, r4, [r6]
 8000460:	2100      	movs	r1, #0
 8000462:	e74a      	b.n	80002fa <__udivmoddi4+0xa6>
 8000464:	fa02 fc03 	lsl.w	ip, r2, r3
 8000468:	f1c3 0020 	rsb	r0, r3, #32
 800046c:	40c1      	lsrs	r1, r0
 800046e:	409d      	lsls	r5, r3
 8000470:	fa24 f000 	lsr.w	r0, r4, r0
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	4328      	orrs	r0, r5
 800047a:	fbb1 f5f7 	udiv	r5, r1, r7
 800047e:	fb07 1115 	mls	r1, r7, r5, r1
 8000482:	fa1f fe8c 	uxth.w	lr, ip
 8000486:	0c02      	lsrs	r2, r0, #16
 8000488:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800048c:	fb05 f10e 	mul.w	r1, r5, lr
 8000490:	4291      	cmp	r1, r2
 8000492:	fa04 f403 	lsl.w	r4, r4, r3
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x256>
 8000498:	eb1c 0202 	adds.w	r2, ip, r2
 800049c:	f105 38ff 	add.w	r8, r5, #4294967295
 80004a0:	d22f      	bcs.n	8000502 <__udivmoddi4+0x2ae>
 80004a2:	4291      	cmp	r1, r2
 80004a4:	d92d      	bls.n	8000502 <__udivmoddi4+0x2ae>
 80004a6:	3d02      	subs	r5, #2
 80004a8:	4462      	add	r2, ip
 80004aa:	1a52      	subs	r2, r2, r1
 80004ac:	fbb2 f1f7 	udiv	r1, r2, r7
 80004b0:	fb07 2211 	mls	r2, r7, r1, r2
 80004b4:	b280      	uxth	r0, r0
 80004b6:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80004ba:	fb01 f20e 	mul.w	r2, r1, lr
 80004be:	4282      	cmp	r2, r0
 80004c0:	d908      	bls.n	80004d4 <__udivmoddi4+0x280>
 80004c2:	eb1c 0000 	adds.w	r0, ip, r0
 80004c6:	f101 38ff 	add.w	r8, r1, #4294967295
 80004ca:	d216      	bcs.n	80004fa <__udivmoddi4+0x2a6>
 80004cc:	4282      	cmp	r2, r0
 80004ce:	d914      	bls.n	80004fa <__udivmoddi4+0x2a6>
 80004d0:	3902      	subs	r1, #2
 80004d2:	4460      	add	r0, ip
 80004d4:	1a80      	subs	r0, r0, r2
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	e73a      	b.n	8000352 <__udivmoddi4+0xfe>
 80004dc:	4631      	mov	r1, r6
 80004de:	4630      	mov	r0, r6
 80004e0:	e70b      	b.n	80002fa <__udivmoddi4+0xa6>
 80004e2:	4671      	mov	r1, lr
 80004e4:	e6e9      	b.n	80002ba <__udivmoddi4+0x66>
 80004e6:	4610      	mov	r0, r2
 80004e8:	e6fe      	b.n	80002e8 <__udivmoddi4+0x94>
 80004ea:	454d      	cmp	r5, r9
 80004ec:	d2ab      	bcs.n	8000446 <__udivmoddi4+0x1f2>
 80004ee:	ebb9 0802 	subs.w	r8, r9, r2
 80004f2:	eb63 0e0c 	sbc.w	lr, r3, ip
 80004f6:	3801      	subs	r0, #1
 80004f8:	e7a5      	b.n	8000446 <__udivmoddi4+0x1f2>
 80004fa:	4641      	mov	r1, r8
 80004fc:	e7ea      	b.n	80004d4 <__udivmoddi4+0x280>
 80004fe:	4603      	mov	r3, r0
 8000500:	e796      	b.n	8000430 <__udivmoddi4+0x1dc>
 8000502:	4645      	mov	r5, r8
 8000504:	e7d1      	b.n	80004aa <__udivmoddi4+0x256>
 8000506:	46d0      	mov	r8, sl
 8000508:	e77d      	b.n	8000406 <__udivmoddi4+0x1b2>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e749      	b.n	80003a4 <__udivmoddi4+0x150>
 8000510:	3d02      	subs	r5, #2
 8000512:	4462      	add	r2, ip
 8000514:	e731      	b.n	800037a <__udivmoddi4+0x126>
 8000516:	4608      	mov	r0, r1
 8000518:	e70a      	b.n	8000330 <__udivmoddi4+0xdc>
 800051a:	4631      	mov	r1, r6
 800051c:	e6ed      	b.n	80002fa <__udivmoddi4+0xa6>
 800051e:	bf00      	nop

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <wakeup_idle>:
#define LTC_SERIES_GROUPS_PER_RDCV 3 // Number of cell voltage groups per 8 byte register
#define LTC_SERIES_GROUPS_PER_RDAUX 3
#define NUM_AUX_SERIES_GROUPS 6 // Number of series groups

/* Wake LTC up from IDLE state into READY state */
void wakeup_idle(void) {
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
	uint8_t hex_ff = 0xFF;
 800052a:	23ff      	movs	r3, #255	; 0xff
 800052c:	70fb      	strb	r3, [r7, #3]
	for (int i = 0; i < NUM_DEVICES; i++) {
 800052e:	2300      	movs	r3, #0
 8000530:	607b      	str	r3, [r7, #4]
 8000532:	e00c      	b.n	800054e <wakeup_idle+0x2a>
		LTC_nCS_Low();							   // Pull CS low
 8000534:	f001 fb0a 	bl	8001b4c <LTC_nCS_Low>
		HAL_SPI_Transmit(&hspi1, &hex_ff, 1, 100); // Send byte 0xFF to wake LTC up
 8000538:	1cf9      	adds	r1, r7, #3
 800053a:	2364      	movs	r3, #100	; 0x64
 800053c:	2201      	movs	r2, #1
 800053e:	4808      	ldr	r0, [pc, #32]	; (8000560 <wakeup_idle+0x3c>)
 8000540:	f004 fb82 	bl	8004c48 <HAL_SPI_Transmit>
		LTC_nCS_High();							   // Pull CS high
 8000544:	f001 faf6 	bl	8001b34 <LTC_nCS_High>
	for (int i = 0; i < NUM_DEVICES; i++) {
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	3301      	adds	r3, #1
 800054c:	607b      	str	r3, [r7, #4]
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	2b00      	cmp	r3, #0
 8000552:	ddef      	ble.n	8000534 <wakeup_idle+0x10>
	}
}
 8000554:	bf00      	nop
 8000556:	bf00      	nop
 8000558:	3708      	adds	r7, #8
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	200002dc 	.word	0x200002dc

08000564 <wakeup_sleep>:

// wake up sleep
void wakeup_sleep(void) {
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0

	for (int i = 0; i < NUM_DEVICES; i++) {
 800056a:	2300      	movs	r3, #0
 800056c:	607b      	str	r3, [r7, #4]
 800056e:	e00e      	b.n	800058e <wakeup_sleep+0x2a>
		LTC_nCS_Low();
 8000570:	f001 faec 	bl	8001b4c <LTC_nCS_Low>
		HAL_Delay(300);
 8000574:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000578:	f001 fc70 	bl	8001e5c <HAL_Delay>
		LTC_nCS_High();
 800057c:	f001 fada 	bl	8001b34 <LTC_nCS_High>
		HAL_Delay(300);
 8000580:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000584:	f001 fc6a 	bl	8001e5c <HAL_Delay>
	for (int i = 0; i < NUM_DEVICES; i++) {
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	3301      	adds	r3, #1
 800058c:	607b      	str	r3, [r7, #4]
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	2b00      	cmp	r3, #0
 8000592:	dded      	ble.n	8000570 <wakeup_sleep+0xc>
	}
}
 8000594:	bf00      	nop
 8000596:	bf00      	nop
 8000598:	3708      	adds	r7, #8
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
	...

080005a0 <read_cell_volt>:

/* Read and store raw cell voltages at uint8_t 2d pointer */
LTC_SPI_StatusTypeDef read_cell_volt(uint16_t *read_voltages) {
 80005a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80005a4:	b089      	sub	sp, #36	; 0x24
 80005a6:	af00      	add	r7, sp, #0
 80005a8:	6078      	str	r0, [r7, #4]
 80005aa:	466b      	mov	r3, sp
 80005ac:	461e      	mov	r6, r3
	LTC_SPI_StatusTypeDef ret = LTC_SPI_OK;
 80005ae:	2300      	movs	r3, #0
 80005b0:	77fb      	strb	r3, [r7, #31]
	LTC_SPI_StatusTypeDef hal_ret;
	const uint8_t ARR_SIZE_REG = NUM_DEVICES * REG_LEN;
 80005b2:	2308      	movs	r3, #8
 80005b4:	773b      	strb	r3, [r7, #28]
	uint8_t read_voltages_reg[ARR_SIZE_REG]; // Increased in size to handle multiple devices
 80005b6:	7f3b      	ldrb	r3, [r7, #28]
 80005b8:	3b01      	subs	r3, #1
 80005ba:	61bb      	str	r3, [r7, #24]
 80005bc:	7f3b      	ldrb	r3, [r7, #28]
 80005be:	2200      	movs	r2, #0
 80005c0:	4698      	mov	r8, r3
 80005c2:	4691      	mov	r9, r2
 80005c4:	f04f 0200 	mov.w	r2, #0
 80005c8:	f04f 0300 	mov.w	r3, #0
 80005cc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80005d0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80005d4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80005d8:	7f3b      	ldrb	r3, [r7, #28]
 80005da:	2200      	movs	r2, #0
 80005dc:	461c      	mov	r4, r3
 80005de:	4615      	mov	r5, r2
 80005e0:	f04f 0200 	mov.w	r2, #0
 80005e4:	f04f 0300 	mov.w	r3, #0
 80005e8:	00eb      	lsls	r3, r5, #3
 80005ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80005ee:	00e2      	lsls	r2, r4, #3
 80005f0:	7f3b      	ldrb	r3, [r7, #28]
 80005f2:	3307      	adds	r3, #7
 80005f4:	08db      	lsrs	r3, r3, #3
 80005f6:	00db      	lsls	r3, r3, #3
 80005f8:	ebad 0d03 	sub.w	sp, sp, r3
 80005fc:	466b      	mov	r3, sp
 80005fe:	3300      	adds	r3, #0
 8000600:	617b      	str	r3, [r7, #20]

	for (uint8_t i = 0; i < (NUM_CELL_SERIES_GROUP / LTC_SERIES_GROUPS_PER_RDCV);
 8000602:	2300      	movs	r3, #0
 8000604:	77bb      	strb	r3, [r7, #30]
 8000606:	e074      	b.n	80006f2 <read_cell_volt+0x152>
			i++) {
		uint8_t cmd[4];
		uint16_t cmd_pec;

		cmd[0] = (0xFF & (LTC_CMD_RDCV[i] >> 8)); // RDCV Register
 8000608:	7fbb      	ldrb	r3, [r7, #30]
 800060a:	4a3f      	ldr	r2, [pc, #252]	; (8000708 <read_cell_volt+0x168>)
 800060c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000610:	0a1b      	lsrs	r3, r3, #8
 8000612:	b29b      	uxth	r3, r3
 8000614:	b2db      	uxtb	r3, r3
 8000616:	723b      	strb	r3, [r7, #8]
		cmd[1] = (0xFF & (LTC_CMD_RDCV[i]));	  // RDCV Register
 8000618:	7fbb      	ldrb	r3, [r7, #30]
 800061a:	4a3b      	ldr	r2, [pc, #236]	; (8000708 <read_cell_volt+0x168>)
 800061c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000620:	b2db      	uxtb	r3, r3
 8000622:	727b      	strb	r3, [r7, #9]
		cmd_pec = ltc_pec15_calc(2, cmd);
 8000624:	f107 0308 	add.w	r3, r7, #8
 8000628:	4619      	mov	r1, r3
 800062a:	2002      	movs	r0, #2
 800062c:	f000 fab0 	bl	8000b90 <ltc_pec15_calc>
 8000630:	4603      	mov	r3, r0
 8000632:	827b      	strh	r3, [r7, #18]
		cmd[2] = (uint8_t) (cmd_pec >> 8);
 8000634:	8a7b      	ldrh	r3, [r7, #18]
 8000636:	0a1b      	lsrs	r3, r3, #8
 8000638:	b29b      	uxth	r3, r3
 800063a:	b2db      	uxtb	r3, r3
 800063c:	72bb      	strb	r3, [r7, #10]
		cmd[3] = (uint8_t) (cmd_pec);
 800063e:	8a7b      	ldrh	r3, [r7, #18]
 8000640:	b2db      	uxtb	r3, r3
 8000642:	72fb      	strb	r3, [r7, #11]

		wakeup_idle(); // Wake LTC up
 8000644:	f7ff ff6e 	bl	8000524 <wakeup_idle>

		LTC_nCS_Low(); // Pull CS low
 8000648:	f001 fa80 	bl	8001b4c <LTC_nCS_Low>

		hal_ret = HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 800064c:	f107 0108 	add.w	r1, r7, #8
 8000650:	2364      	movs	r3, #100	; 0x64
 8000652:	2204      	movs	r2, #4
 8000654:	482d      	ldr	r0, [pc, #180]	; (800070c <read_cell_volt+0x16c>)
 8000656:	f004 faf7 	bl	8004c48 <HAL_SPI_Transmit>
 800065a:	4603      	mov	r3, r0
 800065c:	747b      	strb	r3, [r7, #17]
		if (hal_ret) {									// Non-zero means error
 800065e:	7c7b      	ldrb	r3, [r7, #17]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d009      	beq.n	8000678 <read_cell_volt+0xd8>
			ret |= (1 << (hal_ret + LTC_SPI_TX_BIT_OFFSET)); // TX error
 8000664:	7c7b      	ldrb	r3, [r7, #17]
 8000666:	2201      	movs	r2, #1
 8000668:	fa02 f303 	lsl.w	r3, r2, r3
 800066c:	b25a      	sxtb	r2, r3
 800066e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000672:	4313      	orrs	r3, r2
 8000674:	b25b      	sxtb	r3, r3
 8000676:	77fb      	strb	r3, [r7, #31]
		}

		hal_ret = HAL_SPI_Receive(&hspi1, (uint8_t*) read_voltages_reg,
 8000678:	7f3b      	ldrb	r3, [r7, #28]
 800067a:	b29a      	uxth	r2, r3
 800067c:	2364      	movs	r3, #100	; 0x64
 800067e:	6979      	ldr	r1, [r7, #20]
 8000680:	4822      	ldr	r0, [pc, #136]	; (800070c <read_cell_volt+0x16c>)
 8000682:	f004 fc24 	bl	8004ece <HAL_SPI_Receive>
 8000686:	4603      	mov	r3, r0
 8000688:	747b      	strb	r3, [r7, #17]
				ARR_SIZE_REG, 100);
		if (hal_ret) {									// Non-zero means error
 800068a:	7c7b      	ldrb	r3, [r7, #17]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d00a      	beq.n	80006a6 <read_cell_volt+0x106>
			ret |= (1 << (hal_ret + LTC_SPI_RX_BIT_OFFSET)); // RX error
 8000690:	7c7b      	ldrb	r3, [r7, #17]
 8000692:	3304      	adds	r3, #4
 8000694:	2201      	movs	r2, #1
 8000696:	fa02 f303 	lsl.w	r3, r2, r3
 800069a:	b25a      	sxtb	r2, r3
 800069c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80006a0:	4313      	orrs	r3, r2
 80006a2:	b25b      	sxtb	r3, r3
 80006a4:	77fb      	strb	r3, [r7, #31]
		}

		// Process the received data
		for (uint8_t dev_idx = 0; dev_idx < NUM_DEVICES; dev_idx++) {
 80006a6:	2300      	movs	r3, #0
 80006a8:	777b      	strb	r3, [r7, #29]
 80006aa:	e01a      	b.n	80006e2 <read_cell_volt+0x142>
			// Assuming data format is [cell voltage, cell voltage, ..., PEC, PEC]
			// PEC for each device is the last two bytes of its data segment
			uint8_t *data_ptr = &read_voltages_reg[dev_idx * REG_LEN];
 80006ac:	7f7b      	ldrb	r3, [r7, #29]
 80006ae:	00db      	lsls	r3, r3, #3
 80006b0:	697a      	ldr	r2, [r7, #20]
 80006b2:	4413      	add	r3, r2
 80006b4:	60fb      	str	r3, [r7, #12]
			// If PEC matches, copy the voltage data, omitting the PEC bytes
			memcpy(
					&read_voltages[dev_idx * NUM_CELL_SERIES_GROUP
 80006b6:	7f7a      	ldrb	r2, [r7, #29]
 80006b8:	4613      	mov	r3, r2
 80006ba:	005b      	lsls	r3, r3, #1
 80006bc:	4413      	add	r3, r2
 80006be:	009b      	lsls	r3, r3, #2
 80006c0:	4619      	mov	r1, r3
							+ i * LTC_SERIES_GROUPS_PER_RDCV], data_ptr,
 80006c2:	7fba      	ldrb	r2, [r7, #30]
 80006c4:	4613      	mov	r3, r2
 80006c6:	005b      	lsls	r3, r3, #1
 80006c8:	4413      	add	r3, r2
 80006ca:	440b      	add	r3, r1
					&read_voltages[dev_idx * NUM_CELL_SERIES_GROUP
 80006cc:	005b      	lsls	r3, r3, #1
 80006ce:	687a      	ldr	r2, [r7, #4]
 80006d0:	4413      	add	r3, r2
			memcpy(
 80006d2:	2206      	movs	r2, #6
 80006d4:	68f9      	ldr	r1, [r7, #12]
 80006d6:	4618      	mov	r0, r3
 80006d8:	f008 fc3a 	bl	8008f50 <memcpy>
		for (uint8_t dev_idx = 0; dev_idx < NUM_DEVICES; dev_idx++) {
 80006dc:	7f7b      	ldrb	r3, [r7, #29]
 80006de:	3301      	adds	r3, #1
 80006e0:	777b      	strb	r3, [r7, #29]
 80006e2:	7f7b      	ldrb	r3, [r7, #29]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d0e1      	beq.n	80006ac <read_cell_volt+0x10c>
					REG_LEN - 2);
		}

		LTC_nCS_High(); // Pull CS high
 80006e8:	f001 fa24 	bl	8001b34 <LTC_nCS_High>
			i++) {
 80006ec:	7fbb      	ldrb	r3, [r7, #30]
 80006ee:	3301      	adds	r3, #1
 80006f0:	77bb      	strb	r3, [r7, #30]
	for (uint8_t i = 0; i < (NUM_CELL_SERIES_GROUP / LTC_SERIES_GROUPS_PER_RDCV);
 80006f2:	7fbb      	ldrb	r3, [r7, #30]
 80006f4:	2b03      	cmp	r3, #3
 80006f6:	d987      	bls.n	8000608 <read_cell_volt+0x68>
	}

	return ret;
 80006f8:	7ffb      	ldrb	r3, [r7, #31]
 80006fa:	46b5      	mov	sp, r6
}
 80006fc:	4618      	mov	r0, r3
 80006fe:	3724      	adds	r7, #36	; 0x24
 8000700:	46bd      	mov	sp, r7
 8000702:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000706:	bf00      	nop
 8000708:	0800905c 	.word	0x0800905c
 800070c:	200002dc 	.word	0x200002dc

08000710 <ltc_wrcomm>:
/**
 * 
 * @param total_ic	The number of ICs being written to
 * @param comm[6]	A two dimensional array of the comm data that will be written
 */
void ltc_wrcomm(uint8_t total_ic, uint8_t comm[6]) {
 8000710:	b580      	push	{r7, lr}
 8000712:	b086      	sub	sp, #24
 8000714:	af00      	add	r7, sp, #0
 8000716:	4603      	mov	r3, r0
 8000718:	6039      	str	r1, [r7, #0]
 800071a:	71fb      	strb	r3, [r7, #7]
	const uint8_t BYTES_IN_REG = 6;
 800071c:	2306      	movs	r3, #6
 800071e:	753b      	strb	r3, [r7, #20]
	const uint8_t CMD_LEN = 4 + (8 * total_ic);
 8000720:	79fb      	ldrb	r3, [r7, #7]
 8000722:	00db      	lsls	r3, r3, #3
 8000724:	b2db      	uxtb	r3, r3
 8000726:	3304      	adds	r3, #4
 8000728:	74fb      	strb	r3, [r7, #19]
	uint8_t *cmd;
	uint16_t comm_pec;
	uint16_t cmd_pec;
	uint8_t cmd_index; // command counter

	cmd = (uint8_t*) malloc(CMD_LEN * sizeof(uint8_t));
 800072a:	7cfb      	ldrb	r3, [r7, #19]
 800072c:	4618      	mov	r0, r3
 800072e:	f008 fb0f 	bl	8008d50 <malloc>
 8000732:	4603      	mov	r3, r0
 8000734:	60fb      	str	r3, [r7, #12]

	cmd[0] = 0x07;
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	2207      	movs	r2, #7
 800073a:	701a      	strb	r2, [r3, #0]
	cmd[1] = 0x21;
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	3301      	adds	r3, #1
 8000740:	2221      	movs	r2, #33	; 0x21
 8000742:	701a      	strb	r2, [r3, #0]
	cmd_pec = ltc_pec15_calc(2, cmd);
 8000744:	68f9      	ldr	r1, [r7, #12]
 8000746:	2002      	movs	r0, #2
 8000748:	f000 fa22 	bl	8000b90 <ltc_pec15_calc>
 800074c:	4603      	mov	r3, r0
 800074e:	817b      	strh	r3, [r7, #10]
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 8000750:	897b      	ldrh	r3, [r7, #10]
 8000752:	0a1b      	lsrs	r3, r3, #8
 8000754:	b29a      	uxth	r2, r3
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	3302      	adds	r3, #2
 800075a:	b2d2      	uxtb	r2, r2
 800075c:	701a      	strb	r2, [r3, #0]
	cmd[3] = (uint8_t) (cmd_pec);
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	3303      	adds	r3, #3
 8000762:	897a      	ldrh	r2, [r7, #10]
 8000764:	b2d2      	uxtb	r2, r2
 8000766:	701a      	strb	r2, [r3, #0]

	cmd_index = 4;
 8000768:	2304      	movs	r3, #4
 800076a:	75fb      	strb	r3, [r7, #23]
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--) // executes for each ltc6811 in daisy chain, this loops starts with
 800076c:	79fb      	ldrb	r3, [r7, #7]
 800076e:	75bb      	strb	r3, [r7, #22]
 8000770:	e030      	b.n	80007d4 <ltc_wrcomm+0xc4>
			{
		// the last IC on the stack. The first configuration written is
		// received by the last IC in the daisy chain

		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG;
 8000772:	2300      	movs	r3, #0
 8000774:	757b      	strb	r3, [r7, #21]
 8000776:	e00d      	b.n	8000794 <ltc_wrcomm+0x84>
				current_byte++) // executes for each of the 6 bytes in the CFGR register
				{
			// current_byte is the byte counter
			cmd[cmd_index] = comm[current_byte]; // adding the config data to the array to be sent
 8000778:	7d7b      	ldrb	r3, [r7, #21]
 800077a:	683a      	ldr	r2, [r7, #0]
 800077c:	441a      	add	r2, r3
 800077e:	7dfb      	ldrb	r3, [r7, #23]
 8000780:	68f9      	ldr	r1, [r7, #12]
 8000782:	440b      	add	r3, r1
 8000784:	7812      	ldrb	r2, [r2, #0]
 8000786:	701a      	strb	r2, [r3, #0]
			cmd_index = cmd_index + 1;
 8000788:	7dfb      	ldrb	r3, [r7, #23]
 800078a:	3301      	adds	r3, #1
 800078c:	75fb      	strb	r3, [r7, #23]
				current_byte++) // executes for each of the 6 bytes in the CFGR register
 800078e:	7d7b      	ldrb	r3, [r7, #21]
 8000790:	3301      	adds	r3, #1
 8000792:	757b      	strb	r3, [r7, #21]
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG;
 8000794:	7d7a      	ldrb	r2, [r7, #21]
 8000796:	7d3b      	ldrb	r3, [r7, #20]
 8000798:	429a      	cmp	r2, r3
 800079a:	d3ed      	bcc.n	8000778 <ltc_wrcomm+0x68>
		}
		comm_pec = (uint16_t) ltc_pec15_calc(BYTES_IN_REG, &comm[0]); // calculating the PEC for each ICs configuration register data
 800079c:	7d3b      	ldrb	r3, [r7, #20]
 800079e:	6839      	ldr	r1, [r7, #0]
 80007a0:	4618      	mov	r0, r3
 80007a2:	f000 f9f5 	bl	8000b90 <ltc_pec15_calc>
 80007a6:	4603      	mov	r3, r0
 80007a8:	813b      	strh	r3, [r7, #8]
		cmd[cmd_index] = (uint8_t) (comm_pec >> 8);
 80007aa:	893b      	ldrh	r3, [r7, #8]
 80007ac:	0a1b      	lsrs	r3, r3, #8
 80007ae:	b299      	uxth	r1, r3
 80007b0:	7dfb      	ldrb	r3, [r7, #23]
 80007b2:	68fa      	ldr	r2, [r7, #12]
 80007b4:	4413      	add	r3, r2
 80007b6:	b2ca      	uxtb	r2, r1
 80007b8:	701a      	strb	r2, [r3, #0]
		cmd[cmd_index + 1] = (uint8_t) comm_pec;
 80007ba:	7dfb      	ldrb	r3, [r7, #23]
 80007bc:	3301      	adds	r3, #1
 80007be:	68fa      	ldr	r2, [r7, #12]
 80007c0:	4413      	add	r3, r2
 80007c2:	893a      	ldrh	r2, [r7, #8]
 80007c4:	b2d2      	uxtb	r2, r2
 80007c6:	701a      	strb	r2, [r3, #0]
		cmd_index = cmd_index + 2;
 80007c8:	7dfb      	ldrb	r3, [r7, #23]
 80007ca:	3302      	adds	r3, #2
 80007cc:	75fb      	strb	r3, [r7, #23]
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--) // executes for each ltc6811 in daisy chain, this loops starts with
 80007ce:	7dbb      	ldrb	r3, [r7, #22]
 80007d0:	3b01      	subs	r3, #1
 80007d2:	75bb      	strb	r3, [r7, #22]
 80007d4:	7dbb      	ldrb	r3, [r7, #22]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d1cb      	bne.n	8000772 <ltc_wrcomm+0x62>
	}

	wakeup_idle(); // This will guarantee that the ltc6811 isoSPI port is awake.This command can be removed.
 80007da:	f7ff fea3 	bl	8000524 <wakeup_idle>
	LTC_nCS_Low();
 80007de:	f001 f9b5 	bl	8001b4c <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, CMD_LEN, 100);
 80007e2:	7cfb      	ldrb	r3, [r7, #19]
 80007e4:	b29a      	uxth	r2, r3
 80007e6:	2364      	movs	r3, #100	; 0x64
 80007e8:	68f9      	ldr	r1, [r7, #12]
 80007ea:	4806      	ldr	r0, [pc, #24]	; (8000804 <ltc_wrcomm+0xf4>)
 80007ec:	f004 fa2c 	bl	8004c48 <HAL_SPI_Transmit>
	LTC_nCS_High();
 80007f0:	f001 f9a0 	bl	8001b34 <LTC_nCS_High>
	free(cmd);
 80007f4:	68f8      	ldr	r0, [r7, #12]
 80007f6:	f008 fab3 	bl	8008d60 <free>
}
 80007fa:	bf00      	nop
 80007fc:	3718      	adds	r7, #24
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	200002dc 	.word	0x200002dc

08000808 <ltc_stcomm>:

/**
 * Shifts data in COMM register out over ltc6811 SPI/I2C port
 */
void ltc_stcomm(uint8_t len) {
 8000808:	b580      	push	{r7, lr}
 800080a:	b086      	sub	sp, #24
 800080c:	af00      	add	r7, sp, #0
 800080e:	4603      	mov	r3, r0
 8000810:	71fb      	strb	r3, [r7, #7]

	uint8_t cmd[4];
	uint16_t cmd_pec;

	cmd[0] = 0x07;
 8000812:	2307      	movs	r3, #7
 8000814:	733b      	strb	r3, [r7, #12]
	cmd[1] = 0x23;
 8000816:	2323      	movs	r3, #35	; 0x23
 8000818:	737b      	strb	r3, [r7, #13]
	cmd_pec = ltc_pec15_calc(2, cmd);
 800081a:	f107 030c 	add.w	r3, r7, #12
 800081e:	4619      	mov	r1, r3
 8000820:	2002      	movs	r0, #2
 8000822:	f000 f9b5 	bl	8000b90 <ltc_pec15_calc>
 8000826:	4603      	mov	r3, r0
 8000828:	827b      	strh	r3, [r7, #18]
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 800082a:	8a7b      	ldrh	r3, [r7, #18]
 800082c:	0a1b      	lsrs	r3, r3, #8
 800082e:	b29b      	uxth	r3, r3
 8000830:	b2db      	uxtb	r3, r3
 8000832:	73bb      	strb	r3, [r7, #14]
	cmd[3] = (uint8_t) (cmd_pec);
 8000834:	8a7b      	ldrh	r3, [r7, #18]
 8000836:	b2db      	uxtb	r3, r3
 8000838:	73fb      	strb	r3, [r7, #15]

	wakeup_idle(); // This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
 800083a:	f7ff fe73 	bl	8000524 <wakeup_idle>
	LTC_nCS_Low();
 800083e:	f001 f985 	bl	8001b4c <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 8000842:	f107 010c 	add.w	r1, r7, #12
 8000846:	2364      	movs	r3, #100	; 0x64
 8000848:	2204      	movs	r2, #4
 800084a:	480e      	ldr	r0, [pc, #56]	; (8000884 <ltc_stcomm+0x7c>)
 800084c:	f004 f9fc 	bl	8004c48 <HAL_SPI_Transmit>
	for (int i = 0; i < len * 3; i++) {
 8000850:	2300      	movs	r3, #0
 8000852:	617b      	str	r3, [r7, #20]
 8000854:	e008      	b.n	8000868 <ltc_stcomm+0x60>
		HAL_SPI_Transmit(&hspi1, (uint8_t*) 0xFF, 1, 100);
 8000856:	2364      	movs	r3, #100	; 0x64
 8000858:	2201      	movs	r2, #1
 800085a:	21ff      	movs	r1, #255	; 0xff
 800085c:	4809      	ldr	r0, [pc, #36]	; (8000884 <ltc_stcomm+0x7c>)
 800085e:	f004 f9f3 	bl	8004c48 <HAL_SPI_Transmit>
	for (int i = 0; i < len * 3; i++) {
 8000862:	697b      	ldr	r3, [r7, #20]
 8000864:	3301      	adds	r3, #1
 8000866:	617b      	str	r3, [r7, #20]
 8000868:	79fa      	ldrb	r2, [r7, #7]
 800086a:	4613      	mov	r3, r2
 800086c:	005b      	lsls	r3, r3, #1
 800086e:	4413      	add	r3, r2
 8000870:	697a      	ldr	r2, [r7, #20]
 8000872:	429a      	cmp	r2, r3
 8000874:	dbef      	blt.n	8000856 <ltc_stcomm+0x4e>
	}
	LTC_nCS_High();
 8000876:	f001 f95d 	bl	8001b34 <LTC_nCS_High>
}
 800087a:	bf00      	nop
 800087c:	3718      	adds	r7, #24
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	200002dc 	.word	0x200002dc

08000888 <read_cell_temps>:

LTC_SPI_StatusTypeDef read_cell_temps(uint16_t *read_auxiliary) {
 8000888:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800088c:	b089      	sub	sp, #36	; 0x24
 800088e:	af00      	add	r7, sp, #0
 8000890:	6078      	str	r0, [r7, #4]
 8000892:	466b      	mov	r3, sp
 8000894:	461e      	mov	r6, r3
	LTC_SPI_StatusTypeDef ret = LTC_SPI_OK;
 8000896:	2300      	movs	r3, #0
 8000898:	77fb      	strb	r3, [r7, #31]
	LTC_SPI_StatusTypeDef hal_ret;
	const uint8_t ARR_SIZE_REG = NUM_DEVICES * REG_LEN;
 800089a:	2308      	movs	r3, #8
 800089c:	773b      	strb	r3, [r7, #28]
	uint8_t read_auxiliary_reg[ARR_SIZE_REG]; // Increased in size to handle multiple devices
 800089e:	7f3b      	ldrb	r3, [r7, #28]
 80008a0:	3b01      	subs	r3, #1
 80008a2:	61bb      	str	r3, [r7, #24]
 80008a4:	7f3b      	ldrb	r3, [r7, #28]
 80008a6:	2200      	movs	r2, #0
 80008a8:	4698      	mov	r8, r3
 80008aa:	4691      	mov	r9, r2
 80008ac:	f04f 0200 	mov.w	r2, #0
 80008b0:	f04f 0300 	mov.w	r3, #0
 80008b4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80008b8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80008bc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80008c0:	7f3b      	ldrb	r3, [r7, #28]
 80008c2:	2200      	movs	r2, #0
 80008c4:	461c      	mov	r4, r3
 80008c6:	4615      	mov	r5, r2
 80008c8:	f04f 0200 	mov.w	r2, #0
 80008cc:	f04f 0300 	mov.w	r3, #0
 80008d0:	00eb      	lsls	r3, r5, #3
 80008d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80008d6:	00e2      	lsls	r2, r4, #3
 80008d8:	7f3b      	ldrb	r3, [r7, #28]
 80008da:	3307      	adds	r3, #7
 80008dc:	08db      	lsrs	r3, r3, #3
 80008de:	00db      	lsls	r3, r3, #3
 80008e0:	ebad 0d03 	sub.w	sp, sp, r3
 80008e4:	466b      	mov	r3, sp
 80008e6:	3300      	adds	r3, #0
 80008e8:	617b      	str	r3, [r7, #20]

	for (uint8_t i = 0;
 80008ea:	2300      	movs	r3, #0
 80008ec:	77bb      	strb	r3, [r7, #30]
 80008ee:	e074      	b.n	80009da <read_cell_temps+0x152>
			i < (NUM_AUX_SERIES_GROUPS / LTC_SERIES_GROUPS_PER_RDAUX); i++) {
		uint8_t cmd[4];
		uint16_t cmd_pec;

		cmd[0] = (0xFF & (LTC_CMD_AUXREG[i] >> 8)); // RDCV Register
 80008f0:	7fbb      	ldrb	r3, [r7, #30]
 80008f2:	4a3f      	ldr	r2, [pc, #252]	; (80009f0 <read_cell_temps+0x168>)
 80008f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008f8:	0a1b      	lsrs	r3, r3, #8
 80008fa:	b29b      	uxth	r3, r3
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	723b      	strb	r3, [r7, #8]
		cmd[1] = (0xFF & (LTC_CMD_AUXREG[i]));		// RDCV Register
 8000900:	7fbb      	ldrb	r3, [r7, #30]
 8000902:	4a3b      	ldr	r2, [pc, #236]	; (80009f0 <read_cell_temps+0x168>)
 8000904:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000908:	b2db      	uxtb	r3, r3
 800090a:	727b      	strb	r3, [r7, #9]
		cmd_pec = ltc_pec15_calc(2, cmd);
 800090c:	f107 0308 	add.w	r3, r7, #8
 8000910:	4619      	mov	r1, r3
 8000912:	2002      	movs	r0, #2
 8000914:	f000 f93c 	bl	8000b90 <ltc_pec15_calc>
 8000918:	4603      	mov	r3, r0
 800091a:	827b      	strh	r3, [r7, #18]
		cmd[2] = (uint8_t) (cmd_pec >> 8);
 800091c:	8a7b      	ldrh	r3, [r7, #18]
 800091e:	0a1b      	lsrs	r3, r3, #8
 8000920:	b29b      	uxth	r3, r3
 8000922:	b2db      	uxtb	r3, r3
 8000924:	72bb      	strb	r3, [r7, #10]
		cmd[3] = (uint8_t) (cmd_pec);
 8000926:	8a7b      	ldrh	r3, [r7, #18]
 8000928:	b2db      	uxtb	r3, r3
 800092a:	72fb      	strb	r3, [r7, #11]

		wakeup_idle(); // Wake LTC up
 800092c:	f7ff fdfa 	bl	8000524 <wakeup_idle>

		LTC_nCS_Low(); // Pull CS low
 8000930:	f001 f90c 	bl	8001b4c <LTC_nCS_Low>

		hal_ret = HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 8000934:	f107 0108 	add.w	r1, r7, #8
 8000938:	2364      	movs	r3, #100	; 0x64
 800093a:	2204      	movs	r2, #4
 800093c:	482d      	ldr	r0, [pc, #180]	; (80009f4 <read_cell_temps+0x16c>)
 800093e:	f004 f983 	bl	8004c48 <HAL_SPI_Transmit>
 8000942:	4603      	mov	r3, r0
 8000944:	747b      	strb	r3, [r7, #17]
		if (hal_ret) {									// Non-zero means error
 8000946:	7c7b      	ldrb	r3, [r7, #17]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d009      	beq.n	8000960 <read_cell_temps+0xd8>
			ret |= (1 << (hal_ret + LTC_SPI_TX_BIT_OFFSET)); // TX error
 800094c:	7c7b      	ldrb	r3, [r7, #17]
 800094e:	2201      	movs	r2, #1
 8000950:	fa02 f303 	lsl.w	r3, r2, r3
 8000954:	b25a      	sxtb	r2, r3
 8000956:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800095a:	4313      	orrs	r3, r2
 800095c:	b25b      	sxtb	r3, r3
 800095e:	77fb      	strb	r3, [r7, #31]
		}

		hal_ret = HAL_SPI_Receive(&hspi1, (uint8_t*) read_auxiliary_reg,
 8000960:	7f3b      	ldrb	r3, [r7, #28]
 8000962:	b29a      	uxth	r2, r3
 8000964:	2364      	movs	r3, #100	; 0x64
 8000966:	6979      	ldr	r1, [r7, #20]
 8000968:	4822      	ldr	r0, [pc, #136]	; (80009f4 <read_cell_temps+0x16c>)
 800096a:	f004 fab0 	bl	8004ece <HAL_SPI_Receive>
 800096e:	4603      	mov	r3, r0
 8000970:	747b      	strb	r3, [r7, #17]
				ARR_SIZE_REG, 100);
		if (hal_ret) {									// Non-zero means error
 8000972:	7c7b      	ldrb	r3, [r7, #17]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d00a      	beq.n	800098e <read_cell_temps+0x106>
			ret |= (1 << (hal_ret + LTC_SPI_RX_BIT_OFFSET)); // RX error
 8000978:	7c7b      	ldrb	r3, [r7, #17]
 800097a:	3304      	adds	r3, #4
 800097c:	2201      	movs	r2, #1
 800097e:	fa02 f303 	lsl.w	r3, r2, r3
 8000982:	b25a      	sxtb	r2, r3
 8000984:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000988:	4313      	orrs	r3, r2
 800098a:	b25b      	sxtb	r3, r3
 800098c:	77fb      	strb	r3, [r7, #31]
		}

		// Process the received data
		for (uint8_t dev_idx = 0; dev_idx < NUM_DEVICES; dev_idx++) {
 800098e:	2300      	movs	r3, #0
 8000990:	777b      	strb	r3, [r7, #29]
 8000992:	e01a      	b.n	80009ca <read_cell_temps+0x142>
			// Assuming data format is [cell voltage, cell voltage, ..., PEC, PEC]
			// PEC for each device is the last two bytes of its data segment
			uint8_t *data_ptr = &read_auxiliary_reg[dev_idx * REG_LEN];
 8000994:	7f7b      	ldrb	r3, [r7, #29]
 8000996:	00db      	lsls	r3, r3, #3
 8000998:	697a      	ldr	r2, [r7, #20]
 800099a:	4413      	add	r3, r2
 800099c:	60fb      	str	r3, [r7, #12]

			memcpy(
					&read_auxiliary[dev_idx * NUM_AUX_SERIES_GROUPS
 800099e:	7f7a      	ldrb	r2, [r7, #29]
 80009a0:	4613      	mov	r3, r2
 80009a2:	005b      	lsls	r3, r3, #1
 80009a4:	4413      	add	r3, r2
 80009a6:	005b      	lsls	r3, r3, #1
 80009a8:	4619      	mov	r1, r3
							+ i * LTC_SERIES_GROUPS_PER_RDAUX], data_ptr,
 80009aa:	7fba      	ldrb	r2, [r7, #30]
 80009ac:	4613      	mov	r3, r2
 80009ae:	005b      	lsls	r3, r3, #1
 80009b0:	4413      	add	r3, r2
 80009b2:	440b      	add	r3, r1
					&read_auxiliary[dev_idx * NUM_AUX_SERIES_GROUPS
 80009b4:	005b      	lsls	r3, r3, #1
 80009b6:	687a      	ldr	r2, [r7, #4]
 80009b8:	4413      	add	r3, r2
			memcpy(
 80009ba:	2206      	movs	r2, #6
 80009bc:	68f9      	ldr	r1, [r7, #12]
 80009be:	4618      	mov	r0, r3
 80009c0:	f008 fac6 	bl	8008f50 <memcpy>
		for (uint8_t dev_idx = 0; dev_idx < NUM_DEVICES; dev_idx++) {
 80009c4:	7f7b      	ldrb	r3, [r7, #29]
 80009c6:	3301      	adds	r3, #1
 80009c8:	777b      	strb	r3, [r7, #29]
 80009ca:	7f7b      	ldrb	r3, [r7, #29]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d0e1      	beq.n	8000994 <read_cell_temps+0x10c>
					REG_LEN - 2);
		}

		LTC_nCS_High(); // Pull CS high
 80009d0:	f001 f8b0 	bl	8001b34 <LTC_nCS_High>
			i < (NUM_AUX_SERIES_GROUPS / LTC_SERIES_GROUPS_PER_RDAUX); i++) {
 80009d4:	7fbb      	ldrb	r3, [r7, #30]
 80009d6:	3301      	adds	r3, #1
 80009d8:	77bb      	strb	r3, [r7, #30]
 80009da:	7fbb      	ldrb	r3, [r7, #30]
 80009dc:	2b01      	cmp	r3, #1
 80009de:	d987      	bls.n	80008f0 <read_cell_temps+0x68>
	}

	return ret;
 80009e0:	7ffb      	ldrb	r3, [r7, #31]
 80009e2:	46b5      	mov	sp, r6
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	3724      	adds	r7, #36	; 0x24
 80009e8:	46bd      	mov	sp, r7
 80009ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80009ee:	bf00      	nop
 80009f0:	08009064 	.word	0x08009064
 80009f4:	200002dc 	.word	0x200002dc

080009f8 <ltc_adcv>:
 Starts cell voltage conversion
 */
void ltc_adcv(uint8_t MD,  // ADC Mode
		uint8_t DCP, // Discharge Permit
		uint8_t CH   // Cell Channels to be measured
		) {
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b084      	sub	sp, #16
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	4603      	mov	r3, r0
 8000a00:	71fb      	strb	r3, [r7, #7]
 8000a02:	460b      	mov	r3, r1
 8000a04:	71bb      	strb	r3, [r7, #6]
 8000a06:	4613      	mov	r3, r2
 8000a08:	717b      	strb	r3, [r7, #5]
	uint8_t cmd[4];
	uint16_t cmd_pec;
	uint8_t md_bits;

	md_bits = (MD & 0x02) >> 1;
 8000a0a:	79fb      	ldrb	r3, [r7, #7]
 8000a0c:	105b      	asrs	r3, r3, #1
 8000a0e:	b2db      	uxtb	r3, r3
 8000a10:	f003 0301 	and.w	r3, r3, #1
 8000a14:	73fb      	strb	r3, [r7, #15]
	cmd[0] = md_bits + 0x02;
 8000a16:	7bfb      	ldrb	r3, [r7, #15]
 8000a18:	3302      	adds	r3, #2
 8000a1a:	b2db      	uxtb	r3, r3
 8000a1c:	723b      	strb	r3, [r7, #8]
	md_bits = (MD & 0x01) << 7;
 8000a1e:	79fb      	ldrb	r3, [r7, #7]
 8000a20:	01db      	lsls	r3, r3, #7
 8000a22:	73fb      	strb	r3, [r7, #15]
	cmd[1] = md_bits + 0x60 + (DCP << 4) + CH;
 8000a24:	79bb      	ldrb	r3, [r7, #6]
 8000a26:	011b      	lsls	r3, r3, #4
 8000a28:	b2da      	uxtb	r2, r3
 8000a2a:	7bfb      	ldrb	r3, [r7, #15]
 8000a2c:	4413      	add	r3, r2
 8000a2e:	b2da      	uxtb	r2, r3
 8000a30:	797b      	ldrb	r3, [r7, #5]
 8000a32:	4413      	add	r3, r2
 8000a34:	b2db      	uxtb	r3, r3
 8000a36:	3360      	adds	r3, #96	; 0x60
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	727b      	strb	r3, [r7, #9]
	cmd_pec = ltc_pec15_calc(2, cmd);
 8000a3c:	f107 0308 	add.w	r3, r7, #8
 8000a40:	4619      	mov	r1, r3
 8000a42:	2002      	movs	r0, #2
 8000a44:	f000 f8a4 	bl	8000b90 <ltc_pec15_calc>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	81bb      	strh	r3, [r7, #12]
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 8000a4c:	89bb      	ldrh	r3, [r7, #12]
 8000a4e:	0a1b      	lsrs	r3, r3, #8
 8000a50:	b29b      	uxth	r3, r3
 8000a52:	b2db      	uxtb	r3, r3
 8000a54:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t) (cmd_pec);
 8000a56:	89bb      	ldrh	r3, [r7, #12]
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	72fb      	strb	r3, [r7, #11]

	wakeup_idle(); // This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
 8000a5c:	f7ff fd62 	bl	8000524 <wakeup_idle>
	LTC_nCS_Low();
 8000a60:	f001 f874 	bl	8001b4c <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 8000a64:	f107 0108 	add.w	r1, r7, #8
 8000a68:	2364      	movs	r3, #100	; 0x64
 8000a6a:	2204      	movs	r2, #4
 8000a6c:	4804      	ldr	r0, [pc, #16]	; (8000a80 <ltc_adcv+0x88>)
 8000a6e:	f004 f8eb 	bl	8004c48 <HAL_SPI_Transmit>
	LTC_nCS_High();
 8000a72:	f001 f85f 	bl	8001b34 <LTC_nCS_High>
}
 8000a76:	bf00      	nop
 8000a78:	3710      	adds	r7, #16
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	200002dc 	.word	0x200002dc

08000a84 <ltc_adax>:

void ltc_adax(uint8_t MD, // ADC Mode
		uint8_t CHG // GPIO Channels to be measured)
		) {
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	460a      	mov	r2, r1
 8000a8e:	71fb      	strb	r3, [r7, #7]
 8000a90:	4613      	mov	r3, r2
 8000a92:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd[4];
	uint16_t cmd_pec;
	uint8_t md_bits;

	md_bits = (MD & 0x02) >> 1;
 8000a94:	79fb      	ldrb	r3, [r7, #7]
 8000a96:	105b      	asrs	r3, r3, #1
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	f003 0301 	and.w	r3, r3, #1
 8000a9e:	73fb      	strb	r3, [r7, #15]
	cmd[0] = md_bits + 0x04;
 8000aa0:	7bfb      	ldrb	r3, [r7, #15]
 8000aa2:	3304      	adds	r3, #4
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	723b      	strb	r3, [r7, #8]
	md_bits = (MD & 0x01) << 7;
 8000aa8:	79fb      	ldrb	r3, [r7, #7]
 8000aaa:	01db      	lsls	r3, r3, #7
 8000aac:	73fb      	strb	r3, [r7, #15]
	cmd[1] = md_bits + 0x60 + CHG;
 8000aae:	7bfa      	ldrb	r2, [r7, #15]
 8000ab0:	79bb      	ldrb	r3, [r7, #6]
 8000ab2:	4413      	add	r3, r2
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	3360      	adds	r3, #96	; 0x60
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	727b      	strb	r3, [r7, #9]
	cmd_pec = ltc_pec15_calc(2, cmd);
 8000abc:	f107 0308 	add.w	r3, r7, #8
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	2002      	movs	r0, #2
 8000ac4:	f000 f864 	bl	8000b90 <ltc_pec15_calc>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	81bb      	strh	r3, [r7, #12]
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 8000acc:	89bb      	ldrh	r3, [r7, #12]
 8000ace:	0a1b      	lsrs	r3, r3, #8
 8000ad0:	b29b      	uxth	r3, r3
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t) (cmd_pec);
 8000ad6:	89bb      	ldrh	r3, [r7, #12]
 8000ad8:	b2db      	uxtb	r3, r3
 8000ada:	72fb      	strb	r3, [r7, #11]
	 wakeup_idle (); //This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
	 output_low(LTC6811_CS);
	 spi_write_array(4,cmd);
	 output_high(LTC6811_CS);
	 */
	wakeup_idle(); // This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
 8000adc:	f7ff fd22 	bl	8000524 <wakeup_idle>
	LTC_nCS_Low();
 8000ae0:	f001 f834 	bl	8001b4c <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 8000ae4:	f107 0108 	add.w	r1, r7, #8
 8000ae8:	2364      	movs	r3, #100	; 0x64
 8000aea:	2204      	movs	r2, #4
 8000aec:	4804      	ldr	r0, [pc, #16]	; (8000b00 <ltc_adax+0x7c>)
 8000aee:	f004 f8ab 	bl	8004c48 <HAL_SPI_Transmit>
	LTC_nCS_High();
 8000af2:	f001 f81f 	bl	8001b34 <LTC_nCS_High>
}
 8000af6:	bf00      	nop
 8000af8:	3710      	adds	r7, #16
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	200002dc 	.word	0x200002dc

08000b04 <ltc_polladc>:

int32_t ltc_polladc() {
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
	uint32_t counter = 0;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	60fb      	str	r3, [r7, #12]
	uint8_t finished = 0;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	72fb      	strb	r3, [r7, #11]
	uint8_t current_time = 0;
 8000b12:	2300      	movs	r3, #0
 8000b14:	72bb      	strb	r3, [r7, #10]
	uint8_t cmd[4];
	uint16_t cmd_pec;

	cmd[0] = 0x07;
 8000b16:	2307      	movs	r3, #7
 8000b18:	713b      	strb	r3, [r7, #4]
	cmd[1] = 0x14;
 8000b1a:	2314      	movs	r3, #20
 8000b1c:	717b      	strb	r3, [r7, #5]
	cmd_pec = ltc_pec15_calc(2, cmd);
 8000b1e:	1d3b      	adds	r3, r7, #4
 8000b20:	4619      	mov	r1, r3
 8000b22:	2002      	movs	r0, #2
 8000b24:	f000 f834 	bl	8000b90 <ltc_pec15_calc>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	813b      	strh	r3, [r7, #8]
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 8000b2c:	893b      	ldrh	r3, [r7, #8]
 8000b2e:	0a1b      	lsrs	r3, r3, #8
 8000b30:	b29b      	uxth	r3, r3
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	71bb      	strb	r3, [r7, #6]
	cmd[3] = (uint8_t) (cmd_pec);
 8000b36:	893b      	ldrh	r3, [r7, #8]
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	71fb      	strb	r3, [r7, #7]

	wakeup_idle(); // This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
 8000b3c:	f7ff fcf2 	bl	8000524 <wakeup_idle>

	LTC_nCS_Low();
 8000b40:	f001 f804 	bl	8001b4c <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 8000b44:	1d39      	adds	r1, r7, #4
 8000b46:	2364      	movs	r3, #100	; 0x64
 8000b48:	2204      	movs	r2, #4
 8000b4a:	480f      	ldr	r0, [pc, #60]	; (8000b88 <ltc_polladc+0x84>)
 8000b4c:	f004 f87c 	bl	8004c48 <HAL_SPI_Transmit>

	while ((counter < 200000) && (finished == 0)) {
 8000b50:	e00c      	b.n	8000b6c <ltc_polladc+0x68>
		current_time = HAL_GetTick();
 8000b52:	f001 f979 	bl	8001e48 <HAL_GetTick>
 8000b56:	4603      	mov	r3, r0
 8000b58:	72bb      	strb	r3, [r7, #10]
		if (current_time > 0) {
 8000b5a:	7abb      	ldrb	r3, [r7, #10]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d002      	beq.n	8000b66 <ltc_polladc+0x62>
			finished = 1;
 8000b60:	2301      	movs	r3, #1
 8000b62:	72fb      	strb	r3, [r7, #11]
 8000b64:	e002      	b.n	8000b6c <ltc_polladc+0x68>
		} else {
			counter = counter + 10;
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	330a      	adds	r3, #10
 8000b6a:	60fb      	str	r3, [r7, #12]
	while ((counter < 200000) && (finished == 0)) {
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	4a07      	ldr	r2, [pc, #28]	; (8000b8c <ltc_polladc+0x88>)
 8000b70:	4293      	cmp	r3, r2
 8000b72:	d802      	bhi.n	8000b7a <ltc_polladc+0x76>
 8000b74:	7afb      	ldrb	r3, [r7, #11]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d0eb      	beq.n	8000b52 <ltc_polladc+0x4e>
		}
	}
	LTC_nCS_High();
 8000b7a:	f000 ffdb 	bl	8001b34 <LTC_nCS_High>
	return (counter);
 8000b7e:	68fb      	ldr	r3, [r7, #12]
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	3710      	adds	r7, #16
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	200002dc 	.word	0x200002dc
 8000b8c:	00030d3f 	.word	0x00030d3f

08000b90 <ltc_pec15_calc>:
/**
 * error calculation and handling for poor command use. 
 * @param 	len		Number of bytes that will be used to calculate a PEC
 * @param	data	Array of data that will be used to calculate a PEC
 */
uint16_t ltc_pec15_calc(uint8_t len, uint8_t *data) {
 8000b90:	b480      	push	{r7}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	4603      	mov	r3, r0
 8000b98:	6039      	str	r1, [r7, #0]
 8000b9a:	71fb      	strb	r3, [r7, #7]
	uint16_t remainder, addr;
	remainder = 16; // Initialize the PEC to 0x10000
 8000b9c:	2310      	movs	r3, #16
 8000b9e:	81fb      	strh	r3, [r7, #14]

	for (uint8_t i = 0; i < len; i++) // loops for each byte in data array
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	737b      	strb	r3, [r7, #13]
 8000ba4:	e018      	b.n	8000bd8 <ltc_pec15_calc+0x48>
			{
		addr = ((remainder >> 7) ^ data[i]) & 0xff; // calculate PEC table address
 8000ba6:	89fb      	ldrh	r3, [r7, #14]
 8000ba8:	09db      	lsrs	r3, r3, #7
 8000baa:	b29a      	uxth	r2, r3
 8000bac:	7b7b      	ldrb	r3, [r7, #13]
 8000bae:	6839      	ldr	r1, [r7, #0]
 8000bb0:	440b      	add	r3, r1
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	b29b      	uxth	r3, r3
 8000bb6:	4053      	eors	r3, r2
 8000bb8:	b29b      	uxth	r3, r3
 8000bba:	b2db      	uxtb	r3, r3
 8000bbc:	817b      	strh	r3, [r7, #10]
		remainder = (remainder << 8) ^ crc15Table[addr];
 8000bbe:	89fb      	ldrh	r3, [r7, #14]
 8000bc0:	021b      	lsls	r3, r3, #8
 8000bc2:	b29a      	uxth	r2, r3
 8000bc4:	897b      	ldrh	r3, [r7, #10]
 8000bc6:	490a      	ldr	r1, [pc, #40]	; (8000bf0 <ltc_pec15_calc+0x60>)
 8000bc8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000bcc:	b29b      	uxth	r3, r3
 8000bce:	4053      	eors	r3, r2
 8000bd0:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i < len; i++) // loops for each byte in data array
 8000bd2:	7b7b      	ldrb	r3, [r7, #13]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	737b      	strb	r3, [r7, #13]
 8000bd8:	7b7a      	ldrb	r2, [r7, #13]
 8000bda:	79fb      	ldrb	r3, [r7, #7]
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	d3e2      	bcc.n	8000ba6 <ltc_pec15_calc+0x16>
	}

	return (remainder * 2); // The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 8000be0:	89fb      	ldrh	r3, [r7, #14]
 8000be2:	005b      	lsls	r3, r3, #1
 8000be4:	b29b      	uxth	r3, r3
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3714      	adds	r7, #20
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bc80      	pop	{r7}
 8000bee:	4770      	bx	lr
 8000bf0:	08009068 	.word	0x08009068

08000bf4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bfa:	1d3b      	adds	r3, r7, #4
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c04:	4b18      	ldr	r3, [pc, #96]	; (8000c68 <MX_ADC1_Init+0x74>)
 8000c06:	4a19      	ldr	r2, [pc, #100]	; (8000c6c <MX_ADC1_Init+0x78>)
 8000c08:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c0a:	4b17      	ldr	r3, [pc, #92]	; (8000c68 <MX_ADC1_Init+0x74>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c10:	4b15      	ldr	r3, [pc, #84]	; (8000c68 <MX_ADC1_Init+0x74>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c16:	4b14      	ldr	r3, [pc, #80]	; (8000c68 <MX_ADC1_Init+0x74>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c1c:	4b12      	ldr	r3, [pc, #72]	; (8000c68 <MX_ADC1_Init+0x74>)
 8000c1e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000c22:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c24:	4b10      	ldr	r3, [pc, #64]	; (8000c68 <MX_ADC1_Init+0x74>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000c2a:	4b0f      	ldr	r3, [pc, #60]	; (8000c68 <MX_ADC1_Init+0x74>)
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c30:	480d      	ldr	r0, [pc, #52]	; (8000c68 <MX_ADC1_Init+0x74>)
 8000c32:	f001 f937 	bl	8001ea4 <HAL_ADC_Init>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000c3c:	f000 fd9e 	bl	800177c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000c40:	230e      	movs	r3, #14
 8000c42:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c44:	2301      	movs	r3, #1
 8000c46:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c4c:	1d3b      	adds	r3, r7, #4
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4805      	ldr	r0, [pc, #20]	; (8000c68 <MX_ADC1_Init+0x74>)
 8000c52:	f001 f9ff 	bl	8002054 <HAL_ADC_ConfigChannel>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000c5c:	f000 fd8e 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c60:	bf00      	nop
 8000c62:	3710      	adds	r7, #16
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	20000254 	.word	0x20000254
 8000c6c:	40012400 	.word	0x40012400

08000c70 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c76:	1d3b      	adds	r3, r7, #4
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	605a      	str	r2, [r3, #4]
 8000c7e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000c80:	4b18      	ldr	r3, [pc, #96]	; (8000ce4 <MX_ADC2_Init+0x74>)
 8000c82:	4a19      	ldr	r2, [pc, #100]	; (8000ce8 <MX_ADC2_Init+0x78>)
 8000c84:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c86:	4b17      	ldr	r3, [pc, #92]	; (8000ce4 <MX_ADC2_Init+0x74>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000c8c:	4b15      	ldr	r3, [pc, #84]	; (8000ce4 <MX_ADC2_Init+0x74>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000c92:	4b14      	ldr	r3, [pc, #80]	; (8000ce4 <MX_ADC2_Init+0x74>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c98:	4b12      	ldr	r3, [pc, #72]	; (8000ce4 <MX_ADC2_Init+0x74>)
 8000c9a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000c9e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ca0:	4b10      	ldr	r3, [pc, #64]	; (8000ce4 <MX_ADC2_Init+0x74>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8000ca6:	4b0f      	ldr	r3, [pc, #60]	; (8000ce4 <MX_ADC2_Init+0x74>)
 8000ca8:	2201      	movs	r2, #1
 8000caa:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000cac:	480d      	ldr	r0, [pc, #52]	; (8000ce4 <MX_ADC2_Init+0x74>)
 8000cae:	f001 f8f9 	bl	8001ea4 <HAL_ADC_Init>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8000cb8:	f000 fd60 	bl	800177c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000cbc:	230a      	movs	r3, #10
 8000cbe:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000cc8:	1d3b      	adds	r3, r7, #4
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4805      	ldr	r0, [pc, #20]	; (8000ce4 <MX_ADC2_Init+0x74>)
 8000cce:	f001 f9c1 	bl	8002054 <HAL_ADC_ConfigChannel>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_ADC2_Init+0x6c>
  {
		Error_Handler();
 8000cd8:	f000 fd50 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000cdc:	bf00      	nop
 8000cde:	3710      	adds	r7, #16
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	20000284 	.word	0x20000284
 8000ce8:	40012800 	.word	0x40012800

08000cec <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b08a      	sub	sp, #40	; 0x28
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf4:	f107 0318 	add.w	r3, r7, #24
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4a28      	ldr	r2, [pc, #160]	; (8000da8 <HAL_ADC_MspInit+0xbc>)
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d122      	bne.n	8000d52 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d0c:	4b27      	ldr	r3, [pc, #156]	; (8000dac <HAL_ADC_MspInit+0xc0>)
 8000d0e:	699b      	ldr	r3, [r3, #24]
 8000d10:	4a26      	ldr	r2, [pc, #152]	; (8000dac <HAL_ADC_MspInit+0xc0>)
 8000d12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d16:	6193      	str	r3, [r2, #24]
 8000d18:	4b24      	ldr	r3, [pc, #144]	; (8000dac <HAL_ADC_MspInit+0xc0>)
 8000d1a:	699b      	ldr	r3, [r3, #24]
 8000d1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d20:	617b      	str	r3, [r7, #20]
 8000d22:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d24:	4b21      	ldr	r3, [pc, #132]	; (8000dac <HAL_ADC_MspInit+0xc0>)
 8000d26:	699b      	ldr	r3, [r3, #24]
 8000d28:	4a20      	ldr	r2, [pc, #128]	; (8000dac <HAL_ADC_MspInit+0xc0>)
 8000d2a:	f043 0310 	orr.w	r3, r3, #16
 8000d2e:	6193      	str	r3, [r2, #24]
 8000d30:	4b1e      	ldr	r3, [pc, #120]	; (8000dac <HAL_ADC_MspInit+0xc0>)
 8000d32:	699b      	ldr	r3, [r3, #24]
 8000d34:	f003 0310 	and.w	r3, r3, #16
 8000d38:	613b      	str	r3, [r7, #16]
 8000d3a:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000d3c:	2330      	movs	r3, #48	; 0x30
 8000d3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d40:	2303      	movs	r3, #3
 8000d42:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d44:	f107 0318 	add.w	r3, r7, #24
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4819      	ldr	r0, [pc, #100]	; (8000db0 <HAL_ADC_MspInit+0xc4>)
 8000d4c:	f001 fdfc 	bl	8002948 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000d50:	e026      	b.n	8000da0 <HAL_ADC_MspInit+0xb4>
  else if(adcHandle->Instance==ADC2)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a17      	ldr	r2, [pc, #92]	; (8000db4 <HAL_ADC_MspInit+0xc8>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d121      	bne.n	8000da0 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000d5c:	4b13      	ldr	r3, [pc, #76]	; (8000dac <HAL_ADC_MspInit+0xc0>)
 8000d5e:	699b      	ldr	r3, [r3, #24]
 8000d60:	4a12      	ldr	r2, [pc, #72]	; (8000dac <HAL_ADC_MspInit+0xc0>)
 8000d62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d66:	6193      	str	r3, [r2, #24]
 8000d68:	4b10      	ldr	r3, [pc, #64]	; (8000dac <HAL_ADC_MspInit+0xc0>)
 8000d6a:	699b      	ldr	r3, [r3, #24]
 8000d6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d74:	4b0d      	ldr	r3, [pc, #52]	; (8000dac <HAL_ADC_MspInit+0xc0>)
 8000d76:	699b      	ldr	r3, [r3, #24]
 8000d78:	4a0c      	ldr	r2, [pc, #48]	; (8000dac <HAL_ADC_MspInit+0xc0>)
 8000d7a:	f043 0310 	orr.w	r3, r3, #16
 8000d7e:	6193      	str	r3, [r2, #24]
 8000d80:	4b0a      	ldr	r3, [pc, #40]	; (8000dac <HAL_ADC_MspInit+0xc0>)
 8000d82:	699b      	ldr	r3, [r3, #24]
 8000d84:	f003 0310 	and.w	r3, r3, #16
 8000d88:	60bb      	str	r3, [r7, #8]
 8000d8a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000d8c:	230f      	movs	r3, #15
 8000d8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d90:	2303      	movs	r3, #3
 8000d92:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d94:	f107 0318 	add.w	r3, r7, #24
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4805      	ldr	r0, [pc, #20]	; (8000db0 <HAL_ADC_MspInit+0xc4>)
 8000d9c:	f001 fdd4 	bl	8002948 <HAL_GPIO_Init>
}
 8000da0:	bf00      	nop
 8000da2:	3728      	adds	r7, #40	; 0x28
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	40012400 	.word	0x40012400
 8000dac:	40021000 	.word	0x40021000
 8000db0:	40011000 	.word	0x40011000
 8000db4:	40012800 	.word	0x40012800

08000db8 <MX_CAN2_Init>:
/* USER CODE END 0 */

CAN_HandleTypeDef hcan2;

/* CAN2 init function */
void MX_CAN2_Init(void) {
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
	/* USER CODE END CAN2_Init 0 */

	/* USER CODE BEGIN CAN2_Init 1 */

	/* USER CODE END CAN2_Init 1 */
	hcan2.Instance = CAN2;
 8000dbc:	4b17      	ldr	r3, [pc, #92]	; (8000e1c <MX_CAN2_Init+0x64>)
 8000dbe:	4a18      	ldr	r2, [pc, #96]	; (8000e20 <MX_CAN2_Init+0x68>)
 8000dc0:	601a      	str	r2, [r3, #0]
	hcan2.Init.Prescaler = 9;
 8000dc2:	4b16      	ldr	r3, [pc, #88]	; (8000e1c <MX_CAN2_Init+0x64>)
 8000dc4:	2209      	movs	r2, #9
 8000dc6:	605a      	str	r2, [r3, #4]
	hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000dc8:	4b14      	ldr	r3, [pc, #80]	; (8000e1c <MX_CAN2_Init+0x64>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	609a      	str	r2, [r3, #8]
	hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000dce:	4b13      	ldr	r3, [pc, #76]	; (8000e1c <MX_CAN2_Init+0x64>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	60da      	str	r2, [r3, #12]
	hcan2.Init.TimeSeg1 = CAN_BS1_3TQ;
 8000dd4:	4b11      	ldr	r3, [pc, #68]	; (8000e1c <MX_CAN2_Init+0x64>)
 8000dd6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000dda:	611a      	str	r2, [r3, #16]
	hcan2.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000ddc:	4b0f      	ldr	r3, [pc, #60]	; (8000e1c <MX_CAN2_Init+0x64>)
 8000dde:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000de2:	615a      	str	r2, [r3, #20]
	hcan2.Init.TimeTriggeredMode = DISABLE;
 8000de4:	4b0d      	ldr	r3, [pc, #52]	; (8000e1c <MX_CAN2_Init+0x64>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	761a      	strb	r2, [r3, #24]
	hcan2.Init.AutoBusOff = DISABLE;
 8000dea:	4b0c      	ldr	r3, [pc, #48]	; (8000e1c <MX_CAN2_Init+0x64>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	765a      	strb	r2, [r3, #25]
	hcan2.Init.AutoWakeUp = DISABLE;
 8000df0:	4b0a      	ldr	r3, [pc, #40]	; (8000e1c <MX_CAN2_Init+0x64>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	769a      	strb	r2, [r3, #26]
	hcan2.Init.AutoRetransmission = DISABLE;
 8000df6:	4b09      	ldr	r3, [pc, #36]	; (8000e1c <MX_CAN2_Init+0x64>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	76da      	strb	r2, [r3, #27]
	hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000dfc:	4b07      	ldr	r3, [pc, #28]	; (8000e1c <MX_CAN2_Init+0x64>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	771a      	strb	r2, [r3, #28]
	hcan2.Init.TransmitFifoPriority = DISABLE;
 8000e02:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <MX_CAN2_Init+0x64>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan2) != HAL_OK) {
 8000e08:	4804      	ldr	r0, [pc, #16]	; (8000e1c <MX_CAN2_Init+0x64>)
 8000e0a:	f001 fa5c 	bl	80022c6 <HAL_CAN_Init>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_CAN2_Init+0x60>
		Error_Handler();
 8000e14:	f000 fcb2 	bl	800177c <Error_Handler>
	}
	/* USER CODE BEGIN CAN2_Init 2 */

	/* USER CODE END CAN2_Init 2 */

}
 8000e18:	bf00      	nop
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	200002b4 	.word	0x200002b4
 8000e20:	40006800 	.word	0x40006800

08000e24 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef *canHandle) {
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b08a      	sub	sp, #40	; 0x28
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000e2c:	f107 0318 	add.w	r3, r7, #24
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	605a      	str	r2, [r3, #4]
 8000e36:	609a      	str	r2, [r3, #8]
 8000e38:	60da      	str	r2, [r3, #12]
	if (canHandle->Instance == CAN2) {
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a22      	ldr	r2, [pc, #136]	; (8000ec8 <HAL_CAN_MspInit+0xa4>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d13d      	bne.n	8000ec0 <HAL_CAN_MspInit+0x9c>
		/* USER CODE BEGIN CAN2_MspInit 0 */

		/* USER CODE END CAN2_MspInit 0 */
		/* CAN2 clock enable */
		__HAL_RCC_CAN2_CLK_ENABLE();
 8000e44:	4b21      	ldr	r3, [pc, #132]	; (8000ecc <HAL_CAN_MspInit+0xa8>)
 8000e46:	69db      	ldr	r3, [r3, #28]
 8000e48:	4a20      	ldr	r2, [pc, #128]	; (8000ecc <HAL_CAN_MspInit+0xa8>)
 8000e4a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000e4e:	61d3      	str	r3, [r2, #28]
 8000e50:	4b1e      	ldr	r3, [pc, #120]	; (8000ecc <HAL_CAN_MspInit+0xa8>)
 8000e52:	69db      	ldr	r3, [r3, #28]
 8000e54:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000e58:	617b      	str	r3, [r7, #20]
 8000e5a:	697b      	ldr	r3, [r7, #20]
		__HAL_RCC_CAN1_CLK_ENABLE();
 8000e5c:	4b1b      	ldr	r3, [pc, #108]	; (8000ecc <HAL_CAN_MspInit+0xa8>)
 8000e5e:	69db      	ldr	r3, [r3, #28]
 8000e60:	4a1a      	ldr	r2, [pc, #104]	; (8000ecc <HAL_CAN_MspInit+0xa8>)
 8000e62:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e66:	61d3      	str	r3, [r2, #28]
 8000e68:	4b18      	ldr	r3, [pc, #96]	; (8000ecc <HAL_CAN_MspInit+0xa8>)
 8000e6a:	69db      	ldr	r3, [r3, #28]
 8000e6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e70:	613b      	str	r3, [r7, #16]
 8000e72:	693b      	ldr	r3, [r7, #16]

		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000e74:	4b15      	ldr	r3, [pc, #84]	; (8000ecc <HAL_CAN_MspInit+0xa8>)
 8000e76:	699b      	ldr	r3, [r3, #24]
 8000e78:	4a14      	ldr	r2, [pc, #80]	; (8000ecc <HAL_CAN_MspInit+0xa8>)
 8000e7a:	f043 0308 	orr.w	r3, r3, #8
 8000e7e:	6193      	str	r3, [r2, #24]
 8000e80:	4b12      	ldr	r3, [pc, #72]	; (8000ecc <HAL_CAN_MspInit+0xa8>)
 8000e82:	699b      	ldr	r3, [r3, #24]
 8000e84:	f003 0308 	and.w	r3, r3, #8
 8000e88:	60fb      	str	r3, [r7, #12]
 8000e8a:	68fb      	ldr	r3, [r7, #12]
		/**CAN2 GPIO Configuration
		 PB12     ------> CAN2_RX
		 PB13     ------> CAN2_TX
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000e8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e90:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e92:	2300      	movs	r3, #0
 8000e94:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e96:	2300      	movs	r3, #0
 8000e98:	623b      	str	r3, [r7, #32]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e9a:	f107 0318 	add.w	r3, r7, #24
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	480b      	ldr	r0, [pc, #44]	; (8000ed0 <HAL_CAN_MspInit+0xac>)
 8000ea2:	f001 fd51 	bl	8002948 <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000ea6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eaa:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eac:	2302      	movs	r3, #2
 8000eae:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000eb0:	2303      	movs	r3, #3
 8000eb2:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb4:	f107 0318 	add.w	r3, r7, #24
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4805      	ldr	r0, [pc, #20]	; (8000ed0 <HAL_CAN_MspInit+0xac>)
 8000ebc:	f001 fd44 	bl	8002948 <HAL_GPIO_Init>

		/* USER CODE BEGIN CAN2_MspInit 1 */

		/* USER CODE END CAN2_MspInit 1 */
	}
}
 8000ec0:	bf00      	nop
 8000ec2:	3728      	adds	r7, #40	; 0x28
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	40006800 	.word	0x40006800
 8000ecc:	40021000 	.word	0x40021000
 8000ed0:	40010c00 	.word	0x40010c00

08000ed4 <CAN_Start>:
	}
}

/* USER CODE BEGIN 1 */

HAL_StatusTypeDef CAN_Start() {
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
	return HAL_CAN_Start(&hcan2);
 8000ed8:	4802      	ldr	r0, [pc, #8]	; (8000ee4 <CAN_Start+0x10>)
 8000eda:	f001 faef 	bl	80024bc <HAL_CAN_Start>
 8000ede:	4603      	mov	r3, r0
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	200002b4 	.word	0x200002b4

08000ee8 <CAN_Activate>:

HAL_StatusTypeDef CAN_Activate() {
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
	return HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000eec:	2102      	movs	r1, #2
 8000eee:	4803      	ldr	r0, [pc, #12]	; (8000efc <CAN_Activate+0x14>)
 8000ef0:	f001 fbf7 	bl	80026e2 <HAL_CAN_ActivateNotification>
 8000ef4:	4603      	mov	r3, r0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	200002b4 	.word	0x200002b4

08000f00 <CAN_Send>:

HAL_StatusTypeDef CAN_Send(struct CANMessage *ptr) {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
	return HAL_CAN_AddTxMessage(&hcan2, &ptr->TxHeader, (uint8_t*) ptr->data,
 8000f08:	6879      	ldr	r1, [r7, #4]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	f103 021c 	add.w	r2, r3, #28
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	3318      	adds	r3, #24
 8000f14:	4803      	ldr	r0, [pc, #12]	; (8000f24 <CAN_Send+0x24>)
 8000f16:	f001 fb15 	bl	8002544 <HAL_CAN_AddTxMessage>
 8000f1a:	4603      	mov	r3, r0
			&ptr->TxMailbox);
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	200002b4 	.word	0x200002b4

08000f28 <CAN_SettingsInit>:

void CAN_SettingsInit(struct CANMessage *ptr) {
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
	CAN_Start();
 8000f30:	f7ff ffd0 	bl	8000ed4 <CAN_Start>
	CAN_Activate();
 8000f34:	f7ff ffd8 	bl	8000ee8 <CAN_Activate>
	ptr->TxHeader.IDE = CAN_ID_STD;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	609a      	str	r2, [r3, #8]
	ptr->TxHeader.StdId = 0x00;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
	ptr->TxHeader.RTR = CAN_RTR_DATA;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2200      	movs	r2, #0
 8000f48:	60da      	str	r2, [r3, #12]
	ptr->TxHeader.DLC = 8;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2208      	movs	r2, #8
 8000f4e:	611a      	str	r2, [r3, #16]
}
 8000f50:	bf00      	nop
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <setCANId>:

void setCANId(struct CANMessage *ptr, uint32_t id) {
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	6039      	str	r1, [r7, #0]
	ptr->TxHeader.StdId = id;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	683a      	ldr	r2, [r7, #0]
 8000f66:	601a      	str	r2, [r3, #0]
}
 8000f68:	bf00      	nop
 8000f6a:	370c      	adds	r7, #12
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bc80      	pop	{r7}
 8000f70:	4770      	bx	lr

08000f72 <CAN_Send_Voltage>:

void CAN_Send_Voltage(struct CANMessage *ptr, uint16_t *read_volt) {
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b086      	sub	sp, #24
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	6078      	str	r0, [r7, #4]
 8000f7a:	6039      	str	r1, [r7, #0]
	uint16_t CAN_ID = 0x630;
 8000f7c:	f44f 63c6 	mov.w	r3, #1584	; 0x630
 8000f80:	82fb      	strh	r3, [r7, #22]
	setCANId(ptr, CAN_ID);
 8000f82:	8afb      	ldrh	r3, [r7, #22]
 8000f84:	4619      	mov	r1, r3
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f7ff ffe6 	bl	8000f58 <setCANId>
	for (int i = 0; i < NUM_CELLS; i++) {
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	613b      	str	r3, [r7, #16]
 8000f90:	e074      	b.n	800107c <CAN_Send_Voltage+0x10a>
		if (i % 4 == 0) {
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	f003 0303 	and.w	r3, r3, #3
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d156      	bne.n	800104a <CAN_Send_Voltage+0xd8>
			uint8_t temp_volt = i;
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	73fb      	strb	r3, [r7, #15]
			ptr->data[0] = read_volt[temp_volt];
 8000fa0:	7bfb      	ldrb	r3, [r7, #15]
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	683a      	ldr	r2, [r7, #0]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	881b      	ldrh	r3, [r3, #0]
 8000faa:	b2da      	uxtb	r2, r3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	771a      	strb	r2, [r3, #28]
			ptr->data[1] = read_volt[temp_volt] >> 8;
 8000fb0:	7bfb      	ldrb	r3, [r7, #15]
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	683a      	ldr	r2, [r7, #0]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	881b      	ldrh	r3, [r3, #0]
 8000fba:	0a1b      	lsrs	r3, r3, #8
 8000fbc:	b29b      	uxth	r3, r3
 8000fbe:	b2da      	uxtb	r2, r3
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	775a      	strb	r2, [r3, #29]
			temp_volt += 1;
 8000fc4:	7bfb      	ldrb	r3, [r7, #15]
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	73fb      	strb	r3, [r7, #15]
			ptr->data[2] = read_volt[temp_volt];
 8000fca:	7bfb      	ldrb	r3, [r7, #15]
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	683a      	ldr	r2, [r7, #0]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	881b      	ldrh	r3, [r3, #0]
 8000fd4:	b2da      	uxtb	r2, r3
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	779a      	strb	r2, [r3, #30]
			ptr->data[3] = read_volt[temp_volt] >> 8;
 8000fda:	7bfb      	ldrb	r3, [r7, #15]
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	683a      	ldr	r2, [r7, #0]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	881b      	ldrh	r3, [r3, #0]
 8000fe4:	0a1b      	lsrs	r3, r3, #8
 8000fe6:	b29b      	uxth	r3, r3
 8000fe8:	b2da      	uxtb	r2, r3
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	77da      	strb	r2, [r3, #31]
			temp_volt += 1;
 8000fee:	7bfb      	ldrb	r3, [r7, #15]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	73fb      	strb	r3, [r7, #15]
			ptr->data[4] = read_volt[temp_volt];
 8000ff4:	7bfb      	ldrb	r3, [r7, #15]
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	683a      	ldr	r2, [r7, #0]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	881b      	ldrh	r3, [r3, #0]
 8000ffe:	b2da      	uxtb	r2, r3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	f883 2020 	strb.w	r2, [r3, #32]
			ptr->data[5] = read_volt[temp_volt] >> 8;
 8001006:	7bfb      	ldrb	r3, [r7, #15]
 8001008:	005b      	lsls	r3, r3, #1
 800100a:	683a      	ldr	r2, [r7, #0]
 800100c:	4413      	add	r3, r2
 800100e:	881b      	ldrh	r3, [r3, #0]
 8001010:	0a1b      	lsrs	r3, r3, #8
 8001012:	b29b      	uxth	r3, r3
 8001014:	b2da      	uxtb	r2, r3
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			temp_volt += 1;
 800101c:	7bfb      	ldrb	r3, [r7, #15]
 800101e:	3301      	adds	r3, #1
 8001020:	73fb      	strb	r3, [r7, #15]
			ptr->data[6] = read_volt[temp_volt];
 8001022:	7bfb      	ldrb	r3, [r7, #15]
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	683a      	ldr	r2, [r7, #0]
 8001028:	4413      	add	r3, r2
 800102a:	881b      	ldrh	r3, [r3, #0]
 800102c:	b2da      	uxtb	r2, r3
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			ptr->data[7] = read_volt[temp_volt] >> 8;
 8001034:	7bfb      	ldrb	r3, [r7, #15]
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	683a      	ldr	r2, [r7, #0]
 800103a:	4413      	add	r3, r2
 800103c:	881b      	ldrh	r3, [r3, #0]
 800103e:	0a1b      	lsrs	r3, r3, #8
 8001040:	b29b      	uxth	r3, r3
 8001042:	b2da      	uxtb	r2, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		}
		if (i > 0 && i % 4 == 0) {
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	2b00      	cmp	r3, #0
 800104e:	dd0c      	ble.n	800106a <CAN_Send_Voltage+0xf8>
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	f003 0303 	and.w	r3, r3, #3
 8001056:	2b00      	cmp	r3, #0
 8001058:	d107      	bne.n	800106a <CAN_Send_Voltage+0xf8>
			CAN_ID = CAN_ID + 0x01;
 800105a:	8afb      	ldrh	r3, [r7, #22]
 800105c:	3301      	adds	r3, #1
 800105e:	82fb      	strh	r3, [r7, #22]
			setCANId(ptr, CAN_ID);
 8001060:	8afb      	ldrh	r3, [r7, #22]
 8001062:	4619      	mov	r1, r3
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	f7ff ff77 	bl	8000f58 <setCANId>
		}
		HAL_Delay(10);
 800106a:	200a      	movs	r0, #10
 800106c:	f000 fef6 	bl	8001e5c <HAL_Delay>
		CAN_Send(ptr);
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f7ff ff45 	bl	8000f00 <CAN_Send>
	for (int i = 0; i < NUM_CELLS; i++) {
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	3301      	adds	r3, #1
 800107a:	613b      	str	r3, [r7, #16]
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	2b0b      	cmp	r3, #11
 8001080:	dd87      	ble.n	8000f92 <CAN_Send_Voltage+0x20>
	}

}
 8001082:	bf00      	nop
 8001084:	bf00      	nop
 8001086:	3718      	adds	r7, #24
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <CAN_Send_Temperature>:

void CAN_Send_Temperature(struct CANMessage *ptr, uint16_t *read_temp) {
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	6039      	str	r1, [r7, #0]
	uint16_t CAN_ID = 0x680;
 8001096:	f44f 63d0 	mov.w	r3, #1664	; 0x680
 800109a:	81fb      	strh	r3, [r7, #14]
	setCANId(ptr, CAN_ID);
 800109c:	89fb      	ldrh	r3, [r7, #14]
 800109e:	4619      	mov	r1, r3
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f7ff ff59 	bl	8000f58 <setCANId>
	for (uint8_t i = 0; i < NUM_THERM_TOTAL; i++) {
 80010a6:	2300      	movs	r3, #0
 80010a8:	737b      	strb	r3, [r7, #13]
 80010aa:	e076      	b.n	800119a <CAN_Send_Temperature+0x10e>
		if (i % 4 == 0) {
 80010ac:	7b7b      	ldrb	r3, [r7, #13]
 80010ae:	f003 0303 	and.w	r3, r3, #3
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d156      	bne.n	8001166 <CAN_Send_Temperature+0xda>
			uint8_t temp_volt = i;
 80010b8:	7b7b      	ldrb	r3, [r7, #13]
 80010ba:	733b      	strb	r3, [r7, #12]
			ptr->data[0] = read_temp[temp_volt];
 80010bc:	7b3b      	ldrb	r3, [r7, #12]
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	683a      	ldr	r2, [r7, #0]
 80010c2:	4413      	add	r3, r2
 80010c4:	881b      	ldrh	r3, [r3, #0]
 80010c6:	b2da      	uxtb	r2, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	771a      	strb	r2, [r3, #28]
			ptr->data[1] = read_temp[temp_volt] >> 8;
 80010cc:	7b3b      	ldrb	r3, [r7, #12]
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	683a      	ldr	r2, [r7, #0]
 80010d2:	4413      	add	r3, r2
 80010d4:	881b      	ldrh	r3, [r3, #0]
 80010d6:	0a1b      	lsrs	r3, r3, #8
 80010d8:	b29b      	uxth	r3, r3
 80010da:	b2da      	uxtb	r2, r3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	775a      	strb	r2, [r3, #29]
			temp_volt += 1;
 80010e0:	7b3b      	ldrb	r3, [r7, #12]
 80010e2:	3301      	adds	r3, #1
 80010e4:	733b      	strb	r3, [r7, #12]
			ptr->data[2] = read_temp[temp_volt];
 80010e6:	7b3b      	ldrb	r3, [r7, #12]
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	683a      	ldr	r2, [r7, #0]
 80010ec:	4413      	add	r3, r2
 80010ee:	881b      	ldrh	r3, [r3, #0]
 80010f0:	b2da      	uxtb	r2, r3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	779a      	strb	r2, [r3, #30]
			ptr->data[3] = read_temp[temp_volt] >> 8;
 80010f6:	7b3b      	ldrb	r3, [r7, #12]
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	683a      	ldr	r2, [r7, #0]
 80010fc:	4413      	add	r3, r2
 80010fe:	881b      	ldrh	r3, [r3, #0]
 8001100:	0a1b      	lsrs	r3, r3, #8
 8001102:	b29b      	uxth	r3, r3
 8001104:	b2da      	uxtb	r2, r3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	77da      	strb	r2, [r3, #31]
			temp_volt += 1;
 800110a:	7b3b      	ldrb	r3, [r7, #12]
 800110c:	3301      	adds	r3, #1
 800110e:	733b      	strb	r3, [r7, #12]
			ptr->data[4] = read_temp[temp_volt];
 8001110:	7b3b      	ldrb	r3, [r7, #12]
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	683a      	ldr	r2, [r7, #0]
 8001116:	4413      	add	r3, r2
 8001118:	881b      	ldrh	r3, [r3, #0]
 800111a:	b2da      	uxtb	r2, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	f883 2020 	strb.w	r2, [r3, #32]
			ptr->data[5] = read_temp[temp_volt] >> 8;
 8001122:	7b3b      	ldrb	r3, [r7, #12]
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	683a      	ldr	r2, [r7, #0]
 8001128:	4413      	add	r3, r2
 800112a:	881b      	ldrh	r3, [r3, #0]
 800112c:	0a1b      	lsrs	r3, r3, #8
 800112e:	b29b      	uxth	r3, r3
 8001130:	b2da      	uxtb	r2, r3
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			temp_volt += 1;
 8001138:	7b3b      	ldrb	r3, [r7, #12]
 800113a:	3301      	adds	r3, #1
 800113c:	733b      	strb	r3, [r7, #12]
			ptr->data[6] = read_temp[temp_volt];
 800113e:	7b3b      	ldrb	r3, [r7, #12]
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	683a      	ldr	r2, [r7, #0]
 8001144:	4413      	add	r3, r2
 8001146:	881b      	ldrh	r3, [r3, #0]
 8001148:	b2da      	uxtb	r2, r3
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			ptr->data[7] = read_temp[temp_volt] >> 8;
 8001150:	7b3b      	ldrb	r3, [r7, #12]
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	683a      	ldr	r2, [r7, #0]
 8001156:	4413      	add	r3, r2
 8001158:	881b      	ldrh	r3, [r3, #0]
 800115a:	0a1b      	lsrs	r3, r3, #8
 800115c:	b29b      	uxth	r3, r3
 800115e:	b2da      	uxtb	r2, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		}
		if (i > 0 && i % 4 == 0) {
 8001166:	7b7b      	ldrb	r3, [r7, #13]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d00d      	beq.n	8001188 <CAN_Send_Temperature+0xfc>
 800116c:	7b7b      	ldrb	r3, [r7, #13]
 800116e:	f003 0303 	and.w	r3, r3, #3
 8001172:	b2db      	uxtb	r3, r3
 8001174:	2b00      	cmp	r3, #0
 8001176:	d107      	bne.n	8001188 <CAN_Send_Temperature+0xfc>
			CAN_ID = CAN_ID + 0x01;
 8001178:	89fb      	ldrh	r3, [r7, #14]
 800117a:	3301      	adds	r3, #1
 800117c:	81fb      	strh	r3, [r7, #14]
			setCANId(ptr, CAN_ID);
 800117e:	89fb      	ldrh	r3, [r7, #14]
 8001180:	4619      	mov	r1, r3
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f7ff fee8 	bl	8000f58 <setCANId>
		}
		HAL_Delay(10);
 8001188:	200a      	movs	r0, #10
 800118a:	f000 fe67 	bl	8001e5c <HAL_Delay>
		CAN_Send(ptr);
 800118e:	6878      	ldr	r0, [r7, #4]
 8001190:	f7ff feb6 	bl	8000f00 <CAN_Send>
	for (uint8_t i = 0; i < NUM_THERM_TOTAL; i++) {
 8001194:	7b7b      	ldrb	r3, [r7, #13]
 8001196:	3301      	adds	r3, #1
 8001198:	737b      	strb	r3, [r7, #13]
 800119a:	7b7b      	ldrb	r3, [r7, #13]
 800119c:	2b0b      	cmp	r3, #11
 800119e:	d985      	bls.n	80010ac <CAN_Send_Temperature+0x20>
	}

}
 80011a0:	bf00      	nop
 80011a2:	bf00      	nop
 80011a4:	3710      	adds	r7, #16
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <CAN_Send_Cell_Summary>:

void CAN_Send_Cell_Summary(struct CANMessage *ptr,
		struct batteryModuleVoltage *batt) {
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b084      	sub	sp, #16
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
 80011b2:	6039      	str	r1, [r7, #0]
	uint16_t CAN_ID = 0x622;
 80011b4:	f240 6322 	movw	r3, #1570	; 0x622
 80011b8:	81fb      	strh	r3, [r7, #14]
	setCANId(ptr, CAN_ID);
 80011ba:	89fb      	ldrh	r3, [r7, #14]
 80011bc:	4619      	mov	r1, r3
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f7ff feca 	bl	8000f58 <setCANId>

	ptr->data[0] = batt->cell_volt_highest;
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	895b      	ldrh	r3, [r3, #10]
 80011c8:	b2da      	uxtb	r2, r3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	771a      	strb	r2, [r3, #28]
	ptr->data[1] = (batt->cell_volt_highest) >> 8;
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	895b      	ldrh	r3, [r3, #10]
 80011d2:	0a1b      	lsrs	r3, r3, #8
 80011d4:	b29b      	uxth	r3, r3
 80011d6:	b2da      	uxtb	r2, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	775a      	strb	r2, [r3, #29]
	ptr->data[2] = batt->cell_volt_lowest;
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	891b      	ldrh	r3, [r3, #8]
 80011e0:	b2da      	uxtb	r2, r3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	779a      	strb	r2, [r3, #30]
	ptr->data[3] = (batt->cell_volt_lowest) >> 8;
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	891b      	ldrh	r3, [r3, #8]
 80011ea:	0a1b      	lsrs	r3, r3, #8
 80011ec:	b29b      	uxth	r3, r3
 80011ee:	b2da      	uxtb	r2, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	77da      	strb	r2, [r3, #31]
	ptr->data[4] = batt->cell_temp_highest;
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	89db      	ldrh	r3, [r3, #14]
 80011f8:	b2da      	uxtb	r2, r3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	f883 2020 	strb.w	r2, [r3, #32]
	ptr->data[5] = (batt->cell_temp_highest) >> 8;
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	89db      	ldrh	r3, [r3, #14]
 8001204:	0a1b      	lsrs	r3, r3, #8
 8001206:	b29b      	uxth	r3, r3
 8001208:	b2da      	uxtb	r2, r3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	ptr->data[6] = batt->cell_temp_lowest;
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	899b      	ldrh	r3, [r3, #12]
 8001214:	b2da      	uxtb	r2, r3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	ptr->data[7] = (batt->cell_temp_lowest) >> 8;
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	899b      	ldrh	r3, [r3, #12]
 8001220:	0a1b      	lsrs	r3, r3, #8
 8001222:	b29b      	uxth	r3, r3
 8001224:	b2da      	uxtb	r2, r3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

	HAL_Delay(10);
 800122c:	200a      	movs	r0, #10
 800122e:	f000 fe15 	bl	8001e5c <HAL_Delay>
	CAN_Send(ptr);
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f7ff fe64 	bl	8000f00 <CAN_Send>
}
 8001238:	bf00      	nop
 800123a:	3710      	adds	r7, #16
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <CAN_Send_Safety_Checker>:

void CAN_Send_Safety_Checker(struct CANMessage *ptr, uint8_t* faults, uint8_t* warnings){
 8001240:	b580      	push	{r7, lr}
 8001242:	b086      	sub	sp, #24
 8001244:	af00      	add	r7, sp, #0
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	607a      	str	r2, [r7, #4]
	uint16_t CAN_ID = 0x600;
 800124c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001250:	82fb      	strh	r3, [r7, #22]
	setCANId(ptr, CAN_ID);
 8001252:	8afb      	ldrh	r3, [r7, #22]
 8001254:	4619      	mov	r1, r3
 8001256:	68f8      	ldr	r0, [r7, #12]
 8001258:	f7ff fe7e 	bl	8000f58 <setCANId>
	ptr->data[0] = *faults;
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	781a      	ldrb	r2, [r3, #0]
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	771a      	strb	r2, [r3, #28]
	ptr->data[1] = *warnings;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	781a      	ldrb	r2, [r3, #0]
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	775a      	strb	r2, [r3, #29]
	HAL_Delay(10);
 800126c:	200a      	movs	r0, #10
 800126e:	f000 fdf5 	bl	8001e5c <HAL_Delay>
	CAN_Send(ptr);
 8001272:	68f8      	ldr	r0, [r7, #12]
 8001274:	f7ff fe44 	bl	8000f00 <CAN_Send>
}
 8001278:	bf00      	nop
 800127a:	3718      	adds	r7, #24
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}

08001280 <MX_GPIO_Init>:
        * EXTI
     PB8   ------> CAN1_RX
     PB9   ------> CAN1_TX
*/
void MX_GPIO_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b08a      	sub	sp, #40	; 0x28
 8001284:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001286:	f107 0314 	add.w	r3, r7, #20
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]
 800128e:	605a      	str	r2, [r3, #4]
 8001290:	609a      	str	r2, [r3, #8]
 8001292:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001294:	4b52      	ldr	r3, [pc, #328]	; (80013e0 <MX_GPIO_Init+0x160>)
 8001296:	699b      	ldr	r3, [r3, #24]
 8001298:	4a51      	ldr	r2, [pc, #324]	; (80013e0 <MX_GPIO_Init+0x160>)
 800129a:	f043 0310 	orr.w	r3, r3, #16
 800129e:	6193      	str	r3, [r2, #24]
 80012a0:	4b4f      	ldr	r3, [pc, #316]	; (80013e0 <MX_GPIO_Init+0x160>)
 80012a2:	699b      	ldr	r3, [r3, #24]
 80012a4:	f003 0310 	and.w	r3, r3, #16
 80012a8:	613b      	str	r3, [r7, #16]
 80012aa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ac:	4b4c      	ldr	r3, [pc, #304]	; (80013e0 <MX_GPIO_Init+0x160>)
 80012ae:	699b      	ldr	r3, [r3, #24]
 80012b0:	4a4b      	ldr	r2, [pc, #300]	; (80013e0 <MX_GPIO_Init+0x160>)
 80012b2:	f043 0320 	orr.w	r3, r3, #32
 80012b6:	6193      	str	r3, [r2, #24]
 80012b8:	4b49      	ldr	r3, [pc, #292]	; (80013e0 <MX_GPIO_Init+0x160>)
 80012ba:	699b      	ldr	r3, [r3, #24]
 80012bc:	f003 0320 	and.w	r3, r3, #32
 80012c0:	60fb      	str	r3, [r7, #12]
 80012c2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c4:	4b46      	ldr	r3, [pc, #280]	; (80013e0 <MX_GPIO_Init+0x160>)
 80012c6:	699b      	ldr	r3, [r3, #24]
 80012c8:	4a45      	ldr	r2, [pc, #276]	; (80013e0 <MX_GPIO_Init+0x160>)
 80012ca:	f043 0304 	orr.w	r3, r3, #4
 80012ce:	6193      	str	r3, [r2, #24]
 80012d0:	4b43      	ldr	r3, [pc, #268]	; (80013e0 <MX_GPIO_Init+0x160>)
 80012d2:	699b      	ldr	r3, [r3, #24]
 80012d4:	f003 0304 	and.w	r3, r3, #4
 80012d8:	60bb      	str	r3, [r7, #8]
 80012da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012dc:	4b40      	ldr	r3, [pc, #256]	; (80013e0 <MX_GPIO_Init+0x160>)
 80012de:	699b      	ldr	r3, [r3, #24]
 80012e0:	4a3f      	ldr	r2, [pc, #252]	; (80013e0 <MX_GPIO_Init+0x160>)
 80012e2:	f043 0308 	orr.w	r3, r3, #8
 80012e6:	6193      	str	r3, [r2, #24]
 80012e8:	4b3d      	ldr	r3, [pc, #244]	; (80013e0 <MX_GPIO_Init+0x160>)
 80012ea:	699b      	ldr	r3, [r3, #24]
 80012ec:	f003 0308 	and.w	r3, r3, #8
 80012f0:	607b      	str	r3, [r7, #4]
 80012f2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LTC_nCS_GPIO_Port, LTC_nCS_Pin, GPIO_PIN_RESET);
 80012f4:	2200      	movs	r2, #0
 80012f6:	2110      	movs	r1, #16
 80012f8:	483a      	ldr	r0, [pc, #232]	; (80013e4 <MX_GPIO_Init+0x164>)
 80012fa:	f001 fca9 	bl	8002c50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80012fe:	2200      	movs	r2, #0
 8001300:	2102      	movs	r1, #2
 8001302:	4839      	ldr	r0, [pc, #228]	; (80013e8 <MX_GPIO_Init+0x168>)
 8001304:	f001 fca4 	bl	8002c50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCU_HEARTBEAT_LED_GPIO_Port, MCU_HEARTBEAT_LED_Pin, GPIO_PIN_RESET);
 8001308:	2200      	movs	r2, #0
 800130a:	2140      	movs	r1, #64	; 0x40
 800130c:	4837      	ldr	r0, [pc, #220]	; (80013ec <MX_GPIO_Init+0x16c>)
 800130e:	f001 fc9f 	bl	8002c50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LTC_nCS_Pin;
 8001312:	2310      	movs	r3, #16
 8001314:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001316:	2301      	movs	r3, #1
 8001318:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131e:	2302      	movs	r3, #2
 8001320:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LTC_nCS_GPIO_Port, &GPIO_InitStruct);
 8001322:	f107 0314 	add.w	r3, r7, #20
 8001326:	4619      	mov	r1, r3
 8001328:	482e      	ldr	r0, [pc, #184]	; (80013e4 <MX_GPIO_Init+0x164>)
 800132a:	f001 fb0d 	bl	8002948 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800132e:	2302      	movs	r3, #2
 8001330:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001332:	2301      	movs	r3, #1
 8001334:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	2300      	movs	r3, #0
 8001338:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133a:	2302      	movs	r3, #2
 800133c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800133e:	f107 0314 	add.w	r3, r7, #20
 8001342:	4619      	mov	r1, r3
 8001344:	4828      	ldr	r0, [pc, #160]	; (80013e8 <MX_GPIO_Init+0x168>)
 8001346:	f001 faff 	bl	8002948 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MCU_HEARTBEAT_LED_Pin;
 800134a:	2340      	movs	r3, #64	; 0x40
 800134c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800134e:	2301      	movs	r3, #1
 8001350:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001352:	2300      	movs	r3, #0
 8001354:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001356:	2302      	movs	r3, #2
 8001358:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MCU_HEARTBEAT_LED_GPIO_Port, &GPIO_InitStruct);
 800135a:	f107 0314 	add.w	r3, r7, #20
 800135e:	4619      	mov	r1, r3
 8001360:	4822      	ldr	r0, [pc, #136]	; (80013ec <MX_GPIO_Init+0x16c>)
 8001362:	f001 faf1 	bl	8002948 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PMUX_ST_Pin;
 8001366:	f44f 7380 	mov.w	r3, #256	; 0x100
 800136a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800136c:	2300      	movs	r3, #0
 800136e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001370:	2300      	movs	r3, #0
 8001372:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PMUX_ST_GPIO_Port, &GPIO_InitStruct);
 8001374:	f107 0314 	add.w	r3, r7, #20
 8001378:	4619      	mov	r1, r3
 800137a:	481c      	ldr	r0, [pc, #112]	; (80013ec <MX_GPIO_Init+0x16c>)
 800137c:	f001 fae4 	bl	8002948 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001380:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001384:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001386:	2300      	movs	r3, #0
 8001388:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138a:	2300      	movs	r3, #0
 800138c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800138e:	f107 0314 	add.w	r3, r7, #20
 8001392:	4619      	mov	r1, r3
 8001394:	4814      	ldr	r0, [pc, #80]	; (80013e8 <MX_GPIO_Init+0x168>)
 8001396:	f001 fad7 	bl	8002948 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800139a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800139e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a0:	2302      	movs	r3, #2
 80013a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013a4:	2303      	movs	r3, #3
 80013a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a8:	f107 0314 	add.w	r3, r7, #20
 80013ac:	4619      	mov	r1, r3
 80013ae:	480e      	ldr	r0, [pc, #56]	; (80013e8 <MX_GPIO_Init+0x168>)
 80013b0:	f001 faca 	bl	8002948 <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_CAN1_2();
 80013b4:	4b0e      	ldr	r3, [pc, #56]	; (80013f0 <MX_GPIO_Init+0x170>)
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	627b      	str	r3, [r7, #36]	; 0x24
 80013ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013bc:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80013c0:	627b      	str	r3, [r7, #36]	; 0x24
 80013c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80013c8:	627b      	str	r3, [r7, #36]	; 0x24
 80013ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013d0:	627b      	str	r3, [r7, #36]	; 0x24
 80013d2:	4a07      	ldr	r2, [pc, #28]	; (80013f0 <MX_GPIO_Init+0x170>)
 80013d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d6:	6053      	str	r3, [r2, #4]

}
 80013d8:	bf00      	nop
 80013da:	3728      	adds	r7, #40	; 0x28
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	40021000 	.word	0x40021000
 80013e4:	40010800 	.word	0x40010800
 80013e8:	40010c00 	.word	0x40010c00
 80013ec:	40011000 	.word	0x40011000
 80013f0:	40010000 	.word	0x40010000

080013f4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b098      	sub	sp, #96	; 0x60
 80013f8:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	GpioTimePacket tp_led_heartbeat;
	TimerPacket timerpacket_ltc;

	struct batteryModuleVoltage modVoltage = { .cell_volt = (uint16_t*) malloc(
 80013fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	605a      	str	r2, [r3, #4]
 8001404:	609a      	str	r2, [r3, #8]
 8001406:	60da      	str	r2, [r3, #12]
 8001408:	611a      	str	r2, [r3, #16]
 800140a:	615a      	str	r2, [r3, #20]
 800140c:	2018      	movs	r0, #24
 800140e:	f007 fc9f 	bl	8008d50 <malloc>
 8001412:	4603      	mov	r3, r0
 8001414:	62bb      	str	r3, [r7, #40]	; 0x28
	NUM_CELLS * sizeof(uint16_t)), .cell_temp = (uint16_t*) malloc(
 8001416:	2018      	movs	r0, #24
 8001418:	f007 fc9a 	bl	8008d50 <malloc>
 800141c:	4603      	mov	r3, r0
	struct batteryModuleVoltage modVoltage = { .cell_volt = (uint16_t*) malloc(
 800141e:	62fb      	str	r3, [r7, #44]	; 0x2c
	NUM_THERM_TOTAL * sizeof(uint16_t)), .read_auxreg = (uint16_t*) malloc(
 8001420:	200c      	movs	r0, #12
 8001422:	f007 fc95 	bl	8008d50 <malloc>
 8001426:	4603      	mov	r3, r0
	struct batteryModuleVoltage modVoltage = { .cell_volt = (uint16_t*) malloc(
 8001428:	63fb      	str	r3, [r7, #60]	; 0x3c
	NUM_AUXES * sizeof(uint16_t)) };

	struct CANMessage msg;
	uint8_t safetyFaults = 0;
 800142a:	2300      	movs	r3, #0
 800142c:	70fb      	strb	r3, [r7, #3]
	uint8_t safetyWarnings = 0;
 800142e:	2300      	movs	r3, #0
 8001430:	70bb      	strb	r3, [r7, #2]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001432:	f000 fcb1 	bl	8001d98 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001436:	f000 f8c5 	bl	80015c4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800143a:	f7ff ff21 	bl	8001280 <MX_GPIO_Init>
	MX_ADC1_Init();
 800143e:	f7ff fbd9 	bl	8000bf4 <MX_ADC1_Init>
	MX_ADC2_Init();
 8001442:	f7ff fc15 	bl	8000c70 <MX_ADC2_Init>
	MX_TIM7_Init();
 8001446:	f000 fc2d 	bl	8001ca4 <MX_TIM7_Init>
	MX_SPI1_Init();
 800144a:	f000 faf3 	bl	8001a34 <MX_SPI1_Init>
	MX_USB_DEVICE_Init();
 800144e:	f006 ffbd 	bl	80083cc <MX_USB_DEVICE_Init>
	MX_CAN2_Init();
 8001452:	f7ff fcb1 	bl	8000db8 <MX_CAN2_Init>
	/* USER CODE BEGIN 2 */
	CAN_SettingsInit(&msg); // Start CAN at 0x00
 8001456:	1d3b      	adds	r3, r7, #4
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff fd65 	bl	8000f28 <CAN_SettingsInit>
	//Start timer
	GpioTimePacket_Init(&tp_led_heartbeat, MCU_HEARTBEAT_LED_GPIO_Port,
 800145e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001462:	2240      	movs	r2, #64	; 0x40
 8001464:	4953      	ldr	r1, [pc, #332]	; (80015b4 <main+0x1c0>)
 8001466:	4618      	mov	r0, r3
 8001468:	f000 f918 	bl	800169c <GpioTimePacket_Init>
	MCU_HEARTBEAT_LED_Pin);
	TimerPacket_Init(&timerpacket_ltc, LTC_DELAY);
 800146c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001470:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001474:	4618      	mov	r0, r3
 8001476:	f000 f951 	bl	800171c <TimerPacket_Init>
	//Pull SPI1 nCS HIGH (deselect)
	LTC_nCS_High();
 800147a:	f000 fb5b 	bl	8001b34 <LTC_nCS_High>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	uint8_t tempindex = 0;
 800147e:	2300      	movs	r3, #0
 8001480:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t indexpause = 8;
 8001484:	2308      	movs	r3, #8
 8001486:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t loop_count = 3;
 800148a:	2303      	movs	r3, #3
 800148c:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		GpioFixedToggle(&tp_led_heartbeat, LED_HEARTBEAT_DELAY_MS);
 8001490:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001494:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001498:	4618      	mov	r0, r3
 800149a:	f000 f91c 	bl	80016d6 <GpioFixedToggle>
		if (TimerPacket_FixedPulse(&timerpacket_ltc)) {
 800149e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80014a2:	4618      	mov	r0, r3
 80014a4:	f000 f94d 	bl	8001742 <TimerPacket_FixedPulse>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d0f0      	beq.n	8001490 <main+0x9c>
			wakeup_sleep();
 80014ae:	f7ff f859 	bl	8000564 <wakeup_sleep>
			readVolt(modVoltage.cell_volt);
 80014b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014b4:	4618      	mov	r0, r3
 80014b6:	f000 f966 	bl	8001786 <readVolt>
			//print(NUM_CELLS, (uint16_t*) modVoltage.cell_volt);

			//related to reading temperatures
			for (uint8_t i = tempindex; i < indexpause; i++) {
 80014ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80014be:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 80014c2:	e00e      	b.n	80014e2 <main+0xee>
				readTemp(i, modVoltage.cell_temp, modVoltage.read_auxreg);
 80014c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80014c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80014c8:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80014cc:	4618      	mov	r0, r3
 80014ce:	f000 f96f 	bl	80017b0 <readTemp>
				HAL_Delay(100);
 80014d2:	2064      	movs	r0, #100	; 0x64
 80014d4:	f000 fcc2 	bl	8001e5c <HAL_Delay>
			for (uint8_t i = tempindex; i < indexpause; i++) {
 80014d8:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80014dc:	3301      	adds	r3, #1
 80014de:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 80014e2:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 80014e6:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80014ea:	429a      	cmp	r2, r3
 80014ec:	d3ea      	bcc.n	80014c4 <main+0xd0>
			}
			if (indexpause == 8) {
 80014ee:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80014f2:	2b08      	cmp	r3, #8
 80014f4:	d111      	bne.n	800151a <main+0x126>
				tempindex = 8;
 80014f6:	2308      	movs	r3, #8
 80014f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				indexpause = NUM_THERM_PER_MOD;
 80014fc:	230c      	movs	r3, #12
 80014fe:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
				wakeup_idle();
 8001502:	f7ff f80f 	bl	8000524 <wakeup_idle>
				ltc_wrcomm(NUM_DEVICES, BMS_MUX_PAUSE[0]);
 8001506:	492c      	ldr	r1, [pc, #176]	; (80015b8 <main+0x1c4>)
 8001508:	2001      	movs	r0, #1
 800150a:	f7ff f901 	bl	8000710 <ltc_wrcomm>
				wakeup_idle();
 800150e:	f7ff f809 	bl	8000524 <wakeup_idle>
				ltc_stcomm(2);
 8001512:	2002      	movs	r0, #2
 8001514:	f7ff f978 	bl	8000808 <ltc_stcomm>
 8001518:	e014      	b.n	8001544 <main+0x150>
			} else if (indexpause == NUM_THERM_PER_MOD) {
 800151a:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800151e:	2b0c      	cmp	r3, #12
 8001520:	d110      	bne.n	8001544 <main+0x150>
				wakeup_idle();
 8001522:	f7fe ffff 	bl	8000524 <wakeup_idle>
				ltc_wrcomm(NUM_DEVICES, BMS_MUX_PAUSE[1]);
 8001526:	4925      	ldr	r1, [pc, #148]	; (80015bc <main+0x1c8>)
 8001528:	2001      	movs	r0, #1
 800152a:	f7ff f8f1 	bl	8000710 <ltc_wrcomm>
				wakeup_idle();
 800152e:	f7fe fff9 	bl	8000524 <wakeup_idle>
				ltc_stcomm(2);
 8001532:	2002      	movs	r0, #2
 8001534:	f7ff f968 	bl	8000808 <ltc_stcomm>
				indexpause = 8;
 8001538:	2308      	movs	r3, #8
 800153a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
				tempindex = 0;
 800153e:	2300      	movs	r3, #0
 8001540:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
			//print(NUM_THERM_TOTAL, (uint16_t*) modVoltage.cell_temp);

			//getting the summary of all cells in the pack
			cellSummary(&modVoltage);
 8001544:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001548:	4618      	mov	r0, r3
 800154a:	f000 f97f 	bl	800184c <cellSummary>

			//waiting for 3 loops of the while look to occur before checking for faults
			if (loop_count == 0) {
 800154e:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8001552:	2b00      	cmp	r3, #0
 8001554:	d10f      	bne.n	8001576 <main+0x182>
				faultAndWarning(&modVoltage, &safetyFaults, &safetyWarnings);
 8001556:	1cba      	adds	r2, r7, #2
 8001558:	1cf9      	adds	r1, r7, #3
 800155a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800155e:	4618      	mov	r0, r3
 8001560:	f000 f9fb 	bl	800195a <faultAndWarning>
				if (safetyFaults != 0) {
 8001564:	78fb      	ldrb	r3, [r7, #3]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d00a      	beq.n	8001580 <main+0x18c>
					HAL_GPIO_WritePin(Fault_GPIO_Port, Fault_Pin, GPIO_PIN_SET);
 800156a:	2201      	movs	r2, #1
 800156c:	2102      	movs	r1, #2
 800156e:	4814      	ldr	r0, [pc, #80]	; (80015c0 <main+0x1cc>)
 8001570:	f001 fb6e 	bl	8002c50 <HAL_GPIO_WritePin>
 8001574:	e004      	b.n	8001580 <main+0x18c>
				}

			} else {
				loop_count--;
 8001576:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 800157a:	3b01      	subs	r3, #1
 800157c:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
				startBalance((uint16_t*) modVoltage.cell_volt, NUM_DEVICES,
									modVoltage.cell_volt_lowest);
			}

			//calling all CAN realated methods
			CAN_Send_Safety_Checker(&msg, &safetyFaults, &safetyWarnings);
 8001580:	1cba      	adds	r2, r7, #2
 8001582:	1cf9      	adds	r1, r7, #3
 8001584:	1d3b      	adds	r3, r7, #4
 8001586:	4618      	mov	r0, r3
 8001588:	f7ff fe5a 	bl	8001240 <CAN_Send_Safety_Checker>
			CAN_Send_Cell_Summary(&msg, &modVoltage);
 800158c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001590:	1d3b      	adds	r3, r7, #4
 8001592:	4611      	mov	r1, r2
 8001594:	4618      	mov	r0, r3
 8001596:	f7ff fe08 	bl	80011aa <CAN_Send_Cell_Summary>
			CAN_Send_Voltage(&msg, modVoltage.cell_volt);
 800159a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800159c:	1d3b      	adds	r3, r7, #4
 800159e:	4611      	mov	r1, r2
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7ff fce6 	bl	8000f72 <CAN_Send_Voltage>
			CAN_Send_Temperature(&msg, modVoltage.cell_temp);
 80015a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015a8:	1d3b      	adds	r3, r7, #4
 80015aa:	4611      	mov	r1, r2
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7ff fd6d 	bl	800108c <CAN_Send_Temperature>
		GpioFixedToggle(&tp_led_heartbeat, LED_HEARTBEAT_DELAY_MS);
 80015b2:	e76d      	b.n	8001490 <main+0x9c>
 80015b4:	40011000 	.word	0x40011000
 80015b8:	20000000 	.word	0x20000000
 80015bc:	20000006 	.word	0x20000006
 80015c0:	40010c00 	.word	0x40010c00

080015c4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b09c      	sub	sp, #112	; 0x70
 80015c8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80015ca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80015ce:	2238      	movs	r2, #56	; 0x38
 80015d0:	2100      	movs	r1, #0
 80015d2:	4618      	mov	r0, r3
 80015d4:	f007 fc78 	bl	8008ec8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80015d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	605a      	str	r2, [r3, #4]
 80015e2:	609a      	str	r2, [r3, #8]
 80015e4:	60da      	str	r2, [r3, #12]
 80015e6:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80015e8:	1d3b      	adds	r3, r7, #4
 80015ea:	2220      	movs	r2, #32
 80015ec:	2100      	movs	r1, #0
 80015ee:	4618      	mov	r0, r3
 80015f0:	f007 fc6a 	bl	8008ec8 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015f4:	2301      	movs	r3, #1
 80015f6:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015fc:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV5;
 80015fe:	2304      	movs	r3, #4
 8001600:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001602:	2301      	movs	r3, #1
 8001604:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_PLL2;
 8001606:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800160a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800160c:	2302      	movs	r3, #2
 800160e:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001610:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001614:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001616:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800161a:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL2_ON;
 800161c:	2302      	movs	r3, #2
 800161e:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL2.PLL2MUL = RCC_PLL2_MUL8;
 8001620:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001624:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL2.HSEPrediv2Value = RCC_HSE_PREDIV2_DIV5;
 8001626:	2340      	movs	r3, #64	; 0x40
 8001628:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800162a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800162e:	4618      	mov	r0, r3
 8001630:	f002 fc70 	bl	8003f14 <HAL_RCC_OscConfig>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <SystemClock_Config+0x7a>
		Error_Handler();
 800163a:	f000 f89f 	bl	800177c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800163e:	230f      	movs	r3, #15
 8001640:	627b      	str	r3, [r7, #36]	; 0x24
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001642:	2302      	movs	r3, #2
 8001644:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001646:	2300      	movs	r3, #0
 8001648:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800164a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800164e:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001650:	2300      	movs	r3, #0
 8001652:	637b      	str	r3, [r7, #52]	; 0x34

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001654:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001658:	2102      	movs	r1, #2
 800165a:	4618      	mov	r0, r3
 800165c:	f002 ff70 	bl	8004540 <HAL_RCC_ClockConfig>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <SystemClock_Config+0xa6>
		Error_Handler();
 8001666:	f000 f889 	bl	800177c <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC | RCC_PERIPHCLK_USB;
 800166a:	2312      	movs	r3, #18
 800166c:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800166e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001672:	60fb      	str	r3, [r7, #12]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV3;
 8001674:	2300      	movs	r3, #0
 8001676:	623b      	str	r3, [r7, #32]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8001678:	1d3b      	adds	r3, r7, #4
 800167a:	4618      	mov	r0, r3
 800167c:	f003 f92e 	bl	80048dc <HAL_RCCEx_PeriphCLKConfig>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <SystemClock_Config+0xc6>
		Error_Handler();
 8001686:	f000 f879 	bl	800177c <Error_Handler>
	}

	/** Configure the Systick interrupt time
	 */
	__HAL_RCC_PLLI2S_ENABLE();
 800168a:	4b03      	ldr	r3, [pc, #12]	; (8001698 <SystemClock_Config+0xd4>)
 800168c:	2201      	movs	r2, #1
 800168e:	601a      	str	r2, [r3, #0]
}
 8001690:	bf00      	nop
 8001692:	3770      	adds	r7, #112	; 0x70
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	42420070 	.word	0x42420070

0800169c <GpioTimePacket_Init>:

/* USER CODE BEGIN 4 */
//Initialize struct values
//Will initialize GPIO to LOW!
void GpioTimePacket_Init(GpioTimePacket *gtp, GPIO_TypeDef *port, uint16_t pin) {
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	60f8      	str	r0, [r7, #12]
 80016a4:	60b9      	str	r1, [r7, #8]
 80016a6:	4613      	mov	r3, r2
 80016a8:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(port, pin, GPIO_PIN_RESET); //Set GPIO LOW
 80016aa:	88fb      	ldrh	r3, [r7, #6]
 80016ac:	2200      	movs	r2, #0
 80016ae:	4619      	mov	r1, r3
 80016b0:	68b8      	ldr	r0, [r7, #8]
 80016b2:	f001 facd 	bl	8002c50 <HAL_GPIO_WritePin>
	gtp->gpio_port = port;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	68ba      	ldr	r2, [r7, #8]
 80016ba:	601a      	str	r2, [r3, #0]
	gtp->gpio_pin = pin;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	88fa      	ldrh	r2, [r7, #6]
 80016c0:	809a      	strh	r2, [r3, #4]
	gtp->ts_prev = 0; //Init to 0
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	2200      	movs	r2, #0
 80016c6:	609a      	str	r2, [r3, #8]
	gtp->ts_curr = 0; //Init to 0
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	2200      	movs	r2, #0
 80016cc:	60da      	str	r2, [r3, #12]
}
 80016ce:	bf00      	nop
 80016d0:	3710      	adds	r7, #16
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <GpioFixedToggle>:
//update_ms = update after X ms
void GpioFixedToggle(GpioTimePacket *gtp, uint16_t update_ms) {
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b082      	sub	sp, #8
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
 80016de:	460b      	mov	r3, r1
 80016e0:	807b      	strh	r3, [r7, #2]
	gtp->ts_curr = HAL_GetTick(); //Record current timestamp
 80016e2:	f000 fbb1 	bl	8001e48 <HAL_GetTick>
 80016e6:	4602      	mov	r2, r0
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	60da      	str	r2, [r3, #12]
	if (gtp->ts_curr - gtp->ts_prev > update_ms) {
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	68da      	ldr	r2, [r3, #12]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	1ad2      	subs	r2, r2, r3
 80016f6:	887b      	ldrh	r3, [r7, #2]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d90b      	bls.n	8001714 <GpioFixedToggle+0x3e>
		HAL_GPIO_TogglePin(gtp->gpio_port, gtp->gpio_pin); // Toggle GPIO
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	889b      	ldrh	r3, [r3, #4]
 8001704:	4619      	mov	r1, r3
 8001706:	4610      	mov	r0, r2
 8001708:	f001 faba 	bl	8002c80 <HAL_GPIO_TogglePin>
		gtp->ts_prev = gtp->ts_curr;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	68da      	ldr	r2, [r3, #12]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	609a      	str	r2, [r3, #8]
	}
}
 8001714:	bf00      	nop
 8001716:	3708      	adds	r7, #8
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}

0800171c <TimerPacket_Init>:
//Initialize struct values
//Will initialize GPIO to LOW!
void TimerPacket_Init(TimerPacket *tp, uint32_t delay) {
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	6039      	str	r1, [r7, #0]
	tp->ts_prev = 0;		//Init to 0
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
	tp->ts_curr = 0; 		//Init to 0
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2200      	movs	r2, #0
 8001730:	605a      	str	r2, [r3, #4]
	tp->delay = delay;	//Init to user value
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	683a      	ldr	r2, [r7, #0]
 8001736:	609a      	str	r2, [r3, #8]
}
 8001738:	bf00      	nop
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	bc80      	pop	{r7}
 8001740:	4770      	bx	lr

08001742 <TimerPacket_FixedPulse>:
//update_ms = update after X ms
uint8_t TimerPacket_FixedPulse(TimerPacket *tp) {
 8001742:	b580      	push	{r7, lr}
 8001744:	b082      	sub	sp, #8
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
	tp->ts_curr = HAL_GetTick(); //Record current timestamp
 800174a:	f000 fb7d 	bl	8001e48 <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	605a      	str	r2, [r3, #4]
	if (tp->ts_curr - tp->ts_prev > tp->delay) {
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	685a      	ldr	r2, [r3, #4]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	1ad2      	subs	r2, r2, r3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	429a      	cmp	r2, r3
 8001764:	d905      	bls.n	8001772 <TimerPacket_FixedPulse+0x30>
		tp->ts_prev = tp->ts_curr; //Update prev timestamp to current
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685a      	ldr	r2, [r3, #4]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	601a      	str	r2, [r3, #0]
		return 1; //Enact event (time interval is a go)
 800176e:	2301      	movs	r3, #1
 8001770:	e000      	b.n	8001774 <TimerPacket_FixedPulse+0x32>
	}
	return 0; //Do not enact event
 8001772:	2300      	movs	r3, #0
}
 8001774:	4618      	mov	r0, r3
 8001776:	3708      	adds	r7, #8
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}

0800177c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001780:	b672      	cpsid	i
}
 8001782:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001784:	e7fe      	b.n	8001784 <Error_Handler+0x8>

08001786 <readVolt>:

	actual_temp[dev_idx * NUM_THERM_PER_MOD + tempindex] = steinhart;

}

void readVolt(uint16_t *read_volt) {
 8001786:	b580      	push	{r7, lr}
 8001788:	b082      	sub	sp, #8
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]
	wakeup_idle();
 800178e:	f7fe fec9 	bl	8000524 <wakeup_idle>
	ltc_adcv(MD_7KHZ_3KHZ, DCP_DISABLED, CELL_CH_ALL);
 8001792:	2200      	movs	r2, #0
 8001794:	2100      	movs	r1, #0
 8001796:	2002      	movs	r0, #2
 8001798:	f7ff f92e 	bl	80009f8 <ltc_adcv>
	ltc_polladc();
 800179c:	f7ff f9b2 	bl	8000b04 <ltc_polladc>
	read_cell_volt((uint16_t*) read_volt);
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f7fe fefd 	bl	80005a0 <read_cell_volt>
}
 80017a6:	bf00      	nop
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
	...

080017b0 <readTemp>:

void readTemp(uint8_t tempindex, uint16_t *read_temp, uint16_t *read_auxreg) {
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b086      	sub	sp, #24
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	4603      	mov	r3, r0
 80017b8:	60b9      	str	r1, [r7, #8]
 80017ba:	607a      	str	r2, [r7, #4]
 80017bc:	73fb      	strb	r3, [r7, #15]
	wakeup_idle();
 80017be:	f7fe feb1 	bl	8000524 <wakeup_idle>
	ltc_wrcomm(NUM_DEVICES, BMS_THERM[tempindex]);
 80017c2:	7bfa      	ldrb	r2, [r7, #15]
 80017c4:	4613      	mov	r3, r2
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	4413      	add	r3, r2
 80017ca:	005b      	lsls	r3, r3, #1
 80017cc:	4a1e      	ldr	r2, [pc, #120]	; (8001848 <readTemp+0x98>)
 80017ce:	4413      	add	r3, r2
 80017d0:	4619      	mov	r1, r3
 80017d2:	2001      	movs	r0, #1
 80017d4:	f7fe ff9c 	bl	8000710 <ltc_wrcomm>
	wakeup_idle();
 80017d8:	f7fe fea4 	bl	8000524 <wakeup_idle>
	ltc_stcomm(2);
 80017dc:	2002      	movs	r0, #2
 80017de:	f7ff f813 	bl	8000808 <ltc_stcomm>
	//end sending to mux to read temperatures

	wakeup_idle();
 80017e2:	f7fe fe9f 	bl	8000524 <wakeup_idle>
	ltc_adax(MD_7KHZ_3KHZ, 1); //doing GPIO all conversion
 80017e6:	2101      	movs	r1, #1
 80017e8:	2002      	movs	r0, #2
 80017ea:	f7ff f94b 	bl	8000a84 <ltc_adax>
	ltc_polladc();
 80017ee:	f7ff f989 	bl	8000b04 <ltc_polladc>
	if (!read_cell_temps((uint16_t*) read_auxreg)) // Set to read back all aux registers
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f7ff f848 	bl	8000888 <read_cell_temps>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d11f      	bne.n	800183e <readTemp+0x8e>
			{
		for (uint8_t dev_idx = 0; dev_idx < NUM_DEVICES; dev_idx++) {
 80017fe:	2300      	movs	r3, #0
 8001800:	75fb      	strb	r3, [r7, #23]
 8001802:	e019      	b.n	8001838 <readTemp+0x88>
			// Assuming data format is [cell voltage, cell voltage, ..., PEC, PEC]
			// PEC for each device is the last two bytes of its data segment
			uint16_t data = read_auxreg[dev_idx * NUM_AUX_GROUP];
 8001804:	7dfa      	ldrb	r2, [r7, #23]
 8001806:	4613      	mov	r3, r2
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	4413      	add	r3, r2
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	461a      	mov	r2, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	4413      	add	r3, r2
 8001814:	881b      	ldrh	r3, [r3, #0]
 8001816:	82bb      	strh	r3, [r7, #20]
			read_temp[dev_idx * NUM_THERM_PER_MOD + tempindex] = data;
 8001818:	7dfa      	ldrb	r2, [r7, #23]
 800181a:	4613      	mov	r3, r2
 800181c:	005b      	lsls	r3, r3, #1
 800181e:	4413      	add	r3, r2
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	461a      	mov	r2, r3
 8001824:	7bfb      	ldrb	r3, [r7, #15]
 8001826:	4413      	add	r3, r2
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	68ba      	ldr	r2, [r7, #8]
 800182c:	4413      	add	r3, r2
 800182e:	8aba      	ldrh	r2, [r7, #20]
 8001830:	801a      	strh	r2, [r3, #0]
		for (uint8_t dev_idx = 0; dev_idx < NUM_DEVICES; dev_idx++) {
 8001832:	7dfb      	ldrb	r3, [r7, #23]
 8001834:	3301      	adds	r3, #1
 8001836:	75fb      	strb	r3, [r7, #23]
 8001838:	7dfb      	ldrb	r3, [r7, #23]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d0e2      	beq.n	8001804 <readTemp+0x54>
			//getActualTemps(dev_idx, tempindex, (uint16_t*) read_temp, data); //+5 because vref is the last reg

		}
	}
}
 800183e:	bf00      	nop
 8001840:	3718      	adds	r7, #24
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	2000000c 	.word	0x2000000c

0800184c <cellSummary>:
#define CELL_HIGH_TEMP_WARNING		55
#define CELL_LOW_TEMP_WARNING		0

#define CELL_VOLT_IMBALANCE_WARNING	    500

void cellSummary(struct batteryModuleVoltage *batt){
 800184c:	b480      	push	{r7}
 800184e:	b085      	sub	sp, #20
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
	batt->cell_volt_highest = batt->cell_volt[0];
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	881a      	ldrh	r2, [r3, #0]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	815a      	strh	r2, [r3, #10]
	batt->cell_volt_lowest = batt->cell_volt[0];
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	881a      	ldrh	r2, [r3, #0]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	811a      	strh	r2, [r3, #8]
	batt->cell_temp_highest = batt->cell_temp[0];
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	881a      	ldrh	r2, [r3, #0]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	81da      	strh	r2, [r3, #14]
	batt->cell_temp_lowest = batt->cell_temp[0];
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	881a      	ldrh	r2, [r3, #0]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	819a      	strh	r2, [r3, #12]
	batt->pack_voltage = 0;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2200      	movs	r2, #0
 8001880:	821a      	strh	r2, [r3, #16]

	for(int i = 1; i < NUM_CELLS; i++){
 8001882:	2301      	movs	r3, #1
 8001884:	60fb      	str	r3, [r7, #12]
 8001886:	e032      	b.n	80018ee <cellSummary+0xa2>

		if(batt->cell_volt[i] > batt->cell_volt_highest){
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	4413      	add	r3, r2
 8001892:	881a      	ldrh	r2, [r3, #0]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	895b      	ldrh	r3, [r3, #10]
 8001898:	429a      	cmp	r2, r3
 800189a:	d907      	bls.n	80018ac <cellSummary+0x60>
			batt->cell_volt_highest = batt->cell_volt[i];
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	4413      	add	r3, r2
 80018a6:	881a      	ldrh	r2, [r3, #0]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	815a      	strh	r2, [r3, #10]
		}

		if(batt->cell_volt[i] < batt->cell_volt_lowest){
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	4413      	add	r3, r2
 80018b6:	881a      	ldrh	r2, [r3, #0]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	891b      	ldrh	r3, [r3, #8]
 80018bc:	429a      	cmp	r2, r3
 80018be:	d207      	bcs.n	80018d0 <cellSummary+0x84>
			batt->cell_volt_lowest = batt->cell_volt[i];
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	4413      	add	r3, r2
 80018ca:	881a      	ldrh	r2, [r3, #0]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	811a      	strh	r2, [r3, #8]
		}

		batt->pack_voltage += batt->cell_volt[i];
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	8a1a      	ldrh	r2, [r3, #16]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6819      	ldr	r1, [r3, #0]
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	005b      	lsls	r3, r3, #1
 80018dc:	440b      	add	r3, r1
 80018de:	881b      	ldrh	r3, [r3, #0]
 80018e0:	4413      	add	r3, r2
 80018e2:	b29a      	uxth	r2, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	821a      	strh	r2, [r3, #16]
	for(int i = 1; i < NUM_CELLS; i++){
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	3301      	adds	r3, #1
 80018ec:	60fb      	str	r3, [r7, #12]
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	2b0b      	cmp	r3, #11
 80018f2:	ddc9      	ble.n	8001888 <cellSummary+0x3c>
	}

	for(int i = 0; i < NUM_THERM_TOTAL; i++){
 80018f4:	2300      	movs	r3, #0
 80018f6:	60bb      	str	r3, [r7, #8]
 80018f8:	e026      	b.n	8001948 <cellSummary+0xfc>
		if(batt->cell_temp_highest < batt->cell_temp[i]){
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	89da      	ldrh	r2, [r3, #14]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6859      	ldr	r1, [r3, #4]
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	440b      	add	r3, r1
 8001908:	881b      	ldrh	r3, [r3, #0]
 800190a:	429a      	cmp	r2, r3
 800190c:	d207      	bcs.n	800191e <cellSummary+0xd2>
			batt->cell_temp_highest = batt->cell_temp[i];
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685a      	ldr	r2, [r3, #4]
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	4413      	add	r3, r2
 8001918:	881a      	ldrh	r2, [r3, #0]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	81da      	strh	r2, [r3, #14]
		}

		if(batt->cell_temp_lowest > batt->cell_temp[i]){
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	899a      	ldrh	r2, [r3, #12]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6859      	ldr	r1, [r3, #4]
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	440b      	add	r3, r1
 800192c:	881b      	ldrh	r3, [r3, #0]
 800192e:	429a      	cmp	r2, r3
 8001930:	d907      	bls.n	8001942 <cellSummary+0xf6>
			batt->cell_temp_lowest = batt->cell_temp[i];
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685a      	ldr	r2, [r3, #4]
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	4413      	add	r3, r2
 800193c:	881a      	ldrh	r2, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	819a      	strh	r2, [r3, #12]
	for(int i = 0; i < NUM_THERM_TOTAL; i++){
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	3301      	adds	r3, #1
 8001946:	60bb      	str	r3, [r7, #8]
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	2b0b      	cmp	r3, #11
 800194c:	ddd5      	ble.n	80018fa <cellSummary+0xae>
		}
	}

}
 800194e:	bf00      	nop
 8001950:	bf00      	nop
 8001952:	3714      	adds	r7, #20
 8001954:	46bd      	mov	sp, r7
 8001956:	bc80      	pop	{r7}
 8001958:	4770      	bx	lr

0800195a <faultAndWarning>:


void faultAndWarning(struct batteryModuleVoltage *batt, uint8_t *fault, uint8_t *warnings){
 800195a:	b480      	push	{r7}
 800195c:	b085      	sub	sp, #20
 800195e:	af00      	add	r7, sp, #0
 8001960:	60f8      	str	r0, [r7, #12]
 8001962:	60b9      	str	r1, [r7, #8]
 8001964:	607a      	str	r2, [r7, #4]
	if(batt->pack_voltage >= PACK_HIGH_VOLT_FAULT){
		*fault |= 0b10000000;
	}

	if(batt->pack_voltage <= PACK_LOW_VOLT_FAULT){
		*fault |= 0b01000000;
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800196e:	b2da      	uxtb	r2, r3
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	701a      	strb	r2, [r3, #0]
	}

	if(batt->cell_volt_lowest <= CELL_LOW_VOLT_FAULT){
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	891b      	ldrh	r3, [r3, #8]
 8001978:	f247 5230 	movw	r2, #30000	; 0x7530
 800197c:	4293      	cmp	r3, r2
 800197e:	d806      	bhi.n	800198e <faultAndWarning+0x34>
		*fault |= 0b00100000;
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	f043 0320 	orr.w	r3, r3, #32
 8001988:	b2da      	uxtb	r2, r3
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	701a      	strb	r2, [r3, #0]
	}

		if(batt->cell_volt_highest>= CELL_HIGH_VOLT_FAULT){
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	895b      	ldrh	r3, [r3, #10]
 8001992:	f24a 72f7 	movw	r2, #42999	; 0xa7f7
 8001996:	4293      	cmp	r3, r2
 8001998:	d906      	bls.n	80019a8 <faultAndWarning+0x4e>
		*fault |= 0b00010000;
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	f043 0310 	orr.w	r3, r3, #16
 80019a2:	b2da      	uxtb	r2, r3
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	701a      	strb	r2, [r3, #0]
	}

	if(batt->cell_temp_highest >= CELL_HIGH_TEMP_FAULT){
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	89db      	ldrh	r3, [r3, #14]
 80019ac:	2b3b      	cmp	r3, #59	; 0x3b
 80019ae:	d906      	bls.n	80019be <faultAndWarning+0x64>
		*fault |= 0b00001000;
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	f043 0308 	orr.w	r3, r3, #8
 80019b8:	b2da      	uxtb	r2, r3
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	701a      	strb	r2, [r3, #0]
	if(batt->pack_voltage >=  PACK_HIGH_VOLT_WARNING){
		*warnings |= 0b10000000;
	}

	if(batt->pack_voltage <= PACK_LOW_VOLT_WARNING){
		*warnings |= 0b01000000;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019c6:	b2da      	uxtb	r2, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	701a      	strb	r2, [r3, #0]
	}

	if(batt->cell_volt_lowest <= CELL_LOW_VOLT_WARNING){
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	891b      	ldrh	r3, [r3, #8]
 80019d0:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80019d4:	d806      	bhi.n	80019e4 <faultAndWarning+0x8a>
		*warnings |= 0b00100000;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	f043 0320 	orr.w	r3, r3, #32
 80019de:	b2da      	uxtb	r2, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	701a      	strb	r2, [r3, #0]
	}

	if(batt->cell_volt_highest >= CELL_HIGH_VOLT_WARNING){
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	895b      	ldrh	r3, [r3, #10]
 80019e8:	f24a 6203 	movw	r2, #42499	; 0xa603
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d906      	bls.n	80019fe <faultAndWarning+0xa4>
		*warnings |= 0b00010000;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	f043 0310 	orr.w	r3, r3, #16
 80019f8:	b2da      	uxtb	r2, r3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	701a      	strb	r2, [r3, #0]
	}

	if(batt->cell_temp_highest >= CELL_HIGH_TEMP_WARNING){
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	89db      	ldrh	r3, [r3, #14]
 8001a02:	2b36      	cmp	r3, #54	; 0x36
 8001a04:	d906      	bls.n	8001a14 <faultAndWarning+0xba>
		*warnings |= 0b00001000;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	f043 0308 	orr.w	r3, r3, #8
 8001a0e:	b2da      	uxtb	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	701a      	strb	r2, [r3, #0]
	}

	if(batt->cell_temp_lowest <= CELL_LOW_TEMP_WARNING){
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	899b      	ldrh	r3, [r3, #12]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d106      	bne.n	8001a2a <faultAndWarning+0xd0>
		*warnings |= 0b00000100;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	f043 0304 	orr.w	r3, r3, #4
 8001a24:	b2da      	uxtb	r2, r3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	701a      	strb	r2, [r3, #0]
	}
}
 8001a2a:	bf00      	nop
 8001a2c:	3714      	adds	r7, #20
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bc80      	pop	{r7}
 8001a32:	4770      	bx	lr

08001a34 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001a38:	4b17      	ldr	r3, [pc, #92]	; (8001a98 <MX_SPI1_Init+0x64>)
 8001a3a:	4a18      	ldr	r2, [pc, #96]	; (8001a9c <MX_SPI1_Init+0x68>)
 8001a3c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a3e:	4b16      	ldr	r3, [pc, #88]	; (8001a98 <MX_SPI1_Init+0x64>)
 8001a40:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a44:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a46:	4b14      	ldr	r3, [pc, #80]	; (8001a98 <MX_SPI1_Init+0x64>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a4c:	4b12      	ldr	r3, [pc, #72]	; (8001a98 <MX_SPI1_Init+0x64>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a52:	4b11      	ldr	r3, [pc, #68]	; (8001a98 <MX_SPI1_Init+0x64>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a58:	4b0f      	ldr	r3, [pc, #60]	; (8001a98 <MX_SPI1_Init+0x64>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a5e:	4b0e      	ldr	r3, [pc, #56]	; (8001a98 <MX_SPI1_Init+0x64>)
 8001a60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a64:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001a66:	4b0c      	ldr	r3, [pc, #48]	; (8001a98 <MX_SPI1_Init+0x64>)
 8001a68:	2228      	movs	r2, #40	; 0x28
 8001a6a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a6c:	4b0a      	ldr	r3, [pc, #40]	; (8001a98 <MX_SPI1_Init+0x64>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a72:	4b09      	ldr	r3, [pc, #36]	; (8001a98 <MX_SPI1_Init+0x64>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a78:	4b07      	ldr	r3, [pc, #28]	; (8001a98 <MX_SPI1_Init+0x64>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001a7e:	4b06      	ldr	r3, [pc, #24]	; (8001a98 <MX_SPI1_Init+0x64>)
 8001a80:	220a      	movs	r2, #10
 8001a82:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a84:	4804      	ldr	r0, [pc, #16]	; (8001a98 <MX_SPI1_Init+0x64>)
 8001a86:	f003 f85b 	bl	8004b40 <HAL_SPI_Init>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <MX_SPI1_Init+0x60>
  {
		Error_Handler();
 8001a90:	f7ff fe74 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a94:	bf00      	nop
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	200002dc 	.word	0x200002dc
 8001a9c:	40013000 	.word	0x40013000

08001aa0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b088      	sub	sp, #32
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa8:	f107 0310 	add.w	r3, r7, #16
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	605a      	str	r2, [r3, #4]
 8001ab2:	609a      	str	r2, [r3, #8]
 8001ab4:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a1b      	ldr	r2, [pc, #108]	; (8001b28 <HAL_SPI_MspInit+0x88>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d12f      	bne.n	8001b20 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ac0:	4b1a      	ldr	r3, [pc, #104]	; (8001b2c <HAL_SPI_MspInit+0x8c>)
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	4a19      	ldr	r2, [pc, #100]	; (8001b2c <HAL_SPI_MspInit+0x8c>)
 8001ac6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001aca:	6193      	str	r3, [r2, #24]
 8001acc:	4b17      	ldr	r3, [pc, #92]	; (8001b2c <HAL_SPI_MspInit+0x8c>)
 8001ace:	699b      	ldr	r3, [r3, #24]
 8001ad0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ad4:	60fb      	str	r3, [r7, #12]
 8001ad6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad8:	4b14      	ldr	r3, [pc, #80]	; (8001b2c <HAL_SPI_MspInit+0x8c>)
 8001ada:	699b      	ldr	r3, [r3, #24]
 8001adc:	4a13      	ldr	r2, [pc, #76]	; (8001b2c <HAL_SPI_MspInit+0x8c>)
 8001ade:	f043 0304 	orr.w	r3, r3, #4
 8001ae2:	6193      	str	r3, [r2, #24]
 8001ae4:	4b11      	ldr	r3, [pc, #68]	; (8001b2c <HAL_SPI_MspInit+0x8c>)
 8001ae6:	699b      	ldr	r3, [r3, #24]
 8001ae8:	f003 0304 	and.w	r3, r3, #4
 8001aec:	60bb      	str	r3, [r7, #8]
 8001aee:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001af0:	23a0      	movs	r3, #160	; 0xa0
 8001af2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af4:	2302      	movs	r3, #2
 8001af6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001af8:	2303      	movs	r3, #3
 8001afa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001afc:	f107 0310 	add.w	r3, r7, #16
 8001b00:	4619      	mov	r1, r3
 8001b02:	480b      	ldr	r0, [pc, #44]	; (8001b30 <HAL_SPI_MspInit+0x90>)
 8001b04:	f000 ff20 	bl	8002948 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b08:	2340      	movs	r3, #64	; 0x40
 8001b0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b10:	2300      	movs	r3, #0
 8001b12:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b14:	f107 0310 	add.w	r3, r7, #16
 8001b18:	4619      	mov	r1, r3
 8001b1a:	4805      	ldr	r0, [pc, #20]	; (8001b30 <HAL_SPI_MspInit+0x90>)
 8001b1c:	f000 ff14 	bl	8002948 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001b20:	bf00      	nop
 8001b22:	3720      	adds	r7, #32
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	40013000 	.word	0x40013000
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	40010800 	.word	0x40010800

08001b34 <LTC_nCS_High>:
  /* USER CODE END SPI1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void LTC_nCS_High(void) {
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTC_nCS_GPIO_Port, LTC_nCS_Pin, GPIO_PIN_SET); //Pull CS high
 8001b38:	2201      	movs	r2, #1
 8001b3a:	2110      	movs	r1, #16
 8001b3c:	4802      	ldr	r0, [pc, #8]	; (8001b48 <LTC_nCS_High+0x14>)
 8001b3e:	f001 f887 	bl	8002c50 <HAL_GPIO_WritePin>
}
 8001b42:	bf00      	nop
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	40010800 	.word	0x40010800

08001b4c <LTC_nCS_Low>:
/* Pull nCS line to SPI1 LOW */
void LTC_nCS_Low(void) {
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTC_nCS_GPIO_Port, LTC_nCS_Pin, GPIO_PIN_RESET); //Pull CS high
 8001b50:	2200      	movs	r2, #0
 8001b52:	2110      	movs	r1, #16
 8001b54:	4802      	ldr	r0, [pc, #8]	; (8001b60 <LTC_nCS_Low+0x14>)
 8001b56:	f001 f87b 	bl	8002c50 <HAL_GPIO_WritePin>
}
 8001b5a:	bf00      	nop
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40010800 	.word	0x40010800

08001b64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b6a:	4b15      	ldr	r3, [pc, #84]	; (8001bc0 <HAL_MspInit+0x5c>)
 8001b6c:	699b      	ldr	r3, [r3, #24]
 8001b6e:	4a14      	ldr	r2, [pc, #80]	; (8001bc0 <HAL_MspInit+0x5c>)
 8001b70:	f043 0301 	orr.w	r3, r3, #1
 8001b74:	6193      	str	r3, [r2, #24]
 8001b76:	4b12      	ldr	r3, [pc, #72]	; (8001bc0 <HAL_MspInit+0x5c>)
 8001b78:	699b      	ldr	r3, [r3, #24]
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	60bb      	str	r3, [r7, #8]
 8001b80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b82:	4b0f      	ldr	r3, [pc, #60]	; (8001bc0 <HAL_MspInit+0x5c>)
 8001b84:	69db      	ldr	r3, [r3, #28]
 8001b86:	4a0e      	ldr	r2, [pc, #56]	; (8001bc0 <HAL_MspInit+0x5c>)
 8001b88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b8c:	61d3      	str	r3, [r2, #28]
 8001b8e:	4b0c      	ldr	r3, [pc, #48]	; (8001bc0 <HAL_MspInit+0x5c>)
 8001b90:	69db      	ldr	r3, [r3, #28]
 8001b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b96:	607b      	str	r3, [r7, #4]
 8001b98:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001b9a:	4b0a      	ldr	r3, [pc, #40]	; (8001bc4 <HAL_MspInit+0x60>)
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	60fb      	str	r3, [r7, #12]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001ba6:	60fb      	str	r3, [r7, #12]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001bae:	60fb      	str	r3, [r7, #12]
 8001bb0:	4a04      	ldr	r2, [pc, #16]	; (8001bc4 <HAL_MspInit+0x60>)
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bb6:	bf00      	nop
 8001bb8:	3714      	adds	r7, #20
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bc80      	pop	{r7}
 8001bbe:	4770      	bx	lr
 8001bc0:	40021000 	.word	0x40021000
 8001bc4:	40010000 	.word	0x40010000

08001bc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bcc:	e7fe      	b.n	8001bcc <NMI_Handler+0x4>

08001bce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bd2:	e7fe      	b.n	8001bd2 <HardFault_Handler+0x4>

08001bd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bd8:	e7fe      	b.n	8001bd8 <MemManage_Handler+0x4>

08001bda <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bde:	e7fe      	b.n	8001bde <BusFault_Handler+0x4>

08001be0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001be4:	e7fe      	b.n	8001be4 <UsageFault_Handler+0x4>

08001be6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001be6:	b480      	push	{r7}
 8001be8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bea:	bf00      	nop
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bc80      	pop	{r7}
 8001bf0:	4770      	bx	lr

08001bf2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bf6:	bf00      	nop
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bc80      	pop	{r7}
 8001bfc:	4770      	bx	lr

08001bfe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c02:	bf00      	nop
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bc80      	pop	{r7}
 8001c08:	4770      	bx	lr

08001c0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c0e:	f000 f909 	bl	8001e24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c12:	bf00      	nop
 8001c14:	bd80      	pop	{r7, pc}
	...

08001c18 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001c1c:	4802      	ldr	r0, [pc, #8]	; (8001c28 <OTG_FS_IRQHandler+0x10>)
 8001c1e:	f001 f987 	bl	8002f30 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001c22:	bf00      	nop
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	2000104c 	.word	0x2000104c

08001c2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b086      	sub	sp, #24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c34:	4a14      	ldr	r2, [pc, #80]	; (8001c88 <_sbrk+0x5c>)
 8001c36:	4b15      	ldr	r3, [pc, #84]	; (8001c8c <_sbrk+0x60>)
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c40:	4b13      	ldr	r3, [pc, #76]	; (8001c90 <_sbrk+0x64>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d102      	bne.n	8001c4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c48:	4b11      	ldr	r3, [pc, #68]	; (8001c90 <_sbrk+0x64>)
 8001c4a:	4a12      	ldr	r2, [pc, #72]	; (8001c94 <_sbrk+0x68>)
 8001c4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c4e:	4b10      	ldr	r3, [pc, #64]	; (8001c90 <_sbrk+0x64>)
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4413      	add	r3, r2
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d207      	bcs.n	8001c6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c5c:	f007 f94c 	bl	8008ef8 <__errno>
 8001c60:	4603      	mov	r3, r0
 8001c62:	220c      	movs	r2, #12
 8001c64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c66:	f04f 33ff 	mov.w	r3, #4294967295
 8001c6a:	e009      	b.n	8001c80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c6c:	4b08      	ldr	r3, [pc, #32]	; (8001c90 <_sbrk+0x64>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c72:	4b07      	ldr	r3, [pc, #28]	; (8001c90 <_sbrk+0x64>)
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4413      	add	r3, r2
 8001c7a:	4a05      	ldr	r2, [pc, #20]	; (8001c90 <_sbrk+0x64>)
 8001c7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3718      	adds	r7, #24
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	20010000 	.word	0x20010000
 8001c8c:	00000400 	.word	0x00000400
 8001c90:	20000334 	.word	0x20000334
 8001c94:	200018b8 	.word	0x200018b8

08001c98 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c9c:	bf00      	nop
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bc80      	pop	{r7}
 8001ca2:	4770      	bx	lr

08001ca4 <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001caa:	463b      	mov	r3, r7
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001cb2:	4b15      	ldr	r3, [pc, #84]	; (8001d08 <MX_TIM7_Init+0x64>)
 8001cb4:	4a15      	ldr	r2, [pc, #84]	; (8001d0c <MX_TIM7_Init+0x68>)
 8001cb6:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8001cb8:	4b13      	ldr	r3, [pc, #76]	; (8001d08 <MX_TIM7_Init+0x64>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cbe:	4b12      	ldr	r3, [pc, #72]	; (8001d08 <MX_TIM7_Init+0x64>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8001cc4:	4b10      	ldr	r3, [pc, #64]	; (8001d08 <MX_TIM7_Init+0x64>)
 8001cc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cca:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ccc:	4b0e      	ldr	r3, [pc, #56]	; (8001d08 <MX_TIM7_Init+0x64>)
 8001cce:	2280      	movs	r2, #128	; 0x80
 8001cd0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001cd2:	480d      	ldr	r0, [pc, #52]	; (8001d08 <MX_TIM7_Init+0x64>)
 8001cd4:	f003 fcbc 	bl	8005650 <HAL_TIM_Base_Init>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001cde:	f7ff fd4d 	bl	800177c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001cea:	463b      	mov	r3, r7
 8001cec:	4619      	mov	r1, r3
 8001cee:	4806      	ldr	r0, [pc, #24]	; (8001d08 <MX_TIM7_Init+0x64>)
 8001cf0:	f003 fd6a 	bl	80057c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001cfa:	f7ff fd3f 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001cfe:	bf00      	nop
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	20000338 	.word	0x20000338
 8001d0c:	40001400 	.word	0x40001400

08001d10 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b085      	sub	sp, #20
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a09      	ldr	r2, [pc, #36]	; (8001d44 <HAL_TIM_Base_MspInit+0x34>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d10b      	bne.n	8001d3a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001d22:	4b09      	ldr	r3, [pc, #36]	; (8001d48 <HAL_TIM_Base_MspInit+0x38>)
 8001d24:	69db      	ldr	r3, [r3, #28]
 8001d26:	4a08      	ldr	r2, [pc, #32]	; (8001d48 <HAL_TIM_Base_MspInit+0x38>)
 8001d28:	f043 0320 	orr.w	r3, r3, #32
 8001d2c:	61d3      	str	r3, [r2, #28]
 8001d2e:	4b06      	ldr	r3, [pc, #24]	; (8001d48 <HAL_TIM_Base_MspInit+0x38>)
 8001d30:	69db      	ldr	r3, [r3, #28]
 8001d32:	f003 0320 	and.w	r3, r3, #32
 8001d36:	60fb      	str	r3, [r7, #12]
 8001d38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8001d3a:	bf00      	nop
 8001d3c:	3714      	adds	r7, #20
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bc80      	pop	{r7}
 8001d42:	4770      	bx	lr
 8001d44:	40001400 	.word	0x40001400
 8001d48:	40021000 	.word	0x40021000

08001d4c <Reset_Handler>:
 8001d4c:	f7ff ffa4 	bl	8001c98 <SystemInit>
 8001d50:	480b      	ldr	r0, [pc, #44]	; (8001d80 <LoopFillZerobss+0xe>)
 8001d52:	490c      	ldr	r1, [pc, #48]	; (8001d84 <LoopFillZerobss+0x12>)
 8001d54:	4a0c      	ldr	r2, [pc, #48]	; (8001d88 <LoopFillZerobss+0x16>)
 8001d56:	2300      	movs	r3, #0
 8001d58:	e002      	b.n	8001d60 <LoopCopyDataInit>

08001d5a <CopyDataInit>:
 8001d5a:	58d4      	ldr	r4, [r2, r3]
 8001d5c:	50c4      	str	r4, [r0, r3]
 8001d5e:	3304      	adds	r3, #4

08001d60 <LoopCopyDataInit>:
 8001d60:	18c4      	adds	r4, r0, r3
 8001d62:	428c      	cmp	r4, r1
 8001d64:	d3f9      	bcc.n	8001d5a <CopyDataInit>
 8001d66:	4a09      	ldr	r2, [pc, #36]	; (8001d8c <LoopFillZerobss+0x1a>)
 8001d68:	4c09      	ldr	r4, [pc, #36]	; (8001d90 <LoopFillZerobss+0x1e>)
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	e001      	b.n	8001d72 <LoopFillZerobss>

08001d6e <FillZerobss>:
 8001d6e:	6013      	str	r3, [r2, #0]
 8001d70:	3204      	adds	r2, #4

08001d72 <LoopFillZerobss>:
 8001d72:	42a2      	cmp	r2, r4
 8001d74:	d3fb      	bcc.n	8001d6e <FillZerobss>
 8001d76:	f007 f8c5 	bl	8008f04 <__libc_init_array>
 8001d7a:	f7ff fb3b 	bl	80013f4 <main>
 8001d7e:	4770      	bx	lr
 8001d80:	20000000 	.word	0x20000000
 8001d84:	20000238 	.word	0x20000238
 8001d88:	080094a8 	.word	0x080094a8
 8001d8c:	20000238 	.word	0x20000238
 8001d90:	200018b8 	.word	0x200018b8

08001d94 <ADC1_2_IRQHandler>:
 8001d94:	e7fe      	b.n	8001d94 <ADC1_2_IRQHandler>
	...

08001d98 <HAL_Init>:
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	4b08      	ldr	r3, [pc, #32]	; (8001dc0 <HAL_Init+0x28>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a07      	ldr	r2, [pc, #28]	; (8001dc0 <HAL_Init+0x28>)
 8001da2:	f043 0310 	orr.w	r3, r3, #16
 8001da6:	6013      	str	r3, [r2, #0]
 8001da8:	2003      	movs	r0, #3
 8001daa:	f000 fd8b 	bl	80028c4 <HAL_NVIC_SetPriorityGrouping>
 8001dae:	200f      	movs	r0, #15
 8001db0:	f000 f808 	bl	8001dc4 <HAL_InitTick>
 8001db4:	f7ff fed6 	bl	8001b64 <HAL_MspInit>
 8001db8:	2300      	movs	r3, #0
 8001dba:	4618      	mov	r0, r3
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	40022000 	.word	0x40022000

08001dc4 <HAL_InitTick>:
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	4b12      	ldr	r3, [pc, #72]	; (8001e18 <HAL_InitTick+0x54>)
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	4b12      	ldr	r3, [pc, #72]	; (8001e1c <HAL_InitTick+0x58>)
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dda:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de2:	4618      	mov	r0, r3
 8001de4:	f000 fda3 	bl	800292e <HAL_SYSTICK_Config>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <HAL_InitTick+0x2e>
 8001dee:	2301      	movs	r3, #1
 8001df0:	e00e      	b.n	8001e10 <HAL_InitTick+0x4c>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2b0f      	cmp	r3, #15
 8001df6:	d80a      	bhi.n	8001e0e <HAL_InitTick+0x4a>
 8001df8:	2200      	movs	r2, #0
 8001dfa:	6879      	ldr	r1, [r7, #4]
 8001dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8001e00:	f000 fd6b 	bl	80028da <HAL_NVIC_SetPriority>
 8001e04:	4a06      	ldr	r2, [pc, #24]	; (8001e20 <HAL_InitTick+0x5c>)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6013      	str	r3, [r2, #0]
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	e000      	b.n	8001e10 <HAL_InitTick+0x4c>
 8001e0e:	2301      	movs	r3, #1
 8001e10:	4618      	mov	r0, r3
 8001e12:	3708      	adds	r7, #8
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	2000006c 	.word	0x2000006c
 8001e1c:	20000074 	.word	0x20000074
 8001e20:	20000070 	.word	0x20000070

08001e24 <HAL_IncTick>:
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	4b05      	ldr	r3, [pc, #20]	; (8001e40 <HAL_IncTick+0x1c>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	4b05      	ldr	r3, [pc, #20]	; (8001e44 <HAL_IncTick+0x20>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4413      	add	r3, r2
 8001e34:	4a03      	ldr	r2, [pc, #12]	; (8001e44 <HAL_IncTick+0x20>)
 8001e36:	6013      	str	r3, [r2, #0]
 8001e38:	bf00      	nop
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bc80      	pop	{r7}
 8001e3e:	4770      	bx	lr
 8001e40:	20000074 	.word	0x20000074
 8001e44:	20000380 	.word	0x20000380

08001e48 <HAL_GetTick>:
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	4b02      	ldr	r3, [pc, #8]	; (8001e58 <HAL_GetTick+0x10>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4618      	mov	r0, r3
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bc80      	pop	{r7}
 8001e56:	4770      	bx	lr
 8001e58:	20000380 	.word	0x20000380

08001e5c <HAL_Delay>:
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	f7ff fff0 	bl	8001e48 <HAL_GetTick>
 8001e68:	60b8      	str	r0, [r7, #8]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	60fb      	str	r3, [r7, #12]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e74:	d005      	beq.n	8001e82 <HAL_Delay+0x26>
 8001e76:	4b0a      	ldr	r3, [pc, #40]	; (8001ea0 <HAL_Delay+0x44>)
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	4413      	add	r3, r2
 8001e80:	60fb      	str	r3, [r7, #12]
 8001e82:	bf00      	nop
 8001e84:	f7ff ffe0 	bl	8001e48 <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	68fa      	ldr	r2, [r7, #12]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d8f7      	bhi.n	8001e84 <HAL_Delay+0x28>
 8001e94:	bf00      	nop
 8001e96:	bf00      	nop
 8001e98:	3710      	adds	r7, #16
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	20000074 	.word	0x20000074

08001ea4 <HAL_ADC_Init>:
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b086      	sub	sp, #24
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	2300      	movs	r3, #0
 8001eae:	75fb      	strb	r3, [r7, #23]
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	613b      	str	r3, [r7, #16]
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	60bb      	str	r3, [r7, #8]
 8001eb8:	2300      	movs	r3, #0
 8001eba:	60fb      	str	r3, [r7, #12]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d101      	bne.n	8001ec6 <HAL_ADC_Init+0x22>
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e0be      	b.n	8002044 <HAL_ADC_Init+0x1a0>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d109      	bne.n	8001ee8 <HAL_ADC_Init+0x44>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	62da      	str	r2, [r3, #44]	; 0x2c
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f7fe ff02 	bl	8000cec <HAL_ADC_MspInit>
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f000 f9ab 	bl	8002244 <ADC_ConversionStop_Disable>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	75fb      	strb	r3, [r7, #23]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef6:	f003 0310 	and.w	r3, r3, #16
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	f040 8099 	bne.w	8002032 <HAL_ADC_Init+0x18e>
 8001f00:	7dfb      	ldrb	r3, [r7, #23]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	f040 8095 	bne.w	8002032 <HAL_ADC_Init+0x18e>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f0c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f10:	f023 0302 	bic.w	r3, r3, #2
 8001f14:	f043 0202 	orr.w	r2, r3, #2
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	629a      	str	r2, [r3, #40]	; 0x28
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685a      	ldr	r2, [r3, #4]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	69db      	ldr	r3, [r3, #28]
 8001f24:	431a      	orrs	r2, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	7b1b      	ldrb	r3, [r3, #12]
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	68ba      	ldr	r2, [r7, #8]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	60bb      	str	r3, [r7, #8]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f3c:	d003      	beq.n	8001f46 <HAL_ADC_Init+0xa2>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d102      	bne.n	8001f4c <HAL_ADC_Init+0xa8>
 8001f46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f4a:	e000      	b.n	8001f4e <HAL_ADC_Init+0xaa>
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	693a      	ldr	r2, [r7, #16]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	613b      	str	r3, [r7, #16]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	7d1b      	ldrb	r3, [r3, #20]
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d119      	bne.n	8001f90 <HAL_ADC_Init+0xec>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	7b1b      	ldrb	r3, [r3, #12]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d109      	bne.n	8001f78 <HAL_ADC_Init+0xd4>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	699b      	ldr	r3, [r3, #24]
 8001f68:	3b01      	subs	r3, #1
 8001f6a:	035a      	lsls	r2, r3, #13
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f74:	613b      	str	r3, [r7, #16]
 8001f76:	e00b      	b.n	8001f90 <HAL_ADC_Init+0xec>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f7c:	f043 0220 	orr.w	r2, r3, #32
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	629a      	str	r2, [r3, #40]	; 0x28
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f88:	f043 0201 	orr.w	r2, r3, #1
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	693a      	ldr	r2, [r7, #16]
 8001fa0:	430a      	orrs	r2, r1
 8001fa2:	605a      	str	r2, [r3, #4]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	689a      	ldr	r2, [r3, #8]
 8001faa:	4b28      	ldr	r3, [pc, #160]	; (800204c <HAL_ADC_Init+0x1a8>)
 8001fac:	4013      	ands	r3, r2
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	6812      	ldr	r2, [r2, #0]
 8001fb2:	68b9      	ldr	r1, [r7, #8]
 8001fb4:	430b      	orrs	r3, r1
 8001fb6:	6093      	str	r3, [r2, #8]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fc0:	d003      	beq.n	8001fca <HAL_ADC_Init+0x126>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d104      	bne.n	8001fd4 <HAL_ADC_Init+0x130>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	3b01      	subs	r3, #1
 8001fd0:	051b      	lsls	r3, r3, #20
 8001fd2:	60fb      	str	r3, [r7, #12]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fda:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	430a      	orrs	r2, r1
 8001fe6:	62da      	str	r2, [r3, #44]	; 0x2c
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	689a      	ldr	r2, [r3, #8]
 8001fee:	4b18      	ldr	r3, [pc, #96]	; (8002050 <HAL_ADC_Init+0x1ac>)
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	68ba      	ldr	r2, [r7, #8]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d10b      	bne.n	8002010 <HAL_ADC_Init+0x16c>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	62da      	str	r2, [r3, #44]	; 0x2c
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002002:	f023 0303 	bic.w	r3, r3, #3
 8002006:	f043 0201 	orr.w	r2, r3, #1
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	629a      	str	r2, [r3, #40]	; 0x28
 800200e:	e018      	b.n	8002042 <HAL_ADC_Init+0x19e>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002014:	f023 0312 	bic.w	r3, r3, #18
 8002018:	f043 0210 	orr.w	r2, r3, #16
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	629a      	str	r2, [r3, #40]	; 0x28
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002024:	f043 0201 	orr.w	r2, r3, #1
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	62da      	str	r2, [r3, #44]	; 0x2c
 800202c:	2301      	movs	r3, #1
 800202e:	75fb      	strb	r3, [r7, #23]
 8002030:	e007      	b.n	8002042 <HAL_ADC_Init+0x19e>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002036:	f043 0210 	orr.w	r2, r3, #16
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	629a      	str	r2, [r3, #40]	; 0x28
 800203e:	2301      	movs	r3, #1
 8002040:	75fb      	strb	r3, [r7, #23]
 8002042:	7dfb      	ldrb	r3, [r7, #23]
 8002044:	4618      	mov	r0, r3
 8002046:	3718      	adds	r7, #24
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	ffe1f7fd 	.word	0xffe1f7fd
 8002050:	ff1f0efe 	.word	0xff1f0efe

08002054 <HAL_ADC_ConfigChannel>:
 8002054:	b480      	push	{r7}
 8002056:	b085      	sub	sp, #20
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
 800205e:	2300      	movs	r3, #0
 8002060:	73fb      	strb	r3, [r7, #15]
 8002062:	2300      	movs	r3, #0
 8002064:	60bb      	str	r3, [r7, #8]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800206c:	2b01      	cmp	r3, #1
 800206e:	d101      	bne.n	8002074 <HAL_ADC_ConfigChannel+0x20>
 8002070:	2302      	movs	r3, #2
 8002072:	e0dc      	b.n	800222e <HAL_ADC_ConfigChannel+0x1da>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2201      	movs	r2, #1
 8002078:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	2b06      	cmp	r3, #6
 8002082:	d81c      	bhi.n	80020be <HAL_ADC_ConfigChannel+0x6a>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685a      	ldr	r2, [r3, #4]
 800208e:	4613      	mov	r3, r2
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	4413      	add	r3, r2
 8002094:	3b05      	subs	r3, #5
 8002096:	221f      	movs	r2, #31
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	43db      	mvns	r3, r3
 800209e:	4019      	ands	r1, r3
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	6818      	ldr	r0, [r3, #0]
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685a      	ldr	r2, [r3, #4]
 80020a8:	4613      	mov	r3, r2
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	4413      	add	r3, r2
 80020ae:	3b05      	subs	r3, #5
 80020b0:	fa00 f203 	lsl.w	r2, r0, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	430a      	orrs	r2, r1
 80020ba:	635a      	str	r2, [r3, #52]	; 0x34
 80020bc:	e03c      	b.n	8002138 <HAL_ADC_ConfigChannel+0xe4>
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	2b0c      	cmp	r3, #12
 80020c4:	d81c      	bhi.n	8002100 <HAL_ADC_ConfigChannel+0xac>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685a      	ldr	r2, [r3, #4]
 80020d0:	4613      	mov	r3, r2
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	4413      	add	r3, r2
 80020d6:	3b23      	subs	r3, #35	; 0x23
 80020d8:	221f      	movs	r2, #31
 80020da:	fa02 f303 	lsl.w	r3, r2, r3
 80020de:	43db      	mvns	r3, r3
 80020e0:	4019      	ands	r1, r3
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	6818      	ldr	r0, [r3, #0]
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	685a      	ldr	r2, [r3, #4]
 80020ea:	4613      	mov	r3, r2
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	4413      	add	r3, r2
 80020f0:	3b23      	subs	r3, #35	; 0x23
 80020f2:	fa00 f203 	lsl.w	r2, r0, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	430a      	orrs	r2, r1
 80020fc:	631a      	str	r2, [r3, #48]	; 0x30
 80020fe:	e01b      	b.n	8002138 <HAL_ADC_ConfigChannel+0xe4>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	685a      	ldr	r2, [r3, #4]
 800210a:	4613      	mov	r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	4413      	add	r3, r2
 8002110:	3b41      	subs	r3, #65	; 0x41
 8002112:	221f      	movs	r2, #31
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	43db      	mvns	r3, r3
 800211a:	4019      	ands	r1, r3
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	6818      	ldr	r0, [r3, #0]
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685a      	ldr	r2, [r3, #4]
 8002124:	4613      	mov	r3, r2
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	4413      	add	r3, r2
 800212a:	3b41      	subs	r3, #65	; 0x41
 800212c:	fa00 f203 	lsl.w	r2, r0, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	430a      	orrs	r2, r1
 8002136:	62da      	str	r2, [r3, #44]	; 0x2c
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2b09      	cmp	r3, #9
 800213e:	d91c      	bls.n	800217a <HAL_ADC_ConfigChannel+0x126>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	68d9      	ldr	r1, [r3, #12]
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	4613      	mov	r3, r2
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	4413      	add	r3, r2
 8002150:	3b1e      	subs	r3, #30
 8002152:	2207      	movs	r2, #7
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	43db      	mvns	r3, r3
 800215a:	4019      	ands	r1, r3
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	6898      	ldr	r0, [r3, #8]
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	4613      	mov	r3, r2
 8002166:	005b      	lsls	r3, r3, #1
 8002168:	4413      	add	r3, r2
 800216a:	3b1e      	subs	r3, #30
 800216c:	fa00 f203 	lsl.w	r2, r0, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	430a      	orrs	r2, r1
 8002176:	60da      	str	r2, [r3, #12]
 8002178:	e019      	b.n	80021ae <HAL_ADC_ConfigChannel+0x15a>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	6919      	ldr	r1, [r3, #16]
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	4613      	mov	r3, r2
 8002186:	005b      	lsls	r3, r3, #1
 8002188:	4413      	add	r3, r2
 800218a:	2207      	movs	r2, #7
 800218c:	fa02 f303 	lsl.w	r3, r2, r3
 8002190:	43db      	mvns	r3, r3
 8002192:	4019      	ands	r1, r3
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	6898      	ldr	r0, [r3, #8]
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	4613      	mov	r3, r2
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	4413      	add	r3, r2
 80021a2:	fa00 f203 	lsl.w	r2, r0, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	430a      	orrs	r2, r1
 80021ac:	611a      	str	r2, [r3, #16]
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2b10      	cmp	r3, #16
 80021b4:	d003      	beq.n	80021be <HAL_ADC_ConfigChannel+0x16a>
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	2b11      	cmp	r3, #17
 80021bc:	d132      	bne.n	8002224 <HAL_ADC_ConfigChannel+0x1d0>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a1d      	ldr	r2, [pc, #116]	; (8002238 <HAL_ADC_ConfigChannel+0x1e4>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d125      	bne.n	8002214 <HAL_ADC_ConfigChannel+0x1c0>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d126      	bne.n	8002224 <HAL_ADC_ConfigChannel+0x1d0>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	689a      	ldr	r2, [r3, #8]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80021e4:	609a      	str	r2, [r3, #8]
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2b10      	cmp	r3, #16
 80021ec:	d11a      	bne.n	8002224 <HAL_ADC_ConfigChannel+0x1d0>
 80021ee:	4b13      	ldr	r3, [pc, #76]	; (800223c <HAL_ADC_ConfigChannel+0x1e8>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a13      	ldr	r2, [pc, #76]	; (8002240 <HAL_ADC_ConfigChannel+0x1ec>)
 80021f4:	fba2 2303 	umull	r2, r3, r2, r3
 80021f8:	0c9a      	lsrs	r2, r3, #18
 80021fa:	4613      	mov	r3, r2
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	4413      	add	r3, r2
 8002200:	005b      	lsls	r3, r3, #1
 8002202:	60bb      	str	r3, [r7, #8]
 8002204:	e002      	b.n	800220c <HAL_ADC_ConfigChannel+0x1b8>
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	3b01      	subs	r3, #1
 800220a:	60bb      	str	r3, [r7, #8]
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d1f9      	bne.n	8002206 <HAL_ADC_ConfigChannel+0x1b2>
 8002212:	e007      	b.n	8002224 <HAL_ADC_ConfigChannel+0x1d0>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002218:	f043 0220 	orr.w	r2, r3, #32
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	629a      	str	r2, [r3, #40]	; 0x28
 8002220:	2301      	movs	r3, #1
 8002222:	73fb      	strb	r3, [r7, #15]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800222c:	7bfb      	ldrb	r3, [r7, #15]
 800222e:	4618      	mov	r0, r3
 8002230:	3714      	adds	r7, #20
 8002232:	46bd      	mov	sp, r7
 8002234:	bc80      	pop	{r7}
 8002236:	4770      	bx	lr
 8002238:	40012400 	.word	0x40012400
 800223c:	2000006c 	.word	0x2000006c
 8002240:	431bde83 	.word	0x431bde83

08002244 <ADC_ConversionStop_Disable>:
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	2300      	movs	r3, #0
 800224e:	60fb      	str	r3, [r7, #12]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f003 0301 	and.w	r3, r3, #1
 800225a:	2b01      	cmp	r3, #1
 800225c:	d12e      	bne.n	80022bc <ADC_ConversionStop_Disable+0x78>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	689a      	ldr	r2, [r3, #8]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f022 0201 	bic.w	r2, r2, #1
 800226c:	609a      	str	r2, [r3, #8]
 800226e:	f7ff fdeb 	bl	8001e48 <HAL_GetTick>
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	e01b      	b.n	80022ae <ADC_ConversionStop_Disable+0x6a>
 8002276:	f7ff fde7 	bl	8001e48 <HAL_GetTick>
 800227a:	4602      	mov	r2, r0
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	2b02      	cmp	r3, #2
 8002282:	d914      	bls.n	80022ae <ADC_ConversionStop_Disable+0x6a>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	f003 0301 	and.w	r3, r3, #1
 800228e:	2b01      	cmp	r3, #1
 8002290:	d10d      	bne.n	80022ae <ADC_ConversionStop_Disable+0x6a>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002296:	f043 0210 	orr.w	r2, r3, #16
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	629a      	str	r2, [r3, #40]	; 0x28
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a2:	f043 0201 	orr.w	r2, r3, #1
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	62da      	str	r2, [r3, #44]	; 0x2c
 80022aa:	2301      	movs	r3, #1
 80022ac:	e007      	b.n	80022be <ADC_ConversionStop_Disable+0x7a>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	f003 0301 	and.w	r3, r3, #1
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d0dc      	beq.n	8002276 <ADC_ConversionStop_Disable+0x32>
 80022bc:	2300      	movs	r3, #0
 80022be:	4618      	mov	r0, r3
 80022c0:	3710      	adds	r7, #16
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <HAL_CAN_Init>:
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b084      	sub	sp, #16
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d101      	bne.n	80022d8 <HAL_CAN_Init+0x12>
 80022d4:	2301      	movs	r3, #1
 80022d6:	e0ed      	b.n	80024b4 <HAL_CAN_Init+0x1ee>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d102      	bne.n	80022ea <HAL_CAN_Init+0x24>
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f7fe fd9d 	bl	8000e24 <HAL_CAN_MspInit>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f042 0201 	orr.w	r2, r2, #1
 80022f8:	601a      	str	r2, [r3, #0]
 80022fa:	f7ff fda5 	bl	8001e48 <HAL_GetTick>
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	e012      	b.n	8002328 <HAL_CAN_Init+0x62>
 8002302:	f7ff fda1 	bl	8001e48 <HAL_GetTick>
 8002306:	4602      	mov	r2, r0
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	2b0a      	cmp	r3, #10
 800230e:	d90b      	bls.n	8002328 <HAL_CAN_Init+0x62>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002314:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	625a      	str	r2, [r3, #36]	; 0x24
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2205      	movs	r2, #5
 8002320:	f883 2020 	strb.w	r2, [r3, #32]
 8002324:	2301      	movs	r3, #1
 8002326:	e0c5      	b.n	80024b4 <HAL_CAN_Init+0x1ee>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f003 0301 	and.w	r3, r3, #1
 8002332:	2b00      	cmp	r3, #0
 8002334:	d0e5      	beq.n	8002302 <HAL_CAN_Init+0x3c>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f022 0202 	bic.w	r2, r2, #2
 8002344:	601a      	str	r2, [r3, #0]
 8002346:	f7ff fd7f 	bl	8001e48 <HAL_GetTick>
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	e012      	b.n	8002374 <HAL_CAN_Init+0xae>
 800234e:	f7ff fd7b 	bl	8001e48 <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	2b0a      	cmp	r3, #10
 800235a:	d90b      	bls.n	8002374 <HAL_CAN_Init+0xae>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002360:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	625a      	str	r2, [r3, #36]	; 0x24
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2205      	movs	r2, #5
 800236c:	f883 2020 	strb.w	r2, [r3, #32]
 8002370:	2301      	movs	r3, #1
 8002372:	e09f      	b.n	80024b4 <HAL_CAN_Init+0x1ee>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f003 0302 	and.w	r3, r3, #2
 800237e:	2b00      	cmp	r3, #0
 8002380:	d1e5      	bne.n	800234e <HAL_CAN_Init+0x88>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	7e1b      	ldrb	r3, [r3, #24]
 8002386:	2b01      	cmp	r3, #1
 8002388:	d108      	bne.n	800239c <HAL_CAN_Init+0xd6>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002398:	601a      	str	r2, [r3, #0]
 800239a:	e007      	b.n	80023ac <HAL_CAN_Init+0xe6>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023aa:	601a      	str	r2, [r3, #0]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	7e5b      	ldrb	r3, [r3, #25]
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d108      	bne.n	80023c6 <HAL_CAN_Init+0x100>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023c2:	601a      	str	r2, [r3, #0]
 80023c4:	e007      	b.n	80023d6 <HAL_CAN_Init+0x110>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023d4:	601a      	str	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	7e9b      	ldrb	r3, [r3, #26]
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d108      	bne.n	80023f0 <HAL_CAN_Init+0x12a>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f042 0220 	orr.w	r2, r2, #32
 80023ec:	601a      	str	r2, [r3, #0]
 80023ee:	e007      	b.n	8002400 <HAL_CAN_Init+0x13a>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f022 0220 	bic.w	r2, r2, #32
 80023fe:	601a      	str	r2, [r3, #0]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	7edb      	ldrb	r3, [r3, #27]
 8002404:	2b01      	cmp	r3, #1
 8002406:	d108      	bne.n	800241a <HAL_CAN_Init+0x154>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f022 0210 	bic.w	r2, r2, #16
 8002416:	601a      	str	r2, [r3, #0]
 8002418:	e007      	b.n	800242a <HAL_CAN_Init+0x164>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f042 0210 	orr.w	r2, r2, #16
 8002428:	601a      	str	r2, [r3, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	7f1b      	ldrb	r3, [r3, #28]
 800242e:	2b01      	cmp	r3, #1
 8002430:	d108      	bne.n	8002444 <HAL_CAN_Init+0x17e>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f042 0208 	orr.w	r2, r2, #8
 8002440:	601a      	str	r2, [r3, #0]
 8002442:	e007      	b.n	8002454 <HAL_CAN_Init+0x18e>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f022 0208 	bic.w	r2, r2, #8
 8002452:	601a      	str	r2, [r3, #0]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	7f5b      	ldrb	r3, [r3, #29]
 8002458:	2b01      	cmp	r3, #1
 800245a:	d108      	bne.n	800246e <HAL_CAN_Init+0x1a8>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f042 0204 	orr.w	r2, r2, #4
 800246a:	601a      	str	r2, [r3, #0]
 800246c:	e007      	b.n	800247e <HAL_CAN_Init+0x1b8>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f022 0204 	bic.w	r2, r2, #4
 800247c:	601a      	str	r2, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	689a      	ldr	r2, [r3, #8]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	431a      	orrs	r2, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	691b      	ldr	r3, [r3, #16]
 800248c:	431a      	orrs	r2, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	695b      	ldr	r3, [r3, #20]
 8002492:	ea42 0103 	orr.w	r1, r2, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	1e5a      	subs	r2, r3, #1
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	430a      	orrs	r2, r1
 80024a2:	61da      	str	r2, [r3, #28]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	625a      	str	r2, [r3, #36]	; 0x24
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2201      	movs	r2, #1
 80024ae:	f883 2020 	strb.w	r2, [r3, #32]
 80024b2:	2300      	movs	r3, #0
 80024b4:	4618      	mov	r0, r3
 80024b6:	3710      	adds	r7, #16
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}

080024bc <HAL_CAN_Start>:
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d12e      	bne.n	800252e <HAL_CAN_Start+0x72>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2202      	movs	r2, #2
 80024d4:	f883 2020 	strb.w	r2, [r3, #32]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f022 0201 	bic.w	r2, r2, #1
 80024e6:	601a      	str	r2, [r3, #0]
 80024e8:	f7ff fcae 	bl	8001e48 <HAL_GetTick>
 80024ec:	60f8      	str	r0, [r7, #12]
 80024ee:	e012      	b.n	8002516 <HAL_CAN_Start+0x5a>
 80024f0:	f7ff fcaa 	bl	8001e48 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b0a      	cmp	r3, #10
 80024fc:	d90b      	bls.n	8002516 <HAL_CAN_Start+0x5a>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002502:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	625a      	str	r2, [r3, #36]	; 0x24
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2205      	movs	r2, #5
 800250e:	f883 2020 	strb.w	r2, [r3, #32]
 8002512:	2301      	movs	r3, #1
 8002514:	e012      	b.n	800253c <HAL_CAN_Start+0x80>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f003 0301 	and.w	r3, r3, #1
 8002520:	2b00      	cmp	r3, #0
 8002522:	d1e5      	bne.n	80024f0 <HAL_CAN_Start+0x34>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2200      	movs	r2, #0
 8002528:	625a      	str	r2, [r3, #36]	; 0x24
 800252a:	2300      	movs	r3, #0
 800252c:	e006      	b.n	800253c <HAL_CAN_Start+0x80>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002532:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	625a      	str	r2, [r3, #36]	; 0x24
 800253a:	2301      	movs	r3, #1
 800253c:	4618      	mov	r0, r3
 800253e:	3710      	adds	r7, #16
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <HAL_CAN_AddTxMessage>:
 8002544:	b480      	push	{r7}
 8002546:	b089      	sub	sp, #36	; 0x24
 8002548:	af00      	add	r7, sp, #0
 800254a:	60f8      	str	r0, [r7, #12]
 800254c:	60b9      	str	r1, [r7, #8]
 800254e:	607a      	str	r2, [r7, #4]
 8002550:	603b      	str	r3, [r7, #0]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002558:	77fb      	strb	r3, [r7, #31]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	61bb      	str	r3, [r7, #24]
 8002562:	7ffb      	ldrb	r3, [r7, #31]
 8002564:	2b01      	cmp	r3, #1
 8002566:	d003      	beq.n	8002570 <HAL_CAN_AddTxMessage+0x2c>
 8002568:	7ffb      	ldrb	r3, [r7, #31]
 800256a:	2b02      	cmp	r3, #2
 800256c:	f040 80ad 	bne.w	80026ca <HAL_CAN_AddTxMessage+0x186>
 8002570:	69bb      	ldr	r3, [r7, #24]
 8002572:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d10a      	bne.n	8002590 <HAL_CAN_AddTxMessage+0x4c>
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d105      	bne.n	8002590 <HAL_CAN_AddTxMessage+0x4c>
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800258a:	2b00      	cmp	r3, #0
 800258c:	f000 8095 	beq.w	80026ba <HAL_CAN_AddTxMessage+0x176>
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	0e1b      	lsrs	r3, r3, #24
 8002594:	f003 0303 	and.w	r3, r3, #3
 8002598:	617b      	str	r3, [r7, #20]
 800259a:	2201      	movs	r2, #1
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	409a      	lsls	r2, r3
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	601a      	str	r2, [r3, #0]
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d10d      	bne.n	80025c8 <HAL_CAN_AddTxMessage+0x84>
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	055a      	lsls	r2, r3, #21
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	68f9      	ldr	r1, [r7, #12]
 80025b8:	6809      	ldr	r1, [r1, #0]
 80025ba:	431a      	orrs	r2, r3
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	3318      	adds	r3, #24
 80025c0:	011b      	lsls	r3, r3, #4
 80025c2:	440b      	add	r3, r1
 80025c4:	601a      	str	r2, [r3, #0]
 80025c6:	e00f      	b.n	80025e8 <HAL_CAN_AddTxMessage+0xa4>
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	00da      	lsls	r2, r3, #3
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	431a      	orrs	r2, r3
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	68f9      	ldr	r1, [r7, #12]
 80025da:	6809      	ldr	r1, [r1, #0]
 80025dc:	431a      	orrs	r2, r3
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	3318      	adds	r3, #24
 80025e2:	011b      	lsls	r3, r3, #4
 80025e4:	440b      	add	r3, r1
 80025e6:	601a      	str	r2, [r3, #0]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6819      	ldr	r1, [r3, #0]
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	691a      	ldr	r2, [r3, #16]
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	3318      	adds	r3, #24
 80025f4:	011b      	lsls	r3, r3, #4
 80025f6:	440b      	add	r3, r1
 80025f8:	3304      	adds	r3, #4
 80025fa:	601a      	str	r2, [r3, #0]
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	7d1b      	ldrb	r3, [r3, #20]
 8002600:	2b01      	cmp	r3, #1
 8002602:	d111      	bne.n	8002628 <HAL_CAN_AddTxMessage+0xe4>
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	3318      	adds	r3, #24
 800260c:	011b      	lsls	r3, r3, #4
 800260e:	4413      	add	r3, r2
 8002610:	3304      	adds	r3, #4
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	68fa      	ldr	r2, [r7, #12]
 8002616:	6811      	ldr	r1, [r2, #0]
 8002618:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	3318      	adds	r3, #24
 8002620:	011b      	lsls	r3, r3, #4
 8002622:	440b      	add	r3, r1
 8002624:	3304      	adds	r3, #4
 8002626:	601a      	str	r2, [r3, #0]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	3307      	adds	r3, #7
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	061a      	lsls	r2, r3, #24
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	3306      	adds	r3, #6
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	041b      	lsls	r3, r3, #16
 8002638:	431a      	orrs	r2, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	3305      	adds	r3, #5
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	021b      	lsls	r3, r3, #8
 8002642:	4313      	orrs	r3, r2
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	3204      	adds	r2, #4
 8002648:	7812      	ldrb	r2, [r2, #0]
 800264a:	4610      	mov	r0, r2
 800264c:	68fa      	ldr	r2, [r7, #12]
 800264e:	6811      	ldr	r1, [r2, #0]
 8002650:	ea43 0200 	orr.w	r2, r3, r0
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	011b      	lsls	r3, r3, #4
 8002658:	440b      	add	r3, r1
 800265a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800265e:	601a      	str	r2, [r3, #0]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	3303      	adds	r3, #3
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	061a      	lsls	r2, r3, #24
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	3302      	adds	r3, #2
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	041b      	lsls	r3, r3, #16
 8002670:	431a      	orrs	r2, r3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	3301      	adds	r3, #1
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	021b      	lsls	r3, r3, #8
 800267a:	4313      	orrs	r3, r2
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	7812      	ldrb	r2, [r2, #0]
 8002680:	4610      	mov	r0, r2
 8002682:	68fa      	ldr	r2, [r7, #12]
 8002684:	6811      	ldr	r1, [r2, #0]
 8002686:	ea43 0200 	orr.w	r2, r3, r0
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	011b      	lsls	r3, r3, #4
 800268e:	440b      	add	r3, r1
 8002690:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002694:	601a      	str	r2, [r3, #0]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	3318      	adds	r3, #24
 800269e:	011b      	lsls	r3, r3, #4
 80026a0:	4413      	add	r3, r2
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	68fa      	ldr	r2, [r7, #12]
 80026a6:	6811      	ldr	r1, [r2, #0]
 80026a8:	f043 0201 	orr.w	r2, r3, #1
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	3318      	adds	r3, #24
 80026b0:	011b      	lsls	r3, r3, #4
 80026b2:	440b      	add	r3, r1
 80026b4:	601a      	str	r2, [r3, #0]
 80026b6:	2300      	movs	r3, #0
 80026b8:	e00e      	b.n	80026d8 <HAL_CAN_AddTxMessage+0x194>
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026be:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	625a      	str	r2, [r3, #36]	; 0x24
 80026c6:	2301      	movs	r3, #1
 80026c8:	e006      	b.n	80026d8 <HAL_CAN_AddTxMessage+0x194>
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ce:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	625a      	str	r2, [r3, #36]	; 0x24
 80026d6:	2301      	movs	r3, #1
 80026d8:	4618      	mov	r0, r3
 80026da:	3724      	adds	r7, #36	; 0x24
 80026dc:	46bd      	mov	sp, r7
 80026de:	bc80      	pop	{r7}
 80026e0:	4770      	bx	lr

080026e2 <HAL_CAN_ActivateNotification>:
 80026e2:	b480      	push	{r7}
 80026e4:	b085      	sub	sp, #20
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
 80026ea:	6039      	str	r1, [r7, #0]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026f2:	73fb      	strb	r3, [r7, #15]
 80026f4:	7bfb      	ldrb	r3, [r7, #15]
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d002      	beq.n	8002700 <HAL_CAN_ActivateNotification+0x1e>
 80026fa:	7bfb      	ldrb	r3, [r7, #15]
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d109      	bne.n	8002714 <HAL_CAN_ActivateNotification+0x32>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	6959      	ldr	r1, [r3, #20]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	683a      	ldr	r2, [r7, #0]
 800270c:	430a      	orrs	r2, r1
 800270e:	615a      	str	r2, [r3, #20]
 8002710:	2300      	movs	r3, #0
 8002712:	e006      	b.n	8002722 <HAL_CAN_ActivateNotification+0x40>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002718:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	625a      	str	r2, [r3, #36]	; 0x24
 8002720:	2301      	movs	r3, #1
 8002722:	4618      	mov	r0, r3
 8002724:	3714      	adds	r7, #20
 8002726:	46bd      	mov	sp, r7
 8002728:	bc80      	pop	{r7}
 800272a:	4770      	bx	lr

0800272c <__NVIC_SetPriorityGrouping>:
 800272c:	b480      	push	{r7}
 800272e:	b085      	sub	sp, #20
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f003 0307 	and.w	r3, r3, #7
 800273a:	60fb      	str	r3, [r7, #12]
 800273c:	4b0c      	ldr	r3, [pc, #48]	; (8002770 <__NVIC_SetPriorityGrouping+0x44>)
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	60bb      	str	r3, [r7, #8]
 8002742:	68ba      	ldr	r2, [r7, #8]
 8002744:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002748:	4013      	ands	r3, r2
 800274a:	60bb      	str	r3, [r7, #8]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	021a      	lsls	r2, r3, #8
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	4313      	orrs	r3, r2
 8002754:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002758:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800275c:	60bb      	str	r3, [r7, #8]
 800275e:	4a04      	ldr	r2, [pc, #16]	; (8002770 <__NVIC_SetPriorityGrouping+0x44>)
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	60d3      	str	r3, [r2, #12]
 8002764:	bf00      	nop
 8002766:	3714      	adds	r7, #20
 8002768:	46bd      	mov	sp, r7
 800276a:	bc80      	pop	{r7}
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	e000ed00 	.word	0xe000ed00

08002774 <__NVIC_GetPriorityGrouping>:
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
 8002778:	4b04      	ldr	r3, [pc, #16]	; (800278c <__NVIC_GetPriorityGrouping+0x18>)
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	0a1b      	lsrs	r3, r3, #8
 800277e:	f003 0307 	and.w	r3, r3, #7
 8002782:	4618      	mov	r0, r3
 8002784:	46bd      	mov	sp, r7
 8002786:	bc80      	pop	{r7}
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	e000ed00 	.word	0xe000ed00

08002790 <__NVIC_EnableIRQ>:
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	4603      	mov	r3, r0
 8002798:	71fb      	strb	r3, [r7, #7]
 800279a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	db0b      	blt.n	80027ba <__NVIC_EnableIRQ+0x2a>
 80027a2:	79fb      	ldrb	r3, [r7, #7]
 80027a4:	f003 021f 	and.w	r2, r3, #31
 80027a8:	4906      	ldr	r1, [pc, #24]	; (80027c4 <__NVIC_EnableIRQ+0x34>)
 80027aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ae:	095b      	lsrs	r3, r3, #5
 80027b0:	2001      	movs	r0, #1
 80027b2:	fa00 f202 	lsl.w	r2, r0, r2
 80027b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80027ba:	bf00      	nop
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	bc80      	pop	{r7}
 80027c2:	4770      	bx	lr
 80027c4:	e000e100 	.word	0xe000e100

080027c8 <__NVIC_SetPriority>:
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	4603      	mov	r3, r0
 80027d0:	6039      	str	r1, [r7, #0]
 80027d2:	71fb      	strb	r3, [r7, #7]
 80027d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	db0a      	blt.n	80027f2 <__NVIC_SetPriority+0x2a>
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	b2da      	uxtb	r2, r3
 80027e0:	490c      	ldr	r1, [pc, #48]	; (8002814 <__NVIC_SetPriority+0x4c>)
 80027e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e6:	0112      	lsls	r2, r2, #4
 80027e8:	b2d2      	uxtb	r2, r2
 80027ea:	440b      	add	r3, r1
 80027ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 80027f0:	e00a      	b.n	8002808 <__NVIC_SetPriority+0x40>
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	b2da      	uxtb	r2, r3
 80027f6:	4908      	ldr	r1, [pc, #32]	; (8002818 <__NVIC_SetPriority+0x50>)
 80027f8:	79fb      	ldrb	r3, [r7, #7]
 80027fa:	f003 030f 	and.w	r3, r3, #15
 80027fe:	3b04      	subs	r3, #4
 8002800:	0112      	lsls	r2, r2, #4
 8002802:	b2d2      	uxtb	r2, r2
 8002804:	440b      	add	r3, r1
 8002806:	761a      	strb	r2, [r3, #24]
 8002808:	bf00      	nop
 800280a:	370c      	adds	r7, #12
 800280c:	46bd      	mov	sp, r7
 800280e:	bc80      	pop	{r7}
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	e000e100 	.word	0xe000e100
 8002818:	e000ed00 	.word	0xe000ed00

0800281c <NVIC_EncodePriority>:
 800281c:	b480      	push	{r7}
 800281e:	b089      	sub	sp, #36	; 0x24
 8002820:	af00      	add	r7, sp, #0
 8002822:	60f8      	str	r0, [r7, #12]
 8002824:	60b9      	str	r1, [r7, #8]
 8002826:	607a      	str	r2, [r7, #4]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f003 0307 	and.w	r3, r3, #7
 800282e:	61fb      	str	r3, [r7, #28]
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	f1c3 0307 	rsb	r3, r3, #7
 8002836:	2b04      	cmp	r3, #4
 8002838:	bf28      	it	cs
 800283a:	2304      	movcs	r3, #4
 800283c:	61bb      	str	r3, [r7, #24]
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	3304      	adds	r3, #4
 8002842:	2b06      	cmp	r3, #6
 8002844:	d902      	bls.n	800284c <NVIC_EncodePriority+0x30>
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	3b03      	subs	r3, #3
 800284a:	e000      	b.n	800284e <NVIC_EncodePriority+0x32>
 800284c:	2300      	movs	r3, #0
 800284e:	617b      	str	r3, [r7, #20]
 8002850:	f04f 32ff 	mov.w	r2, #4294967295
 8002854:	69bb      	ldr	r3, [r7, #24]
 8002856:	fa02 f303 	lsl.w	r3, r2, r3
 800285a:	43da      	mvns	r2, r3
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	401a      	ands	r2, r3
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	409a      	lsls	r2, r3
 8002864:	f04f 31ff 	mov.w	r1, #4294967295
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	fa01 f303 	lsl.w	r3, r1, r3
 800286e:	43d9      	mvns	r1, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	400b      	ands	r3, r1
 8002874:	4313      	orrs	r3, r2
 8002876:	4618      	mov	r0, r3
 8002878:	3724      	adds	r7, #36	; 0x24
 800287a:	46bd      	mov	sp, r7
 800287c:	bc80      	pop	{r7}
 800287e:	4770      	bx	lr

08002880 <SysTick_Config>:
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	3b01      	subs	r3, #1
 800288c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002890:	d301      	bcc.n	8002896 <SysTick_Config+0x16>
 8002892:	2301      	movs	r3, #1
 8002894:	e00f      	b.n	80028b6 <SysTick_Config+0x36>
 8002896:	4a0a      	ldr	r2, [pc, #40]	; (80028c0 <SysTick_Config+0x40>)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	3b01      	subs	r3, #1
 800289c:	6053      	str	r3, [r2, #4]
 800289e:	210f      	movs	r1, #15
 80028a0:	f04f 30ff 	mov.w	r0, #4294967295
 80028a4:	f7ff ff90 	bl	80027c8 <__NVIC_SetPriority>
 80028a8:	4b05      	ldr	r3, [pc, #20]	; (80028c0 <SysTick_Config+0x40>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	609a      	str	r2, [r3, #8]
 80028ae:	4b04      	ldr	r3, [pc, #16]	; (80028c0 <SysTick_Config+0x40>)
 80028b0:	2207      	movs	r2, #7
 80028b2:	601a      	str	r2, [r3, #0]
 80028b4:	2300      	movs	r3, #0
 80028b6:	4618      	mov	r0, r3
 80028b8:	3708      	adds	r7, #8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	e000e010 	.word	0xe000e010

080028c4 <HAL_NVIC_SetPriorityGrouping>:
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f7ff ff2d 	bl	800272c <__NVIC_SetPriorityGrouping>
 80028d2:	bf00      	nop
 80028d4:	3708      	adds	r7, #8
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <HAL_NVIC_SetPriority>:
 80028da:	b580      	push	{r7, lr}
 80028dc:	b086      	sub	sp, #24
 80028de:	af00      	add	r7, sp, #0
 80028e0:	4603      	mov	r3, r0
 80028e2:	60b9      	str	r1, [r7, #8]
 80028e4:	607a      	str	r2, [r7, #4]
 80028e6:	73fb      	strb	r3, [r7, #15]
 80028e8:	2300      	movs	r3, #0
 80028ea:	617b      	str	r3, [r7, #20]
 80028ec:	f7ff ff42 	bl	8002774 <__NVIC_GetPriorityGrouping>
 80028f0:	6178      	str	r0, [r7, #20]
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	68b9      	ldr	r1, [r7, #8]
 80028f6:	6978      	ldr	r0, [r7, #20]
 80028f8:	f7ff ff90 	bl	800281c <NVIC_EncodePriority>
 80028fc:	4602      	mov	r2, r0
 80028fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002902:	4611      	mov	r1, r2
 8002904:	4618      	mov	r0, r3
 8002906:	f7ff ff5f 	bl	80027c8 <__NVIC_SetPriority>
 800290a:	bf00      	nop
 800290c:	3718      	adds	r7, #24
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}

08002912 <HAL_NVIC_EnableIRQ>:
 8002912:	b580      	push	{r7, lr}
 8002914:	b082      	sub	sp, #8
 8002916:	af00      	add	r7, sp, #0
 8002918:	4603      	mov	r3, r0
 800291a:	71fb      	strb	r3, [r7, #7]
 800291c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002920:	4618      	mov	r0, r3
 8002922:	f7ff ff35 	bl	8002790 <__NVIC_EnableIRQ>
 8002926:	bf00      	nop
 8002928:	3708      	adds	r7, #8
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}

0800292e <HAL_SYSTICK_Config>:
 800292e:	b580      	push	{r7, lr}
 8002930:	b082      	sub	sp, #8
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f7ff ffa2 	bl	8002880 <SysTick_Config>
 800293c:	4603      	mov	r3, r0
 800293e:	4618      	mov	r0, r3
 8002940:	3708      	adds	r7, #8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
	...

08002948 <HAL_GPIO_Init>:
 8002948:	b480      	push	{r7}
 800294a:	b08b      	sub	sp, #44	; 0x2c
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
 8002952:	2300      	movs	r3, #0
 8002954:	627b      	str	r3, [r7, #36]	; 0x24
 8002956:	2300      	movs	r3, #0
 8002958:	623b      	str	r3, [r7, #32]
 800295a:	e169      	b.n	8002c30 <HAL_GPIO_Init+0x2e8>
 800295c:	2201      	movs	r2, #1
 800295e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002960:	fa02 f303 	lsl.w	r3, r2, r3
 8002964:	61fb      	str	r3, [r7, #28]
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	69fa      	ldr	r2, [r7, #28]
 800296c:	4013      	ands	r3, r2
 800296e:	61bb      	str	r3, [r7, #24]
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	429a      	cmp	r2, r3
 8002976:	f040 8158 	bne.w	8002c2a <HAL_GPIO_Init+0x2e2>
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	4a9a      	ldr	r2, [pc, #616]	; (8002be8 <HAL_GPIO_Init+0x2a0>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d05e      	beq.n	8002a42 <HAL_GPIO_Init+0xfa>
 8002984:	4a98      	ldr	r2, [pc, #608]	; (8002be8 <HAL_GPIO_Init+0x2a0>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d875      	bhi.n	8002a76 <HAL_GPIO_Init+0x12e>
 800298a:	4a98      	ldr	r2, [pc, #608]	; (8002bec <HAL_GPIO_Init+0x2a4>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d058      	beq.n	8002a42 <HAL_GPIO_Init+0xfa>
 8002990:	4a96      	ldr	r2, [pc, #600]	; (8002bec <HAL_GPIO_Init+0x2a4>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d86f      	bhi.n	8002a76 <HAL_GPIO_Init+0x12e>
 8002996:	4a96      	ldr	r2, [pc, #600]	; (8002bf0 <HAL_GPIO_Init+0x2a8>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d052      	beq.n	8002a42 <HAL_GPIO_Init+0xfa>
 800299c:	4a94      	ldr	r2, [pc, #592]	; (8002bf0 <HAL_GPIO_Init+0x2a8>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d869      	bhi.n	8002a76 <HAL_GPIO_Init+0x12e>
 80029a2:	4a94      	ldr	r2, [pc, #592]	; (8002bf4 <HAL_GPIO_Init+0x2ac>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d04c      	beq.n	8002a42 <HAL_GPIO_Init+0xfa>
 80029a8:	4a92      	ldr	r2, [pc, #584]	; (8002bf4 <HAL_GPIO_Init+0x2ac>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d863      	bhi.n	8002a76 <HAL_GPIO_Init+0x12e>
 80029ae:	4a92      	ldr	r2, [pc, #584]	; (8002bf8 <HAL_GPIO_Init+0x2b0>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d046      	beq.n	8002a42 <HAL_GPIO_Init+0xfa>
 80029b4:	4a90      	ldr	r2, [pc, #576]	; (8002bf8 <HAL_GPIO_Init+0x2b0>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d85d      	bhi.n	8002a76 <HAL_GPIO_Init+0x12e>
 80029ba:	2b12      	cmp	r3, #18
 80029bc:	d82a      	bhi.n	8002a14 <HAL_GPIO_Init+0xcc>
 80029be:	2b12      	cmp	r3, #18
 80029c0:	d859      	bhi.n	8002a76 <HAL_GPIO_Init+0x12e>
 80029c2:	a201      	add	r2, pc, #4	; (adr r2, 80029c8 <HAL_GPIO_Init+0x80>)
 80029c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029c8:	08002a43 	.word	0x08002a43
 80029cc:	08002a1d 	.word	0x08002a1d
 80029d0:	08002a2f 	.word	0x08002a2f
 80029d4:	08002a71 	.word	0x08002a71
 80029d8:	08002a77 	.word	0x08002a77
 80029dc:	08002a77 	.word	0x08002a77
 80029e0:	08002a77 	.word	0x08002a77
 80029e4:	08002a77 	.word	0x08002a77
 80029e8:	08002a77 	.word	0x08002a77
 80029ec:	08002a77 	.word	0x08002a77
 80029f0:	08002a77 	.word	0x08002a77
 80029f4:	08002a77 	.word	0x08002a77
 80029f8:	08002a77 	.word	0x08002a77
 80029fc:	08002a77 	.word	0x08002a77
 8002a00:	08002a77 	.word	0x08002a77
 8002a04:	08002a77 	.word	0x08002a77
 8002a08:	08002a77 	.word	0x08002a77
 8002a0c:	08002a25 	.word	0x08002a25
 8002a10:	08002a39 	.word	0x08002a39
 8002a14:	4a79      	ldr	r2, [pc, #484]	; (8002bfc <HAL_GPIO_Init+0x2b4>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d013      	beq.n	8002a42 <HAL_GPIO_Init+0xfa>
 8002a1a:	e02c      	b.n	8002a76 <HAL_GPIO_Init+0x12e>
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	623b      	str	r3, [r7, #32]
 8002a22:	e029      	b.n	8002a78 <HAL_GPIO_Init+0x130>
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	3304      	adds	r3, #4
 8002a2a:	623b      	str	r3, [r7, #32]
 8002a2c:	e024      	b.n	8002a78 <HAL_GPIO_Init+0x130>
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	3308      	adds	r3, #8
 8002a34:	623b      	str	r3, [r7, #32]
 8002a36:	e01f      	b.n	8002a78 <HAL_GPIO_Init+0x130>
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	330c      	adds	r3, #12
 8002a3e:	623b      	str	r3, [r7, #32]
 8002a40:	e01a      	b.n	8002a78 <HAL_GPIO_Init+0x130>
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d102      	bne.n	8002a50 <HAL_GPIO_Init+0x108>
 8002a4a:	2304      	movs	r3, #4
 8002a4c:	623b      	str	r3, [r7, #32]
 8002a4e:	e013      	b.n	8002a78 <HAL_GPIO_Init+0x130>
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d105      	bne.n	8002a64 <HAL_GPIO_Init+0x11c>
 8002a58:	2308      	movs	r3, #8
 8002a5a:	623b      	str	r3, [r7, #32]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	69fa      	ldr	r2, [r7, #28]
 8002a60:	611a      	str	r2, [r3, #16]
 8002a62:	e009      	b.n	8002a78 <HAL_GPIO_Init+0x130>
 8002a64:	2308      	movs	r3, #8
 8002a66:	623b      	str	r3, [r7, #32]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	69fa      	ldr	r2, [r7, #28]
 8002a6c:	615a      	str	r2, [r3, #20]
 8002a6e:	e003      	b.n	8002a78 <HAL_GPIO_Init+0x130>
 8002a70:	2300      	movs	r3, #0
 8002a72:	623b      	str	r3, [r7, #32]
 8002a74:	e000      	b.n	8002a78 <HAL_GPIO_Init+0x130>
 8002a76:	bf00      	nop
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	2bff      	cmp	r3, #255	; 0xff
 8002a7c:	d801      	bhi.n	8002a82 <HAL_GPIO_Init+0x13a>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	e001      	b.n	8002a86 <HAL_GPIO_Init+0x13e>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	3304      	adds	r3, #4
 8002a86:	617b      	str	r3, [r7, #20]
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	2bff      	cmp	r3, #255	; 0xff
 8002a8c:	d802      	bhi.n	8002a94 <HAL_GPIO_Init+0x14c>
 8002a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	e002      	b.n	8002a9a <HAL_GPIO_Init+0x152>
 8002a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a96:	3b08      	subs	r3, #8
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	613b      	str	r3, [r7, #16]
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	210f      	movs	r1, #15
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8002aa8:	43db      	mvns	r3, r3
 8002aaa:	401a      	ands	r2, r3
 8002aac:	6a39      	ldr	r1, [r7, #32]
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab4:	431a      	orrs	r2, r3
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	601a      	str	r2, [r3, #0]
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	f000 80b1 	beq.w	8002c2a <HAL_GPIO_Init+0x2e2>
 8002ac8:	4b4d      	ldr	r3, [pc, #308]	; (8002c00 <HAL_GPIO_Init+0x2b8>)
 8002aca:	699b      	ldr	r3, [r3, #24]
 8002acc:	4a4c      	ldr	r2, [pc, #304]	; (8002c00 <HAL_GPIO_Init+0x2b8>)
 8002ace:	f043 0301 	orr.w	r3, r3, #1
 8002ad2:	6193      	str	r3, [r2, #24]
 8002ad4:	4b4a      	ldr	r3, [pc, #296]	; (8002c00 <HAL_GPIO_Init+0x2b8>)
 8002ad6:	699b      	ldr	r3, [r3, #24]
 8002ad8:	f003 0301 	and.w	r3, r3, #1
 8002adc:	60bb      	str	r3, [r7, #8]
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	4a48      	ldr	r2, [pc, #288]	; (8002c04 <HAL_GPIO_Init+0x2bc>)
 8002ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae4:	089b      	lsrs	r3, r3, #2
 8002ae6:	3302      	adds	r3, #2
 8002ae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aec:	60fb      	str	r3, [r7, #12]
 8002aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af0:	f003 0303 	and.w	r3, r3, #3
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	220f      	movs	r2, #15
 8002af8:	fa02 f303 	lsl.w	r3, r2, r3
 8002afc:	43db      	mvns	r3, r3
 8002afe:	68fa      	ldr	r2, [r7, #12]
 8002b00:	4013      	ands	r3, r2
 8002b02:	60fb      	str	r3, [r7, #12]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	4a40      	ldr	r2, [pc, #256]	; (8002c08 <HAL_GPIO_Init+0x2c0>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d013      	beq.n	8002b34 <HAL_GPIO_Init+0x1ec>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	4a3f      	ldr	r2, [pc, #252]	; (8002c0c <HAL_GPIO_Init+0x2c4>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d00d      	beq.n	8002b30 <HAL_GPIO_Init+0x1e8>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	4a3e      	ldr	r2, [pc, #248]	; (8002c10 <HAL_GPIO_Init+0x2c8>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d007      	beq.n	8002b2c <HAL_GPIO_Init+0x1e4>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	4a3d      	ldr	r2, [pc, #244]	; (8002c14 <HAL_GPIO_Init+0x2cc>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d101      	bne.n	8002b28 <HAL_GPIO_Init+0x1e0>
 8002b24:	2303      	movs	r3, #3
 8002b26:	e006      	b.n	8002b36 <HAL_GPIO_Init+0x1ee>
 8002b28:	2304      	movs	r3, #4
 8002b2a:	e004      	b.n	8002b36 <HAL_GPIO_Init+0x1ee>
 8002b2c:	2302      	movs	r3, #2
 8002b2e:	e002      	b.n	8002b36 <HAL_GPIO_Init+0x1ee>
 8002b30:	2301      	movs	r3, #1
 8002b32:	e000      	b.n	8002b36 <HAL_GPIO_Init+0x1ee>
 8002b34:	2300      	movs	r3, #0
 8002b36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b38:	f002 0203 	and.w	r2, r2, #3
 8002b3c:	0092      	lsls	r2, r2, #2
 8002b3e:	4093      	lsls	r3, r2
 8002b40:	68fa      	ldr	r2, [r7, #12]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	60fb      	str	r3, [r7, #12]
 8002b46:	492f      	ldr	r1, [pc, #188]	; (8002c04 <HAL_GPIO_Init+0x2bc>)
 8002b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4a:	089b      	lsrs	r3, r3, #2
 8002b4c:	3302      	adds	r3, #2
 8002b4e:	68fa      	ldr	r2, [r7, #12]
 8002b50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d006      	beq.n	8002b6e <HAL_GPIO_Init+0x226>
 8002b60:	4b2d      	ldr	r3, [pc, #180]	; (8002c18 <HAL_GPIO_Init+0x2d0>)
 8002b62:	689a      	ldr	r2, [r3, #8]
 8002b64:	492c      	ldr	r1, [pc, #176]	; (8002c18 <HAL_GPIO_Init+0x2d0>)
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	608b      	str	r3, [r1, #8]
 8002b6c:	e006      	b.n	8002b7c <HAL_GPIO_Init+0x234>
 8002b6e:	4b2a      	ldr	r3, [pc, #168]	; (8002c18 <HAL_GPIO_Init+0x2d0>)
 8002b70:	689a      	ldr	r2, [r3, #8]
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	43db      	mvns	r3, r3
 8002b76:	4928      	ldr	r1, [pc, #160]	; (8002c18 <HAL_GPIO_Init+0x2d0>)
 8002b78:	4013      	ands	r3, r2
 8002b7a:	608b      	str	r3, [r1, #8]
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d006      	beq.n	8002b96 <HAL_GPIO_Init+0x24e>
 8002b88:	4b23      	ldr	r3, [pc, #140]	; (8002c18 <HAL_GPIO_Init+0x2d0>)
 8002b8a:	68da      	ldr	r2, [r3, #12]
 8002b8c:	4922      	ldr	r1, [pc, #136]	; (8002c18 <HAL_GPIO_Init+0x2d0>)
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	60cb      	str	r3, [r1, #12]
 8002b94:	e006      	b.n	8002ba4 <HAL_GPIO_Init+0x25c>
 8002b96:	4b20      	ldr	r3, [pc, #128]	; (8002c18 <HAL_GPIO_Init+0x2d0>)
 8002b98:	68da      	ldr	r2, [r3, #12]
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	43db      	mvns	r3, r3
 8002b9e:	491e      	ldr	r1, [pc, #120]	; (8002c18 <HAL_GPIO_Init+0x2d0>)
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	60cb      	str	r3, [r1, #12]
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d006      	beq.n	8002bbe <HAL_GPIO_Init+0x276>
 8002bb0:	4b19      	ldr	r3, [pc, #100]	; (8002c18 <HAL_GPIO_Init+0x2d0>)
 8002bb2:	685a      	ldr	r2, [r3, #4]
 8002bb4:	4918      	ldr	r1, [pc, #96]	; (8002c18 <HAL_GPIO_Init+0x2d0>)
 8002bb6:	69bb      	ldr	r3, [r7, #24]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	604b      	str	r3, [r1, #4]
 8002bbc:	e006      	b.n	8002bcc <HAL_GPIO_Init+0x284>
 8002bbe:	4b16      	ldr	r3, [pc, #88]	; (8002c18 <HAL_GPIO_Init+0x2d0>)
 8002bc0:	685a      	ldr	r2, [r3, #4]
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	43db      	mvns	r3, r3
 8002bc6:	4914      	ldr	r1, [pc, #80]	; (8002c18 <HAL_GPIO_Init+0x2d0>)
 8002bc8:	4013      	ands	r3, r2
 8002bca:	604b      	str	r3, [r1, #4]
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d021      	beq.n	8002c1c <HAL_GPIO_Init+0x2d4>
 8002bd8:	4b0f      	ldr	r3, [pc, #60]	; (8002c18 <HAL_GPIO_Init+0x2d0>)
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	490e      	ldr	r1, [pc, #56]	; (8002c18 <HAL_GPIO_Init+0x2d0>)
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	600b      	str	r3, [r1, #0]
 8002be4:	e021      	b.n	8002c2a <HAL_GPIO_Init+0x2e2>
 8002be6:	bf00      	nop
 8002be8:	10320000 	.word	0x10320000
 8002bec:	10310000 	.word	0x10310000
 8002bf0:	10220000 	.word	0x10220000
 8002bf4:	10210000 	.word	0x10210000
 8002bf8:	10120000 	.word	0x10120000
 8002bfc:	10110000 	.word	0x10110000
 8002c00:	40021000 	.word	0x40021000
 8002c04:	40010000 	.word	0x40010000
 8002c08:	40010800 	.word	0x40010800
 8002c0c:	40010c00 	.word	0x40010c00
 8002c10:	40011000 	.word	0x40011000
 8002c14:	40011400 	.word	0x40011400
 8002c18:	40010400 	.word	0x40010400
 8002c1c:	4b0b      	ldr	r3, [pc, #44]	; (8002c4c <HAL_GPIO_Init+0x304>)
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	69bb      	ldr	r3, [r7, #24]
 8002c22:	43db      	mvns	r3, r3
 8002c24:	4909      	ldr	r1, [pc, #36]	; (8002c4c <HAL_GPIO_Init+0x304>)
 8002c26:	4013      	ands	r3, r2
 8002c28:	600b      	str	r3, [r1, #0]
 8002c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	627b      	str	r3, [r7, #36]	; 0x24
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c36:	fa22 f303 	lsr.w	r3, r2, r3
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	f47f ae8e 	bne.w	800295c <HAL_GPIO_Init+0x14>
 8002c40:	bf00      	nop
 8002c42:	bf00      	nop
 8002c44:	372c      	adds	r7, #44	; 0x2c
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bc80      	pop	{r7}
 8002c4a:	4770      	bx	lr
 8002c4c:	40010400 	.word	0x40010400

08002c50 <HAL_GPIO_WritePin>:
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	460b      	mov	r3, r1
 8002c5a:	807b      	strh	r3, [r7, #2]
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	707b      	strb	r3, [r7, #1]
 8002c60:	787b      	ldrb	r3, [r7, #1]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d003      	beq.n	8002c6e <HAL_GPIO_WritePin+0x1e>
 8002c66:	887a      	ldrh	r2, [r7, #2]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	611a      	str	r2, [r3, #16]
 8002c6c:	e003      	b.n	8002c76 <HAL_GPIO_WritePin+0x26>
 8002c6e:	887b      	ldrh	r3, [r7, #2]
 8002c70:	041a      	lsls	r2, r3, #16
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	611a      	str	r2, [r3, #16]
 8002c76:	bf00      	nop
 8002c78:	370c      	adds	r7, #12
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bc80      	pop	{r7}
 8002c7e:	4770      	bx	lr

08002c80 <HAL_GPIO_TogglePin>:
 8002c80:	b480      	push	{r7}
 8002c82:	b085      	sub	sp, #20
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	460b      	mov	r3, r1
 8002c8a:	807b      	strh	r3, [r7, #2]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	60fb      	str	r3, [r7, #12]
 8002c92:	887a      	ldrh	r2, [r7, #2]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	4013      	ands	r3, r2
 8002c98:	041a      	lsls	r2, r3, #16
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	43d9      	mvns	r1, r3
 8002c9e:	887b      	ldrh	r3, [r7, #2]
 8002ca0:	400b      	ands	r3, r1
 8002ca2:	431a      	orrs	r2, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	611a      	str	r2, [r3, #16]
 8002ca8:	bf00      	nop
 8002caa:	3714      	adds	r7, #20
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bc80      	pop	{r7}
 8002cb0:	4770      	bx	lr

08002cb2 <HAL_PCD_Init>:
 8002cb2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cb4:	b08f      	sub	sp, #60	; 0x3c
 8002cb6:	af0a      	add	r7, sp, #40	; 0x28
 8002cb8:	6078      	str	r0, [r7, #4]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d101      	bne.n	8002cc4 <HAL_PCD_Init+0x12>
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e10f      	b.n	8002ee4 <HAL_PCD_Init+0x232>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	60bb      	str	r3, [r7, #8]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d106      	bne.n	8002ce4 <HAL_PCD_Init+0x32>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f005 fd40 	bl	8008764 <HAL_PCD_MspInit>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2203      	movs	r2, #3
 8002ce8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d102      	bne.n	8002cfe <HAL_PCD_Init+0x4c>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	60da      	str	r2, [r3, #12]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4618      	mov	r0, r3
 8002d04:	f002 fe94 	bl	8005a30 <USB_DisableGlobalInt>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	603b      	str	r3, [r7, #0]
 8002d0e:	687e      	ldr	r6, [r7, #4]
 8002d10:	466d      	mov	r5, sp
 8002d12:	f106 0410 	add.w	r4, r6, #16
 8002d16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d1e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d22:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d26:	1d33      	adds	r3, r6, #4
 8002d28:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d2a:	6838      	ldr	r0, [r7, #0]
 8002d2c:	f002 fdb2 	bl	8005894 <USB_CoreInit>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d005      	beq.n	8002d42 <HAL_PCD_Init+0x90>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2202      	movs	r2, #2
 8002d3a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e0d0      	b.n	8002ee4 <HAL_PCD_Init+0x232>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	2100      	movs	r1, #0
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f002 fe81 	bl	8005a50 <USB_SetCurrentMode>
 8002d4e:	2300      	movs	r3, #0
 8002d50:	73fb      	strb	r3, [r7, #15]
 8002d52:	e04a      	b.n	8002dea <HAL_PCD_Init+0x138>
 8002d54:	7bfa      	ldrb	r2, [r7, #15]
 8002d56:	6879      	ldr	r1, [r7, #4]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	00db      	lsls	r3, r3, #3
 8002d5c:	4413      	add	r3, r2
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	440b      	add	r3, r1
 8002d62:	333d      	adds	r3, #61	; 0x3d
 8002d64:	2201      	movs	r2, #1
 8002d66:	701a      	strb	r2, [r3, #0]
 8002d68:	7bfa      	ldrb	r2, [r7, #15]
 8002d6a:	6879      	ldr	r1, [r7, #4]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	00db      	lsls	r3, r3, #3
 8002d70:	4413      	add	r3, r2
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	440b      	add	r3, r1
 8002d76:	333c      	adds	r3, #60	; 0x3c
 8002d78:	7bfa      	ldrb	r2, [r7, #15]
 8002d7a:	701a      	strb	r2, [r3, #0]
 8002d7c:	7bfa      	ldrb	r2, [r7, #15]
 8002d7e:	7bfb      	ldrb	r3, [r7, #15]
 8002d80:	b298      	uxth	r0, r3
 8002d82:	6879      	ldr	r1, [r7, #4]
 8002d84:	4613      	mov	r3, r2
 8002d86:	00db      	lsls	r3, r3, #3
 8002d88:	4413      	add	r3, r2
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	440b      	add	r3, r1
 8002d8e:	3356      	adds	r3, #86	; 0x56
 8002d90:	4602      	mov	r2, r0
 8002d92:	801a      	strh	r2, [r3, #0]
 8002d94:	7bfa      	ldrb	r2, [r7, #15]
 8002d96:	6879      	ldr	r1, [r7, #4]
 8002d98:	4613      	mov	r3, r2
 8002d9a:	00db      	lsls	r3, r3, #3
 8002d9c:	4413      	add	r3, r2
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	440b      	add	r3, r1
 8002da2:	3340      	adds	r3, #64	; 0x40
 8002da4:	2200      	movs	r2, #0
 8002da6:	701a      	strb	r2, [r3, #0]
 8002da8:	7bfa      	ldrb	r2, [r7, #15]
 8002daa:	6879      	ldr	r1, [r7, #4]
 8002dac:	4613      	mov	r3, r2
 8002dae:	00db      	lsls	r3, r3, #3
 8002db0:	4413      	add	r3, r2
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	440b      	add	r3, r1
 8002db6:	3344      	adds	r3, #68	; 0x44
 8002db8:	2200      	movs	r2, #0
 8002dba:	601a      	str	r2, [r3, #0]
 8002dbc:	7bfa      	ldrb	r2, [r7, #15]
 8002dbe:	6879      	ldr	r1, [r7, #4]
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	00db      	lsls	r3, r3, #3
 8002dc4:	4413      	add	r3, r2
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	440b      	add	r3, r1
 8002dca:	3348      	adds	r3, #72	; 0x48
 8002dcc:	2200      	movs	r2, #0
 8002dce:	601a      	str	r2, [r3, #0]
 8002dd0:	7bfa      	ldrb	r2, [r7, #15]
 8002dd2:	6879      	ldr	r1, [r7, #4]
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	00db      	lsls	r3, r3, #3
 8002dd8:	4413      	add	r3, r2
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	440b      	add	r3, r1
 8002dde:	334c      	adds	r3, #76	; 0x4c
 8002de0:	2200      	movs	r2, #0
 8002de2:	601a      	str	r2, [r3, #0]
 8002de4:	7bfb      	ldrb	r3, [r7, #15]
 8002de6:	3301      	adds	r3, #1
 8002de8:	73fb      	strb	r3, [r7, #15]
 8002dea:	7bfa      	ldrb	r2, [r7, #15]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d3af      	bcc.n	8002d54 <HAL_PCD_Init+0xa2>
 8002df4:	2300      	movs	r3, #0
 8002df6:	73fb      	strb	r3, [r7, #15]
 8002df8:	e044      	b.n	8002e84 <HAL_PCD_Init+0x1d2>
 8002dfa:	7bfa      	ldrb	r2, [r7, #15]
 8002dfc:	6879      	ldr	r1, [r7, #4]
 8002dfe:	4613      	mov	r3, r2
 8002e00:	00db      	lsls	r3, r3, #3
 8002e02:	4413      	add	r3, r2
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	440b      	add	r3, r1
 8002e08:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	701a      	strb	r2, [r3, #0]
 8002e10:	7bfa      	ldrb	r2, [r7, #15]
 8002e12:	6879      	ldr	r1, [r7, #4]
 8002e14:	4613      	mov	r3, r2
 8002e16:	00db      	lsls	r3, r3, #3
 8002e18:	4413      	add	r3, r2
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	440b      	add	r3, r1
 8002e1e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002e22:	7bfa      	ldrb	r2, [r7, #15]
 8002e24:	701a      	strb	r2, [r3, #0]
 8002e26:	7bfa      	ldrb	r2, [r7, #15]
 8002e28:	6879      	ldr	r1, [r7, #4]
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	00db      	lsls	r3, r3, #3
 8002e2e:	4413      	add	r3, r2
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	440b      	add	r3, r1
 8002e34:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002e38:	2200      	movs	r2, #0
 8002e3a:	701a      	strb	r2, [r3, #0]
 8002e3c:	7bfa      	ldrb	r2, [r7, #15]
 8002e3e:	6879      	ldr	r1, [r7, #4]
 8002e40:	4613      	mov	r3, r2
 8002e42:	00db      	lsls	r3, r3, #3
 8002e44:	4413      	add	r3, r2
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	440b      	add	r3, r1
 8002e4a:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002e4e:	2200      	movs	r2, #0
 8002e50:	601a      	str	r2, [r3, #0]
 8002e52:	7bfa      	ldrb	r2, [r7, #15]
 8002e54:	6879      	ldr	r1, [r7, #4]
 8002e56:	4613      	mov	r3, r2
 8002e58:	00db      	lsls	r3, r3, #3
 8002e5a:	4413      	add	r3, r2
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	440b      	add	r3, r1
 8002e60:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002e64:	2200      	movs	r2, #0
 8002e66:	601a      	str	r2, [r3, #0]
 8002e68:	7bfa      	ldrb	r2, [r7, #15]
 8002e6a:	6879      	ldr	r1, [r7, #4]
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	00db      	lsls	r3, r3, #3
 8002e70:	4413      	add	r3, r2
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	440b      	add	r3, r1
 8002e76:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	601a      	str	r2, [r3, #0]
 8002e7e:	7bfb      	ldrb	r3, [r7, #15]
 8002e80:	3301      	adds	r3, #1
 8002e82:	73fb      	strb	r3, [r7, #15]
 8002e84:	7bfa      	ldrb	r2, [r7, #15]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d3b5      	bcc.n	8002dfa <HAL_PCD_Init+0x148>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	603b      	str	r3, [r7, #0]
 8002e94:	687e      	ldr	r6, [r7, #4]
 8002e96:	466d      	mov	r5, sp
 8002e98:	f106 0410 	add.w	r4, r6, #16
 8002e9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ea0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ea2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ea4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ea8:	e885 0003 	stmia.w	r5, {r0, r1}
 8002eac:	1d33      	adds	r3, r6, #4
 8002eae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002eb0:	6838      	ldr	r0, [r7, #0]
 8002eb2:	f002 fe19 	bl	8005ae8 <USB_DevInit>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d005      	beq.n	8002ec8 <HAL_PCD_Init+0x216>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2202      	movs	r2, #2
 8002ec0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e00d      	b.n	8002ee4 <HAL_PCD_Init+0x232>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4618      	mov	r0, r3
 8002ede:	f003 fda3 	bl	8006a28 <USB_DevDisconnect>
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3714      	adds	r7, #20
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002eec <HAL_PCD_Start>:
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d101      	bne.n	8002f02 <HAL_PCD_Start+0x16>
 8002efe:	2302      	movs	r3, #2
 8002f00:	e012      	b.n	8002f28 <HAL_PCD_Start+0x3c>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2201      	movs	r2, #1
 8002f06:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f002 fd7e 	bl	8005a10 <USB_EnableGlobalInt>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f003 fd65 	bl	80069e8 <USB_DevConnect>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8002f26:	2300      	movs	r3, #0
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3708      	adds	r7, #8
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <HAL_PCD_IRQHandler>:
 8002f30:	b590      	push	{r4, r7, lr}
 8002f32:	b08d      	sub	sp, #52	; 0x34
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	623b      	str	r3, [r7, #32]
 8002f3e:	6a3b      	ldr	r3, [r7, #32]
 8002f40:	61fb      	str	r3, [r7, #28]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4618      	mov	r0, r3
 8002f48:	f003 fe1c 	bl	8006b84 <USB_GetMode>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	f040 8443 	bne.w	80037da <HAL_PCD_IRQHandler+0x8aa>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f003 fd85 	bl	8006a68 <USB_ReadInterrupts>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	f000 8439 	beq.w	80037d8 <HAL_PCD_IRQHandler+0x8a8>
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	0a1b      	lsrs	r3, r3, #8
 8002f70:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f003 fd72 	bl	8006a68 <USB_ReadInterrupts>
 8002f84:	4603      	mov	r3, r0
 8002f86:	f003 0302 	and.w	r3, r3, #2
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d107      	bne.n	8002f9e <HAL_PCD_IRQHandler+0x6e>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	695a      	ldr	r2, [r3, #20]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f002 0202 	and.w	r2, r2, #2
 8002f9c:	615a      	str	r2, [r3, #20]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f003 fd60 	bl	8006a68 <USB_ReadInterrupts>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	f003 0310 	and.w	r3, r3, #16
 8002fae:	2b10      	cmp	r3, #16
 8002fb0:	d161      	bne.n	8003076 <HAL_PCD_IRQHandler+0x146>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	699a      	ldr	r2, [r3, #24]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f022 0210 	bic.w	r2, r2, #16
 8002fc0:	619a      	str	r2, [r3, #24]
 8002fc2:	6a3b      	ldr	r3, [r7, #32]
 8002fc4:	6a1b      	ldr	r3, [r3, #32]
 8002fc6:	61bb      	str	r3, [r7, #24]
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	f003 020f 	and.w	r2, r3, #15
 8002fce:	4613      	mov	r3, r2
 8002fd0:	00db      	lsls	r3, r3, #3
 8002fd2:	4413      	add	r3, r2
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	4413      	add	r3, r2
 8002fde:	3304      	adds	r3, #4
 8002fe0:	617b      	str	r3, [r7, #20]
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	0c5b      	lsrs	r3, r3, #17
 8002fe6:	f003 030f 	and.w	r3, r3, #15
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d124      	bne.n	8003038 <HAL_PCD_IRQHandler+0x108>
 8002fee:	69ba      	ldr	r2, [r7, #24]
 8002ff0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d035      	beq.n	8003066 <HAL_PCD_IRQHandler+0x136>
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	68d9      	ldr	r1, [r3, #12]
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	091b      	lsrs	r3, r3, #4
 8003002:	b29b      	uxth	r3, r3
 8003004:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003008:	b29b      	uxth	r3, r3
 800300a:	461a      	mov	r2, r3
 800300c:	6a38      	ldr	r0, [r7, #32]
 800300e:	f003 fb9d 	bl	800674c <USB_ReadPacket>
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	68da      	ldr	r2, [r3, #12]
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	091b      	lsrs	r3, r3, #4
 800301a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800301e:	441a      	add	r2, r3
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	60da      	str	r2, [r3, #12]
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	695a      	ldr	r2, [r3, #20]
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	091b      	lsrs	r3, r3, #4
 800302c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003030:	441a      	add	r2, r3
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	615a      	str	r2, [r3, #20]
 8003036:	e016      	b.n	8003066 <HAL_PCD_IRQHandler+0x136>
 8003038:	69bb      	ldr	r3, [r7, #24]
 800303a:	0c5b      	lsrs	r3, r3, #17
 800303c:	f003 030f 	and.w	r3, r3, #15
 8003040:	2b06      	cmp	r3, #6
 8003042:	d110      	bne.n	8003066 <HAL_PCD_IRQHandler+0x136>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800304a:	2208      	movs	r2, #8
 800304c:	4619      	mov	r1, r3
 800304e:	6a38      	ldr	r0, [r7, #32]
 8003050:	f003 fb7c 	bl	800674c <USB_ReadPacket>
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	695a      	ldr	r2, [r3, #20]
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	091b      	lsrs	r3, r3, #4
 800305c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003060:	441a      	add	r2, r3
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	615a      	str	r2, [r3, #20]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	699a      	ldr	r2, [r3, #24]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f042 0210 	orr.w	r2, r2, #16
 8003074:	619a      	str	r2, [r3, #24]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4618      	mov	r0, r3
 800307c:	f003 fcf4 	bl	8006a68 <USB_ReadInterrupts>
 8003080:	4603      	mov	r3, r0
 8003082:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003086:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800308a:	f040 80a7 	bne.w	80031dc <HAL_PCD_IRQHandler+0x2ac>
 800308e:	2300      	movs	r3, #0
 8003090:	627b      	str	r3, [r7, #36]	; 0x24
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4618      	mov	r0, r3
 8003098:	f003 fcf8 	bl	8006a8c <USB_ReadDevAllOutEpInterrupt>
 800309c:	62b8      	str	r0, [r7, #40]	; 0x28
 800309e:	e099      	b.n	80031d4 <HAL_PCD_IRQHandler+0x2a4>
 80030a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030a2:	f003 0301 	and.w	r3, r3, #1
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	f000 808e 	beq.w	80031c8 <HAL_PCD_IRQHandler+0x298>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030b2:	b2d2      	uxtb	r2, r2
 80030b4:	4611      	mov	r1, r2
 80030b6:	4618      	mov	r0, r3
 80030b8:	f003 fd1a 	bl	8006af0 <USB_ReadDevOutEPInterrupt>
 80030bc:	6138      	str	r0, [r7, #16]
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	f003 0301 	and.w	r3, r3, #1
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d00c      	beq.n	80030e2 <HAL_PCD_IRQHandler+0x1b2>
 80030c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ca:	015a      	lsls	r2, r3, #5
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	4413      	add	r3, r2
 80030d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030d4:	461a      	mov	r2, r3
 80030d6:	2301      	movs	r3, #1
 80030d8:	6093      	str	r3, [r2, #8]
 80030da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f000 fe41 	bl	8003d64 <PCD_EP_OutXfrComplete_int>
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	f003 0308 	and.w	r3, r3, #8
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d00c      	beq.n	8003106 <HAL_PCD_IRQHandler+0x1d6>
 80030ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ee:	015a      	lsls	r2, r3, #5
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	4413      	add	r3, r2
 80030f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030f8:	461a      	mov	r2, r3
 80030fa:	2308      	movs	r3, #8
 80030fc:	6093      	str	r3, [r2, #8]
 80030fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f000 fe7d 	bl	8003e00 <PCD_EP_OutSetupPacket_int>
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	f003 0310 	and.w	r3, r3, #16
 800310c:	2b00      	cmp	r3, #0
 800310e:	d008      	beq.n	8003122 <HAL_PCD_IRQHandler+0x1f2>
 8003110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003112:	015a      	lsls	r2, r3, #5
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	4413      	add	r3, r2
 8003118:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800311c:	461a      	mov	r2, r3
 800311e:	2310      	movs	r3, #16
 8003120:	6093      	str	r3, [r2, #8]
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	f003 0302 	and.w	r3, r3, #2
 8003128:	2b00      	cmp	r3, #0
 800312a:	d030      	beq.n	800318e <HAL_PCD_IRQHandler+0x25e>
 800312c:	6a3b      	ldr	r3, [r7, #32]
 800312e:	695b      	ldr	r3, [r3, #20]
 8003130:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003134:	2b80      	cmp	r3, #128	; 0x80
 8003136:	d109      	bne.n	800314c <HAL_PCD_IRQHandler+0x21c>
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	69fa      	ldr	r2, [r7, #28]
 8003142:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003146:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800314a:	6053      	str	r3, [r2, #4]
 800314c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800314e:	4613      	mov	r3, r2
 8003150:	00db      	lsls	r3, r3, #3
 8003152:	4413      	add	r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	4413      	add	r3, r2
 800315e:	3304      	adds	r3, #4
 8003160:	617b      	str	r3, [r7, #20]
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	78db      	ldrb	r3, [r3, #3]
 8003166:	2b01      	cmp	r3, #1
 8003168:	d108      	bne.n	800317c <HAL_PCD_IRQHandler+0x24c>
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	2200      	movs	r2, #0
 800316e:	70da      	strb	r2, [r3, #3]
 8003170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003172:	b2db      	uxtb	r3, r3
 8003174:	4619      	mov	r1, r3
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f005 fbe2 	bl	8008940 <HAL_PCD_ISOOUTIncompleteCallback>
 800317c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317e:	015a      	lsls	r2, r3, #5
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	4413      	add	r3, r2
 8003184:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003188:	461a      	mov	r2, r3
 800318a:	2302      	movs	r3, #2
 800318c:	6093      	str	r3, [r2, #8]
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	f003 0320 	and.w	r3, r3, #32
 8003194:	2b00      	cmp	r3, #0
 8003196:	d008      	beq.n	80031aa <HAL_PCD_IRQHandler+0x27a>
 8003198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319a:	015a      	lsls	r2, r3, #5
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	4413      	add	r3, r2
 80031a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031a4:	461a      	mov	r2, r3
 80031a6:	2320      	movs	r3, #32
 80031a8:	6093      	str	r3, [r2, #8]
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d009      	beq.n	80031c8 <HAL_PCD_IRQHandler+0x298>
 80031b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b6:	015a      	lsls	r2, r3, #5
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	4413      	add	r3, r2
 80031bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031c0:	461a      	mov	r2, r3
 80031c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80031c6:	6093      	str	r3, [r2, #8]
 80031c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ca:	3301      	adds	r3, #1
 80031cc:	627b      	str	r3, [r7, #36]	; 0x24
 80031ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d0:	085b      	lsrs	r3, r3, #1
 80031d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80031d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	f47f af62 	bne.w	80030a0 <HAL_PCD_IRQHandler+0x170>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4618      	mov	r0, r3
 80031e2:	f003 fc41 	bl	8006a68 <USB_ReadInterrupts>
 80031e6:	4603      	mov	r3, r0
 80031e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031ec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80031f0:	f040 80a4 	bne.w	800333c <HAL_PCD_IRQHandler+0x40c>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4618      	mov	r0, r3
 80031fa:	f003 fc60 	bl	8006abe <USB_ReadDevAllInEpInterrupt>
 80031fe:	62b8      	str	r0, [r7, #40]	; 0x28
 8003200:	2300      	movs	r3, #0
 8003202:	627b      	str	r3, [r7, #36]	; 0x24
 8003204:	e096      	b.n	8003334 <HAL_PCD_IRQHandler+0x404>
 8003206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003208:	f003 0301 	and.w	r3, r3, #1
 800320c:	2b00      	cmp	r3, #0
 800320e:	f000 808b 	beq.w	8003328 <HAL_PCD_IRQHandler+0x3f8>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003218:	b2d2      	uxtb	r2, r2
 800321a:	4611      	mov	r1, r2
 800321c:	4618      	mov	r0, r3
 800321e:	f003 fc84 	bl	8006b2a <USB_ReadDevInEPInterrupt>
 8003222:	6138      	str	r0, [r7, #16]
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	2b00      	cmp	r3, #0
 800322c:	d020      	beq.n	8003270 <HAL_PCD_IRQHandler+0x340>
 800322e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003230:	f003 030f 	and.w	r3, r3, #15
 8003234:	2201      	movs	r2, #1
 8003236:	fa02 f303 	lsl.w	r3, r2, r3
 800323a:	60fb      	str	r3, [r7, #12]
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003242:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	43db      	mvns	r3, r3
 8003248:	69f9      	ldr	r1, [r7, #28]
 800324a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800324e:	4013      	ands	r3, r2
 8003250:	634b      	str	r3, [r1, #52]	; 0x34
 8003252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003254:	015a      	lsls	r2, r3, #5
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	4413      	add	r3, r2
 800325a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800325e:	461a      	mov	r2, r3
 8003260:	2301      	movs	r3, #1
 8003262:	6093      	str	r3, [r2, #8]
 8003264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003266:	b2db      	uxtb	r3, r3
 8003268:	4619      	mov	r1, r3
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f005 faed 	bl	800884a <HAL_PCD_DataInStageCallback>
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	f003 0308 	and.w	r3, r3, #8
 8003276:	2b00      	cmp	r3, #0
 8003278:	d008      	beq.n	800328c <HAL_PCD_IRQHandler+0x35c>
 800327a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327c:	015a      	lsls	r2, r3, #5
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	4413      	add	r3, r2
 8003282:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003286:	461a      	mov	r2, r3
 8003288:	2308      	movs	r3, #8
 800328a:	6093      	str	r3, [r2, #8]
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	f003 0310 	and.w	r3, r3, #16
 8003292:	2b00      	cmp	r3, #0
 8003294:	d008      	beq.n	80032a8 <HAL_PCD_IRQHandler+0x378>
 8003296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003298:	015a      	lsls	r2, r3, #5
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	4413      	add	r3, r2
 800329e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032a2:	461a      	mov	r2, r3
 80032a4:	2310      	movs	r3, #16
 80032a6:	6093      	str	r3, [r2, #8]
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d008      	beq.n	80032c4 <HAL_PCD_IRQHandler+0x394>
 80032b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b4:	015a      	lsls	r2, r3, #5
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	4413      	add	r3, r2
 80032ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032be:	461a      	mov	r2, r3
 80032c0:	2340      	movs	r3, #64	; 0x40
 80032c2:	6093      	str	r3, [r2, #8]
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	f003 0302 	and.w	r3, r3, #2
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d023      	beq.n	8003316 <HAL_PCD_IRQHandler+0x3e6>
 80032ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032d0:	6a38      	ldr	r0, [r7, #32]
 80032d2:	f002 fd2b 	bl	8005d2c <USB_FlushTxFifo>
 80032d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032d8:	4613      	mov	r3, r2
 80032da:	00db      	lsls	r3, r3, #3
 80032dc:	4413      	add	r3, r2
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	3338      	adds	r3, #56	; 0x38
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	4413      	add	r3, r2
 80032e6:	3304      	adds	r3, #4
 80032e8:	617b      	str	r3, [r7, #20]
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	78db      	ldrb	r3, [r3, #3]
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d108      	bne.n	8003304 <HAL_PCD_IRQHandler+0x3d4>
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	2200      	movs	r2, #0
 80032f6:	70da      	strb	r2, [r3, #3]
 80032f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	4619      	mov	r1, r3
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f005 fb30 	bl	8008964 <HAL_PCD_ISOINIncompleteCallback>
 8003304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003306:	015a      	lsls	r2, r3, #5
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	4413      	add	r3, r2
 800330c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003310:	461a      	mov	r2, r3
 8003312:	2302      	movs	r3, #2
 8003314:	6093      	str	r3, [r2, #8]
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800331c:	2b00      	cmp	r3, #0
 800331e:	d003      	beq.n	8003328 <HAL_PCD_IRQHandler+0x3f8>
 8003320:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f000 fc96 	bl	8003c54 <PCD_WriteEmptyTxFifo>
 8003328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332a:	3301      	adds	r3, #1
 800332c:	627b      	str	r3, [r7, #36]	; 0x24
 800332e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003330:	085b      	lsrs	r3, r3, #1
 8003332:	62bb      	str	r3, [r7, #40]	; 0x28
 8003334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003336:	2b00      	cmp	r3, #0
 8003338:	f47f af65 	bne.w	8003206 <HAL_PCD_IRQHandler+0x2d6>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4618      	mov	r0, r3
 8003342:	f003 fb91 	bl	8006a68 <USB_ReadInterrupts>
 8003346:	4603      	mov	r3, r0
 8003348:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800334c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003350:	d114      	bne.n	800337c <HAL_PCD_IRQHandler+0x44c>
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	69fa      	ldr	r2, [r7, #28]
 800335c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003360:	f023 0301 	bic.w	r3, r3, #1
 8003364:	6053      	str	r3, [r2, #4]
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f005 fadc 	bl	8008924 <HAL_PCD_ResumeCallback>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	695a      	ldr	r2, [r3, #20]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800337a:	615a      	str	r2, [r3, #20]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4618      	mov	r0, r3
 8003382:	f003 fb71 	bl	8006a68 <USB_ReadInterrupts>
 8003386:	4603      	mov	r3, r0
 8003388:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800338c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003390:	d112      	bne.n	80033b8 <HAL_PCD_IRQHandler+0x488>
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f003 0301 	and.w	r3, r3, #1
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d102      	bne.n	80033a8 <HAL_PCD_IRQHandler+0x478>
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f005 fa98 	bl	80088d8 <HAL_PCD_SuspendCallback>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	695a      	ldr	r2, [r3, #20]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80033b6:	615a      	str	r2, [r3, #20]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4618      	mov	r0, r3
 80033be:	f003 fb53 	bl	8006a68 <USB_ReadInterrupts>
 80033c2:	4603      	mov	r3, r0
 80033c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033cc:	f040 80b5 	bne.w	800353a <HAL_PCD_IRQHandler+0x60a>
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	69fa      	ldr	r2, [r7, #28]
 80033da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033de:	f023 0301 	bic.w	r3, r3, #1
 80033e2:	6053      	str	r3, [r2, #4]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2110      	movs	r1, #16
 80033ea:	4618      	mov	r0, r3
 80033ec:	f002 fc9e 	bl	8005d2c <USB_FlushTxFifo>
 80033f0:	2300      	movs	r3, #0
 80033f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033f4:	e046      	b.n	8003484 <HAL_PCD_IRQHandler+0x554>
 80033f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033f8:	015a      	lsls	r2, r3, #5
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	4413      	add	r3, r2
 80033fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003402:	461a      	mov	r2, r3
 8003404:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003408:	6093      	str	r3, [r2, #8]
 800340a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800340c:	015a      	lsls	r2, r3, #5
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	4413      	add	r3, r2
 8003412:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800341a:	0151      	lsls	r1, r2, #5
 800341c:	69fa      	ldr	r2, [r7, #28]
 800341e:	440a      	add	r2, r1
 8003420:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003424:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003428:	6013      	str	r3, [r2, #0]
 800342a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800342c:	015a      	lsls	r2, r3, #5
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	4413      	add	r3, r2
 8003432:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003436:	461a      	mov	r2, r3
 8003438:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800343c:	6093      	str	r3, [r2, #8]
 800343e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003440:	015a      	lsls	r2, r3, #5
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	4413      	add	r3, r2
 8003446:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800344e:	0151      	lsls	r1, r2, #5
 8003450:	69fa      	ldr	r2, [r7, #28]
 8003452:	440a      	add	r2, r1
 8003454:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003458:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800345c:	6013      	str	r3, [r2, #0]
 800345e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003460:	015a      	lsls	r2, r3, #5
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	4413      	add	r3, r2
 8003466:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800346e:	0151      	lsls	r1, r2, #5
 8003470:	69fa      	ldr	r2, [r7, #28]
 8003472:	440a      	add	r2, r1
 8003474:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003478:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800347c:	6013      	str	r3, [r2, #0]
 800347e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003480:	3301      	adds	r3, #1
 8003482:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800348a:	429a      	cmp	r2, r3
 800348c:	d3b3      	bcc.n	80033f6 <HAL_PCD_IRQHandler+0x4c6>
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003494:	69db      	ldr	r3, [r3, #28]
 8003496:	69fa      	ldr	r2, [r7, #28]
 8003498:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800349c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80034a0:	61d3      	str	r3, [r2, #28]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d016      	beq.n	80034d8 <HAL_PCD_IRQHandler+0x5a8>
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034b4:	69fa      	ldr	r2, [r7, #28]
 80034b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034ba:	f043 030b 	orr.w	r3, r3, #11
 80034be:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ca:	69fa      	ldr	r2, [r7, #28]
 80034cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034d0:	f043 030b 	orr.w	r3, r3, #11
 80034d4:	6453      	str	r3, [r2, #68]	; 0x44
 80034d6:	e015      	b.n	8003504 <HAL_PCD_IRQHandler+0x5d4>
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034de:	695b      	ldr	r3, [r3, #20]
 80034e0:	69fa      	ldr	r2, [r7, #28]
 80034e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034e6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80034ea:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80034ee:	6153      	str	r3, [r2, #20]
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034f6:	691b      	ldr	r3, [r3, #16]
 80034f8:	69fa      	ldr	r2, [r7, #28]
 80034fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034fe:	f043 030b 	orr.w	r3, r3, #11
 8003502:	6113      	str	r3, [r2, #16]
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	69fa      	ldr	r2, [r7, #28]
 800350e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003512:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003516:	6013      	str	r3, [r2, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003522:	4619      	mov	r1, r3
 8003524:	4610      	mov	r0, r2
 8003526:	f003 fb5d 	bl	8006be4 <USB_EP0_OutStart>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	695a      	ldr	r2, [r3, #20]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003538:	615a      	str	r2, [r3, #20]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4618      	mov	r0, r3
 8003540:	f003 fa92 	bl	8006a68 <USB_ReadInterrupts>
 8003544:	4603      	mov	r3, r0
 8003546:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800354a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800354e:	d124      	bne.n	800359a <HAL_PCD_IRQHandler+0x66a>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4618      	mov	r0, r3
 8003556:	f003 fb22 	bl	8006b9e <USB_ActivateSetup>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4618      	mov	r0, r3
 8003560:	f002 fc60 	bl	8005e24 <USB_GetDevSpeed>
 8003564:	4603      	mov	r3, r0
 8003566:	461a      	mov	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	611a      	str	r2, [r3, #16]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681c      	ldr	r4, [r3, #0]
 8003570:	f001 f98c 	bl	800488c <HAL_RCC_GetHCLKFreq>
 8003574:	4601      	mov	r1, r0
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	691b      	ldr	r3, [r3, #16]
 800357a:	b2db      	uxtb	r3, r3
 800357c:	461a      	mov	r2, r3
 800357e:	4620      	mov	r0, r4
 8003580:	f002 f9aa 	bl	80058d8 <USB_SetTurnaroundTime>
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f005 f988 	bl	800889a <HAL_PCD_ResetCallback>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	695a      	ldr	r2, [r3, #20]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003598:	615a      	str	r2, [r3, #20]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4618      	mov	r0, r3
 80035a0:	f003 fa62 	bl	8006a68 <USB_ReadInterrupts>
 80035a4:	4603      	mov	r3, r0
 80035a6:	f003 0308 	and.w	r3, r3, #8
 80035aa:	2b08      	cmp	r3, #8
 80035ac:	d10a      	bne.n	80035c4 <HAL_PCD_IRQHandler+0x694>
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f005 f965 	bl	800887e <HAL_PCD_SOFCallback>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	695a      	ldr	r2, [r3, #20]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f002 0208 	and.w	r2, r2, #8
 80035c2:	615a      	str	r2, [r3, #20]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4618      	mov	r0, r3
 80035ca:	f003 fa4d 	bl	8006a68 <USB_ReadInterrupts>
 80035ce:	4603      	mov	r3, r0
 80035d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035d4:	2b80      	cmp	r3, #128	; 0x80
 80035d6:	d122      	bne.n	800361e <HAL_PCD_IRQHandler+0x6ee>
 80035d8:	6a3b      	ldr	r3, [r7, #32]
 80035da:	699b      	ldr	r3, [r3, #24]
 80035dc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035e0:	6a3b      	ldr	r3, [r7, #32]
 80035e2:	619a      	str	r2, [r3, #24]
 80035e4:	2301      	movs	r3, #1
 80035e6:	627b      	str	r3, [r7, #36]	; 0x24
 80035e8:	e014      	b.n	8003614 <HAL_PCD_IRQHandler+0x6e4>
 80035ea:	6879      	ldr	r1, [r7, #4]
 80035ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035ee:	4613      	mov	r3, r2
 80035f0:	00db      	lsls	r3, r3, #3
 80035f2:	4413      	add	r3, r2
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	440b      	add	r3, r1
 80035f8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d105      	bne.n	800360e <HAL_PCD_IRQHandler+0x6de>
 8003602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003604:	b2db      	uxtb	r3, r3
 8003606:	4619      	mov	r1, r3
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f000 faf2 	bl	8003bf2 <HAL_PCD_EP_Abort>
 800360e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003610:	3301      	adds	r3, #1
 8003612:	627b      	str	r3, [r7, #36]	; 0x24
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800361a:	429a      	cmp	r2, r3
 800361c:	d3e5      	bcc.n	80035ea <HAL_PCD_IRQHandler+0x6ba>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4618      	mov	r0, r3
 8003624:	f003 fa20 	bl	8006a68 <USB_ReadInterrupts>
 8003628:	4603      	mov	r3, r0
 800362a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800362e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003632:	d13b      	bne.n	80036ac <HAL_PCD_IRQHandler+0x77c>
 8003634:	2301      	movs	r3, #1
 8003636:	627b      	str	r3, [r7, #36]	; 0x24
 8003638:	e02b      	b.n	8003692 <HAL_PCD_IRQHandler+0x762>
 800363a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363c:	015a      	lsls	r2, r3, #5
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	4413      	add	r3, r2
 8003642:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	61bb      	str	r3, [r7, #24]
 800364a:	6879      	ldr	r1, [r7, #4]
 800364c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800364e:	4613      	mov	r3, r2
 8003650:	00db      	lsls	r3, r3, #3
 8003652:	4413      	add	r3, r2
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	440b      	add	r3, r1
 8003658:	3340      	adds	r3, #64	; 0x40
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	2b01      	cmp	r3, #1
 800365e:	d115      	bne.n	800368c <HAL_PCD_IRQHandler+0x75c>
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	2b00      	cmp	r3, #0
 8003664:	da12      	bge.n	800368c <HAL_PCD_IRQHandler+0x75c>
 8003666:	6879      	ldr	r1, [r7, #4]
 8003668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800366a:	4613      	mov	r3, r2
 800366c:	00db      	lsls	r3, r3, #3
 800366e:	4413      	add	r3, r2
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	440b      	add	r3, r1
 8003674:	333f      	adds	r3, #63	; 0x3f
 8003676:	2201      	movs	r2, #1
 8003678:	701a      	strb	r2, [r3, #0]
 800367a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367c:	b2db      	uxtb	r3, r3
 800367e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003682:	b2db      	uxtb	r3, r3
 8003684:	4619      	mov	r1, r3
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 fab3 	bl	8003bf2 <HAL_PCD_EP_Abort>
 800368c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368e:	3301      	adds	r3, #1
 8003690:	627b      	str	r3, [r7, #36]	; 0x24
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003698:	429a      	cmp	r2, r3
 800369a:	d3ce      	bcc.n	800363a <HAL_PCD_IRQHandler+0x70a>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	695a      	ldr	r2, [r3, #20]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80036aa:	615a      	str	r2, [r3, #20]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4618      	mov	r0, r3
 80036b2:	f003 f9d9 	bl	8006a68 <USB_ReadInterrupts>
 80036b6:	4603      	mov	r3, r0
 80036b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80036c0:	d155      	bne.n	800376e <HAL_PCD_IRQHandler+0x83e>
 80036c2:	2301      	movs	r3, #1
 80036c4:	627b      	str	r3, [r7, #36]	; 0x24
 80036c6:	e045      	b.n	8003754 <HAL_PCD_IRQHandler+0x824>
 80036c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ca:	015a      	lsls	r2, r3, #5
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	4413      	add	r3, r2
 80036d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	61bb      	str	r3, [r7, #24]
 80036d8:	6879      	ldr	r1, [r7, #4]
 80036da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036dc:	4613      	mov	r3, r2
 80036de:	00db      	lsls	r3, r3, #3
 80036e0:	4413      	add	r3, r2
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	440b      	add	r3, r1
 80036e6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d12e      	bne.n	800374e <HAL_PCD_IRQHandler+0x81e>
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	da2b      	bge.n	800374e <HAL_PCD_IRQHandler+0x81e>
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003702:	f003 0301 	and.w	r3, r3, #1
 8003706:	429a      	cmp	r2, r3
 8003708:	d121      	bne.n	800374e <HAL_PCD_IRQHandler+0x81e>
 800370a:	6879      	ldr	r1, [r7, #4]
 800370c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800370e:	4613      	mov	r3, r2
 8003710:	00db      	lsls	r3, r3, #3
 8003712:	4413      	add	r3, r2
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	440b      	add	r3, r1
 8003718:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800371c:	2201      	movs	r2, #1
 800371e:	701a      	strb	r2, [r3, #0]
 8003720:	6a3b      	ldr	r3, [r7, #32]
 8003722:	699b      	ldr	r3, [r3, #24]
 8003724:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003728:	6a3b      	ldr	r3, [r7, #32]
 800372a:	619a      	str	r2, [r3, #24]
 800372c:	6a3b      	ldr	r3, [r7, #32]
 800372e:	695b      	ldr	r3, [r3, #20]
 8003730:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003734:	2b00      	cmp	r3, #0
 8003736:	d10a      	bne.n	800374e <HAL_PCD_IRQHandler+0x81e>
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	69fa      	ldr	r2, [r7, #28]
 8003742:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003746:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800374a:	6053      	str	r3, [r2, #4]
 800374c:	e007      	b.n	800375e <HAL_PCD_IRQHandler+0x82e>
 800374e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003750:	3301      	adds	r3, #1
 8003752:	627b      	str	r3, [r7, #36]	; 0x24
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800375a:	429a      	cmp	r2, r3
 800375c:	d3b4      	bcc.n	80036c8 <HAL_PCD_IRQHandler+0x798>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	695a      	ldr	r2, [r3, #20]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800376c:	615a      	str	r2, [r3, #20]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4618      	mov	r0, r3
 8003774:	f003 f978 	bl	8006a68 <USB_ReadInterrupts>
 8003778:	4603      	mov	r3, r0
 800377a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800377e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003782:	d10a      	bne.n	800379a <HAL_PCD_IRQHandler+0x86a>
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f005 f8ff 	bl	8008988 <HAL_PCD_ConnectCallback>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	695a      	ldr	r2, [r3, #20]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003798:	615a      	str	r2, [r3, #20]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4618      	mov	r0, r3
 80037a0:	f003 f962 	bl	8006a68 <USB_ReadInterrupts>
 80037a4:	4603      	mov	r3, r0
 80037a6:	f003 0304 	and.w	r3, r3, #4
 80037aa:	2b04      	cmp	r3, #4
 80037ac:	d115      	bne.n	80037da <HAL_PCD_IRQHandler+0x8aa>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	61bb      	str	r3, [r7, #24]
 80037b6:	69bb      	ldr	r3, [r7, #24]
 80037b8:	f003 0304 	and.w	r3, r3, #4
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d002      	beq.n	80037c6 <HAL_PCD_IRQHandler+0x896>
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f005 f8ef 	bl	80089a4 <HAL_PCD_DisconnectCallback>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	6859      	ldr	r1, [r3, #4]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	69ba      	ldr	r2, [r7, #24]
 80037d2:	430a      	orrs	r2, r1
 80037d4:	605a      	str	r2, [r3, #4]
 80037d6:	e000      	b.n	80037da <HAL_PCD_IRQHandler+0x8aa>
 80037d8:	bf00      	nop
 80037da:	3734      	adds	r7, #52	; 0x34
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd90      	pop	{r4, r7, pc}

080037e0 <HAL_PCD_SetAddress>:
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b082      	sub	sp, #8
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	460b      	mov	r3, r1
 80037ea:	70fb      	strb	r3, [r7, #3]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d101      	bne.n	80037fa <HAL_PCD_SetAddress+0x1a>
 80037f6:	2302      	movs	r3, #2
 80037f8:	e013      	b.n	8003822 <HAL_PCD_SetAddress+0x42>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2201      	movs	r2, #1
 80037fe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	78fa      	ldrb	r2, [r7, #3]
 8003806:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	78fa      	ldrb	r2, [r7, #3]
 8003810:	4611      	mov	r1, r2
 8003812:	4618      	mov	r0, r3
 8003814:	f003 f8c3 	bl	800699e <USB_SetDevAddress>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8003820:	2300      	movs	r3, #0
 8003822:	4618      	mov	r0, r3
 8003824:	3708      	adds	r7, #8
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}

0800382a <HAL_PCD_EP_Open>:
 800382a:	b580      	push	{r7, lr}
 800382c:	b084      	sub	sp, #16
 800382e:	af00      	add	r7, sp, #0
 8003830:	6078      	str	r0, [r7, #4]
 8003832:	4608      	mov	r0, r1
 8003834:	4611      	mov	r1, r2
 8003836:	461a      	mov	r2, r3
 8003838:	4603      	mov	r3, r0
 800383a:	70fb      	strb	r3, [r7, #3]
 800383c:	460b      	mov	r3, r1
 800383e:	803b      	strh	r3, [r7, #0]
 8003840:	4613      	mov	r3, r2
 8003842:	70bb      	strb	r3, [r7, #2]
 8003844:	2300      	movs	r3, #0
 8003846:	72fb      	strb	r3, [r7, #11]
 8003848:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800384c:	2b00      	cmp	r3, #0
 800384e:	da0f      	bge.n	8003870 <HAL_PCD_EP_Open+0x46>
 8003850:	78fb      	ldrb	r3, [r7, #3]
 8003852:	f003 020f 	and.w	r2, r3, #15
 8003856:	4613      	mov	r3, r2
 8003858:	00db      	lsls	r3, r3, #3
 800385a:	4413      	add	r3, r2
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	3338      	adds	r3, #56	; 0x38
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	4413      	add	r3, r2
 8003864:	3304      	adds	r3, #4
 8003866:	60fb      	str	r3, [r7, #12]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2201      	movs	r2, #1
 800386c:	705a      	strb	r2, [r3, #1]
 800386e:	e00f      	b.n	8003890 <HAL_PCD_EP_Open+0x66>
 8003870:	78fb      	ldrb	r3, [r7, #3]
 8003872:	f003 020f 	and.w	r2, r3, #15
 8003876:	4613      	mov	r3, r2
 8003878:	00db      	lsls	r3, r3, #3
 800387a:	4413      	add	r3, r2
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	4413      	add	r3, r2
 8003886:	3304      	adds	r3, #4
 8003888:	60fb      	str	r3, [r7, #12]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2200      	movs	r2, #0
 800388e:	705a      	strb	r2, [r3, #1]
 8003890:	78fb      	ldrb	r3, [r7, #3]
 8003892:	f003 030f 	and.w	r3, r3, #15
 8003896:	b2da      	uxtb	r2, r3
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	701a      	strb	r2, [r3, #0]
 800389c:	883a      	ldrh	r2, [r7, #0]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	609a      	str	r2, [r3, #8]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	78ba      	ldrb	r2, [r7, #2]
 80038a6:	711a      	strb	r2, [r3, #4]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	785b      	ldrb	r3, [r3, #1]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d004      	beq.n	80038ba <HAL_PCD_EP_Open+0x90>
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	b29a      	uxth	r2, r3
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	835a      	strh	r2, [r3, #26]
 80038ba:	78bb      	ldrb	r3, [r7, #2]
 80038bc:	2b02      	cmp	r3, #2
 80038be:	d102      	bne.n	80038c6 <HAL_PCD_EP_Open+0x9c>
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2200      	movs	r2, #0
 80038c4:	715a      	strb	r2, [r3, #5]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d101      	bne.n	80038d4 <HAL_PCD_EP_Open+0xaa>
 80038d0:	2302      	movs	r3, #2
 80038d2:	e00e      	b.n	80038f2 <HAL_PCD_EP_Open+0xc8>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	68f9      	ldr	r1, [r7, #12]
 80038e2:	4618      	mov	r0, r3
 80038e4:	f002 fabc 	bl	8005e60 <USB_ActivateEndpoint>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 80038f0:	7afb      	ldrb	r3, [r7, #11]
 80038f2:	4618      	mov	r0, r3
 80038f4:	3710      	adds	r7, #16
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}

080038fa <HAL_PCD_EP_Close>:
 80038fa:	b580      	push	{r7, lr}
 80038fc:	b084      	sub	sp, #16
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
 8003902:	460b      	mov	r3, r1
 8003904:	70fb      	strb	r3, [r7, #3]
 8003906:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800390a:	2b00      	cmp	r3, #0
 800390c:	da0f      	bge.n	800392e <HAL_PCD_EP_Close+0x34>
 800390e:	78fb      	ldrb	r3, [r7, #3]
 8003910:	f003 020f 	and.w	r2, r3, #15
 8003914:	4613      	mov	r3, r2
 8003916:	00db      	lsls	r3, r3, #3
 8003918:	4413      	add	r3, r2
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	3338      	adds	r3, #56	; 0x38
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	4413      	add	r3, r2
 8003922:	3304      	adds	r3, #4
 8003924:	60fb      	str	r3, [r7, #12]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2201      	movs	r2, #1
 800392a:	705a      	strb	r2, [r3, #1]
 800392c:	e00f      	b.n	800394e <HAL_PCD_EP_Close+0x54>
 800392e:	78fb      	ldrb	r3, [r7, #3]
 8003930:	f003 020f 	and.w	r2, r3, #15
 8003934:	4613      	mov	r3, r2
 8003936:	00db      	lsls	r3, r3, #3
 8003938:	4413      	add	r3, r2
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	4413      	add	r3, r2
 8003944:	3304      	adds	r3, #4
 8003946:	60fb      	str	r3, [r7, #12]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2200      	movs	r2, #0
 800394c:	705a      	strb	r2, [r3, #1]
 800394e:	78fb      	ldrb	r3, [r7, #3]
 8003950:	f003 030f 	and.w	r3, r3, #15
 8003954:	b2da      	uxtb	r2, r3
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	701a      	strb	r2, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003960:	2b01      	cmp	r3, #1
 8003962:	d101      	bne.n	8003968 <HAL_PCD_EP_Close+0x6e>
 8003964:	2302      	movs	r3, #2
 8003966:	e00e      	b.n	8003986 <HAL_PCD_EP_Close+0x8c>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2201      	movs	r2, #1
 800396c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	68f9      	ldr	r1, [r7, #12]
 8003976:	4618      	mov	r0, r3
 8003978:	f002 faf8 	bl	8005f6c <USB_DeactivateEndpoint>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8003984:	2300      	movs	r3, #0
 8003986:	4618      	mov	r0, r3
 8003988:	3710      	adds	r7, #16
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}

0800398e <HAL_PCD_EP_Receive>:
 800398e:	b580      	push	{r7, lr}
 8003990:	b086      	sub	sp, #24
 8003992:	af00      	add	r7, sp, #0
 8003994:	60f8      	str	r0, [r7, #12]
 8003996:	607a      	str	r2, [r7, #4]
 8003998:	603b      	str	r3, [r7, #0]
 800399a:	460b      	mov	r3, r1
 800399c:	72fb      	strb	r3, [r7, #11]
 800399e:	7afb      	ldrb	r3, [r7, #11]
 80039a0:	f003 020f 	and.w	r2, r3, #15
 80039a4:	4613      	mov	r3, r2
 80039a6:	00db      	lsls	r3, r3, #3
 80039a8:	4413      	add	r3, r2
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80039b0:	68fa      	ldr	r2, [r7, #12]
 80039b2:	4413      	add	r3, r2
 80039b4:	3304      	adds	r3, #4
 80039b6:	617b      	str	r3, [r7, #20]
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	60da      	str	r2, [r3, #12]
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	683a      	ldr	r2, [r7, #0]
 80039c2:	611a      	str	r2, [r3, #16]
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	2200      	movs	r2, #0
 80039c8:	615a      	str	r2, [r3, #20]
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	2200      	movs	r2, #0
 80039ce:	705a      	strb	r2, [r3, #1]
 80039d0:	7afb      	ldrb	r3, [r7, #11]
 80039d2:	f003 030f 	and.w	r3, r3, #15
 80039d6:	b2da      	uxtb	r2, r3
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	701a      	strb	r2, [r3, #0]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	6979      	ldr	r1, [r7, #20]
 80039e2:	4618      	mov	r0, r3
 80039e4:	f002 fb9e 	bl	8006124 <USB_EPStartXfer>
 80039e8:	2300      	movs	r3, #0
 80039ea:	4618      	mov	r0, r3
 80039ec:	3718      	adds	r7, #24
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}

080039f2 <HAL_PCD_EP_GetRxCount>:
 80039f2:	b480      	push	{r7}
 80039f4:	b083      	sub	sp, #12
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	6078      	str	r0, [r7, #4]
 80039fa:	460b      	mov	r3, r1
 80039fc:	70fb      	strb	r3, [r7, #3]
 80039fe:	78fb      	ldrb	r3, [r7, #3]
 8003a00:	f003 020f 	and.w	r2, r3, #15
 8003a04:	6879      	ldr	r1, [r7, #4]
 8003a06:	4613      	mov	r3, r2
 8003a08:	00db      	lsls	r3, r3, #3
 8003a0a:	4413      	add	r3, r2
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	440b      	add	r3, r1
 8003a10:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4618      	mov	r0, r3
 8003a18:	370c      	adds	r7, #12
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bc80      	pop	{r7}
 8003a1e:	4770      	bx	lr

08003a20 <HAL_PCD_EP_Transmit>:
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b086      	sub	sp, #24
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	60f8      	str	r0, [r7, #12]
 8003a28:	607a      	str	r2, [r7, #4]
 8003a2a:	603b      	str	r3, [r7, #0]
 8003a2c:	460b      	mov	r3, r1
 8003a2e:	72fb      	strb	r3, [r7, #11]
 8003a30:	7afb      	ldrb	r3, [r7, #11]
 8003a32:	f003 020f 	and.w	r2, r3, #15
 8003a36:	4613      	mov	r3, r2
 8003a38:	00db      	lsls	r3, r3, #3
 8003a3a:	4413      	add	r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	3338      	adds	r3, #56	; 0x38
 8003a40:	68fa      	ldr	r2, [r7, #12]
 8003a42:	4413      	add	r3, r2
 8003a44:	3304      	adds	r3, #4
 8003a46:	617b      	str	r3, [r7, #20]
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	60da      	str	r2, [r3, #12]
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	683a      	ldr	r2, [r7, #0]
 8003a52:	611a      	str	r2, [r3, #16]
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	2200      	movs	r2, #0
 8003a58:	615a      	str	r2, [r3, #20]
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	705a      	strb	r2, [r3, #1]
 8003a60:	7afb      	ldrb	r3, [r7, #11]
 8003a62:	f003 030f 	and.w	r3, r3, #15
 8003a66:	b2da      	uxtb	r2, r3
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	701a      	strb	r2, [r3, #0]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	6979      	ldr	r1, [r7, #20]
 8003a72:	4618      	mov	r0, r3
 8003a74:	f002 fb56 	bl	8006124 <USB_EPStartXfer>
 8003a78:	2300      	movs	r3, #0
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3718      	adds	r7, #24
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}

08003a82 <HAL_PCD_EP_SetStall>:
 8003a82:	b580      	push	{r7, lr}
 8003a84:	b084      	sub	sp, #16
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	6078      	str	r0, [r7, #4]
 8003a8a:	460b      	mov	r3, r1
 8003a8c:	70fb      	strb	r3, [r7, #3]
 8003a8e:	78fb      	ldrb	r3, [r7, #3]
 8003a90:	f003 020f 	and.w	r2, r3, #15
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d901      	bls.n	8003aa0 <HAL_PCD_EP_SetStall+0x1e>
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e04e      	b.n	8003b3e <HAL_PCD_EP_SetStall+0xbc>
 8003aa0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	da0f      	bge.n	8003ac8 <HAL_PCD_EP_SetStall+0x46>
 8003aa8:	78fb      	ldrb	r3, [r7, #3]
 8003aaa:	f003 020f 	and.w	r2, r3, #15
 8003aae:	4613      	mov	r3, r2
 8003ab0:	00db      	lsls	r3, r3, #3
 8003ab2:	4413      	add	r3, r2
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	3338      	adds	r3, #56	; 0x38
 8003ab8:	687a      	ldr	r2, [r7, #4]
 8003aba:	4413      	add	r3, r2
 8003abc:	3304      	adds	r3, #4
 8003abe:	60fb      	str	r3, [r7, #12]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	705a      	strb	r2, [r3, #1]
 8003ac6:	e00d      	b.n	8003ae4 <HAL_PCD_EP_SetStall+0x62>
 8003ac8:	78fa      	ldrb	r2, [r7, #3]
 8003aca:	4613      	mov	r3, r2
 8003acc:	00db      	lsls	r3, r3, #3
 8003ace:	4413      	add	r3, r2
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	4413      	add	r3, r2
 8003ada:	3304      	adds	r3, #4
 8003adc:	60fb      	str	r3, [r7, #12]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	705a      	strb	r2, [r3, #1]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	709a      	strb	r2, [r3, #2]
 8003aea:	78fb      	ldrb	r3, [r7, #3]
 8003aec:	f003 030f 	and.w	r3, r3, #15
 8003af0:	b2da      	uxtb	r2, r3
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	701a      	strb	r2, [r3, #0]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d101      	bne.n	8003b04 <HAL_PCD_EP_SetStall+0x82>
 8003b00:	2302      	movs	r3, #2
 8003b02:	e01c      	b.n	8003b3e <HAL_PCD_EP_SetStall+0xbc>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	68f9      	ldr	r1, [r7, #12]
 8003b12:	4618      	mov	r0, r3
 8003b14:	f002 fe71 	bl	80067fa <USB_EPSetStall>
 8003b18:	78fb      	ldrb	r3, [r7, #3]
 8003b1a:	f003 030f 	and.w	r3, r3, #15
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d108      	bne.n	8003b34 <HAL_PCD_EP_SetStall+0xb2>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003b2c:	4619      	mov	r1, r3
 8003b2e:	4610      	mov	r0, r2
 8003b30:	f003 f858 	bl	8006be4 <USB_EP0_OutStart>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3710      	adds	r7, #16
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}

08003b46 <HAL_PCD_EP_ClrStall>:
 8003b46:	b580      	push	{r7, lr}
 8003b48:	b084      	sub	sp, #16
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	6078      	str	r0, [r7, #4]
 8003b4e:	460b      	mov	r3, r1
 8003b50:	70fb      	strb	r3, [r7, #3]
 8003b52:	78fb      	ldrb	r3, [r7, #3]
 8003b54:	f003 020f 	and.w	r2, r3, #15
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d901      	bls.n	8003b64 <HAL_PCD_EP_ClrStall+0x1e>
 8003b60:	2301      	movs	r3, #1
 8003b62:	e042      	b.n	8003bea <HAL_PCD_EP_ClrStall+0xa4>
 8003b64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	da0f      	bge.n	8003b8c <HAL_PCD_EP_ClrStall+0x46>
 8003b6c:	78fb      	ldrb	r3, [r7, #3]
 8003b6e:	f003 020f 	and.w	r2, r3, #15
 8003b72:	4613      	mov	r3, r2
 8003b74:	00db      	lsls	r3, r3, #3
 8003b76:	4413      	add	r3, r2
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	3338      	adds	r3, #56	; 0x38
 8003b7c:	687a      	ldr	r2, [r7, #4]
 8003b7e:	4413      	add	r3, r2
 8003b80:	3304      	adds	r3, #4
 8003b82:	60fb      	str	r3, [r7, #12]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2201      	movs	r2, #1
 8003b88:	705a      	strb	r2, [r3, #1]
 8003b8a:	e00f      	b.n	8003bac <HAL_PCD_EP_ClrStall+0x66>
 8003b8c:	78fb      	ldrb	r3, [r7, #3]
 8003b8e:	f003 020f 	and.w	r2, r3, #15
 8003b92:	4613      	mov	r3, r2
 8003b94:	00db      	lsls	r3, r3, #3
 8003b96:	4413      	add	r3, r2
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	4413      	add	r3, r2
 8003ba2:	3304      	adds	r3, #4
 8003ba4:	60fb      	str	r3, [r7, #12]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	705a      	strb	r2, [r3, #1]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	709a      	strb	r2, [r3, #2]
 8003bb2:	78fb      	ldrb	r3, [r7, #3]
 8003bb4:	f003 030f 	and.w	r3, r3, #15
 8003bb8:	b2da      	uxtb	r2, r3
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	701a      	strb	r2, [r3, #0]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d101      	bne.n	8003bcc <HAL_PCD_EP_ClrStall+0x86>
 8003bc8:	2302      	movs	r3, #2
 8003bca:	e00e      	b.n	8003bea <HAL_PCD_EP_ClrStall+0xa4>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	68f9      	ldr	r1, [r7, #12]
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f002 fe7a 	bl	80068d4 <USB_EPClearStall>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8003be8:	2300      	movs	r3, #0
 8003bea:	4618      	mov	r0, r3
 8003bec:	3710      	adds	r7, #16
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}

08003bf2 <HAL_PCD_EP_Abort>:
 8003bf2:	b580      	push	{r7, lr}
 8003bf4:	b084      	sub	sp, #16
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
 8003bfa:	460b      	mov	r3, r1
 8003bfc:	70fb      	strb	r3, [r7, #3]
 8003bfe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	da0c      	bge.n	8003c20 <HAL_PCD_EP_Abort+0x2e>
 8003c06:	78fb      	ldrb	r3, [r7, #3]
 8003c08:	f003 020f 	and.w	r2, r3, #15
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	00db      	lsls	r3, r3, #3
 8003c10:	4413      	add	r3, r2
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	3338      	adds	r3, #56	; 0x38
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	4413      	add	r3, r2
 8003c1a:	3304      	adds	r3, #4
 8003c1c:	60fb      	str	r3, [r7, #12]
 8003c1e:	e00c      	b.n	8003c3a <HAL_PCD_EP_Abort+0x48>
 8003c20:	78fb      	ldrb	r3, [r7, #3]
 8003c22:	f003 020f 	and.w	r2, r3, #15
 8003c26:	4613      	mov	r3, r2
 8003c28:	00db      	lsls	r3, r3, #3
 8003c2a:	4413      	add	r3, r2
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	4413      	add	r3, r2
 8003c36:	3304      	adds	r3, #4
 8003c38:	60fb      	str	r3, [r7, #12]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	68f9      	ldr	r1, [r7, #12]
 8003c40:	4618      	mov	r0, r3
 8003c42:	f002 fca1 	bl	8006588 <USB_EPStopXfer>
 8003c46:	4603      	mov	r3, r0
 8003c48:	72fb      	strb	r3, [r7, #11]
 8003c4a:	7afb      	ldrb	r3, [r7, #11]
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3710      	adds	r7, #16
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <PCD_WriteEmptyTxFifo>:
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b088      	sub	sp, #32
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	617b      	str	r3, [r7, #20]
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	613b      	str	r3, [r7, #16]
 8003c68:	683a      	ldr	r2, [r7, #0]
 8003c6a:	4613      	mov	r3, r2
 8003c6c:	00db      	lsls	r3, r3, #3
 8003c6e:	4413      	add	r3, r2
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	3338      	adds	r3, #56	; 0x38
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	4413      	add	r3, r2
 8003c78:	3304      	adds	r3, #4
 8003c7a:	60fb      	str	r3, [r7, #12]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	695a      	ldr	r2, [r3, #20]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	691b      	ldr	r3, [r3, #16]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d901      	bls.n	8003c8c <PCD_WriteEmptyTxFifo+0x38>
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e067      	b.n	8003d5c <PCD_WriteEmptyTxFifo+0x108>
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	691a      	ldr	r2, [r3, #16]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	695b      	ldr	r3, [r3, #20]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	61fb      	str	r3, [r7, #28]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	69fa      	ldr	r2, [r7, #28]
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d902      	bls.n	8003ca8 <PCD_WriteEmptyTxFifo+0x54>
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	61fb      	str	r3, [r7, #28]
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	3303      	adds	r3, #3
 8003cac:	089b      	lsrs	r3, r3, #2
 8003cae:	61bb      	str	r3, [r7, #24]
 8003cb0:	e026      	b.n	8003d00 <PCD_WriteEmptyTxFifo+0xac>
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	691a      	ldr	r2, [r3, #16]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	695b      	ldr	r3, [r3, #20]
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	61fb      	str	r3, [r7, #28]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	69fa      	ldr	r2, [r7, #28]
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d902      	bls.n	8003cce <PCD_WriteEmptyTxFifo+0x7a>
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	61fb      	str	r3, [r7, #28]
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	3303      	adds	r3, #3
 8003cd2:	089b      	lsrs	r3, r3, #2
 8003cd4:	61bb      	str	r3, [r7, #24]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	68d9      	ldr	r1, [r3, #12]
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	b2da      	uxtb	r2, r3
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	6978      	ldr	r0, [r7, #20]
 8003ce4:	f002 fcf9 	bl	80066da <USB_WritePacket>
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	68da      	ldr	r2, [r3, #12]
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	441a      	add	r2, r3
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	60da      	str	r2, [r3, #12]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	695a      	ldr	r2, [r3, #20]
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	441a      	add	r2, r3
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	615a      	str	r2, [r3, #20]
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	015a      	lsls	r2, r3, #5
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	4413      	add	r3, r2
 8003d08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d0c:	699b      	ldr	r3, [r3, #24]
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	69ba      	ldr	r2, [r7, #24]
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d809      	bhi.n	8003d2a <PCD_WriteEmptyTxFifo+0xd6>
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	695a      	ldr	r2, [r3, #20]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d203      	bcs.n	8003d2a <PCD_WriteEmptyTxFifo+0xd6>
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d1c3      	bne.n	8003cb2 <PCD_WriteEmptyTxFifo+0x5e>
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	691a      	ldr	r2, [r3, #16]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	695b      	ldr	r3, [r3, #20]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d811      	bhi.n	8003d5a <PCD_WriteEmptyTxFifo+0x106>
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	f003 030f 	and.w	r3, r3, #15
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d42:	60bb      	str	r3, [r7, #8]
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	43db      	mvns	r3, r3
 8003d50:	6939      	ldr	r1, [r7, #16]
 8003d52:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d56:	4013      	ands	r3, r2
 8003d58:	634b      	str	r3, [r1, #52]	; 0x34
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3720      	adds	r7, #32
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <PCD_EP_OutXfrComplete_int>:
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b086      	sub	sp, #24
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	6039      	str	r1, [r7, #0]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	617b      	str	r3, [r7, #20]
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	613b      	str	r3, [r7, #16]
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	333c      	adds	r3, #60	; 0x3c
 8003d7c:	3304      	adds	r3, #4
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	60fb      	str	r3, [r7, #12]
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	015a      	lsls	r2, r3, #5
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	4413      	add	r3, r2
 8003d8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	60bb      	str	r3, [r7, #8]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	4a19      	ldr	r2, [pc, #100]	; (8003dfc <PCD_EP_OutXfrComplete_int+0x98>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d124      	bne.n	8003de4 <PCD_EP_OutXfrComplete_int+0x80>
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d00a      	beq.n	8003dba <PCD_EP_OutXfrComplete_int+0x56>
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	015a      	lsls	r2, r3, #5
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	4413      	add	r3, r2
 8003dac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003db0:	461a      	mov	r2, r3
 8003db2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003db6:	6093      	str	r3, [r2, #8]
 8003db8:	e01a      	b.n	8003df0 <PCD_EP_OutXfrComplete_int+0x8c>
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	f003 0320 	and.w	r3, r3, #32
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d008      	beq.n	8003dd6 <PCD_EP_OutXfrComplete_int+0x72>
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	015a      	lsls	r2, r3, #5
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	4413      	add	r3, r2
 8003dcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	2320      	movs	r3, #32
 8003dd4:	6093      	str	r3, [r2, #8]
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	4619      	mov	r1, r3
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f004 fd19 	bl	8008814 <HAL_PCD_DataOutStageCallback>
 8003de2:	e005      	b.n	8003df0 <PCD_EP_OutXfrComplete_int+0x8c>
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	4619      	mov	r1, r3
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f004 fd12 	bl	8008814 <HAL_PCD_DataOutStageCallback>
 8003df0:	2300      	movs	r3, #0
 8003df2:	4618      	mov	r0, r3
 8003df4:	3718      	adds	r7, #24
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	4f54310a 	.word	0x4f54310a

08003e00 <PCD_EP_OutSetupPacket_int>:
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b086      	sub	sp, #24
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	6039      	str	r1, [r7, #0]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	617b      	str	r3, [r7, #20]
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	613b      	str	r3, [r7, #16]
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	333c      	adds	r3, #60	; 0x3c
 8003e18:	3304      	adds	r3, #4
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	60fb      	str	r3, [r7, #12]
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	015a      	lsls	r2, r3, #5
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	4413      	add	r3, r2
 8003e26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	60bb      	str	r3, [r7, #8]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	4a0c      	ldr	r2, [pc, #48]	; (8003e64 <PCD_EP_OutSetupPacket_int+0x64>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d90e      	bls.n	8003e54 <PCD_EP_OutSetupPacket_int+0x54>
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d009      	beq.n	8003e54 <PCD_EP_OutSetupPacket_int+0x54>
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	015a      	lsls	r2, r3, #5
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	4413      	add	r3, r2
 8003e48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e52:	6093      	str	r3, [r2, #8]
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f004 fccb 	bl	80087f0 <HAL_PCD_SetupStageCallback>
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3718      	adds	r7, #24
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}
 8003e64:	4f54300a 	.word	0x4f54300a

08003e68 <HAL_PCDEx_SetTxFiFo>:
 8003e68:	b480      	push	{r7}
 8003e6a:	b085      	sub	sp, #20
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	460b      	mov	r3, r1
 8003e72:	70fb      	strb	r3, [r7, #3]
 8003e74:	4613      	mov	r3, r2
 8003e76:	803b      	strh	r3, [r7, #0]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7e:	60bb      	str	r3, [r7, #8]
 8003e80:	78fb      	ldrb	r3, [r7, #3]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d107      	bne.n	8003e96 <HAL_PCDEx_SetTxFiFo+0x2e>
 8003e86:	883b      	ldrh	r3, [r7, #0]
 8003e88:	0419      	lsls	r1, r3, #16
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	68ba      	ldr	r2, [r7, #8]
 8003e90:	430a      	orrs	r2, r1
 8003e92:	629a      	str	r2, [r3, #40]	; 0x28
 8003e94:	e028      	b.n	8003ee8 <HAL_PCDEx_SetTxFiFo+0x80>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e9c:	0c1b      	lsrs	r3, r3, #16
 8003e9e:	68ba      	ldr	r2, [r7, #8]
 8003ea0:	4413      	add	r3, r2
 8003ea2:	60bb      	str	r3, [r7, #8]
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	73fb      	strb	r3, [r7, #15]
 8003ea8:	e00d      	b.n	8003ec6 <HAL_PCDEx_SetTxFiFo+0x5e>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	7bfb      	ldrb	r3, [r7, #15]
 8003eb0:	3340      	adds	r3, #64	; 0x40
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	4413      	add	r3, r2
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	0c1b      	lsrs	r3, r3, #16
 8003eba:	68ba      	ldr	r2, [r7, #8]
 8003ebc:	4413      	add	r3, r2
 8003ebe:	60bb      	str	r3, [r7, #8]
 8003ec0:	7bfb      	ldrb	r3, [r7, #15]
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	73fb      	strb	r3, [r7, #15]
 8003ec6:	7bfa      	ldrb	r2, [r7, #15]
 8003ec8:	78fb      	ldrb	r3, [r7, #3]
 8003eca:	3b01      	subs	r3, #1
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d3ec      	bcc.n	8003eaa <HAL_PCDEx_SetTxFiFo+0x42>
 8003ed0:	883b      	ldrh	r3, [r7, #0]
 8003ed2:	0418      	lsls	r0, r3, #16
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6819      	ldr	r1, [r3, #0]
 8003ed8:	78fb      	ldrb	r3, [r7, #3]
 8003eda:	3b01      	subs	r3, #1
 8003edc:	68ba      	ldr	r2, [r7, #8]
 8003ede:	4302      	orrs	r2, r0
 8003ee0:	3340      	adds	r3, #64	; 0x40
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	440b      	add	r3, r1
 8003ee6:	605a      	str	r2, [r3, #4]
 8003ee8:	2300      	movs	r3, #0
 8003eea:	4618      	mov	r0, r3
 8003eec:	3714      	adds	r7, #20
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bc80      	pop	{r7}
 8003ef2:	4770      	bx	lr

08003ef4 <HAL_PCDEx_SetRxFiFo>:
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	460b      	mov	r3, r1
 8003efe:	807b      	strh	r3, [r7, #2]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	887a      	ldrh	r2, [r7, #2]
 8003f06:	625a      	str	r2, [r3, #36]	; 0x24
 8003f08:	2300      	movs	r3, #0
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	370c      	adds	r7, #12
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bc80      	pop	{r7}
 8003f12:	4770      	bx	lr

08003f14 <HAL_RCC_OscConfig>:
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b086      	sub	sp, #24
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d101      	bne.n	8003f26 <HAL_RCC_OscConfig+0x12>
 8003f22:	2301      	movs	r3, #1
 8003f24:	e304      	b.n	8004530 <HAL_RCC_OscConfig+0x61c>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0301 	and.w	r3, r3, #1
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	f000 8087 	beq.w	8004042 <HAL_RCC_OscConfig+0x12e>
 8003f34:	4b92      	ldr	r3, [pc, #584]	; (8004180 <HAL_RCC_OscConfig+0x26c>)
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f003 030c 	and.w	r3, r3, #12
 8003f3c:	2b04      	cmp	r3, #4
 8003f3e:	d00c      	beq.n	8003f5a <HAL_RCC_OscConfig+0x46>
 8003f40:	4b8f      	ldr	r3, [pc, #572]	; (8004180 <HAL_RCC_OscConfig+0x26c>)
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f003 030c 	and.w	r3, r3, #12
 8003f48:	2b08      	cmp	r3, #8
 8003f4a:	d112      	bne.n	8003f72 <HAL_RCC_OscConfig+0x5e>
 8003f4c:	4b8c      	ldr	r3, [pc, #560]	; (8004180 <HAL_RCC_OscConfig+0x26c>)
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f58:	d10b      	bne.n	8003f72 <HAL_RCC_OscConfig+0x5e>
 8003f5a:	4b89      	ldr	r3, [pc, #548]	; (8004180 <HAL_RCC_OscConfig+0x26c>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d06c      	beq.n	8004040 <HAL_RCC_OscConfig+0x12c>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d168      	bne.n	8004040 <HAL_RCC_OscConfig+0x12c>
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e2de      	b.n	8004530 <HAL_RCC_OscConfig+0x61c>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f7a:	d106      	bne.n	8003f8a <HAL_RCC_OscConfig+0x76>
 8003f7c:	4b80      	ldr	r3, [pc, #512]	; (8004180 <HAL_RCC_OscConfig+0x26c>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a7f      	ldr	r2, [pc, #508]	; (8004180 <HAL_RCC_OscConfig+0x26c>)
 8003f82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f86:	6013      	str	r3, [r2, #0]
 8003f88:	e02e      	b.n	8003fe8 <HAL_RCC_OscConfig+0xd4>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d10c      	bne.n	8003fac <HAL_RCC_OscConfig+0x98>
 8003f92:	4b7b      	ldr	r3, [pc, #492]	; (8004180 <HAL_RCC_OscConfig+0x26c>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a7a      	ldr	r2, [pc, #488]	; (8004180 <HAL_RCC_OscConfig+0x26c>)
 8003f98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f9c:	6013      	str	r3, [r2, #0]
 8003f9e:	4b78      	ldr	r3, [pc, #480]	; (8004180 <HAL_RCC_OscConfig+0x26c>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a77      	ldr	r2, [pc, #476]	; (8004180 <HAL_RCC_OscConfig+0x26c>)
 8003fa4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fa8:	6013      	str	r3, [r2, #0]
 8003faa:	e01d      	b.n	8003fe8 <HAL_RCC_OscConfig+0xd4>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fb4:	d10c      	bne.n	8003fd0 <HAL_RCC_OscConfig+0xbc>
 8003fb6:	4b72      	ldr	r3, [pc, #456]	; (8004180 <HAL_RCC_OscConfig+0x26c>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a71      	ldr	r2, [pc, #452]	; (8004180 <HAL_RCC_OscConfig+0x26c>)
 8003fbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fc0:	6013      	str	r3, [r2, #0]
 8003fc2:	4b6f      	ldr	r3, [pc, #444]	; (8004180 <HAL_RCC_OscConfig+0x26c>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a6e      	ldr	r2, [pc, #440]	; (8004180 <HAL_RCC_OscConfig+0x26c>)
 8003fc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fcc:	6013      	str	r3, [r2, #0]
 8003fce:	e00b      	b.n	8003fe8 <HAL_RCC_OscConfig+0xd4>
 8003fd0:	4b6b      	ldr	r3, [pc, #428]	; (8004180 <HAL_RCC_OscConfig+0x26c>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a6a      	ldr	r2, [pc, #424]	; (8004180 <HAL_RCC_OscConfig+0x26c>)
 8003fd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fda:	6013      	str	r3, [r2, #0]
 8003fdc:	4b68      	ldr	r3, [pc, #416]	; (8004180 <HAL_RCC_OscConfig+0x26c>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a67      	ldr	r2, [pc, #412]	; (8004180 <HAL_RCC_OscConfig+0x26c>)
 8003fe2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fe6:	6013      	str	r3, [r2, #0]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d013      	beq.n	8004018 <HAL_RCC_OscConfig+0x104>
 8003ff0:	f7fd ff2a 	bl	8001e48 <HAL_GetTick>
 8003ff4:	6138      	str	r0, [r7, #16]
 8003ff6:	e008      	b.n	800400a <HAL_RCC_OscConfig+0xf6>
 8003ff8:	f7fd ff26 	bl	8001e48 <HAL_GetTick>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	2b64      	cmp	r3, #100	; 0x64
 8004004:	d901      	bls.n	800400a <HAL_RCC_OscConfig+0xf6>
 8004006:	2303      	movs	r3, #3
 8004008:	e292      	b.n	8004530 <HAL_RCC_OscConfig+0x61c>
 800400a:	4b5d      	ldr	r3, [pc, #372]	; (8004180 <HAL_RCC_OscConfig+0x26c>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004012:	2b00      	cmp	r3, #0
 8004014:	d0f0      	beq.n	8003ff8 <HAL_RCC_OscConfig+0xe4>
 8004016:	e014      	b.n	8004042 <HAL_RCC_OscConfig+0x12e>
 8004018:	f7fd ff16 	bl	8001e48 <HAL_GetTick>
 800401c:	6138      	str	r0, [r7, #16]
 800401e:	e008      	b.n	8004032 <HAL_RCC_OscConfig+0x11e>
 8004020:	f7fd ff12 	bl	8001e48 <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	2b64      	cmp	r3, #100	; 0x64
 800402c:	d901      	bls.n	8004032 <HAL_RCC_OscConfig+0x11e>
 800402e:	2303      	movs	r3, #3
 8004030:	e27e      	b.n	8004530 <HAL_RCC_OscConfig+0x61c>
 8004032:	4b53      	ldr	r3, [pc, #332]	; (8004180 <HAL_RCC_OscConfig+0x26c>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d1f0      	bne.n	8004020 <HAL_RCC_OscConfig+0x10c>
 800403e:	e000      	b.n	8004042 <HAL_RCC_OscConfig+0x12e>
 8004040:	bf00      	nop
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0302 	and.w	r3, r3, #2
 800404a:	2b00      	cmp	r3, #0
 800404c:	d063      	beq.n	8004116 <HAL_RCC_OscConfig+0x202>
 800404e:	4b4c      	ldr	r3, [pc, #304]	; (8004180 <HAL_RCC_OscConfig+0x26c>)
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	f003 030c 	and.w	r3, r3, #12
 8004056:	2b00      	cmp	r3, #0
 8004058:	d00b      	beq.n	8004072 <HAL_RCC_OscConfig+0x15e>
 800405a:	4b49      	ldr	r3, [pc, #292]	; (8004180 <HAL_RCC_OscConfig+0x26c>)
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	f003 030c 	and.w	r3, r3, #12
 8004062:	2b08      	cmp	r3, #8
 8004064:	d11c      	bne.n	80040a0 <HAL_RCC_OscConfig+0x18c>
 8004066:	4b46      	ldr	r3, [pc, #280]	; (8004180 <HAL_RCC_OscConfig+0x26c>)
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d116      	bne.n	80040a0 <HAL_RCC_OscConfig+0x18c>
 8004072:	4b43      	ldr	r3, [pc, #268]	; (8004180 <HAL_RCC_OscConfig+0x26c>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0302 	and.w	r3, r3, #2
 800407a:	2b00      	cmp	r3, #0
 800407c:	d005      	beq.n	800408a <HAL_RCC_OscConfig+0x176>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	695b      	ldr	r3, [r3, #20]
 8004082:	2b01      	cmp	r3, #1
 8004084:	d001      	beq.n	800408a <HAL_RCC_OscConfig+0x176>
 8004086:	2301      	movs	r3, #1
 8004088:	e252      	b.n	8004530 <HAL_RCC_OscConfig+0x61c>
 800408a:	4b3d      	ldr	r3, [pc, #244]	; (8004180 <HAL_RCC_OscConfig+0x26c>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	699b      	ldr	r3, [r3, #24]
 8004096:	00db      	lsls	r3, r3, #3
 8004098:	4939      	ldr	r1, [pc, #228]	; (8004180 <HAL_RCC_OscConfig+0x26c>)
 800409a:	4313      	orrs	r3, r2
 800409c:	600b      	str	r3, [r1, #0]
 800409e:	e03a      	b.n	8004116 <HAL_RCC_OscConfig+0x202>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	695b      	ldr	r3, [r3, #20]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d020      	beq.n	80040ea <HAL_RCC_OscConfig+0x1d6>
 80040a8:	4b36      	ldr	r3, [pc, #216]	; (8004184 <HAL_RCC_OscConfig+0x270>)
 80040aa:	2201      	movs	r2, #1
 80040ac:	601a      	str	r2, [r3, #0]
 80040ae:	f7fd fecb 	bl	8001e48 <HAL_GetTick>
 80040b2:	6138      	str	r0, [r7, #16]
 80040b4:	e008      	b.n	80040c8 <HAL_RCC_OscConfig+0x1b4>
 80040b6:	f7fd fec7 	bl	8001e48 <HAL_GetTick>
 80040ba:	4602      	mov	r2, r0
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	1ad3      	subs	r3, r2, r3
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d901      	bls.n	80040c8 <HAL_RCC_OscConfig+0x1b4>
 80040c4:	2303      	movs	r3, #3
 80040c6:	e233      	b.n	8004530 <HAL_RCC_OscConfig+0x61c>
 80040c8:	4b2d      	ldr	r3, [pc, #180]	; (8004180 <HAL_RCC_OscConfig+0x26c>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0302 	and.w	r3, r3, #2
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d0f0      	beq.n	80040b6 <HAL_RCC_OscConfig+0x1a2>
 80040d4:	4b2a      	ldr	r3, [pc, #168]	; (8004180 <HAL_RCC_OscConfig+0x26c>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	699b      	ldr	r3, [r3, #24]
 80040e0:	00db      	lsls	r3, r3, #3
 80040e2:	4927      	ldr	r1, [pc, #156]	; (8004180 <HAL_RCC_OscConfig+0x26c>)
 80040e4:	4313      	orrs	r3, r2
 80040e6:	600b      	str	r3, [r1, #0]
 80040e8:	e015      	b.n	8004116 <HAL_RCC_OscConfig+0x202>
 80040ea:	4b26      	ldr	r3, [pc, #152]	; (8004184 <HAL_RCC_OscConfig+0x270>)
 80040ec:	2200      	movs	r2, #0
 80040ee:	601a      	str	r2, [r3, #0]
 80040f0:	f7fd feaa 	bl	8001e48 <HAL_GetTick>
 80040f4:	6138      	str	r0, [r7, #16]
 80040f6:	e008      	b.n	800410a <HAL_RCC_OscConfig+0x1f6>
 80040f8:	f7fd fea6 	bl	8001e48 <HAL_GetTick>
 80040fc:	4602      	mov	r2, r0
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	2b02      	cmp	r3, #2
 8004104:	d901      	bls.n	800410a <HAL_RCC_OscConfig+0x1f6>
 8004106:	2303      	movs	r3, #3
 8004108:	e212      	b.n	8004530 <HAL_RCC_OscConfig+0x61c>
 800410a:	4b1d      	ldr	r3, [pc, #116]	; (8004180 <HAL_RCC_OscConfig+0x26c>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0302 	and.w	r3, r3, #2
 8004112:	2b00      	cmp	r3, #0
 8004114:	d1f0      	bne.n	80040f8 <HAL_RCC_OscConfig+0x1e4>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 0308 	and.w	r3, r3, #8
 800411e:	2b00      	cmp	r3, #0
 8004120:	d03a      	beq.n	8004198 <HAL_RCC_OscConfig+0x284>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	69db      	ldr	r3, [r3, #28]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d019      	beq.n	800415e <HAL_RCC_OscConfig+0x24a>
 800412a:	4b17      	ldr	r3, [pc, #92]	; (8004188 <HAL_RCC_OscConfig+0x274>)
 800412c:	2201      	movs	r2, #1
 800412e:	601a      	str	r2, [r3, #0]
 8004130:	f7fd fe8a 	bl	8001e48 <HAL_GetTick>
 8004134:	6138      	str	r0, [r7, #16]
 8004136:	e008      	b.n	800414a <HAL_RCC_OscConfig+0x236>
 8004138:	f7fd fe86 	bl	8001e48 <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	2b02      	cmp	r3, #2
 8004144:	d901      	bls.n	800414a <HAL_RCC_OscConfig+0x236>
 8004146:	2303      	movs	r3, #3
 8004148:	e1f2      	b.n	8004530 <HAL_RCC_OscConfig+0x61c>
 800414a:	4b0d      	ldr	r3, [pc, #52]	; (8004180 <HAL_RCC_OscConfig+0x26c>)
 800414c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414e:	f003 0302 	and.w	r3, r3, #2
 8004152:	2b00      	cmp	r3, #0
 8004154:	d0f0      	beq.n	8004138 <HAL_RCC_OscConfig+0x224>
 8004156:	2001      	movs	r0, #1
 8004158:	f000 fba2 	bl	80048a0 <RCC_Delay>
 800415c:	e01c      	b.n	8004198 <HAL_RCC_OscConfig+0x284>
 800415e:	4b0a      	ldr	r3, [pc, #40]	; (8004188 <HAL_RCC_OscConfig+0x274>)
 8004160:	2200      	movs	r2, #0
 8004162:	601a      	str	r2, [r3, #0]
 8004164:	f7fd fe70 	bl	8001e48 <HAL_GetTick>
 8004168:	6138      	str	r0, [r7, #16]
 800416a:	e00f      	b.n	800418c <HAL_RCC_OscConfig+0x278>
 800416c:	f7fd fe6c 	bl	8001e48 <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	2b02      	cmp	r3, #2
 8004178:	d908      	bls.n	800418c <HAL_RCC_OscConfig+0x278>
 800417a:	2303      	movs	r3, #3
 800417c:	e1d8      	b.n	8004530 <HAL_RCC_OscConfig+0x61c>
 800417e:	bf00      	nop
 8004180:	40021000 	.word	0x40021000
 8004184:	42420000 	.word	0x42420000
 8004188:	42420480 	.word	0x42420480
 800418c:	4b9b      	ldr	r3, [pc, #620]	; (80043fc <HAL_RCC_OscConfig+0x4e8>)
 800418e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004190:	f003 0302 	and.w	r3, r3, #2
 8004194:	2b00      	cmp	r3, #0
 8004196:	d1e9      	bne.n	800416c <HAL_RCC_OscConfig+0x258>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 0304 	and.w	r3, r3, #4
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	f000 80a6 	beq.w	80042f2 <HAL_RCC_OscConfig+0x3de>
 80041a6:	2300      	movs	r3, #0
 80041a8:	75fb      	strb	r3, [r7, #23]
 80041aa:	4b94      	ldr	r3, [pc, #592]	; (80043fc <HAL_RCC_OscConfig+0x4e8>)
 80041ac:	69db      	ldr	r3, [r3, #28]
 80041ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d10d      	bne.n	80041d2 <HAL_RCC_OscConfig+0x2be>
 80041b6:	4b91      	ldr	r3, [pc, #580]	; (80043fc <HAL_RCC_OscConfig+0x4e8>)
 80041b8:	69db      	ldr	r3, [r3, #28]
 80041ba:	4a90      	ldr	r2, [pc, #576]	; (80043fc <HAL_RCC_OscConfig+0x4e8>)
 80041bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041c0:	61d3      	str	r3, [r2, #28]
 80041c2:	4b8e      	ldr	r3, [pc, #568]	; (80043fc <HAL_RCC_OscConfig+0x4e8>)
 80041c4:	69db      	ldr	r3, [r3, #28]
 80041c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041ca:	60bb      	str	r3, [r7, #8]
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	2301      	movs	r3, #1
 80041d0:	75fb      	strb	r3, [r7, #23]
 80041d2:	4b8b      	ldr	r3, [pc, #556]	; (8004400 <HAL_RCC_OscConfig+0x4ec>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d118      	bne.n	8004210 <HAL_RCC_OscConfig+0x2fc>
 80041de:	4b88      	ldr	r3, [pc, #544]	; (8004400 <HAL_RCC_OscConfig+0x4ec>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a87      	ldr	r2, [pc, #540]	; (8004400 <HAL_RCC_OscConfig+0x4ec>)
 80041e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041e8:	6013      	str	r3, [r2, #0]
 80041ea:	f7fd fe2d 	bl	8001e48 <HAL_GetTick>
 80041ee:	6138      	str	r0, [r7, #16]
 80041f0:	e008      	b.n	8004204 <HAL_RCC_OscConfig+0x2f0>
 80041f2:	f7fd fe29 	bl	8001e48 <HAL_GetTick>
 80041f6:	4602      	mov	r2, r0
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	2b64      	cmp	r3, #100	; 0x64
 80041fe:	d901      	bls.n	8004204 <HAL_RCC_OscConfig+0x2f0>
 8004200:	2303      	movs	r3, #3
 8004202:	e195      	b.n	8004530 <HAL_RCC_OscConfig+0x61c>
 8004204:	4b7e      	ldr	r3, [pc, #504]	; (8004400 <HAL_RCC_OscConfig+0x4ec>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800420c:	2b00      	cmp	r3, #0
 800420e:	d0f0      	beq.n	80041f2 <HAL_RCC_OscConfig+0x2de>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	691b      	ldr	r3, [r3, #16]
 8004214:	2b01      	cmp	r3, #1
 8004216:	d106      	bne.n	8004226 <HAL_RCC_OscConfig+0x312>
 8004218:	4b78      	ldr	r3, [pc, #480]	; (80043fc <HAL_RCC_OscConfig+0x4e8>)
 800421a:	6a1b      	ldr	r3, [r3, #32]
 800421c:	4a77      	ldr	r2, [pc, #476]	; (80043fc <HAL_RCC_OscConfig+0x4e8>)
 800421e:	f043 0301 	orr.w	r3, r3, #1
 8004222:	6213      	str	r3, [r2, #32]
 8004224:	e02d      	b.n	8004282 <HAL_RCC_OscConfig+0x36e>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d10c      	bne.n	8004248 <HAL_RCC_OscConfig+0x334>
 800422e:	4b73      	ldr	r3, [pc, #460]	; (80043fc <HAL_RCC_OscConfig+0x4e8>)
 8004230:	6a1b      	ldr	r3, [r3, #32]
 8004232:	4a72      	ldr	r2, [pc, #456]	; (80043fc <HAL_RCC_OscConfig+0x4e8>)
 8004234:	f023 0301 	bic.w	r3, r3, #1
 8004238:	6213      	str	r3, [r2, #32]
 800423a:	4b70      	ldr	r3, [pc, #448]	; (80043fc <HAL_RCC_OscConfig+0x4e8>)
 800423c:	6a1b      	ldr	r3, [r3, #32]
 800423e:	4a6f      	ldr	r2, [pc, #444]	; (80043fc <HAL_RCC_OscConfig+0x4e8>)
 8004240:	f023 0304 	bic.w	r3, r3, #4
 8004244:	6213      	str	r3, [r2, #32]
 8004246:	e01c      	b.n	8004282 <HAL_RCC_OscConfig+0x36e>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	691b      	ldr	r3, [r3, #16]
 800424c:	2b05      	cmp	r3, #5
 800424e:	d10c      	bne.n	800426a <HAL_RCC_OscConfig+0x356>
 8004250:	4b6a      	ldr	r3, [pc, #424]	; (80043fc <HAL_RCC_OscConfig+0x4e8>)
 8004252:	6a1b      	ldr	r3, [r3, #32]
 8004254:	4a69      	ldr	r2, [pc, #420]	; (80043fc <HAL_RCC_OscConfig+0x4e8>)
 8004256:	f043 0304 	orr.w	r3, r3, #4
 800425a:	6213      	str	r3, [r2, #32]
 800425c:	4b67      	ldr	r3, [pc, #412]	; (80043fc <HAL_RCC_OscConfig+0x4e8>)
 800425e:	6a1b      	ldr	r3, [r3, #32]
 8004260:	4a66      	ldr	r2, [pc, #408]	; (80043fc <HAL_RCC_OscConfig+0x4e8>)
 8004262:	f043 0301 	orr.w	r3, r3, #1
 8004266:	6213      	str	r3, [r2, #32]
 8004268:	e00b      	b.n	8004282 <HAL_RCC_OscConfig+0x36e>
 800426a:	4b64      	ldr	r3, [pc, #400]	; (80043fc <HAL_RCC_OscConfig+0x4e8>)
 800426c:	6a1b      	ldr	r3, [r3, #32]
 800426e:	4a63      	ldr	r2, [pc, #396]	; (80043fc <HAL_RCC_OscConfig+0x4e8>)
 8004270:	f023 0301 	bic.w	r3, r3, #1
 8004274:	6213      	str	r3, [r2, #32]
 8004276:	4b61      	ldr	r3, [pc, #388]	; (80043fc <HAL_RCC_OscConfig+0x4e8>)
 8004278:	6a1b      	ldr	r3, [r3, #32]
 800427a:	4a60      	ldr	r2, [pc, #384]	; (80043fc <HAL_RCC_OscConfig+0x4e8>)
 800427c:	f023 0304 	bic.w	r3, r3, #4
 8004280:	6213      	str	r3, [r2, #32]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	691b      	ldr	r3, [r3, #16]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d015      	beq.n	80042b6 <HAL_RCC_OscConfig+0x3a2>
 800428a:	f7fd fddd 	bl	8001e48 <HAL_GetTick>
 800428e:	6138      	str	r0, [r7, #16]
 8004290:	e00a      	b.n	80042a8 <HAL_RCC_OscConfig+0x394>
 8004292:	f7fd fdd9 	bl	8001e48 <HAL_GetTick>
 8004296:	4602      	mov	r2, r0
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	f241 3288 	movw	r2, #5000	; 0x1388
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d901      	bls.n	80042a8 <HAL_RCC_OscConfig+0x394>
 80042a4:	2303      	movs	r3, #3
 80042a6:	e143      	b.n	8004530 <HAL_RCC_OscConfig+0x61c>
 80042a8:	4b54      	ldr	r3, [pc, #336]	; (80043fc <HAL_RCC_OscConfig+0x4e8>)
 80042aa:	6a1b      	ldr	r3, [r3, #32]
 80042ac:	f003 0302 	and.w	r3, r3, #2
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d0ee      	beq.n	8004292 <HAL_RCC_OscConfig+0x37e>
 80042b4:	e014      	b.n	80042e0 <HAL_RCC_OscConfig+0x3cc>
 80042b6:	f7fd fdc7 	bl	8001e48 <HAL_GetTick>
 80042ba:	6138      	str	r0, [r7, #16]
 80042bc:	e00a      	b.n	80042d4 <HAL_RCC_OscConfig+0x3c0>
 80042be:	f7fd fdc3 	bl	8001e48 <HAL_GetTick>
 80042c2:	4602      	mov	r2, r0
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d901      	bls.n	80042d4 <HAL_RCC_OscConfig+0x3c0>
 80042d0:	2303      	movs	r3, #3
 80042d2:	e12d      	b.n	8004530 <HAL_RCC_OscConfig+0x61c>
 80042d4:	4b49      	ldr	r3, [pc, #292]	; (80043fc <HAL_RCC_OscConfig+0x4e8>)
 80042d6:	6a1b      	ldr	r3, [r3, #32]
 80042d8:	f003 0302 	and.w	r3, r3, #2
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d1ee      	bne.n	80042be <HAL_RCC_OscConfig+0x3aa>
 80042e0:	7dfb      	ldrb	r3, [r7, #23]
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d105      	bne.n	80042f2 <HAL_RCC_OscConfig+0x3de>
 80042e6:	4b45      	ldr	r3, [pc, #276]	; (80043fc <HAL_RCC_OscConfig+0x4e8>)
 80042e8:	69db      	ldr	r3, [r3, #28]
 80042ea:	4a44      	ldr	r2, [pc, #272]	; (80043fc <HAL_RCC_OscConfig+0x4e8>)
 80042ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042f0:	61d3      	str	r3, [r2, #28]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	f000 808c 	beq.w	8004414 <HAL_RCC_OscConfig+0x500>
 80042fc:	4b3f      	ldr	r3, [pc, #252]	; (80043fc <HAL_RCC_OscConfig+0x4e8>)
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004304:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004308:	d10e      	bne.n	8004328 <HAL_RCC_OscConfig+0x414>
 800430a:	4b3c      	ldr	r3, [pc, #240]	; (80043fc <HAL_RCC_OscConfig+0x4e8>)
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	f003 030c 	and.w	r3, r3, #12
 8004312:	2b08      	cmp	r3, #8
 8004314:	d108      	bne.n	8004328 <HAL_RCC_OscConfig+0x414>
 8004316:	4b39      	ldr	r3, [pc, #228]	; (80043fc <HAL_RCC_OscConfig+0x4e8>)
 8004318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800431a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800431e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004322:	d101      	bne.n	8004328 <HAL_RCC_OscConfig+0x414>
 8004324:	2301      	movs	r3, #1
 8004326:	e103      	b.n	8004530 <HAL_RCC_OscConfig+0x61c>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800432c:	2b02      	cmp	r3, #2
 800432e:	d14e      	bne.n	80043ce <HAL_RCC_OscConfig+0x4ba>
 8004330:	4b32      	ldr	r3, [pc, #200]	; (80043fc <HAL_RCC_OscConfig+0x4e8>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004338:	2b00      	cmp	r3, #0
 800433a:	d009      	beq.n	8004350 <HAL_RCC_OscConfig+0x43c>
 800433c:	4b2f      	ldr	r3, [pc, #188]	; (80043fc <HAL_RCC_OscConfig+0x4e8>)
 800433e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004340:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004348:	429a      	cmp	r2, r3
 800434a:	d001      	beq.n	8004350 <HAL_RCC_OscConfig+0x43c>
 800434c:	2301      	movs	r3, #1
 800434e:	e0ef      	b.n	8004530 <HAL_RCC_OscConfig+0x61c>
 8004350:	4b2c      	ldr	r3, [pc, #176]	; (8004404 <HAL_RCC_OscConfig+0x4f0>)
 8004352:	2200      	movs	r2, #0
 8004354:	601a      	str	r2, [r3, #0]
 8004356:	f7fd fd77 	bl	8001e48 <HAL_GetTick>
 800435a:	6138      	str	r0, [r7, #16]
 800435c:	e008      	b.n	8004370 <HAL_RCC_OscConfig+0x45c>
 800435e:	f7fd fd73 	bl	8001e48 <HAL_GetTick>
 8004362:	4602      	mov	r2, r0
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	1ad3      	subs	r3, r2, r3
 8004368:	2b64      	cmp	r3, #100	; 0x64
 800436a:	d901      	bls.n	8004370 <HAL_RCC_OscConfig+0x45c>
 800436c:	2303      	movs	r3, #3
 800436e:	e0df      	b.n	8004530 <HAL_RCC_OscConfig+0x61c>
 8004370:	4b22      	ldr	r3, [pc, #136]	; (80043fc <HAL_RCC_OscConfig+0x4e8>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004378:	2b00      	cmp	r3, #0
 800437a:	d1f0      	bne.n	800435e <HAL_RCC_OscConfig+0x44a>
 800437c:	4b1f      	ldr	r3, [pc, #124]	; (80043fc <HAL_RCC_OscConfig+0x4e8>)
 800437e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004380:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004388:	491c      	ldr	r1, [pc, #112]	; (80043fc <HAL_RCC_OscConfig+0x4e8>)
 800438a:	4313      	orrs	r3, r2
 800438c:	62cb      	str	r3, [r1, #44]	; 0x2c
 800438e:	4b1b      	ldr	r3, [pc, #108]	; (80043fc <HAL_RCC_OscConfig+0x4e8>)
 8004390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004392:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800439a:	4918      	ldr	r1, [pc, #96]	; (80043fc <HAL_RCC_OscConfig+0x4e8>)
 800439c:	4313      	orrs	r3, r2
 800439e:	62cb      	str	r3, [r1, #44]	; 0x2c
 80043a0:	4b18      	ldr	r3, [pc, #96]	; (8004404 <HAL_RCC_OscConfig+0x4f0>)
 80043a2:	2201      	movs	r2, #1
 80043a4:	601a      	str	r2, [r3, #0]
 80043a6:	f7fd fd4f 	bl	8001e48 <HAL_GetTick>
 80043aa:	6138      	str	r0, [r7, #16]
 80043ac:	e008      	b.n	80043c0 <HAL_RCC_OscConfig+0x4ac>
 80043ae:	f7fd fd4b 	bl	8001e48 <HAL_GetTick>
 80043b2:	4602      	mov	r2, r0
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	2b64      	cmp	r3, #100	; 0x64
 80043ba:	d901      	bls.n	80043c0 <HAL_RCC_OscConfig+0x4ac>
 80043bc:	2303      	movs	r3, #3
 80043be:	e0b7      	b.n	8004530 <HAL_RCC_OscConfig+0x61c>
 80043c0:	4b0e      	ldr	r3, [pc, #56]	; (80043fc <HAL_RCC_OscConfig+0x4e8>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d0f0      	beq.n	80043ae <HAL_RCC_OscConfig+0x49a>
 80043cc:	e022      	b.n	8004414 <HAL_RCC_OscConfig+0x500>
 80043ce:	4b0b      	ldr	r3, [pc, #44]	; (80043fc <HAL_RCC_OscConfig+0x4e8>)
 80043d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d2:	4a0a      	ldr	r2, [pc, #40]	; (80043fc <HAL_RCC_OscConfig+0x4e8>)
 80043d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043d8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80043da:	4b0a      	ldr	r3, [pc, #40]	; (8004404 <HAL_RCC_OscConfig+0x4f0>)
 80043dc:	2200      	movs	r2, #0
 80043de:	601a      	str	r2, [r3, #0]
 80043e0:	f7fd fd32 	bl	8001e48 <HAL_GetTick>
 80043e4:	6138      	str	r0, [r7, #16]
 80043e6:	e00f      	b.n	8004408 <HAL_RCC_OscConfig+0x4f4>
 80043e8:	f7fd fd2e 	bl	8001e48 <HAL_GetTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	2b64      	cmp	r3, #100	; 0x64
 80043f4:	d908      	bls.n	8004408 <HAL_RCC_OscConfig+0x4f4>
 80043f6:	2303      	movs	r3, #3
 80043f8:	e09a      	b.n	8004530 <HAL_RCC_OscConfig+0x61c>
 80043fa:	bf00      	nop
 80043fc:	40021000 	.word	0x40021000
 8004400:	40007000 	.word	0x40007000
 8004404:	42420068 	.word	0x42420068
 8004408:	4b4b      	ldr	r3, [pc, #300]	; (8004538 <HAL_RCC_OscConfig+0x624>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004410:	2b00      	cmp	r3, #0
 8004412:	d1e9      	bne.n	80043e8 <HAL_RCC_OscConfig+0x4d4>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6a1b      	ldr	r3, [r3, #32]
 8004418:	2b00      	cmp	r3, #0
 800441a:	f000 8088 	beq.w	800452e <HAL_RCC_OscConfig+0x61a>
 800441e:	4b46      	ldr	r3, [pc, #280]	; (8004538 <HAL_RCC_OscConfig+0x624>)
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	f003 030c 	and.w	r3, r3, #12
 8004426:	2b08      	cmp	r3, #8
 8004428:	d068      	beq.n	80044fc <HAL_RCC_OscConfig+0x5e8>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a1b      	ldr	r3, [r3, #32]
 800442e:	2b02      	cmp	r3, #2
 8004430:	d14d      	bne.n	80044ce <HAL_RCC_OscConfig+0x5ba>
 8004432:	4b42      	ldr	r3, [pc, #264]	; (800453c <HAL_RCC_OscConfig+0x628>)
 8004434:	2200      	movs	r2, #0
 8004436:	601a      	str	r2, [r3, #0]
 8004438:	f7fd fd06 	bl	8001e48 <HAL_GetTick>
 800443c:	6138      	str	r0, [r7, #16]
 800443e:	e008      	b.n	8004452 <HAL_RCC_OscConfig+0x53e>
 8004440:	f7fd fd02 	bl	8001e48 <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	2b02      	cmp	r3, #2
 800444c:	d901      	bls.n	8004452 <HAL_RCC_OscConfig+0x53e>
 800444e:	2303      	movs	r3, #3
 8004450:	e06e      	b.n	8004530 <HAL_RCC_OscConfig+0x61c>
 8004452:	4b39      	ldr	r3, [pc, #228]	; (8004538 <HAL_RCC_OscConfig+0x624>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d1f0      	bne.n	8004440 <HAL_RCC_OscConfig+0x52c>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004462:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004466:	d10f      	bne.n	8004488 <HAL_RCC_OscConfig+0x574>
 8004468:	4b33      	ldr	r3, [pc, #204]	; (8004538 <HAL_RCC_OscConfig+0x624>)
 800446a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	4931      	ldr	r1, [pc, #196]	; (8004538 <HAL_RCC_OscConfig+0x624>)
 8004472:	4313      	orrs	r3, r2
 8004474:	62cb      	str	r3, [r1, #44]	; 0x2c
 8004476:	4b30      	ldr	r3, [pc, #192]	; (8004538 <HAL_RCC_OscConfig+0x624>)
 8004478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800447a:	f023 020f 	bic.w	r2, r3, #15
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	492d      	ldr	r1, [pc, #180]	; (8004538 <HAL_RCC_OscConfig+0x624>)
 8004484:	4313      	orrs	r3, r2
 8004486:	62cb      	str	r3, [r1, #44]	; 0x2c
 8004488:	4b2b      	ldr	r3, [pc, #172]	; (8004538 <HAL_RCC_OscConfig+0x624>)
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004498:	430b      	orrs	r3, r1
 800449a:	4927      	ldr	r1, [pc, #156]	; (8004538 <HAL_RCC_OscConfig+0x624>)
 800449c:	4313      	orrs	r3, r2
 800449e:	604b      	str	r3, [r1, #4]
 80044a0:	4b26      	ldr	r3, [pc, #152]	; (800453c <HAL_RCC_OscConfig+0x628>)
 80044a2:	2201      	movs	r2, #1
 80044a4:	601a      	str	r2, [r3, #0]
 80044a6:	f7fd fccf 	bl	8001e48 <HAL_GetTick>
 80044aa:	6138      	str	r0, [r7, #16]
 80044ac:	e008      	b.n	80044c0 <HAL_RCC_OscConfig+0x5ac>
 80044ae:	f7fd fccb 	bl	8001e48 <HAL_GetTick>
 80044b2:	4602      	mov	r2, r0
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	2b02      	cmp	r3, #2
 80044ba:	d901      	bls.n	80044c0 <HAL_RCC_OscConfig+0x5ac>
 80044bc:	2303      	movs	r3, #3
 80044be:	e037      	b.n	8004530 <HAL_RCC_OscConfig+0x61c>
 80044c0:	4b1d      	ldr	r3, [pc, #116]	; (8004538 <HAL_RCC_OscConfig+0x624>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d0f0      	beq.n	80044ae <HAL_RCC_OscConfig+0x59a>
 80044cc:	e02f      	b.n	800452e <HAL_RCC_OscConfig+0x61a>
 80044ce:	4b1b      	ldr	r3, [pc, #108]	; (800453c <HAL_RCC_OscConfig+0x628>)
 80044d0:	2200      	movs	r2, #0
 80044d2:	601a      	str	r2, [r3, #0]
 80044d4:	f7fd fcb8 	bl	8001e48 <HAL_GetTick>
 80044d8:	6138      	str	r0, [r7, #16]
 80044da:	e008      	b.n	80044ee <HAL_RCC_OscConfig+0x5da>
 80044dc:	f7fd fcb4 	bl	8001e48 <HAL_GetTick>
 80044e0:	4602      	mov	r2, r0
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d901      	bls.n	80044ee <HAL_RCC_OscConfig+0x5da>
 80044ea:	2303      	movs	r3, #3
 80044ec:	e020      	b.n	8004530 <HAL_RCC_OscConfig+0x61c>
 80044ee:	4b12      	ldr	r3, [pc, #72]	; (8004538 <HAL_RCC_OscConfig+0x624>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d1f0      	bne.n	80044dc <HAL_RCC_OscConfig+0x5c8>
 80044fa:	e018      	b.n	800452e <HAL_RCC_OscConfig+0x61a>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6a1b      	ldr	r3, [r3, #32]
 8004500:	2b01      	cmp	r3, #1
 8004502:	d101      	bne.n	8004508 <HAL_RCC_OscConfig+0x5f4>
 8004504:	2301      	movs	r3, #1
 8004506:	e013      	b.n	8004530 <HAL_RCC_OscConfig+0x61c>
 8004508:	4b0b      	ldr	r3, [pc, #44]	; (8004538 <HAL_RCC_OscConfig+0x624>)
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	60fb      	str	r3, [r7, #12]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004518:	429a      	cmp	r2, r3
 800451a:	d106      	bne.n	800452a <HAL_RCC_OscConfig+0x616>
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004526:	429a      	cmp	r2, r3
 8004528:	d001      	beq.n	800452e <HAL_RCC_OscConfig+0x61a>
 800452a:	2301      	movs	r3, #1
 800452c:	e000      	b.n	8004530 <HAL_RCC_OscConfig+0x61c>
 800452e:	2300      	movs	r3, #0
 8004530:	4618      	mov	r0, r3
 8004532:	3718      	adds	r7, #24
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}
 8004538:	40021000 	.word	0x40021000
 800453c:	42420060 	.word	0x42420060

08004540 <HAL_RCC_ClockConfig>:
 8004540:	b580      	push	{r7, lr}
 8004542:	b084      	sub	sp, #16
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	6039      	str	r1, [r7, #0]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d101      	bne.n	8004554 <HAL_RCC_ClockConfig+0x14>
 8004550:	2301      	movs	r3, #1
 8004552:	e0d0      	b.n	80046f6 <HAL_RCC_ClockConfig+0x1b6>
 8004554:	4b6a      	ldr	r3, [pc, #424]	; (8004700 <HAL_RCC_ClockConfig+0x1c0>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 0307 	and.w	r3, r3, #7
 800455c:	683a      	ldr	r2, [r7, #0]
 800455e:	429a      	cmp	r2, r3
 8004560:	d910      	bls.n	8004584 <HAL_RCC_ClockConfig+0x44>
 8004562:	4b67      	ldr	r3, [pc, #412]	; (8004700 <HAL_RCC_ClockConfig+0x1c0>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f023 0207 	bic.w	r2, r3, #7
 800456a:	4965      	ldr	r1, [pc, #404]	; (8004700 <HAL_RCC_ClockConfig+0x1c0>)
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	4313      	orrs	r3, r2
 8004570:	600b      	str	r3, [r1, #0]
 8004572:	4b63      	ldr	r3, [pc, #396]	; (8004700 <HAL_RCC_ClockConfig+0x1c0>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0307 	and.w	r3, r3, #7
 800457a:	683a      	ldr	r2, [r7, #0]
 800457c:	429a      	cmp	r2, r3
 800457e:	d001      	beq.n	8004584 <HAL_RCC_ClockConfig+0x44>
 8004580:	2301      	movs	r3, #1
 8004582:	e0b8      	b.n	80046f6 <HAL_RCC_ClockConfig+0x1b6>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0302 	and.w	r3, r3, #2
 800458c:	2b00      	cmp	r3, #0
 800458e:	d020      	beq.n	80045d2 <HAL_RCC_ClockConfig+0x92>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 0304 	and.w	r3, r3, #4
 8004598:	2b00      	cmp	r3, #0
 800459a:	d005      	beq.n	80045a8 <HAL_RCC_ClockConfig+0x68>
 800459c:	4b59      	ldr	r3, [pc, #356]	; (8004704 <HAL_RCC_ClockConfig+0x1c4>)
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	4a58      	ldr	r2, [pc, #352]	; (8004704 <HAL_RCC_ClockConfig+0x1c4>)
 80045a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80045a6:	6053      	str	r3, [r2, #4]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 0308 	and.w	r3, r3, #8
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d005      	beq.n	80045c0 <HAL_RCC_ClockConfig+0x80>
 80045b4:	4b53      	ldr	r3, [pc, #332]	; (8004704 <HAL_RCC_ClockConfig+0x1c4>)
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	4a52      	ldr	r2, [pc, #328]	; (8004704 <HAL_RCC_ClockConfig+0x1c4>)
 80045ba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80045be:	6053      	str	r3, [r2, #4]
 80045c0:	4b50      	ldr	r3, [pc, #320]	; (8004704 <HAL_RCC_ClockConfig+0x1c4>)
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	494d      	ldr	r1, [pc, #308]	; (8004704 <HAL_RCC_ClockConfig+0x1c4>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	604b      	str	r3, [r1, #4]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 0301 	and.w	r3, r3, #1
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d040      	beq.n	8004660 <HAL_RCC_ClockConfig+0x120>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d107      	bne.n	80045f6 <HAL_RCC_ClockConfig+0xb6>
 80045e6:	4b47      	ldr	r3, [pc, #284]	; (8004704 <HAL_RCC_ClockConfig+0x1c4>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d115      	bne.n	800461e <HAL_RCC_ClockConfig+0xde>
 80045f2:	2301      	movs	r3, #1
 80045f4:	e07f      	b.n	80046f6 <HAL_RCC_ClockConfig+0x1b6>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	d107      	bne.n	800460e <HAL_RCC_ClockConfig+0xce>
 80045fe:	4b41      	ldr	r3, [pc, #260]	; (8004704 <HAL_RCC_ClockConfig+0x1c4>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d109      	bne.n	800461e <HAL_RCC_ClockConfig+0xde>
 800460a:	2301      	movs	r3, #1
 800460c:	e073      	b.n	80046f6 <HAL_RCC_ClockConfig+0x1b6>
 800460e:	4b3d      	ldr	r3, [pc, #244]	; (8004704 <HAL_RCC_ClockConfig+0x1c4>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 0302 	and.w	r3, r3, #2
 8004616:	2b00      	cmp	r3, #0
 8004618:	d101      	bne.n	800461e <HAL_RCC_ClockConfig+0xde>
 800461a:	2301      	movs	r3, #1
 800461c:	e06b      	b.n	80046f6 <HAL_RCC_ClockConfig+0x1b6>
 800461e:	4b39      	ldr	r3, [pc, #228]	; (8004704 <HAL_RCC_ClockConfig+0x1c4>)
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	f023 0203 	bic.w	r2, r3, #3
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	4936      	ldr	r1, [pc, #216]	; (8004704 <HAL_RCC_ClockConfig+0x1c4>)
 800462c:	4313      	orrs	r3, r2
 800462e:	604b      	str	r3, [r1, #4]
 8004630:	f7fd fc0a 	bl	8001e48 <HAL_GetTick>
 8004634:	60f8      	str	r0, [r7, #12]
 8004636:	e00a      	b.n	800464e <HAL_RCC_ClockConfig+0x10e>
 8004638:	f7fd fc06 	bl	8001e48 <HAL_GetTick>
 800463c:	4602      	mov	r2, r0
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	f241 3288 	movw	r2, #5000	; 0x1388
 8004646:	4293      	cmp	r3, r2
 8004648:	d901      	bls.n	800464e <HAL_RCC_ClockConfig+0x10e>
 800464a:	2303      	movs	r3, #3
 800464c:	e053      	b.n	80046f6 <HAL_RCC_ClockConfig+0x1b6>
 800464e:	4b2d      	ldr	r3, [pc, #180]	; (8004704 <HAL_RCC_ClockConfig+0x1c4>)
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	f003 020c 	and.w	r2, r3, #12
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	429a      	cmp	r2, r3
 800465e:	d1eb      	bne.n	8004638 <HAL_RCC_ClockConfig+0xf8>
 8004660:	4b27      	ldr	r3, [pc, #156]	; (8004700 <HAL_RCC_ClockConfig+0x1c0>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 0307 	and.w	r3, r3, #7
 8004668:	683a      	ldr	r2, [r7, #0]
 800466a:	429a      	cmp	r2, r3
 800466c:	d210      	bcs.n	8004690 <HAL_RCC_ClockConfig+0x150>
 800466e:	4b24      	ldr	r3, [pc, #144]	; (8004700 <HAL_RCC_ClockConfig+0x1c0>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f023 0207 	bic.w	r2, r3, #7
 8004676:	4922      	ldr	r1, [pc, #136]	; (8004700 <HAL_RCC_ClockConfig+0x1c0>)
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	4313      	orrs	r3, r2
 800467c:	600b      	str	r3, [r1, #0]
 800467e:	4b20      	ldr	r3, [pc, #128]	; (8004700 <HAL_RCC_ClockConfig+0x1c0>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0307 	and.w	r3, r3, #7
 8004686:	683a      	ldr	r2, [r7, #0]
 8004688:	429a      	cmp	r2, r3
 800468a:	d001      	beq.n	8004690 <HAL_RCC_ClockConfig+0x150>
 800468c:	2301      	movs	r3, #1
 800468e:	e032      	b.n	80046f6 <HAL_RCC_ClockConfig+0x1b6>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0304 	and.w	r3, r3, #4
 8004698:	2b00      	cmp	r3, #0
 800469a:	d008      	beq.n	80046ae <HAL_RCC_ClockConfig+0x16e>
 800469c:	4b19      	ldr	r3, [pc, #100]	; (8004704 <HAL_RCC_ClockConfig+0x1c4>)
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	4916      	ldr	r1, [pc, #88]	; (8004704 <HAL_RCC_ClockConfig+0x1c4>)
 80046aa:	4313      	orrs	r3, r2
 80046ac:	604b      	str	r3, [r1, #4]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 0308 	and.w	r3, r3, #8
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d009      	beq.n	80046ce <HAL_RCC_ClockConfig+0x18e>
 80046ba:	4b12      	ldr	r3, [pc, #72]	; (8004704 <HAL_RCC_ClockConfig+0x1c4>)
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	691b      	ldr	r3, [r3, #16]
 80046c6:	00db      	lsls	r3, r3, #3
 80046c8:	490e      	ldr	r1, [pc, #56]	; (8004704 <HAL_RCC_ClockConfig+0x1c4>)
 80046ca:	4313      	orrs	r3, r2
 80046cc:	604b      	str	r3, [r1, #4]
 80046ce:	f000 f821 	bl	8004714 <HAL_RCC_GetSysClockFreq>
 80046d2:	4602      	mov	r2, r0
 80046d4:	4b0b      	ldr	r3, [pc, #44]	; (8004704 <HAL_RCC_ClockConfig+0x1c4>)
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	091b      	lsrs	r3, r3, #4
 80046da:	f003 030f 	and.w	r3, r3, #15
 80046de:	490a      	ldr	r1, [pc, #40]	; (8004708 <HAL_RCC_ClockConfig+0x1c8>)
 80046e0:	5ccb      	ldrb	r3, [r1, r3]
 80046e2:	fa22 f303 	lsr.w	r3, r2, r3
 80046e6:	4a09      	ldr	r2, [pc, #36]	; (800470c <HAL_RCC_ClockConfig+0x1cc>)
 80046e8:	6013      	str	r3, [r2, #0]
 80046ea:	4b09      	ldr	r3, [pc, #36]	; (8004710 <HAL_RCC_ClockConfig+0x1d0>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4618      	mov	r0, r3
 80046f0:	f7fd fb68 	bl	8001dc4 <HAL_InitTick>
 80046f4:	2300      	movs	r3, #0
 80046f6:	4618      	mov	r0, r3
 80046f8:	3710      	adds	r7, #16
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	40022000 	.word	0x40022000
 8004704:	40021000 	.word	0x40021000
 8004708:	08009468 	.word	0x08009468
 800470c:	2000006c 	.word	0x2000006c
 8004710:	20000070 	.word	0x20000070

08004714 <HAL_RCC_GetSysClockFreq>:
 8004714:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004718:	b08e      	sub	sp, #56	; 0x38
 800471a:	af00      	add	r7, sp, #0
 800471c:	2300      	movs	r3, #0
 800471e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004720:	2300      	movs	r3, #0
 8004722:	62bb      	str	r3, [r7, #40]	; 0x28
 8004724:	2300      	movs	r3, #0
 8004726:	637b      	str	r3, [r7, #52]	; 0x34
 8004728:	2300      	movs	r3, #0
 800472a:	627b      	str	r3, [r7, #36]	; 0x24
 800472c:	2300      	movs	r3, #0
 800472e:	633b      	str	r3, [r7, #48]	; 0x30
 8004730:	2300      	movs	r3, #0
 8004732:	623b      	str	r3, [r7, #32]
 8004734:	2300      	movs	r3, #0
 8004736:	61fb      	str	r3, [r7, #28]
 8004738:	4b4e      	ldr	r3, [pc, #312]	; (8004874 <HAL_RCC_GetSysClockFreq+0x160>)
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800473e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004740:	f003 030c 	and.w	r3, r3, #12
 8004744:	2b04      	cmp	r3, #4
 8004746:	d002      	beq.n	800474e <HAL_RCC_GetSysClockFreq+0x3a>
 8004748:	2b08      	cmp	r3, #8
 800474a:	d003      	beq.n	8004754 <HAL_RCC_GetSysClockFreq+0x40>
 800474c:	e089      	b.n	8004862 <HAL_RCC_GetSysClockFreq+0x14e>
 800474e:	4b4a      	ldr	r3, [pc, #296]	; (8004878 <HAL_RCC_GetSysClockFreq+0x164>)
 8004750:	633b      	str	r3, [r7, #48]	; 0x30
 8004752:	e089      	b.n	8004868 <HAL_RCC_GetSysClockFreq+0x154>
 8004754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004756:	0c9b      	lsrs	r3, r3, #18
 8004758:	f003 020f 	and.w	r2, r3, #15
 800475c:	4b47      	ldr	r3, [pc, #284]	; (800487c <HAL_RCC_GetSysClockFreq+0x168>)
 800475e:	5c9b      	ldrb	r3, [r3, r2]
 8004760:	627b      	str	r3, [r7, #36]	; 0x24
 8004762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004764:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004768:	2b00      	cmp	r3, #0
 800476a:	d072      	beq.n	8004852 <HAL_RCC_GetSysClockFreq+0x13e>
 800476c:	4b41      	ldr	r3, [pc, #260]	; (8004874 <HAL_RCC_GetSysClockFreq+0x160>)
 800476e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004770:	f003 020f 	and.w	r2, r3, #15
 8004774:	4b42      	ldr	r3, [pc, #264]	; (8004880 <HAL_RCC_GetSysClockFreq+0x16c>)
 8004776:	5c9b      	ldrb	r3, [r3, r2]
 8004778:	62bb      	str	r3, [r7, #40]	; 0x28
 800477a:	4b3e      	ldr	r3, [pc, #248]	; (8004874 <HAL_RCC_GetSysClockFreq+0x160>)
 800477c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800477e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d053      	beq.n	800482e <HAL_RCC_GetSysClockFreq+0x11a>
 8004786:	4b3b      	ldr	r3, [pc, #236]	; (8004874 <HAL_RCC_GetSysClockFreq+0x160>)
 8004788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800478a:	091b      	lsrs	r3, r3, #4
 800478c:	f003 030f 	and.w	r3, r3, #15
 8004790:	3301      	adds	r3, #1
 8004792:	623b      	str	r3, [r7, #32]
 8004794:	4b37      	ldr	r3, [pc, #220]	; (8004874 <HAL_RCC_GetSysClockFreq+0x160>)
 8004796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004798:	0a1b      	lsrs	r3, r3, #8
 800479a:	f003 030f 	and.w	r3, r3, #15
 800479e:	3302      	adds	r3, #2
 80047a0:	61fb      	str	r3, [r7, #28]
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	2200      	movs	r2, #0
 80047a6:	469a      	mov	sl, r3
 80047a8:	4693      	mov	fp, r2
 80047aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ac:	2200      	movs	r2, #0
 80047ae:	613b      	str	r3, [r7, #16]
 80047b0:	617a      	str	r2, [r7, #20]
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	fb03 f20b 	mul.w	r2, r3, fp
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	fb0a f303 	mul.w	r3, sl, r3
 80047be:	4413      	add	r3, r2
 80047c0:	693a      	ldr	r2, [r7, #16]
 80047c2:	fbaa 0102 	umull	r0, r1, sl, r2
 80047c6:	440b      	add	r3, r1
 80047c8:	4619      	mov	r1, r3
 80047ca:	4b2b      	ldr	r3, [pc, #172]	; (8004878 <HAL_RCC_GetSysClockFreq+0x164>)
 80047cc:	fb03 f201 	mul.w	r2, r3, r1
 80047d0:	2300      	movs	r3, #0
 80047d2:	fb00 f303 	mul.w	r3, r0, r3
 80047d6:	4413      	add	r3, r2
 80047d8:	4a27      	ldr	r2, [pc, #156]	; (8004878 <HAL_RCC_GetSysClockFreq+0x164>)
 80047da:	fba0 4502 	umull	r4, r5, r0, r2
 80047de:	442b      	add	r3, r5
 80047e0:	461d      	mov	r5, r3
 80047e2:	6a3b      	ldr	r3, [r7, #32]
 80047e4:	2200      	movs	r2, #0
 80047e6:	60bb      	str	r3, [r7, #8]
 80047e8:	60fa      	str	r2, [r7, #12]
 80047ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ec:	2200      	movs	r2, #0
 80047ee:	603b      	str	r3, [r7, #0]
 80047f0:	607a      	str	r2, [r7, #4]
 80047f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80047f6:	460b      	mov	r3, r1
 80047f8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80047fc:	4652      	mov	r2, sl
 80047fe:	fb02 f203 	mul.w	r2, r2, r3
 8004802:	465b      	mov	r3, fp
 8004804:	4684      	mov	ip, r0
 8004806:	fb0c f303 	mul.w	r3, ip, r3
 800480a:	4413      	add	r3, r2
 800480c:	4602      	mov	r2, r0
 800480e:	4651      	mov	r1, sl
 8004810:	fba2 8901 	umull	r8, r9, r2, r1
 8004814:	444b      	add	r3, r9
 8004816:	4699      	mov	r9, r3
 8004818:	4642      	mov	r2, r8
 800481a:	464b      	mov	r3, r9
 800481c:	4620      	mov	r0, r4
 800481e:	4629      	mov	r1, r5
 8004820:	f7fb fd00 	bl	8000224 <__aeabi_uldivmod>
 8004824:	4602      	mov	r2, r0
 8004826:	460b      	mov	r3, r1
 8004828:	4613      	mov	r3, r2
 800482a:	637b      	str	r3, [r7, #52]	; 0x34
 800482c:	e007      	b.n	800483e <HAL_RCC_GetSysClockFreq+0x12a>
 800482e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004830:	4a11      	ldr	r2, [pc, #68]	; (8004878 <HAL_RCC_GetSysClockFreq+0x164>)
 8004832:	fb03 f202 	mul.w	r2, r3, r2
 8004836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004838:	fbb2 f3f3 	udiv	r3, r2, r3
 800483c:	637b      	str	r3, [r7, #52]	; 0x34
 800483e:	4b0f      	ldr	r3, [pc, #60]	; (800487c <HAL_RCC_GetSysClockFreq+0x168>)
 8004840:	7b5b      	ldrb	r3, [r3, #13]
 8004842:	461a      	mov	r2, r3
 8004844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004846:	4293      	cmp	r3, r2
 8004848:	d108      	bne.n	800485c <HAL_RCC_GetSysClockFreq+0x148>
 800484a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800484c:	085b      	lsrs	r3, r3, #1
 800484e:	637b      	str	r3, [r7, #52]	; 0x34
 8004850:	e004      	b.n	800485c <HAL_RCC_GetSysClockFreq+0x148>
 8004852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004854:	4a0b      	ldr	r2, [pc, #44]	; (8004884 <HAL_RCC_GetSysClockFreq+0x170>)
 8004856:	fb02 f303 	mul.w	r3, r2, r3
 800485a:	637b      	str	r3, [r7, #52]	; 0x34
 800485c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800485e:	633b      	str	r3, [r7, #48]	; 0x30
 8004860:	e002      	b.n	8004868 <HAL_RCC_GetSysClockFreq+0x154>
 8004862:	4b09      	ldr	r3, [pc, #36]	; (8004888 <HAL_RCC_GetSysClockFreq+0x174>)
 8004864:	633b      	str	r3, [r7, #48]	; 0x30
 8004866:	bf00      	nop
 8004868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800486a:	4618      	mov	r0, r3
 800486c:	3738      	adds	r7, #56	; 0x38
 800486e:	46bd      	mov	sp, r7
 8004870:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004874:	40021000 	.word	0x40021000
 8004878:	017d7840 	.word	0x017d7840
 800487c:	08009478 	.word	0x08009478
 8004880:	08009488 	.word	0x08009488
 8004884:	003d0900 	.word	0x003d0900
 8004888:	007a1200 	.word	0x007a1200

0800488c <HAL_RCC_GetHCLKFreq>:
 800488c:	b480      	push	{r7}
 800488e:	af00      	add	r7, sp, #0
 8004890:	4b02      	ldr	r3, [pc, #8]	; (800489c <HAL_RCC_GetHCLKFreq+0x10>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4618      	mov	r0, r3
 8004896:	46bd      	mov	sp, r7
 8004898:	bc80      	pop	{r7}
 800489a:	4770      	bx	lr
 800489c:	2000006c 	.word	0x2000006c

080048a0 <RCC_Delay>:
 80048a0:	b480      	push	{r7}
 80048a2:	b085      	sub	sp, #20
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	4b0a      	ldr	r3, [pc, #40]	; (80048d4 <RCC_Delay+0x34>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a0a      	ldr	r2, [pc, #40]	; (80048d8 <RCC_Delay+0x38>)
 80048ae:	fba2 2303 	umull	r2, r3, r2, r3
 80048b2:	0a5b      	lsrs	r3, r3, #9
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	fb02 f303 	mul.w	r3, r2, r3
 80048ba:	60fb      	str	r3, [r7, #12]
 80048bc:	bf00      	nop
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	1e5a      	subs	r2, r3, #1
 80048c2:	60fa      	str	r2, [r7, #12]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d1f9      	bne.n	80048bc <RCC_Delay+0x1c>
 80048c8:	bf00      	nop
 80048ca:	bf00      	nop
 80048cc:	3714      	adds	r7, #20
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bc80      	pop	{r7}
 80048d2:	4770      	bx	lr
 80048d4:	2000006c 	.word	0x2000006c
 80048d8:	10624dd3 	.word	0x10624dd3

080048dc <HAL_RCCEx_PeriphCLKConfig>:
 80048dc:	b580      	push	{r7, lr}
 80048de:	b088      	sub	sp, #32
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	2300      	movs	r3, #0
 80048e6:	617b      	str	r3, [r7, #20]
 80048e8:	2300      	movs	r3, #0
 80048ea:	613b      	str	r3, [r7, #16]
 80048ec:	2300      	movs	r3, #0
 80048ee:	61fb      	str	r3, [r7, #28]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 0301 	and.w	r3, r3, #1
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d07d      	beq.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 80048fc:	2300      	movs	r3, #0
 80048fe:	76fb      	strb	r3, [r7, #27]
 8004900:	4b8b      	ldr	r3, [pc, #556]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004902:	69db      	ldr	r3, [r3, #28]
 8004904:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004908:	2b00      	cmp	r3, #0
 800490a:	d10d      	bne.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x4c>
 800490c:	4b88      	ldr	r3, [pc, #544]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800490e:	69db      	ldr	r3, [r3, #28]
 8004910:	4a87      	ldr	r2, [pc, #540]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004912:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004916:	61d3      	str	r3, [r2, #28]
 8004918:	4b85      	ldr	r3, [pc, #532]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800491a:	69db      	ldr	r3, [r3, #28]
 800491c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004920:	60fb      	str	r3, [r7, #12]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2301      	movs	r3, #1
 8004926:	76fb      	strb	r3, [r7, #27]
 8004928:	4b82      	ldr	r3, [pc, #520]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004930:	2b00      	cmp	r3, #0
 8004932:	d118      	bne.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8004934:	4b7f      	ldr	r3, [pc, #508]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a7e      	ldr	r2, [pc, #504]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800493a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800493e:	6013      	str	r3, [r2, #0]
 8004940:	f7fd fa82 	bl	8001e48 <HAL_GetTick>
 8004944:	6178      	str	r0, [r7, #20]
 8004946:	e008      	b.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x7e>
 8004948:	f7fd fa7e 	bl	8001e48 <HAL_GetTick>
 800494c:	4602      	mov	r2, r0
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	2b64      	cmp	r3, #100	; 0x64
 8004954:	d901      	bls.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x7e>
 8004956:	2303      	movs	r3, #3
 8004958:	e0e5      	b.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 800495a:	4b76      	ldr	r3, [pc, #472]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004962:	2b00      	cmp	r3, #0
 8004964:	d0f0      	beq.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8004966:	4b72      	ldr	r3, [pc, #456]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004968:	6a1b      	ldr	r3, [r3, #32]
 800496a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800496e:	613b      	str	r3, [r7, #16]
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d02e      	beq.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800497e:	693a      	ldr	r2, [r7, #16]
 8004980:	429a      	cmp	r2, r3
 8004982:	d027      	beq.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
 8004984:	4b6a      	ldr	r3, [pc, #424]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004986:	6a1b      	ldr	r3, [r3, #32]
 8004988:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800498c:	613b      	str	r3, [r7, #16]
 800498e:	4b6a      	ldr	r3, [pc, #424]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004990:	2201      	movs	r2, #1
 8004992:	601a      	str	r2, [r3, #0]
 8004994:	4b68      	ldr	r3, [pc, #416]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004996:	2200      	movs	r2, #0
 8004998:	601a      	str	r2, [r3, #0]
 800499a:	4a65      	ldr	r2, [pc, #404]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	6213      	str	r3, [r2, #32]
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	f003 0301 	and.w	r3, r3, #1
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d014      	beq.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
 80049aa:	f7fd fa4d 	bl	8001e48 <HAL_GetTick>
 80049ae:	6178      	str	r0, [r7, #20]
 80049b0:	e00a      	b.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80049b2:	f7fd fa49 	bl	8001e48 <HAL_GetTick>
 80049b6:	4602      	mov	r2, r0
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d901      	bls.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80049c4:	2303      	movs	r3, #3
 80049c6:	e0ae      	b.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 80049c8:	4b59      	ldr	r3, [pc, #356]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80049ca:	6a1b      	ldr	r3, [r3, #32]
 80049cc:	f003 0302 	and.w	r3, r3, #2
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d0ee      	beq.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
 80049d4:	4b56      	ldr	r3, [pc, #344]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80049d6:	6a1b      	ldr	r3, [r3, #32]
 80049d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	4953      	ldr	r1, [pc, #332]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80049e2:	4313      	orrs	r3, r2
 80049e4:	620b      	str	r3, [r1, #32]
 80049e6:	7efb      	ldrb	r3, [r7, #27]
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d105      	bne.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 80049ec:	4b50      	ldr	r3, [pc, #320]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80049ee:	69db      	ldr	r3, [r3, #28]
 80049f0:	4a4f      	ldr	r2, [pc, #316]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80049f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049f6:	61d3      	str	r3, [r2, #28]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 0302 	and.w	r3, r3, #2
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d008      	beq.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x13a>
 8004a04:	4b4a      	ldr	r3, [pc, #296]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	4947      	ldr	r1, [pc, #284]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004a12:	4313      	orrs	r3, r2
 8004a14:	604b      	str	r3, [r1, #4]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 0304 	and.w	r3, r3, #4
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d008      	beq.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8004a22:	4b43      	ldr	r3, [pc, #268]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a26:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	4940      	ldr	r1, [pc, #256]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004a30:	4313      	orrs	r3, r2
 8004a32:	62cb      	str	r3, [r1, #44]	; 0x2c
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 0308 	and.w	r3, r3, #8
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d008      	beq.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x176>
 8004a40:	4b3b      	ldr	r3, [pc, #236]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a44:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	691b      	ldr	r3, [r3, #16]
 8004a4c:	4938      	ldr	r1, [pc, #224]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	62cb      	str	r3, [r1, #44]	; 0x2c
 8004a52:	4b37      	ldr	r3, [pc, #220]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d105      	bne.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x18e>
 8004a5e:	4b34      	ldr	r3, [pc, #208]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d001      	beq.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	61fb      	str	r3, [r7, #28]
 8004a6e:	69fb      	ldr	r3, [r7, #28]
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d148      	bne.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004a74:	4b2e      	ldr	r3, [pc, #184]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d138      	bne.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x216>
 8004a80:	4b2b      	ldr	r3, [pc, #172]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d009      	beq.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
 8004a8c:	4b28      	ldr	r3, [pc, #160]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a90:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	699b      	ldr	r3, [r3, #24]
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d001      	beq.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e042      	b.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8004aa0:	4b23      	ldr	r3, [pc, #140]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	699b      	ldr	r3, [r3, #24]
 8004aac:	4920      	ldr	r1, [pc, #128]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	62cb      	str	r3, [r1, #44]	; 0x2c
 8004ab2:	4b1f      	ldr	r3, [pc, #124]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab6:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	695b      	ldr	r3, [r3, #20]
 8004abe:	491c      	ldr	r1, [pc, #112]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	62cb      	str	r3, [r1, #44]	; 0x2c
 8004ac4:	4b1d      	ldr	r3, [pc, #116]	; (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	601a      	str	r2, [r3, #0]
 8004aca:	f7fd f9bd 	bl	8001e48 <HAL_GetTick>
 8004ace:	6178      	str	r0, [r7, #20]
 8004ad0:	e008      	b.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8004ad2:	f7fd f9b9 	bl	8001e48 <HAL_GetTick>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	1ad3      	subs	r3, r2, r3
 8004adc:	2b64      	cmp	r3, #100	; 0x64
 8004ade:	d901      	bls.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8004ae0:	2303      	movs	r3, #3
 8004ae2:	e020      	b.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8004ae4:	4b12      	ldr	r3, [pc, #72]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d0f0      	beq.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8004af0:	e009      	b.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004af2:	4b0f      	ldr	r3, [pc, #60]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af6:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	695b      	ldr	r3, [r3, #20]
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d001      	beq.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004b02:	2301      	movs	r3, #1
 8004b04:	e00f      	b.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 0310 	and.w	r3, r3, #16
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d008      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x248>
 8004b12:	4b07      	ldr	r3, [pc, #28]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	69db      	ldr	r3, [r3, #28]
 8004b1e:	4904      	ldr	r1, [pc, #16]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004b20:	4313      	orrs	r3, r2
 8004b22:	604b      	str	r3, [r1, #4]
 8004b24:	2300      	movs	r3, #0
 8004b26:	4618      	mov	r0, r3
 8004b28:	3720      	adds	r7, #32
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	bf00      	nop
 8004b30:	40021000 	.word	0x40021000
 8004b34:	40007000 	.word	0x40007000
 8004b38:	42420440 	.word	0x42420440
 8004b3c:	42420070 	.word	0x42420070

08004b40 <HAL_SPI_Init>:
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b082      	sub	sp, #8
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d101      	bne.n	8004b52 <HAL_SPI_Init+0x12>
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e076      	b.n	8004c40 <HAL_SPI_Init+0x100>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d108      	bne.n	8004b6c <HAL_SPI_Init+0x2c>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b62:	d009      	beq.n	8004b78 <HAL_SPI_Init+0x38>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	61da      	str	r2, [r3, #28]
 8004b6a:	e005      	b.n	8004b78 <HAL_SPI_Init+0x38>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	611a      	str	r2, [r3, #16]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	615a      	str	r2, [r3, #20]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	629a      	str	r2, [r3, #40]	; 0x28
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d106      	bne.n	8004b98 <HAL_SPI_Init+0x58>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f7fc ff84 	bl	8001aa0 <HAL_SPI_MspInit>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2202      	movs	r2, #2
 8004b9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bae:	601a      	str	r2, [r3, #0]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004bc0:	431a      	orrs	r2, r3
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bca:	431a      	orrs	r2, r3
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	691b      	ldr	r3, [r3, #16]
 8004bd0:	f003 0302 	and.w	r3, r3, #2
 8004bd4:	431a      	orrs	r2, r3
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	695b      	ldr	r3, [r3, #20]
 8004bda:	f003 0301 	and.w	r3, r3, #1
 8004bde:	431a      	orrs	r2, r3
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	699b      	ldr	r3, [r3, #24]
 8004be4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004be8:	431a      	orrs	r2, r3
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	69db      	ldr	r3, [r3, #28]
 8004bee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004bf2:	431a      	orrs	r2, r3
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6a1b      	ldr	r3, [r3, #32]
 8004bf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bfc:	ea42 0103 	orr.w	r1, r2, r3
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c04:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	430a      	orrs	r2, r1
 8004c0e:	601a      	str	r2, [r3, #0]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	699b      	ldr	r3, [r3, #24]
 8004c14:	0c1a      	lsrs	r2, r3, #16
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f002 0204 	and.w	r2, r2, #4
 8004c1e:	605a      	str	r2, [r3, #4]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	69da      	ldr	r2, [r3, #28]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c2e:	61da      	str	r2, [r3, #28]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2200      	movs	r2, #0
 8004c34:	655a      	str	r2, [r3, #84]	; 0x54
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2201      	movs	r2, #1
 8004c3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8004c3e:	2300      	movs	r3, #0
 8004c40:	4618      	mov	r0, r3
 8004c42:	3708      	adds	r7, #8
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <HAL_SPI_Transmit>:
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b088      	sub	sp, #32
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	60f8      	str	r0, [r7, #12]
 8004c50:	60b9      	str	r1, [r7, #8]
 8004c52:	603b      	str	r3, [r7, #0]
 8004c54:	4613      	mov	r3, r2
 8004c56:	80fb      	strh	r3, [r7, #6]
 8004c58:	2300      	movs	r3, #0
 8004c5a:	77fb      	strb	r3, [r7, #31]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	d101      	bne.n	8004c6a <HAL_SPI_Transmit+0x22>
 8004c66:	2302      	movs	r3, #2
 8004c68:	e12d      	b.n	8004ec6 <HAL_SPI_Transmit+0x27e>
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004c72:	f7fd f8e9 	bl	8001e48 <HAL_GetTick>
 8004c76:	61b8      	str	r0, [r7, #24]
 8004c78:	88fb      	ldrh	r3, [r7, #6]
 8004c7a:	82fb      	strh	r3, [r7, #22]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d002      	beq.n	8004c8e <HAL_SPI_Transmit+0x46>
 8004c88:	2302      	movs	r3, #2
 8004c8a:	77fb      	strb	r3, [r7, #31]
 8004c8c:	e116      	b.n	8004ebc <HAL_SPI_Transmit+0x274>
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d002      	beq.n	8004c9a <HAL_SPI_Transmit+0x52>
 8004c94:	88fb      	ldrh	r3, [r7, #6]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d102      	bne.n	8004ca0 <HAL_SPI_Transmit+0x58>
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	77fb      	strb	r3, [r7, #31]
 8004c9e:	e10d      	b.n	8004ebc <HAL_SPI_Transmit+0x274>
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2203      	movs	r2, #3
 8004ca4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2200      	movs	r2, #0
 8004cac:	655a      	str	r2, [r3, #84]	; 0x54
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	68ba      	ldr	r2, [r7, #8]
 8004cb2:	631a      	str	r2, [r3, #48]	; 0x30
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	88fa      	ldrh	r2, [r7, #6]
 8004cb8:	869a      	strh	r2, [r3, #52]	; 0x34
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	88fa      	ldrh	r2, [r7, #6]
 8004cbe:	86da      	strh	r2, [r3, #54]	; 0x36
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	639a      	str	r2, [r3, #56]	; 0x38
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	879a      	strh	r2, [r3, #60]	; 0x3c
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	645a      	str	r2, [r3, #68]	; 0x44
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	641a      	str	r2, [r3, #64]	; 0x40
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ce6:	d10f      	bne.n	8004d08 <HAL_SPI_Transmit+0xc0>
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cf6:	601a      	str	r2, [r3, #0]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d06:	601a      	str	r2, [r3, #0]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d12:	2b40      	cmp	r3, #64	; 0x40
 8004d14:	d007      	beq.n	8004d26 <HAL_SPI_Transmit+0xde>
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d24:	601a      	str	r2, [r3, #0]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	68db      	ldr	r3, [r3, #12]
 8004d2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d2e:	d14f      	bne.n	8004dd0 <HAL_SPI_Transmit+0x188>
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d002      	beq.n	8004d3e <HAL_SPI_Transmit+0xf6>
 8004d38:	8afb      	ldrh	r3, [r7, #22]
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d142      	bne.n	8004dc4 <HAL_SPI_Transmit+0x17c>
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d42:	881a      	ldrh	r2, [r3, #0]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	60da      	str	r2, [r3, #12]
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d4e:	1c9a      	adds	r2, r3, #2
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	631a      	str	r2, [r3, #48]	; 0x30
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	3b01      	subs	r3, #1
 8004d5c:	b29a      	uxth	r2, r3
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	86da      	strh	r2, [r3, #54]	; 0x36
 8004d62:	e02f      	b.n	8004dc4 <HAL_SPI_Transmit+0x17c>
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	f003 0302 	and.w	r3, r3, #2
 8004d6e:	2b02      	cmp	r3, #2
 8004d70:	d112      	bne.n	8004d98 <HAL_SPI_Transmit+0x150>
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d76:	881a      	ldrh	r2, [r3, #0]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	60da      	str	r2, [r3, #12]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d82:	1c9a      	adds	r2, r3, #2
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	631a      	str	r2, [r3, #48]	; 0x30
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	3b01      	subs	r3, #1
 8004d90:	b29a      	uxth	r2, r3
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	86da      	strh	r2, [r3, #54]	; 0x36
 8004d96:	e015      	b.n	8004dc4 <HAL_SPI_Transmit+0x17c>
 8004d98:	f7fd f856 	bl	8001e48 <HAL_GetTick>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	69bb      	ldr	r3, [r7, #24]
 8004da0:	1ad3      	subs	r3, r2, r3
 8004da2:	683a      	ldr	r2, [r7, #0]
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d803      	bhi.n	8004db0 <HAL_SPI_Transmit+0x168>
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dae:	d102      	bne.n	8004db6 <HAL_SPI_Transmit+0x16e>
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d106      	bne.n	8004dc4 <HAL_SPI_Transmit+0x17c>
 8004db6:	2303      	movs	r3, #3
 8004db8:	77fb      	strb	r3, [r7, #31]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8004dc2:	e07b      	b.n	8004ebc <HAL_SPI_Transmit+0x274>
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d1ca      	bne.n	8004d64 <HAL_SPI_Transmit+0x11c>
 8004dce:	e050      	b.n	8004e72 <HAL_SPI_Transmit+0x22a>
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d002      	beq.n	8004dde <HAL_SPI_Transmit+0x196>
 8004dd8:	8afb      	ldrh	r3, [r7, #22]
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d144      	bne.n	8004e68 <HAL_SPI_Transmit+0x220>
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	330c      	adds	r3, #12
 8004de8:	7812      	ldrb	r2, [r2, #0]
 8004dea:	701a      	strb	r2, [r3, #0]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004df0:	1c5a      	adds	r2, r3, #1
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	631a      	str	r2, [r3, #48]	; 0x30
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	3b01      	subs	r3, #1
 8004dfe:	b29a      	uxth	r2, r3
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	86da      	strh	r2, [r3, #54]	; 0x36
 8004e04:	e030      	b.n	8004e68 <HAL_SPI_Transmit+0x220>
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	f003 0302 	and.w	r3, r3, #2
 8004e10:	2b02      	cmp	r3, #2
 8004e12:	d113      	bne.n	8004e3c <HAL_SPI_Transmit+0x1f4>
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	330c      	adds	r3, #12
 8004e1e:	7812      	ldrb	r2, [r2, #0]
 8004e20:	701a      	strb	r2, [r3, #0]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e26:	1c5a      	adds	r2, r3, #1
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	631a      	str	r2, [r3, #48]	; 0x30
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	3b01      	subs	r3, #1
 8004e34:	b29a      	uxth	r2, r3
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	86da      	strh	r2, [r3, #54]	; 0x36
 8004e3a:	e015      	b.n	8004e68 <HAL_SPI_Transmit+0x220>
 8004e3c:	f7fd f804 	bl	8001e48 <HAL_GetTick>
 8004e40:	4602      	mov	r2, r0
 8004e42:	69bb      	ldr	r3, [r7, #24]
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	683a      	ldr	r2, [r7, #0]
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d803      	bhi.n	8004e54 <HAL_SPI_Transmit+0x20c>
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e52:	d102      	bne.n	8004e5a <HAL_SPI_Transmit+0x212>
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d106      	bne.n	8004e68 <HAL_SPI_Transmit+0x220>
 8004e5a:	2303      	movs	r3, #3
 8004e5c:	77fb      	strb	r3, [r7, #31]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2201      	movs	r2, #1
 8004e62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8004e66:	e029      	b.n	8004ebc <HAL_SPI_Transmit+0x274>
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d1c9      	bne.n	8004e06 <HAL_SPI_Transmit+0x1be>
 8004e72:	69ba      	ldr	r2, [r7, #24]
 8004e74:	6839      	ldr	r1, [r7, #0]
 8004e76:	68f8      	ldr	r0, [r7, #12]
 8004e78:	f000 fbcc 	bl	8005614 <SPI_EndRxTxTransaction>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d002      	beq.n	8004e88 <HAL_SPI_Transmit+0x240>
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2220      	movs	r2, #32
 8004e86:	655a      	str	r2, [r3, #84]	; 0x54
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d10a      	bne.n	8004ea6 <HAL_SPI_Transmit+0x25e>
 8004e90:	2300      	movs	r3, #0
 8004e92:	613b      	str	r3, [r7, #16]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	613b      	str	r3, [r7, #16]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	613b      	str	r3, [r7, #16]
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d002      	beq.n	8004eb4 <HAL_SPI_Transmit+0x26c>
 8004eae:	2301      	movs	r3, #1
 8004eb0:	77fb      	strb	r3, [r7, #31]
 8004eb2:	e003      	b.n	8004ebc <HAL_SPI_Transmit+0x274>
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004ec4:	7ffb      	ldrb	r3, [r7, #31]
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3720      	adds	r7, #32
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}

08004ece <HAL_SPI_Receive>:
 8004ece:	b580      	push	{r7, lr}
 8004ed0:	b088      	sub	sp, #32
 8004ed2:	af02      	add	r7, sp, #8
 8004ed4:	60f8      	str	r0, [r7, #12]
 8004ed6:	60b9      	str	r1, [r7, #8]
 8004ed8:	603b      	str	r3, [r7, #0]
 8004eda:	4613      	mov	r3, r2
 8004edc:	80fb      	strh	r3, [r7, #6]
 8004ede:	2300      	movs	r3, #0
 8004ee0:	75fb      	strb	r3, [r7, #23]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d002      	beq.n	8004ef4 <HAL_SPI_Receive+0x26>
 8004eee:	2302      	movs	r3, #2
 8004ef0:	75fb      	strb	r3, [r7, #23]
 8004ef2:	e0fb      	b.n	80050ec <HAL_SPI_Receive+0x21e>
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004efc:	d112      	bne.n	8004f24 <HAL_SPI_Receive+0x56>
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d10e      	bne.n	8004f24 <HAL_SPI_Receive+0x56>
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2204      	movs	r2, #4
 8004f0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8004f0e:	88fa      	ldrh	r2, [r7, #6]
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	9300      	str	r3, [sp, #0]
 8004f14:	4613      	mov	r3, r2
 8004f16:	68ba      	ldr	r2, [r7, #8]
 8004f18:	68b9      	ldr	r1, [r7, #8]
 8004f1a:	68f8      	ldr	r0, [r7, #12]
 8004f1c:	f000 f8ef 	bl	80050fe <HAL_SPI_TransmitReceive>
 8004f20:	4603      	mov	r3, r0
 8004f22:	e0e8      	b.n	80050f6 <HAL_SPI_Receive+0x228>
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d101      	bne.n	8004f32 <HAL_SPI_Receive+0x64>
 8004f2e:	2302      	movs	r3, #2
 8004f30:	e0e1      	b.n	80050f6 <HAL_SPI_Receive+0x228>
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2201      	movs	r2, #1
 8004f36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004f3a:	f7fc ff85 	bl	8001e48 <HAL_GetTick>
 8004f3e:	6138      	str	r0, [r7, #16]
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d002      	beq.n	8004f4c <HAL_SPI_Receive+0x7e>
 8004f46:	88fb      	ldrh	r3, [r7, #6]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d102      	bne.n	8004f52 <HAL_SPI_Receive+0x84>
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	75fb      	strb	r3, [r7, #23]
 8004f50:	e0cc      	b.n	80050ec <HAL_SPI_Receive+0x21e>
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2204      	movs	r2, #4
 8004f56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	655a      	str	r2, [r3, #84]	; 0x54
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	68ba      	ldr	r2, [r7, #8]
 8004f64:	639a      	str	r2, [r3, #56]	; 0x38
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	88fa      	ldrh	r2, [r7, #6]
 8004f6a:	879a      	strh	r2, [r3, #60]	; 0x3c
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	88fa      	ldrh	r2, [r7, #6]
 8004f70:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2200      	movs	r2, #0
 8004f76:	631a      	str	r2, [r3, #48]	; 0x30
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	869a      	strh	r2, [r3, #52]	; 0x34
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2200      	movs	r2, #0
 8004f82:	86da      	strh	r2, [r3, #54]	; 0x36
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2200      	movs	r2, #0
 8004f88:	641a      	str	r2, [r3, #64]	; 0x40
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	645a      	str	r2, [r3, #68]	; 0x44
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f98:	d10f      	bne.n	8004fba <HAL_SPI_Receive+0xec>
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fa8:	601a      	str	r2, [r3, #0]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004fb8:	601a      	str	r2, [r3, #0]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fc4:	2b40      	cmp	r3, #64	; 0x40
 8004fc6:	d007      	beq.n	8004fd8 <HAL_SPI_Receive+0x10a>
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004fd6:	601a      	str	r2, [r3, #0]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d16a      	bne.n	80050b6 <HAL_SPI_Receive+0x1e8>
 8004fe0:	e032      	b.n	8005048 <HAL_SPI_Receive+0x17a>
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	f003 0301 	and.w	r3, r3, #1
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d115      	bne.n	800501c <HAL_SPI_Receive+0x14e>
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f103 020c 	add.w	r2, r3, #12
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ffc:	7812      	ldrb	r2, [r2, #0]
 8004ffe:	b2d2      	uxtb	r2, r2
 8005000:	701a      	strb	r2, [r3, #0]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005006:	1c5a      	adds	r2, r3, #1
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	639a      	str	r2, [r3, #56]	; 0x38
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005010:	b29b      	uxth	r3, r3
 8005012:	3b01      	subs	r3, #1
 8005014:	b29a      	uxth	r2, r3
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	87da      	strh	r2, [r3, #62]	; 0x3e
 800501a:	e015      	b.n	8005048 <HAL_SPI_Receive+0x17a>
 800501c:	f7fc ff14 	bl	8001e48 <HAL_GetTick>
 8005020:	4602      	mov	r2, r0
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	1ad3      	subs	r3, r2, r3
 8005026:	683a      	ldr	r2, [r7, #0]
 8005028:	429a      	cmp	r2, r3
 800502a:	d803      	bhi.n	8005034 <HAL_SPI_Receive+0x166>
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005032:	d102      	bne.n	800503a <HAL_SPI_Receive+0x16c>
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d106      	bne.n	8005048 <HAL_SPI_Receive+0x17a>
 800503a:	2303      	movs	r3, #3
 800503c:	75fb      	strb	r3, [r7, #23]
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2201      	movs	r2, #1
 8005042:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8005046:	e051      	b.n	80050ec <HAL_SPI_Receive+0x21e>
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800504c:	b29b      	uxth	r3, r3
 800504e:	2b00      	cmp	r3, #0
 8005050:	d1c7      	bne.n	8004fe2 <HAL_SPI_Receive+0x114>
 8005052:	e035      	b.n	80050c0 <HAL_SPI_Receive+0x1f2>
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	f003 0301 	and.w	r3, r3, #1
 800505e:	2b01      	cmp	r3, #1
 8005060:	d113      	bne.n	800508a <HAL_SPI_Receive+0x1bc>
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	68da      	ldr	r2, [r3, #12]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800506c:	b292      	uxth	r2, r2
 800506e:	801a      	strh	r2, [r3, #0]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005074:	1c9a      	adds	r2, r3, #2
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	639a      	str	r2, [r3, #56]	; 0x38
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800507e:	b29b      	uxth	r3, r3
 8005080:	3b01      	subs	r3, #1
 8005082:	b29a      	uxth	r2, r3
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005088:	e015      	b.n	80050b6 <HAL_SPI_Receive+0x1e8>
 800508a:	f7fc fedd 	bl	8001e48 <HAL_GetTick>
 800508e:	4602      	mov	r2, r0
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	1ad3      	subs	r3, r2, r3
 8005094:	683a      	ldr	r2, [r7, #0]
 8005096:	429a      	cmp	r2, r3
 8005098:	d803      	bhi.n	80050a2 <HAL_SPI_Receive+0x1d4>
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050a0:	d102      	bne.n	80050a8 <HAL_SPI_Receive+0x1da>
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d106      	bne.n	80050b6 <HAL_SPI_Receive+0x1e8>
 80050a8:	2303      	movs	r3, #3
 80050aa:	75fb      	strb	r3, [r7, #23]
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80050b4:	e01a      	b.n	80050ec <HAL_SPI_Receive+0x21e>
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d1c9      	bne.n	8005054 <HAL_SPI_Receive+0x186>
 80050c0:	693a      	ldr	r2, [r7, #16]
 80050c2:	6839      	ldr	r1, [r7, #0]
 80050c4:	68f8      	ldr	r0, [r7, #12]
 80050c6:	f000 fa53 	bl	8005570 <SPI_EndRxTransaction>
 80050ca:	4603      	mov	r3, r0
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d002      	beq.n	80050d6 <HAL_SPI_Receive+0x208>
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2220      	movs	r2, #32
 80050d4:	655a      	str	r2, [r3, #84]	; 0x54
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d002      	beq.n	80050e4 <HAL_SPI_Receive+0x216>
 80050de:	2301      	movs	r3, #1
 80050e0:	75fb      	strb	r3, [r7, #23]
 80050e2:	e003      	b.n	80050ec <HAL_SPI_Receive+0x21e>
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2200      	movs	r2, #0
 80050f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80050f4:	7dfb      	ldrb	r3, [r7, #23]
 80050f6:	4618      	mov	r0, r3
 80050f8:	3718      	adds	r7, #24
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}

080050fe <HAL_SPI_TransmitReceive>:
 80050fe:	b580      	push	{r7, lr}
 8005100:	b08c      	sub	sp, #48	; 0x30
 8005102:	af00      	add	r7, sp, #0
 8005104:	60f8      	str	r0, [r7, #12]
 8005106:	60b9      	str	r1, [r7, #8]
 8005108:	607a      	str	r2, [r7, #4]
 800510a:	807b      	strh	r3, [r7, #2]
 800510c:	2301      	movs	r3, #1
 800510e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005110:	2300      	movs	r3, #0
 8005112:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800511c:	2b01      	cmp	r3, #1
 800511e:	d101      	bne.n	8005124 <HAL_SPI_TransmitReceive+0x26>
 8005120:	2302      	movs	r3, #2
 8005122:	e198      	b.n	8005456 <HAL_SPI_TransmitReceive+0x358>
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800512c:	f7fc fe8c 	bl	8001e48 <HAL_GetTick>
 8005130:	6278      	str	r0, [r7, #36]	; 0x24
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005138:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	61fb      	str	r3, [r7, #28]
 8005142:	887b      	ldrh	r3, [r7, #2]
 8005144:	837b      	strh	r3, [r7, #26]
 8005146:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800514a:	2b01      	cmp	r3, #1
 800514c:	d00f      	beq.n	800516e <HAL_SPI_TransmitReceive+0x70>
 800514e:	69fb      	ldr	r3, [r7, #28]
 8005150:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005154:	d107      	bne.n	8005166 <HAL_SPI_TransmitReceive+0x68>
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d103      	bne.n	8005166 <HAL_SPI_TransmitReceive+0x68>
 800515e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005162:	2b04      	cmp	r3, #4
 8005164:	d003      	beq.n	800516e <HAL_SPI_TransmitReceive+0x70>
 8005166:	2302      	movs	r3, #2
 8005168:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800516c:	e16d      	b.n	800544a <HAL_SPI_TransmitReceive+0x34c>
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d005      	beq.n	8005180 <HAL_SPI_TransmitReceive+0x82>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d002      	beq.n	8005180 <HAL_SPI_TransmitReceive+0x82>
 800517a:	887b      	ldrh	r3, [r7, #2]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d103      	bne.n	8005188 <HAL_SPI_TransmitReceive+0x8a>
 8005180:	2301      	movs	r3, #1
 8005182:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005186:	e160      	b.n	800544a <HAL_SPI_TransmitReceive+0x34c>
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800518e:	b2db      	uxtb	r3, r3
 8005190:	2b04      	cmp	r3, #4
 8005192:	d003      	beq.n	800519c <HAL_SPI_TransmitReceive+0x9e>
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2205      	movs	r2, #5
 8005198:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2200      	movs	r2, #0
 80051a0:	655a      	str	r2, [r3, #84]	; 0x54
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	687a      	ldr	r2, [r7, #4]
 80051a6:	639a      	str	r2, [r3, #56]	; 0x38
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	887a      	ldrh	r2, [r7, #2]
 80051ac:	87da      	strh	r2, [r3, #62]	; 0x3e
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	887a      	ldrh	r2, [r7, #2]
 80051b2:	879a      	strh	r2, [r3, #60]	; 0x3c
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	68ba      	ldr	r2, [r7, #8]
 80051b8:	631a      	str	r2, [r3, #48]	; 0x30
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	887a      	ldrh	r2, [r7, #2]
 80051be:	86da      	strh	r2, [r3, #54]	; 0x36
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	887a      	ldrh	r2, [r7, #2]
 80051c4:	869a      	strh	r2, [r3, #52]	; 0x34
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2200      	movs	r2, #0
 80051ca:	641a      	str	r2, [r3, #64]	; 0x40
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2200      	movs	r2, #0
 80051d0:	645a      	str	r2, [r3, #68]	; 0x44
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051dc:	2b40      	cmp	r3, #64	; 0x40
 80051de:	d007      	beq.n	80051f0 <HAL_SPI_TransmitReceive+0xf2>
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051ee:	601a      	str	r2, [r3, #0]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051f8:	d17c      	bne.n	80052f4 <HAL_SPI_TransmitReceive+0x1f6>
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d002      	beq.n	8005208 <HAL_SPI_TransmitReceive+0x10a>
 8005202:	8b7b      	ldrh	r3, [r7, #26]
 8005204:	2b01      	cmp	r3, #1
 8005206:	d16a      	bne.n	80052de <HAL_SPI_TransmitReceive+0x1e0>
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800520c:	881a      	ldrh	r2, [r3, #0]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	60da      	str	r2, [r3, #12]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005218:	1c9a      	adds	r2, r3, #2
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	631a      	str	r2, [r3, #48]	; 0x30
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005222:	b29b      	uxth	r3, r3
 8005224:	3b01      	subs	r3, #1
 8005226:	b29a      	uxth	r2, r3
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	86da      	strh	r2, [r3, #54]	; 0x36
 800522c:	e057      	b.n	80052de <HAL_SPI_TransmitReceive+0x1e0>
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	f003 0302 	and.w	r3, r3, #2
 8005238:	2b02      	cmp	r3, #2
 800523a:	d11b      	bne.n	8005274 <HAL_SPI_TransmitReceive+0x176>
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005240:	b29b      	uxth	r3, r3
 8005242:	2b00      	cmp	r3, #0
 8005244:	d016      	beq.n	8005274 <HAL_SPI_TransmitReceive+0x176>
 8005246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005248:	2b01      	cmp	r3, #1
 800524a:	d113      	bne.n	8005274 <HAL_SPI_TransmitReceive+0x176>
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005250:	881a      	ldrh	r2, [r3, #0]
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	60da      	str	r2, [r3, #12]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800525c:	1c9a      	adds	r2, r3, #2
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	631a      	str	r2, [r3, #48]	; 0x30
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005266:	b29b      	uxth	r3, r3
 8005268:	3b01      	subs	r3, #1
 800526a:	b29a      	uxth	r2, r3
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	86da      	strh	r2, [r3, #54]	; 0x36
 8005270:	2300      	movs	r3, #0
 8005272:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	f003 0301 	and.w	r3, r3, #1
 800527e:	2b01      	cmp	r3, #1
 8005280:	d119      	bne.n	80052b6 <HAL_SPI_TransmitReceive+0x1b8>
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005286:	b29b      	uxth	r3, r3
 8005288:	2b00      	cmp	r3, #0
 800528a:	d014      	beq.n	80052b6 <HAL_SPI_TransmitReceive+0x1b8>
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	68da      	ldr	r2, [r3, #12]
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005296:	b292      	uxth	r2, r2
 8005298:	801a      	strh	r2, [r3, #0]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800529e:	1c9a      	adds	r2, r3, #2
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	639a      	str	r2, [r3, #56]	; 0x38
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	3b01      	subs	r3, #1
 80052ac:	b29a      	uxth	r2, r3
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80052b2:	2301      	movs	r3, #1
 80052b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052b6:	f7fc fdc7 	bl	8001e48 <HAL_GetTick>
 80052ba:	4602      	mov	r2, r0
 80052bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052be:	1ad3      	subs	r3, r2, r3
 80052c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d80b      	bhi.n	80052de <HAL_SPI_TransmitReceive+0x1e0>
 80052c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052cc:	d007      	beq.n	80052de <HAL_SPI_TransmitReceive+0x1e0>
 80052ce:	2303      	movs	r3, #3
 80052d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80052dc:	e0b5      	b.n	800544a <HAL_SPI_TransmitReceive+0x34c>
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d1a2      	bne.n	800522e <HAL_SPI_TransmitReceive+0x130>
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d19d      	bne.n	800522e <HAL_SPI_TransmitReceive+0x130>
 80052f2:	e080      	b.n	80053f6 <HAL_SPI_TransmitReceive+0x2f8>
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d002      	beq.n	8005302 <HAL_SPI_TransmitReceive+0x204>
 80052fc:	8b7b      	ldrh	r3, [r7, #26]
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d16f      	bne.n	80053e2 <HAL_SPI_TransmitReceive+0x2e4>
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	330c      	adds	r3, #12
 800530c:	7812      	ldrb	r2, [r2, #0]
 800530e:	701a      	strb	r2, [r3, #0]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005314:	1c5a      	adds	r2, r3, #1
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	631a      	str	r2, [r3, #48]	; 0x30
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800531e:	b29b      	uxth	r3, r3
 8005320:	3b01      	subs	r3, #1
 8005322:	b29a      	uxth	r2, r3
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	86da      	strh	r2, [r3, #54]	; 0x36
 8005328:	e05b      	b.n	80053e2 <HAL_SPI_TransmitReceive+0x2e4>
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	f003 0302 	and.w	r3, r3, #2
 8005334:	2b02      	cmp	r3, #2
 8005336:	d11c      	bne.n	8005372 <HAL_SPI_TransmitReceive+0x274>
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800533c:	b29b      	uxth	r3, r3
 800533e:	2b00      	cmp	r3, #0
 8005340:	d017      	beq.n	8005372 <HAL_SPI_TransmitReceive+0x274>
 8005342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005344:	2b01      	cmp	r3, #1
 8005346:	d114      	bne.n	8005372 <HAL_SPI_TransmitReceive+0x274>
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	330c      	adds	r3, #12
 8005352:	7812      	ldrb	r2, [r2, #0]
 8005354:	701a      	strb	r2, [r3, #0]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800535a:	1c5a      	adds	r2, r3, #1
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	631a      	str	r2, [r3, #48]	; 0x30
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005364:	b29b      	uxth	r3, r3
 8005366:	3b01      	subs	r3, #1
 8005368:	b29a      	uxth	r2, r3
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	86da      	strh	r2, [r3, #54]	; 0x36
 800536e:	2300      	movs	r3, #0
 8005370:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	f003 0301 	and.w	r3, r3, #1
 800537c:	2b01      	cmp	r3, #1
 800537e:	d119      	bne.n	80053b4 <HAL_SPI_TransmitReceive+0x2b6>
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005384:	b29b      	uxth	r3, r3
 8005386:	2b00      	cmp	r3, #0
 8005388:	d014      	beq.n	80053b4 <HAL_SPI_TransmitReceive+0x2b6>
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	68da      	ldr	r2, [r3, #12]
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005394:	b2d2      	uxtb	r2, r2
 8005396:	701a      	strb	r2, [r3, #0]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800539c:	1c5a      	adds	r2, r3, #1
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	639a      	str	r2, [r3, #56]	; 0x38
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	3b01      	subs	r3, #1
 80053aa:	b29a      	uxth	r2, r3
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	87da      	strh	r2, [r3, #62]	; 0x3e
 80053b0:	2301      	movs	r3, #1
 80053b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053b4:	f7fc fd48 	bl	8001e48 <HAL_GetTick>
 80053b8:	4602      	mov	r2, r0
 80053ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053bc:	1ad3      	subs	r3, r2, r3
 80053be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d803      	bhi.n	80053cc <HAL_SPI_TransmitReceive+0x2ce>
 80053c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ca:	d102      	bne.n	80053d2 <HAL_SPI_TransmitReceive+0x2d4>
 80053cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d107      	bne.n	80053e2 <HAL_SPI_TransmitReceive+0x2e4>
 80053d2:	2303      	movs	r3, #3
 80053d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80053e0:	e033      	b.n	800544a <HAL_SPI_TransmitReceive+0x34c>
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d19e      	bne.n	800532a <HAL_SPI_TransmitReceive+0x22c>
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d199      	bne.n	800532a <HAL_SPI_TransmitReceive+0x22c>
 80053f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053f8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80053fa:	68f8      	ldr	r0, [r7, #12]
 80053fc:	f000 f90a 	bl	8005614 <SPI_EndRxTxTransaction>
 8005400:	4603      	mov	r3, r0
 8005402:	2b00      	cmp	r3, #0
 8005404:	d006      	beq.n	8005414 <HAL_SPI_TransmitReceive+0x316>
 8005406:	2301      	movs	r3, #1
 8005408:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2220      	movs	r2, #32
 8005410:	655a      	str	r2, [r3, #84]	; 0x54
 8005412:	e01a      	b.n	800544a <HAL_SPI_TransmitReceive+0x34c>
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d10a      	bne.n	8005432 <HAL_SPI_TransmitReceive+0x334>
 800541c:	2300      	movs	r3, #0
 800541e:	617b      	str	r3, [r7, #20]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	68db      	ldr	r3, [r3, #12]
 8005426:	617b      	str	r3, [r7, #20]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	617b      	str	r3, [r7, #20]
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005436:	2b00      	cmp	r3, #0
 8005438:	d003      	beq.n	8005442 <HAL_SPI_TransmitReceive+0x344>
 800543a:	2301      	movs	r3, #1
 800543c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005440:	e003      	b.n	800544a <HAL_SPI_TransmitReceive+0x34c>
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2201      	movs	r2, #1
 8005446:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2200      	movs	r2, #0
 800544e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8005452:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005456:	4618      	mov	r0, r3
 8005458:	3730      	adds	r7, #48	; 0x30
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}
	...

08005460 <SPI_WaitFlagStateUntilTimeout>:
 8005460:	b580      	push	{r7, lr}
 8005462:	b088      	sub	sp, #32
 8005464:	af00      	add	r7, sp, #0
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	60b9      	str	r1, [r7, #8]
 800546a:	603b      	str	r3, [r7, #0]
 800546c:	4613      	mov	r3, r2
 800546e:	71fb      	strb	r3, [r7, #7]
 8005470:	f7fc fcea 	bl	8001e48 <HAL_GetTick>
 8005474:	4602      	mov	r2, r0
 8005476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005478:	1a9b      	subs	r3, r3, r2
 800547a:	683a      	ldr	r2, [r7, #0]
 800547c:	4413      	add	r3, r2
 800547e:	61fb      	str	r3, [r7, #28]
 8005480:	f7fc fce2 	bl	8001e48 <HAL_GetTick>
 8005484:	61b8      	str	r0, [r7, #24]
 8005486:	4b39      	ldr	r3, [pc, #228]	; (800556c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	015b      	lsls	r3, r3, #5
 800548c:	0d1b      	lsrs	r3, r3, #20
 800548e:	69fa      	ldr	r2, [r7, #28]
 8005490:	fb02 f303 	mul.w	r3, r2, r3
 8005494:	617b      	str	r3, [r7, #20]
 8005496:	e054      	b.n	8005542 <SPI_WaitFlagStateUntilTimeout+0xe2>
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800549e:	d050      	beq.n	8005542 <SPI_WaitFlagStateUntilTimeout+0xe2>
 80054a0:	f7fc fcd2 	bl	8001e48 <HAL_GetTick>
 80054a4:	4602      	mov	r2, r0
 80054a6:	69bb      	ldr	r3, [r7, #24]
 80054a8:	1ad3      	subs	r3, r2, r3
 80054aa:	69fa      	ldr	r2, [r7, #28]
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d902      	bls.n	80054b6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80054b0:	69fb      	ldr	r3, [r7, #28]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d13d      	bne.n	8005532 <SPI_WaitFlagStateUntilTimeout+0xd2>
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	685a      	ldr	r2, [r3, #4]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80054c4:	605a      	str	r2, [r3, #4]
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054ce:	d111      	bne.n	80054f4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054d8:	d004      	beq.n	80054e4 <SPI_WaitFlagStateUntilTimeout+0x84>
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054e2:	d107      	bne.n	80054f4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054f2:	601a      	str	r2, [r3, #0]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054fc:	d10f      	bne.n	800551e <SPI_WaitFlagStateUntilTimeout+0xbe>
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800550c:	601a      	str	r2, [r3, #0]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800551c:	601a      	str	r2, [r3, #0]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2201      	movs	r2, #1
 8005522:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2200      	movs	r2, #0
 800552a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800552e:	2303      	movs	r3, #3
 8005530:	e017      	b.n	8005562 <SPI_WaitFlagStateUntilTimeout+0x102>
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d101      	bne.n	800553c <SPI_WaitFlagStateUntilTimeout+0xdc>
 8005538:	2300      	movs	r3, #0
 800553a:	61fb      	str	r3, [r7, #28]
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	3b01      	subs	r3, #1
 8005540:	617b      	str	r3, [r7, #20]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	689a      	ldr	r2, [r3, #8]
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	4013      	ands	r3, r2
 800554c:	68ba      	ldr	r2, [r7, #8]
 800554e:	429a      	cmp	r2, r3
 8005550:	bf0c      	ite	eq
 8005552:	2301      	moveq	r3, #1
 8005554:	2300      	movne	r3, #0
 8005556:	b2db      	uxtb	r3, r3
 8005558:	461a      	mov	r2, r3
 800555a:	79fb      	ldrb	r3, [r7, #7]
 800555c:	429a      	cmp	r2, r3
 800555e:	d19b      	bne.n	8005498 <SPI_WaitFlagStateUntilTimeout+0x38>
 8005560:	2300      	movs	r3, #0
 8005562:	4618      	mov	r0, r3
 8005564:	3720      	adds	r7, #32
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}
 800556a:	bf00      	nop
 800556c:	2000006c 	.word	0x2000006c

08005570 <SPI_EndRxTransaction>:
 8005570:	b580      	push	{r7, lr}
 8005572:	b086      	sub	sp, #24
 8005574:	af02      	add	r7, sp, #8
 8005576:	60f8      	str	r0, [r7, #12]
 8005578:	60b9      	str	r1, [r7, #8]
 800557a:	607a      	str	r2, [r7, #4]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005584:	d111      	bne.n	80055aa <SPI_EndRxTransaction+0x3a>
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800558e:	d004      	beq.n	800559a <SPI_EndRxTransaction+0x2a>
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005598:	d107      	bne.n	80055aa <SPI_EndRxTransaction+0x3a>
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055a8:	601a      	str	r2, [r3, #0]
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055b2:	d117      	bne.n	80055e4 <SPI_EndRxTransaction+0x74>
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055bc:	d112      	bne.n	80055e4 <SPI_EndRxTransaction+0x74>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	9300      	str	r3, [sp, #0]
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	2200      	movs	r2, #0
 80055c6:	2101      	movs	r1, #1
 80055c8:	68f8      	ldr	r0, [r7, #12]
 80055ca:	f7ff ff49 	bl	8005460 <SPI_WaitFlagStateUntilTimeout>
 80055ce:	4603      	mov	r3, r0
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d01a      	beq.n	800560a <SPI_EndRxTransaction+0x9a>
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055d8:	f043 0220 	orr.w	r2, r3, #32
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	655a      	str	r2, [r3, #84]	; 0x54
 80055e0:	2303      	movs	r3, #3
 80055e2:	e013      	b.n	800560c <SPI_EndRxTransaction+0x9c>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	9300      	str	r3, [sp, #0]
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	2200      	movs	r2, #0
 80055ec:	2180      	movs	r1, #128	; 0x80
 80055ee:	68f8      	ldr	r0, [r7, #12]
 80055f0:	f7ff ff36 	bl	8005460 <SPI_WaitFlagStateUntilTimeout>
 80055f4:	4603      	mov	r3, r0
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d007      	beq.n	800560a <SPI_EndRxTransaction+0x9a>
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055fe:	f043 0220 	orr.w	r2, r3, #32
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	655a      	str	r2, [r3, #84]	; 0x54
 8005606:	2303      	movs	r3, #3
 8005608:	e000      	b.n	800560c <SPI_EndRxTransaction+0x9c>
 800560a:	2300      	movs	r3, #0
 800560c:	4618      	mov	r0, r3
 800560e:	3710      	adds	r7, #16
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}

08005614 <SPI_EndRxTxTransaction>:
 8005614:	b580      	push	{r7, lr}
 8005616:	b086      	sub	sp, #24
 8005618:	af02      	add	r7, sp, #8
 800561a:	60f8      	str	r0, [r7, #12]
 800561c:	60b9      	str	r1, [r7, #8]
 800561e:	607a      	str	r2, [r7, #4]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	9300      	str	r3, [sp, #0]
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	2200      	movs	r2, #0
 8005628:	2180      	movs	r1, #128	; 0x80
 800562a:	68f8      	ldr	r0, [r7, #12]
 800562c:	f7ff ff18 	bl	8005460 <SPI_WaitFlagStateUntilTimeout>
 8005630:	4603      	mov	r3, r0
 8005632:	2b00      	cmp	r3, #0
 8005634:	d007      	beq.n	8005646 <SPI_EndRxTxTransaction+0x32>
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800563a:	f043 0220 	orr.w	r2, r3, #32
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	655a      	str	r2, [r3, #84]	; 0x54
 8005642:	2303      	movs	r3, #3
 8005644:	e000      	b.n	8005648 <SPI_EndRxTxTransaction+0x34>
 8005646:	2300      	movs	r3, #0
 8005648:	4618      	mov	r0, r3
 800564a:	3710      	adds	r7, #16
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}

08005650 <HAL_TIM_Base_Init>:
 8005650:	b580      	push	{r7, lr}
 8005652:	b082      	sub	sp, #8
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d101      	bne.n	8005662 <HAL_TIM_Base_Init+0x12>
 800565e:	2301      	movs	r3, #1
 8005660:	e041      	b.n	80056e6 <HAL_TIM_Base_Init+0x96>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005668:	b2db      	uxtb	r3, r3
 800566a:	2b00      	cmp	r3, #0
 800566c:	d106      	bne.n	800567c <HAL_TIM_Base_Init+0x2c>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f7fc fb4a 	bl	8001d10 <HAL_TIM_Base_MspInit>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2202      	movs	r2, #2
 8005680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	3304      	adds	r3, #4
 800568c:	4619      	mov	r1, r3
 800568e:	4610      	mov	r0, r2
 8005690:	f000 f82e 	bl	80056f0 <TIM_Base_SetConfig>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2201      	movs	r2, #1
 80056a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2201      	movs	r2, #1
 80056b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2201      	movs	r2, #1
 80056b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2201      	movs	r2, #1
 80056c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2201      	movs	r2, #1
 80056c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2201      	movs	r2, #1
 80056e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80056e4:	2300      	movs	r3, #0
 80056e6:	4618      	mov	r0, r3
 80056e8:	3708      	adds	r7, #8
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
	...

080056f0 <TIM_Base_SetConfig>:
 80056f0:	b480      	push	{r7}
 80056f2:	b085      	sub	sp, #20
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	6039      	str	r1, [r7, #0]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	60fb      	str	r3, [r7, #12]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	4a2d      	ldr	r2, [pc, #180]	; (80057b8 <TIM_Base_SetConfig+0xc8>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d00f      	beq.n	8005728 <TIM_Base_SetConfig+0x38>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800570e:	d00b      	beq.n	8005728 <TIM_Base_SetConfig+0x38>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	4a2a      	ldr	r2, [pc, #168]	; (80057bc <TIM_Base_SetConfig+0xcc>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d007      	beq.n	8005728 <TIM_Base_SetConfig+0x38>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	4a29      	ldr	r2, [pc, #164]	; (80057c0 <TIM_Base_SetConfig+0xd0>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d003      	beq.n	8005728 <TIM_Base_SetConfig+0x38>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	4a28      	ldr	r2, [pc, #160]	; (80057c4 <TIM_Base_SetConfig+0xd4>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d108      	bne.n	800573a <TIM_Base_SetConfig+0x4a>
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800572e:	60fb      	str	r3, [r7, #12]
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	68fa      	ldr	r2, [r7, #12]
 8005736:	4313      	orrs	r3, r2
 8005738:	60fb      	str	r3, [r7, #12]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	4a1e      	ldr	r2, [pc, #120]	; (80057b8 <TIM_Base_SetConfig+0xc8>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d00f      	beq.n	8005762 <TIM_Base_SetConfig+0x72>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005748:	d00b      	beq.n	8005762 <TIM_Base_SetConfig+0x72>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a1b      	ldr	r2, [pc, #108]	; (80057bc <TIM_Base_SetConfig+0xcc>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d007      	beq.n	8005762 <TIM_Base_SetConfig+0x72>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4a1a      	ldr	r2, [pc, #104]	; (80057c0 <TIM_Base_SetConfig+0xd0>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d003      	beq.n	8005762 <TIM_Base_SetConfig+0x72>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a19      	ldr	r2, [pc, #100]	; (80057c4 <TIM_Base_SetConfig+0xd4>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d108      	bne.n	8005774 <TIM_Base_SetConfig+0x84>
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005768:	60fb      	str	r3, [r7, #12]
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	68db      	ldr	r3, [r3, #12]
 800576e:	68fa      	ldr	r2, [r7, #12]
 8005770:	4313      	orrs	r3, r2
 8005772:	60fb      	str	r3, [r7, #12]
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	695b      	ldr	r3, [r3, #20]
 800577e:	4313      	orrs	r3, r2
 8005780:	60fb      	str	r3, [r7, #12]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	68fa      	ldr	r2, [r7, #12]
 8005786:	601a      	str	r2, [r3, #0]
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	689a      	ldr	r2, [r3, #8]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	62da      	str	r2, [r3, #44]	; 0x2c
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	629a      	str	r2, [r3, #40]	; 0x28
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	4a07      	ldr	r2, [pc, #28]	; (80057b8 <TIM_Base_SetConfig+0xc8>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d103      	bne.n	80057a8 <TIM_Base_SetConfig+0xb8>
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	691a      	ldr	r2, [r3, #16]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	631a      	str	r2, [r3, #48]	; 0x30
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2201      	movs	r2, #1
 80057ac:	615a      	str	r2, [r3, #20]
 80057ae:	bf00      	nop
 80057b0:	3714      	adds	r7, #20
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bc80      	pop	{r7}
 80057b6:	4770      	bx	lr
 80057b8:	40012c00 	.word	0x40012c00
 80057bc:	40000400 	.word	0x40000400
 80057c0:	40000800 	.word	0x40000800
 80057c4:	40000c00 	.word	0x40000c00

080057c8 <HAL_TIMEx_MasterConfigSynchronization>:
 80057c8:	b480      	push	{r7}
 80057ca:	b085      	sub	sp, #20
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d101      	bne.n	80057e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80057dc:	2302      	movs	r3, #2
 80057de:	e04b      	b.n	8005878 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2201      	movs	r2, #1
 80057e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2202      	movs	r2, #2
 80057ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	60fb      	str	r3, [r7, #12]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	60bb      	str	r3, [r7, #8]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005806:	60fb      	str	r3, [r7, #12]
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	68fa      	ldr	r2, [r7, #12]
 800580e:	4313      	orrs	r3, r2
 8005810:	60fb      	str	r3, [r7, #12]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	68fa      	ldr	r2, [r7, #12]
 8005818:	605a      	str	r2, [r3, #4]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a19      	ldr	r2, [pc, #100]	; (8005884 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d013      	beq.n	800584c <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800582c:	d00e      	beq.n	800584c <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a15      	ldr	r2, [pc, #84]	; (8005888 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d009      	beq.n	800584c <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a13      	ldr	r2, [pc, #76]	; (800588c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d004      	beq.n	800584c <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a12      	ldr	r2, [pc, #72]	; (8005890 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d10c      	bne.n	8005866 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005852:	60bb      	str	r3, [r7, #8]
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	68ba      	ldr	r2, [r7, #8]
 800585a:	4313      	orrs	r3, r2
 800585c:	60bb      	str	r3, [r7, #8]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	68ba      	ldr	r2, [r7, #8]
 8005864:	609a      	str	r2, [r3, #8]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2201      	movs	r2, #1
 800586a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005876:	2300      	movs	r3, #0
 8005878:	4618      	mov	r0, r3
 800587a:	3714      	adds	r7, #20
 800587c:	46bd      	mov	sp, r7
 800587e:	bc80      	pop	{r7}
 8005880:	4770      	bx	lr
 8005882:	bf00      	nop
 8005884:	40012c00 	.word	0x40012c00
 8005888:	40000400 	.word	0x40000400
 800588c:	40000800 	.word	0x40000800
 8005890:	40000c00 	.word	0x40000c00

08005894 <USB_CoreInit>:
 8005894:	b084      	sub	sp, #16
 8005896:	b580      	push	{r7, lr}
 8005898:	b084      	sub	sp, #16
 800589a:	af00      	add	r7, sp, #0
 800589c:	6078      	str	r0, [r7, #4]
 800589e:	f107 001c 	add.w	r0, r7, #28
 80058a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	60da      	str	r2, [r3, #12]
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f001 f9de 	bl	8006c74 <USB_CoreReset>
 80058b8:	4603      	mov	r3, r0
 80058ba:	73fb      	strb	r3, [r7, #15]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058c0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	639a      	str	r2, [r3, #56]	; 0x38
 80058c8:	7bfb      	ldrb	r3, [r7, #15]
 80058ca:	4618      	mov	r0, r3
 80058cc:	3710      	adds	r7, #16
 80058ce:	46bd      	mov	sp, r7
 80058d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80058d4:	b004      	add	sp, #16
 80058d6:	4770      	bx	lr

080058d8 <USB_SetTurnaroundTime>:
 80058d8:	b480      	push	{r7}
 80058da:	b087      	sub	sp, #28
 80058dc:	af00      	add	r7, sp, #0
 80058de:	60f8      	str	r0, [r7, #12]
 80058e0:	60b9      	str	r1, [r7, #8]
 80058e2:	4613      	mov	r3, r2
 80058e4:	71fb      	strb	r3, [r7, #7]
 80058e6:	79fb      	ldrb	r3, [r7, #7]
 80058e8:	2b02      	cmp	r3, #2
 80058ea:	d165      	bne.n	80059b8 <USB_SetTurnaroundTime+0xe0>
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	4a3e      	ldr	r2, [pc, #248]	; (80059e8 <USB_SetTurnaroundTime+0x110>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d906      	bls.n	8005902 <USB_SetTurnaroundTime+0x2a>
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	4a3d      	ldr	r2, [pc, #244]	; (80059ec <USB_SetTurnaroundTime+0x114>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d202      	bcs.n	8005902 <USB_SetTurnaroundTime+0x2a>
 80058fc:	230f      	movs	r3, #15
 80058fe:	617b      	str	r3, [r7, #20]
 8005900:	e05c      	b.n	80059bc <USB_SetTurnaroundTime+0xe4>
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	4a39      	ldr	r2, [pc, #228]	; (80059ec <USB_SetTurnaroundTime+0x114>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d306      	bcc.n	8005918 <USB_SetTurnaroundTime+0x40>
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	4a38      	ldr	r2, [pc, #224]	; (80059f0 <USB_SetTurnaroundTime+0x118>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d202      	bcs.n	8005918 <USB_SetTurnaroundTime+0x40>
 8005912:	230e      	movs	r3, #14
 8005914:	617b      	str	r3, [r7, #20]
 8005916:	e051      	b.n	80059bc <USB_SetTurnaroundTime+0xe4>
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	4a35      	ldr	r2, [pc, #212]	; (80059f0 <USB_SetTurnaroundTime+0x118>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d306      	bcc.n	800592e <USB_SetTurnaroundTime+0x56>
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	4a34      	ldr	r2, [pc, #208]	; (80059f4 <USB_SetTurnaroundTime+0x11c>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d202      	bcs.n	800592e <USB_SetTurnaroundTime+0x56>
 8005928:	230d      	movs	r3, #13
 800592a:	617b      	str	r3, [r7, #20]
 800592c:	e046      	b.n	80059bc <USB_SetTurnaroundTime+0xe4>
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	4a30      	ldr	r2, [pc, #192]	; (80059f4 <USB_SetTurnaroundTime+0x11c>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d306      	bcc.n	8005944 <USB_SetTurnaroundTime+0x6c>
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	4a2f      	ldr	r2, [pc, #188]	; (80059f8 <USB_SetTurnaroundTime+0x120>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d802      	bhi.n	8005944 <USB_SetTurnaroundTime+0x6c>
 800593e:	230c      	movs	r3, #12
 8005940:	617b      	str	r3, [r7, #20]
 8005942:	e03b      	b.n	80059bc <USB_SetTurnaroundTime+0xe4>
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	4a2c      	ldr	r2, [pc, #176]	; (80059f8 <USB_SetTurnaroundTime+0x120>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d906      	bls.n	800595a <USB_SetTurnaroundTime+0x82>
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	4a2b      	ldr	r2, [pc, #172]	; (80059fc <USB_SetTurnaroundTime+0x124>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d802      	bhi.n	800595a <USB_SetTurnaroundTime+0x82>
 8005954:	230b      	movs	r3, #11
 8005956:	617b      	str	r3, [r7, #20]
 8005958:	e030      	b.n	80059bc <USB_SetTurnaroundTime+0xe4>
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	4a27      	ldr	r2, [pc, #156]	; (80059fc <USB_SetTurnaroundTime+0x124>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d906      	bls.n	8005970 <USB_SetTurnaroundTime+0x98>
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	4a26      	ldr	r2, [pc, #152]	; (8005a00 <USB_SetTurnaroundTime+0x128>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d802      	bhi.n	8005970 <USB_SetTurnaroundTime+0x98>
 800596a:	230a      	movs	r3, #10
 800596c:	617b      	str	r3, [r7, #20]
 800596e:	e025      	b.n	80059bc <USB_SetTurnaroundTime+0xe4>
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	4a23      	ldr	r2, [pc, #140]	; (8005a00 <USB_SetTurnaroundTime+0x128>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d906      	bls.n	8005986 <USB_SetTurnaroundTime+0xae>
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	4a22      	ldr	r2, [pc, #136]	; (8005a04 <USB_SetTurnaroundTime+0x12c>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d202      	bcs.n	8005986 <USB_SetTurnaroundTime+0xae>
 8005980:	2309      	movs	r3, #9
 8005982:	617b      	str	r3, [r7, #20]
 8005984:	e01a      	b.n	80059bc <USB_SetTurnaroundTime+0xe4>
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	4a1e      	ldr	r2, [pc, #120]	; (8005a04 <USB_SetTurnaroundTime+0x12c>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d306      	bcc.n	800599c <USB_SetTurnaroundTime+0xc4>
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	4a1d      	ldr	r2, [pc, #116]	; (8005a08 <USB_SetTurnaroundTime+0x130>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d802      	bhi.n	800599c <USB_SetTurnaroundTime+0xc4>
 8005996:	2308      	movs	r3, #8
 8005998:	617b      	str	r3, [r7, #20]
 800599a:	e00f      	b.n	80059bc <USB_SetTurnaroundTime+0xe4>
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	4a1a      	ldr	r2, [pc, #104]	; (8005a08 <USB_SetTurnaroundTime+0x130>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d906      	bls.n	80059b2 <USB_SetTurnaroundTime+0xda>
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	4a19      	ldr	r2, [pc, #100]	; (8005a0c <USB_SetTurnaroundTime+0x134>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d202      	bcs.n	80059b2 <USB_SetTurnaroundTime+0xda>
 80059ac:	2307      	movs	r3, #7
 80059ae:	617b      	str	r3, [r7, #20]
 80059b0:	e004      	b.n	80059bc <USB_SetTurnaroundTime+0xe4>
 80059b2:	2306      	movs	r3, #6
 80059b4:	617b      	str	r3, [r7, #20]
 80059b6:	e001      	b.n	80059bc <USB_SetTurnaroundTime+0xe4>
 80059b8:	2309      	movs	r3, #9
 80059ba:	617b      	str	r3, [r7, #20]
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	68db      	ldr	r3, [r3, #12]
 80059c0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	60da      	str	r2, [r3, #12]
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	68da      	ldr	r2, [r3, #12]
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	029b      	lsls	r3, r3, #10
 80059d0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80059d4:	431a      	orrs	r2, r3
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	60da      	str	r2, [r3, #12]
 80059da:	2300      	movs	r3, #0
 80059dc:	4618      	mov	r0, r3
 80059de:	371c      	adds	r7, #28
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bc80      	pop	{r7}
 80059e4:	4770      	bx	lr
 80059e6:	bf00      	nop
 80059e8:	00d8acbf 	.word	0x00d8acbf
 80059ec:	00e4e1c0 	.word	0x00e4e1c0
 80059f0:	00f42400 	.word	0x00f42400
 80059f4:	01067380 	.word	0x01067380
 80059f8:	011a499f 	.word	0x011a499f
 80059fc:	01312cff 	.word	0x01312cff
 8005a00:	014ca43f 	.word	0x014ca43f
 8005a04:	016e3600 	.word	0x016e3600
 8005a08:	01a6ab1f 	.word	0x01a6ab1f
 8005a0c:	01e84800 	.word	0x01e84800

08005a10 <USB_EnableGlobalInt>:
 8005a10:	b480      	push	{r7}
 8005a12:	b083      	sub	sp, #12
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	f043 0201 	orr.w	r2, r3, #1
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	609a      	str	r2, [r3, #8]
 8005a24:	2300      	movs	r3, #0
 8005a26:	4618      	mov	r0, r3
 8005a28:	370c      	adds	r7, #12
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bc80      	pop	{r7}
 8005a2e:	4770      	bx	lr

08005a30 <USB_DisableGlobalInt>:
 8005a30:	b480      	push	{r7}
 8005a32:	b083      	sub	sp, #12
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	f023 0201 	bic.w	r2, r3, #1
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	609a      	str	r2, [r3, #8]
 8005a44:	2300      	movs	r3, #0
 8005a46:	4618      	mov	r0, r3
 8005a48:	370c      	adds	r7, #12
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bc80      	pop	{r7}
 8005a4e:	4770      	bx	lr

08005a50 <USB_SetCurrentMode>:
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b084      	sub	sp, #16
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	460b      	mov	r3, r1
 8005a5a:	70fb      	strb	r3, [r7, #3]
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	60fb      	str	r3, [r7, #12]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	68db      	ldr	r3, [r3, #12]
 8005a64:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	60da      	str	r2, [r3, #12]
 8005a6c:	78fb      	ldrb	r3, [r7, #3]
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d115      	bne.n	8005a9e <USB_SetCurrentMode+0x4e>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	68db      	ldr	r3, [r3, #12]
 8005a76:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	60da      	str	r2, [r3, #12]
 8005a7e:	2001      	movs	r0, #1
 8005a80:	f7fc f9ec 	bl	8001e5c <HAL_Delay>
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	3301      	adds	r3, #1
 8005a88:	60fb      	str	r3, [r7, #12]
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f001 f87a 	bl	8006b84 <USB_GetMode>
 8005a90:	4603      	mov	r3, r0
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d01e      	beq.n	8005ad4 <USB_SetCurrentMode+0x84>
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2b31      	cmp	r3, #49	; 0x31
 8005a9a:	d9f0      	bls.n	8005a7e <USB_SetCurrentMode+0x2e>
 8005a9c:	e01a      	b.n	8005ad4 <USB_SetCurrentMode+0x84>
 8005a9e:	78fb      	ldrb	r3, [r7, #3]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d115      	bne.n	8005ad0 <USB_SetCurrentMode+0x80>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	60da      	str	r2, [r3, #12]
 8005ab0:	2001      	movs	r0, #1
 8005ab2:	f7fc f9d3 	bl	8001e5c <HAL_Delay>
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	3301      	adds	r3, #1
 8005aba:	60fb      	str	r3, [r7, #12]
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f001 f861 	bl	8006b84 <USB_GetMode>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d005      	beq.n	8005ad4 <USB_SetCurrentMode+0x84>
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2b31      	cmp	r3, #49	; 0x31
 8005acc:	d9f0      	bls.n	8005ab0 <USB_SetCurrentMode+0x60>
 8005ace:	e001      	b.n	8005ad4 <USB_SetCurrentMode+0x84>
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	e005      	b.n	8005ae0 <USB_SetCurrentMode+0x90>
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2b32      	cmp	r3, #50	; 0x32
 8005ad8:	d101      	bne.n	8005ade <USB_SetCurrentMode+0x8e>
 8005ada:	2301      	movs	r3, #1
 8005adc:	e000      	b.n	8005ae0 <USB_SetCurrentMode+0x90>
 8005ade:	2300      	movs	r3, #0
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3710      	adds	r7, #16
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}

08005ae8 <USB_DevInit>:
 8005ae8:	b084      	sub	sp, #16
 8005aea:	b580      	push	{r7, lr}
 8005aec:	b086      	sub	sp, #24
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	6078      	str	r0, [r7, #4]
 8005af2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005af6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8005afa:	2300      	movs	r3, #0
 8005afc:	75fb      	strb	r3, [r7, #23]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	60fb      	str	r3, [r7, #12]
 8005b02:	2300      	movs	r3, #0
 8005b04:	613b      	str	r3, [r7, #16]
 8005b06:	e009      	b.n	8005b1c <USB_DevInit+0x34>
 8005b08:	687a      	ldr	r2, [r7, #4]
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	3340      	adds	r3, #64	; 0x40
 8005b0e:	009b      	lsls	r3, r3, #2
 8005b10:	4413      	add	r3, r2
 8005b12:	2200      	movs	r2, #0
 8005b14:	605a      	str	r2, [r3, #4]
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	3301      	adds	r3, #1
 8005b1a:	613b      	str	r3, [r7, #16]
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	2b0e      	cmp	r3, #14
 8005b20:	d9f2      	bls.n	8005b08 <USB_DevInit+0x20>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b26:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	639a      	str	r2, [r3, #56]	; 0x38
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005b34:	461a      	mov	r2, r3
 8005b36:	2300      	movs	r3, #0
 8005b38:	6013      	str	r3, [r2, #0]
 8005b3a:	2103      	movs	r1, #3
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f000 f959 	bl	8005df4 <USB_SetDevSpeed>
 8005b42:	2110      	movs	r1, #16
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f000 f8f1 	bl	8005d2c <USB_FlushTxFifo>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d001      	beq.n	8005b54 <USB_DevInit+0x6c>
 8005b50:	2301      	movs	r3, #1
 8005b52:	75fb      	strb	r3, [r7, #23]
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f000 f91d 	bl	8005d94 <USB_FlushRxFifo>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d001      	beq.n	8005b64 <USB_DevInit+0x7c>
 8005b60:	2301      	movs	r3, #1
 8005b62:	75fb      	strb	r3, [r7, #23]
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	6113      	str	r3, [r2, #16]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b76:	461a      	mov	r2, r3
 8005b78:	2300      	movs	r3, #0
 8005b7a:	6153      	str	r3, [r2, #20]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b82:	461a      	mov	r2, r3
 8005b84:	2300      	movs	r3, #0
 8005b86:	61d3      	str	r3, [r2, #28]
 8005b88:	2300      	movs	r3, #0
 8005b8a:	613b      	str	r3, [r7, #16]
 8005b8c:	e043      	b.n	8005c16 <USB_DevInit+0x12e>
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	015a      	lsls	r2, r3, #5
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	4413      	add	r3, r2
 8005b96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ba0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ba4:	d118      	bne.n	8005bd8 <USB_DevInit+0xf0>
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d10a      	bne.n	8005bc2 <USB_DevInit+0xda>
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	015a      	lsls	r2, r3, #5
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	4413      	add	r3, r2
 8005bb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bb8:	461a      	mov	r2, r3
 8005bba:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005bbe:	6013      	str	r3, [r2, #0]
 8005bc0:	e013      	b.n	8005bea <USB_DevInit+0x102>
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	015a      	lsls	r2, r3, #5
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	4413      	add	r3, r2
 8005bca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bce:	461a      	mov	r2, r3
 8005bd0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005bd4:	6013      	str	r3, [r2, #0]
 8005bd6:	e008      	b.n	8005bea <USB_DevInit+0x102>
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	015a      	lsls	r2, r3, #5
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	4413      	add	r3, r2
 8005be0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005be4:	461a      	mov	r2, r3
 8005be6:	2300      	movs	r3, #0
 8005be8:	6013      	str	r3, [r2, #0]
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	015a      	lsls	r2, r3, #5
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	4413      	add	r3, r2
 8005bf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	6113      	str	r3, [r2, #16]
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	015a      	lsls	r2, r3, #5
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	4413      	add	r3, r2
 8005c04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c08:	461a      	mov	r2, r3
 8005c0a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005c0e:	6093      	str	r3, [r2, #8]
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	3301      	adds	r3, #1
 8005c14:	613b      	str	r3, [r7, #16]
 8005c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c18:	693a      	ldr	r2, [r7, #16]
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d3b7      	bcc.n	8005b8e <USB_DevInit+0xa6>
 8005c1e:	2300      	movs	r3, #0
 8005c20:	613b      	str	r3, [r7, #16]
 8005c22:	e043      	b.n	8005cac <USB_DevInit+0x1c4>
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	015a      	lsls	r2, r3, #5
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	4413      	add	r3, r2
 8005c2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c3a:	d118      	bne.n	8005c6e <USB_DevInit+0x186>
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d10a      	bne.n	8005c58 <USB_DevInit+0x170>
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	015a      	lsls	r2, r3, #5
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	4413      	add	r3, r2
 8005c4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c4e:	461a      	mov	r2, r3
 8005c50:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005c54:	6013      	str	r3, [r2, #0]
 8005c56:	e013      	b.n	8005c80 <USB_DevInit+0x198>
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	015a      	lsls	r2, r3, #5
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	4413      	add	r3, r2
 8005c60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c64:	461a      	mov	r2, r3
 8005c66:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005c6a:	6013      	str	r3, [r2, #0]
 8005c6c:	e008      	b.n	8005c80 <USB_DevInit+0x198>
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	015a      	lsls	r2, r3, #5
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	4413      	add	r3, r2
 8005c76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	6013      	str	r3, [r2, #0]
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	015a      	lsls	r2, r3, #5
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	4413      	add	r3, r2
 8005c88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	2300      	movs	r3, #0
 8005c90:	6113      	str	r3, [r2, #16]
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	015a      	lsls	r2, r3, #5
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	4413      	add	r3, r2
 8005c9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c9e:	461a      	mov	r2, r3
 8005ca0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005ca4:	6093      	str	r3, [r2, #8]
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	3301      	adds	r3, #1
 8005caa:	613b      	str	r3, [r7, #16]
 8005cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cae:	693a      	ldr	r2, [r7, #16]
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d3b7      	bcc.n	8005c24 <USB_DevInit+0x13c>
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cba:	691b      	ldr	r3, [r3, #16]
 8005cbc:	68fa      	ldr	r2, [r7, #12]
 8005cbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cc2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005cc6:	6113      	str	r3, [r2, #16]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	619a      	str	r2, [r3, #24]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005cd4:	615a      	str	r2, [r3, #20]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	699b      	ldr	r3, [r3, #24]
 8005cda:	f043 0210 	orr.w	r2, r3, #16
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	619a      	str	r2, [r3, #24]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	699a      	ldr	r2, [r3, #24]
 8005ce6:	4b10      	ldr	r3, [pc, #64]	; (8005d28 <USB_DevInit+0x240>)
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	687a      	ldr	r2, [r7, #4]
 8005cec:	6193      	str	r3, [r2, #24]
 8005cee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d005      	beq.n	8005d00 <USB_DevInit+0x218>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	699b      	ldr	r3, [r3, #24]
 8005cf8:	f043 0208 	orr.w	r2, r3, #8
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	619a      	str	r2, [r3, #24]
 8005d00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d107      	bne.n	8005d16 <USB_DevInit+0x22e>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	699b      	ldr	r3, [r3, #24]
 8005d0a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d0e:	f043 0304 	orr.w	r3, r3, #4
 8005d12:	687a      	ldr	r2, [r7, #4]
 8005d14:	6193      	str	r3, [r2, #24]
 8005d16:	7dfb      	ldrb	r3, [r7, #23]
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3718      	adds	r7, #24
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d22:	b004      	add	sp, #16
 8005d24:	4770      	bx	lr
 8005d26:	bf00      	nop
 8005d28:	803c3800 	.word	0x803c3800

08005d2c <USB_FlushTxFifo>:
 8005d2c:	b480      	push	{r7}
 8005d2e:	b085      	sub	sp, #20
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	6039      	str	r1, [r7, #0]
 8005d36:	2300      	movs	r3, #0
 8005d38:	60fb      	str	r3, [r7, #12]
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	3301      	adds	r3, #1
 8005d3e:	60fb      	str	r3, [r7, #12]
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	4a13      	ldr	r2, [pc, #76]	; (8005d90 <USB_FlushTxFifo+0x64>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d901      	bls.n	8005d4c <USB_FlushTxFifo+0x20>
 8005d48:	2303      	movs	r3, #3
 8005d4a:	e01b      	b.n	8005d84 <USB_FlushTxFifo+0x58>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	691b      	ldr	r3, [r3, #16]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	daf2      	bge.n	8005d3a <USB_FlushTxFifo+0xe>
 8005d54:	2300      	movs	r3, #0
 8005d56:	60fb      	str	r3, [r7, #12]
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	019b      	lsls	r3, r3, #6
 8005d5c:	f043 0220 	orr.w	r2, r3, #32
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	611a      	str	r2, [r3, #16]
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	3301      	adds	r3, #1
 8005d68:	60fb      	str	r3, [r7, #12]
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	4a08      	ldr	r2, [pc, #32]	; (8005d90 <USB_FlushTxFifo+0x64>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d901      	bls.n	8005d76 <USB_FlushTxFifo+0x4a>
 8005d72:	2303      	movs	r3, #3
 8005d74:	e006      	b.n	8005d84 <USB_FlushTxFifo+0x58>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	691b      	ldr	r3, [r3, #16]
 8005d7a:	f003 0320 	and.w	r3, r3, #32
 8005d7e:	2b20      	cmp	r3, #32
 8005d80:	d0f0      	beq.n	8005d64 <USB_FlushTxFifo+0x38>
 8005d82:	2300      	movs	r3, #0
 8005d84:	4618      	mov	r0, r3
 8005d86:	3714      	adds	r7, #20
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bc80      	pop	{r7}
 8005d8c:	4770      	bx	lr
 8005d8e:	bf00      	nop
 8005d90:	00030d40 	.word	0x00030d40

08005d94 <USB_FlushRxFifo>:
 8005d94:	b480      	push	{r7}
 8005d96:	b085      	sub	sp, #20
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	60fb      	str	r3, [r7, #12]
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	3301      	adds	r3, #1
 8005da4:	60fb      	str	r3, [r7, #12]
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	4a11      	ldr	r2, [pc, #68]	; (8005df0 <USB_FlushRxFifo+0x5c>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d901      	bls.n	8005db2 <USB_FlushRxFifo+0x1e>
 8005dae:	2303      	movs	r3, #3
 8005db0:	e018      	b.n	8005de4 <USB_FlushRxFifo+0x50>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	691b      	ldr	r3, [r3, #16]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	daf2      	bge.n	8005da0 <USB_FlushRxFifo+0xc>
 8005dba:	2300      	movs	r3, #0
 8005dbc:	60fb      	str	r3, [r7, #12]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2210      	movs	r2, #16
 8005dc2:	611a      	str	r2, [r3, #16]
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	60fb      	str	r3, [r7, #12]
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	4a08      	ldr	r2, [pc, #32]	; (8005df0 <USB_FlushRxFifo+0x5c>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d901      	bls.n	8005dd6 <USB_FlushRxFifo+0x42>
 8005dd2:	2303      	movs	r3, #3
 8005dd4:	e006      	b.n	8005de4 <USB_FlushRxFifo+0x50>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	691b      	ldr	r3, [r3, #16]
 8005dda:	f003 0310 	and.w	r3, r3, #16
 8005dde:	2b10      	cmp	r3, #16
 8005de0:	d0f0      	beq.n	8005dc4 <USB_FlushRxFifo+0x30>
 8005de2:	2300      	movs	r3, #0
 8005de4:	4618      	mov	r0, r3
 8005de6:	3714      	adds	r7, #20
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bc80      	pop	{r7}
 8005dec:	4770      	bx	lr
 8005dee:	bf00      	nop
 8005df0:	00030d40 	.word	0x00030d40

08005df4 <USB_SetDevSpeed>:
 8005df4:	b480      	push	{r7}
 8005df6:	b085      	sub	sp, #20
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	460b      	mov	r3, r1
 8005dfe:	70fb      	strb	r3, [r7, #3]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	60fb      	str	r3, [r7, #12]
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	78fb      	ldrb	r3, [r7, #3]
 8005e0e:	68f9      	ldr	r1, [r7, #12]
 8005e10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e14:	4313      	orrs	r3, r2
 8005e16:	600b      	str	r3, [r1, #0]
 8005e18:	2300      	movs	r3, #0
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3714      	adds	r7, #20
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bc80      	pop	{r7}
 8005e22:	4770      	bx	lr

08005e24 <USB_GetDevSpeed>:
 8005e24:	b480      	push	{r7}
 8005e26:	b087      	sub	sp, #28
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	613b      	str	r3, [r7, #16]
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	f003 0306 	and.w	r3, r3, #6
 8005e3c:	60fb      	str	r3, [r7, #12]
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2b02      	cmp	r3, #2
 8005e42:	d002      	beq.n	8005e4a <USB_GetDevSpeed+0x26>
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2b06      	cmp	r3, #6
 8005e48:	d102      	bne.n	8005e50 <USB_GetDevSpeed+0x2c>
 8005e4a:	2302      	movs	r3, #2
 8005e4c:	75fb      	strb	r3, [r7, #23]
 8005e4e:	e001      	b.n	8005e54 <USB_GetDevSpeed+0x30>
 8005e50:	230f      	movs	r3, #15
 8005e52:	75fb      	strb	r3, [r7, #23]
 8005e54:	7dfb      	ldrb	r3, [r7, #23]
 8005e56:	4618      	mov	r0, r3
 8005e58:	371c      	adds	r7, #28
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bc80      	pop	{r7}
 8005e5e:	4770      	bx	lr

08005e60 <USB_ActivateEndpoint>:
 8005e60:	b480      	push	{r7}
 8005e62:	b085      	sub	sp, #20
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	6039      	str	r1, [r7, #0]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	60fb      	str	r3, [r7, #12]
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	60bb      	str	r3, [r7, #8]
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	785b      	ldrb	r3, [r3, #1]
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d13a      	bne.n	8005ef2 <USB_ActivateEndpoint+0x92>
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e82:	69da      	ldr	r2, [r3, #28]
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	781b      	ldrb	r3, [r3, #0]
 8005e88:	f003 030f 	and.w	r3, r3, #15
 8005e8c:	2101      	movs	r1, #1
 8005e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	68f9      	ldr	r1, [r7, #12]
 8005e96:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	61cb      	str	r3, [r1, #28]
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	015a      	lsls	r2, r3, #5
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	4413      	add	r3, r2
 8005ea6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d155      	bne.n	8005f60 <USB_ActivateEndpoint+0x100>
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	015a      	lsls	r2, r3, #5
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	4413      	add	r3, r2
 8005ebc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ec0:	681a      	ldr	r2, [r3, #0]
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	f3c3 010a 	ubfx	r1, r3, #0, #11
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	791b      	ldrb	r3, [r3, #4]
 8005ece:	049b      	lsls	r3, r3, #18
 8005ed0:	4319      	orrs	r1, r3
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	059b      	lsls	r3, r3, #22
 8005ed6:	430b      	orrs	r3, r1
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	68ba      	ldr	r2, [r7, #8]
 8005edc:	0151      	lsls	r1, r2, #5
 8005ede:	68fa      	ldr	r2, [r7, #12]
 8005ee0:	440a      	add	r2, r1
 8005ee2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ee6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005eea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005eee:	6013      	str	r3, [r2, #0]
 8005ef0:	e036      	b.n	8005f60 <USB_ActivateEndpoint+0x100>
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ef8:	69da      	ldr	r2, [r3, #28]
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	f003 030f 	and.w	r3, r3, #15
 8005f02:	2101      	movs	r1, #1
 8005f04:	fa01 f303 	lsl.w	r3, r1, r3
 8005f08:	041b      	lsls	r3, r3, #16
 8005f0a:	68f9      	ldr	r1, [r7, #12]
 8005f0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f10:	4313      	orrs	r3, r2
 8005f12:	61cb      	str	r3, [r1, #28]
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	015a      	lsls	r2, r3, #5
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	4413      	add	r3, r2
 8005f1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d11a      	bne.n	8005f60 <USB_ActivateEndpoint+0x100>
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	015a      	lsls	r2, r3, #5
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	4413      	add	r3, r2
 8005f32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	f3c3 010a 	ubfx	r1, r3, #0, #11
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	791b      	ldrb	r3, [r3, #4]
 8005f44:	049b      	lsls	r3, r3, #18
 8005f46:	430b      	orrs	r3, r1
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	68ba      	ldr	r2, [r7, #8]
 8005f4c:	0151      	lsls	r1, r2, #5
 8005f4e:	68fa      	ldr	r2, [r7, #12]
 8005f50:	440a      	add	r2, r1
 8005f52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f5e:	6013      	str	r3, [r2, #0]
 8005f60:	2300      	movs	r3, #0
 8005f62:	4618      	mov	r0, r3
 8005f64:	3714      	adds	r7, #20
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bc80      	pop	{r7}
 8005f6a:	4770      	bx	lr

08005f6c <USB_DeactivateEndpoint>:
 8005f6c:	b480      	push	{r7}
 8005f6e:	b085      	sub	sp, #20
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	6039      	str	r1, [r7, #0]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	60fb      	str	r3, [r7, #12]
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	60bb      	str	r3, [r7, #8]
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	785b      	ldrb	r3, [r3, #1]
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d161      	bne.n	800604c <USB_DeactivateEndpoint+0xe0>
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	015a      	lsls	r2, r3, #5
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	4413      	add	r3, r2
 8005f90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f9e:	d11f      	bne.n	8005fe0 <USB_DeactivateEndpoint+0x74>
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	015a      	lsls	r2, r3, #5
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	4413      	add	r3, r2
 8005fa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	68ba      	ldr	r2, [r7, #8]
 8005fb0:	0151      	lsls	r1, r2, #5
 8005fb2:	68fa      	ldr	r2, [r7, #12]
 8005fb4:	440a      	add	r2, r1
 8005fb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005fbe:	6013      	str	r3, [r2, #0]
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	015a      	lsls	r2, r3, #5
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	4413      	add	r3, r2
 8005fc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	68ba      	ldr	r2, [r7, #8]
 8005fd0:	0151      	lsls	r1, r2, #5
 8005fd2:	68fa      	ldr	r2, [r7, #12]
 8005fd4:	440a      	add	r2, r1
 8005fd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fda:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005fde:	6013      	str	r3, [r2, #0]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fe6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	781b      	ldrb	r3, [r3, #0]
 8005fec:	f003 030f 	and.w	r3, r3, #15
 8005ff0:	2101      	movs	r1, #1
 8005ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	43db      	mvns	r3, r3
 8005ffa:	68f9      	ldr	r1, [r7, #12]
 8005ffc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006000:	4013      	ands	r3, r2
 8006002:	63cb      	str	r3, [r1, #60]	; 0x3c
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800600a:	69da      	ldr	r2, [r3, #28]
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	f003 030f 	and.w	r3, r3, #15
 8006014:	2101      	movs	r1, #1
 8006016:	fa01 f303 	lsl.w	r3, r1, r3
 800601a:	b29b      	uxth	r3, r3
 800601c:	43db      	mvns	r3, r3
 800601e:	68f9      	ldr	r1, [r7, #12]
 8006020:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006024:	4013      	ands	r3, r2
 8006026:	61cb      	str	r3, [r1, #28]
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	015a      	lsls	r2, r3, #5
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	4413      	add	r3, r2
 8006030:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	0159      	lsls	r1, r3, #5
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	440b      	add	r3, r1
 800603e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006042:	4619      	mov	r1, r3
 8006044:	4b35      	ldr	r3, [pc, #212]	; (800611c <USB_DeactivateEndpoint+0x1b0>)
 8006046:	4013      	ands	r3, r2
 8006048:	600b      	str	r3, [r1, #0]
 800604a:	e060      	b.n	800610e <USB_DeactivateEndpoint+0x1a2>
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	015a      	lsls	r2, r3, #5
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	4413      	add	r3, r2
 8006054:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800605e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006062:	d11f      	bne.n	80060a4 <USB_DeactivateEndpoint+0x138>
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	015a      	lsls	r2, r3, #5
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	4413      	add	r3, r2
 800606c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	68ba      	ldr	r2, [r7, #8]
 8006074:	0151      	lsls	r1, r2, #5
 8006076:	68fa      	ldr	r2, [r7, #12]
 8006078:	440a      	add	r2, r1
 800607a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800607e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006082:	6013      	str	r3, [r2, #0]
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	015a      	lsls	r2, r3, #5
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	4413      	add	r3, r2
 800608c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	68ba      	ldr	r2, [r7, #8]
 8006094:	0151      	lsls	r1, r2, #5
 8006096:	68fa      	ldr	r2, [r7, #12]
 8006098:	440a      	add	r2, r1
 800609a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800609e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80060a2:	6013      	str	r3, [r2, #0]
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	781b      	ldrb	r3, [r3, #0]
 80060b0:	f003 030f 	and.w	r3, r3, #15
 80060b4:	2101      	movs	r1, #1
 80060b6:	fa01 f303 	lsl.w	r3, r1, r3
 80060ba:	041b      	lsls	r3, r3, #16
 80060bc:	43db      	mvns	r3, r3
 80060be:	68f9      	ldr	r1, [r7, #12]
 80060c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80060c4:	4013      	ands	r3, r2
 80060c6:	63cb      	str	r3, [r1, #60]	; 0x3c
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060ce:	69da      	ldr	r2, [r3, #28]
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	781b      	ldrb	r3, [r3, #0]
 80060d4:	f003 030f 	and.w	r3, r3, #15
 80060d8:	2101      	movs	r1, #1
 80060da:	fa01 f303 	lsl.w	r3, r1, r3
 80060de:	041b      	lsls	r3, r3, #16
 80060e0:	43db      	mvns	r3, r3
 80060e2:	68f9      	ldr	r1, [r7, #12]
 80060e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80060e8:	4013      	ands	r3, r2
 80060ea:	61cb      	str	r3, [r1, #28]
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	015a      	lsls	r2, r3, #5
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	4413      	add	r3, r2
 80060f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060f8:	681a      	ldr	r2, [r3, #0]
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	0159      	lsls	r1, r3, #5
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	440b      	add	r3, r1
 8006102:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006106:	4619      	mov	r1, r3
 8006108:	4b05      	ldr	r3, [pc, #20]	; (8006120 <USB_DeactivateEndpoint+0x1b4>)
 800610a:	4013      	ands	r3, r2
 800610c:	600b      	str	r3, [r1, #0]
 800610e:	2300      	movs	r3, #0
 8006110:	4618      	mov	r0, r3
 8006112:	3714      	adds	r7, #20
 8006114:	46bd      	mov	sp, r7
 8006116:	bc80      	pop	{r7}
 8006118:	4770      	bx	lr
 800611a:	bf00      	nop
 800611c:	ec337800 	.word	0xec337800
 8006120:	eff37800 	.word	0xeff37800

08006124 <USB_EPStartXfer>:
 8006124:	b580      	push	{r7, lr}
 8006126:	b086      	sub	sp, #24
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
 800612c:	6039      	str	r1, [r7, #0]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	617b      	str	r3, [r7, #20]
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	781b      	ldrb	r3, [r3, #0]
 8006136:	613b      	str	r3, [r7, #16]
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	785b      	ldrb	r3, [r3, #1]
 800613c:	2b01      	cmp	r3, #1
 800613e:	f040 8128 	bne.w	8006392 <USB_EPStartXfer+0x26e>
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	691b      	ldr	r3, [r3, #16]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d132      	bne.n	80061b0 <USB_EPStartXfer+0x8c>
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	015a      	lsls	r2, r3, #5
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	4413      	add	r3, r2
 8006152:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006156:	691b      	ldr	r3, [r3, #16]
 8006158:	693a      	ldr	r2, [r7, #16]
 800615a:	0151      	lsls	r1, r2, #5
 800615c:	697a      	ldr	r2, [r7, #20]
 800615e:	440a      	add	r2, r1
 8006160:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006164:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006168:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800616c:	6113      	str	r3, [r2, #16]
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	015a      	lsls	r2, r3, #5
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	4413      	add	r3, r2
 8006176:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800617a:	691b      	ldr	r3, [r3, #16]
 800617c:	693a      	ldr	r2, [r7, #16]
 800617e:	0151      	lsls	r1, r2, #5
 8006180:	697a      	ldr	r2, [r7, #20]
 8006182:	440a      	add	r2, r1
 8006184:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006188:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800618c:	6113      	str	r3, [r2, #16]
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	015a      	lsls	r2, r3, #5
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	4413      	add	r3, r2
 8006196:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800619a:	691b      	ldr	r3, [r3, #16]
 800619c:	693a      	ldr	r2, [r7, #16]
 800619e:	0151      	lsls	r1, r2, #5
 80061a0:	697a      	ldr	r2, [r7, #20]
 80061a2:	440a      	add	r2, r1
 80061a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061a8:	0cdb      	lsrs	r3, r3, #19
 80061aa:	04db      	lsls	r3, r3, #19
 80061ac:	6113      	str	r3, [r2, #16]
 80061ae:	e092      	b.n	80062d6 <USB_EPStartXfer+0x1b2>
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	015a      	lsls	r2, r3, #5
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	4413      	add	r3, r2
 80061b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061bc:	691b      	ldr	r3, [r3, #16]
 80061be:	693a      	ldr	r2, [r7, #16]
 80061c0:	0151      	lsls	r1, r2, #5
 80061c2:	697a      	ldr	r2, [r7, #20]
 80061c4:	440a      	add	r2, r1
 80061c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061ca:	0cdb      	lsrs	r3, r3, #19
 80061cc:	04db      	lsls	r3, r3, #19
 80061ce:	6113      	str	r3, [r2, #16]
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	015a      	lsls	r2, r3, #5
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	4413      	add	r3, r2
 80061d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061dc:	691b      	ldr	r3, [r3, #16]
 80061de:	693a      	ldr	r2, [r7, #16]
 80061e0:	0151      	lsls	r1, r2, #5
 80061e2:	697a      	ldr	r2, [r7, #20]
 80061e4:	440a      	add	r2, r1
 80061e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061ea:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80061ee:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80061f2:	6113      	str	r3, [r2, #16]
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d11a      	bne.n	8006230 <USB_EPStartXfer+0x10c>
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	691a      	ldr	r2, [r3, #16]
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	429a      	cmp	r2, r3
 8006204:	d903      	bls.n	800620e <USB_EPStartXfer+0xea>
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	689a      	ldr	r2, [r3, #8]
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	611a      	str	r2, [r3, #16]
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	015a      	lsls	r2, r3, #5
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	4413      	add	r3, r2
 8006216:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800621a:	691b      	ldr	r3, [r3, #16]
 800621c:	693a      	ldr	r2, [r7, #16]
 800621e:	0151      	lsls	r1, r2, #5
 8006220:	697a      	ldr	r2, [r7, #20]
 8006222:	440a      	add	r2, r1
 8006224:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006228:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800622c:	6113      	str	r3, [r2, #16]
 800622e:	e01b      	b.n	8006268 <USB_EPStartXfer+0x144>
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	015a      	lsls	r2, r3, #5
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	4413      	add	r3, r2
 8006238:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800623c:	691a      	ldr	r2, [r3, #16]
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	6919      	ldr	r1, [r3, #16]
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	440b      	add	r3, r1
 8006248:	1e59      	subs	r1, r3, #1
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006252:	04d9      	lsls	r1, r3, #19
 8006254:	4b8d      	ldr	r3, [pc, #564]	; (800648c <USB_EPStartXfer+0x368>)
 8006256:	400b      	ands	r3, r1
 8006258:	6939      	ldr	r1, [r7, #16]
 800625a:	0148      	lsls	r0, r1, #5
 800625c:	6979      	ldr	r1, [r7, #20]
 800625e:	4401      	add	r1, r0
 8006260:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006264:	4313      	orrs	r3, r2
 8006266:	610b      	str	r3, [r1, #16]
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	015a      	lsls	r2, r3, #5
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	4413      	add	r3, r2
 8006270:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006274:	691a      	ldr	r2, [r3, #16]
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	691b      	ldr	r3, [r3, #16]
 800627a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800627e:	6939      	ldr	r1, [r7, #16]
 8006280:	0148      	lsls	r0, r1, #5
 8006282:	6979      	ldr	r1, [r7, #20]
 8006284:	4401      	add	r1, r0
 8006286:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800628a:	4313      	orrs	r3, r2
 800628c:	610b      	str	r3, [r1, #16]
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	791b      	ldrb	r3, [r3, #4]
 8006292:	2b01      	cmp	r3, #1
 8006294:	d11f      	bne.n	80062d6 <USB_EPStartXfer+0x1b2>
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	015a      	lsls	r2, r3, #5
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	4413      	add	r3, r2
 800629e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062a2:	691b      	ldr	r3, [r3, #16]
 80062a4:	693a      	ldr	r2, [r7, #16]
 80062a6:	0151      	lsls	r1, r2, #5
 80062a8:	697a      	ldr	r2, [r7, #20]
 80062aa:	440a      	add	r2, r1
 80062ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062b0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80062b4:	6113      	str	r3, [r2, #16]
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	015a      	lsls	r2, r3, #5
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	4413      	add	r3, r2
 80062be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062c2:	691b      	ldr	r3, [r3, #16]
 80062c4:	693a      	ldr	r2, [r7, #16]
 80062c6:	0151      	lsls	r1, r2, #5
 80062c8:	697a      	ldr	r2, [r7, #20]
 80062ca:	440a      	add	r2, r1
 80062cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062d0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80062d4:	6113      	str	r3, [r2, #16]
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	015a      	lsls	r2, r3, #5
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	4413      	add	r3, r2
 80062de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	693a      	ldr	r2, [r7, #16]
 80062e6:	0151      	lsls	r1, r2, #5
 80062e8:	697a      	ldr	r2, [r7, #20]
 80062ea:	440a      	add	r2, r1
 80062ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062f0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80062f4:	6013      	str	r3, [r2, #0]
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	791b      	ldrb	r3, [r3, #4]
 80062fa:	2b01      	cmp	r3, #1
 80062fc:	d015      	beq.n	800632a <USB_EPStartXfer+0x206>
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	691b      	ldr	r3, [r3, #16]
 8006302:	2b00      	cmp	r3, #0
 8006304:	f000 8139 	beq.w	800657a <USB_EPStartXfer+0x456>
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800630e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	781b      	ldrb	r3, [r3, #0]
 8006314:	f003 030f 	and.w	r3, r3, #15
 8006318:	2101      	movs	r1, #1
 800631a:	fa01 f303 	lsl.w	r3, r1, r3
 800631e:	6979      	ldr	r1, [r7, #20]
 8006320:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006324:	4313      	orrs	r3, r2
 8006326:	634b      	str	r3, [r1, #52]	; 0x34
 8006328:	e127      	b.n	800657a <USB_EPStartXfer+0x456>
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006336:	2b00      	cmp	r3, #0
 8006338:	d110      	bne.n	800635c <USB_EPStartXfer+0x238>
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	015a      	lsls	r2, r3, #5
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	4413      	add	r3, r2
 8006342:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	693a      	ldr	r2, [r7, #16]
 800634a:	0151      	lsls	r1, r2, #5
 800634c:	697a      	ldr	r2, [r7, #20]
 800634e:	440a      	add	r2, r1
 8006350:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006354:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006358:	6013      	str	r3, [r2, #0]
 800635a:	e00f      	b.n	800637c <USB_EPStartXfer+0x258>
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	015a      	lsls	r2, r3, #5
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	4413      	add	r3, r2
 8006364:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	693a      	ldr	r2, [r7, #16]
 800636c:	0151      	lsls	r1, r2, #5
 800636e:	697a      	ldr	r2, [r7, #20]
 8006370:	440a      	add	r2, r1
 8006372:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006376:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800637a:	6013      	str	r3, [r2, #0]
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	68d9      	ldr	r1, [r3, #12]
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	781a      	ldrb	r2, [r3, #0]
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	691b      	ldr	r3, [r3, #16]
 8006388:	b29b      	uxth	r3, r3
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f000 f9a5 	bl	80066da <USB_WritePacket>
 8006390:	e0f3      	b.n	800657a <USB_EPStartXfer+0x456>
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	015a      	lsls	r2, r3, #5
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	4413      	add	r3, r2
 800639a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800639e:	691b      	ldr	r3, [r3, #16]
 80063a0:	693a      	ldr	r2, [r7, #16]
 80063a2:	0151      	lsls	r1, r2, #5
 80063a4:	697a      	ldr	r2, [r7, #20]
 80063a6:	440a      	add	r2, r1
 80063a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063ac:	0cdb      	lsrs	r3, r3, #19
 80063ae:	04db      	lsls	r3, r3, #19
 80063b0:	6113      	str	r3, [r2, #16]
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	015a      	lsls	r2, r3, #5
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	4413      	add	r3, r2
 80063ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063be:	691b      	ldr	r3, [r3, #16]
 80063c0:	693a      	ldr	r2, [r7, #16]
 80063c2:	0151      	lsls	r1, r2, #5
 80063c4:	697a      	ldr	r2, [r7, #20]
 80063c6:	440a      	add	r2, r1
 80063c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063cc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80063d0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80063d4:	6113      	str	r3, [r2, #16]
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d12f      	bne.n	800643c <USB_EPStartXfer+0x318>
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	691b      	ldr	r3, [r3, #16]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d003      	beq.n	80063ec <USB_EPStartXfer+0x2c8>
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	689a      	ldr	r2, [r3, #8]
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	611a      	str	r2, [r3, #16]
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	689a      	ldr	r2, [r3, #8]
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	621a      	str	r2, [r3, #32]
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	015a      	lsls	r2, r3, #5
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	4413      	add	r3, r2
 80063fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006400:	691a      	ldr	r2, [r3, #16]
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	6a1b      	ldr	r3, [r3, #32]
 8006406:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800640a:	6939      	ldr	r1, [r7, #16]
 800640c:	0148      	lsls	r0, r1, #5
 800640e:	6979      	ldr	r1, [r7, #20]
 8006410:	4401      	add	r1, r0
 8006412:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006416:	4313      	orrs	r3, r2
 8006418:	610b      	str	r3, [r1, #16]
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	015a      	lsls	r2, r3, #5
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	4413      	add	r3, r2
 8006422:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006426:	691b      	ldr	r3, [r3, #16]
 8006428:	693a      	ldr	r2, [r7, #16]
 800642a:	0151      	lsls	r1, r2, #5
 800642c:	697a      	ldr	r2, [r7, #20]
 800642e:	440a      	add	r2, r1
 8006430:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006434:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006438:	6113      	str	r3, [r2, #16]
 800643a:	e061      	b.n	8006500 <USB_EPStartXfer+0x3dc>
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	691b      	ldr	r3, [r3, #16]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d125      	bne.n	8006490 <USB_EPStartXfer+0x36c>
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	015a      	lsls	r2, r3, #5
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	4413      	add	r3, r2
 800644c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006450:	691a      	ldr	r2, [r3, #16]
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800645a:	6939      	ldr	r1, [r7, #16]
 800645c:	0148      	lsls	r0, r1, #5
 800645e:	6979      	ldr	r1, [r7, #20]
 8006460:	4401      	add	r1, r0
 8006462:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006466:	4313      	orrs	r3, r2
 8006468:	610b      	str	r3, [r1, #16]
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	015a      	lsls	r2, r3, #5
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	4413      	add	r3, r2
 8006472:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006476:	691b      	ldr	r3, [r3, #16]
 8006478:	693a      	ldr	r2, [r7, #16]
 800647a:	0151      	lsls	r1, r2, #5
 800647c:	697a      	ldr	r2, [r7, #20]
 800647e:	440a      	add	r2, r1
 8006480:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006484:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006488:	6113      	str	r3, [r2, #16]
 800648a:	e039      	b.n	8006500 <USB_EPStartXfer+0x3dc>
 800648c:	1ff80000 	.word	0x1ff80000
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	691a      	ldr	r2, [r3, #16]
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	4413      	add	r3, r2
 800649a:	1e5a      	subs	r2, r3, #1
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80064a4:	81fb      	strh	r3, [r7, #14]
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	89fa      	ldrh	r2, [r7, #14]
 80064ac:	fb03 f202 	mul.w	r2, r3, r2
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	621a      	str	r2, [r3, #32]
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	015a      	lsls	r2, r3, #5
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	4413      	add	r3, r2
 80064bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064c0:	691a      	ldr	r2, [r3, #16]
 80064c2:	89fb      	ldrh	r3, [r7, #14]
 80064c4:	04d9      	lsls	r1, r3, #19
 80064c6:	4b2f      	ldr	r3, [pc, #188]	; (8006584 <USB_EPStartXfer+0x460>)
 80064c8:	400b      	ands	r3, r1
 80064ca:	6939      	ldr	r1, [r7, #16]
 80064cc:	0148      	lsls	r0, r1, #5
 80064ce:	6979      	ldr	r1, [r7, #20]
 80064d0:	4401      	add	r1, r0
 80064d2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80064d6:	4313      	orrs	r3, r2
 80064d8:	610b      	str	r3, [r1, #16]
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	015a      	lsls	r2, r3, #5
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	4413      	add	r3, r2
 80064e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064e6:	691a      	ldr	r2, [r3, #16]
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	6a1b      	ldr	r3, [r3, #32]
 80064ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064f0:	6939      	ldr	r1, [r7, #16]
 80064f2:	0148      	lsls	r0, r1, #5
 80064f4:	6979      	ldr	r1, [r7, #20]
 80064f6:	4401      	add	r1, r0
 80064f8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80064fc:	4313      	orrs	r3, r2
 80064fe:	610b      	str	r3, [r1, #16]
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	791b      	ldrb	r3, [r3, #4]
 8006504:	2b01      	cmp	r3, #1
 8006506:	d128      	bne.n	800655a <USB_EPStartXfer+0x436>
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800650e:	689b      	ldr	r3, [r3, #8]
 8006510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006514:	2b00      	cmp	r3, #0
 8006516:	d110      	bne.n	800653a <USB_EPStartXfer+0x416>
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	015a      	lsls	r2, r3, #5
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	4413      	add	r3, r2
 8006520:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	693a      	ldr	r2, [r7, #16]
 8006528:	0151      	lsls	r1, r2, #5
 800652a:	697a      	ldr	r2, [r7, #20]
 800652c:	440a      	add	r2, r1
 800652e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006532:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006536:	6013      	str	r3, [r2, #0]
 8006538:	e00f      	b.n	800655a <USB_EPStartXfer+0x436>
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	015a      	lsls	r2, r3, #5
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	4413      	add	r3, r2
 8006542:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	693a      	ldr	r2, [r7, #16]
 800654a:	0151      	lsls	r1, r2, #5
 800654c:	697a      	ldr	r2, [r7, #20]
 800654e:	440a      	add	r2, r1
 8006550:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006554:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006558:	6013      	str	r3, [r2, #0]
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	015a      	lsls	r2, r3, #5
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	4413      	add	r3, r2
 8006562:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	693a      	ldr	r2, [r7, #16]
 800656a:	0151      	lsls	r1, r2, #5
 800656c:	697a      	ldr	r2, [r7, #20]
 800656e:	440a      	add	r2, r1
 8006570:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006574:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006578:	6013      	str	r3, [r2, #0]
 800657a:	2300      	movs	r3, #0
 800657c:	4618      	mov	r0, r3
 800657e:	3718      	adds	r7, #24
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}
 8006584:	1ff80000 	.word	0x1ff80000

08006588 <USB_EPStopXfer>:
 8006588:	b480      	push	{r7}
 800658a:	b087      	sub	sp, #28
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	6039      	str	r1, [r7, #0]
 8006592:	2300      	movs	r3, #0
 8006594:	60fb      	str	r3, [r7, #12]
 8006596:	2300      	movs	r3, #0
 8006598:	75fb      	strb	r3, [r7, #23]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	613b      	str	r3, [r7, #16]
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	785b      	ldrb	r3, [r3, #1]
 80065a2:	2b01      	cmp	r3, #1
 80065a4:	d14a      	bne.n	800663c <USB_EPStopXfer+0xb4>
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	781b      	ldrb	r3, [r3, #0]
 80065aa:	015a      	lsls	r2, r3, #5
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	4413      	add	r3, r2
 80065b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065be:	f040 8086 	bne.w	80066ce <USB_EPStopXfer+0x146>
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	781b      	ldrb	r3, [r3, #0]
 80065c6:	015a      	lsls	r2, r3, #5
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	4413      	add	r3, r2
 80065cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	683a      	ldr	r2, [r7, #0]
 80065d4:	7812      	ldrb	r2, [r2, #0]
 80065d6:	0151      	lsls	r1, r2, #5
 80065d8:	693a      	ldr	r2, [r7, #16]
 80065da:	440a      	add	r2, r1
 80065dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065e0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80065e4:	6013      	str	r3, [r2, #0]
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	781b      	ldrb	r3, [r3, #0]
 80065ea:	015a      	lsls	r2, r3, #5
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	4413      	add	r3, r2
 80065f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	683a      	ldr	r2, [r7, #0]
 80065f8:	7812      	ldrb	r2, [r2, #0]
 80065fa:	0151      	lsls	r1, r2, #5
 80065fc:	693a      	ldr	r2, [r7, #16]
 80065fe:	440a      	add	r2, r1
 8006600:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006604:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006608:	6013      	str	r3, [r2, #0]
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	3301      	adds	r3, #1
 800660e:	60fb      	str	r3, [r7, #12]
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f242 7210 	movw	r2, #10000	; 0x2710
 8006616:	4293      	cmp	r3, r2
 8006618:	d902      	bls.n	8006620 <USB_EPStopXfer+0x98>
 800661a:	2301      	movs	r3, #1
 800661c:	75fb      	strb	r3, [r7, #23]
 800661e:	e056      	b.n	80066ce <USB_EPStopXfer+0x146>
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	781b      	ldrb	r3, [r3, #0]
 8006624:	015a      	lsls	r2, r3, #5
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	4413      	add	r3, r2
 800662a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006634:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006638:	d0e7      	beq.n	800660a <USB_EPStopXfer+0x82>
 800663a:	e048      	b.n	80066ce <USB_EPStopXfer+0x146>
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	015a      	lsls	r2, r3, #5
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	4413      	add	r3, r2
 8006646:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006650:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006654:	d13b      	bne.n	80066ce <USB_EPStopXfer+0x146>
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	781b      	ldrb	r3, [r3, #0]
 800665a:	015a      	lsls	r2, r3, #5
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	4413      	add	r3, r2
 8006660:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	683a      	ldr	r2, [r7, #0]
 8006668:	7812      	ldrb	r2, [r2, #0]
 800666a:	0151      	lsls	r1, r2, #5
 800666c:	693a      	ldr	r2, [r7, #16]
 800666e:	440a      	add	r2, r1
 8006670:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006674:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006678:	6013      	str	r3, [r2, #0]
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	015a      	lsls	r2, r3, #5
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	4413      	add	r3, r2
 8006684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	683a      	ldr	r2, [r7, #0]
 800668c:	7812      	ldrb	r2, [r2, #0]
 800668e:	0151      	lsls	r1, r2, #5
 8006690:	693a      	ldr	r2, [r7, #16]
 8006692:	440a      	add	r2, r1
 8006694:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006698:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800669c:	6013      	str	r3, [r2, #0]
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	3301      	adds	r3, #1
 80066a2:	60fb      	str	r3, [r7, #12]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f242 7210 	movw	r2, #10000	; 0x2710
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d902      	bls.n	80066b4 <USB_EPStopXfer+0x12c>
 80066ae:	2301      	movs	r3, #1
 80066b0:	75fb      	strb	r3, [r7, #23]
 80066b2:	e00c      	b.n	80066ce <USB_EPStopXfer+0x146>
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	781b      	ldrb	r3, [r3, #0]
 80066b8:	015a      	lsls	r2, r3, #5
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	4413      	add	r3, r2
 80066be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066cc:	d0e7      	beq.n	800669e <USB_EPStopXfer+0x116>
 80066ce:	7dfb      	ldrb	r3, [r7, #23]
 80066d0:	4618      	mov	r0, r3
 80066d2:	371c      	adds	r7, #28
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bc80      	pop	{r7}
 80066d8:	4770      	bx	lr

080066da <USB_WritePacket>:
 80066da:	b480      	push	{r7}
 80066dc:	b089      	sub	sp, #36	; 0x24
 80066de:	af00      	add	r7, sp, #0
 80066e0:	60f8      	str	r0, [r7, #12]
 80066e2:	60b9      	str	r1, [r7, #8]
 80066e4:	4611      	mov	r1, r2
 80066e6:	461a      	mov	r2, r3
 80066e8:	460b      	mov	r3, r1
 80066ea:	71fb      	strb	r3, [r7, #7]
 80066ec:	4613      	mov	r3, r2
 80066ee:	80bb      	strh	r3, [r7, #4]
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	617b      	str	r3, [r7, #20]
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	61fb      	str	r3, [r7, #28]
 80066f8:	88bb      	ldrh	r3, [r7, #4]
 80066fa:	3303      	adds	r3, #3
 80066fc:	089b      	lsrs	r3, r3, #2
 80066fe:	613b      	str	r3, [r7, #16]
 8006700:	2300      	movs	r3, #0
 8006702:	61bb      	str	r3, [r7, #24]
 8006704:	e018      	b.n	8006738 <USB_WritePacket+0x5e>
 8006706:	79fb      	ldrb	r3, [r7, #7]
 8006708:	031a      	lsls	r2, r3, #12
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	4413      	add	r3, r2
 800670e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006712:	461a      	mov	r2, r3
 8006714:	69fb      	ldr	r3, [r7, #28]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	6013      	str	r3, [r2, #0]
 800671a:	69fb      	ldr	r3, [r7, #28]
 800671c:	3301      	adds	r3, #1
 800671e:	61fb      	str	r3, [r7, #28]
 8006720:	69fb      	ldr	r3, [r7, #28]
 8006722:	3301      	adds	r3, #1
 8006724:	61fb      	str	r3, [r7, #28]
 8006726:	69fb      	ldr	r3, [r7, #28]
 8006728:	3301      	adds	r3, #1
 800672a:	61fb      	str	r3, [r7, #28]
 800672c:	69fb      	ldr	r3, [r7, #28]
 800672e:	3301      	adds	r3, #1
 8006730:	61fb      	str	r3, [r7, #28]
 8006732:	69bb      	ldr	r3, [r7, #24]
 8006734:	3301      	adds	r3, #1
 8006736:	61bb      	str	r3, [r7, #24]
 8006738:	69ba      	ldr	r2, [r7, #24]
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	429a      	cmp	r2, r3
 800673e:	d3e2      	bcc.n	8006706 <USB_WritePacket+0x2c>
 8006740:	2300      	movs	r3, #0
 8006742:	4618      	mov	r0, r3
 8006744:	3724      	adds	r7, #36	; 0x24
 8006746:	46bd      	mov	sp, r7
 8006748:	bc80      	pop	{r7}
 800674a:	4770      	bx	lr

0800674c <USB_ReadPacket>:
 800674c:	b480      	push	{r7}
 800674e:	b08b      	sub	sp, #44	; 0x2c
 8006750:	af00      	add	r7, sp, #0
 8006752:	60f8      	str	r0, [r7, #12]
 8006754:	60b9      	str	r1, [r7, #8]
 8006756:	4613      	mov	r3, r2
 8006758:	80fb      	strh	r3, [r7, #6]
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	61bb      	str	r3, [r7, #24]
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	627b      	str	r3, [r7, #36]	; 0x24
 8006762:	88fb      	ldrh	r3, [r7, #6]
 8006764:	089b      	lsrs	r3, r3, #2
 8006766:	b29b      	uxth	r3, r3
 8006768:	617b      	str	r3, [r7, #20]
 800676a:	88fb      	ldrh	r3, [r7, #6]
 800676c:	f003 0303 	and.w	r3, r3, #3
 8006770:	83fb      	strh	r3, [r7, #30]
 8006772:	2300      	movs	r3, #0
 8006774:	623b      	str	r3, [r7, #32]
 8006776:	e014      	b.n	80067a2 <USB_ReadPacket+0x56>
 8006778:	69bb      	ldr	r3, [r7, #24]
 800677a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800677e:	681a      	ldr	r2, [r3, #0]
 8006780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006782:	601a      	str	r2, [r3, #0]
 8006784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006786:	3301      	adds	r3, #1
 8006788:	627b      	str	r3, [r7, #36]	; 0x24
 800678a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678c:	3301      	adds	r3, #1
 800678e:	627b      	str	r3, [r7, #36]	; 0x24
 8006790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006792:	3301      	adds	r3, #1
 8006794:	627b      	str	r3, [r7, #36]	; 0x24
 8006796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006798:	3301      	adds	r3, #1
 800679a:	627b      	str	r3, [r7, #36]	; 0x24
 800679c:	6a3b      	ldr	r3, [r7, #32]
 800679e:	3301      	adds	r3, #1
 80067a0:	623b      	str	r3, [r7, #32]
 80067a2:	6a3a      	ldr	r2, [r7, #32]
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	429a      	cmp	r2, r3
 80067a8:	d3e6      	bcc.n	8006778 <USB_ReadPacket+0x2c>
 80067aa:	8bfb      	ldrh	r3, [r7, #30]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d01e      	beq.n	80067ee <USB_ReadPacket+0xa2>
 80067b0:	2300      	movs	r3, #0
 80067b2:	623b      	str	r3, [r7, #32]
 80067b4:	69bb      	ldr	r3, [r7, #24]
 80067b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067ba:	461a      	mov	r2, r3
 80067bc:	f107 0310 	add.w	r3, r7, #16
 80067c0:	6812      	ldr	r2, [r2, #0]
 80067c2:	601a      	str	r2, [r3, #0]
 80067c4:	693a      	ldr	r2, [r7, #16]
 80067c6:	6a3b      	ldr	r3, [r7, #32]
 80067c8:	b2db      	uxtb	r3, r3
 80067ca:	00db      	lsls	r3, r3, #3
 80067cc:	fa22 f303 	lsr.w	r3, r2, r3
 80067d0:	b2da      	uxtb	r2, r3
 80067d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d4:	701a      	strb	r2, [r3, #0]
 80067d6:	6a3b      	ldr	r3, [r7, #32]
 80067d8:	3301      	adds	r3, #1
 80067da:	623b      	str	r3, [r7, #32]
 80067dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067de:	3301      	adds	r3, #1
 80067e0:	627b      	str	r3, [r7, #36]	; 0x24
 80067e2:	8bfb      	ldrh	r3, [r7, #30]
 80067e4:	3b01      	subs	r3, #1
 80067e6:	83fb      	strh	r3, [r7, #30]
 80067e8:	8bfb      	ldrh	r3, [r7, #30]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d1ea      	bne.n	80067c4 <USB_ReadPacket+0x78>
 80067ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f0:	4618      	mov	r0, r3
 80067f2:	372c      	adds	r7, #44	; 0x2c
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bc80      	pop	{r7}
 80067f8:	4770      	bx	lr

080067fa <USB_EPSetStall>:
 80067fa:	b480      	push	{r7}
 80067fc:	b085      	sub	sp, #20
 80067fe:	af00      	add	r7, sp, #0
 8006800:	6078      	str	r0, [r7, #4]
 8006802:	6039      	str	r1, [r7, #0]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	60fb      	str	r3, [r7, #12]
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	781b      	ldrb	r3, [r3, #0]
 800680c:	60bb      	str	r3, [r7, #8]
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	785b      	ldrb	r3, [r3, #1]
 8006812:	2b01      	cmp	r3, #1
 8006814:	d12c      	bne.n	8006870 <USB_EPSetStall+0x76>
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	015a      	lsls	r2, r3, #5
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	4413      	add	r3, r2
 800681e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	2b00      	cmp	r3, #0
 8006826:	db12      	blt.n	800684e <USB_EPSetStall+0x54>
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d00f      	beq.n	800684e <USB_EPSetStall+0x54>
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	015a      	lsls	r2, r3, #5
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	4413      	add	r3, r2
 8006836:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	68ba      	ldr	r2, [r7, #8]
 800683e:	0151      	lsls	r1, r2, #5
 8006840:	68fa      	ldr	r2, [r7, #12]
 8006842:	440a      	add	r2, r1
 8006844:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006848:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800684c:	6013      	str	r3, [r2, #0]
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	015a      	lsls	r2, r3, #5
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	4413      	add	r3, r2
 8006856:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	68ba      	ldr	r2, [r7, #8]
 800685e:	0151      	lsls	r1, r2, #5
 8006860:	68fa      	ldr	r2, [r7, #12]
 8006862:	440a      	add	r2, r1
 8006864:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006868:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800686c:	6013      	str	r3, [r2, #0]
 800686e:	e02b      	b.n	80068c8 <USB_EPSetStall+0xce>
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	015a      	lsls	r2, r3, #5
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	4413      	add	r3, r2
 8006878:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	2b00      	cmp	r3, #0
 8006880:	db12      	blt.n	80068a8 <USB_EPSetStall+0xae>
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d00f      	beq.n	80068a8 <USB_EPSetStall+0xae>
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	015a      	lsls	r2, r3, #5
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	4413      	add	r3, r2
 8006890:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	68ba      	ldr	r2, [r7, #8]
 8006898:	0151      	lsls	r1, r2, #5
 800689a:	68fa      	ldr	r2, [r7, #12]
 800689c:	440a      	add	r2, r1
 800689e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068a2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80068a6:	6013      	str	r3, [r2, #0]
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	015a      	lsls	r2, r3, #5
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	4413      	add	r3, r2
 80068b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	68ba      	ldr	r2, [r7, #8]
 80068b8:	0151      	lsls	r1, r2, #5
 80068ba:	68fa      	ldr	r2, [r7, #12]
 80068bc:	440a      	add	r2, r1
 80068be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80068c6:	6013      	str	r3, [r2, #0]
 80068c8:	2300      	movs	r3, #0
 80068ca:	4618      	mov	r0, r3
 80068cc:	3714      	adds	r7, #20
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bc80      	pop	{r7}
 80068d2:	4770      	bx	lr

080068d4 <USB_EPClearStall>:
 80068d4:	b480      	push	{r7}
 80068d6:	b085      	sub	sp, #20
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
 80068dc:	6039      	str	r1, [r7, #0]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	60fb      	str	r3, [r7, #12]
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	781b      	ldrb	r3, [r3, #0]
 80068e6:	60bb      	str	r3, [r7, #8]
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	785b      	ldrb	r3, [r3, #1]
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	d128      	bne.n	8006942 <USB_EPClearStall+0x6e>
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	015a      	lsls	r2, r3, #5
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	4413      	add	r3, r2
 80068f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	68ba      	ldr	r2, [r7, #8]
 8006900:	0151      	lsls	r1, r2, #5
 8006902:	68fa      	ldr	r2, [r7, #12]
 8006904:	440a      	add	r2, r1
 8006906:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800690a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800690e:	6013      	str	r3, [r2, #0]
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	791b      	ldrb	r3, [r3, #4]
 8006914:	2b03      	cmp	r3, #3
 8006916:	d003      	beq.n	8006920 <USB_EPClearStall+0x4c>
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	791b      	ldrb	r3, [r3, #4]
 800691c:	2b02      	cmp	r3, #2
 800691e:	d138      	bne.n	8006992 <USB_EPClearStall+0xbe>
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	015a      	lsls	r2, r3, #5
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	4413      	add	r3, r2
 8006928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	68ba      	ldr	r2, [r7, #8]
 8006930:	0151      	lsls	r1, r2, #5
 8006932:	68fa      	ldr	r2, [r7, #12]
 8006934:	440a      	add	r2, r1
 8006936:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800693a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800693e:	6013      	str	r3, [r2, #0]
 8006940:	e027      	b.n	8006992 <USB_EPClearStall+0xbe>
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	015a      	lsls	r2, r3, #5
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	4413      	add	r3, r2
 800694a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	68ba      	ldr	r2, [r7, #8]
 8006952:	0151      	lsls	r1, r2, #5
 8006954:	68fa      	ldr	r2, [r7, #12]
 8006956:	440a      	add	r2, r1
 8006958:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800695c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006960:	6013      	str	r3, [r2, #0]
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	791b      	ldrb	r3, [r3, #4]
 8006966:	2b03      	cmp	r3, #3
 8006968:	d003      	beq.n	8006972 <USB_EPClearStall+0x9e>
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	791b      	ldrb	r3, [r3, #4]
 800696e:	2b02      	cmp	r3, #2
 8006970:	d10f      	bne.n	8006992 <USB_EPClearStall+0xbe>
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	015a      	lsls	r2, r3, #5
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	4413      	add	r3, r2
 800697a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	68ba      	ldr	r2, [r7, #8]
 8006982:	0151      	lsls	r1, r2, #5
 8006984:	68fa      	ldr	r2, [r7, #12]
 8006986:	440a      	add	r2, r1
 8006988:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800698c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006990:	6013      	str	r3, [r2, #0]
 8006992:	2300      	movs	r3, #0
 8006994:	4618      	mov	r0, r3
 8006996:	3714      	adds	r7, #20
 8006998:	46bd      	mov	sp, r7
 800699a:	bc80      	pop	{r7}
 800699c:	4770      	bx	lr

0800699e <USB_SetDevAddress>:
 800699e:	b480      	push	{r7}
 80069a0:	b085      	sub	sp, #20
 80069a2:	af00      	add	r7, sp, #0
 80069a4:	6078      	str	r0, [r7, #4]
 80069a6:	460b      	mov	r3, r1
 80069a8:	70fb      	strb	r3, [r7, #3]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	60fb      	str	r3, [r7, #12]
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	68fa      	ldr	r2, [r7, #12]
 80069b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80069bc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80069c0:	6013      	str	r3, [r2, #0]
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069c8:	681a      	ldr	r2, [r3, #0]
 80069ca:	78fb      	ldrb	r3, [r7, #3]
 80069cc:	011b      	lsls	r3, r3, #4
 80069ce:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80069d2:	68f9      	ldr	r1, [r7, #12]
 80069d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80069d8:	4313      	orrs	r3, r2
 80069da:	600b      	str	r3, [r1, #0]
 80069dc:	2300      	movs	r3, #0
 80069de:	4618      	mov	r0, r3
 80069e0:	3714      	adds	r7, #20
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bc80      	pop	{r7}
 80069e6:	4770      	bx	lr

080069e8 <USB_DevConnect>:
 80069e8:	b480      	push	{r7}
 80069ea:	b085      	sub	sp, #20
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	60fb      	str	r3, [r7, #12]
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	68fa      	ldr	r2, [r7, #12]
 80069fe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006a02:	f023 0303 	bic.w	r3, r3, #3
 8006a06:	6013      	str	r3, [r2, #0]
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	68fa      	ldr	r2, [r7, #12]
 8006a12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a16:	f023 0302 	bic.w	r3, r3, #2
 8006a1a:	6053      	str	r3, [r2, #4]
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3714      	adds	r7, #20
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bc80      	pop	{r7}
 8006a26:	4770      	bx	lr

08006a28 <USB_DevDisconnect>:
 8006a28:	b480      	push	{r7}
 8006a2a:	b085      	sub	sp, #20
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	60fb      	str	r3, [r7, #12]
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	68fa      	ldr	r2, [r7, #12]
 8006a3e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006a42:	f023 0303 	bic.w	r3, r3, #3
 8006a46:	6013      	str	r3, [r2, #0]
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	68fa      	ldr	r2, [r7, #12]
 8006a52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a56:	f043 0302 	orr.w	r3, r3, #2
 8006a5a:	6053      	str	r3, [r2, #4]
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3714      	adds	r7, #20
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bc80      	pop	{r7}
 8006a66:	4770      	bx	lr

08006a68 <USB_ReadInterrupts>:
 8006a68:	b480      	push	{r7}
 8006a6a:	b085      	sub	sp, #20
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	695b      	ldr	r3, [r3, #20]
 8006a74:	60fb      	str	r3, [r7, #12]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	699b      	ldr	r3, [r3, #24]
 8006a7a:	68fa      	ldr	r2, [r7, #12]
 8006a7c:	4013      	ands	r3, r2
 8006a7e:	60fb      	str	r3, [r7, #12]
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	4618      	mov	r0, r3
 8006a84:	3714      	adds	r7, #20
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bc80      	pop	{r7}
 8006a8a:	4770      	bx	lr

08006a8c <USB_ReadDevAllOutEpInterrupt>:
 8006a8c:	b480      	push	{r7}
 8006a8e:	b085      	sub	sp, #20
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	60fb      	str	r3, [r7, #12]
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a9e:	699b      	ldr	r3, [r3, #24]
 8006aa0:	60bb      	str	r3, [r7, #8]
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006aa8:	69db      	ldr	r3, [r3, #28]
 8006aaa:	68ba      	ldr	r2, [r7, #8]
 8006aac:	4013      	ands	r3, r2
 8006aae:	60bb      	str	r3, [r7, #8]
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	0c1b      	lsrs	r3, r3, #16
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	3714      	adds	r7, #20
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bc80      	pop	{r7}
 8006abc:	4770      	bx	lr

08006abe <USB_ReadDevAllInEpInterrupt>:
 8006abe:	b480      	push	{r7}
 8006ac0:	b085      	sub	sp, #20
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	6078      	str	r0, [r7, #4]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	60fb      	str	r3, [r7, #12]
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ad0:	699b      	ldr	r3, [r3, #24]
 8006ad2:	60bb      	str	r3, [r7, #8]
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ada:	69db      	ldr	r3, [r3, #28]
 8006adc:	68ba      	ldr	r2, [r7, #8]
 8006ade:	4013      	ands	r3, r2
 8006ae0:	60bb      	str	r3, [r7, #8]
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3714      	adds	r7, #20
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bc80      	pop	{r7}
 8006aee:	4770      	bx	lr

08006af0 <USB_ReadDevOutEPInterrupt>:
 8006af0:	b480      	push	{r7}
 8006af2:	b085      	sub	sp, #20
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
 8006af8:	460b      	mov	r3, r1
 8006afa:	70fb      	strb	r3, [r7, #3]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	60fb      	str	r3, [r7, #12]
 8006b00:	78fb      	ldrb	r3, [r7, #3]
 8006b02:	015a      	lsls	r2, r3, #5
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	4413      	add	r3, r2
 8006b08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b0c:	689b      	ldr	r3, [r3, #8]
 8006b0e:	60bb      	str	r3, [r7, #8]
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b16:	695b      	ldr	r3, [r3, #20]
 8006b18:	68ba      	ldr	r2, [r7, #8]
 8006b1a:	4013      	ands	r3, r2
 8006b1c:	60bb      	str	r3, [r7, #8]
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	4618      	mov	r0, r3
 8006b22:	3714      	adds	r7, #20
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bc80      	pop	{r7}
 8006b28:	4770      	bx	lr

08006b2a <USB_ReadDevInEPInterrupt>:
 8006b2a:	b480      	push	{r7}
 8006b2c:	b087      	sub	sp, #28
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	6078      	str	r0, [r7, #4]
 8006b32:	460b      	mov	r3, r1
 8006b34:	70fb      	strb	r3, [r7, #3]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	617b      	str	r3, [r7, #20]
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b40:	691b      	ldr	r3, [r3, #16]
 8006b42:	613b      	str	r3, [r7, #16]
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b4c:	60fb      	str	r3, [r7, #12]
 8006b4e:	78fb      	ldrb	r3, [r7, #3]
 8006b50:	f003 030f 	and.w	r3, r3, #15
 8006b54:	68fa      	ldr	r2, [r7, #12]
 8006b56:	fa22 f303 	lsr.w	r3, r2, r3
 8006b5a:	01db      	lsls	r3, r3, #7
 8006b5c:	b2db      	uxtb	r3, r3
 8006b5e:	693a      	ldr	r2, [r7, #16]
 8006b60:	4313      	orrs	r3, r2
 8006b62:	613b      	str	r3, [r7, #16]
 8006b64:	78fb      	ldrb	r3, [r7, #3]
 8006b66:	015a      	lsls	r2, r3, #5
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	4413      	add	r3, r2
 8006b6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b70:	689b      	ldr	r3, [r3, #8]
 8006b72:	693a      	ldr	r2, [r7, #16]
 8006b74:	4013      	ands	r3, r2
 8006b76:	60bb      	str	r3, [r7, #8]
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	371c      	adds	r7, #28
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bc80      	pop	{r7}
 8006b82:	4770      	bx	lr

08006b84 <USB_GetMode>:
 8006b84:	b480      	push	{r7}
 8006b86:	b083      	sub	sp, #12
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	695b      	ldr	r3, [r3, #20]
 8006b90:	f003 0301 	and.w	r3, r3, #1
 8006b94:	4618      	mov	r0, r3
 8006b96:	370c      	adds	r7, #12
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bc80      	pop	{r7}
 8006b9c:	4770      	bx	lr

08006b9e <USB_ActivateSetup>:
 8006b9e:	b480      	push	{r7}
 8006ba0:	b085      	sub	sp, #20
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	6078      	str	r0, [r7, #4]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	60fb      	str	r3, [r7, #12]
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	68fa      	ldr	r2, [r7, #12]
 8006bb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bb8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006bbc:	f023 0307 	bic.w	r3, r3, #7
 8006bc0:	6013      	str	r3, [r2, #0]
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	68fa      	ldr	r2, [r7, #12]
 8006bcc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006bd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bd4:	6053      	str	r3, [r2, #4]
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3714      	adds	r7, #20
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bc80      	pop	{r7}
 8006be0:	4770      	bx	lr
	...

08006be4 <USB_EP0_OutStart>:
 8006be4:	b480      	push	{r7}
 8006be6:	b085      	sub	sp, #20
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	6039      	str	r1, [r7, #0]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	60fb      	str	r3, [r7, #12]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	333c      	adds	r3, #60	; 0x3c
 8006bf6:	3304      	adds	r3, #4
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	60bb      	str	r3, [r7, #8]
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	4a1c      	ldr	r2, [pc, #112]	; (8006c70 <USB_EP0_OutStart+0x8c>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d90a      	bls.n	8006c1a <USB_EP0_OutStart+0x36>
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c14:	d101      	bne.n	8006c1a <USB_EP0_OutStart+0x36>
 8006c16:	2300      	movs	r3, #0
 8006c18:	e024      	b.n	8006c64 <USB_EP0_OutStart+0x80>
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c20:	461a      	mov	r2, r3
 8006c22:	2300      	movs	r3, #0
 8006c24:	6113      	str	r3, [r2, #16]
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c2c:	691b      	ldr	r3, [r3, #16]
 8006c2e:	68fa      	ldr	r2, [r7, #12]
 8006c30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c34:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006c38:	6113      	str	r3, [r2, #16]
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c40:	691b      	ldr	r3, [r3, #16]
 8006c42:	68fa      	ldr	r2, [r7, #12]
 8006c44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c48:	f043 0318 	orr.w	r3, r3, #24
 8006c4c:	6113      	str	r3, [r2, #16]
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c54:	691b      	ldr	r3, [r3, #16]
 8006c56:	68fa      	ldr	r2, [r7, #12]
 8006c58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c5c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006c60:	6113      	str	r3, [r2, #16]
 8006c62:	2300      	movs	r3, #0
 8006c64:	4618      	mov	r0, r3
 8006c66:	3714      	adds	r7, #20
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bc80      	pop	{r7}
 8006c6c:	4770      	bx	lr
 8006c6e:	bf00      	nop
 8006c70:	4f54300a 	.word	0x4f54300a

08006c74 <USB_CoreReset>:
 8006c74:	b480      	push	{r7}
 8006c76:	b085      	sub	sp, #20
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	60fb      	str	r3, [r7, #12]
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	3301      	adds	r3, #1
 8006c84:	60fb      	str	r3, [r7, #12]
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	4a12      	ldr	r2, [pc, #72]	; (8006cd4 <USB_CoreReset+0x60>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d901      	bls.n	8006c92 <USB_CoreReset+0x1e>
 8006c8e:	2303      	movs	r3, #3
 8006c90:	e01b      	b.n	8006cca <USB_CoreReset+0x56>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	691b      	ldr	r3, [r3, #16]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	daf2      	bge.n	8006c80 <USB_CoreReset+0xc>
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	60fb      	str	r3, [r7, #12]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	691b      	ldr	r3, [r3, #16]
 8006ca2:	f043 0201 	orr.w	r2, r3, #1
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	611a      	str	r2, [r3, #16]
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	3301      	adds	r3, #1
 8006cae:	60fb      	str	r3, [r7, #12]
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	4a08      	ldr	r2, [pc, #32]	; (8006cd4 <USB_CoreReset+0x60>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d901      	bls.n	8006cbc <USB_CoreReset+0x48>
 8006cb8:	2303      	movs	r3, #3
 8006cba:	e006      	b.n	8006cca <USB_CoreReset+0x56>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	691b      	ldr	r3, [r3, #16]
 8006cc0:	f003 0301 	and.w	r3, r3, #1
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d0f0      	beq.n	8006caa <USB_CoreReset+0x36>
 8006cc8:	2300      	movs	r3, #0
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3714      	adds	r7, #20
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bc80      	pop	{r7}
 8006cd2:	4770      	bx	lr
 8006cd4:	00030d40 	.word	0x00030d40

08006cd8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b084      	sub	sp, #16
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	460b      	mov	r3, r1
 8006ce2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	7c1b      	ldrb	r3, [r3, #16]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d115      	bne.n	8006d1c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006cf0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006cf4:	2202      	movs	r2, #2
 8006cf6:	2181      	movs	r1, #129	; 0x81
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f001 fec0 	bl	8008a7e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2201      	movs	r2, #1
 8006d02:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006d04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d08:	2202      	movs	r2, #2
 8006d0a:	2101      	movs	r1, #1
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f001 feb6 	bl	8008a7e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2201      	movs	r2, #1
 8006d16:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8006d1a:	e012      	b.n	8006d42 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006d1c:	2340      	movs	r3, #64	; 0x40
 8006d1e:	2202      	movs	r2, #2
 8006d20:	2181      	movs	r1, #129	; 0x81
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f001 feab 	bl	8008a7e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006d2e:	2340      	movs	r3, #64	; 0x40
 8006d30:	2202      	movs	r2, #2
 8006d32:	2101      	movs	r1, #1
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f001 fea2 	bl	8008a7e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2201      	movs	r2, #1
 8006d3e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006d42:	2308      	movs	r3, #8
 8006d44:	2203      	movs	r2, #3
 8006d46:	2182      	movs	r1, #130	; 0x82
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f001 fe98 	bl	8008a7e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2201      	movs	r2, #1
 8006d52:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006d54:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006d58:	f001 ffb8 	bl	8008ccc <USBD_static_malloc>
 8006d5c:	4602      	mov	r2, r0
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d102      	bne.n	8006d74 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	73fb      	strb	r3, [r7, #15]
 8006d72:	e026      	b.n	8006dc2 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d7a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	2200      	movs	r2, #0
 8006d92:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	7c1b      	ldrb	r3, [r3, #16]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d109      	bne.n	8006db2 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006da4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006da8:	2101      	movs	r1, #1
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f001 ff57 	bl	8008c5e <USBD_LL_PrepareReceive>
 8006db0:	e007      	b.n	8006dc2 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006db8:	2340      	movs	r3, #64	; 0x40
 8006dba:	2101      	movs	r1, #1
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f001 ff4e 	bl	8008c5e <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	3710      	adds	r7, #16
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}

08006dcc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b084      	sub	sp, #16
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	460b      	mov	r3, r1
 8006dd6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006ddc:	2181      	movs	r1, #129	; 0x81
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f001 fe73 	bl	8008aca <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2200      	movs	r2, #0
 8006de8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006dea:	2101      	movs	r1, #1
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f001 fe6c 	bl	8008aca <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2200      	movs	r2, #0
 8006df6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006dfa:	2182      	movs	r1, #130	; 0x82
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f001 fe64 	bl	8008aca <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2200      	movs	r2, #0
 8006e06:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d00e      	beq.n	8006e30 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e22:	4618      	mov	r0, r3
 8006e24:	f001 ff5e 	bl	8008ce4 <USBD_static_free>
    pdev->pClassData = NULL;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8006e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	3710      	adds	r7, #16
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}

08006e3a <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006e3a:	b580      	push	{r7, lr}
 8006e3c:	b086      	sub	sp, #24
 8006e3e:	af00      	add	r7, sp, #0
 8006e40:	6078      	str	r0, [r7, #4]
 8006e42:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e4a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006e50:	2300      	movs	r3, #0
 8006e52:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006e54:	2300      	movs	r3, #0
 8006e56:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	781b      	ldrb	r3, [r3, #0]
 8006e5c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d039      	beq.n	8006ed8 <USBD_CDC_Setup+0x9e>
 8006e64:	2b20      	cmp	r3, #32
 8006e66:	d17f      	bne.n	8006f68 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	88db      	ldrh	r3, [r3, #6]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d029      	beq.n	8006ec4 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	781b      	ldrb	r3, [r3, #0]
 8006e74:	b25b      	sxtb	r3, r3
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	da11      	bge.n	8006e9e <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e80:	689b      	ldr	r3, [r3, #8]
 8006e82:	683a      	ldr	r2, [r7, #0]
 8006e84:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006e86:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006e88:	683a      	ldr	r2, [r7, #0]
 8006e8a:	88d2      	ldrh	r2, [r2, #6]
 8006e8c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006e8e:	6939      	ldr	r1, [r7, #16]
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	88db      	ldrh	r3, [r3, #6]
 8006e94:	461a      	mov	r2, r3
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f001 fa13 	bl	80082c2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006e9c:	e06b      	b.n	8006f76 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	785a      	ldrb	r2, [r3, #1]
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	88db      	ldrh	r3, [r3, #6]
 8006eac:	b2da      	uxtb	r2, r3
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006eb4:	6939      	ldr	r1, [r7, #16]
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	88db      	ldrh	r3, [r3, #6]
 8006eba:	461a      	mov	r2, r3
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f001 fa2e 	bl	800831e <USBD_CtlPrepareRx>
      break;
 8006ec2:	e058      	b.n	8006f76 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	683a      	ldr	r2, [r7, #0]
 8006ece:	7850      	ldrb	r0, [r2, #1]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	6839      	ldr	r1, [r7, #0]
 8006ed4:	4798      	blx	r3
      break;
 8006ed6:	e04e      	b.n	8006f76 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	785b      	ldrb	r3, [r3, #1]
 8006edc:	2b0b      	cmp	r3, #11
 8006ede:	d02e      	beq.n	8006f3e <USBD_CDC_Setup+0x104>
 8006ee0:	2b0b      	cmp	r3, #11
 8006ee2:	dc38      	bgt.n	8006f56 <USBD_CDC_Setup+0x11c>
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d002      	beq.n	8006eee <USBD_CDC_Setup+0xb4>
 8006ee8:	2b0a      	cmp	r3, #10
 8006eea:	d014      	beq.n	8006f16 <USBD_CDC_Setup+0xdc>
 8006eec:	e033      	b.n	8006f56 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ef4:	2b03      	cmp	r3, #3
 8006ef6:	d107      	bne.n	8006f08 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006ef8:	f107 030c 	add.w	r3, r7, #12
 8006efc:	2202      	movs	r2, #2
 8006efe:	4619      	mov	r1, r3
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f001 f9de 	bl	80082c2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006f06:	e02e      	b.n	8006f66 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006f08:	6839      	ldr	r1, [r7, #0]
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f001 f96f 	bl	80081ee <USBD_CtlError>
            ret = USBD_FAIL;
 8006f10:	2302      	movs	r3, #2
 8006f12:	75fb      	strb	r3, [r7, #23]
          break;
 8006f14:	e027      	b.n	8006f66 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f1c:	2b03      	cmp	r3, #3
 8006f1e:	d107      	bne.n	8006f30 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006f20:	f107 030f 	add.w	r3, r7, #15
 8006f24:	2201      	movs	r2, #1
 8006f26:	4619      	mov	r1, r3
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f001 f9ca 	bl	80082c2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006f2e:	e01a      	b.n	8006f66 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006f30:	6839      	ldr	r1, [r7, #0]
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f001 f95b 	bl	80081ee <USBD_CtlError>
            ret = USBD_FAIL;
 8006f38:	2302      	movs	r3, #2
 8006f3a:	75fb      	strb	r3, [r7, #23]
          break;
 8006f3c:	e013      	b.n	8006f66 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f44:	2b03      	cmp	r3, #3
 8006f46:	d00d      	beq.n	8006f64 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8006f48:	6839      	ldr	r1, [r7, #0]
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f001 f94f 	bl	80081ee <USBD_CtlError>
            ret = USBD_FAIL;
 8006f50:	2302      	movs	r3, #2
 8006f52:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006f54:	e006      	b.n	8006f64 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8006f56:	6839      	ldr	r1, [r7, #0]
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f001 f948 	bl	80081ee <USBD_CtlError>
          ret = USBD_FAIL;
 8006f5e:	2302      	movs	r3, #2
 8006f60:	75fb      	strb	r3, [r7, #23]
          break;
 8006f62:	e000      	b.n	8006f66 <USBD_CDC_Setup+0x12c>
          break;
 8006f64:	bf00      	nop
      }
      break;
 8006f66:	e006      	b.n	8006f76 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006f68:	6839      	ldr	r1, [r7, #0]
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f001 f93f 	bl	80081ee <USBD_CtlError>
      ret = USBD_FAIL;
 8006f70:	2302      	movs	r3, #2
 8006f72:	75fb      	strb	r3, [r7, #23]
      break;
 8006f74:	bf00      	nop
  }

  return ret;
 8006f76:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3718      	adds	r7, #24
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}

08006f80 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b084      	sub	sp, #16
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	460b      	mov	r3, r1
 8006f8a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f92:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006f9a:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d03a      	beq.n	800701c <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006fa6:	78fa      	ldrb	r2, [r7, #3]
 8006fa8:	6879      	ldr	r1, [r7, #4]
 8006faa:	4613      	mov	r3, r2
 8006fac:	009b      	lsls	r3, r3, #2
 8006fae:	4413      	add	r3, r2
 8006fb0:	009b      	lsls	r3, r3, #2
 8006fb2:	440b      	add	r3, r1
 8006fb4:	331c      	adds	r3, #28
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d029      	beq.n	8007010 <USBD_CDC_DataIn+0x90>
 8006fbc:	78fa      	ldrb	r2, [r7, #3]
 8006fbe:	6879      	ldr	r1, [r7, #4]
 8006fc0:	4613      	mov	r3, r2
 8006fc2:	009b      	lsls	r3, r3, #2
 8006fc4:	4413      	add	r3, r2
 8006fc6:	009b      	lsls	r3, r3, #2
 8006fc8:	440b      	add	r3, r1
 8006fca:	331c      	adds	r3, #28
 8006fcc:	681a      	ldr	r2, [r3, #0]
 8006fce:	78f9      	ldrb	r1, [r7, #3]
 8006fd0:	68b8      	ldr	r0, [r7, #8]
 8006fd2:	460b      	mov	r3, r1
 8006fd4:	00db      	lsls	r3, r3, #3
 8006fd6:	440b      	add	r3, r1
 8006fd8:	009b      	lsls	r3, r3, #2
 8006fda:	4403      	add	r3, r0
 8006fdc:	3344      	adds	r3, #68	; 0x44
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	fbb2 f1f3 	udiv	r1, r2, r3
 8006fe4:	fb01 f303 	mul.w	r3, r1, r3
 8006fe8:	1ad3      	subs	r3, r2, r3
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d110      	bne.n	8007010 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006fee:	78fa      	ldrb	r2, [r7, #3]
 8006ff0:	6879      	ldr	r1, [r7, #4]
 8006ff2:	4613      	mov	r3, r2
 8006ff4:	009b      	lsls	r3, r3, #2
 8006ff6:	4413      	add	r3, r2
 8006ff8:	009b      	lsls	r3, r3, #2
 8006ffa:	440b      	add	r3, r1
 8006ffc:	331c      	adds	r3, #28
 8006ffe:	2200      	movs	r2, #0
 8007000:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007002:	78f9      	ldrb	r1, [r7, #3]
 8007004:	2300      	movs	r3, #0
 8007006:	2200      	movs	r2, #0
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f001 fe05 	bl	8008c18 <USBD_LL_Transmit>
 800700e:	e003      	b.n	8007018 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2200      	movs	r2, #0
 8007014:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8007018:	2300      	movs	r3, #0
 800701a:	e000      	b.n	800701e <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800701c:	2302      	movs	r3, #2
  }
}
 800701e:	4618      	mov	r0, r3
 8007020:	3710      	adds	r7, #16
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}

08007026 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007026:	b580      	push	{r7, lr}
 8007028:	b084      	sub	sp, #16
 800702a:	af00      	add	r7, sp, #0
 800702c:	6078      	str	r0, [r7, #4]
 800702e:	460b      	mov	r3, r1
 8007030:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007038:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800703a:	78fb      	ldrb	r3, [r7, #3]
 800703c:	4619      	mov	r1, r3
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f001 fe30 	bl	8008ca4 <USBD_LL_GetRxDataSize>
 8007044:	4602      	mov	r2, r0
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007052:	2b00      	cmp	r3, #0
 8007054:	d00d      	beq.n	8007072 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800705c:	68db      	ldr	r3, [r3, #12]
 800705e:	68fa      	ldr	r2, [r7, #12]
 8007060:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007064:	68fa      	ldr	r2, [r7, #12]
 8007066:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800706a:	4611      	mov	r1, r2
 800706c:	4798      	blx	r3

    return USBD_OK;
 800706e:	2300      	movs	r3, #0
 8007070:	e000      	b.n	8007074 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007072:	2302      	movs	r3, #2
  }
}
 8007074:	4618      	mov	r0, r3
 8007076:	3710      	adds	r7, #16
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}

0800707c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b084      	sub	sp, #16
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800708a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007092:	2b00      	cmp	r3, #0
 8007094:	d015      	beq.n	80070c2 <USBD_CDC_EP0_RxReady+0x46>
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800709c:	2bff      	cmp	r3, #255	; 0xff
 800709e:	d010      	beq.n	80070c2 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80070a6:	689b      	ldr	r3, [r3, #8]
 80070a8:	68fa      	ldr	r2, [r7, #12]
 80070aa:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80070ae:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80070b0:	68fa      	ldr	r2, [r7, #12]
 80070b2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80070b6:	b292      	uxth	r2, r2
 80070b8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	22ff      	movs	r2, #255	; 0xff
 80070be:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80070c2:	2300      	movs	r3, #0
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3710      	adds	r7, #16
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}

080070cc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b083      	sub	sp, #12
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2243      	movs	r2, #67	; 0x43
 80070d8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80070da:	4b03      	ldr	r3, [pc, #12]	; (80070e8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80070dc:	4618      	mov	r0, r3
 80070de:	370c      	adds	r7, #12
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bc80      	pop	{r7}
 80070e4:	4770      	bx	lr
 80070e6:	bf00      	nop
 80070e8:	20000100 	.word	0x20000100

080070ec <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80070ec:	b480      	push	{r7}
 80070ee:	b083      	sub	sp, #12
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2243      	movs	r2, #67	; 0x43
 80070f8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80070fa:	4b03      	ldr	r3, [pc, #12]	; (8007108 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	370c      	adds	r7, #12
 8007100:	46bd      	mov	sp, r7
 8007102:	bc80      	pop	{r7}
 8007104:	4770      	bx	lr
 8007106:	bf00      	nop
 8007108:	200000bc 	.word	0x200000bc

0800710c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800710c:	b480      	push	{r7}
 800710e:	b083      	sub	sp, #12
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2243      	movs	r2, #67	; 0x43
 8007118:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800711a:	4b03      	ldr	r3, [pc, #12]	; (8007128 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800711c:	4618      	mov	r0, r3
 800711e:	370c      	adds	r7, #12
 8007120:	46bd      	mov	sp, r7
 8007122:	bc80      	pop	{r7}
 8007124:	4770      	bx	lr
 8007126:	bf00      	nop
 8007128:	20000144 	.word	0x20000144

0800712c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800712c:	b480      	push	{r7}
 800712e:	b083      	sub	sp, #12
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	220a      	movs	r2, #10
 8007138:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800713a:	4b03      	ldr	r3, [pc, #12]	; (8007148 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800713c:	4618      	mov	r0, r3
 800713e:	370c      	adds	r7, #12
 8007140:	46bd      	mov	sp, r7
 8007142:	bc80      	pop	{r7}
 8007144:	4770      	bx	lr
 8007146:	bf00      	nop
 8007148:	20000078 	.word	0x20000078

0800714c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800714c:	b480      	push	{r7}
 800714e:	b085      	sub	sp, #20
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007156:	2302      	movs	r3, #2
 8007158:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d005      	beq.n	800716c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	683a      	ldr	r2, [r7, #0]
 8007164:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8007168:	2300      	movs	r3, #0
 800716a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800716c:	7bfb      	ldrb	r3, [r7, #15]
}
 800716e:	4618      	mov	r0, r3
 8007170:	3714      	adds	r7, #20
 8007172:	46bd      	mov	sp, r7
 8007174:	bc80      	pop	{r7}
 8007176:	4770      	bx	lr

08007178 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007178:	b480      	push	{r7}
 800717a:	b087      	sub	sp, #28
 800717c:	af00      	add	r7, sp, #0
 800717e:	60f8      	str	r0, [r7, #12]
 8007180:	60b9      	str	r1, [r7, #8]
 8007182:	4613      	mov	r3, r2
 8007184:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800718c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	68ba      	ldr	r2, [r7, #8]
 8007192:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007196:	88fa      	ldrh	r2, [r7, #6]
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800719e:	2300      	movs	r3, #0
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	371c      	adds	r7, #28
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bc80      	pop	{r7}
 80071a8:	4770      	bx	lr

080071aa <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80071aa:	b480      	push	{r7}
 80071ac:	b085      	sub	sp, #20
 80071ae:	af00      	add	r7, sp, #0
 80071b0:	6078      	str	r0, [r7, #4]
 80071b2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071ba:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	683a      	ldr	r2, [r7, #0]
 80071c0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80071c4:	2300      	movs	r3, #0
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3714      	adds	r7, #20
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bc80      	pop	{r7}
 80071ce:	4770      	bx	lr

080071d0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b084      	sub	sp, #16
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071de:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d017      	beq.n	800721a <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	7c1b      	ldrb	r3, [r3, #16]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d109      	bne.n	8007206 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80071f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80071fc:	2101      	movs	r1, #1
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f001 fd2d 	bl	8008c5e <USBD_LL_PrepareReceive>
 8007204:	e007      	b.n	8007216 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800720c:	2340      	movs	r3, #64	; 0x40
 800720e:	2101      	movs	r1, #1
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f001 fd24 	bl	8008c5e <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007216:	2300      	movs	r3, #0
 8007218:	e000      	b.n	800721c <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800721a:	2302      	movs	r3, #2
  }
}
 800721c:	4618      	mov	r0, r3
 800721e:	3710      	adds	r7, #16
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}

08007224 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b084      	sub	sp, #16
 8007228:	af00      	add	r7, sp, #0
 800722a:	60f8      	str	r0, [r7, #12]
 800722c:	60b9      	str	r1, [r7, #8]
 800722e:	4613      	mov	r3, r2
 8007230:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d101      	bne.n	800723c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007238:	2302      	movs	r3, #2
 800723a:	e01a      	b.n	8007272 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007242:	2b00      	cmp	r3, #0
 8007244:	d003      	beq.n	800724e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2200      	movs	r2, #0
 800724a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d003      	beq.n	800725c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	68ba      	ldr	r2, [r7, #8]
 8007258:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	2201      	movs	r2, #1
 8007260:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	79fa      	ldrb	r2, [r7, #7]
 8007268:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800726a:	68f8      	ldr	r0, [r7, #12]
 800726c:	f001 fba8 	bl	80089c0 <USBD_LL_Init>

  return USBD_OK;
 8007270:	2300      	movs	r3, #0
}
 8007272:	4618      	mov	r0, r3
 8007274:	3710      	adds	r7, #16
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}

0800727a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800727a:	b480      	push	{r7}
 800727c:	b085      	sub	sp, #20
 800727e:	af00      	add	r7, sp, #0
 8007280:	6078      	str	r0, [r7, #4]
 8007282:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007284:	2300      	movs	r3, #0
 8007286:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d006      	beq.n	800729c <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	683a      	ldr	r2, [r7, #0]
 8007292:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007296:	2300      	movs	r3, #0
 8007298:	73fb      	strb	r3, [r7, #15]
 800729a:	e001      	b.n	80072a0 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800729c:	2302      	movs	r3, #2
 800729e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80072a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3714      	adds	r7, #20
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bc80      	pop	{r7}
 80072aa:	4770      	bx	lr

080072ac <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b082      	sub	sp, #8
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f001 fbc7 	bl	8008a48 <USBD_LL_Start>

  return USBD_OK;
 80072ba:	2300      	movs	r3, #0
}
 80072bc:	4618      	mov	r0, r3
 80072be:	3708      	adds	r7, #8
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}

080072c4 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b083      	sub	sp, #12
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80072cc:	2300      	movs	r3, #0
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	370c      	adds	r7, #12
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bc80      	pop	{r7}
 80072d6:	4770      	bx	lr

080072d8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b084      	sub	sp, #16
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
 80072e0:	460b      	mov	r3, r1
 80072e2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80072e4:	2302      	movs	r3, #2
 80072e6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d00c      	beq.n	800730c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	78fa      	ldrb	r2, [r7, #3]
 80072fc:	4611      	mov	r1, r2
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	4798      	blx	r3
 8007302:	4603      	mov	r3, r0
 8007304:	2b00      	cmp	r3, #0
 8007306:	d101      	bne.n	800730c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007308:	2300      	movs	r3, #0
 800730a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800730c:	7bfb      	ldrb	r3, [r7, #15]
}
 800730e:	4618      	mov	r0, r3
 8007310:	3710      	adds	r7, #16
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}

08007316 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007316:	b580      	push	{r7, lr}
 8007318:	b082      	sub	sp, #8
 800731a:	af00      	add	r7, sp, #0
 800731c:	6078      	str	r0, [r7, #4]
 800731e:	460b      	mov	r3, r1
 8007320:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007328:	685b      	ldr	r3, [r3, #4]
 800732a:	78fa      	ldrb	r2, [r7, #3]
 800732c:	4611      	mov	r1, r2
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	4798      	blx	r3

  return USBD_OK;
 8007332:	2300      	movs	r3, #0
}
 8007334:	4618      	mov	r0, r3
 8007336:	3708      	adds	r7, #8
 8007338:	46bd      	mov	sp, r7
 800733a:	bd80      	pop	{r7, pc}

0800733c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b082      	sub	sp, #8
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
 8007344:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800734c:	6839      	ldr	r1, [r7, #0]
 800734e:	4618      	mov	r0, r3
 8007350:	f000 ff11 	bl	8008176 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2201      	movs	r2, #1
 8007358:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007362:	461a      	mov	r2, r3
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007370:	f003 031f 	and.w	r3, r3, #31
 8007374:	2b02      	cmp	r3, #2
 8007376:	d016      	beq.n	80073a6 <USBD_LL_SetupStage+0x6a>
 8007378:	2b02      	cmp	r3, #2
 800737a:	d81c      	bhi.n	80073b6 <USBD_LL_SetupStage+0x7a>
 800737c:	2b00      	cmp	r3, #0
 800737e:	d002      	beq.n	8007386 <USBD_LL_SetupStage+0x4a>
 8007380:	2b01      	cmp	r3, #1
 8007382:	d008      	beq.n	8007396 <USBD_LL_SetupStage+0x5a>
 8007384:	e017      	b.n	80073b6 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800738c:	4619      	mov	r1, r3
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f000 fa04 	bl	800779c <USBD_StdDevReq>
      break;
 8007394:	e01a      	b.n	80073cc <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800739c:	4619      	mov	r1, r3
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f000 fa66 	bl	8007870 <USBD_StdItfReq>
      break;
 80073a4:	e012      	b.n	80073cc <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80073ac:	4619      	mov	r1, r3
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f000 faa6 	bl	8007900 <USBD_StdEPReq>
      break;
 80073b4:	e00a      	b.n	80073cc <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80073bc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80073c0:	b2db      	uxtb	r3, r3
 80073c2:	4619      	mov	r1, r3
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f001 fb9f 	bl	8008b08 <USBD_LL_StallEP>
      break;
 80073ca:	bf00      	nop
  }

  return USBD_OK;
 80073cc:	2300      	movs	r3, #0
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3708      	adds	r7, #8
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}

080073d6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80073d6:	b580      	push	{r7, lr}
 80073d8:	b086      	sub	sp, #24
 80073da:	af00      	add	r7, sp, #0
 80073dc:	60f8      	str	r0, [r7, #12]
 80073de:	460b      	mov	r3, r1
 80073e0:	607a      	str	r2, [r7, #4]
 80073e2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80073e4:	7afb      	ldrb	r3, [r7, #11]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d14b      	bne.n	8007482 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80073f0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80073f8:	2b03      	cmp	r3, #3
 80073fa:	d134      	bne.n	8007466 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	68da      	ldr	r2, [r3, #12]
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	691b      	ldr	r3, [r3, #16]
 8007404:	429a      	cmp	r2, r3
 8007406:	d919      	bls.n	800743c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	68da      	ldr	r2, [r3, #12]
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	691b      	ldr	r3, [r3, #16]
 8007410:	1ad2      	subs	r2, r2, r3
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	68da      	ldr	r2, [r3, #12]
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800741e:	429a      	cmp	r2, r3
 8007420:	d203      	bcs.n	800742a <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007426:	b29b      	uxth	r3, r3
 8007428:	e002      	b.n	8007430 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800742e:	b29b      	uxth	r3, r3
 8007430:	461a      	mov	r2, r3
 8007432:	6879      	ldr	r1, [r7, #4]
 8007434:	68f8      	ldr	r0, [r7, #12]
 8007436:	f000 ff90 	bl	800835a <USBD_CtlContinueRx>
 800743a:	e038      	b.n	80074ae <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007442:	691b      	ldr	r3, [r3, #16]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d00a      	beq.n	800745e <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800744e:	2b03      	cmp	r3, #3
 8007450:	d105      	bne.n	800745e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007458:	691b      	ldr	r3, [r3, #16]
 800745a:	68f8      	ldr	r0, [r7, #12]
 800745c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800745e:	68f8      	ldr	r0, [r7, #12]
 8007460:	f000 ff8d 	bl	800837e <USBD_CtlSendStatus>
 8007464:	e023      	b.n	80074ae <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800746c:	2b05      	cmp	r3, #5
 800746e:	d11e      	bne.n	80074ae <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	2200      	movs	r2, #0
 8007474:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007478:	2100      	movs	r1, #0
 800747a:	68f8      	ldr	r0, [r7, #12]
 800747c:	f001 fb44 	bl	8008b08 <USBD_LL_StallEP>
 8007480:	e015      	b.n	80074ae <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007488:	699b      	ldr	r3, [r3, #24]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d00d      	beq.n	80074aa <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007494:	2b03      	cmp	r3, #3
 8007496:	d108      	bne.n	80074aa <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800749e:	699b      	ldr	r3, [r3, #24]
 80074a0:	7afa      	ldrb	r2, [r7, #11]
 80074a2:	4611      	mov	r1, r2
 80074a4:	68f8      	ldr	r0, [r7, #12]
 80074a6:	4798      	blx	r3
 80074a8:	e001      	b.n	80074ae <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80074aa:	2302      	movs	r3, #2
 80074ac:	e000      	b.n	80074b0 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80074ae:	2300      	movs	r3, #0
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	3718      	adds	r7, #24
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}

080074b8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b086      	sub	sp, #24
 80074bc:	af00      	add	r7, sp, #0
 80074be:	60f8      	str	r0, [r7, #12]
 80074c0:	460b      	mov	r3, r1
 80074c2:	607a      	str	r2, [r7, #4]
 80074c4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80074c6:	7afb      	ldrb	r3, [r7, #11]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d17f      	bne.n	80075cc <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	3314      	adds	r3, #20
 80074d0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80074d8:	2b02      	cmp	r3, #2
 80074da:	d15c      	bne.n	8007596 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	68da      	ldr	r2, [r3, #12]
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	691b      	ldr	r3, [r3, #16]
 80074e4:	429a      	cmp	r2, r3
 80074e6:	d915      	bls.n	8007514 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	68da      	ldr	r2, [r3, #12]
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	691b      	ldr	r3, [r3, #16]
 80074f0:	1ad2      	subs	r2, r2, r3
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	68db      	ldr	r3, [r3, #12]
 80074fa:	b29b      	uxth	r3, r3
 80074fc:	461a      	mov	r2, r3
 80074fe:	6879      	ldr	r1, [r7, #4]
 8007500:	68f8      	ldr	r0, [r7, #12]
 8007502:	f000 fefa 	bl	80082fa <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007506:	2300      	movs	r3, #0
 8007508:	2200      	movs	r2, #0
 800750a:	2100      	movs	r1, #0
 800750c:	68f8      	ldr	r0, [r7, #12]
 800750e:	f001 fba6 	bl	8008c5e <USBD_LL_PrepareReceive>
 8007512:	e04e      	b.n	80075b2 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	689b      	ldr	r3, [r3, #8]
 8007518:	697a      	ldr	r2, [r7, #20]
 800751a:	6912      	ldr	r2, [r2, #16]
 800751c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007520:	fb01 f202 	mul.w	r2, r1, r2
 8007524:	1a9b      	subs	r3, r3, r2
 8007526:	2b00      	cmp	r3, #0
 8007528:	d11c      	bne.n	8007564 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	689a      	ldr	r2, [r3, #8]
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007532:	429a      	cmp	r2, r3
 8007534:	d316      	bcc.n	8007564 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	689a      	ldr	r2, [r3, #8]
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007540:	429a      	cmp	r2, r3
 8007542:	d20f      	bcs.n	8007564 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007544:	2200      	movs	r2, #0
 8007546:	2100      	movs	r1, #0
 8007548:	68f8      	ldr	r0, [r7, #12]
 800754a:	f000 fed6 	bl	80082fa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	2200      	movs	r2, #0
 8007552:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007556:	2300      	movs	r3, #0
 8007558:	2200      	movs	r2, #0
 800755a:	2100      	movs	r1, #0
 800755c:	68f8      	ldr	r0, [r7, #12]
 800755e:	f001 fb7e 	bl	8008c5e <USBD_LL_PrepareReceive>
 8007562:	e026      	b.n	80075b2 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800756a:	68db      	ldr	r3, [r3, #12]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d00a      	beq.n	8007586 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007576:	2b03      	cmp	r3, #3
 8007578:	d105      	bne.n	8007586 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007580:	68db      	ldr	r3, [r3, #12]
 8007582:	68f8      	ldr	r0, [r7, #12]
 8007584:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007586:	2180      	movs	r1, #128	; 0x80
 8007588:	68f8      	ldr	r0, [r7, #12]
 800758a:	f001 fabd 	bl	8008b08 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800758e:	68f8      	ldr	r0, [r7, #12]
 8007590:	f000 ff08 	bl	80083a4 <USBD_CtlReceiveStatus>
 8007594:	e00d      	b.n	80075b2 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800759c:	2b04      	cmp	r3, #4
 800759e:	d004      	beq.n	80075aa <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d103      	bne.n	80075b2 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80075aa:	2180      	movs	r1, #128	; 0x80
 80075ac:	68f8      	ldr	r0, [r7, #12]
 80075ae:	f001 faab 	bl	8008b08 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80075b8:	2b01      	cmp	r3, #1
 80075ba:	d11d      	bne.n	80075f8 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80075bc:	68f8      	ldr	r0, [r7, #12]
 80075be:	f7ff fe81 	bl	80072c4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	2200      	movs	r2, #0
 80075c6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80075ca:	e015      	b.n	80075f8 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075d2:	695b      	ldr	r3, [r3, #20]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d00d      	beq.n	80075f4 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80075de:	2b03      	cmp	r3, #3
 80075e0:	d108      	bne.n	80075f4 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075e8:	695b      	ldr	r3, [r3, #20]
 80075ea:	7afa      	ldrb	r2, [r7, #11]
 80075ec:	4611      	mov	r1, r2
 80075ee:	68f8      	ldr	r0, [r7, #12]
 80075f0:	4798      	blx	r3
 80075f2:	e001      	b.n	80075f8 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80075f4:	2302      	movs	r3, #2
 80075f6:	e000      	b.n	80075fa <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80075f8:	2300      	movs	r3, #0
}
 80075fa:	4618      	mov	r0, r3
 80075fc:	3718      	adds	r7, #24
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}

08007602 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007602:	b580      	push	{r7, lr}
 8007604:	b082      	sub	sp, #8
 8007606:	af00      	add	r7, sp, #0
 8007608:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800760a:	2340      	movs	r3, #64	; 0x40
 800760c:	2200      	movs	r2, #0
 800760e:	2100      	movs	r1, #0
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f001 fa34 	bl	8008a7e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2201      	movs	r2, #1
 800761a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2240      	movs	r2, #64	; 0x40
 8007622:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007626:	2340      	movs	r3, #64	; 0x40
 8007628:	2200      	movs	r2, #0
 800762a:	2180      	movs	r1, #128	; 0x80
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f001 fa26 	bl	8008a7e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2201      	movs	r2, #1
 8007636:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2240      	movs	r2, #64	; 0x40
 800763c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2201      	movs	r2, #1
 8007642:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2200      	movs	r2, #0
 800764a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2200      	movs	r2, #0
 8007652:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2200      	movs	r2, #0
 8007658:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007662:	2b00      	cmp	r3, #0
 8007664:	d009      	beq.n	800767a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800766c:	685b      	ldr	r3, [r3, #4]
 800766e:	687a      	ldr	r2, [r7, #4]
 8007670:	6852      	ldr	r2, [r2, #4]
 8007672:	b2d2      	uxtb	r2, r2
 8007674:	4611      	mov	r1, r2
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	4798      	blx	r3
  }

  return USBD_OK;
 800767a:	2300      	movs	r3, #0
}
 800767c:	4618      	mov	r0, r3
 800767e:	3708      	adds	r7, #8
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}

08007684 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007684:	b480      	push	{r7}
 8007686:	b083      	sub	sp, #12
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
 800768c:	460b      	mov	r3, r1
 800768e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	78fa      	ldrb	r2, [r7, #3]
 8007694:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007696:	2300      	movs	r3, #0
}
 8007698:	4618      	mov	r0, r3
 800769a:	370c      	adds	r7, #12
 800769c:	46bd      	mov	sp, r7
 800769e:	bc80      	pop	{r7}
 80076a0:	4770      	bx	lr

080076a2 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80076a2:	b480      	push	{r7}
 80076a4:	b083      	sub	sp, #12
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2204      	movs	r2, #4
 80076ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80076be:	2300      	movs	r3, #0
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	370c      	adds	r7, #12
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bc80      	pop	{r7}
 80076c8:	4770      	bx	lr

080076ca <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80076ca:	b480      	push	{r7}
 80076cc:	b083      	sub	sp, #12
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076d8:	2b04      	cmp	r3, #4
 80076da:	d105      	bne.n	80076e8 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80076e8:	2300      	movs	r3, #0
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	370c      	adds	r7, #12
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bc80      	pop	{r7}
 80076f2:	4770      	bx	lr

080076f4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b082      	sub	sp, #8
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007702:	2b03      	cmp	r3, #3
 8007704:	d10b      	bne.n	800771e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800770c:	69db      	ldr	r3, [r3, #28]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d005      	beq.n	800771e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007718:	69db      	ldr	r3, [r3, #28]
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800771e:	2300      	movs	r3, #0
}
 8007720:	4618      	mov	r0, r3
 8007722:	3708      	adds	r7, #8
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}

08007728 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007728:	b480      	push	{r7}
 800772a:	b083      	sub	sp, #12
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
 8007730:	460b      	mov	r3, r1
 8007732:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8007734:	2300      	movs	r3, #0
}
 8007736:	4618      	mov	r0, r3
 8007738:	370c      	adds	r7, #12
 800773a:	46bd      	mov	sp, r7
 800773c:	bc80      	pop	{r7}
 800773e:	4770      	bx	lr

08007740 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007740:	b480      	push	{r7}
 8007742:	b083      	sub	sp, #12
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
 8007748:	460b      	mov	r3, r1
 800774a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800774c:	2300      	movs	r3, #0
}
 800774e:	4618      	mov	r0, r3
 8007750:	370c      	adds	r7, #12
 8007752:	46bd      	mov	sp, r7
 8007754:	bc80      	pop	{r7}
 8007756:	4770      	bx	lr

08007758 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007758:	b480      	push	{r7}
 800775a:	b083      	sub	sp, #12
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007760:	2300      	movs	r3, #0
}
 8007762:	4618      	mov	r0, r3
 8007764:	370c      	adds	r7, #12
 8007766:	46bd      	mov	sp, r7
 8007768:	bc80      	pop	{r7}
 800776a:	4770      	bx	lr

0800776c <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b082      	sub	sp, #8
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2201      	movs	r2, #1
 8007778:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	687a      	ldr	r2, [r7, #4]
 8007786:	6852      	ldr	r2, [r2, #4]
 8007788:	b2d2      	uxtb	r2, r2
 800778a:	4611      	mov	r1, r2
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	4798      	blx	r3

  return USBD_OK;
 8007790:	2300      	movs	r3, #0
}
 8007792:	4618      	mov	r0, r3
 8007794:	3708      	adds	r7, #8
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}
	...

0800779c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b084      	sub	sp, #16
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
 80077a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80077a6:	2300      	movs	r3, #0
 80077a8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	781b      	ldrb	r3, [r3, #0]
 80077ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80077b2:	2b40      	cmp	r3, #64	; 0x40
 80077b4:	d005      	beq.n	80077c2 <USBD_StdDevReq+0x26>
 80077b6:	2b40      	cmp	r3, #64	; 0x40
 80077b8:	d84f      	bhi.n	800785a <USBD_StdDevReq+0xbe>
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d009      	beq.n	80077d2 <USBD_StdDevReq+0x36>
 80077be:	2b20      	cmp	r3, #32
 80077c0:	d14b      	bne.n	800785a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077c8:	689b      	ldr	r3, [r3, #8]
 80077ca:	6839      	ldr	r1, [r7, #0]
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	4798      	blx	r3
      break;
 80077d0:	e048      	b.n	8007864 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	785b      	ldrb	r3, [r3, #1]
 80077d6:	2b09      	cmp	r3, #9
 80077d8:	d839      	bhi.n	800784e <USBD_StdDevReq+0xb2>
 80077da:	a201      	add	r2, pc, #4	; (adr r2, 80077e0 <USBD_StdDevReq+0x44>)
 80077dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077e0:	08007831 	.word	0x08007831
 80077e4:	08007845 	.word	0x08007845
 80077e8:	0800784f 	.word	0x0800784f
 80077ec:	0800783b 	.word	0x0800783b
 80077f0:	0800784f 	.word	0x0800784f
 80077f4:	08007813 	.word	0x08007813
 80077f8:	08007809 	.word	0x08007809
 80077fc:	0800784f 	.word	0x0800784f
 8007800:	08007827 	.word	0x08007827
 8007804:	0800781d 	.word	0x0800781d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007808:	6839      	ldr	r1, [r7, #0]
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f000 f9dc 	bl	8007bc8 <USBD_GetDescriptor>
          break;
 8007810:	e022      	b.n	8007858 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007812:	6839      	ldr	r1, [r7, #0]
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f000 fb3f 	bl	8007e98 <USBD_SetAddress>
          break;
 800781a:	e01d      	b.n	8007858 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800781c:	6839      	ldr	r1, [r7, #0]
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f000 fb7e 	bl	8007f20 <USBD_SetConfig>
          break;
 8007824:	e018      	b.n	8007858 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007826:	6839      	ldr	r1, [r7, #0]
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f000 fc07 	bl	800803c <USBD_GetConfig>
          break;
 800782e:	e013      	b.n	8007858 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007830:	6839      	ldr	r1, [r7, #0]
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f000 fc37 	bl	80080a6 <USBD_GetStatus>
          break;
 8007838:	e00e      	b.n	8007858 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800783a:	6839      	ldr	r1, [r7, #0]
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f000 fc65 	bl	800810c <USBD_SetFeature>
          break;
 8007842:	e009      	b.n	8007858 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007844:	6839      	ldr	r1, [r7, #0]
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f000 fc74 	bl	8008134 <USBD_ClrFeature>
          break;
 800784c:	e004      	b.n	8007858 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800784e:	6839      	ldr	r1, [r7, #0]
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f000 fccc 	bl	80081ee <USBD_CtlError>
          break;
 8007856:	bf00      	nop
      }
      break;
 8007858:	e004      	b.n	8007864 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800785a:	6839      	ldr	r1, [r7, #0]
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f000 fcc6 	bl	80081ee <USBD_CtlError>
      break;
 8007862:	bf00      	nop
  }

  return ret;
 8007864:	7bfb      	ldrb	r3, [r7, #15]
}
 8007866:	4618      	mov	r0, r3
 8007868:	3710      	adds	r7, #16
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}
 800786e:	bf00      	nop

08007870 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b084      	sub	sp, #16
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
 8007878:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800787a:	2300      	movs	r3, #0
 800787c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	781b      	ldrb	r3, [r3, #0]
 8007882:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007886:	2b40      	cmp	r3, #64	; 0x40
 8007888:	d005      	beq.n	8007896 <USBD_StdItfReq+0x26>
 800788a:	2b40      	cmp	r3, #64	; 0x40
 800788c:	d82e      	bhi.n	80078ec <USBD_StdItfReq+0x7c>
 800788e:	2b00      	cmp	r3, #0
 8007890:	d001      	beq.n	8007896 <USBD_StdItfReq+0x26>
 8007892:	2b20      	cmp	r3, #32
 8007894:	d12a      	bne.n	80078ec <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800789c:	3b01      	subs	r3, #1
 800789e:	2b02      	cmp	r3, #2
 80078a0:	d81d      	bhi.n	80078de <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	889b      	ldrh	r3, [r3, #4]
 80078a6:	b2db      	uxtb	r3, r3
 80078a8:	2b01      	cmp	r3, #1
 80078aa:	d813      	bhi.n	80078d4 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078b2:	689b      	ldr	r3, [r3, #8]
 80078b4:	6839      	ldr	r1, [r7, #0]
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	4798      	blx	r3
 80078ba:	4603      	mov	r3, r0
 80078bc:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	88db      	ldrh	r3, [r3, #6]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d110      	bne.n	80078e8 <USBD_StdItfReq+0x78>
 80078c6:	7bfb      	ldrb	r3, [r7, #15]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d10d      	bne.n	80078e8 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f000 fd56 	bl	800837e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80078d2:	e009      	b.n	80078e8 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80078d4:	6839      	ldr	r1, [r7, #0]
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f000 fc89 	bl	80081ee <USBD_CtlError>
          break;
 80078dc:	e004      	b.n	80078e8 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80078de:	6839      	ldr	r1, [r7, #0]
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f000 fc84 	bl	80081ee <USBD_CtlError>
          break;
 80078e6:	e000      	b.n	80078ea <USBD_StdItfReq+0x7a>
          break;
 80078e8:	bf00      	nop
      }
      break;
 80078ea:	e004      	b.n	80078f6 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80078ec:	6839      	ldr	r1, [r7, #0]
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f000 fc7d 	bl	80081ee <USBD_CtlError>
      break;
 80078f4:	bf00      	nop
  }

  return USBD_OK;
 80078f6:	2300      	movs	r3, #0
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	3710      	adds	r7, #16
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}

08007900 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b084      	sub	sp, #16
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
 8007908:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800790a:	2300      	movs	r3, #0
 800790c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	889b      	ldrh	r3, [r3, #4]
 8007912:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	781b      	ldrb	r3, [r3, #0]
 8007918:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800791c:	2b40      	cmp	r3, #64	; 0x40
 800791e:	d007      	beq.n	8007930 <USBD_StdEPReq+0x30>
 8007920:	2b40      	cmp	r3, #64	; 0x40
 8007922:	f200 8146 	bhi.w	8007bb2 <USBD_StdEPReq+0x2b2>
 8007926:	2b00      	cmp	r3, #0
 8007928:	d00a      	beq.n	8007940 <USBD_StdEPReq+0x40>
 800792a:	2b20      	cmp	r3, #32
 800792c:	f040 8141 	bne.w	8007bb2 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007936:	689b      	ldr	r3, [r3, #8]
 8007938:	6839      	ldr	r1, [r7, #0]
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	4798      	blx	r3
      break;
 800793e:	e13d      	b.n	8007bbc <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	781b      	ldrb	r3, [r3, #0]
 8007944:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007948:	2b20      	cmp	r3, #32
 800794a:	d10a      	bne.n	8007962 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007952:	689b      	ldr	r3, [r3, #8]
 8007954:	6839      	ldr	r1, [r7, #0]
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	4798      	blx	r3
 800795a:	4603      	mov	r3, r0
 800795c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800795e:	7bfb      	ldrb	r3, [r7, #15]
 8007960:	e12d      	b.n	8007bbe <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	785b      	ldrb	r3, [r3, #1]
 8007966:	2b03      	cmp	r3, #3
 8007968:	d007      	beq.n	800797a <USBD_StdEPReq+0x7a>
 800796a:	2b03      	cmp	r3, #3
 800796c:	f300 811b 	bgt.w	8007ba6 <USBD_StdEPReq+0x2a6>
 8007970:	2b00      	cmp	r3, #0
 8007972:	d072      	beq.n	8007a5a <USBD_StdEPReq+0x15a>
 8007974:	2b01      	cmp	r3, #1
 8007976:	d03a      	beq.n	80079ee <USBD_StdEPReq+0xee>
 8007978:	e115      	b.n	8007ba6 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007980:	2b02      	cmp	r3, #2
 8007982:	d002      	beq.n	800798a <USBD_StdEPReq+0x8a>
 8007984:	2b03      	cmp	r3, #3
 8007986:	d015      	beq.n	80079b4 <USBD_StdEPReq+0xb4>
 8007988:	e02b      	b.n	80079e2 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800798a:	7bbb      	ldrb	r3, [r7, #14]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d00c      	beq.n	80079aa <USBD_StdEPReq+0xaa>
 8007990:	7bbb      	ldrb	r3, [r7, #14]
 8007992:	2b80      	cmp	r3, #128	; 0x80
 8007994:	d009      	beq.n	80079aa <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007996:	7bbb      	ldrb	r3, [r7, #14]
 8007998:	4619      	mov	r1, r3
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f001 f8b4 	bl	8008b08 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80079a0:	2180      	movs	r1, #128	; 0x80
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f001 f8b0 	bl	8008b08 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80079a8:	e020      	b.n	80079ec <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80079aa:	6839      	ldr	r1, [r7, #0]
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f000 fc1e 	bl	80081ee <USBD_CtlError>
              break;
 80079b2:	e01b      	b.n	80079ec <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	885b      	ldrh	r3, [r3, #2]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d10e      	bne.n	80079da <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80079bc:	7bbb      	ldrb	r3, [r7, #14]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d00b      	beq.n	80079da <USBD_StdEPReq+0xda>
 80079c2:	7bbb      	ldrb	r3, [r7, #14]
 80079c4:	2b80      	cmp	r3, #128	; 0x80
 80079c6:	d008      	beq.n	80079da <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	88db      	ldrh	r3, [r3, #6]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d104      	bne.n	80079da <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80079d0:	7bbb      	ldrb	r3, [r7, #14]
 80079d2:	4619      	mov	r1, r3
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f001 f897 	bl	8008b08 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f000 fccf 	bl	800837e <USBD_CtlSendStatus>

              break;
 80079e0:	e004      	b.n	80079ec <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80079e2:	6839      	ldr	r1, [r7, #0]
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f000 fc02 	bl	80081ee <USBD_CtlError>
              break;
 80079ea:	bf00      	nop
          }
          break;
 80079ec:	e0e0      	b.n	8007bb0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079f4:	2b02      	cmp	r3, #2
 80079f6:	d002      	beq.n	80079fe <USBD_StdEPReq+0xfe>
 80079f8:	2b03      	cmp	r3, #3
 80079fa:	d015      	beq.n	8007a28 <USBD_StdEPReq+0x128>
 80079fc:	e026      	b.n	8007a4c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80079fe:	7bbb      	ldrb	r3, [r7, #14]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d00c      	beq.n	8007a1e <USBD_StdEPReq+0x11e>
 8007a04:	7bbb      	ldrb	r3, [r7, #14]
 8007a06:	2b80      	cmp	r3, #128	; 0x80
 8007a08:	d009      	beq.n	8007a1e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007a0a:	7bbb      	ldrb	r3, [r7, #14]
 8007a0c:	4619      	mov	r1, r3
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f001 f87a 	bl	8008b08 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007a14:	2180      	movs	r1, #128	; 0x80
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f001 f876 	bl	8008b08 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007a1c:	e01c      	b.n	8007a58 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007a1e:	6839      	ldr	r1, [r7, #0]
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f000 fbe4 	bl	80081ee <USBD_CtlError>
              break;
 8007a26:	e017      	b.n	8007a58 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	885b      	ldrh	r3, [r3, #2]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d112      	bne.n	8007a56 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007a30:	7bbb      	ldrb	r3, [r7, #14]
 8007a32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d004      	beq.n	8007a44 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007a3a:	7bbb      	ldrb	r3, [r7, #14]
 8007a3c:	4619      	mov	r1, r3
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f001 f881 	bl	8008b46 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f000 fc9a 	bl	800837e <USBD_CtlSendStatus>
              }
              break;
 8007a4a:	e004      	b.n	8007a56 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007a4c:	6839      	ldr	r1, [r7, #0]
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f000 fbcd 	bl	80081ee <USBD_CtlError>
              break;
 8007a54:	e000      	b.n	8007a58 <USBD_StdEPReq+0x158>
              break;
 8007a56:	bf00      	nop
          }
          break;
 8007a58:	e0aa      	b.n	8007bb0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a60:	2b02      	cmp	r3, #2
 8007a62:	d002      	beq.n	8007a6a <USBD_StdEPReq+0x16a>
 8007a64:	2b03      	cmp	r3, #3
 8007a66:	d032      	beq.n	8007ace <USBD_StdEPReq+0x1ce>
 8007a68:	e097      	b.n	8007b9a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a6a:	7bbb      	ldrb	r3, [r7, #14]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d007      	beq.n	8007a80 <USBD_StdEPReq+0x180>
 8007a70:	7bbb      	ldrb	r3, [r7, #14]
 8007a72:	2b80      	cmp	r3, #128	; 0x80
 8007a74:	d004      	beq.n	8007a80 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007a76:	6839      	ldr	r1, [r7, #0]
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f000 fbb8 	bl	80081ee <USBD_CtlError>
                break;
 8007a7e:	e091      	b.n	8007ba4 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	da0b      	bge.n	8007aa0 <USBD_StdEPReq+0x1a0>
 8007a88:	7bbb      	ldrb	r3, [r7, #14]
 8007a8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a8e:	4613      	mov	r3, r2
 8007a90:	009b      	lsls	r3, r3, #2
 8007a92:	4413      	add	r3, r2
 8007a94:	009b      	lsls	r3, r3, #2
 8007a96:	3310      	adds	r3, #16
 8007a98:	687a      	ldr	r2, [r7, #4]
 8007a9a:	4413      	add	r3, r2
 8007a9c:	3304      	adds	r3, #4
 8007a9e:	e00b      	b.n	8007ab8 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007aa0:	7bbb      	ldrb	r3, [r7, #14]
 8007aa2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007aa6:	4613      	mov	r3, r2
 8007aa8:	009b      	lsls	r3, r3, #2
 8007aaa:	4413      	add	r3, r2
 8007aac:	009b      	lsls	r3, r3, #2
 8007aae:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007ab2:	687a      	ldr	r2, [r7, #4]
 8007ab4:	4413      	add	r3, r2
 8007ab6:	3304      	adds	r3, #4
 8007ab8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	2200      	movs	r2, #0
 8007abe:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	2202      	movs	r2, #2
 8007ac4:	4619      	mov	r1, r3
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f000 fbfb 	bl	80082c2 <USBD_CtlSendData>
              break;
 8007acc:	e06a      	b.n	8007ba4 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007ace:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	da11      	bge.n	8007afa <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007ad6:	7bbb      	ldrb	r3, [r7, #14]
 8007ad8:	f003 020f 	and.w	r2, r3, #15
 8007adc:	6879      	ldr	r1, [r7, #4]
 8007ade:	4613      	mov	r3, r2
 8007ae0:	009b      	lsls	r3, r3, #2
 8007ae2:	4413      	add	r3, r2
 8007ae4:	009b      	lsls	r3, r3, #2
 8007ae6:	440b      	add	r3, r1
 8007ae8:	3318      	adds	r3, #24
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d117      	bne.n	8007b20 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007af0:	6839      	ldr	r1, [r7, #0]
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f000 fb7b 	bl	80081ee <USBD_CtlError>
                  break;
 8007af8:	e054      	b.n	8007ba4 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007afa:	7bbb      	ldrb	r3, [r7, #14]
 8007afc:	f003 020f 	and.w	r2, r3, #15
 8007b00:	6879      	ldr	r1, [r7, #4]
 8007b02:	4613      	mov	r3, r2
 8007b04:	009b      	lsls	r3, r3, #2
 8007b06:	4413      	add	r3, r2
 8007b08:	009b      	lsls	r3, r3, #2
 8007b0a:	440b      	add	r3, r1
 8007b0c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d104      	bne.n	8007b20 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007b16:	6839      	ldr	r1, [r7, #0]
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f000 fb68 	bl	80081ee <USBD_CtlError>
                  break;
 8007b1e:	e041      	b.n	8007ba4 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	da0b      	bge.n	8007b40 <USBD_StdEPReq+0x240>
 8007b28:	7bbb      	ldrb	r3, [r7, #14]
 8007b2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007b2e:	4613      	mov	r3, r2
 8007b30:	009b      	lsls	r3, r3, #2
 8007b32:	4413      	add	r3, r2
 8007b34:	009b      	lsls	r3, r3, #2
 8007b36:	3310      	adds	r3, #16
 8007b38:	687a      	ldr	r2, [r7, #4]
 8007b3a:	4413      	add	r3, r2
 8007b3c:	3304      	adds	r3, #4
 8007b3e:	e00b      	b.n	8007b58 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007b40:	7bbb      	ldrb	r3, [r7, #14]
 8007b42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b46:	4613      	mov	r3, r2
 8007b48:	009b      	lsls	r3, r3, #2
 8007b4a:	4413      	add	r3, r2
 8007b4c:	009b      	lsls	r3, r3, #2
 8007b4e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007b52:	687a      	ldr	r2, [r7, #4]
 8007b54:	4413      	add	r3, r2
 8007b56:	3304      	adds	r3, #4
 8007b58:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007b5a:	7bbb      	ldrb	r3, [r7, #14]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d002      	beq.n	8007b66 <USBD_StdEPReq+0x266>
 8007b60:	7bbb      	ldrb	r3, [r7, #14]
 8007b62:	2b80      	cmp	r3, #128	; 0x80
 8007b64:	d103      	bne.n	8007b6e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	601a      	str	r2, [r3, #0]
 8007b6c:	e00e      	b.n	8007b8c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007b6e:	7bbb      	ldrb	r3, [r7, #14]
 8007b70:	4619      	mov	r1, r3
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f001 f806 	bl	8008b84 <USBD_LL_IsStallEP>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d003      	beq.n	8007b86 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	2201      	movs	r2, #1
 8007b82:	601a      	str	r2, [r3, #0]
 8007b84:	e002      	b.n	8007b8c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	2202      	movs	r2, #2
 8007b90:	4619      	mov	r1, r3
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f000 fb95 	bl	80082c2 <USBD_CtlSendData>
              break;
 8007b98:	e004      	b.n	8007ba4 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007b9a:	6839      	ldr	r1, [r7, #0]
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f000 fb26 	bl	80081ee <USBD_CtlError>
              break;
 8007ba2:	bf00      	nop
          }
          break;
 8007ba4:	e004      	b.n	8007bb0 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007ba6:	6839      	ldr	r1, [r7, #0]
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f000 fb20 	bl	80081ee <USBD_CtlError>
          break;
 8007bae:	bf00      	nop
      }
      break;
 8007bb0:	e004      	b.n	8007bbc <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007bb2:	6839      	ldr	r1, [r7, #0]
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f000 fb1a 	bl	80081ee <USBD_CtlError>
      break;
 8007bba:	bf00      	nop
  }

  return ret;
 8007bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	3710      	adds	r7, #16
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}
	...

08007bc8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b084      	sub	sp, #16
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
 8007bd0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007bda:	2300      	movs	r3, #0
 8007bdc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	885b      	ldrh	r3, [r3, #2]
 8007be2:	0a1b      	lsrs	r3, r3, #8
 8007be4:	b29b      	uxth	r3, r3
 8007be6:	3b01      	subs	r3, #1
 8007be8:	2b06      	cmp	r3, #6
 8007bea:	f200 8128 	bhi.w	8007e3e <USBD_GetDescriptor+0x276>
 8007bee:	a201      	add	r2, pc, #4	; (adr r2, 8007bf4 <USBD_GetDescriptor+0x2c>)
 8007bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bf4:	08007c11 	.word	0x08007c11
 8007bf8:	08007c29 	.word	0x08007c29
 8007bfc:	08007c69 	.word	0x08007c69
 8007c00:	08007e3f 	.word	0x08007e3f
 8007c04:	08007e3f 	.word	0x08007e3f
 8007c08:	08007ddf 	.word	0x08007ddf
 8007c0c:	08007e0b 	.word	0x08007e0b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	687a      	ldr	r2, [r7, #4]
 8007c1a:	7c12      	ldrb	r2, [r2, #16]
 8007c1c:	f107 0108 	add.w	r1, r7, #8
 8007c20:	4610      	mov	r0, r2
 8007c22:	4798      	blx	r3
 8007c24:	60f8      	str	r0, [r7, #12]
      break;
 8007c26:	e112      	b.n	8007e4e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	7c1b      	ldrb	r3, [r3, #16]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d10d      	bne.n	8007c4c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c38:	f107 0208 	add.w	r2, r7, #8
 8007c3c:	4610      	mov	r0, r2
 8007c3e:	4798      	blx	r3
 8007c40:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	3301      	adds	r3, #1
 8007c46:	2202      	movs	r2, #2
 8007c48:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007c4a:	e100      	b.n	8007e4e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c54:	f107 0208 	add.w	r2, r7, #8
 8007c58:	4610      	mov	r0, r2
 8007c5a:	4798      	blx	r3
 8007c5c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	3301      	adds	r3, #1
 8007c62:	2202      	movs	r2, #2
 8007c64:	701a      	strb	r2, [r3, #0]
      break;
 8007c66:	e0f2      	b.n	8007e4e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	885b      	ldrh	r3, [r3, #2]
 8007c6c:	b2db      	uxtb	r3, r3
 8007c6e:	2b05      	cmp	r3, #5
 8007c70:	f200 80ac 	bhi.w	8007dcc <USBD_GetDescriptor+0x204>
 8007c74:	a201      	add	r2, pc, #4	; (adr r2, 8007c7c <USBD_GetDescriptor+0xb4>)
 8007c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c7a:	bf00      	nop
 8007c7c:	08007c95 	.word	0x08007c95
 8007c80:	08007cc9 	.word	0x08007cc9
 8007c84:	08007cfd 	.word	0x08007cfd
 8007c88:	08007d31 	.word	0x08007d31
 8007c8c:	08007d65 	.word	0x08007d65
 8007c90:	08007d99 	.word	0x08007d99
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c9a:	685b      	ldr	r3, [r3, #4]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d00b      	beq.n	8007cb8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007ca6:	685b      	ldr	r3, [r3, #4]
 8007ca8:	687a      	ldr	r2, [r7, #4]
 8007caa:	7c12      	ldrb	r2, [r2, #16]
 8007cac:	f107 0108 	add.w	r1, r7, #8
 8007cb0:	4610      	mov	r0, r2
 8007cb2:	4798      	blx	r3
 8007cb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007cb6:	e091      	b.n	8007ddc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007cb8:	6839      	ldr	r1, [r7, #0]
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f000 fa97 	bl	80081ee <USBD_CtlError>
            err++;
 8007cc0:	7afb      	ldrb	r3, [r7, #11]
 8007cc2:	3301      	adds	r3, #1
 8007cc4:	72fb      	strb	r3, [r7, #11]
          break;
 8007cc6:	e089      	b.n	8007ddc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007cce:	689b      	ldr	r3, [r3, #8]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d00b      	beq.n	8007cec <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007cda:	689b      	ldr	r3, [r3, #8]
 8007cdc:	687a      	ldr	r2, [r7, #4]
 8007cde:	7c12      	ldrb	r2, [r2, #16]
 8007ce0:	f107 0108 	add.w	r1, r7, #8
 8007ce4:	4610      	mov	r0, r2
 8007ce6:	4798      	blx	r3
 8007ce8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007cea:	e077      	b.n	8007ddc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007cec:	6839      	ldr	r1, [r7, #0]
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f000 fa7d 	bl	80081ee <USBD_CtlError>
            err++;
 8007cf4:	7afb      	ldrb	r3, [r7, #11]
 8007cf6:	3301      	adds	r3, #1
 8007cf8:	72fb      	strb	r3, [r7, #11]
          break;
 8007cfa:	e06f      	b.n	8007ddc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007d02:	68db      	ldr	r3, [r3, #12]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d00b      	beq.n	8007d20 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007d0e:	68db      	ldr	r3, [r3, #12]
 8007d10:	687a      	ldr	r2, [r7, #4]
 8007d12:	7c12      	ldrb	r2, [r2, #16]
 8007d14:	f107 0108 	add.w	r1, r7, #8
 8007d18:	4610      	mov	r0, r2
 8007d1a:	4798      	blx	r3
 8007d1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d1e:	e05d      	b.n	8007ddc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d20:	6839      	ldr	r1, [r7, #0]
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 fa63 	bl	80081ee <USBD_CtlError>
            err++;
 8007d28:	7afb      	ldrb	r3, [r7, #11]
 8007d2a:	3301      	adds	r3, #1
 8007d2c:	72fb      	strb	r3, [r7, #11]
          break;
 8007d2e:	e055      	b.n	8007ddc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007d36:	691b      	ldr	r3, [r3, #16]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d00b      	beq.n	8007d54 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007d42:	691b      	ldr	r3, [r3, #16]
 8007d44:	687a      	ldr	r2, [r7, #4]
 8007d46:	7c12      	ldrb	r2, [r2, #16]
 8007d48:	f107 0108 	add.w	r1, r7, #8
 8007d4c:	4610      	mov	r0, r2
 8007d4e:	4798      	blx	r3
 8007d50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d52:	e043      	b.n	8007ddc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d54:	6839      	ldr	r1, [r7, #0]
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f000 fa49 	bl	80081ee <USBD_CtlError>
            err++;
 8007d5c:	7afb      	ldrb	r3, [r7, #11]
 8007d5e:	3301      	adds	r3, #1
 8007d60:	72fb      	strb	r3, [r7, #11]
          break;
 8007d62:	e03b      	b.n	8007ddc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007d6a:	695b      	ldr	r3, [r3, #20]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d00b      	beq.n	8007d88 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007d76:	695b      	ldr	r3, [r3, #20]
 8007d78:	687a      	ldr	r2, [r7, #4]
 8007d7a:	7c12      	ldrb	r2, [r2, #16]
 8007d7c:	f107 0108 	add.w	r1, r7, #8
 8007d80:	4610      	mov	r0, r2
 8007d82:	4798      	blx	r3
 8007d84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d86:	e029      	b.n	8007ddc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d88:	6839      	ldr	r1, [r7, #0]
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f000 fa2f 	bl	80081ee <USBD_CtlError>
            err++;
 8007d90:	7afb      	ldrb	r3, [r7, #11]
 8007d92:	3301      	adds	r3, #1
 8007d94:	72fb      	strb	r3, [r7, #11]
          break;
 8007d96:	e021      	b.n	8007ddc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007d9e:	699b      	ldr	r3, [r3, #24]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d00b      	beq.n	8007dbc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007daa:	699b      	ldr	r3, [r3, #24]
 8007dac:	687a      	ldr	r2, [r7, #4]
 8007dae:	7c12      	ldrb	r2, [r2, #16]
 8007db0:	f107 0108 	add.w	r1, r7, #8
 8007db4:	4610      	mov	r0, r2
 8007db6:	4798      	blx	r3
 8007db8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007dba:	e00f      	b.n	8007ddc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007dbc:	6839      	ldr	r1, [r7, #0]
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f000 fa15 	bl	80081ee <USBD_CtlError>
            err++;
 8007dc4:	7afb      	ldrb	r3, [r7, #11]
 8007dc6:	3301      	adds	r3, #1
 8007dc8:	72fb      	strb	r3, [r7, #11]
          break;
 8007dca:	e007      	b.n	8007ddc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007dcc:	6839      	ldr	r1, [r7, #0]
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f000 fa0d 	bl	80081ee <USBD_CtlError>
          err++;
 8007dd4:	7afb      	ldrb	r3, [r7, #11]
 8007dd6:	3301      	adds	r3, #1
 8007dd8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007dda:	e038      	b.n	8007e4e <USBD_GetDescriptor+0x286>
 8007ddc:	e037      	b.n	8007e4e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	7c1b      	ldrb	r3, [r3, #16]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d109      	bne.n	8007dfa <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dee:	f107 0208 	add.w	r2, r7, #8
 8007df2:	4610      	mov	r0, r2
 8007df4:	4798      	blx	r3
 8007df6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007df8:	e029      	b.n	8007e4e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007dfa:	6839      	ldr	r1, [r7, #0]
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f000 f9f6 	bl	80081ee <USBD_CtlError>
        err++;
 8007e02:	7afb      	ldrb	r3, [r7, #11]
 8007e04:	3301      	adds	r3, #1
 8007e06:	72fb      	strb	r3, [r7, #11]
      break;
 8007e08:	e021      	b.n	8007e4e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	7c1b      	ldrb	r3, [r3, #16]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d10d      	bne.n	8007e2e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e1a:	f107 0208 	add.w	r2, r7, #8
 8007e1e:	4610      	mov	r0, r2
 8007e20:	4798      	blx	r3
 8007e22:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	3301      	adds	r3, #1
 8007e28:	2207      	movs	r2, #7
 8007e2a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007e2c:	e00f      	b.n	8007e4e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007e2e:	6839      	ldr	r1, [r7, #0]
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f000 f9dc 	bl	80081ee <USBD_CtlError>
        err++;
 8007e36:	7afb      	ldrb	r3, [r7, #11]
 8007e38:	3301      	adds	r3, #1
 8007e3a:	72fb      	strb	r3, [r7, #11]
      break;
 8007e3c:	e007      	b.n	8007e4e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007e3e:	6839      	ldr	r1, [r7, #0]
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f000 f9d4 	bl	80081ee <USBD_CtlError>
      err++;
 8007e46:	7afb      	ldrb	r3, [r7, #11]
 8007e48:	3301      	adds	r3, #1
 8007e4a:	72fb      	strb	r3, [r7, #11]
      break;
 8007e4c:	bf00      	nop
  }

  if (err != 0U)
 8007e4e:	7afb      	ldrb	r3, [r7, #11]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d11c      	bne.n	8007e8e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007e54:	893b      	ldrh	r3, [r7, #8]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d011      	beq.n	8007e7e <USBD_GetDescriptor+0x2b6>
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	88db      	ldrh	r3, [r3, #6]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d00d      	beq.n	8007e7e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	88da      	ldrh	r2, [r3, #6]
 8007e66:	893b      	ldrh	r3, [r7, #8]
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	bf28      	it	cs
 8007e6c:	4613      	movcs	r3, r2
 8007e6e:	b29b      	uxth	r3, r3
 8007e70:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007e72:	893b      	ldrh	r3, [r7, #8]
 8007e74:	461a      	mov	r2, r3
 8007e76:	68f9      	ldr	r1, [r7, #12]
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f000 fa22 	bl	80082c2 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	88db      	ldrh	r3, [r3, #6]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d104      	bne.n	8007e90 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f000 fa79 	bl	800837e <USBD_CtlSendStatus>
 8007e8c:	e000      	b.n	8007e90 <USBD_GetDescriptor+0x2c8>
    return;
 8007e8e:	bf00      	nop
    }
  }
}
 8007e90:	3710      	adds	r7, #16
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd80      	pop	{r7, pc}
 8007e96:	bf00      	nop

08007e98 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b084      	sub	sp, #16
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
 8007ea0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	889b      	ldrh	r3, [r3, #4]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d130      	bne.n	8007f0c <USBD_SetAddress+0x74>
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	88db      	ldrh	r3, [r3, #6]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d12c      	bne.n	8007f0c <USBD_SetAddress+0x74>
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	885b      	ldrh	r3, [r3, #2]
 8007eb6:	2b7f      	cmp	r3, #127	; 0x7f
 8007eb8:	d828      	bhi.n	8007f0c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	885b      	ldrh	r3, [r3, #2]
 8007ebe:	b2db      	uxtb	r3, r3
 8007ec0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ec4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ecc:	2b03      	cmp	r3, #3
 8007ece:	d104      	bne.n	8007eda <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007ed0:	6839      	ldr	r1, [r7, #0]
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f000 f98b 	bl	80081ee <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ed8:	e01d      	b.n	8007f16 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	7bfa      	ldrb	r2, [r7, #15]
 8007ede:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007ee2:	7bfb      	ldrb	r3, [r7, #15]
 8007ee4:	4619      	mov	r1, r3
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f000 fe77 	bl	8008bda <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f000 fa46 	bl	800837e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007ef2:	7bfb      	ldrb	r3, [r7, #15]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d004      	beq.n	8007f02 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2202      	movs	r2, #2
 8007efc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f00:	e009      	b.n	8007f16 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2201      	movs	r2, #1
 8007f06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f0a:	e004      	b.n	8007f16 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007f0c:	6839      	ldr	r1, [r7, #0]
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f000 f96d 	bl	80081ee <USBD_CtlError>
  }
}
 8007f14:	bf00      	nop
 8007f16:	bf00      	nop
 8007f18:	3710      	adds	r7, #16
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}
	...

08007f20 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b082      	sub	sp, #8
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
 8007f28:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	885b      	ldrh	r3, [r3, #2]
 8007f2e:	b2da      	uxtb	r2, r3
 8007f30:	4b41      	ldr	r3, [pc, #260]	; (8008038 <USBD_SetConfig+0x118>)
 8007f32:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007f34:	4b40      	ldr	r3, [pc, #256]	; (8008038 <USBD_SetConfig+0x118>)
 8007f36:	781b      	ldrb	r3, [r3, #0]
 8007f38:	2b01      	cmp	r3, #1
 8007f3a:	d904      	bls.n	8007f46 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007f3c:	6839      	ldr	r1, [r7, #0]
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	f000 f955 	bl	80081ee <USBD_CtlError>
 8007f44:	e075      	b.n	8008032 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f4c:	2b02      	cmp	r3, #2
 8007f4e:	d002      	beq.n	8007f56 <USBD_SetConfig+0x36>
 8007f50:	2b03      	cmp	r3, #3
 8007f52:	d023      	beq.n	8007f9c <USBD_SetConfig+0x7c>
 8007f54:	e062      	b.n	800801c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007f56:	4b38      	ldr	r3, [pc, #224]	; (8008038 <USBD_SetConfig+0x118>)
 8007f58:	781b      	ldrb	r3, [r3, #0]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d01a      	beq.n	8007f94 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007f5e:	4b36      	ldr	r3, [pc, #216]	; (8008038 <USBD_SetConfig+0x118>)
 8007f60:	781b      	ldrb	r3, [r3, #0]
 8007f62:	461a      	mov	r2, r3
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2203      	movs	r2, #3
 8007f6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007f70:	4b31      	ldr	r3, [pc, #196]	; (8008038 <USBD_SetConfig+0x118>)
 8007f72:	781b      	ldrb	r3, [r3, #0]
 8007f74:	4619      	mov	r1, r3
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f7ff f9ae 	bl	80072d8 <USBD_SetClassConfig>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	2b02      	cmp	r3, #2
 8007f80:	d104      	bne.n	8007f8c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007f82:	6839      	ldr	r1, [r7, #0]
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f000 f932 	bl	80081ee <USBD_CtlError>
            return;
 8007f8a:	e052      	b.n	8008032 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f000 f9f6 	bl	800837e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007f92:	e04e      	b.n	8008032 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f000 f9f2 	bl	800837e <USBD_CtlSendStatus>
        break;
 8007f9a:	e04a      	b.n	8008032 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007f9c:	4b26      	ldr	r3, [pc, #152]	; (8008038 <USBD_SetConfig+0x118>)
 8007f9e:	781b      	ldrb	r3, [r3, #0]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d112      	bne.n	8007fca <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2202      	movs	r2, #2
 8007fa8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007fac:	4b22      	ldr	r3, [pc, #136]	; (8008038 <USBD_SetConfig+0x118>)
 8007fae:	781b      	ldrb	r3, [r3, #0]
 8007fb0:	461a      	mov	r2, r3
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007fb6:	4b20      	ldr	r3, [pc, #128]	; (8008038 <USBD_SetConfig+0x118>)
 8007fb8:	781b      	ldrb	r3, [r3, #0]
 8007fba:	4619      	mov	r1, r3
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f7ff f9aa 	bl	8007316 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f000 f9db 	bl	800837e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007fc8:	e033      	b.n	8008032 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007fca:	4b1b      	ldr	r3, [pc, #108]	; (8008038 <USBD_SetConfig+0x118>)
 8007fcc:	781b      	ldrb	r3, [r3, #0]
 8007fce:	461a      	mov	r2, r3
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	685b      	ldr	r3, [r3, #4]
 8007fd4:	429a      	cmp	r2, r3
 8007fd6:	d01d      	beq.n	8008014 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	685b      	ldr	r3, [r3, #4]
 8007fdc:	b2db      	uxtb	r3, r3
 8007fde:	4619      	mov	r1, r3
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f7ff f998 	bl	8007316 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007fe6:	4b14      	ldr	r3, [pc, #80]	; (8008038 <USBD_SetConfig+0x118>)
 8007fe8:	781b      	ldrb	r3, [r3, #0]
 8007fea:	461a      	mov	r2, r3
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007ff0:	4b11      	ldr	r3, [pc, #68]	; (8008038 <USBD_SetConfig+0x118>)
 8007ff2:	781b      	ldrb	r3, [r3, #0]
 8007ff4:	4619      	mov	r1, r3
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f7ff f96e 	bl	80072d8 <USBD_SetClassConfig>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	2b02      	cmp	r3, #2
 8008000:	d104      	bne.n	800800c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008002:	6839      	ldr	r1, [r7, #0]
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f000 f8f2 	bl	80081ee <USBD_CtlError>
            return;
 800800a:	e012      	b.n	8008032 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f000 f9b6 	bl	800837e <USBD_CtlSendStatus>
        break;
 8008012:	e00e      	b.n	8008032 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f000 f9b2 	bl	800837e <USBD_CtlSendStatus>
        break;
 800801a:	e00a      	b.n	8008032 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800801c:	6839      	ldr	r1, [r7, #0]
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f000 f8e5 	bl	80081ee <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008024:	4b04      	ldr	r3, [pc, #16]	; (8008038 <USBD_SetConfig+0x118>)
 8008026:	781b      	ldrb	r3, [r3, #0]
 8008028:	4619      	mov	r1, r3
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f7ff f973 	bl	8007316 <USBD_ClrClassConfig>
        break;
 8008030:	bf00      	nop
    }
  }
}
 8008032:	3708      	adds	r7, #8
 8008034:	46bd      	mov	sp, r7
 8008036:	bd80      	pop	{r7, pc}
 8008038:	20000384 	.word	0x20000384

0800803c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b082      	sub	sp, #8
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
 8008044:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	88db      	ldrh	r3, [r3, #6]
 800804a:	2b01      	cmp	r3, #1
 800804c:	d004      	beq.n	8008058 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800804e:	6839      	ldr	r1, [r7, #0]
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f000 f8cc 	bl	80081ee <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008056:	e022      	b.n	800809e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800805e:	2b02      	cmp	r3, #2
 8008060:	dc02      	bgt.n	8008068 <USBD_GetConfig+0x2c>
 8008062:	2b00      	cmp	r3, #0
 8008064:	dc03      	bgt.n	800806e <USBD_GetConfig+0x32>
 8008066:	e015      	b.n	8008094 <USBD_GetConfig+0x58>
 8008068:	2b03      	cmp	r3, #3
 800806a:	d00b      	beq.n	8008084 <USBD_GetConfig+0x48>
 800806c:	e012      	b.n	8008094 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2200      	movs	r2, #0
 8008072:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	3308      	adds	r3, #8
 8008078:	2201      	movs	r2, #1
 800807a:	4619      	mov	r1, r3
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f000 f920 	bl	80082c2 <USBD_CtlSendData>
        break;
 8008082:	e00c      	b.n	800809e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	3304      	adds	r3, #4
 8008088:	2201      	movs	r2, #1
 800808a:	4619      	mov	r1, r3
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f000 f918 	bl	80082c2 <USBD_CtlSendData>
        break;
 8008092:	e004      	b.n	800809e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008094:	6839      	ldr	r1, [r7, #0]
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f000 f8a9 	bl	80081ee <USBD_CtlError>
        break;
 800809c:	bf00      	nop
}
 800809e:	bf00      	nop
 80080a0:	3708      	adds	r7, #8
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}

080080a6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080a6:	b580      	push	{r7, lr}
 80080a8:	b082      	sub	sp, #8
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	6078      	str	r0, [r7, #4]
 80080ae:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080b6:	3b01      	subs	r3, #1
 80080b8:	2b02      	cmp	r3, #2
 80080ba:	d81e      	bhi.n	80080fa <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	88db      	ldrh	r3, [r3, #6]
 80080c0:	2b02      	cmp	r3, #2
 80080c2:	d004      	beq.n	80080ce <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80080c4:	6839      	ldr	r1, [r7, #0]
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f000 f891 	bl	80081ee <USBD_CtlError>
        break;
 80080cc:	e01a      	b.n	8008104 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2201      	movs	r2, #1
 80080d2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d005      	beq.n	80080ea <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	68db      	ldr	r3, [r3, #12]
 80080e2:	f043 0202 	orr.w	r2, r3, #2
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	330c      	adds	r3, #12
 80080ee:	2202      	movs	r2, #2
 80080f0:	4619      	mov	r1, r3
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f000 f8e5 	bl	80082c2 <USBD_CtlSendData>
      break;
 80080f8:	e004      	b.n	8008104 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80080fa:	6839      	ldr	r1, [r7, #0]
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f000 f876 	bl	80081ee <USBD_CtlError>
      break;
 8008102:	bf00      	nop
  }
}
 8008104:	bf00      	nop
 8008106:	3708      	adds	r7, #8
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}

0800810c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b082      	sub	sp, #8
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
 8008114:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	885b      	ldrh	r3, [r3, #2]
 800811a:	2b01      	cmp	r3, #1
 800811c:	d106      	bne.n	800812c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2201      	movs	r2, #1
 8008122:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f000 f929 	bl	800837e <USBD_CtlSendStatus>
  }
}
 800812c:	bf00      	nop
 800812e:	3708      	adds	r7, #8
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}

08008134 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b082      	sub	sp, #8
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
 800813c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008144:	3b01      	subs	r3, #1
 8008146:	2b02      	cmp	r3, #2
 8008148:	d80b      	bhi.n	8008162 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	885b      	ldrh	r3, [r3, #2]
 800814e:	2b01      	cmp	r3, #1
 8008150:	d10c      	bne.n	800816c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2200      	movs	r2, #0
 8008156:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f000 f90f 	bl	800837e <USBD_CtlSendStatus>
      }
      break;
 8008160:	e004      	b.n	800816c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008162:	6839      	ldr	r1, [r7, #0]
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f000 f842 	bl	80081ee <USBD_CtlError>
      break;
 800816a:	e000      	b.n	800816e <USBD_ClrFeature+0x3a>
      break;
 800816c:	bf00      	nop
  }
}
 800816e:	bf00      	nop
 8008170:	3708      	adds	r7, #8
 8008172:	46bd      	mov	sp, r7
 8008174:	bd80      	pop	{r7, pc}

08008176 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008176:	b480      	push	{r7}
 8008178:	b083      	sub	sp, #12
 800817a:	af00      	add	r7, sp, #0
 800817c:	6078      	str	r0, [r7, #4]
 800817e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	781a      	ldrb	r2, [r3, #0]
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	785a      	ldrb	r2, [r3, #1]
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	3302      	adds	r3, #2
 8008194:	781b      	ldrb	r3, [r3, #0]
 8008196:	b29a      	uxth	r2, r3
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	3303      	adds	r3, #3
 800819c:	781b      	ldrb	r3, [r3, #0]
 800819e:	b29b      	uxth	r3, r3
 80081a0:	021b      	lsls	r3, r3, #8
 80081a2:	b29b      	uxth	r3, r3
 80081a4:	4413      	add	r3, r2
 80081a6:	b29a      	uxth	r2, r3
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	3304      	adds	r3, #4
 80081b0:	781b      	ldrb	r3, [r3, #0]
 80081b2:	b29a      	uxth	r2, r3
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	3305      	adds	r3, #5
 80081b8:	781b      	ldrb	r3, [r3, #0]
 80081ba:	b29b      	uxth	r3, r3
 80081bc:	021b      	lsls	r3, r3, #8
 80081be:	b29b      	uxth	r3, r3
 80081c0:	4413      	add	r3, r2
 80081c2:	b29a      	uxth	r2, r3
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	3306      	adds	r3, #6
 80081cc:	781b      	ldrb	r3, [r3, #0]
 80081ce:	b29a      	uxth	r2, r3
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	3307      	adds	r3, #7
 80081d4:	781b      	ldrb	r3, [r3, #0]
 80081d6:	b29b      	uxth	r3, r3
 80081d8:	021b      	lsls	r3, r3, #8
 80081da:	b29b      	uxth	r3, r3
 80081dc:	4413      	add	r3, r2
 80081de:	b29a      	uxth	r2, r3
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	80da      	strh	r2, [r3, #6]

}
 80081e4:	bf00      	nop
 80081e6:	370c      	adds	r7, #12
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bc80      	pop	{r7}
 80081ec:	4770      	bx	lr

080081ee <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80081ee:	b580      	push	{r7, lr}
 80081f0:	b082      	sub	sp, #8
 80081f2:	af00      	add	r7, sp, #0
 80081f4:	6078      	str	r0, [r7, #4]
 80081f6:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80081f8:	2180      	movs	r1, #128	; 0x80
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	f000 fc84 	bl	8008b08 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008200:	2100      	movs	r1, #0
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f000 fc80 	bl	8008b08 <USBD_LL_StallEP>
}
 8008208:	bf00      	nop
 800820a:	3708      	adds	r7, #8
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}

08008210 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b086      	sub	sp, #24
 8008214:	af00      	add	r7, sp, #0
 8008216:	60f8      	str	r0, [r7, #12]
 8008218:	60b9      	str	r1, [r7, #8]
 800821a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800821c:	2300      	movs	r3, #0
 800821e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d032      	beq.n	800828c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008226:	68f8      	ldr	r0, [r7, #12]
 8008228:	f000 f834 	bl	8008294 <USBD_GetLen>
 800822c:	4603      	mov	r3, r0
 800822e:	3301      	adds	r3, #1
 8008230:	b29b      	uxth	r3, r3
 8008232:	005b      	lsls	r3, r3, #1
 8008234:	b29a      	uxth	r2, r3
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800823a:	7dfb      	ldrb	r3, [r7, #23]
 800823c:	1c5a      	adds	r2, r3, #1
 800823e:	75fa      	strb	r2, [r7, #23]
 8008240:	461a      	mov	r2, r3
 8008242:	68bb      	ldr	r3, [r7, #8]
 8008244:	4413      	add	r3, r2
 8008246:	687a      	ldr	r2, [r7, #4]
 8008248:	7812      	ldrb	r2, [r2, #0]
 800824a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800824c:	7dfb      	ldrb	r3, [r7, #23]
 800824e:	1c5a      	adds	r2, r3, #1
 8008250:	75fa      	strb	r2, [r7, #23]
 8008252:	461a      	mov	r2, r3
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	4413      	add	r3, r2
 8008258:	2203      	movs	r2, #3
 800825a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800825c:	e012      	b.n	8008284 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	1c5a      	adds	r2, r3, #1
 8008262:	60fa      	str	r2, [r7, #12]
 8008264:	7dfa      	ldrb	r2, [r7, #23]
 8008266:	1c51      	adds	r1, r2, #1
 8008268:	75f9      	strb	r1, [r7, #23]
 800826a:	4611      	mov	r1, r2
 800826c:	68ba      	ldr	r2, [r7, #8]
 800826e:	440a      	add	r2, r1
 8008270:	781b      	ldrb	r3, [r3, #0]
 8008272:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008274:	7dfb      	ldrb	r3, [r7, #23]
 8008276:	1c5a      	adds	r2, r3, #1
 8008278:	75fa      	strb	r2, [r7, #23]
 800827a:	461a      	mov	r2, r3
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	4413      	add	r3, r2
 8008280:	2200      	movs	r2, #0
 8008282:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	781b      	ldrb	r3, [r3, #0]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d1e8      	bne.n	800825e <USBD_GetString+0x4e>
    }
  }
}
 800828c:	bf00      	nop
 800828e:	3718      	adds	r7, #24
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}

08008294 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008294:	b480      	push	{r7}
 8008296:	b085      	sub	sp, #20
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800829c:	2300      	movs	r3, #0
 800829e:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80082a0:	e005      	b.n	80082ae <USBD_GetLen+0x1a>
  {
    len++;
 80082a2:	7bfb      	ldrb	r3, [r7, #15]
 80082a4:	3301      	adds	r3, #1
 80082a6:	73fb      	strb	r3, [r7, #15]
    buf++;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	3301      	adds	r3, #1
 80082ac:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	781b      	ldrb	r3, [r3, #0]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d1f5      	bne.n	80082a2 <USBD_GetLen+0xe>
  }

  return len;
 80082b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80082b8:	4618      	mov	r0, r3
 80082ba:	3714      	adds	r7, #20
 80082bc:	46bd      	mov	sp, r7
 80082be:	bc80      	pop	{r7}
 80082c0:	4770      	bx	lr

080082c2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80082c2:	b580      	push	{r7, lr}
 80082c4:	b084      	sub	sp, #16
 80082c6:	af00      	add	r7, sp, #0
 80082c8:	60f8      	str	r0, [r7, #12]
 80082ca:	60b9      	str	r1, [r7, #8]
 80082cc:	4613      	mov	r3, r2
 80082ce:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	2202      	movs	r2, #2
 80082d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80082d8:	88fa      	ldrh	r2, [r7, #6]
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80082de:	88fa      	ldrh	r2, [r7, #6]
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80082e4:	88fb      	ldrh	r3, [r7, #6]
 80082e6:	68ba      	ldr	r2, [r7, #8]
 80082e8:	2100      	movs	r1, #0
 80082ea:	68f8      	ldr	r0, [r7, #12]
 80082ec:	f000 fc94 	bl	8008c18 <USBD_LL_Transmit>

  return USBD_OK;
 80082f0:	2300      	movs	r3, #0
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3710      	adds	r7, #16
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}

080082fa <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80082fa:	b580      	push	{r7, lr}
 80082fc:	b084      	sub	sp, #16
 80082fe:	af00      	add	r7, sp, #0
 8008300:	60f8      	str	r0, [r7, #12]
 8008302:	60b9      	str	r1, [r7, #8]
 8008304:	4613      	mov	r3, r2
 8008306:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008308:	88fb      	ldrh	r3, [r7, #6]
 800830a:	68ba      	ldr	r2, [r7, #8]
 800830c:	2100      	movs	r1, #0
 800830e:	68f8      	ldr	r0, [r7, #12]
 8008310:	f000 fc82 	bl	8008c18 <USBD_LL_Transmit>

  return USBD_OK;
 8008314:	2300      	movs	r3, #0
}
 8008316:	4618      	mov	r0, r3
 8008318:	3710      	adds	r7, #16
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}

0800831e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800831e:	b580      	push	{r7, lr}
 8008320:	b084      	sub	sp, #16
 8008322:	af00      	add	r7, sp, #0
 8008324:	60f8      	str	r0, [r7, #12]
 8008326:	60b9      	str	r1, [r7, #8]
 8008328:	4613      	mov	r3, r2
 800832a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	2203      	movs	r2, #3
 8008330:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008334:	88fa      	ldrh	r2, [r7, #6]
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800833c:	88fa      	ldrh	r2, [r7, #6]
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008344:	88fb      	ldrh	r3, [r7, #6]
 8008346:	68ba      	ldr	r2, [r7, #8]
 8008348:	2100      	movs	r1, #0
 800834a:	68f8      	ldr	r0, [r7, #12]
 800834c:	f000 fc87 	bl	8008c5e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008350:	2300      	movs	r3, #0
}
 8008352:	4618      	mov	r0, r3
 8008354:	3710      	adds	r7, #16
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}

0800835a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800835a:	b580      	push	{r7, lr}
 800835c:	b084      	sub	sp, #16
 800835e:	af00      	add	r7, sp, #0
 8008360:	60f8      	str	r0, [r7, #12]
 8008362:	60b9      	str	r1, [r7, #8]
 8008364:	4613      	mov	r3, r2
 8008366:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008368:	88fb      	ldrh	r3, [r7, #6]
 800836a:	68ba      	ldr	r2, [r7, #8]
 800836c:	2100      	movs	r1, #0
 800836e:	68f8      	ldr	r0, [r7, #12]
 8008370:	f000 fc75 	bl	8008c5e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008374:	2300      	movs	r3, #0
}
 8008376:	4618      	mov	r0, r3
 8008378:	3710      	adds	r7, #16
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}

0800837e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800837e:	b580      	push	{r7, lr}
 8008380:	b082      	sub	sp, #8
 8008382:	af00      	add	r7, sp, #0
 8008384:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2204      	movs	r2, #4
 800838a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800838e:	2300      	movs	r3, #0
 8008390:	2200      	movs	r2, #0
 8008392:	2100      	movs	r1, #0
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f000 fc3f 	bl	8008c18 <USBD_LL_Transmit>

  return USBD_OK;
 800839a:	2300      	movs	r3, #0
}
 800839c:	4618      	mov	r0, r3
 800839e:	3708      	adds	r7, #8
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}

080083a4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b082      	sub	sp, #8
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2205      	movs	r2, #5
 80083b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80083b4:	2300      	movs	r3, #0
 80083b6:	2200      	movs	r2, #0
 80083b8:	2100      	movs	r1, #0
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f000 fc4f 	bl	8008c5e <USBD_LL_PrepareReceive>

  return USBD_OK;
 80083c0:	2300      	movs	r3, #0
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	3708      	adds	r7, #8
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}
	...

080083cc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80083d0:	2200      	movs	r2, #0
 80083d2:	4912      	ldr	r1, [pc, #72]	; (800841c <MX_USB_DEVICE_Init+0x50>)
 80083d4:	4812      	ldr	r0, [pc, #72]	; (8008420 <MX_USB_DEVICE_Init+0x54>)
 80083d6:	f7fe ff25 	bl	8007224 <USBD_Init>
 80083da:	4603      	mov	r3, r0
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d001      	beq.n	80083e4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80083e0:	f7f9 f9cc 	bl	800177c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80083e4:	490f      	ldr	r1, [pc, #60]	; (8008424 <MX_USB_DEVICE_Init+0x58>)
 80083e6:	480e      	ldr	r0, [pc, #56]	; (8008420 <MX_USB_DEVICE_Init+0x54>)
 80083e8:	f7fe ff47 	bl	800727a <USBD_RegisterClass>
 80083ec:	4603      	mov	r3, r0
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d001      	beq.n	80083f6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80083f2:	f7f9 f9c3 	bl	800177c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80083f6:	490c      	ldr	r1, [pc, #48]	; (8008428 <MX_USB_DEVICE_Init+0x5c>)
 80083f8:	4809      	ldr	r0, [pc, #36]	; (8008420 <MX_USB_DEVICE_Init+0x54>)
 80083fa:	f7fe fea7 	bl	800714c <USBD_CDC_RegisterInterface>
 80083fe:	4603      	mov	r3, r0
 8008400:	2b00      	cmp	r3, #0
 8008402:	d001      	beq.n	8008408 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008404:	f7f9 f9ba 	bl	800177c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008408:	4805      	ldr	r0, [pc, #20]	; (8008420 <MX_USB_DEVICE_Init+0x54>)
 800840a:	f7fe ff4f 	bl	80072ac <USBD_Start>
 800840e:	4603      	mov	r3, r0
 8008410:	2b00      	cmp	r3, #0
 8008412:	d001      	beq.n	8008418 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008414:	f7f9 f9b2 	bl	800177c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008418:	bf00      	nop
 800841a:	bd80      	pop	{r7, pc}
 800841c:	20000198 	.word	0x20000198
 8008420:	20000388 	.word	0x20000388
 8008424:	20000084 	.word	0x20000084
 8008428:	20000188 	.word	0x20000188

0800842c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008430:	2200      	movs	r2, #0
 8008432:	4905      	ldr	r1, [pc, #20]	; (8008448 <CDC_Init_FS+0x1c>)
 8008434:	4805      	ldr	r0, [pc, #20]	; (800844c <CDC_Init_FS+0x20>)
 8008436:	f7fe fe9f 	bl	8007178 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800843a:	4905      	ldr	r1, [pc, #20]	; (8008450 <CDC_Init_FS+0x24>)
 800843c:	4803      	ldr	r0, [pc, #12]	; (800844c <CDC_Init_FS+0x20>)
 800843e:	f7fe feb4 	bl	80071aa <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008442:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008444:	4618      	mov	r0, r3
 8008446:	bd80      	pop	{r7, pc}
 8008448:	20000a4c 	.word	0x20000a4c
 800844c:	20000388 	.word	0x20000388
 8008450:	2000064c 	.word	0x2000064c

08008454 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008454:	b480      	push	{r7}
 8008456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008458:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800845a:	4618      	mov	r0, r3
 800845c:	46bd      	mov	sp, r7
 800845e:	bc80      	pop	{r7}
 8008460:	4770      	bx	lr
	...

08008464 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008464:	b480      	push	{r7}
 8008466:	b083      	sub	sp, #12
 8008468:	af00      	add	r7, sp, #0
 800846a:	4603      	mov	r3, r0
 800846c:	6039      	str	r1, [r7, #0]
 800846e:	71fb      	strb	r3, [r7, #7]
 8008470:	4613      	mov	r3, r2
 8008472:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008474:	79fb      	ldrb	r3, [r7, #7]
 8008476:	2b23      	cmp	r3, #35	; 0x23
 8008478:	d84a      	bhi.n	8008510 <CDC_Control_FS+0xac>
 800847a:	a201      	add	r2, pc, #4	; (adr r2, 8008480 <CDC_Control_FS+0x1c>)
 800847c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008480:	08008511 	.word	0x08008511
 8008484:	08008511 	.word	0x08008511
 8008488:	08008511 	.word	0x08008511
 800848c:	08008511 	.word	0x08008511
 8008490:	08008511 	.word	0x08008511
 8008494:	08008511 	.word	0x08008511
 8008498:	08008511 	.word	0x08008511
 800849c:	08008511 	.word	0x08008511
 80084a0:	08008511 	.word	0x08008511
 80084a4:	08008511 	.word	0x08008511
 80084a8:	08008511 	.word	0x08008511
 80084ac:	08008511 	.word	0x08008511
 80084b0:	08008511 	.word	0x08008511
 80084b4:	08008511 	.word	0x08008511
 80084b8:	08008511 	.word	0x08008511
 80084bc:	08008511 	.word	0x08008511
 80084c0:	08008511 	.word	0x08008511
 80084c4:	08008511 	.word	0x08008511
 80084c8:	08008511 	.word	0x08008511
 80084cc:	08008511 	.word	0x08008511
 80084d0:	08008511 	.word	0x08008511
 80084d4:	08008511 	.word	0x08008511
 80084d8:	08008511 	.word	0x08008511
 80084dc:	08008511 	.word	0x08008511
 80084e0:	08008511 	.word	0x08008511
 80084e4:	08008511 	.word	0x08008511
 80084e8:	08008511 	.word	0x08008511
 80084ec:	08008511 	.word	0x08008511
 80084f0:	08008511 	.word	0x08008511
 80084f4:	08008511 	.word	0x08008511
 80084f8:	08008511 	.word	0x08008511
 80084fc:	08008511 	.word	0x08008511
 8008500:	08008511 	.word	0x08008511
 8008504:	08008511 	.word	0x08008511
 8008508:	08008511 	.word	0x08008511
 800850c:	08008511 	.word	0x08008511
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008510:	bf00      	nop
  }

  return (USBD_OK);
 8008512:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008514:	4618      	mov	r0, r3
 8008516:	370c      	adds	r7, #12
 8008518:	46bd      	mov	sp, r7
 800851a:	bc80      	pop	{r7}
 800851c:	4770      	bx	lr
 800851e:	bf00      	nop

08008520 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b082      	sub	sp, #8
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
 8008528:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800852a:	6879      	ldr	r1, [r7, #4]
 800852c:	4805      	ldr	r0, [pc, #20]	; (8008544 <CDC_Receive_FS+0x24>)
 800852e:	f7fe fe3c 	bl	80071aa <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008532:	4804      	ldr	r0, [pc, #16]	; (8008544 <CDC_Receive_FS+0x24>)
 8008534:	f7fe fe4c 	bl	80071d0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008538:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800853a:	4618      	mov	r0, r3
 800853c:	3708      	adds	r7, #8
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}
 8008542:	bf00      	nop
 8008544:	20000388 	.word	0x20000388

08008548 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008548:	b480      	push	{r7}
 800854a:	b083      	sub	sp, #12
 800854c:	af00      	add	r7, sp, #0
 800854e:	4603      	mov	r3, r0
 8008550:	6039      	str	r1, [r7, #0]
 8008552:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	2212      	movs	r2, #18
 8008558:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800855a:	4b03      	ldr	r3, [pc, #12]	; (8008568 <USBD_FS_DeviceDescriptor+0x20>)
}
 800855c:	4618      	mov	r0, r3
 800855e:	370c      	adds	r7, #12
 8008560:	46bd      	mov	sp, r7
 8008562:	bc80      	pop	{r7}
 8008564:	4770      	bx	lr
 8008566:	bf00      	nop
 8008568:	200001b4 	.word	0x200001b4

0800856c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800856c:	b480      	push	{r7}
 800856e:	b083      	sub	sp, #12
 8008570:	af00      	add	r7, sp, #0
 8008572:	4603      	mov	r3, r0
 8008574:	6039      	str	r1, [r7, #0]
 8008576:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	2204      	movs	r2, #4
 800857c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800857e:	4b03      	ldr	r3, [pc, #12]	; (800858c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008580:	4618      	mov	r0, r3
 8008582:	370c      	adds	r7, #12
 8008584:	46bd      	mov	sp, r7
 8008586:	bc80      	pop	{r7}
 8008588:	4770      	bx	lr
 800858a:	bf00      	nop
 800858c:	200001c8 	.word	0x200001c8

08008590 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b082      	sub	sp, #8
 8008594:	af00      	add	r7, sp, #0
 8008596:	4603      	mov	r3, r0
 8008598:	6039      	str	r1, [r7, #0]
 800859a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800859c:	79fb      	ldrb	r3, [r7, #7]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d105      	bne.n	80085ae <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80085a2:	683a      	ldr	r2, [r7, #0]
 80085a4:	4907      	ldr	r1, [pc, #28]	; (80085c4 <USBD_FS_ProductStrDescriptor+0x34>)
 80085a6:	4808      	ldr	r0, [pc, #32]	; (80085c8 <USBD_FS_ProductStrDescriptor+0x38>)
 80085a8:	f7ff fe32 	bl	8008210 <USBD_GetString>
 80085ac:	e004      	b.n	80085b8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80085ae:	683a      	ldr	r2, [r7, #0]
 80085b0:	4904      	ldr	r1, [pc, #16]	; (80085c4 <USBD_FS_ProductStrDescriptor+0x34>)
 80085b2:	4805      	ldr	r0, [pc, #20]	; (80085c8 <USBD_FS_ProductStrDescriptor+0x38>)
 80085b4:	f7ff fe2c 	bl	8008210 <USBD_GetString>
  }
  return USBD_StrDesc;
 80085b8:	4b02      	ldr	r3, [pc, #8]	; (80085c4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	3708      	adds	r7, #8
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}
 80085c2:	bf00      	nop
 80085c4:	20000e4c 	.word	0x20000e4c
 80085c8:	08009014 	.word	0x08009014

080085cc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b082      	sub	sp, #8
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	4603      	mov	r3, r0
 80085d4:	6039      	str	r1, [r7, #0]
 80085d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80085d8:	683a      	ldr	r2, [r7, #0]
 80085da:	4904      	ldr	r1, [pc, #16]	; (80085ec <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80085dc:	4804      	ldr	r0, [pc, #16]	; (80085f0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80085de:	f7ff fe17 	bl	8008210 <USBD_GetString>
  return USBD_StrDesc;
 80085e2:	4b02      	ldr	r3, [pc, #8]	; (80085ec <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	3708      	adds	r7, #8
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}
 80085ec:	20000e4c 	.word	0x20000e4c
 80085f0:	0800902c 	.word	0x0800902c

080085f4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b082      	sub	sp, #8
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	4603      	mov	r3, r0
 80085fc:	6039      	str	r1, [r7, #0]
 80085fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	221a      	movs	r2, #26
 8008604:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008606:	f000 f843 	bl	8008690 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800860a:	4b02      	ldr	r3, [pc, #8]	; (8008614 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800860c:	4618      	mov	r0, r3
 800860e:	3708      	adds	r7, #8
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}
 8008614:	200001cc 	.word	0x200001cc

08008618 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b082      	sub	sp, #8
 800861c:	af00      	add	r7, sp, #0
 800861e:	4603      	mov	r3, r0
 8008620:	6039      	str	r1, [r7, #0]
 8008622:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008624:	79fb      	ldrb	r3, [r7, #7]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d105      	bne.n	8008636 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800862a:	683a      	ldr	r2, [r7, #0]
 800862c:	4907      	ldr	r1, [pc, #28]	; (800864c <USBD_FS_ConfigStrDescriptor+0x34>)
 800862e:	4808      	ldr	r0, [pc, #32]	; (8008650 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008630:	f7ff fdee 	bl	8008210 <USBD_GetString>
 8008634:	e004      	b.n	8008640 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008636:	683a      	ldr	r2, [r7, #0]
 8008638:	4904      	ldr	r1, [pc, #16]	; (800864c <USBD_FS_ConfigStrDescriptor+0x34>)
 800863a:	4805      	ldr	r0, [pc, #20]	; (8008650 <USBD_FS_ConfigStrDescriptor+0x38>)
 800863c:	f7ff fde8 	bl	8008210 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008640:	4b02      	ldr	r3, [pc, #8]	; (800864c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008642:	4618      	mov	r0, r3
 8008644:	3708      	adds	r7, #8
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}
 800864a:	bf00      	nop
 800864c:	20000e4c 	.word	0x20000e4c
 8008650:	08009040 	.word	0x08009040

08008654 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b082      	sub	sp, #8
 8008658:	af00      	add	r7, sp, #0
 800865a:	4603      	mov	r3, r0
 800865c:	6039      	str	r1, [r7, #0]
 800865e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008660:	79fb      	ldrb	r3, [r7, #7]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d105      	bne.n	8008672 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008666:	683a      	ldr	r2, [r7, #0]
 8008668:	4907      	ldr	r1, [pc, #28]	; (8008688 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800866a:	4808      	ldr	r0, [pc, #32]	; (800868c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800866c:	f7ff fdd0 	bl	8008210 <USBD_GetString>
 8008670:	e004      	b.n	800867c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008672:	683a      	ldr	r2, [r7, #0]
 8008674:	4904      	ldr	r1, [pc, #16]	; (8008688 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008676:	4805      	ldr	r0, [pc, #20]	; (800868c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008678:	f7ff fdca 	bl	8008210 <USBD_GetString>
  }
  return USBD_StrDesc;
 800867c:	4b02      	ldr	r3, [pc, #8]	; (8008688 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800867e:	4618      	mov	r0, r3
 8008680:	3708      	adds	r7, #8
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}
 8008686:	bf00      	nop
 8008688:	20000e4c 	.word	0x20000e4c
 800868c:	0800904c 	.word	0x0800904c

08008690 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b084      	sub	sp, #16
 8008694:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008696:	4b0f      	ldr	r3, [pc, #60]	; (80086d4 <Get_SerialNum+0x44>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800869c:	4b0e      	ldr	r3, [pc, #56]	; (80086d8 <Get_SerialNum+0x48>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80086a2:	4b0e      	ldr	r3, [pc, #56]	; (80086dc <Get_SerialNum+0x4c>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80086a8:	68fa      	ldr	r2, [r7, #12]
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	4413      	add	r3, r2
 80086ae:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d009      	beq.n	80086ca <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80086b6:	2208      	movs	r2, #8
 80086b8:	4909      	ldr	r1, [pc, #36]	; (80086e0 <Get_SerialNum+0x50>)
 80086ba:	68f8      	ldr	r0, [r7, #12]
 80086bc:	f000 f814 	bl	80086e8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80086c0:	2204      	movs	r2, #4
 80086c2:	4908      	ldr	r1, [pc, #32]	; (80086e4 <Get_SerialNum+0x54>)
 80086c4:	68b8      	ldr	r0, [r7, #8]
 80086c6:	f000 f80f 	bl	80086e8 <IntToUnicode>
  }
}
 80086ca:	bf00      	nop
 80086cc:	3710      	adds	r7, #16
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}
 80086d2:	bf00      	nop
 80086d4:	1ffff7e8 	.word	0x1ffff7e8
 80086d8:	1ffff7ec 	.word	0x1ffff7ec
 80086dc:	1ffff7f0 	.word	0x1ffff7f0
 80086e0:	200001ce 	.word	0x200001ce
 80086e4:	200001de 	.word	0x200001de

080086e8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80086e8:	b480      	push	{r7}
 80086ea:	b087      	sub	sp, #28
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	60f8      	str	r0, [r7, #12]
 80086f0:	60b9      	str	r1, [r7, #8]
 80086f2:	4613      	mov	r3, r2
 80086f4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80086f6:	2300      	movs	r3, #0
 80086f8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80086fa:	2300      	movs	r3, #0
 80086fc:	75fb      	strb	r3, [r7, #23]
 80086fe:	e027      	b.n	8008750 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	0f1b      	lsrs	r3, r3, #28
 8008704:	2b09      	cmp	r3, #9
 8008706:	d80b      	bhi.n	8008720 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	0f1b      	lsrs	r3, r3, #28
 800870c:	b2da      	uxtb	r2, r3
 800870e:	7dfb      	ldrb	r3, [r7, #23]
 8008710:	005b      	lsls	r3, r3, #1
 8008712:	4619      	mov	r1, r3
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	440b      	add	r3, r1
 8008718:	3230      	adds	r2, #48	; 0x30
 800871a:	b2d2      	uxtb	r2, r2
 800871c:	701a      	strb	r2, [r3, #0]
 800871e:	e00a      	b.n	8008736 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	0f1b      	lsrs	r3, r3, #28
 8008724:	b2da      	uxtb	r2, r3
 8008726:	7dfb      	ldrb	r3, [r7, #23]
 8008728:	005b      	lsls	r3, r3, #1
 800872a:	4619      	mov	r1, r3
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	440b      	add	r3, r1
 8008730:	3237      	adds	r2, #55	; 0x37
 8008732:	b2d2      	uxtb	r2, r2
 8008734:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	011b      	lsls	r3, r3, #4
 800873a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800873c:	7dfb      	ldrb	r3, [r7, #23]
 800873e:	005b      	lsls	r3, r3, #1
 8008740:	3301      	adds	r3, #1
 8008742:	68ba      	ldr	r2, [r7, #8]
 8008744:	4413      	add	r3, r2
 8008746:	2200      	movs	r2, #0
 8008748:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800874a:	7dfb      	ldrb	r3, [r7, #23]
 800874c:	3301      	adds	r3, #1
 800874e:	75fb      	strb	r3, [r7, #23]
 8008750:	7dfa      	ldrb	r2, [r7, #23]
 8008752:	79fb      	ldrb	r3, [r7, #7]
 8008754:	429a      	cmp	r2, r3
 8008756:	d3d3      	bcc.n	8008700 <IntToUnicode+0x18>
  }
}
 8008758:	bf00      	nop
 800875a:	bf00      	nop
 800875c:	371c      	adds	r7, #28
 800875e:	46bd      	mov	sp, r7
 8008760:	bc80      	pop	{r7}
 8008762:	4770      	bx	lr

08008764 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b088      	sub	sp, #32
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800876c:	f107 0310 	add.w	r3, r7, #16
 8008770:	2200      	movs	r2, #0
 8008772:	601a      	str	r2, [r3, #0]
 8008774:	605a      	str	r2, [r3, #4]
 8008776:	609a      	str	r2, [r3, #8]
 8008778:	60da      	str	r2, [r3, #12]
  if(pcdHandle->Instance==USB_OTG_FS)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008782:	d12c      	bne.n	80087de <HAL_PCD_MspInit+0x7a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008784:	4b18      	ldr	r3, [pc, #96]	; (80087e8 <HAL_PCD_MspInit+0x84>)
 8008786:	699b      	ldr	r3, [r3, #24]
 8008788:	4a17      	ldr	r2, [pc, #92]	; (80087e8 <HAL_PCD_MspInit+0x84>)
 800878a:	f043 0304 	orr.w	r3, r3, #4
 800878e:	6193      	str	r3, [r2, #24]
 8008790:	4b15      	ldr	r3, [pc, #84]	; (80087e8 <HAL_PCD_MspInit+0x84>)
 8008792:	699b      	ldr	r3, [r3, #24]
 8008794:	f003 0304 	and.w	r3, r3, #4
 8008798:	60fb      	str	r3, [r7, #12]
 800879a:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800879c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80087a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80087a2:	2300      	movs	r3, #0
 80087a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087a6:	2300      	movs	r3, #0
 80087a8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80087aa:	f107 0310 	add.w	r3, r7, #16
 80087ae:	4619      	mov	r1, r3
 80087b0:	480e      	ldr	r0, [pc, #56]	; (80087ec <HAL_PCD_MspInit+0x88>)
 80087b2:	f7fa f8c9 	bl	8002948 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80087b6:	4b0c      	ldr	r3, [pc, #48]	; (80087e8 <HAL_PCD_MspInit+0x84>)
 80087b8:	695b      	ldr	r3, [r3, #20]
 80087ba:	4a0b      	ldr	r2, [pc, #44]	; (80087e8 <HAL_PCD_MspInit+0x84>)
 80087bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80087c0:	6153      	str	r3, [r2, #20]
 80087c2:	4b09      	ldr	r3, [pc, #36]	; (80087e8 <HAL_PCD_MspInit+0x84>)
 80087c4:	695b      	ldr	r3, [r3, #20]
 80087c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80087ca:	60bb      	str	r3, [r7, #8]
 80087cc:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80087ce:	2200      	movs	r2, #0
 80087d0:	2100      	movs	r1, #0
 80087d2:	2043      	movs	r0, #67	; 0x43
 80087d4:	f7fa f881 	bl	80028da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80087d8:	2043      	movs	r0, #67	; 0x43
 80087da:	f7fa f89a 	bl	8002912 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80087de:	bf00      	nop
 80087e0:	3720      	adds	r7, #32
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}
 80087e6:	bf00      	nop
 80087e8:	40021000 	.word	0x40021000
 80087ec:	40010800 	.word	0x40010800

080087f0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b082      	sub	sp, #8
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008804:	4619      	mov	r1, r3
 8008806:	4610      	mov	r0, r2
 8008808:	f7fe fd98 	bl	800733c <USBD_LL_SetupStage>
}
 800880c:	bf00      	nop
 800880e:	3708      	adds	r7, #8
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}

08008814 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b082      	sub	sp, #8
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
 800881c:	460b      	mov	r3, r1
 800881e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f8d3 0500 	ldr.w	r0, [r3, #1280]	; 0x500
 8008826:	78fa      	ldrb	r2, [r7, #3]
 8008828:	6879      	ldr	r1, [r7, #4]
 800882a:	4613      	mov	r3, r2
 800882c:	00db      	lsls	r3, r3, #3
 800882e:	4413      	add	r3, r2
 8008830:	009b      	lsls	r3, r3, #2
 8008832:	440b      	add	r3, r1
 8008834:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8008838:	681a      	ldr	r2, [r3, #0]
 800883a:	78fb      	ldrb	r3, [r7, #3]
 800883c:	4619      	mov	r1, r3
 800883e:	f7fe fdca 	bl	80073d6 <USBD_LL_DataOutStage>
}
 8008842:	bf00      	nop
 8008844:	3708      	adds	r7, #8
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}

0800884a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800884a:	b580      	push	{r7, lr}
 800884c:	b082      	sub	sp, #8
 800884e:	af00      	add	r7, sp, #0
 8008850:	6078      	str	r0, [r7, #4]
 8008852:	460b      	mov	r3, r1
 8008854:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f8d3 0500 	ldr.w	r0, [r3, #1280]	; 0x500
 800885c:	78fa      	ldrb	r2, [r7, #3]
 800885e:	6879      	ldr	r1, [r7, #4]
 8008860:	4613      	mov	r3, r2
 8008862:	00db      	lsls	r3, r3, #3
 8008864:	4413      	add	r3, r2
 8008866:	009b      	lsls	r3, r3, #2
 8008868:	440b      	add	r3, r1
 800886a:	3348      	adds	r3, #72	; 0x48
 800886c:	681a      	ldr	r2, [r3, #0]
 800886e:	78fb      	ldrb	r3, [r7, #3]
 8008870:	4619      	mov	r1, r3
 8008872:	f7fe fe21 	bl	80074b8 <USBD_LL_DataInStage>
}
 8008876:	bf00      	nop
 8008878:	3708      	adds	r7, #8
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}

0800887e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800887e:	b580      	push	{r7, lr}
 8008880:	b082      	sub	sp, #8
 8008882:	af00      	add	r7, sp, #0
 8008884:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 800888c:	4618      	mov	r0, r3
 800888e:	f7fe ff31 	bl	80076f4 <USBD_LL_SOF>
}
 8008892:	bf00      	nop
 8008894:	3708      	adds	r7, #8
 8008896:	46bd      	mov	sp, r7
 8008898:	bd80      	pop	{r7, pc}

0800889a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800889a:	b580      	push	{r7, lr}
 800889c:	b084      	sub	sp, #16
 800889e:	af00      	add	r7, sp, #0
 80088a0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80088a2:	2301      	movs	r3, #1
 80088a4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	691b      	ldr	r3, [r3, #16]
 80088aa:	2b02      	cmp	r3, #2
 80088ac:	d001      	beq.n	80088b2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80088ae:	f7f8 ff65 	bl	800177c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 80088b8:	7bfa      	ldrb	r2, [r7, #15]
 80088ba:	4611      	mov	r1, r2
 80088bc:	4618      	mov	r0, r3
 80088be:	f7fe fee1 	bl	8007684 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 80088c8:	4618      	mov	r0, r3
 80088ca:	f7fe fe9a 	bl	8007602 <USBD_LL_Reset>
}
 80088ce:	bf00      	nop
 80088d0:	3710      	adds	r7, #16
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}
	...

080088d8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b082      	sub	sp, #8
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 80088e6:	4618      	mov	r0, r3
 80088e8:	f7fe fedb 	bl	80076a2 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	687a      	ldr	r2, [r7, #4]
 80088f8:	6812      	ldr	r2, [r2, #0]
 80088fa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80088fe:	f043 0301 	orr.w	r3, r3, #1
 8008902:	6013      	str	r3, [r2, #0]
  if (hpcd->Init.low_power_enable)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	6a1b      	ldr	r3, [r3, #32]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d005      	beq.n	8008918 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800890c:	4b04      	ldr	r3, [pc, #16]	; (8008920 <HAL_PCD_SuspendCallback+0x48>)
 800890e:	691b      	ldr	r3, [r3, #16]
 8008910:	4a03      	ldr	r2, [pc, #12]	; (8008920 <HAL_PCD_SuspendCallback+0x48>)
 8008912:	f043 0306 	orr.w	r3, r3, #6
 8008916:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008918:	bf00      	nop
 800891a:	3708      	adds	r7, #8
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}
 8008920:	e000ed00 	.word	0xe000ed00

08008924 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b082      	sub	sp, #8
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8008932:	4618      	mov	r0, r3
 8008934:	f7fe fec9 	bl	80076ca <USBD_LL_Resume>
}
 8008938:	bf00      	nop
 800893a:	3708      	adds	r7, #8
 800893c:	46bd      	mov	sp, r7
 800893e:	bd80      	pop	{r7, pc}

08008940 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b082      	sub	sp, #8
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
 8008948:	460b      	mov	r3, r1
 800894a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8008952:	78fa      	ldrb	r2, [r7, #3]
 8008954:	4611      	mov	r1, r2
 8008956:	4618      	mov	r0, r3
 8008958:	f7fe fef2 	bl	8007740 <USBD_LL_IsoOUTIncomplete>
}
 800895c:	bf00      	nop
 800895e:	3708      	adds	r7, #8
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}

08008964 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b082      	sub	sp, #8
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
 800896c:	460b      	mov	r3, r1
 800896e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8008976:	78fa      	ldrb	r2, [r7, #3]
 8008978:	4611      	mov	r1, r2
 800897a:	4618      	mov	r0, r3
 800897c:	f7fe fed4 	bl	8007728 <USBD_LL_IsoINIncomplete>
}
 8008980:	bf00      	nop
 8008982:	3708      	adds	r7, #8
 8008984:	46bd      	mov	sp, r7
 8008986:	bd80      	pop	{r7, pc}

08008988 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b082      	sub	sp, #8
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8008996:	4618      	mov	r0, r3
 8008998:	f7fe fede 	bl	8007758 <USBD_LL_DevConnected>
}
 800899c:	bf00      	nop
 800899e:	3708      	adds	r7, #8
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}

080089a4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b082      	sub	sp, #8
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 80089b2:	4618      	mov	r0, r3
 80089b4:	f7fe feda 	bl	800776c <USBD_LL_DevDisconnected>
}
 80089b8:	bf00      	nop
 80089ba:	3708      	adds	r7, #8
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}

080089c0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b082      	sub	sp, #8
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	781b      	ldrb	r3, [r3, #0]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d133      	bne.n	8008a38 <USBD_LL_Init+0x78>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80089d0:	4a1c      	ldr	r2, [pc, #112]	; (8008a44 <USBD_LL_Init+0x84>)
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
  pdev->pData = &hpcd_USB_OTG_FS;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	4a1a      	ldr	r2, [pc, #104]	; (8008a44 <USBD_LL_Init+0x84>)
 80089dc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80089e0:	4b18      	ldr	r3, [pc, #96]	; (8008a44 <USBD_LL_Init+0x84>)
 80089e2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80089e6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80089e8:	4b16      	ldr	r3, [pc, #88]	; (8008a44 <USBD_LL_Init+0x84>)
 80089ea:	2204      	movs	r2, #4
 80089ec:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80089ee:	4b15      	ldr	r3, [pc, #84]	; (8008a44 <USBD_LL_Init+0x84>)
 80089f0:	2202      	movs	r2, #2
 80089f2:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80089f4:	4b13      	ldr	r3, [pc, #76]	; (8008a44 <USBD_LL_Init+0x84>)
 80089f6:	2202      	movs	r2, #2
 80089f8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80089fa:	4b12      	ldr	r3, [pc, #72]	; (8008a44 <USBD_LL_Init+0x84>)
 80089fc:	2200      	movs	r2, #0
 80089fe:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008a00:	4b10      	ldr	r3, [pc, #64]	; (8008a44 <USBD_LL_Init+0x84>)
 8008a02:	2200      	movs	r2, #0
 8008a04:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8008a06:	4b0f      	ldr	r3, [pc, #60]	; (8008a44 <USBD_LL_Init+0x84>)
 8008a08:	2201      	movs	r2, #1
 8008a0a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008a0c:	480d      	ldr	r0, [pc, #52]	; (8008a44 <USBD_LL_Init+0x84>)
 8008a0e:	f7fa f950 	bl	8002cb2 <HAL_PCD_Init>
 8008a12:	4603      	mov	r3, r0
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d001      	beq.n	8008a1c <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8008a18:	f7f8 feb0 	bl	800177c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008a1c:	2180      	movs	r1, #128	; 0x80
 8008a1e:	4809      	ldr	r0, [pc, #36]	; (8008a44 <USBD_LL_Init+0x84>)
 8008a20:	f7fb fa68 	bl	8003ef4 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008a24:	2240      	movs	r2, #64	; 0x40
 8008a26:	2100      	movs	r1, #0
 8008a28:	4806      	ldr	r0, [pc, #24]	; (8008a44 <USBD_LL_Init+0x84>)
 8008a2a:	f7fb fa1d 	bl	8003e68 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008a2e:	2280      	movs	r2, #128	; 0x80
 8008a30:	2101      	movs	r1, #1
 8008a32:	4804      	ldr	r0, [pc, #16]	; (8008a44 <USBD_LL_Init+0x84>)
 8008a34:	f7fb fa18 	bl	8003e68 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008a38:	2300      	movs	r3, #0
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	3708      	adds	r7, #8
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}
 8008a42:	bf00      	nop
 8008a44:	2000104c 	.word	0x2000104c

08008a48 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b084      	sub	sp, #16
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a50:	2300      	movs	r3, #0
 8008a52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a54:	2300      	movs	r3, #0
 8008a56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f7fa fa44 	bl	8002eec <HAL_PCD_Start>
 8008a64:	4603      	mov	r3, r0
 8008a66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a68:	7bfb      	ldrb	r3, [r7, #15]
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	f000 f944 	bl	8008cf8 <USBD_Get_USB_Status>
 8008a70:	4603      	mov	r3, r0
 8008a72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a74:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a76:	4618      	mov	r0, r3
 8008a78:	3710      	adds	r7, #16
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}

08008a7e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008a7e:	b580      	push	{r7, lr}
 8008a80:	b084      	sub	sp, #16
 8008a82:	af00      	add	r7, sp, #0
 8008a84:	6078      	str	r0, [r7, #4]
 8008a86:	4608      	mov	r0, r1
 8008a88:	4611      	mov	r1, r2
 8008a8a:	461a      	mov	r2, r3
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	70fb      	strb	r3, [r7, #3]
 8008a90:	460b      	mov	r3, r1
 8008a92:	70bb      	strb	r3, [r7, #2]
 8008a94:	4613      	mov	r3, r2
 8008a96:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a98:	2300      	movs	r3, #0
 8008a9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008aa6:	78bb      	ldrb	r3, [r7, #2]
 8008aa8:	883a      	ldrh	r2, [r7, #0]
 8008aaa:	78f9      	ldrb	r1, [r7, #3]
 8008aac:	f7fa febd 	bl	800382a <HAL_PCD_EP_Open>
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ab4:	7bfb      	ldrb	r3, [r7, #15]
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	f000 f91e 	bl	8008cf8 <USBD_Get_USB_Status>
 8008abc:	4603      	mov	r3, r0
 8008abe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ac0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	3710      	adds	r7, #16
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd80      	pop	{r7, pc}

08008aca <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008aca:	b580      	push	{r7, lr}
 8008acc:	b084      	sub	sp, #16
 8008ace:	af00      	add	r7, sp, #0
 8008ad0:	6078      	str	r0, [r7, #4]
 8008ad2:	460b      	mov	r3, r1
 8008ad4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ada:	2300      	movs	r3, #0
 8008adc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008ae4:	78fa      	ldrb	r2, [r7, #3]
 8008ae6:	4611      	mov	r1, r2
 8008ae8:	4618      	mov	r0, r3
 8008aea:	f7fa ff06 	bl	80038fa <HAL_PCD_EP_Close>
 8008aee:	4603      	mov	r3, r0
 8008af0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008af2:	7bfb      	ldrb	r3, [r7, #15]
 8008af4:	4618      	mov	r0, r3
 8008af6:	f000 f8ff 	bl	8008cf8 <USBD_Get_USB_Status>
 8008afa:	4603      	mov	r3, r0
 8008afc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008afe:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b00:	4618      	mov	r0, r3
 8008b02:	3710      	adds	r7, #16
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bd80      	pop	{r7, pc}

08008b08 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b084      	sub	sp, #16
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
 8008b10:	460b      	mov	r3, r1
 8008b12:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b14:	2300      	movs	r3, #0
 8008b16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b18:	2300      	movs	r3, #0
 8008b1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008b22:	78fa      	ldrb	r2, [r7, #3]
 8008b24:	4611      	mov	r1, r2
 8008b26:	4618      	mov	r0, r3
 8008b28:	f7fa ffab 	bl	8003a82 <HAL_PCD_EP_SetStall>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b30:	7bfb      	ldrb	r3, [r7, #15]
 8008b32:	4618      	mov	r0, r3
 8008b34:	f000 f8e0 	bl	8008cf8 <USBD_Get_USB_Status>
 8008b38:	4603      	mov	r3, r0
 8008b3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b3c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	3710      	adds	r7, #16
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}

08008b46 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b46:	b580      	push	{r7, lr}
 8008b48:	b084      	sub	sp, #16
 8008b4a:	af00      	add	r7, sp, #0
 8008b4c:	6078      	str	r0, [r7, #4]
 8008b4e:	460b      	mov	r3, r1
 8008b50:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b52:	2300      	movs	r3, #0
 8008b54:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b56:	2300      	movs	r3, #0
 8008b58:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008b60:	78fa      	ldrb	r2, [r7, #3]
 8008b62:	4611      	mov	r1, r2
 8008b64:	4618      	mov	r0, r3
 8008b66:	f7fa ffee 	bl	8003b46 <HAL_PCD_EP_ClrStall>
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b6e:	7bfb      	ldrb	r3, [r7, #15]
 8008b70:	4618      	mov	r0, r3
 8008b72:	f000 f8c1 	bl	8008cf8 <USBD_Get_USB_Status>
 8008b76:	4603      	mov	r3, r0
 8008b78:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b7a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	3710      	adds	r7, #16
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}

08008b84 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b84:	b480      	push	{r7}
 8008b86:	b085      	sub	sp, #20
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
 8008b8c:	460b      	mov	r3, r1
 8008b8e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008b96:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008b98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	da0b      	bge.n	8008bb8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008ba0:	78fb      	ldrb	r3, [r7, #3]
 8008ba2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008ba6:	68f9      	ldr	r1, [r7, #12]
 8008ba8:	4613      	mov	r3, r2
 8008baa:	00db      	lsls	r3, r3, #3
 8008bac:	4413      	add	r3, r2
 8008bae:	009b      	lsls	r3, r3, #2
 8008bb0:	440b      	add	r3, r1
 8008bb2:	333e      	adds	r3, #62	; 0x3e
 8008bb4:	781b      	ldrb	r3, [r3, #0]
 8008bb6:	e00b      	b.n	8008bd0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008bb8:	78fb      	ldrb	r3, [r7, #3]
 8008bba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008bbe:	68f9      	ldr	r1, [r7, #12]
 8008bc0:	4613      	mov	r3, r2
 8008bc2:	00db      	lsls	r3, r3, #3
 8008bc4:	4413      	add	r3, r2
 8008bc6:	009b      	lsls	r3, r3, #2
 8008bc8:	440b      	add	r3, r1
 8008bca:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008bce:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	3714      	adds	r7, #20
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bc80      	pop	{r7}
 8008bd8:	4770      	bx	lr

08008bda <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008bda:	b580      	push	{r7, lr}
 8008bdc:	b084      	sub	sp, #16
 8008bde:	af00      	add	r7, sp, #0
 8008be0:	6078      	str	r0, [r7, #4]
 8008be2:	460b      	mov	r3, r1
 8008be4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008be6:	2300      	movs	r3, #0
 8008be8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bea:	2300      	movs	r3, #0
 8008bec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008bf4:	78fa      	ldrb	r2, [r7, #3]
 8008bf6:	4611      	mov	r1, r2
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	f7fa fdf1 	bl	80037e0 <HAL_PCD_SetAddress>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c02:	7bfb      	ldrb	r3, [r7, #15]
 8008c04:	4618      	mov	r0, r3
 8008c06:	f000 f877 	bl	8008cf8 <USBD_Get_USB_Status>
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c0e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c10:	4618      	mov	r0, r3
 8008c12:	3710      	adds	r7, #16
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}

08008c18 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b086      	sub	sp, #24
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	60f8      	str	r0, [r7, #12]
 8008c20:	607a      	str	r2, [r7, #4]
 8008c22:	461a      	mov	r2, r3
 8008c24:	460b      	mov	r3, r1
 8008c26:	72fb      	strb	r3, [r7, #11]
 8008c28:	4613      	mov	r3, r2
 8008c2a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c30:	2300      	movs	r3, #0
 8008c32:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008c3a:	893b      	ldrh	r3, [r7, #8]
 8008c3c:	7af9      	ldrb	r1, [r7, #11]
 8008c3e:	687a      	ldr	r2, [r7, #4]
 8008c40:	f7fa feee 	bl	8003a20 <HAL_PCD_EP_Transmit>
 8008c44:	4603      	mov	r3, r0
 8008c46:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c48:	7dfb      	ldrb	r3, [r7, #23]
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	f000 f854 	bl	8008cf8 <USBD_Get_USB_Status>
 8008c50:	4603      	mov	r3, r0
 8008c52:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008c54:	7dbb      	ldrb	r3, [r7, #22]
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	3718      	adds	r7, #24
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}

08008c5e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008c5e:	b580      	push	{r7, lr}
 8008c60:	b086      	sub	sp, #24
 8008c62:	af00      	add	r7, sp, #0
 8008c64:	60f8      	str	r0, [r7, #12]
 8008c66:	607a      	str	r2, [r7, #4]
 8008c68:	461a      	mov	r2, r3
 8008c6a:	460b      	mov	r3, r1
 8008c6c:	72fb      	strb	r3, [r7, #11]
 8008c6e:	4613      	mov	r3, r2
 8008c70:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c72:	2300      	movs	r3, #0
 8008c74:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c76:	2300      	movs	r3, #0
 8008c78:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008c80:	893b      	ldrh	r3, [r7, #8]
 8008c82:	7af9      	ldrb	r1, [r7, #11]
 8008c84:	687a      	ldr	r2, [r7, #4]
 8008c86:	f7fa fe82 	bl	800398e <HAL_PCD_EP_Receive>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c8e:	7dfb      	ldrb	r3, [r7, #23]
 8008c90:	4618      	mov	r0, r3
 8008c92:	f000 f831 	bl	8008cf8 <USBD_Get_USB_Status>
 8008c96:	4603      	mov	r3, r0
 8008c98:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008c9a:	7dbb      	ldrb	r3, [r7, #22]
}
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	3718      	adds	r7, #24
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}

08008ca4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b082      	sub	sp, #8
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
 8008cac:	460b      	mov	r3, r1
 8008cae:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008cb6:	78fa      	ldrb	r2, [r7, #3]
 8008cb8:	4611      	mov	r1, r2
 8008cba:	4618      	mov	r0, r3
 8008cbc:	f7fa fe99 	bl	80039f2 <HAL_PCD_EP_GetRxCount>
 8008cc0:	4603      	mov	r3, r0
}
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	3708      	adds	r7, #8
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bd80      	pop	{r7, pc}
	...

08008ccc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008ccc:	b480      	push	{r7}
 8008cce:	b083      	sub	sp, #12
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008cd4:	4b02      	ldr	r3, [pc, #8]	; (8008ce0 <USBD_static_malloc+0x14>)
}
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	370c      	adds	r7, #12
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bc80      	pop	{r7}
 8008cde:	4770      	bx	lr
 8008ce0:	20001550 	.word	0x20001550

08008ce4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008ce4:	b480      	push	{r7}
 8008ce6:	b083      	sub	sp, #12
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]

}
 8008cec:	bf00      	nop
 8008cee:	370c      	adds	r7, #12
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bc80      	pop	{r7}
 8008cf4:	4770      	bx	lr
	...

08008cf8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	b085      	sub	sp, #20
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	4603      	mov	r3, r0
 8008d00:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d02:	2300      	movs	r3, #0
 8008d04:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008d06:	79fb      	ldrb	r3, [r7, #7]
 8008d08:	2b03      	cmp	r3, #3
 8008d0a:	d817      	bhi.n	8008d3c <USBD_Get_USB_Status+0x44>
 8008d0c:	a201      	add	r2, pc, #4	; (adr r2, 8008d14 <USBD_Get_USB_Status+0x1c>)
 8008d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d12:	bf00      	nop
 8008d14:	08008d25 	.word	0x08008d25
 8008d18:	08008d2b 	.word	0x08008d2b
 8008d1c:	08008d31 	.word	0x08008d31
 8008d20:	08008d37 	.word	0x08008d37
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008d24:	2300      	movs	r3, #0
 8008d26:	73fb      	strb	r3, [r7, #15]
    break;
 8008d28:	e00b      	b.n	8008d42 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008d2a:	2302      	movs	r3, #2
 8008d2c:	73fb      	strb	r3, [r7, #15]
    break;
 8008d2e:	e008      	b.n	8008d42 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008d30:	2301      	movs	r3, #1
 8008d32:	73fb      	strb	r3, [r7, #15]
    break;
 8008d34:	e005      	b.n	8008d42 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008d36:	2302      	movs	r3, #2
 8008d38:	73fb      	strb	r3, [r7, #15]
    break;
 8008d3a:	e002      	b.n	8008d42 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008d3c:	2302      	movs	r3, #2
 8008d3e:	73fb      	strb	r3, [r7, #15]
    break;
 8008d40:	bf00      	nop
  }
  return usb_status;
 8008d42:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	3714      	adds	r7, #20
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bc80      	pop	{r7}
 8008d4c:	4770      	bx	lr
 8008d4e:	bf00      	nop

08008d50 <malloc>:
 8008d50:	4b02      	ldr	r3, [pc, #8]	; (8008d5c <malloc+0xc>)
 8008d52:	4601      	mov	r1, r0
 8008d54:	6818      	ldr	r0, [r3, #0]
 8008d56:	f000 b82b 	b.w	8008db0 <_malloc_r>
 8008d5a:	bf00      	nop
 8008d5c:	20000234 	.word	0x20000234

08008d60 <free>:
 8008d60:	4b02      	ldr	r3, [pc, #8]	; (8008d6c <free+0xc>)
 8008d62:	4601      	mov	r1, r0
 8008d64:	6818      	ldr	r0, [r3, #0]
 8008d66:	f000 b901 	b.w	8008f6c <_free_r>
 8008d6a:	bf00      	nop
 8008d6c:	20000234 	.word	0x20000234

08008d70 <sbrk_aligned>:
 8008d70:	b570      	push	{r4, r5, r6, lr}
 8008d72:	4e0e      	ldr	r6, [pc, #56]	; (8008dac <sbrk_aligned+0x3c>)
 8008d74:	460c      	mov	r4, r1
 8008d76:	6831      	ldr	r1, [r6, #0]
 8008d78:	4605      	mov	r5, r0
 8008d7a:	b911      	cbnz	r1, 8008d82 <sbrk_aligned+0x12>
 8008d7c:	f000 f8ac 	bl	8008ed8 <_sbrk_r>
 8008d80:	6030      	str	r0, [r6, #0]
 8008d82:	4621      	mov	r1, r4
 8008d84:	4628      	mov	r0, r5
 8008d86:	f000 f8a7 	bl	8008ed8 <_sbrk_r>
 8008d8a:	1c43      	adds	r3, r0, #1
 8008d8c:	d00a      	beq.n	8008da4 <sbrk_aligned+0x34>
 8008d8e:	1cc4      	adds	r4, r0, #3
 8008d90:	f024 0403 	bic.w	r4, r4, #3
 8008d94:	42a0      	cmp	r0, r4
 8008d96:	d007      	beq.n	8008da8 <sbrk_aligned+0x38>
 8008d98:	1a21      	subs	r1, r4, r0
 8008d9a:	4628      	mov	r0, r5
 8008d9c:	f000 f89c 	bl	8008ed8 <_sbrk_r>
 8008da0:	3001      	adds	r0, #1
 8008da2:	d101      	bne.n	8008da8 <sbrk_aligned+0x38>
 8008da4:	f04f 34ff 	mov.w	r4, #4294967295
 8008da8:	4620      	mov	r0, r4
 8008daa:	bd70      	pop	{r4, r5, r6, pc}
 8008dac:	20001774 	.word	0x20001774

08008db0 <_malloc_r>:
 8008db0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008db4:	1ccd      	adds	r5, r1, #3
 8008db6:	f025 0503 	bic.w	r5, r5, #3
 8008dba:	3508      	adds	r5, #8
 8008dbc:	2d0c      	cmp	r5, #12
 8008dbe:	bf38      	it	cc
 8008dc0:	250c      	movcc	r5, #12
 8008dc2:	2d00      	cmp	r5, #0
 8008dc4:	4607      	mov	r7, r0
 8008dc6:	db01      	blt.n	8008dcc <_malloc_r+0x1c>
 8008dc8:	42a9      	cmp	r1, r5
 8008dca:	d905      	bls.n	8008dd8 <_malloc_r+0x28>
 8008dcc:	230c      	movs	r3, #12
 8008dce:	2600      	movs	r6, #0
 8008dd0:	603b      	str	r3, [r7, #0]
 8008dd2:	4630      	mov	r0, r6
 8008dd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008dd8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008eac <_malloc_r+0xfc>
 8008ddc:	f000 f868 	bl	8008eb0 <__malloc_lock>
 8008de0:	f8d8 3000 	ldr.w	r3, [r8]
 8008de4:	461c      	mov	r4, r3
 8008de6:	bb5c      	cbnz	r4, 8008e40 <_malloc_r+0x90>
 8008de8:	4629      	mov	r1, r5
 8008dea:	4638      	mov	r0, r7
 8008dec:	f7ff ffc0 	bl	8008d70 <sbrk_aligned>
 8008df0:	1c43      	adds	r3, r0, #1
 8008df2:	4604      	mov	r4, r0
 8008df4:	d155      	bne.n	8008ea2 <_malloc_r+0xf2>
 8008df6:	f8d8 4000 	ldr.w	r4, [r8]
 8008dfa:	4626      	mov	r6, r4
 8008dfc:	2e00      	cmp	r6, #0
 8008dfe:	d145      	bne.n	8008e8c <_malloc_r+0xdc>
 8008e00:	2c00      	cmp	r4, #0
 8008e02:	d048      	beq.n	8008e96 <_malloc_r+0xe6>
 8008e04:	6823      	ldr	r3, [r4, #0]
 8008e06:	4631      	mov	r1, r6
 8008e08:	4638      	mov	r0, r7
 8008e0a:	eb04 0903 	add.w	r9, r4, r3
 8008e0e:	f000 f863 	bl	8008ed8 <_sbrk_r>
 8008e12:	4581      	cmp	r9, r0
 8008e14:	d13f      	bne.n	8008e96 <_malloc_r+0xe6>
 8008e16:	6821      	ldr	r1, [r4, #0]
 8008e18:	4638      	mov	r0, r7
 8008e1a:	1a6d      	subs	r5, r5, r1
 8008e1c:	4629      	mov	r1, r5
 8008e1e:	f7ff ffa7 	bl	8008d70 <sbrk_aligned>
 8008e22:	3001      	adds	r0, #1
 8008e24:	d037      	beq.n	8008e96 <_malloc_r+0xe6>
 8008e26:	6823      	ldr	r3, [r4, #0]
 8008e28:	442b      	add	r3, r5
 8008e2a:	6023      	str	r3, [r4, #0]
 8008e2c:	f8d8 3000 	ldr.w	r3, [r8]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d038      	beq.n	8008ea6 <_malloc_r+0xf6>
 8008e34:	685a      	ldr	r2, [r3, #4]
 8008e36:	42a2      	cmp	r2, r4
 8008e38:	d12b      	bne.n	8008e92 <_malloc_r+0xe2>
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	605a      	str	r2, [r3, #4]
 8008e3e:	e00f      	b.n	8008e60 <_malloc_r+0xb0>
 8008e40:	6822      	ldr	r2, [r4, #0]
 8008e42:	1b52      	subs	r2, r2, r5
 8008e44:	d41f      	bmi.n	8008e86 <_malloc_r+0xd6>
 8008e46:	2a0b      	cmp	r2, #11
 8008e48:	d917      	bls.n	8008e7a <_malloc_r+0xca>
 8008e4a:	1961      	adds	r1, r4, r5
 8008e4c:	42a3      	cmp	r3, r4
 8008e4e:	6025      	str	r5, [r4, #0]
 8008e50:	bf18      	it	ne
 8008e52:	6059      	strne	r1, [r3, #4]
 8008e54:	6863      	ldr	r3, [r4, #4]
 8008e56:	bf08      	it	eq
 8008e58:	f8c8 1000 	streq.w	r1, [r8]
 8008e5c:	5162      	str	r2, [r4, r5]
 8008e5e:	604b      	str	r3, [r1, #4]
 8008e60:	4638      	mov	r0, r7
 8008e62:	f104 060b 	add.w	r6, r4, #11
 8008e66:	f000 f829 	bl	8008ebc <__malloc_unlock>
 8008e6a:	f026 0607 	bic.w	r6, r6, #7
 8008e6e:	1d23      	adds	r3, r4, #4
 8008e70:	1af2      	subs	r2, r6, r3
 8008e72:	d0ae      	beq.n	8008dd2 <_malloc_r+0x22>
 8008e74:	1b9b      	subs	r3, r3, r6
 8008e76:	50a3      	str	r3, [r4, r2]
 8008e78:	e7ab      	b.n	8008dd2 <_malloc_r+0x22>
 8008e7a:	42a3      	cmp	r3, r4
 8008e7c:	6862      	ldr	r2, [r4, #4]
 8008e7e:	d1dd      	bne.n	8008e3c <_malloc_r+0x8c>
 8008e80:	f8c8 2000 	str.w	r2, [r8]
 8008e84:	e7ec      	b.n	8008e60 <_malloc_r+0xb0>
 8008e86:	4623      	mov	r3, r4
 8008e88:	6864      	ldr	r4, [r4, #4]
 8008e8a:	e7ac      	b.n	8008de6 <_malloc_r+0x36>
 8008e8c:	4634      	mov	r4, r6
 8008e8e:	6876      	ldr	r6, [r6, #4]
 8008e90:	e7b4      	b.n	8008dfc <_malloc_r+0x4c>
 8008e92:	4613      	mov	r3, r2
 8008e94:	e7cc      	b.n	8008e30 <_malloc_r+0x80>
 8008e96:	230c      	movs	r3, #12
 8008e98:	4638      	mov	r0, r7
 8008e9a:	603b      	str	r3, [r7, #0]
 8008e9c:	f000 f80e 	bl	8008ebc <__malloc_unlock>
 8008ea0:	e797      	b.n	8008dd2 <_malloc_r+0x22>
 8008ea2:	6025      	str	r5, [r4, #0]
 8008ea4:	e7dc      	b.n	8008e60 <_malloc_r+0xb0>
 8008ea6:	605b      	str	r3, [r3, #4]
 8008ea8:	deff      	udf	#255	; 0xff
 8008eaa:	bf00      	nop
 8008eac:	20001770 	.word	0x20001770

08008eb0 <__malloc_lock>:
 8008eb0:	4801      	ldr	r0, [pc, #4]	; (8008eb8 <__malloc_lock+0x8>)
 8008eb2:	f000 b84b 	b.w	8008f4c <__retarget_lock_acquire_recursive>
 8008eb6:	bf00      	nop
 8008eb8:	200018b4 	.word	0x200018b4

08008ebc <__malloc_unlock>:
 8008ebc:	4801      	ldr	r0, [pc, #4]	; (8008ec4 <__malloc_unlock+0x8>)
 8008ebe:	f000 b846 	b.w	8008f4e <__retarget_lock_release_recursive>
 8008ec2:	bf00      	nop
 8008ec4:	200018b4 	.word	0x200018b4

08008ec8 <memset>:
 8008ec8:	4603      	mov	r3, r0
 8008eca:	4402      	add	r2, r0
 8008ecc:	4293      	cmp	r3, r2
 8008ece:	d100      	bne.n	8008ed2 <memset+0xa>
 8008ed0:	4770      	bx	lr
 8008ed2:	f803 1b01 	strb.w	r1, [r3], #1
 8008ed6:	e7f9      	b.n	8008ecc <memset+0x4>

08008ed8 <_sbrk_r>:
 8008ed8:	b538      	push	{r3, r4, r5, lr}
 8008eda:	2300      	movs	r3, #0
 8008edc:	4d05      	ldr	r5, [pc, #20]	; (8008ef4 <_sbrk_r+0x1c>)
 8008ede:	4604      	mov	r4, r0
 8008ee0:	4608      	mov	r0, r1
 8008ee2:	602b      	str	r3, [r5, #0]
 8008ee4:	f7f8 fea2 	bl	8001c2c <_sbrk>
 8008ee8:	1c43      	adds	r3, r0, #1
 8008eea:	d102      	bne.n	8008ef2 <_sbrk_r+0x1a>
 8008eec:	682b      	ldr	r3, [r5, #0]
 8008eee:	b103      	cbz	r3, 8008ef2 <_sbrk_r+0x1a>
 8008ef0:	6023      	str	r3, [r4, #0]
 8008ef2:	bd38      	pop	{r3, r4, r5, pc}
 8008ef4:	200018b0 	.word	0x200018b0

08008ef8 <__errno>:
 8008ef8:	4b01      	ldr	r3, [pc, #4]	; (8008f00 <__errno+0x8>)
 8008efa:	6818      	ldr	r0, [r3, #0]
 8008efc:	4770      	bx	lr
 8008efe:	bf00      	nop
 8008f00:	20000234 	.word	0x20000234

08008f04 <__libc_init_array>:
 8008f04:	b570      	push	{r4, r5, r6, lr}
 8008f06:	2600      	movs	r6, #0
 8008f08:	4d0c      	ldr	r5, [pc, #48]	; (8008f3c <__libc_init_array+0x38>)
 8008f0a:	4c0d      	ldr	r4, [pc, #52]	; (8008f40 <__libc_init_array+0x3c>)
 8008f0c:	1b64      	subs	r4, r4, r5
 8008f0e:	10a4      	asrs	r4, r4, #2
 8008f10:	42a6      	cmp	r6, r4
 8008f12:	d109      	bne.n	8008f28 <__libc_init_array+0x24>
 8008f14:	f000 f872 	bl	8008ffc <_init>
 8008f18:	2600      	movs	r6, #0
 8008f1a:	4d0a      	ldr	r5, [pc, #40]	; (8008f44 <__libc_init_array+0x40>)
 8008f1c:	4c0a      	ldr	r4, [pc, #40]	; (8008f48 <__libc_init_array+0x44>)
 8008f1e:	1b64      	subs	r4, r4, r5
 8008f20:	10a4      	asrs	r4, r4, #2
 8008f22:	42a6      	cmp	r6, r4
 8008f24:	d105      	bne.n	8008f32 <__libc_init_array+0x2e>
 8008f26:	bd70      	pop	{r4, r5, r6, pc}
 8008f28:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f2c:	4798      	blx	r3
 8008f2e:	3601      	adds	r6, #1
 8008f30:	e7ee      	b.n	8008f10 <__libc_init_array+0xc>
 8008f32:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f36:	4798      	blx	r3
 8008f38:	3601      	adds	r6, #1
 8008f3a:	e7f2      	b.n	8008f22 <__libc_init_array+0x1e>
 8008f3c:	080094a0 	.word	0x080094a0
 8008f40:	080094a0 	.word	0x080094a0
 8008f44:	080094a0 	.word	0x080094a0
 8008f48:	080094a4 	.word	0x080094a4

08008f4c <__retarget_lock_acquire_recursive>:
 8008f4c:	4770      	bx	lr

08008f4e <__retarget_lock_release_recursive>:
 8008f4e:	4770      	bx	lr

08008f50 <memcpy>:
 8008f50:	440a      	add	r2, r1
 8008f52:	4291      	cmp	r1, r2
 8008f54:	f100 33ff 	add.w	r3, r0, #4294967295
 8008f58:	d100      	bne.n	8008f5c <memcpy+0xc>
 8008f5a:	4770      	bx	lr
 8008f5c:	b510      	push	{r4, lr}
 8008f5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f62:	4291      	cmp	r1, r2
 8008f64:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f68:	d1f9      	bne.n	8008f5e <memcpy+0xe>
 8008f6a:	bd10      	pop	{r4, pc}

08008f6c <_free_r>:
 8008f6c:	b538      	push	{r3, r4, r5, lr}
 8008f6e:	4605      	mov	r5, r0
 8008f70:	2900      	cmp	r1, #0
 8008f72:	d040      	beq.n	8008ff6 <_free_r+0x8a>
 8008f74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f78:	1f0c      	subs	r4, r1, #4
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	bfb8      	it	lt
 8008f7e:	18e4      	addlt	r4, r4, r3
 8008f80:	f7ff ff96 	bl	8008eb0 <__malloc_lock>
 8008f84:	4a1c      	ldr	r2, [pc, #112]	; (8008ff8 <_free_r+0x8c>)
 8008f86:	6813      	ldr	r3, [r2, #0]
 8008f88:	b933      	cbnz	r3, 8008f98 <_free_r+0x2c>
 8008f8a:	6063      	str	r3, [r4, #4]
 8008f8c:	6014      	str	r4, [r2, #0]
 8008f8e:	4628      	mov	r0, r5
 8008f90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f94:	f7ff bf92 	b.w	8008ebc <__malloc_unlock>
 8008f98:	42a3      	cmp	r3, r4
 8008f9a:	d908      	bls.n	8008fae <_free_r+0x42>
 8008f9c:	6820      	ldr	r0, [r4, #0]
 8008f9e:	1821      	adds	r1, r4, r0
 8008fa0:	428b      	cmp	r3, r1
 8008fa2:	bf01      	itttt	eq
 8008fa4:	6819      	ldreq	r1, [r3, #0]
 8008fa6:	685b      	ldreq	r3, [r3, #4]
 8008fa8:	1809      	addeq	r1, r1, r0
 8008faa:	6021      	streq	r1, [r4, #0]
 8008fac:	e7ed      	b.n	8008f8a <_free_r+0x1e>
 8008fae:	461a      	mov	r2, r3
 8008fb0:	685b      	ldr	r3, [r3, #4]
 8008fb2:	b10b      	cbz	r3, 8008fb8 <_free_r+0x4c>
 8008fb4:	42a3      	cmp	r3, r4
 8008fb6:	d9fa      	bls.n	8008fae <_free_r+0x42>
 8008fb8:	6811      	ldr	r1, [r2, #0]
 8008fba:	1850      	adds	r0, r2, r1
 8008fbc:	42a0      	cmp	r0, r4
 8008fbe:	d10b      	bne.n	8008fd8 <_free_r+0x6c>
 8008fc0:	6820      	ldr	r0, [r4, #0]
 8008fc2:	4401      	add	r1, r0
 8008fc4:	1850      	adds	r0, r2, r1
 8008fc6:	4283      	cmp	r3, r0
 8008fc8:	6011      	str	r1, [r2, #0]
 8008fca:	d1e0      	bne.n	8008f8e <_free_r+0x22>
 8008fcc:	6818      	ldr	r0, [r3, #0]
 8008fce:	685b      	ldr	r3, [r3, #4]
 8008fd0:	4408      	add	r0, r1
 8008fd2:	6010      	str	r0, [r2, #0]
 8008fd4:	6053      	str	r3, [r2, #4]
 8008fd6:	e7da      	b.n	8008f8e <_free_r+0x22>
 8008fd8:	d902      	bls.n	8008fe0 <_free_r+0x74>
 8008fda:	230c      	movs	r3, #12
 8008fdc:	602b      	str	r3, [r5, #0]
 8008fde:	e7d6      	b.n	8008f8e <_free_r+0x22>
 8008fe0:	6820      	ldr	r0, [r4, #0]
 8008fe2:	1821      	adds	r1, r4, r0
 8008fe4:	428b      	cmp	r3, r1
 8008fe6:	bf01      	itttt	eq
 8008fe8:	6819      	ldreq	r1, [r3, #0]
 8008fea:	685b      	ldreq	r3, [r3, #4]
 8008fec:	1809      	addeq	r1, r1, r0
 8008fee:	6021      	streq	r1, [r4, #0]
 8008ff0:	6063      	str	r3, [r4, #4]
 8008ff2:	6054      	str	r4, [r2, #4]
 8008ff4:	e7cb      	b.n	8008f8e <_free_r+0x22>
 8008ff6:	bd38      	pop	{r3, r4, r5, pc}
 8008ff8:	20001770 	.word	0x20001770

08008ffc <_init>:
 8008ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ffe:	bf00      	nop
 8009000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009002:	bc08      	pop	{r3}
 8009004:	469e      	mov	lr, r3
 8009006:	4770      	bx	lr

08009008 <_fini>:
 8009008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800900a:	bf00      	nop
 800900c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800900e:	bc08      	pop	{r3}
 8009010:	469e      	mov	lr, r3
 8009012:	4770      	bx	lr
