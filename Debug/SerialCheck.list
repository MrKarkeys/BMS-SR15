
SerialCheck.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e24  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c8  08008f30  08008f30  00018f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080093f8  080093f8  000201cc  2**0
                  CONTENTS
  4 .ARM          00000000  080093f8  080093f8  000201cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080093f8  080093f8  000201cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080093f8  080093f8  000193f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080093fc  080093fc  000193fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001cc  20000000  08009400  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000139c  200001cc  080095cc  000201cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001568  080095cc  00021568  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201cc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201f5  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e7b6  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002fac  00000000  00000000  0002e9ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ca8  00000000  00000000  000319a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000094c  00000000  00000000  00032648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019a4c  00000000  00000000  00032f94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011023  00000000  00000000  0004c9e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000867a8  00000000  00000000  0005da03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000036b0  00000000  00000000  000e41ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000e785c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001cc 	.word	0x200001cc
 8000128:	00000000 	.word	0x00000000
 800012c:	08008f18 	.word	0x08008f18

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001d0 	.word	0x200001d0
 8000148:	08008f18 	.word	0x08008f18

0800014c <HAL_SPI_Send>:

SPI_HandleTypeDef hspi1;


void HAL_SPI_Send(char* dummy)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); //Pull CS low
 8000154:	2200      	movs	r2, #0
 8000156:	2110      	movs	r1, #16
 8000158:	4808      	ldr	r0, [pc, #32]	; (800017c <HAL_SPI_Send+0x30>)
 800015a:	f000 fecd 	bl	8000ef8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) (&dummy), 1, 100);
 800015e:	1d39      	adds	r1, r7, #4
 8000160:	2364      	movs	r3, #100	; 0x64
 8000162:	2201      	movs	r2, #1
 8000164:	4806      	ldr	r0, [pc, #24]	; (8000180 <HAL_SPI_Send+0x34>)
 8000166:	f003 f965 	bl	8003434 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); //Pull CS high
 800016a:	2201      	movs	r2, #1
 800016c:	2110      	movs	r1, #16
 800016e:	4803      	ldr	r0, [pc, #12]	; (800017c <HAL_SPI_Send+0x30>)
 8000170:	f000 fec2 	bl	8000ef8 <HAL_GPIO_WritePin>
}
 8000174:	bf00      	nop
 8000176:	3708      	adds	r7, #8
 8000178:	46bd      	mov	sp, r7
 800017a:	bd80      	pop	{r7, pc}
 800017c:	40010800 	.word	0x40010800
 8000180:	200001e8 	.word	0x200001e8

08000184 <HAL_SPI_Recieve>:

void HAL_SPI_Recieve(uint8_t* cmd, uint8_t* read_val)
{
 8000184:	b580      	push	{r7, lr}
 8000186:	b082      	sub	sp, #8
 8000188:	af00      	add	r7, sp, #0
 800018a:	6078      	str	r0, [r7, #4]
 800018c:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); //Pull CS low
 800018e:	2200      	movs	r2, #0
 8000190:	2110      	movs	r1, #16
 8000192:	480c      	ldr	r0, [pc, #48]	; (80001c4 <HAL_SPI_Recieve+0x40>)
 8000194:	f000 feb0 	bl	8000ef8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, cmd, 4, 100);
 8000198:	2364      	movs	r3, #100	; 0x64
 800019a:	2204      	movs	r2, #4
 800019c:	6879      	ldr	r1, [r7, #4]
 800019e:	480a      	ldr	r0, [pc, #40]	; (80001c8 <HAL_SPI_Recieve+0x44>)
 80001a0:	f003 f948 	bl	8003434 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, read_val, 10, 100);
 80001a4:	2364      	movs	r3, #100	; 0x64
 80001a6:	220a      	movs	r2, #10
 80001a8:	6839      	ldr	r1, [r7, #0]
 80001aa:	4807      	ldr	r0, [pc, #28]	; (80001c8 <HAL_SPI_Recieve+0x44>)
 80001ac:	f003 fa85 	bl	80036ba <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); //Pull CS high
 80001b0:	2201      	movs	r2, #1
 80001b2:	2110      	movs	r1, #16
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <HAL_SPI_Recieve+0x40>)
 80001b6:	f000 fe9f 	bl	8000ef8 <HAL_GPIO_WritePin>
}
 80001ba:	bf00      	nop
 80001bc:	3708      	adds	r7, #8
 80001be:	46bd      	mov	sp, r7
 80001c0:	bd80      	pop	{r7, pc}
 80001c2:	bf00      	nop
 80001c4:	40010800 	.word	0x40010800
 80001c8:	200001e8 	.word	0x200001e8

080001cc <pec15_calc>:
		0xba39, 0xb10b, 0x7492, 0x5368, 0x96f1, 0x9dc3, 0x585a, 0x8ba7, 0x4e3e,
		0x450c, 0x8095 };

uint16_t pec15_calc(uint8_t len, //Number of bytes that will be used to calculate a PEC
		uint8_t *data //Array of data that will be used to calculate  a PEC
		) {
 80001cc:	b480      	push	{r7}
 80001ce:	b085      	sub	sp, #20
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	4603      	mov	r3, r0
 80001d4:	6039      	str	r1, [r7, #0]
 80001d6:	71fb      	strb	r3, [r7, #7]
	uint16_t remainder, addr;
	remainder = 16; //initialize the PEC
 80001d8:	2310      	movs	r3, #16
 80001da:	81fb      	strh	r3, [r7, #14]

	for (uint8_t i = 0; i < len; i++) // loops for each byte in data array
 80001dc:	2300      	movs	r3, #0
 80001de:	737b      	strb	r3, [r7, #13]
 80001e0:	e018      	b.n	8000214 <pec15_calc+0x48>
			{
		addr = ((remainder >> 7) ^ data[i]) & 0xff; //calculate PEC table address
 80001e2:	89fb      	ldrh	r3, [r7, #14]
 80001e4:	09db      	lsrs	r3, r3, #7
 80001e6:	b29a      	uxth	r2, r3
 80001e8:	7b7b      	ldrb	r3, [r7, #13]
 80001ea:	6839      	ldr	r1, [r7, #0]
 80001ec:	440b      	add	r3, r1
 80001ee:	781b      	ldrb	r3, [r3, #0]
 80001f0:	b29b      	uxth	r3, r3
 80001f2:	4053      	eors	r3, r2
 80001f4:	b29b      	uxth	r3, r3
 80001f6:	b2db      	uxtb	r3, r3
 80001f8:	817b      	strh	r3, [r7, #10]
		remainder = (remainder << 8) ^ crc15Table[addr];
 80001fa:	89fb      	ldrh	r3, [r7, #14]
 80001fc:	021b      	lsls	r3, r3, #8
 80001fe:	b29a      	uxth	r2, r3
 8000200:	897b      	ldrh	r3, [r7, #10]
 8000202:	490a      	ldr	r1, [pc, #40]	; (800022c <pec15_calc+0x60>)
 8000204:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000208:	b29b      	uxth	r3, r3
 800020a:	4053      	eors	r3, r2
 800020c:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i < len; i++) // loops for each byte in data array
 800020e:	7b7b      	ldrb	r3, [r7, #13]
 8000210:	3301      	adds	r3, #1
 8000212:	737b      	strb	r3, [r7, #13]
 8000214:	7b7a      	ldrb	r2, [r7, #13]
 8000216:	79fb      	ldrb	r3, [r7, #7]
 8000218:	429a      	cmp	r2, r3
 800021a:	d3e2      	bcc.n	80001e2 <pec15_calc+0x16>
	}

	return (remainder * 2); //The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 800021c:	89fb      	ldrh	r3, [r7, #14]
 800021e:	005b      	lsls	r3, r3, #1
 8000220:	b29b      	uxth	r3, r3
}
 8000222:	4618      	mov	r0, r3
 8000224:	3714      	adds	r7, #20
 8000226:	46bd      	mov	sp, r7
 8000228:	bc80      	pop	{r7}
 800022a:	4770      	bx	lr
 800022c:	08008fa0 	.word	0x08008fa0

08000230 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000230:	b580      	push	{r7, lr}
 8000232:	f5ad 6d06 	sub.w	sp, sp, #2144	; 0x860
 8000236:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	uint32_t prev = 0, curr = 0;
 8000238:	2300      	movs	r3, #0
 800023a:	f8c7 385c 	str.w	r3, [r7, #2140]	; 0x85c
 800023e:	2300      	movs	r3, #0
 8000240:	f8c7 3848 	str.w	r3, [r7, #2120]	; 0x848
	uint16_t cmd_pec;
	uint16_t voltages[4];
	//	const uint8_t REG_LEN = 8; // number of bytes in the register + 2 bytes for the PEC
	uint8_t cmd[4], read_val[10] = { 0 };
 8000244:	2300      	movs	r3, #0
 8000246:	f8c7 3824 	str.w	r3, [r7, #2084]	; 0x824
 800024a:	f607 0328 	addw	r3, r7, #2088	; 0x828
 800024e:	2200      	movs	r2, #0
 8000250:	601a      	str	r2, [r3, #0]
 8000252:	809a      	strh	r2, [r3, #4]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000254:	f000 fb5c 	bl	8000910 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000258:	f000 f976 	bl	8000548 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800025c:	f000 fa04 	bl	8000668 <MX_GPIO_Init>
	MX_USB_DEVICE_Init();
 8000260:	f007 fcf8 	bl	8007c54 <MX_USB_DEVICE_Init>
	MX_SPI1_Init();
 8000264:	f000 f9ca 	bl	80005fc <MX_SPI1_Init>
	/* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); //Pull CS high
 8000268:	2201      	movs	r2, #1
 800026a:	2110      	movs	r1, #16
 800026c:	48b3      	ldr	r0, [pc, #716]	; (800053c <main+0x30c>)
 800026e:	f000 fe43 	bl	8000ef8 <HAL_GPIO_WritePin>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	cmd[0] = 0x00;
 8000272:	2300      	movs	r3, #0
 8000274:	f887 3830 	strb.w	r3, [r7, #2096]	; 0x830
	cmd[1] = 0x04;
 8000278:	2304      	movs	r3, #4
 800027a:	f887 3831 	strb.w	r3, [r7, #2097]	; 0x831
	int cellNumber = 1;
 800027e:	2301      	movs	r3, #1
 8000280:	f8c7 3858 	str.w	r3, [r7, #2136]	; 0x858
	while (1) {
		curr = HAL_GetTick(); //Record current timestamp
 8000284:	f000 fb9c 	bl	80009c0 <HAL_GetTick>
 8000288:	f8c7 0848 	str.w	r0, [r7, #2120]	; 0x848

		if (curr - prev > LTC_DELAY) {
 800028c:	f8d7 2848 	ldr.w	r2, [r7, #2120]	; 0x848
 8000290:	f8d7 385c 	ldr.w	r3, [r7, #2140]	; 0x85c
 8000294:	1ad3      	subs	r3, r2, r3
 8000296:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800029a:	d9f3      	bls.n	8000284 <main+0x54>
			char buf[20];
			char outbuf[2048] = "";
 800029c:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 80002a0:	f6a3 035c 	subw	r3, r3, #2140	; 0x85c
 80002a4:	2200      	movs	r2, #0
 80002a6:	601a      	str	r2, [r3, #0]
 80002a8:	3304      	adds	r3, #4
 80002aa:	f240 72fc 	movw	r2, #2044	; 0x7fc
 80002ae:	2100      	movs	r1, #0
 80002b0:	4618      	mov	r0, r3
 80002b2:	f008 f98b 	bl	80085cc <memset>
			char charToStr[2];

			charToStr[0] = '\n';
 80002b6:	230a      	movs	r3, #10
 80002b8:	f887 380c 	strb.w	r3, [r7, #2060]	; 0x80c
			charToStr[1] = '\0';
 80002bc:	2300      	movs	r3, #0
 80002be:	f887 380d 	strb.w	r3, [r7, #2061]	; 0x80d
			//cmd[0] = 0x07; //Returns 0xFF
			//cmd[1] = 0x12; //Returns 0xFF
			cmd_pec = pec15_calc(2, cmd);
 80002c2:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 80002c6:	4619      	mov	r1, r3
 80002c8:	2002      	movs	r0, #2
 80002ca:	f7ff ff7f 	bl	80001cc <pec15_calc>
 80002ce:	4603      	mov	r3, r0
 80002d0:	f8a7 3846 	strh.w	r3, [r7, #2118]	; 0x846
			cmd[2] = (uint8_t) (cmd_pec >> 8);
 80002d4:	f8b7 3846 	ldrh.w	r3, [r7, #2118]	; 0x846
 80002d8:	0a1b      	lsrs	r3, r3, #8
 80002da:	b29b      	uxth	r3, r3
 80002dc:	b2db      	uxtb	r3, r3
 80002de:	f887 3832 	strb.w	r3, [r7, #2098]	; 0x832
			cmd[3] = (uint8_t) (cmd_pec);
 80002e2:	f8b7 3846 	ldrh.w	r3, [r7, #2118]	; 0x846
 80002e6:	b2db      	uxtb	r3, r3
 80002e8:	f887 3833 	strb.w	r3, [r7, #2099]	; 0x833

			char dummy = 0xFF;
 80002ec:	23ff      	movs	r3, #255	; 0xff
 80002ee:	f887 3845 	strb.w	r3, [r7, #2117]	; 0x845
			HAL_SPI_Send(dummy);
 80002f2:	f897 3845 	ldrb.w	r3, [r7, #2117]	; 0x845
 80002f6:	4618      	mov	r0, r3
 80002f8:	f7ff ff28 	bl	800014c <HAL_SPI_Send>

			HAL_SPI_Recieve(cmd, read_val);
 80002fc:	f607 0224 	addw	r2, r7, #2084	; 0x824
 8000300:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 8000304:	4611      	mov	r1, r2
 8000306:	4618      	mov	r0, r3
 8000308:	f7ff ff3c 	bl	8000184 <HAL_SPI_Recieve>

			for (uint8_t i = 0; i < 6; i += 2) {
 800030c:	2300      	movs	r3, #0
 800030e:	f887 3857 	strb.w	r3, [r7, #2135]	; 0x857
 8000312:	e02d      	b.n	8000370 <main+0x140>
				uint16_t hb = (uint16_t) read_val[i + 1];
 8000314:	f897 3857 	ldrb.w	r3, [r7, #2135]	; 0x857
 8000318:	3301      	adds	r3, #1
 800031a:	f503 6306 	add.w	r3, r3, #2144	; 0x860
 800031e:	443b      	add	r3, r7
 8000320:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8000324:	f8a7 3842 	strh.w	r3, [r7, #2114]	; 0x842
				uint16_t lb = (uint16_t) read_val[i];
 8000328:	f897 3857 	ldrb.w	r3, [r7, #2135]	; 0x857
 800032c:	f503 6306 	add.w	r3, r3, #2144	; 0x860
 8000330:	443b      	add	r3, r7
 8000332:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8000336:	f8a7 3840 	strh.w	r3, [r7, #2112]	; 0x840
				uint16_t x = (hb << 8) | lb;
 800033a:	f8b7 3842 	ldrh.w	r3, [r7, #2114]	; 0x842
 800033e:	021b      	lsls	r3, r3, #8
 8000340:	b21a      	sxth	r2, r3
 8000342:	f9b7 3840 	ldrsh.w	r3, [r7, #2112]	; 0x840
 8000346:	4313      	orrs	r3, r2
 8000348:	b21b      	sxth	r3, r3
 800034a:	f8a7 383e 	strh.w	r3, [r7, #2110]	; 0x83e
				voltages[(int) (i / 2)] = x;
 800034e:	f897 3857 	ldrb.w	r3, [r7, #2135]	; 0x857
 8000352:	085b      	lsrs	r3, r3, #1
 8000354:	b2db      	uxtb	r3, r3
 8000356:	005b      	lsls	r3, r3, #1
 8000358:	f503 6306 	add.w	r3, r3, #2144	; 0x860
 800035c:	443b      	add	r3, r7
 800035e:	f8b7 283e 	ldrh.w	r2, [r7, #2110]	; 0x83e
 8000362:	f823 2c2c 	strh.w	r2, [r3, #-44]
			for (uint8_t i = 0; i < 6; i += 2) {
 8000366:	f897 3857 	ldrb.w	r3, [r7, #2135]	; 0x857
 800036a:	3302      	adds	r3, #2
 800036c:	f887 3857 	strb.w	r3, [r7, #2135]	; 0x857
 8000370:	f897 3857 	ldrb.w	r3, [r7, #2135]	; 0x857
 8000374:	2b05      	cmp	r3, #5
 8000376:	d9cd      	bls.n	8000314 <main+0xe4>
			 charToStr[0] = '\n';
			 strncat(outbuf, charToStr, 3);
			 CDC_Transmit_FS((uint8_t*)outbuf, sizeof(outbuf));
			 charToStr[0] = ' ';
			 */
			voltages[3] = (uint8_t) cmd[1];
 8000378:	f897 3831 	ldrb.w	r3, [r7, #2097]	; 0x831
 800037c:	b29b      	uxth	r3, r3
 800037e:	f8a7 383a 	strh.w	r3, [r7, #2106]	; 0x83a
			char values[7] = "";
 8000382:	2300      	movs	r3, #0
 8000384:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
 8000388:	f607 0308 	addw	r3, r7, #2056	; 0x808
 800038c:	2100      	movs	r1, #0
 800038e:	460a      	mov	r2, r1
 8000390:	801a      	strh	r2, [r3, #0]
 8000392:	460a      	mov	r2, r1
 8000394:	709a      	strb	r2, [r3, #2]

			for (int i = 0; i < 3; i++) {
 8000396:	2300      	movs	r3, #0
 8000398:	f8c7 3850 	str.w	r3, [r7, #2128]	; 0x850
 800039c:	e0a9      	b.n	80004f2 <main+0x2c2>

				//printing cv in right format
				for (int j = 5; j >= 0; j--) {
 800039e:	2305      	movs	r3, #5
 80003a0:	f8c7 384c 	str.w	r3, [r7, #2124]	; 0x84c
 80003a4:	e07c      	b.n	80004a0 <main+0x270>
					if (j > 1) {
 80003a6:	f8d7 384c 	ldr.w	r3, [r7, #2124]	; 0x84c
 80003aa:	2b01      	cmp	r3, #1
 80003ac:	dd31      	ble.n	8000412 <main+0x1e2>
						values[j] = (voltages[i] % 10) + '0';
 80003ae:	f8d7 3850 	ldr.w	r3, [r7, #2128]	; 0x850
 80003b2:	005b      	lsls	r3, r3, #1
 80003b4:	f503 6306 	add.w	r3, r3, #2144	; 0x860
 80003b8:	443b      	add	r3, r7
 80003ba:	f833 2c2c 	ldrh.w	r2, [r3, #-44]
 80003be:	4b60      	ldr	r3, [pc, #384]	; (8000540 <main+0x310>)
 80003c0:	fba3 1302 	umull	r1, r3, r3, r2
 80003c4:	08d9      	lsrs	r1, r3, #3
 80003c6:	460b      	mov	r3, r1
 80003c8:	009b      	lsls	r3, r3, #2
 80003ca:	440b      	add	r3, r1
 80003cc:	005b      	lsls	r3, r3, #1
 80003ce:	1ad3      	subs	r3, r2, r3
 80003d0:	b29b      	uxth	r3, r3
 80003d2:	b2db      	uxtb	r3, r3
 80003d4:	3330      	adds	r3, #48	; 0x30
 80003d6:	b2d9      	uxtb	r1, r3
 80003d8:	f607 0204 	addw	r2, r7, #2052	; 0x804
 80003dc:	f8d7 384c 	ldr.w	r3, [r7, #2124]	; 0x84c
 80003e0:	4413      	add	r3, r2
 80003e2:	460a      	mov	r2, r1
 80003e4:	701a      	strb	r2, [r3, #0]
						voltages[i] /= 10;
 80003e6:	f8d7 3850 	ldr.w	r3, [r7, #2128]	; 0x850
 80003ea:	005b      	lsls	r3, r3, #1
 80003ec:	f503 6306 	add.w	r3, r3, #2144	; 0x860
 80003f0:	443b      	add	r3, r7
 80003f2:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
 80003f6:	4a52      	ldr	r2, [pc, #328]	; (8000540 <main+0x310>)
 80003f8:	fba2 2303 	umull	r2, r3, r2, r3
 80003fc:	08db      	lsrs	r3, r3, #3
 80003fe:	b29a      	uxth	r2, r3
 8000400:	f8d7 3850 	ldr.w	r3, [r7, #2128]	; 0x850
 8000404:	005b      	lsls	r3, r3, #1
 8000406:	f503 6306 	add.w	r3, r3, #2144	; 0x860
 800040a:	443b      	add	r3, r7
 800040c:	f823 2c2c 	strh.w	r2, [r3, #-44]
 8000410:	e041      	b.n	8000496 <main+0x266>
					} else if (j == 1) {
 8000412:	f8d7 384c 	ldr.w	r3, [r7, #2124]	; 0x84c
 8000416:	2b01      	cmp	r3, #1
 8000418:	d13d      	bne.n	8000496 <main+0x266>
						values[j] = '.';
 800041a:	f607 0204 	addw	r2, r7, #2052	; 0x804
 800041e:	f8d7 384c 	ldr.w	r3, [r7, #2124]	; 0x84c
 8000422:	4413      	add	r3, r2
 8000424:	222e      	movs	r2, #46	; 0x2e
 8000426:	701a      	strb	r2, [r3, #0]
						values[j - 1] = (voltages[i] % 10) + '0';
 8000428:	f8d7 3850 	ldr.w	r3, [r7, #2128]	; 0x850
 800042c:	005b      	lsls	r3, r3, #1
 800042e:	f503 6306 	add.w	r3, r3, #2144	; 0x860
 8000432:	443b      	add	r3, r7
 8000434:	f833 2c2c 	ldrh.w	r2, [r3, #-44]
 8000438:	4b41      	ldr	r3, [pc, #260]	; (8000540 <main+0x310>)
 800043a:	fba3 1302 	umull	r1, r3, r3, r2
 800043e:	08d9      	lsrs	r1, r3, #3
 8000440:	460b      	mov	r3, r1
 8000442:	009b      	lsls	r3, r3, #2
 8000444:	440b      	add	r3, r1
 8000446:	005b      	lsls	r3, r3, #1
 8000448:	1ad3      	subs	r3, r2, r3
 800044a:	b29b      	uxth	r3, r3
 800044c:	b2da      	uxtb	r2, r3
 800044e:	f8d7 384c 	ldr.w	r3, [r7, #2124]	; 0x84c
 8000452:	3b01      	subs	r3, #1
 8000454:	3230      	adds	r2, #48	; 0x30
 8000456:	b2d2      	uxtb	r2, r2
 8000458:	f503 6306 	add.w	r3, r3, #2144	; 0x860
 800045c:	443b      	add	r3, r7
 800045e:	f803 2c5c 	strb.w	r2, [r3, #-92]
						voltages[i] /= 10;
 8000462:	f8d7 3850 	ldr.w	r3, [r7, #2128]	; 0x850
 8000466:	005b      	lsls	r3, r3, #1
 8000468:	f503 6306 	add.w	r3, r3, #2144	; 0x860
 800046c:	443b      	add	r3, r7
 800046e:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
 8000472:	4a33      	ldr	r2, [pc, #204]	; (8000540 <main+0x310>)
 8000474:	fba2 2303 	umull	r2, r3, r2, r3
 8000478:	08db      	lsrs	r3, r3, #3
 800047a:	b29a      	uxth	r2, r3
 800047c:	f8d7 3850 	ldr.w	r3, [r7, #2128]	; 0x850
 8000480:	005b      	lsls	r3, r3, #1
 8000482:	f503 6306 	add.w	r3, r3, #2144	; 0x860
 8000486:	443b      	add	r3, r7
 8000488:	f823 2c2c 	strh.w	r2, [r3, #-44]
						j--;
 800048c:	f8d7 384c 	ldr.w	r3, [r7, #2124]	; 0x84c
 8000490:	3b01      	subs	r3, #1
 8000492:	f8c7 384c 	str.w	r3, [r7, #2124]	; 0x84c
				for (int j = 5; j >= 0; j--) {
 8000496:	f8d7 384c 	ldr.w	r3, [r7, #2124]	; 0x84c
 800049a:	3b01      	subs	r3, #1
 800049c:	f8c7 384c 	str.w	r3, [r7, #2124]	; 0x84c
 80004a0:	f8d7 384c 	ldr.w	r3, [r7, #2124]	; 0x84c
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	f6bf af7e 	bge.w	80003a6 <main+0x176>
					}
				}
				values[6] = '\0';
 80004aa:	2300      	movs	r3, #0
 80004ac:	f887 380a 	strb.w	r3, [r7, #2058]	; 0x80a

				sprintf(buf, "Cell %d: %sV", cellNumber, values);
 80004b0:	f607 0304 	addw	r3, r7, #2052	; 0x804
 80004b4:	f507 6001 	add.w	r0, r7, #2064	; 0x810
 80004b8:	f8d7 2858 	ldr.w	r2, [r7, #2136]	; 0x858
 80004bc:	4921      	ldr	r1, [pc, #132]	; (8000544 <main+0x314>)
 80004be:	f008 f865 	bl	800858c <siprintf>
				strncat(outbuf, buf, 20);
 80004c2:	f507 6101 	add.w	r1, r7, #2064	; 0x810
 80004c6:	1d3b      	adds	r3, r7, #4
 80004c8:	2214      	movs	r2, #20
 80004ca:	4618      	mov	r0, r3
 80004cc:	f008 f886 	bl	80085dc <strncat>
				strncat(outbuf, charToStr, 3);
 80004d0:	f607 010c 	addw	r1, r7, #2060	; 0x80c
 80004d4:	1d3b      	adds	r3, r7, #4
 80004d6:	2203      	movs	r2, #3
 80004d8:	4618      	mov	r0, r3
 80004da:	f008 f87f 	bl	80085dc <strncat>
				cellNumber++;
 80004de:	f8d7 3858 	ldr.w	r3, [r7, #2136]	; 0x858
 80004e2:	3301      	adds	r3, #1
 80004e4:	f8c7 3858 	str.w	r3, [r7, #2136]	; 0x858
			for (int i = 0; i < 3; i++) {
 80004e8:	f8d7 3850 	ldr.w	r3, [r7, #2128]	; 0x850
 80004ec:	3301      	adds	r3, #1
 80004ee:	f8c7 3850 	str.w	r3, [r7, #2128]	; 0x850
 80004f2:	f8d7 3850 	ldr.w	r3, [r7, #2128]	; 0x850
 80004f6:	2b02      	cmp	r3, #2
 80004f8:	f77f af51 	ble.w	800039e <main+0x16e>
			}
			charToStr[0] = '\n';
 80004fc:	230a      	movs	r3, #10
 80004fe:	f887 380c 	strb.w	r3, [r7, #2060]	; 0x80c
			//strncat(outbuf, charToStr, 3);

			CDC_Transmit_FS((uint8_t*) outbuf, sizeof(outbuf));
 8000502:	1d3b      	adds	r3, r7, #4
 8000504:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000508:	4618      	mov	r0, r3
 800050a:	f007 fc61 	bl	8007dd0 <CDC_Transmit_FS>
			 charToStr[0] = '\n';
			 strncat(outbuf, charToStr, 3);
			 CDC_Transmit_FS((uint8_t*)outbuf, sizeof(outbuf));
			 */

			if (cmd[1] == 0x0A) {
 800050e:	f897 3831 	ldrb.w	r3, [r7, #2097]	; 0x831
 8000512:	2b0a      	cmp	r3, #10
 8000514:	d106      	bne.n	8000524 <main+0x2f4>
				cmd[1] = 0x04;
 8000516:	2304      	movs	r3, #4
 8000518:	f887 3831 	strb.w	r3, [r7, #2097]	; 0x831
				cellNumber = 1;
 800051c:	2301      	movs	r3, #1
 800051e:	f8c7 3858 	str.w	r3, [r7, #2136]	; 0x858
 8000522:	e005      	b.n	8000530 <main+0x300>
			} else {
				cmd[1] += 2;
 8000524:	f897 3831 	ldrb.w	r3, [r7, #2097]	; 0x831
 8000528:	3302      	adds	r3, #2
 800052a:	b2db      	uxtb	r3, r3
 800052c:	f887 3831 	strb.w	r3, [r7, #2097]	; 0x831
			}

			prev = curr;
 8000530:	f8d7 3848 	ldr.w	r3, [r7, #2120]	; 0x848
 8000534:	f8c7 385c 	str.w	r3, [r7, #2140]	; 0x85c
		curr = HAL_GetTick(); //Record current timestamp
 8000538:	e6a4      	b.n	8000284 <main+0x54>
 800053a:	bf00      	nop
 800053c:	40010800 	.word	0x40010800
 8000540:	cccccccd 	.word	0xcccccccd
 8000544:	08008f48 	.word	0x08008f48

08000548 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000548:	b580      	push	{r7, lr}
 800054a:	b094      	sub	sp, #80	; 0x50
 800054c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800054e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000552:	2228      	movs	r2, #40	; 0x28
 8000554:	2100      	movs	r1, #0
 8000556:	4618      	mov	r0, r3
 8000558:	f008 f838 	bl	80085cc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800055c:	f107 0314 	add.w	r3, r7, #20
 8000560:	2200      	movs	r2, #0
 8000562:	601a      	str	r2, [r3, #0]
 8000564:	605a      	str	r2, [r3, #4]
 8000566:	609a      	str	r2, [r3, #8]
 8000568:	60da      	str	r2, [r3, #12]
 800056a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 800056c:	1d3b      	adds	r3, r7, #4
 800056e:	2200      	movs	r2, #0
 8000570:	601a      	str	r2, [r3, #0]
 8000572:	605a      	str	r2, [r3, #4]
 8000574:	609a      	str	r2, [r3, #8]
 8000576:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000578:	2301      	movs	r3, #1
 800057a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800057c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000580:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000582:	2300      	movs	r3, #0
 8000584:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000586:	2301      	movs	r3, #1
 8000588:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058a:	2302      	movs	r3, #2
 800058c:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800058e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000592:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000594:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000598:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800059a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800059e:	4618      	mov	r0, r3
 80005a0:	f002 fa30 	bl	8002a04 <HAL_RCC_OscConfig>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <SystemClock_Config+0x66>
		Error_Handler();
 80005aa:	f000 f89b 	bl	80006e4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80005ae:	230f      	movs	r3, #15
 80005b0:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b2:	2302      	movs	r3, #2
 80005b4:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b6:	2300      	movs	r3, #0
 80005b8:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005be:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c0:	2300      	movs	r3, #0
 80005c2:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80005c4:	f107 0314 	add.w	r3, r7, #20
 80005c8:	2102      	movs	r1, #2
 80005ca:	4618      	mov	r0, r3
 80005cc:	f002 fc9c 	bl	8002f08 <HAL_RCC_ClockConfig>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <SystemClock_Config+0x92>
		Error_Handler();
 80005d6:	f000 f885 	bl	80006e4 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80005da:	2310      	movs	r3, #16
 80005dc:	607b      	str	r3, [r7, #4]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80005de:	2300      	movs	r3, #0
 80005e0:	613b      	str	r3, [r7, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80005e2:	1d3b      	adds	r3, r7, #4
 80005e4:	4618      	mov	r0, r3
 80005e6:	f002 fdeb 	bl	80031c0 <HAL_RCCEx_PeriphCLKConfig>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <SystemClock_Config+0xac>
		Error_Handler();
 80005f0:	f000 f878 	bl	80006e4 <Error_Handler>
	}
}
 80005f4:	bf00      	nop
 80005f6:	3750      	adds	r7, #80	; 0x50
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}

080005fc <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000600:	4b17      	ldr	r3, [pc, #92]	; (8000660 <MX_SPI1_Init+0x64>)
 8000602:	4a18      	ldr	r2, [pc, #96]	; (8000664 <MX_SPI1_Init+0x68>)
 8000604:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000606:	4b16      	ldr	r3, [pc, #88]	; (8000660 <MX_SPI1_Init+0x64>)
 8000608:	f44f 7282 	mov.w	r2, #260	; 0x104
 800060c:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800060e:	4b14      	ldr	r3, [pc, #80]	; (8000660 <MX_SPI1_Init+0x64>)
 8000610:	2200      	movs	r2, #0
 8000612:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000614:	4b12      	ldr	r3, [pc, #72]	; (8000660 <MX_SPI1_Init+0x64>)
 8000616:	2200      	movs	r2, #0
 8000618:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800061a:	4b11      	ldr	r3, [pc, #68]	; (8000660 <MX_SPI1_Init+0x64>)
 800061c:	2200      	movs	r2, #0
 800061e:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000620:	4b0f      	ldr	r3, [pc, #60]	; (8000660 <MX_SPI1_Init+0x64>)
 8000622:	2200      	movs	r2, #0
 8000624:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000626:	4b0e      	ldr	r3, [pc, #56]	; (8000660 <MX_SPI1_Init+0x64>)
 8000628:	f44f 7200 	mov.w	r2, #512	; 0x200
 800062c:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800062e:	4b0c      	ldr	r3, [pc, #48]	; (8000660 <MX_SPI1_Init+0x64>)
 8000630:	2228      	movs	r2, #40	; 0x28
 8000632:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000634:	4b0a      	ldr	r3, [pc, #40]	; (8000660 <MX_SPI1_Init+0x64>)
 8000636:	2200      	movs	r2, #0
 8000638:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800063a:	4b09      	ldr	r3, [pc, #36]	; (8000660 <MX_SPI1_Init+0x64>)
 800063c:	2200      	movs	r2, #0
 800063e:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000640:	4b07      	ldr	r3, [pc, #28]	; (8000660 <MX_SPI1_Init+0x64>)
 8000642:	2200      	movs	r2, #0
 8000644:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8000646:	4b06      	ldr	r3, [pc, #24]	; (8000660 <MX_SPI1_Init+0x64>)
 8000648:	220a      	movs	r2, #10
 800064a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 800064c:	4804      	ldr	r0, [pc, #16]	; (8000660 <MX_SPI1_Init+0x64>)
 800064e:	f002 fe6d 	bl	800332c <HAL_SPI_Init>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_SPI1_Init+0x60>
		Error_Handler();
 8000658:	f000 f844 	bl	80006e4 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 800065c:	bf00      	nop
 800065e:	bd80      	pop	{r7, pc}
 8000660:	200001e8 	.word	0x200001e8
 8000664:	40013000 	.word	0x40013000

08000668 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000668:	b580      	push	{r7, lr}
 800066a:	b086      	sub	sp, #24
 800066c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800066e:	f107 0308 	add.w	r3, r7, #8
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
 8000676:	605a      	str	r2, [r3, #4]
 8000678:	609a      	str	r2, [r3, #8]
 800067a:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800067c:	4b17      	ldr	r3, [pc, #92]	; (80006dc <MX_GPIO_Init+0x74>)
 800067e:	699b      	ldr	r3, [r3, #24]
 8000680:	4a16      	ldr	r2, [pc, #88]	; (80006dc <MX_GPIO_Init+0x74>)
 8000682:	f043 0320 	orr.w	r3, r3, #32
 8000686:	6193      	str	r3, [r2, #24]
 8000688:	4b14      	ldr	r3, [pc, #80]	; (80006dc <MX_GPIO_Init+0x74>)
 800068a:	699b      	ldr	r3, [r3, #24]
 800068c:	f003 0320 	and.w	r3, r3, #32
 8000690:	607b      	str	r3, [r7, #4]
 8000692:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <MX_GPIO_Init+0x74>)
 8000696:	699b      	ldr	r3, [r3, #24]
 8000698:	4a10      	ldr	r2, [pc, #64]	; (80006dc <MX_GPIO_Init+0x74>)
 800069a:	f043 0304 	orr.w	r3, r3, #4
 800069e:	6193      	str	r3, [r2, #24]
 80006a0:	4b0e      	ldr	r3, [pc, #56]	; (80006dc <MX_GPIO_Init+0x74>)
 80006a2:	699b      	ldr	r3, [r3, #24]
 80006a4:	f003 0304 	and.w	r3, r3, #4
 80006a8:	603b      	str	r3, [r7, #0]
 80006aa:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LTC_nCS_GPIO_Port, LTC_nCS_Pin, GPIO_PIN_RESET);
 80006ac:	2200      	movs	r2, #0
 80006ae:	2110      	movs	r1, #16
 80006b0:	480b      	ldr	r0, [pc, #44]	; (80006e0 <MX_GPIO_Init+0x78>)
 80006b2:	f000 fc21 	bl	8000ef8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LTC_nCS_Pin */
	GPIO_InitStruct.Pin = LTC_nCS_Pin;
 80006b6:	2310      	movs	r3, #16
 80006b8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ba:	2301      	movs	r3, #1
 80006bc:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006be:	2300      	movs	r3, #0
 80006c0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c2:	2302      	movs	r3, #2
 80006c4:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(LTC_nCS_GPIO_Port, &GPIO_InitStruct);
 80006c6:	f107 0308 	add.w	r3, r7, #8
 80006ca:	4619      	mov	r1, r3
 80006cc:	4804      	ldr	r0, [pc, #16]	; (80006e0 <MX_GPIO_Init+0x78>)
 80006ce:	f000 fa8f 	bl	8000bf0 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80006d2:	bf00      	nop
 80006d4:	3718      	adds	r7, #24
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	40021000 	.word	0x40021000
 80006e0:	40010800 	.word	0x40010800

080006e4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006e8:	b672      	cpsid	i
}
 80006ea:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80006ec:	e7fe      	b.n	80006ec <Error_Handler+0x8>
	...

080006f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b085      	sub	sp, #20
 80006f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006f6:	4b15      	ldr	r3, [pc, #84]	; (800074c <HAL_MspInit+0x5c>)
 80006f8:	699b      	ldr	r3, [r3, #24]
 80006fa:	4a14      	ldr	r2, [pc, #80]	; (800074c <HAL_MspInit+0x5c>)
 80006fc:	f043 0301 	orr.w	r3, r3, #1
 8000700:	6193      	str	r3, [r2, #24]
 8000702:	4b12      	ldr	r3, [pc, #72]	; (800074c <HAL_MspInit+0x5c>)
 8000704:	699b      	ldr	r3, [r3, #24]
 8000706:	f003 0301 	and.w	r3, r3, #1
 800070a:	60bb      	str	r3, [r7, #8]
 800070c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800070e:	4b0f      	ldr	r3, [pc, #60]	; (800074c <HAL_MspInit+0x5c>)
 8000710:	69db      	ldr	r3, [r3, #28]
 8000712:	4a0e      	ldr	r2, [pc, #56]	; (800074c <HAL_MspInit+0x5c>)
 8000714:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000718:	61d3      	str	r3, [r2, #28]
 800071a:	4b0c      	ldr	r3, [pc, #48]	; (800074c <HAL_MspInit+0x5c>)
 800071c:	69db      	ldr	r3, [r3, #28]
 800071e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000726:	4b0a      	ldr	r3, [pc, #40]	; (8000750 <HAL_MspInit+0x60>)
 8000728:	685b      	ldr	r3, [r3, #4]
 800072a:	60fb      	str	r3, [r7, #12]
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000732:	60fb      	str	r3, [r7, #12]
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800073a:	60fb      	str	r3, [r7, #12]
 800073c:	4a04      	ldr	r2, [pc, #16]	; (8000750 <HAL_MspInit+0x60>)
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000742:	bf00      	nop
 8000744:	3714      	adds	r7, #20
 8000746:	46bd      	mov	sp, r7
 8000748:	bc80      	pop	{r7}
 800074a:	4770      	bx	lr
 800074c:	40021000 	.word	0x40021000
 8000750:	40010000 	.word	0x40010000

08000754 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b088      	sub	sp, #32
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075c:	f107 0310 	add.w	r3, r7, #16
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	605a      	str	r2, [r3, #4]
 8000766:	609a      	str	r2, [r3, #8]
 8000768:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	4a1b      	ldr	r2, [pc, #108]	; (80007dc <HAL_SPI_MspInit+0x88>)
 8000770:	4293      	cmp	r3, r2
 8000772:	d12f      	bne.n	80007d4 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000774:	4b1a      	ldr	r3, [pc, #104]	; (80007e0 <HAL_SPI_MspInit+0x8c>)
 8000776:	699b      	ldr	r3, [r3, #24]
 8000778:	4a19      	ldr	r2, [pc, #100]	; (80007e0 <HAL_SPI_MspInit+0x8c>)
 800077a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800077e:	6193      	str	r3, [r2, #24]
 8000780:	4b17      	ldr	r3, [pc, #92]	; (80007e0 <HAL_SPI_MspInit+0x8c>)
 8000782:	699b      	ldr	r3, [r3, #24]
 8000784:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000788:	60fb      	str	r3, [r7, #12]
 800078a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800078c:	4b14      	ldr	r3, [pc, #80]	; (80007e0 <HAL_SPI_MspInit+0x8c>)
 800078e:	699b      	ldr	r3, [r3, #24]
 8000790:	4a13      	ldr	r2, [pc, #76]	; (80007e0 <HAL_SPI_MspInit+0x8c>)
 8000792:	f043 0304 	orr.w	r3, r3, #4
 8000796:	6193      	str	r3, [r2, #24]
 8000798:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <HAL_SPI_MspInit+0x8c>)
 800079a:	699b      	ldr	r3, [r3, #24]
 800079c:	f003 0304 	and.w	r3, r3, #4
 80007a0:	60bb      	str	r3, [r7, #8]
 80007a2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80007a4:	23a0      	movs	r3, #160	; 0xa0
 80007a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a8:	2302      	movs	r3, #2
 80007aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007ac:	2303      	movs	r3, #3
 80007ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b0:	f107 0310 	add.w	r3, r7, #16
 80007b4:	4619      	mov	r1, r3
 80007b6:	480b      	ldr	r0, [pc, #44]	; (80007e4 <HAL_SPI_MspInit+0x90>)
 80007b8:	f000 fa1a 	bl	8000bf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80007bc:	2340      	movs	r3, #64	; 0x40
 80007be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007c0:	2300      	movs	r3, #0
 80007c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c8:	f107 0310 	add.w	r3, r7, #16
 80007cc:	4619      	mov	r1, r3
 80007ce:	4805      	ldr	r0, [pc, #20]	; (80007e4 <HAL_SPI_MspInit+0x90>)
 80007d0:	f000 fa0e 	bl	8000bf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80007d4:	bf00      	nop
 80007d6:	3720      	adds	r7, #32
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	40013000 	.word	0x40013000
 80007e0:	40021000 	.word	0x40021000
 80007e4:	40010800 	.word	0x40010800

080007e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007ec:	e7fe      	b.n	80007ec <NMI_Handler+0x4>

080007ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ee:	b480      	push	{r7}
 80007f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007f2:	e7fe      	b.n	80007f2 <HardFault_Handler+0x4>

080007f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007f8:	e7fe      	b.n	80007f8 <MemManage_Handler+0x4>

080007fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007fa:	b480      	push	{r7}
 80007fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007fe:	e7fe      	b.n	80007fe <BusFault_Handler+0x4>

08000800 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000804:	e7fe      	b.n	8000804 <UsageFault_Handler+0x4>

08000806 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000806:	b480      	push	{r7}
 8000808:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800080a:	bf00      	nop
 800080c:	46bd      	mov	sp, r7
 800080e:	bc80      	pop	{r7}
 8000810:	4770      	bx	lr

08000812 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000812:	b480      	push	{r7}
 8000814:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000816:	bf00      	nop
 8000818:	46bd      	mov	sp, r7
 800081a:	bc80      	pop	{r7}
 800081c:	4770      	bx	lr

0800081e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800081e:	b480      	push	{r7}
 8000820:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000822:	bf00      	nop
 8000824:	46bd      	mov	sp, r7
 8000826:	bc80      	pop	{r7}
 8000828:	4770      	bx	lr

0800082a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800082a:	b580      	push	{r7, lr}
 800082c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800082e:	f000 f8b5 	bl	800099c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
	...

08000838 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800083c:	4802      	ldr	r0, [pc, #8]	; (8000848 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800083e:	f000 fc98 	bl	8001172 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	20000f10 	.word	0x20000f10

0800084c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b086      	sub	sp, #24
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000854:	4a14      	ldr	r2, [pc, #80]	; (80008a8 <_sbrk+0x5c>)
 8000856:	4b15      	ldr	r3, [pc, #84]	; (80008ac <_sbrk+0x60>)
 8000858:	1ad3      	subs	r3, r2, r3
 800085a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800085c:	697b      	ldr	r3, [r7, #20]
 800085e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000860:	4b13      	ldr	r3, [pc, #76]	; (80008b0 <_sbrk+0x64>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d102      	bne.n	800086e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000868:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <_sbrk+0x64>)
 800086a:	4a12      	ldr	r2, [pc, #72]	; (80008b4 <_sbrk+0x68>)
 800086c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800086e:	4b10      	ldr	r3, [pc, #64]	; (80008b0 <_sbrk+0x64>)
 8000870:	681a      	ldr	r2, [r3, #0]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	4413      	add	r3, r2
 8000876:	693a      	ldr	r2, [r7, #16]
 8000878:	429a      	cmp	r2, r3
 800087a:	d207      	bcs.n	800088c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800087c:	f007 fec2 	bl	8008604 <__errno>
 8000880:	4603      	mov	r3, r0
 8000882:	220c      	movs	r2, #12
 8000884:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000886:	f04f 33ff 	mov.w	r3, #4294967295
 800088a:	e009      	b.n	80008a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800088c:	4b08      	ldr	r3, [pc, #32]	; (80008b0 <_sbrk+0x64>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000892:	4b07      	ldr	r3, [pc, #28]	; (80008b0 <_sbrk+0x64>)
 8000894:	681a      	ldr	r2, [r3, #0]
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	4413      	add	r3, r2
 800089a:	4a05      	ldr	r2, [pc, #20]	; (80008b0 <_sbrk+0x64>)
 800089c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800089e:	68fb      	ldr	r3, [r7, #12]
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	3718      	adds	r7, #24
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	20005000 	.word	0x20005000
 80008ac:	00000400 	.word	0x00000400
 80008b0:	20000240 	.word	0x20000240
 80008b4:	20001568 	.word	0x20001568

080008b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008bc:	bf00      	nop
 80008be:	46bd      	mov	sp, r7
 80008c0:	bc80      	pop	{r7}
 80008c2:	4770      	bx	lr

080008c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008c4:	f7ff fff8 	bl	80008b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008c8:	480b      	ldr	r0, [pc, #44]	; (80008f8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80008ca:	490c      	ldr	r1, [pc, #48]	; (80008fc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80008cc:	4a0c      	ldr	r2, [pc, #48]	; (8000900 <LoopFillZerobss+0x16>)
  movs r3, #0
 80008ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008d0:	e002      	b.n	80008d8 <LoopCopyDataInit>

080008d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008d6:	3304      	adds	r3, #4

080008d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008dc:	d3f9      	bcc.n	80008d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008de:	4a09      	ldr	r2, [pc, #36]	; (8000904 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80008e0:	4c09      	ldr	r4, [pc, #36]	; (8000908 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008e4:	e001      	b.n	80008ea <LoopFillZerobss>

080008e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008e8:	3204      	adds	r2, #4

080008ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008ec:	d3fb      	bcc.n	80008e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008ee:	f007 fe8f 	bl	8008610 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008f2:	f7ff fc9d 	bl	8000230 <main>
  bx lr
 80008f6:	4770      	bx	lr
  ldr r0, =_sdata
 80008f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008fc:	200001cc 	.word	0x200001cc
  ldr r2, =_sidata
 8000900:	08009400 	.word	0x08009400
  ldr r2, =_sbss
 8000904:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 8000908:	20001568 	.word	0x20001568

0800090c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800090c:	e7fe      	b.n	800090c <ADC1_2_IRQHandler>
	...

08000910 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000914:	4b08      	ldr	r3, [pc, #32]	; (8000938 <HAL_Init+0x28>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a07      	ldr	r2, [pc, #28]	; (8000938 <HAL_Init+0x28>)
 800091a:	f043 0310 	orr.w	r3, r3, #16
 800091e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000920:	2003      	movs	r0, #3
 8000922:	f000 f923 	bl	8000b6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000926:	200f      	movs	r0, #15
 8000928:	f000 f808 	bl	800093c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800092c:	f7ff fee0 	bl	80006f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000930:	2300      	movs	r3, #0
}
 8000932:	4618      	mov	r0, r3
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40022000 	.word	0x40022000

0800093c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000944:	4b12      	ldr	r3, [pc, #72]	; (8000990 <HAL_InitTick+0x54>)
 8000946:	681a      	ldr	r2, [r3, #0]
 8000948:	4b12      	ldr	r3, [pc, #72]	; (8000994 <HAL_InitTick+0x58>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	4619      	mov	r1, r3
 800094e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000952:	fbb3 f3f1 	udiv	r3, r3, r1
 8000956:	fbb2 f3f3 	udiv	r3, r2, r3
 800095a:	4618      	mov	r0, r3
 800095c:	f000 f93b 	bl	8000bd6 <HAL_SYSTICK_Config>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000966:	2301      	movs	r3, #1
 8000968:	e00e      	b.n	8000988 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	2b0f      	cmp	r3, #15
 800096e:	d80a      	bhi.n	8000986 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000970:	2200      	movs	r2, #0
 8000972:	6879      	ldr	r1, [r7, #4]
 8000974:	f04f 30ff 	mov.w	r0, #4294967295
 8000978:	f000 f903 	bl	8000b82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800097c:	4a06      	ldr	r2, [pc, #24]	; (8000998 <HAL_InitTick+0x5c>)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000982:	2300      	movs	r3, #0
 8000984:	e000      	b.n	8000988 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000986:	2301      	movs	r3, #1
}
 8000988:	4618      	mov	r0, r3
 800098a:	3708      	adds	r7, #8
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	20000000 	.word	0x20000000
 8000994:	20000008 	.word	0x20000008
 8000998:	20000004 	.word	0x20000004

0800099c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009a0:	4b05      	ldr	r3, [pc, #20]	; (80009b8 <HAL_IncTick+0x1c>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	461a      	mov	r2, r3
 80009a6:	4b05      	ldr	r3, [pc, #20]	; (80009bc <HAL_IncTick+0x20>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	4413      	add	r3, r2
 80009ac:	4a03      	ldr	r2, [pc, #12]	; (80009bc <HAL_IncTick+0x20>)
 80009ae:	6013      	str	r3, [r2, #0]
}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bc80      	pop	{r7}
 80009b6:	4770      	bx	lr
 80009b8:	20000008 	.word	0x20000008
 80009bc:	20000244 	.word	0x20000244

080009c0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  return uwTick;
 80009c4:	4b02      	ldr	r3, [pc, #8]	; (80009d0 <HAL_GetTick+0x10>)
 80009c6:	681b      	ldr	r3, [r3, #0]
}
 80009c8:	4618      	mov	r0, r3
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bc80      	pop	{r7}
 80009ce:	4770      	bx	lr
 80009d0:	20000244 	.word	0x20000244

080009d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b085      	sub	sp, #20
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	f003 0307 	and.w	r3, r3, #7
 80009e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009e4:	4b0c      	ldr	r3, [pc, #48]	; (8000a18 <__NVIC_SetPriorityGrouping+0x44>)
 80009e6:	68db      	ldr	r3, [r3, #12]
 80009e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009ea:	68ba      	ldr	r2, [r7, #8]
 80009ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009f0:	4013      	ands	r3, r2
 80009f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a06:	4a04      	ldr	r2, [pc, #16]	; (8000a18 <__NVIC_SetPriorityGrouping+0x44>)
 8000a08:	68bb      	ldr	r3, [r7, #8]
 8000a0a:	60d3      	str	r3, [r2, #12]
}
 8000a0c:	bf00      	nop
 8000a0e:	3714      	adds	r7, #20
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bc80      	pop	{r7}
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	e000ed00 	.word	0xe000ed00

08000a1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a20:	4b04      	ldr	r3, [pc, #16]	; (8000a34 <__NVIC_GetPriorityGrouping+0x18>)
 8000a22:	68db      	ldr	r3, [r3, #12]
 8000a24:	0a1b      	lsrs	r3, r3, #8
 8000a26:	f003 0307 	and.w	r3, r3, #7
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bc80      	pop	{r7}
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	e000ed00 	.word	0xe000ed00

08000a38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	db0b      	blt.n	8000a62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a4a:	79fb      	ldrb	r3, [r7, #7]
 8000a4c:	f003 021f 	and.w	r2, r3, #31
 8000a50:	4906      	ldr	r1, [pc, #24]	; (8000a6c <__NVIC_EnableIRQ+0x34>)
 8000a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a56:	095b      	lsrs	r3, r3, #5
 8000a58:	2001      	movs	r0, #1
 8000a5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a62:	bf00      	nop
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bc80      	pop	{r7}
 8000a6a:	4770      	bx	lr
 8000a6c:	e000e100 	.word	0xe000e100

08000a70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4603      	mov	r3, r0
 8000a78:	6039      	str	r1, [r7, #0]
 8000a7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	db0a      	blt.n	8000a9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	b2da      	uxtb	r2, r3
 8000a88:	490c      	ldr	r1, [pc, #48]	; (8000abc <__NVIC_SetPriority+0x4c>)
 8000a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8e:	0112      	lsls	r2, r2, #4
 8000a90:	b2d2      	uxtb	r2, r2
 8000a92:	440b      	add	r3, r1
 8000a94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a98:	e00a      	b.n	8000ab0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	b2da      	uxtb	r2, r3
 8000a9e:	4908      	ldr	r1, [pc, #32]	; (8000ac0 <__NVIC_SetPriority+0x50>)
 8000aa0:	79fb      	ldrb	r3, [r7, #7]
 8000aa2:	f003 030f 	and.w	r3, r3, #15
 8000aa6:	3b04      	subs	r3, #4
 8000aa8:	0112      	lsls	r2, r2, #4
 8000aaa:	b2d2      	uxtb	r2, r2
 8000aac:	440b      	add	r3, r1
 8000aae:	761a      	strb	r2, [r3, #24]
}
 8000ab0:	bf00      	nop
 8000ab2:	370c      	adds	r7, #12
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bc80      	pop	{r7}
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	e000e100 	.word	0xe000e100
 8000ac0:	e000ed00 	.word	0xe000ed00

08000ac4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b089      	sub	sp, #36	; 0x24
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	60f8      	str	r0, [r7, #12]
 8000acc:	60b9      	str	r1, [r7, #8]
 8000ace:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	f003 0307 	and.w	r3, r3, #7
 8000ad6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ad8:	69fb      	ldr	r3, [r7, #28]
 8000ada:	f1c3 0307 	rsb	r3, r3, #7
 8000ade:	2b04      	cmp	r3, #4
 8000ae0:	bf28      	it	cs
 8000ae2:	2304      	movcs	r3, #4
 8000ae4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ae6:	69fb      	ldr	r3, [r7, #28]
 8000ae8:	3304      	adds	r3, #4
 8000aea:	2b06      	cmp	r3, #6
 8000aec:	d902      	bls.n	8000af4 <NVIC_EncodePriority+0x30>
 8000aee:	69fb      	ldr	r3, [r7, #28]
 8000af0:	3b03      	subs	r3, #3
 8000af2:	e000      	b.n	8000af6 <NVIC_EncodePriority+0x32>
 8000af4:	2300      	movs	r3, #0
 8000af6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af8:	f04f 32ff 	mov.w	r2, #4294967295
 8000afc:	69bb      	ldr	r3, [r7, #24]
 8000afe:	fa02 f303 	lsl.w	r3, r2, r3
 8000b02:	43da      	mvns	r2, r3
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	401a      	ands	r2, r3
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	fa01 f303 	lsl.w	r3, r1, r3
 8000b16:	43d9      	mvns	r1, r3
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b1c:	4313      	orrs	r3, r2
         );
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3724      	adds	r7, #36	; 0x24
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bc80      	pop	{r7}
 8000b26:	4770      	bx	lr

08000b28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	3b01      	subs	r3, #1
 8000b34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b38:	d301      	bcc.n	8000b3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	e00f      	b.n	8000b5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b3e:	4a0a      	ldr	r2, [pc, #40]	; (8000b68 <SysTick_Config+0x40>)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	3b01      	subs	r3, #1
 8000b44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b46:	210f      	movs	r1, #15
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295
 8000b4c:	f7ff ff90 	bl	8000a70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b50:	4b05      	ldr	r3, [pc, #20]	; (8000b68 <SysTick_Config+0x40>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b56:	4b04      	ldr	r3, [pc, #16]	; (8000b68 <SysTick_Config+0x40>)
 8000b58:	2207      	movs	r2, #7
 8000b5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b5c:	2300      	movs	r3, #0
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	e000e010 	.word	0xe000e010

08000b6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b74:	6878      	ldr	r0, [r7, #4]
 8000b76:	f7ff ff2d 	bl	80009d4 <__NVIC_SetPriorityGrouping>
}
 8000b7a:	bf00      	nop
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}

08000b82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b82:	b580      	push	{r7, lr}
 8000b84:	b086      	sub	sp, #24
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	4603      	mov	r3, r0
 8000b8a:	60b9      	str	r1, [r7, #8]
 8000b8c:	607a      	str	r2, [r7, #4]
 8000b8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b90:	2300      	movs	r3, #0
 8000b92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b94:	f7ff ff42 	bl	8000a1c <__NVIC_GetPriorityGrouping>
 8000b98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b9a:	687a      	ldr	r2, [r7, #4]
 8000b9c:	68b9      	ldr	r1, [r7, #8]
 8000b9e:	6978      	ldr	r0, [r7, #20]
 8000ba0:	f7ff ff90 	bl	8000ac4 <NVIC_EncodePriority>
 8000ba4:	4602      	mov	r2, r0
 8000ba6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000baa:	4611      	mov	r1, r2
 8000bac:	4618      	mov	r0, r3
 8000bae:	f7ff ff5f 	bl	8000a70 <__NVIC_SetPriority>
}
 8000bb2:	bf00      	nop
 8000bb4:	3718      	adds	r7, #24
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	b082      	sub	sp, #8
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff ff35 	bl	8000a38 <__NVIC_EnableIRQ>
}
 8000bce:	bf00      	nop
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}

08000bd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bd6:	b580      	push	{r7, lr}
 8000bd8:	b082      	sub	sp, #8
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bde:	6878      	ldr	r0, [r7, #4]
 8000be0:	f7ff ffa2 	bl	8000b28 <SysTick_Config>
 8000be4:	4603      	mov	r3, r0
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
	...

08000bf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b08b      	sub	sp, #44	; 0x2c
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
 8000bf8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c02:	e169      	b.n	8000ed8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c04:	2201      	movs	r2, #1
 8000c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c08:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	69fa      	ldr	r2, [r7, #28]
 8000c14:	4013      	ands	r3, r2
 8000c16:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c18:	69ba      	ldr	r2, [r7, #24]
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	f040 8158 	bne.w	8000ed2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	4a9a      	ldr	r2, [pc, #616]	; (8000e90 <HAL_GPIO_Init+0x2a0>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d05e      	beq.n	8000cea <HAL_GPIO_Init+0xfa>
 8000c2c:	4a98      	ldr	r2, [pc, #608]	; (8000e90 <HAL_GPIO_Init+0x2a0>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d875      	bhi.n	8000d1e <HAL_GPIO_Init+0x12e>
 8000c32:	4a98      	ldr	r2, [pc, #608]	; (8000e94 <HAL_GPIO_Init+0x2a4>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d058      	beq.n	8000cea <HAL_GPIO_Init+0xfa>
 8000c38:	4a96      	ldr	r2, [pc, #600]	; (8000e94 <HAL_GPIO_Init+0x2a4>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d86f      	bhi.n	8000d1e <HAL_GPIO_Init+0x12e>
 8000c3e:	4a96      	ldr	r2, [pc, #600]	; (8000e98 <HAL_GPIO_Init+0x2a8>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d052      	beq.n	8000cea <HAL_GPIO_Init+0xfa>
 8000c44:	4a94      	ldr	r2, [pc, #592]	; (8000e98 <HAL_GPIO_Init+0x2a8>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d869      	bhi.n	8000d1e <HAL_GPIO_Init+0x12e>
 8000c4a:	4a94      	ldr	r2, [pc, #592]	; (8000e9c <HAL_GPIO_Init+0x2ac>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d04c      	beq.n	8000cea <HAL_GPIO_Init+0xfa>
 8000c50:	4a92      	ldr	r2, [pc, #584]	; (8000e9c <HAL_GPIO_Init+0x2ac>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d863      	bhi.n	8000d1e <HAL_GPIO_Init+0x12e>
 8000c56:	4a92      	ldr	r2, [pc, #584]	; (8000ea0 <HAL_GPIO_Init+0x2b0>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d046      	beq.n	8000cea <HAL_GPIO_Init+0xfa>
 8000c5c:	4a90      	ldr	r2, [pc, #576]	; (8000ea0 <HAL_GPIO_Init+0x2b0>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d85d      	bhi.n	8000d1e <HAL_GPIO_Init+0x12e>
 8000c62:	2b12      	cmp	r3, #18
 8000c64:	d82a      	bhi.n	8000cbc <HAL_GPIO_Init+0xcc>
 8000c66:	2b12      	cmp	r3, #18
 8000c68:	d859      	bhi.n	8000d1e <HAL_GPIO_Init+0x12e>
 8000c6a:	a201      	add	r2, pc, #4	; (adr r2, 8000c70 <HAL_GPIO_Init+0x80>)
 8000c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c70:	08000ceb 	.word	0x08000ceb
 8000c74:	08000cc5 	.word	0x08000cc5
 8000c78:	08000cd7 	.word	0x08000cd7
 8000c7c:	08000d19 	.word	0x08000d19
 8000c80:	08000d1f 	.word	0x08000d1f
 8000c84:	08000d1f 	.word	0x08000d1f
 8000c88:	08000d1f 	.word	0x08000d1f
 8000c8c:	08000d1f 	.word	0x08000d1f
 8000c90:	08000d1f 	.word	0x08000d1f
 8000c94:	08000d1f 	.word	0x08000d1f
 8000c98:	08000d1f 	.word	0x08000d1f
 8000c9c:	08000d1f 	.word	0x08000d1f
 8000ca0:	08000d1f 	.word	0x08000d1f
 8000ca4:	08000d1f 	.word	0x08000d1f
 8000ca8:	08000d1f 	.word	0x08000d1f
 8000cac:	08000d1f 	.word	0x08000d1f
 8000cb0:	08000d1f 	.word	0x08000d1f
 8000cb4:	08000ccd 	.word	0x08000ccd
 8000cb8:	08000ce1 	.word	0x08000ce1
 8000cbc:	4a79      	ldr	r2, [pc, #484]	; (8000ea4 <HAL_GPIO_Init+0x2b4>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d013      	beq.n	8000cea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000cc2:	e02c      	b.n	8000d1e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	68db      	ldr	r3, [r3, #12]
 8000cc8:	623b      	str	r3, [r7, #32]
          break;
 8000cca:	e029      	b.n	8000d20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	68db      	ldr	r3, [r3, #12]
 8000cd0:	3304      	adds	r3, #4
 8000cd2:	623b      	str	r3, [r7, #32]
          break;
 8000cd4:	e024      	b.n	8000d20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	68db      	ldr	r3, [r3, #12]
 8000cda:	3308      	adds	r3, #8
 8000cdc:	623b      	str	r3, [r7, #32]
          break;
 8000cde:	e01f      	b.n	8000d20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	68db      	ldr	r3, [r3, #12]
 8000ce4:	330c      	adds	r3, #12
 8000ce6:	623b      	str	r3, [r7, #32]
          break;
 8000ce8:	e01a      	b.n	8000d20 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	689b      	ldr	r3, [r3, #8]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d102      	bne.n	8000cf8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000cf2:	2304      	movs	r3, #4
 8000cf4:	623b      	str	r3, [r7, #32]
          break;
 8000cf6:	e013      	b.n	8000d20 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	689b      	ldr	r3, [r3, #8]
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d105      	bne.n	8000d0c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d00:	2308      	movs	r3, #8
 8000d02:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	69fa      	ldr	r2, [r7, #28]
 8000d08:	611a      	str	r2, [r3, #16]
          break;
 8000d0a:	e009      	b.n	8000d20 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d0c:	2308      	movs	r3, #8
 8000d0e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	69fa      	ldr	r2, [r7, #28]
 8000d14:	615a      	str	r2, [r3, #20]
          break;
 8000d16:	e003      	b.n	8000d20 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	623b      	str	r3, [r7, #32]
          break;
 8000d1c:	e000      	b.n	8000d20 <HAL_GPIO_Init+0x130>
          break;
 8000d1e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d20:	69bb      	ldr	r3, [r7, #24]
 8000d22:	2bff      	cmp	r3, #255	; 0xff
 8000d24:	d801      	bhi.n	8000d2a <HAL_GPIO_Init+0x13a>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	e001      	b.n	8000d2e <HAL_GPIO_Init+0x13e>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	3304      	adds	r3, #4
 8000d2e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d30:	69bb      	ldr	r3, [r7, #24]
 8000d32:	2bff      	cmp	r3, #255	; 0xff
 8000d34:	d802      	bhi.n	8000d3c <HAL_GPIO_Init+0x14c>
 8000d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	e002      	b.n	8000d42 <HAL_GPIO_Init+0x152>
 8000d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d3e:	3b08      	subs	r3, #8
 8000d40:	009b      	lsls	r3, r3, #2
 8000d42:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	210f      	movs	r1, #15
 8000d4a:	693b      	ldr	r3, [r7, #16]
 8000d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d50:	43db      	mvns	r3, r3
 8000d52:	401a      	ands	r2, r3
 8000d54:	6a39      	ldr	r1, [r7, #32]
 8000d56:	693b      	ldr	r3, [r7, #16]
 8000d58:	fa01 f303 	lsl.w	r3, r1, r3
 8000d5c:	431a      	orrs	r2, r3
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	f000 80b1 	beq.w	8000ed2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d70:	4b4d      	ldr	r3, [pc, #308]	; (8000ea8 <HAL_GPIO_Init+0x2b8>)
 8000d72:	699b      	ldr	r3, [r3, #24]
 8000d74:	4a4c      	ldr	r2, [pc, #304]	; (8000ea8 <HAL_GPIO_Init+0x2b8>)
 8000d76:	f043 0301 	orr.w	r3, r3, #1
 8000d7a:	6193      	str	r3, [r2, #24]
 8000d7c:	4b4a      	ldr	r3, [pc, #296]	; (8000ea8 <HAL_GPIO_Init+0x2b8>)
 8000d7e:	699b      	ldr	r3, [r3, #24]
 8000d80:	f003 0301 	and.w	r3, r3, #1
 8000d84:	60bb      	str	r3, [r7, #8]
 8000d86:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d88:	4a48      	ldr	r2, [pc, #288]	; (8000eac <HAL_GPIO_Init+0x2bc>)
 8000d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d8c:	089b      	lsrs	r3, r3, #2
 8000d8e:	3302      	adds	r3, #2
 8000d90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d94:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d98:	f003 0303 	and.w	r3, r3, #3
 8000d9c:	009b      	lsls	r3, r3, #2
 8000d9e:	220f      	movs	r2, #15
 8000da0:	fa02 f303 	lsl.w	r3, r2, r3
 8000da4:	43db      	mvns	r3, r3
 8000da6:	68fa      	ldr	r2, [r7, #12]
 8000da8:	4013      	ands	r3, r2
 8000daa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	4a40      	ldr	r2, [pc, #256]	; (8000eb0 <HAL_GPIO_Init+0x2c0>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d013      	beq.n	8000ddc <HAL_GPIO_Init+0x1ec>
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	4a3f      	ldr	r2, [pc, #252]	; (8000eb4 <HAL_GPIO_Init+0x2c4>)
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d00d      	beq.n	8000dd8 <HAL_GPIO_Init+0x1e8>
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	4a3e      	ldr	r2, [pc, #248]	; (8000eb8 <HAL_GPIO_Init+0x2c8>)
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	d007      	beq.n	8000dd4 <HAL_GPIO_Init+0x1e4>
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	4a3d      	ldr	r2, [pc, #244]	; (8000ebc <HAL_GPIO_Init+0x2cc>)
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	d101      	bne.n	8000dd0 <HAL_GPIO_Init+0x1e0>
 8000dcc:	2303      	movs	r3, #3
 8000dce:	e006      	b.n	8000dde <HAL_GPIO_Init+0x1ee>
 8000dd0:	2304      	movs	r3, #4
 8000dd2:	e004      	b.n	8000dde <HAL_GPIO_Init+0x1ee>
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	e002      	b.n	8000dde <HAL_GPIO_Init+0x1ee>
 8000dd8:	2301      	movs	r3, #1
 8000dda:	e000      	b.n	8000dde <HAL_GPIO_Init+0x1ee>
 8000ddc:	2300      	movs	r3, #0
 8000dde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000de0:	f002 0203 	and.w	r2, r2, #3
 8000de4:	0092      	lsls	r2, r2, #2
 8000de6:	4093      	lsls	r3, r2
 8000de8:	68fa      	ldr	r2, [r7, #12]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000dee:	492f      	ldr	r1, [pc, #188]	; (8000eac <HAL_GPIO_Init+0x2bc>)
 8000df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df2:	089b      	lsrs	r3, r3, #2
 8000df4:	3302      	adds	r3, #2
 8000df6:	68fa      	ldr	r2, [r7, #12]
 8000df8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d006      	beq.n	8000e16 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e08:	4b2d      	ldr	r3, [pc, #180]	; (8000ec0 <HAL_GPIO_Init+0x2d0>)
 8000e0a:	689a      	ldr	r2, [r3, #8]
 8000e0c:	492c      	ldr	r1, [pc, #176]	; (8000ec0 <HAL_GPIO_Init+0x2d0>)
 8000e0e:	69bb      	ldr	r3, [r7, #24]
 8000e10:	4313      	orrs	r3, r2
 8000e12:	608b      	str	r3, [r1, #8]
 8000e14:	e006      	b.n	8000e24 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e16:	4b2a      	ldr	r3, [pc, #168]	; (8000ec0 <HAL_GPIO_Init+0x2d0>)
 8000e18:	689a      	ldr	r2, [r3, #8]
 8000e1a:	69bb      	ldr	r3, [r7, #24]
 8000e1c:	43db      	mvns	r3, r3
 8000e1e:	4928      	ldr	r1, [pc, #160]	; (8000ec0 <HAL_GPIO_Init+0x2d0>)
 8000e20:	4013      	ands	r3, r2
 8000e22:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d006      	beq.n	8000e3e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e30:	4b23      	ldr	r3, [pc, #140]	; (8000ec0 <HAL_GPIO_Init+0x2d0>)
 8000e32:	68da      	ldr	r2, [r3, #12]
 8000e34:	4922      	ldr	r1, [pc, #136]	; (8000ec0 <HAL_GPIO_Init+0x2d0>)
 8000e36:	69bb      	ldr	r3, [r7, #24]
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	60cb      	str	r3, [r1, #12]
 8000e3c:	e006      	b.n	8000e4c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e3e:	4b20      	ldr	r3, [pc, #128]	; (8000ec0 <HAL_GPIO_Init+0x2d0>)
 8000e40:	68da      	ldr	r2, [r3, #12]
 8000e42:	69bb      	ldr	r3, [r7, #24]
 8000e44:	43db      	mvns	r3, r3
 8000e46:	491e      	ldr	r1, [pc, #120]	; (8000ec0 <HAL_GPIO_Init+0x2d0>)
 8000e48:	4013      	ands	r3, r2
 8000e4a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d006      	beq.n	8000e66 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e58:	4b19      	ldr	r3, [pc, #100]	; (8000ec0 <HAL_GPIO_Init+0x2d0>)
 8000e5a:	685a      	ldr	r2, [r3, #4]
 8000e5c:	4918      	ldr	r1, [pc, #96]	; (8000ec0 <HAL_GPIO_Init+0x2d0>)
 8000e5e:	69bb      	ldr	r3, [r7, #24]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	604b      	str	r3, [r1, #4]
 8000e64:	e006      	b.n	8000e74 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e66:	4b16      	ldr	r3, [pc, #88]	; (8000ec0 <HAL_GPIO_Init+0x2d0>)
 8000e68:	685a      	ldr	r2, [r3, #4]
 8000e6a:	69bb      	ldr	r3, [r7, #24]
 8000e6c:	43db      	mvns	r3, r3
 8000e6e:	4914      	ldr	r1, [pc, #80]	; (8000ec0 <HAL_GPIO_Init+0x2d0>)
 8000e70:	4013      	ands	r3, r2
 8000e72:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d021      	beq.n	8000ec4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e80:	4b0f      	ldr	r3, [pc, #60]	; (8000ec0 <HAL_GPIO_Init+0x2d0>)
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	490e      	ldr	r1, [pc, #56]	; (8000ec0 <HAL_GPIO_Init+0x2d0>)
 8000e86:	69bb      	ldr	r3, [r7, #24]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	600b      	str	r3, [r1, #0]
 8000e8c:	e021      	b.n	8000ed2 <HAL_GPIO_Init+0x2e2>
 8000e8e:	bf00      	nop
 8000e90:	10320000 	.word	0x10320000
 8000e94:	10310000 	.word	0x10310000
 8000e98:	10220000 	.word	0x10220000
 8000e9c:	10210000 	.word	0x10210000
 8000ea0:	10120000 	.word	0x10120000
 8000ea4:	10110000 	.word	0x10110000
 8000ea8:	40021000 	.word	0x40021000
 8000eac:	40010000 	.word	0x40010000
 8000eb0:	40010800 	.word	0x40010800
 8000eb4:	40010c00 	.word	0x40010c00
 8000eb8:	40011000 	.word	0x40011000
 8000ebc:	40011400 	.word	0x40011400
 8000ec0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ec4:	4b0b      	ldr	r3, [pc, #44]	; (8000ef4 <HAL_GPIO_Init+0x304>)
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	69bb      	ldr	r3, [r7, #24]
 8000eca:	43db      	mvns	r3, r3
 8000ecc:	4909      	ldr	r1, [pc, #36]	; (8000ef4 <HAL_GPIO_Init+0x304>)
 8000ece:	4013      	ands	r3, r2
 8000ed0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ede:	fa22 f303 	lsr.w	r3, r2, r3
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	f47f ae8e 	bne.w	8000c04 <HAL_GPIO_Init+0x14>
  }
}
 8000ee8:	bf00      	nop
 8000eea:	bf00      	nop
 8000eec:	372c      	adds	r7, #44	; 0x2c
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bc80      	pop	{r7}
 8000ef2:	4770      	bx	lr
 8000ef4:	40010400 	.word	0x40010400

08000ef8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	460b      	mov	r3, r1
 8000f02:	807b      	strh	r3, [r7, #2]
 8000f04:	4613      	mov	r3, r2
 8000f06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f08:	787b      	ldrb	r3, [r7, #1]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d003      	beq.n	8000f16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f0e:	887a      	ldrh	r2, [r7, #2]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000f14:	e003      	b.n	8000f1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f16:	887b      	ldrh	r3, [r7, #2]
 8000f18:	041a      	lsls	r2, r3, #16
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	611a      	str	r2, [r3, #16]
}
 8000f1e:	bf00      	nop
 8000f20:	370c      	adds	r7, #12
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bc80      	pop	{r7}
 8000f26:	4770      	bx	lr

08000f28 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000f28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f2a:	b08b      	sub	sp, #44	; 0x2c
 8000f2c:	af06      	add	r7, sp, #24
 8000f2e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d101      	bne.n	8000f3a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
 8000f38:	e0f1      	b.n	800111e <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d106      	bne.n	8000f54 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2200      	movs	r2, #0
 8000f4a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f007 f872 	bl	8008038 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2203      	movs	r2, #3
 8000f58:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4618      	mov	r0, r3
 8000f62:	f002 ff91 	bl	8003e88 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	603b      	str	r3, [r7, #0]
 8000f6c:	687e      	ldr	r6, [r7, #4]
 8000f6e:	466d      	mov	r5, sp
 8000f70:	f106 0410 	add.w	r4, r6, #16
 8000f74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f78:	6823      	ldr	r3, [r4, #0]
 8000f7a:	602b      	str	r3, [r5, #0]
 8000f7c:	1d33      	adds	r3, r6, #4
 8000f7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f80:	6838      	ldr	r0, [r7, #0]
 8000f82:	f002 ff5b 	bl	8003e3c <USB_CoreInit>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d005      	beq.n	8000f98 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2202      	movs	r2, #2
 8000f90:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000f94:	2301      	movs	r3, #1
 8000f96:	e0c2      	b.n	800111e <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f002 ff8c 	bl	8003ebc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	73fb      	strb	r3, [r7, #15]
 8000fa8:	e040      	b.n	800102c <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000faa:	7bfb      	ldrb	r3, [r7, #15]
 8000fac:	6879      	ldr	r1, [r7, #4]
 8000fae:	1c5a      	adds	r2, r3, #1
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	4413      	add	r3, r2
 8000fb6:	00db      	lsls	r3, r3, #3
 8000fb8:	440b      	add	r3, r1
 8000fba:	3301      	adds	r3, #1
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000fc0:	7bfb      	ldrb	r3, [r7, #15]
 8000fc2:	6879      	ldr	r1, [r7, #4]
 8000fc4:	1c5a      	adds	r2, r3, #1
 8000fc6:	4613      	mov	r3, r2
 8000fc8:	009b      	lsls	r3, r3, #2
 8000fca:	4413      	add	r3, r2
 8000fcc:	00db      	lsls	r3, r3, #3
 8000fce:	440b      	add	r3, r1
 8000fd0:	7bfa      	ldrb	r2, [r7, #15]
 8000fd2:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000fd4:	7bfb      	ldrb	r3, [r7, #15]
 8000fd6:	6879      	ldr	r1, [r7, #4]
 8000fd8:	1c5a      	adds	r2, r3, #1
 8000fda:	4613      	mov	r3, r2
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	4413      	add	r3, r2
 8000fe0:	00db      	lsls	r3, r3, #3
 8000fe2:	440b      	add	r3, r1
 8000fe4:	3303      	adds	r3, #3
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000fea:	7bfa      	ldrb	r2, [r7, #15]
 8000fec:	6879      	ldr	r1, [r7, #4]
 8000fee:	4613      	mov	r3, r2
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	4413      	add	r3, r2
 8000ff4:	00db      	lsls	r3, r3, #3
 8000ff6:	440b      	add	r3, r1
 8000ff8:	3338      	adds	r3, #56	; 0x38
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000ffe:	7bfa      	ldrb	r2, [r7, #15]
 8001000:	6879      	ldr	r1, [r7, #4]
 8001002:	4613      	mov	r3, r2
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	4413      	add	r3, r2
 8001008:	00db      	lsls	r3, r3, #3
 800100a:	440b      	add	r3, r1
 800100c:	333c      	adds	r3, #60	; 0x3c
 800100e:	2200      	movs	r2, #0
 8001010:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001012:	7bfa      	ldrb	r2, [r7, #15]
 8001014:	6879      	ldr	r1, [r7, #4]
 8001016:	4613      	mov	r3, r2
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	4413      	add	r3, r2
 800101c:	00db      	lsls	r3, r3, #3
 800101e:	440b      	add	r3, r1
 8001020:	3340      	adds	r3, #64	; 0x40
 8001022:	2200      	movs	r2, #0
 8001024:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001026:	7bfb      	ldrb	r3, [r7, #15]
 8001028:	3301      	adds	r3, #1
 800102a:	73fb      	strb	r3, [r7, #15]
 800102c:	7bfa      	ldrb	r2, [r7, #15]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	429a      	cmp	r2, r3
 8001034:	d3b9      	bcc.n	8000faa <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001036:	2300      	movs	r3, #0
 8001038:	73fb      	strb	r3, [r7, #15]
 800103a:	e044      	b.n	80010c6 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800103c:	7bfa      	ldrb	r2, [r7, #15]
 800103e:	6879      	ldr	r1, [r7, #4]
 8001040:	4613      	mov	r3, r2
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	4413      	add	r3, r2
 8001046:	00db      	lsls	r3, r3, #3
 8001048:	440b      	add	r3, r1
 800104a:	f203 1369 	addw	r3, r3, #361	; 0x169
 800104e:	2200      	movs	r2, #0
 8001050:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001052:	7bfa      	ldrb	r2, [r7, #15]
 8001054:	6879      	ldr	r1, [r7, #4]
 8001056:	4613      	mov	r3, r2
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	4413      	add	r3, r2
 800105c:	00db      	lsls	r3, r3, #3
 800105e:	440b      	add	r3, r1
 8001060:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001064:	7bfa      	ldrb	r2, [r7, #15]
 8001066:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001068:	7bfa      	ldrb	r2, [r7, #15]
 800106a:	6879      	ldr	r1, [r7, #4]
 800106c:	4613      	mov	r3, r2
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	4413      	add	r3, r2
 8001072:	00db      	lsls	r3, r3, #3
 8001074:	440b      	add	r3, r1
 8001076:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800107a:	2200      	movs	r2, #0
 800107c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800107e:	7bfa      	ldrb	r2, [r7, #15]
 8001080:	6879      	ldr	r1, [r7, #4]
 8001082:	4613      	mov	r3, r2
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	4413      	add	r3, r2
 8001088:	00db      	lsls	r3, r3, #3
 800108a:	440b      	add	r3, r1
 800108c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001094:	7bfa      	ldrb	r2, [r7, #15]
 8001096:	6879      	ldr	r1, [r7, #4]
 8001098:	4613      	mov	r3, r2
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	4413      	add	r3, r2
 800109e:	00db      	lsls	r3, r3, #3
 80010a0:	440b      	add	r3, r1
 80010a2:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80010a6:	2200      	movs	r2, #0
 80010a8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80010aa:	7bfa      	ldrb	r2, [r7, #15]
 80010ac:	6879      	ldr	r1, [r7, #4]
 80010ae:	4613      	mov	r3, r2
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	4413      	add	r3, r2
 80010b4:	00db      	lsls	r3, r3, #3
 80010b6:	440b      	add	r3, r1
 80010b8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010c0:	7bfb      	ldrb	r3, [r7, #15]
 80010c2:	3301      	adds	r3, #1
 80010c4:	73fb      	strb	r3, [r7, #15]
 80010c6:	7bfa      	ldrb	r2, [r7, #15]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d3b5      	bcc.n	800103c <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	603b      	str	r3, [r7, #0]
 80010d6:	687e      	ldr	r6, [r7, #4]
 80010d8:	466d      	mov	r5, sp
 80010da:	f106 0410 	add.w	r4, r6, #16
 80010de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010e2:	6823      	ldr	r3, [r4, #0]
 80010e4:	602b      	str	r3, [r5, #0]
 80010e6:	1d33      	adds	r3, r6, #4
 80010e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010ea:	6838      	ldr	r0, [r7, #0]
 80010ec:	f002 fef2 	bl	8003ed4 <USB_DevInit>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d005      	beq.n	8001102 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2202      	movs	r2, #2
 80010fa:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	e00d      	b.n	800111e <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2200      	movs	r2, #0
 8001106:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2201      	movs	r2, #1
 800110e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4618      	mov	r0, r3
 8001118:	f005 f973 	bl	8006402 <USB_DevDisconnect>

  return HAL_OK;
 800111c:	2300      	movs	r3, #0
}
 800111e:	4618      	mov	r0, r3
 8001120:	3714      	adds	r7, #20
 8001122:	46bd      	mov	sp, r7
 8001124:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001126 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	b082      	sub	sp, #8
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001134:	2b01      	cmp	r3, #1
 8001136:	d101      	bne.n	800113c <HAL_PCD_Start+0x16>
 8001138:	2302      	movs	r3, #2
 800113a:	e016      	b.n	800116a <HAL_PCD_Start+0x44>
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2201      	movs	r2, #1
 8001140:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4618      	mov	r0, r3
 800114a:	f002 fe87 	bl	8003e5c <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800114e:	2101      	movs	r1, #1
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f007 f9e4 	bl	800851e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4618      	mov	r0, r3
 800115c:	f005 f947 	bl	80063ee <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2200      	movs	r2, #0
 8001164:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001168:	2300      	movs	r3, #0
}
 800116a:	4618      	mov	r0, r3
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b088      	sub	sp, #32
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4618      	mov	r0, r3
 8001180:	f005 f949 	bl	8006416 <USB_ReadInterrupts>
 8001184:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001186:	69bb      	ldr	r3, [r7, #24]
 8001188:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800118c:	2b00      	cmp	r3, #0
 800118e:	d003      	beq.n	8001198 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f000 fb1b 	bl	80017cc <PCD_EP_ISR_Handler>

    return;
 8001196:	e119      	b.n	80013cc <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d013      	beq.n	80011ca <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80011aa:	b29a      	uxth	r2, r3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80011b4:	b292      	uxth	r2, r2
 80011b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f006 ffb7 	bl	800812e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80011c0:	2100      	movs	r1, #0
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f000 f905 	bl	80013d2 <HAL_PCD_SetAddress>

    return;
 80011c8:	e100      	b.n	80013cc <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80011ca:	69bb      	ldr	r3, [r7, #24]
 80011cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d00c      	beq.n	80011ee <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80011dc:	b29a      	uxth	r2, r3
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80011e6:	b292      	uxth	r2, r2
 80011e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80011ec:	e0ee      	b.n	80013cc <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d00c      	beq.n	8001212 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001200:	b29a      	uxth	r2, r3
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800120a:	b292      	uxth	r2, r2
 800120c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001210:	e0dc      	b.n	80013cc <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001218:	2b00      	cmp	r3, #0
 800121a:	d027      	beq.n	800126c <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001224:	b29a      	uxth	r2, r3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f022 0204 	bic.w	r2, r2, #4
 800122e:	b292      	uxth	r2, r2
 8001230:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800123c:	b29a      	uxth	r2, r3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f022 0208 	bic.w	r2, r2, #8
 8001246:	b292      	uxth	r2, r2
 8001248:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f006 ffa7 	bl	80081a0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800125a:	b29a      	uxth	r2, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001264:	b292      	uxth	r2, r2
 8001266:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800126a:	e0af      	b.n	80013cc <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800126c:	69bb      	ldr	r3, [r7, #24]
 800126e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001272:	2b00      	cmp	r3, #0
 8001274:	f000 8083 	beq.w	800137e <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8001278:	2300      	movs	r3, #0
 800127a:	77fb      	strb	r3, [r7, #31]
 800127c:	e010      	b.n	80012a0 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	461a      	mov	r2, r3
 8001284:	7ffb      	ldrb	r3, [r7, #31]
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	441a      	add	r2, r3
 800128a:	7ffb      	ldrb	r3, [r7, #31]
 800128c:	8812      	ldrh	r2, [r2, #0]
 800128e:	b292      	uxth	r2, r2
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	3320      	adds	r3, #32
 8001294:	443b      	add	r3, r7
 8001296:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 800129a:	7ffb      	ldrb	r3, [r7, #31]
 800129c:	3301      	adds	r3, #1
 800129e:	77fb      	strb	r3, [r7, #31]
 80012a0:	7ffb      	ldrb	r3, [r7, #31]
 80012a2:	2b07      	cmp	r3, #7
 80012a4:	d9eb      	bls.n	800127e <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80012ae:	b29a      	uxth	r2, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f042 0201 	orr.w	r2, r2, #1
 80012b8:	b292      	uxth	r2, r2
 80012ba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80012c6:	b29a      	uxth	r2, r3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f022 0201 	bic.w	r2, r2, #1
 80012d0:	b292      	uxth	r2, r2
 80012d2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80012d6:	bf00      	nop
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80012e0:	b29b      	uxth	r3, r3
 80012e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d0f6      	beq.n	80012d8 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80012f2:	b29a      	uxth	r2, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80012fc:	b292      	uxth	r2, r2
 80012fe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001302:	2300      	movs	r3, #0
 8001304:	77fb      	strb	r3, [r7, #31]
 8001306:	e00f      	b.n	8001328 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001308:	7ffb      	ldrb	r3, [r7, #31]
 800130a:	687a      	ldr	r2, [r7, #4]
 800130c:	6812      	ldr	r2, [r2, #0]
 800130e:	4611      	mov	r1, r2
 8001310:	7ffa      	ldrb	r2, [r7, #31]
 8001312:	0092      	lsls	r2, r2, #2
 8001314:	440a      	add	r2, r1
 8001316:	005b      	lsls	r3, r3, #1
 8001318:	3320      	adds	r3, #32
 800131a:	443b      	add	r3, r7
 800131c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001320:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001322:	7ffb      	ldrb	r3, [r7, #31]
 8001324:	3301      	adds	r3, #1
 8001326:	77fb      	strb	r3, [r7, #31]
 8001328:	7ffb      	ldrb	r3, [r7, #31]
 800132a:	2b07      	cmp	r3, #7
 800132c:	d9ec      	bls.n	8001308 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001336:	b29a      	uxth	r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f042 0208 	orr.w	r2, r2, #8
 8001340:	b292      	uxth	r2, r2
 8001342:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800134e:	b29a      	uxth	r2, r3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001358:	b292      	uxth	r2, r2
 800135a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001366:	b29a      	uxth	r2, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f042 0204 	orr.w	r2, r2, #4
 8001370:	b292      	uxth	r2, r2
 8001372:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f006 fef8 	bl	800816c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800137c:	e026      	b.n	80013cc <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800137e:	69bb      	ldr	r3, [r7, #24]
 8001380:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001384:	2b00      	cmp	r3, #0
 8001386:	d00f      	beq.n	80013a8 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001390:	b29a      	uxth	r2, r3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800139a:	b292      	uxth	r2, r2
 800139c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f006 feb6 	bl	8008112 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80013a6:	e011      	b.n	80013cc <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d00c      	beq.n	80013cc <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80013ba:	b29a      	uxth	r2, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013c4:	b292      	uxth	r2, r2
 80013c6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80013ca:	bf00      	nop
  }
}
 80013cc:	3720      	adds	r7, #32
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b082      	sub	sp, #8
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
 80013da:	460b      	mov	r3, r1
 80013dc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d101      	bne.n	80013ec <HAL_PCD_SetAddress+0x1a>
 80013e8:	2302      	movs	r3, #2
 80013ea:	e013      	b.n	8001414 <HAL_PCD_SetAddress+0x42>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2201      	movs	r2, #1
 80013f0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	78fa      	ldrb	r2, [r7, #3]
 80013f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	78fa      	ldrb	r2, [r7, #3]
 8001402:	4611      	mov	r1, r2
 8001404:	4618      	mov	r0, r3
 8001406:	f004 ffdf 	bl	80063c8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2200      	movs	r2, #0
 800140e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001412:	2300      	movs	r3, #0
}
 8001414:	4618      	mov	r0, r3
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}

0800141c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	4608      	mov	r0, r1
 8001426:	4611      	mov	r1, r2
 8001428:	461a      	mov	r2, r3
 800142a:	4603      	mov	r3, r0
 800142c:	70fb      	strb	r3, [r7, #3]
 800142e:	460b      	mov	r3, r1
 8001430:	803b      	strh	r3, [r7, #0]
 8001432:	4613      	mov	r3, r2
 8001434:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001436:	2300      	movs	r3, #0
 8001438:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800143a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800143e:	2b00      	cmp	r3, #0
 8001440:	da0e      	bge.n	8001460 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001442:	78fb      	ldrb	r3, [r7, #3]
 8001444:	f003 0307 	and.w	r3, r3, #7
 8001448:	1c5a      	adds	r2, r3, #1
 800144a:	4613      	mov	r3, r2
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	4413      	add	r3, r2
 8001450:	00db      	lsls	r3, r3, #3
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	4413      	add	r3, r2
 8001456:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	2201      	movs	r2, #1
 800145c:	705a      	strb	r2, [r3, #1]
 800145e:	e00e      	b.n	800147e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001460:	78fb      	ldrb	r3, [r7, #3]
 8001462:	f003 0207 	and.w	r2, r3, #7
 8001466:	4613      	mov	r3, r2
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	4413      	add	r3, r2
 800146c:	00db      	lsls	r3, r3, #3
 800146e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	4413      	add	r3, r2
 8001476:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	2200      	movs	r2, #0
 800147c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800147e:	78fb      	ldrb	r3, [r7, #3]
 8001480:	f003 0307 	and.w	r3, r3, #7
 8001484:	b2da      	uxtb	r2, r3
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800148a:	883a      	ldrh	r2, [r7, #0]
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	78ba      	ldrb	r2, [r7, #2]
 8001494:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001496:	78bb      	ldrb	r3, [r7, #2]
 8001498:	2b02      	cmp	r3, #2
 800149a:	d102      	bne.n	80014a2 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	2200      	movs	r2, #0
 80014a0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d101      	bne.n	80014b0 <HAL_PCD_EP_Open+0x94>
 80014ac:	2302      	movs	r3, #2
 80014ae:	e00e      	b.n	80014ce <HAL_PCD_EP_Open+0xb2>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2201      	movs	r2, #1
 80014b4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	68f9      	ldr	r1, [r7, #12]
 80014be:	4618      	mov	r0, r3
 80014c0:	f002 fd28 	bl	8003f14 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2200      	movs	r2, #0
 80014c8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80014cc:	7afb      	ldrb	r3, [r7, #11]
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3710      	adds	r7, #16
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b084      	sub	sp, #16
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
 80014de:	460b      	mov	r3, r1
 80014e0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80014e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	da0e      	bge.n	8001508 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80014ea:	78fb      	ldrb	r3, [r7, #3]
 80014ec:	f003 0307 	and.w	r3, r3, #7
 80014f0:	1c5a      	adds	r2, r3, #1
 80014f2:	4613      	mov	r3, r2
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	4413      	add	r3, r2
 80014f8:	00db      	lsls	r3, r3, #3
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	4413      	add	r3, r2
 80014fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	2201      	movs	r2, #1
 8001504:	705a      	strb	r2, [r3, #1]
 8001506:	e00e      	b.n	8001526 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001508:	78fb      	ldrb	r3, [r7, #3]
 800150a:	f003 0207 	and.w	r2, r3, #7
 800150e:	4613      	mov	r3, r2
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	4413      	add	r3, r2
 8001514:	00db      	lsls	r3, r3, #3
 8001516:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	4413      	add	r3, r2
 800151e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	2200      	movs	r2, #0
 8001524:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001526:	78fb      	ldrb	r3, [r7, #3]
 8001528:	f003 0307 	and.w	r3, r3, #7
 800152c:	b2da      	uxtb	r2, r3
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001538:	2b01      	cmp	r3, #1
 800153a:	d101      	bne.n	8001540 <HAL_PCD_EP_Close+0x6a>
 800153c:	2302      	movs	r3, #2
 800153e:	e00e      	b.n	800155e <HAL_PCD_EP_Close+0x88>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2201      	movs	r2, #1
 8001544:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	68f9      	ldr	r1, [r7, #12]
 800154e:	4618      	mov	r0, r3
 8001550:	f003 f8a0 	bl	8004694 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2200      	movs	r2, #0
 8001558:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800155c:	2300      	movs	r3, #0
}
 800155e:	4618      	mov	r0, r3
 8001560:	3710      	adds	r7, #16
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}

08001566 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001566:	b580      	push	{r7, lr}
 8001568:	b086      	sub	sp, #24
 800156a:	af00      	add	r7, sp, #0
 800156c:	60f8      	str	r0, [r7, #12]
 800156e:	607a      	str	r2, [r7, #4]
 8001570:	603b      	str	r3, [r7, #0]
 8001572:	460b      	mov	r3, r1
 8001574:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001576:	7afb      	ldrb	r3, [r7, #11]
 8001578:	f003 0207 	and.w	r2, r3, #7
 800157c:	4613      	mov	r3, r2
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	4413      	add	r3, r2
 8001582:	00db      	lsls	r3, r3, #3
 8001584:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001588:	68fa      	ldr	r2, [r7, #12]
 800158a:	4413      	add	r3, r2
 800158c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	687a      	ldr	r2, [r7, #4]
 8001592:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	683a      	ldr	r2, [r7, #0]
 8001598:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	2200      	movs	r2, #0
 800159e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	2200      	movs	r2, #0
 80015a4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80015a6:	7afb      	ldrb	r3, [r7, #11]
 80015a8:	f003 0307 	and.w	r3, r3, #7
 80015ac:	b2da      	uxtb	r2, r3
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	6979      	ldr	r1, [r7, #20]
 80015b8:	4618      	mov	r0, r3
 80015ba:	f003 fa57 	bl	8004a6c <USB_EPStartXfer>

  return HAL_OK;
 80015be:	2300      	movs	r3, #0
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3718      	adds	r7, #24
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	460b      	mov	r3, r1
 80015d2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80015d4:	78fb      	ldrb	r3, [r7, #3]
 80015d6:	f003 0207 	and.w	r2, r3, #7
 80015da:	6879      	ldr	r1, [r7, #4]
 80015dc:	4613      	mov	r3, r2
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	4413      	add	r3, r2
 80015e2:	00db      	lsls	r3, r3, #3
 80015e4:	440b      	add	r3, r1
 80015e6:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80015ea:	681b      	ldr	r3, [r3, #0]
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bc80      	pop	{r7}
 80015f4:	4770      	bx	lr

080015f6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b086      	sub	sp, #24
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	60f8      	str	r0, [r7, #12]
 80015fe:	607a      	str	r2, [r7, #4]
 8001600:	603b      	str	r3, [r7, #0]
 8001602:	460b      	mov	r3, r1
 8001604:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001606:	7afb      	ldrb	r3, [r7, #11]
 8001608:	f003 0307 	and.w	r3, r3, #7
 800160c:	1c5a      	adds	r2, r3, #1
 800160e:	4613      	mov	r3, r2
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	4413      	add	r3, r2
 8001614:	00db      	lsls	r3, r3, #3
 8001616:	68fa      	ldr	r2, [r7, #12]
 8001618:	4413      	add	r3, r2
 800161a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	683a      	ldr	r2, [r7, #0]
 8001626:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	2201      	movs	r2, #1
 800162c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	683a      	ldr	r2, [r7, #0]
 8001634:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	2200      	movs	r2, #0
 800163a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	2201      	movs	r2, #1
 8001640:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001642:	7afb      	ldrb	r3, [r7, #11]
 8001644:	f003 0307 	and.w	r3, r3, #7
 8001648:	b2da      	uxtb	r2, r3
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	6979      	ldr	r1, [r7, #20]
 8001654:	4618      	mov	r0, r3
 8001656:	f003 fa09 	bl	8004a6c <USB_EPStartXfer>

  return HAL_OK;
 800165a:	2300      	movs	r3, #0
}
 800165c:	4618      	mov	r0, r3
 800165e:	3718      	adds	r7, #24
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}

08001664 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	460b      	mov	r3, r1
 800166e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001670:	78fb      	ldrb	r3, [r7, #3]
 8001672:	f003 0207 	and.w	r2, r3, #7
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	429a      	cmp	r2, r3
 800167c:	d901      	bls.n	8001682 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e04c      	b.n	800171c <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001682:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001686:	2b00      	cmp	r3, #0
 8001688:	da0e      	bge.n	80016a8 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800168a:	78fb      	ldrb	r3, [r7, #3]
 800168c:	f003 0307 	and.w	r3, r3, #7
 8001690:	1c5a      	adds	r2, r3, #1
 8001692:	4613      	mov	r3, r2
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	4413      	add	r3, r2
 8001698:	00db      	lsls	r3, r3, #3
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	4413      	add	r3, r2
 800169e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	2201      	movs	r2, #1
 80016a4:	705a      	strb	r2, [r3, #1]
 80016a6:	e00c      	b.n	80016c2 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80016a8:	78fa      	ldrb	r2, [r7, #3]
 80016aa:	4613      	mov	r3, r2
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	4413      	add	r3, r2
 80016b0:	00db      	lsls	r3, r3, #3
 80016b2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	4413      	add	r3, r2
 80016ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	2200      	movs	r2, #0
 80016c0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	2201      	movs	r2, #1
 80016c6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80016c8:	78fb      	ldrb	r3, [r7, #3]
 80016ca:	f003 0307 	and.w	r3, r3, #7
 80016ce:	b2da      	uxtb	r2, r3
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d101      	bne.n	80016e2 <HAL_PCD_EP_SetStall+0x7e>
 80016de:	2302      	movs	r3, #2
 80016e0:	e01c      	b.n	800171c <HAL_PCD_EP_SetStall+0xb8>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2201      	movs	r2, #1
 80016e6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	68f9      	ldr	r1, [r7, #12]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f004 fd6c 	bl	80061ce <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80016f6:	78fb      	ldrb	r3, [r7, #3]
 80016f8:	f003 0307 	and.w	r3, r3, #7
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d108      	bne.n	8001712 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800170a:	4619      	mov	r1, r3
 800170c:	4610      	mov	r0, r2
 800170e:	f004 fe91 	bl	8006434 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2200      	movs	r2, #0
 8001716:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800171a:	2300      	movs	r3, #0
}
 800171c:	4618      	mov	r0, r3
 800171e:	3710      	adds	r7, #16
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}

08001724 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	460b      	mov	r3, r1
 800172e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001730:	78fb      	ldrb	r3, [r7, #3]
 8001732:	f003 020f 	and.w	r2, r3, #15
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	429a      	cmp	r2, r3
 800173c:	d901      	bls.n	8001742 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e040      	b.n	80017c4 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001742:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001746:	2b00      	cmp	r3, #0
 8001748:	da0e      	bge.n	8001768 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800174a:	78fb      	ldrb	r3, [r7, #3]
 800174c:	f003 0307 	and.w	r3, r3, #7
 8001750:	1c5a      	adds	r2, r3, #1
 8001752:	4613      	mov	r3, r2
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	4413      	add	r3, r2
 8001758:	00db      	lsls	r3, r3, #3
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	4413      	add	r3, r2
 800175e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	2201      	movs	r2, #1
 8001764:	705a      	strb	r2, [r3, #1]
 8001766:	e00e      	b.n	8001786 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001768:	78fb      	ldrb	r3, [r7, #3]
 800176a:	f003 0207 	and.w	r2, r3, #7
 800176e:	4613      	mov	r3, r2
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	4413      	add	r3, r2
 8001774:	00db      	lsls	r3, r3, #3
 8001776:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	4413      	add	r3, r2
 800177e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	2200      	movs	r2, #0
 8001784:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	2200      	movs	r2, #0
 800178a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800178c:	78fb      	ldrb	r3, [r7, #3]
 800178e:	f003 0307 	and.w	r3, r3, #7
 8001792:	b2da      	uxtb	r2, r3
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d101      	bne.n	80017a6 <HAL_PCD_EP_ClrStall+0x82>
 80017a2:	2302      	movs	r3, #2
 80017a4:	e00e      	b.n	80017c4 <HAL_PCD_EP_ClrStall+0xa0>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2201      	movs	r2, #1
 80017aa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	68f9      	ldr	r1, [r7, #12]
 80017b4:	4618      	mov	r0, r3
 80017b6:	f004 fd5a 	bl	800626e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2200      	movs	r2, #0
 80017be:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80017c2:	2300      	movs	r3, #0
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3710      	adds	r7, #16
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}

080017cc <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b096      	sub	sp, #88	; 0x58
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80017d4:	e3bf      	b.n	8001f56 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017de:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80017e2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	f003 030f 	and.w	r3, r3, #15
 80017ec:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 80017f0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	f040 8179 	bne.w	8001aec <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80017fa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80017fe:	f003 0310 	and.w	r3, r3, #16
 8001802:	2b00      	cmp	r3, #0
 8001804:	d152      	bne.n	80018ac <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	881b      	ldrh	r3, [r3, #0]
 800180c:	b29b      	uxth	r3, r3
 800180e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001812:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001816:	81fb      	strh	r3, [r7, #14]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	89fb      	ldrh	r3, [r7, #14]
 800181e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001822:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001826:	b29b      	uxth	r3, r3
 8001828:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	3328      	adds	r3, #40	; 0x28
 800182e:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001838:	b29b      	uxth	r3, r3
 800183a:	461a      	mov	r2, r3
 800183c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	00db      	lsls	r3, r3, #3
 8001842:	4413      	add	r3, r2
 8001844:	3302      	adds	r3, #2
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	6812      	ldr	r2, [r2, #0]
 800184c:	4413      	add	r3, r2
 800184e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001852:	881b      	ldrh	r3, [r3, #0]
 8001854:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001858:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800185a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800185c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800185e:	695a      	ldr	r2, [r3, #20]
 8001860:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001862:	69db      	ldr	r3, [r3, #28]
 8001864:	441a      	add	r2, r3
 8001866:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001868:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800186a:	2100      	movs	r1, #0
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f006 fc36 	bl	80080de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001878:	b2db      	uxtb	r3, r3
 800187a:	2b00      	cmp	r3, #0
 800187c:	f000 836b 	beq.w	8001f56 <PCD_EP_ISR_Handler+0x78a>
 8001880:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001882:	699b      	ldr	r3, [r3, #24]
 8001884:	2b00      	cmp	r3, #0
 8001886:	f040 8366 	bne.w	8001f56 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001890:	b2db      	uxtb	r3, r3
 8001892:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001896:	b2da      	uxtb	r2, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	b292      	uxth	r2, r2
 800189e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2200      	movs	r2, #0
 80018a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80018aa:	e354      	b.n	8001f56 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80018b2:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	881b      	ldrh	r3, [r3, #0]
 80018ba:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80018be:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80018c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d034      	beq.n	8001934 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80018d2:	b29b      	uxth	r3, r3
 80018d4:	461a      	mov	r2, r3
 80018d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	00db      	lsls	r3, r3, #3
 80018dc:	4413      	add	r3, r2
 80018de:	3306      	adds	r3, #6
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	6812      	ldr	r2, [r2, #0]
 80018e6:	4413      	add	r3, r2
 80018e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80018ec:	881b      	ldrh	r3, [r3, #0]
 80018ee:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80018f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018f4:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6818      	ldr	r0, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001900:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001902:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001904:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001906:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001908:	b29b      	uxth	r3, r3
 800190a:	f004 fde3 	bl	80064d4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	881b      	ldrh	r3, [r3, #0]
 8001914:	b29a      	uxth	r2, r3
 8001916:	f640 738f 	movw	r3, #3983	; 0xf8f
 800191a:	4013      	ands	r3, r2
 800191c:	823b      	strh	r3, [r7, #16]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	8a3a      	ldrh	r2, [r7, #16]
 8001924:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001928:	b292      	uxth	r2, r2
 800192a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f006 fba9 	bl	8008084 <HAL_PCD_SetupStageCallback>
 8001932:	e310      	b.n	8001f56 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001934:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001938:	2b00      	cmp	r3, #0
 800193a:	f280 830c 	bge.w	8001f56 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	881b      	ldrh	r3, [r3, #0]
 8001944:	b29a      	uxth	r2, r3
 8001946:	f640 738f 	movw	r3, #3983	; 0xf8f
 800194a:	4013      	ands	r3, r2
 800194c:	83fb      	strh	r3, [r7, #30]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	8bfa      	ldrh	r2, [r7, #30]
 8001954:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001958:	b292      	uxth	r2, r2
 800195a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001964:	b29b      	uxth	r3, r3
 8001966:	461a      	mov	r2, r3
 8001968:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	00db      	lsls	r3, r3, #3
 800196e:	4413      	add	r3, r2
 8001970:	3306      	adds	r3, #6
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	6812      	ldr	r2, [r2, #0]
 8001978:	4413      	add	r3, r2
 800197a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800197e:	881b      	ldrh	r3, [r3, #0]
 8001980:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001984:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001986:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001988:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800198a:	69db      	ldr	r3, [r3, #28]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d019      	beq.n	80019c4 <PCD_EP_ISR_Handler+0x1f8>
 8001990:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001992:	695b      	ldr	r3, [r3, #20]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d015      	beq.n	80019c4 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6818      	ldr	r0, [r3, #0]
 800199c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800199e:	6959      	ldr	r1, [r3, #20]
 80019a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019a2:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80019a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019a6:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80019a8:	b29b      	uxth	r3, r3
 80019aa:	f004 fd93 	bl	80064d4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80019ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019b0:	695a      	ldr	r2, [r3, #20]
 80019b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019b4:	69db      	ldr	r3, [r3, #28]
 80019b6:	441a      	add	r2, r3
 80019b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019ba:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80019bc:	2100      	movs	r1, #0
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f006 fb72 	bl	80080a8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	881b      	ldrh	r3, [r3, #0]
 80019ca:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80019ce:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80019d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	f040 82bd 	bne.w	8001f56 <PCD_EP_ISR_Handler+0x78a>
 80019dc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80019e0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80019e4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80019e8:	f000 82b5 	beq.w	8001f56 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	61bb      	str	r3, [r7, #24]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	461a      	mov	r2, r3
 80019fe:	69bb      	ldr	r3, [r7, #24]
 8001a00:	4413      	add	r3, r2
 8001a02:	61bb      	str	r3, [r7, #24]
 8001a04:	69bb      	ldr	r3, [r7, #24]
 8001a06:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001a0a:	617b      	str	r3, [r7, #20]
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	881b      	ldrh	r3, [r3, #0]
 8001a10:	b29b      	uxth	r3, r3
 8001a12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a16:	b29a      	uxth	r2, r3
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	801a      	strh	r2, [r3, #0]
 8001a1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a1e:	691b      	ldr	r3, [r3, #16]
 8001a20:	2b3e      	cmp	r3, #62	; 0x3e
 8001a22:	d91d      	bls.n	8001a60 <PCD_EP_ISR_Handler+0x294>
 8001a24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a26:	691b      	ldr	r3, [r3, #16]
 8001a28:	095b      	lsrs	r3, r3, #5
 8001a2a:	647b      	str	r3, [r7, #68]	; 0x44
 8001a2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a2e:	691b      	ldr	r3, [r3, #16]
 8001a30:	f003 031f 	and.w	r3, r3, #31
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d102      	bne.n	8001a3e <PCD_EP_ISR_Handler+0x272>
 8001a38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	647b      	str	r3, [r7, #68]	; 0x44
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	881b      	ldrh	r3, [r3, #0]
 8001a42:	b29a      	uxth	r2, r3
 8001a44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	029b      	lsls	r3, r3, #10
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	b29b      	uxth	r3, r3
 8001a50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a58:	b29a      	uxth	r2, r3
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	801a      	strh	r2, [r3, #0]
 8001a5e:	e026      	b.n	8001aae <PCD_EP_ISR_Handler+0x2e2>
 8001a60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a62:	691b      	ldr	r3, [r3, #16]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d10a      	bne.n	8001a7e <PCD_EP_ISR_Handler+0x2b2>
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	881b      	ldrh	r3, [r3, #0]
 8001a6c:	b29b      	uxth	r3, r3
 8001a6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a76:	b29a      	uxth	r2, r3
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	801a      	strh	r2, [r3, #0]
 8001a7c:	e017      	b.n	8001aae <PCD_EP_ISR_Handler+0x2e2>
 8001a7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a80:	691b      	ldr	r3, [r3, #16]
 8001a82:	085b      	lsrs	r3, r3, #1
 8001a84:	647b      	str	r3, [r7, #68]	; 0x44
 8001a86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a88:	691b      	ldr	r3, [r3, #16]
 8001a8a:	f003 0301 	and.w	r3, r3, #1
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d002      	beq.n	8001a98 <PCD_EP_ISR_Handler+0x2cc>
 8001a92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a94:	3301      	adds	r3, #1
 8001a96:	647b      	str	r3, [r7, #68]	; 0x44
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	881b      	ldrh	r3, [r3, #0]
 8001a9c:	b29a      	uxth	r2, r3
 8001a9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	029b      	lsls	r3, r3, #10
 8001aa4:	b29b      	uxth	r3, r3
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	b29a      	uxth	r2, r3
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	881b      	ldrh	r3, [r3, #0]
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001aba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001abe:	827b      	strh	r3, [r7, #18]
 8001ac0:	8a7b      	ldrh	r3, [r7, #18]
 8001ac2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001ac6:	827b      	strh	r3, [r7, #18]
 8001ac8:	8a7b      	ldrh	r3, [r7, #18]
 8001aca:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001ace:	827b      	strh	r3, [r7, #18]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	8a7b      	ldrh	r3, [r7, #18]
 8001ad6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001ada:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001ade:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ae2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ae6:	b29b      	uxth	r3, r3
 8001ae8:	8013      	strh	r3, [r2, #0]
 8001aea:	e234      	b.n	8001f56 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	461a      	mov	r2, r3
 8001af2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	4413      	add	r3, r2
 8001afa:	881b      	ldrh	r3, [r3, #0]
 8001afc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001b00:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	f280 80fc 	bge.w	8001d02 <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	461a      	mov	r2, r3
 8001b10:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	4413      	add	r3, r2
 8001b18:	881b      	ldrh	r3, [r3, #0]
 8001b1a:	b29a      	uxth	r2, r3
 8001b1c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001b20:	4013      	ands	r3, r2
 8001b22:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	4413      	add	r3, r2
 8001b34:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001b38:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b3c:	b292      	uxth	r2, r2
 8001b3e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001b40:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8001b44:	4613      	mov	r3, r2
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	4413      	add	r3, r2
 8001b4a:	00db      	lsls	r3, r3, #3
 8001b4c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	4413      	add	r3, r2
 8001b54:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001b56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b58:	7b1b      	ldrb	r3, [r3, #12]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d125      	bne.n	8001baa <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	461a      	mov	r2, r3
 8001b6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	00db      	lsls	r3, r3, #3
 8001b70:	4413      	add	r3, r2
 8001b72:	3306      	adds	r3, #6
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	6812      	ldr	r2, [r2, #0]
 8001b7a:	4413      	add	r3, r2
 8001b7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b80:	881b      	ldrh	r3, [r3, #0]
 8001b82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b86:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8001b8a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	f000 8092 	beq.w	8001cb8 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6818      	ldr	r0, [r3, #0]
 8001b98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b9a:	6959      	ldr	r1, [r3, #20]
 8001b9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b9e:	88da      	ldrh	r2, [r3, #6]
 8001ba0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001ba4:	f004 fc96 	bl	80064d4 <USB_ReadPMA>
 8001ba8:	e086      	b.n	8001cb8 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001baa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bac:	78db      	ldrb	r3, [r3, #3]
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d10a      	bne.n	8001bc8 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001bb2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f000 f9d9 	bl	8001f72 <HAL_PCD_EP_DB_Receive>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8001bc6:	e077      	b.n	8001cb8 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	461a      	mov	r2, r3
 8001bce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	4413      	add	r3, r2
 8001bd6:	881b      	ldrh	r3, [r3, #0]
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001bde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001be2:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	461a      	mov	r2, r3
 8001bec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	441a      	add	r2, r3
 8001bf4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001bf8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001bfc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001c00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c04:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	461a      	mov	r2, r3
 8001c12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	4413      	add	r3, r2
 8001c1a:	881b      	ldrh	r3, [r3, #0]
 8001c1c:	b29b      	uxth	r3, r3
 8001c1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d024      	beq.n	8001c70 <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	461a      	mov	r2, r3
 8001c32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	00db      	lsls	r3, r3, #3
 8001c38:	4413      	add	r3, r2
 8001c3a:	3302      	adds	r3, #2
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	6812      	ldr	r2, [r2, #0]
 8001c42:	4413      	add	r3, r2
 8001c44:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c48:	881b      	ldrh	r3, [r3, #0]
 8001c4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c4e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001c52:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d02e      	beq.n	8001cb8 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6818      	ldr	r0, [r3, #0]
 8001c5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c60:	6959      	ldr	r1, [r3, #20]
 8001c62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c64:	891a      	ldrh	r2, [r3, #8]
 8001c66:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001c6a:	f004 fc33 	bl	80064d4 <USB_ReadPMA>
 8001c6e:	e023      	b.n	8001cb8 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	00db      	lsls	r3, r3, #3
 8001c82:	4413      	add	r3, r2
 8001c84:	3306      	adds	r3, #6
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	6812      	ldr	r2, [r2, #0]
 8001c8c:	4413      	add	r3, r2
 8001c8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c92:	881b      	ldrh	r3, [r3, #0]
 8001c94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c98:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001c9c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d009      	beq.n	8001cb8 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6818      	ldr	r0, [r3, #0]
 8001ca8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001caa:	6959      	ldr	r1, [r3, #20]
 8001cac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cae:	895a      	ldrh	r2, [r3, #10]
 8001cb0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001cb4:	f004 fc0e 	bl	80064d4 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001cb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cba:	69da      	ldr	r2, [r3, #28]
 8001cbc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001cc0:	441a      	add	r2, r3
 8001cc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cc4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001cc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cc8:	695a      	ldr	r2, [r3, #20]
 8001cca:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001cce:	441a      	add	r2, r3
 8001cd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cd2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001cd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cd6:	699b      	ldr	r3, [r3, #24]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d005      	beq.n	8001ce8 <PCD_EP_ISR_Handler+0x51c>
 8001cdc:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8001ce0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ce2:	691b      	ldr	r3, [r3, #16]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d206      	bcs.n	8001cf6 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001ce8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	4619      	mov	r1, r3
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f006 f9da 	bl	80080a8 <HAL_PCD_DataOutStageCallback>
 8001cf4:	e005      	b.n	8001d02 <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f002 feb5 	bl	8004a6c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001d02:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	f000 8123 	beq.w	8001f56 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8001d10:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001d14:	1c5a      	adds	r2, r3, #1
 8001d16:	4613      	mov	r3, r2
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	4413      	add	r3, r2
 8001d1c:	00db      	lsls	r3, r3, #3
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	4413      	add	r3, r2
 8001d22:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	461a      	mov	r2, r3
 8001d2a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	4413      	add	r3, r2
 8001d32:	881b      	ldrh	r3, [r3, #0]
 8001d34:	b29b      	uxth	r3, r3
 8001d36:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001d3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d3e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	461a      	mov	r2, r3
 8001d48:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	441a      	add	r2, r3
 8001d50:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001d54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001d60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d62:	78db      	ldrb	r3, [r3, #3]
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	f040 80a2 	bne.w	8001eae <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 8001d6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001d70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d72:	7b1b      	ldrb	r3, [r3, #12]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	f000 8093 	beq.w	8001ea0 <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001d7a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001d7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d046      	beq.n	8001e14 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001d86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d88:	785b      	ldrb	r3, [r3, #1]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d126      	bne.n	8001ddc <PCD_EP_ISR_Handler+0x610>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	627b      	str	r3, [r7, #36]	; 0x24
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	461a      	mov	r2, r3
 8001da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da2:	4413      	add	r3, r2
 8001da4:	627b      	str	r3, [r7, #36]	; 0x24
 8001da6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	011a      	lsls	r2, r3, #4
 8001dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dae:	4413      	add	r3, r2
 8001db0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001db4:	623b      	str	r3, [r7, #32]
 8001db6:	6a3b      	ldr	r3, [r7, #32]
 8001db8:	881b      	ldrh	r3, [r3, #0]
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001dc0:	b29a      	uxth	r2, r3
 8001dc2:	6a3b      	ldr	r3, [r7, #32]
 8001dc4:	801a      	strh	r2, [r3, #0]
 8001dc6:	6a3b      	ldr	r3, [r7, #32]
 8001dc8:	881b      	ldrh	r3, [r3, #0]
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001dd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001dd4:	b29a      	uxth	r2, r3
 8001dd6:	6a3b      	ldr	r3, [r7, #32]
 8001dd8:	801a      	strh	r2, [r3, #0]
 8001dda:	e061      	b.n	8001ea0 <PCD_EP_ISR_Handler+0x6d4>
 8001ddc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dde:	785b      	ldrb	r3, [r3, #1]
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d15d      	bne.n	8001ea0 <PCD_EP_ISR_Handler+0x6d4>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	461a      	mov	r2, r3
 8001df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001df8:	4413      	add	r3, r2
 8001dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	011a      	lsls	r2, r3, #4
 8001e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e04:	4413      	add	r3, r2
 8001e06:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001e0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e0e:	2200      	movs	r2, #0
 8001e10:	801a      	strh	r2, [r3, #0]
 8001e12:	e045      	b.n	8001ea0 <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e1c:	785b      	ldrb	r3, [r3, #1]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d126      	bne.n	8001e70 <PCD_EP_ISR_Handler+0x6a4>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	637b      	str	r3, [r7, #52]	; 0x34
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e30:	b29b      	uxth	r3, r3
 8001e32:	461a      	mov	r2, r3
 8001e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e36:	4413      	add	r3, r2
 8001e38:	637b      	str	r3, [r7, #52]	; 0x34
 8001e3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	011a      	lsls	r2, r3, #4
 8001e40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e42:	4413      	add	r3, r2
 8001e44:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001e48:	633b      	str	r3, [r7, #48]	; 0x30
 8001e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e4c:	881b      	ldrh	r3, [r3, #0]
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e54:	b29a      	uxth	r2, r3
 8001e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e58:	801a      	strh	r2, [r3, #0]
 8001e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e5c:	881b      	ldrh	r3, [r3, #0]
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e68:	b29a      	uxth	r2, r3
 8001e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e6c:	801a      	strh	r2, [r3, #0]
 8001e6e:	e017      	b.n	8001ea0 <PCD_EP_ISR_Handler+0x6d4>
 8001e70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e72:	785b      	ldrb	r3, [r3, #1]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d113      	bne.n	8001ea0 <PCD_EP_ISR_Handler+0x6d4>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	461a      	mov	r2, r3
 8001e84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e86:	4413      	add	r3, r2
 8001e88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	011a      	lsls	r2, r3, #4
 8001e90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e92:	4413      	add	r3, r2
 8001e94:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001e98:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001ea0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f006 f919 	bl	80080de <HAL_PCD_DataInStageCallback>
 8001eac:	e053      	b.n	8001f56 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001eae:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d146      	bne.n	8001f48 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	00db      	lsls	r3, r3, #3
 8001ecc:	4413      	add	r3, r2
 8001ece:	3302      	adds	r3, #2
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	6812      	ldr	r2, [r2, #0]
 8001ed6:	4413      	add	r3, r2
 8001ed8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001edc:	881b      	ldrh	r3, [r3, #0]
 8001ede:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ee2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8001ee6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ee8:	699a      	ldr	r2, [r3, #24]
 8001eea:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d907      	bls.n	8001f02 <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 8001ef2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ef4:	699a      	ldr	r2, [r3, #24]
 8001ef6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001efa:	1ad2      	subs	r2, r2, r3
 8001efc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001efe:	619a      	str	r2, [r3, #24]
 8001f00:	e002      	b.n	8001f08 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 8001f02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f04:	2200      	movs	r2, #0
 8001f06:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001f08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f0a:	699b      	ldr	r3, [r3, #24]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d106      	bne.n	8001f1e <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001f10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	4619      	mov	r1, r3
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f006 f8e1 	bl	80080de <HAL_PCD_DataInStageCallback>
 8001f1c:	e01b      	b.n	8001f56 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001f1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f20:	695a      	ldr	r2, [r3, #20]
 8001f22:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001f26:	441a      	add	r2, r3
 8001f28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f2a:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001f2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f2e:	69da      	ldr	r2, [r3, #28]
 8001f30:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001f34:	441a      	add	r2, r3
 8001f36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f38:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001f40:	4618      	mov	r0, r3
 8001f42:	f002 fd93 	bl	8004a6c <USB_EPStartXfer>
 8001f46:	e006      	b.n	8001f56 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001f48:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f000 f91b 	bl	800218c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	b21b      	sxth	r3, r3
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	f6ff ac37 	blt.w	80017d6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3758      	adds	r7, #88	; 0x58
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}

08001f72 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001f72:	b580      	push	{r7, lr}
 8001f74:	b088      	sub	sp, #32
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	60f8      	str	r0, [r7, #12]
 8001f7a:	60b9      	str	r1, [r7, #8]
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001f80:	88fb      	ldrh	r3, [r7, #6]
 8001f82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d07e      	beq.n	8002088 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	461a      	mov	r2, r3
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	00db      	lsls	r3, r3, #3
 8001f9c:	4413      	add	r3, r2
 8001f9e:	3302      	adds	r3, #2
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	68fa      	ldr	r2, [r7, #12]
 8001fa4:	6812      	ldr	r2, [r2, #0]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001fac:	881b      	ldrh	r3, [r3, #0]
 8001fae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fb2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	699a      	ldr	r2, [r3, #24]
 8001fb8:	8b7b      	ldrh	r3, [r7, #26]
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d306      	bcc.n	8001fcc <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	699a      	ldr	r2, [r3, #24]
 8001fc2:	8b7b      	ldrh	r3, [r7, #26]
 8001fc4:	1ad2      	subs	r2, r2, r3
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	619a      	str	r2, [r3, #24]
 8001fca:	e002      	b.n	8001fd2 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	699b      	ldr	r3, [r3, #24]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d123      	bne.n	8002022 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	461a      	mov	r2, r3
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	4413      	add	r3, r2
 8001fe8:	881b      	ldrh	r3, [r3, #0]
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ff0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ff4:	833b      	strh	r3, [r7, #24]
 8001ff6:	8b3b      	ldrh	r3, [r7, #24]
 8001ff8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001ffc:	833b      	strh	r3, [r7, #24]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	461a      	mov	r2, r3
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	441a      	add	r2, r3
 800200c:	8b3b      	ldrh	r3, [r7, #24]
 800200e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002012:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002016:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800201a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800201e:	b29b      	uxth	r3, r3
 8002020:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002022:	88fb      	ldrh	r3, [r7, #6]
 8002024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002028:	2b00      	cmp	r3, #0
 800202a:	d01f      	beq.n	800206c <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	461a      	mov	r2, r3
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	4413      	add	r3, r2
 800203a:	881b      	ldrh	r3, [r3, #0]
 800203c:	b29b      	uxth	r3, r3
 800203e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002042:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002046:	82fb      	strh	r3, [r7, #22]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	461a      	mov	r2, r3
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	441a      	add	r2, r3
 8002056:	8afb      	ldrh	r3, [r7, #22]
 8002058:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800205c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002060:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002064:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002068:	b29b      	uxth	r3, r3
 800206a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800206c:	8b7b      	ldrh	r3, [r7, #26]
 800206e:	2b00      	cmp	r3, #0
 8002070:	f000 8087 	beq.w	8002182 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	6818      	ldr	r0, [r3, #0]
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	6959      	ldr	r1, [r3, #20]
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	891a      	ldrh	r2, [r3, #8]
 8002080:	8b7b      	ldrh	r3, [r7, #26]
 8002082:	f004 fa27 	bl	80064d4 <USB_ReadPMA>
 8002086:	e07c      	b.n	8002182 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002090:	b29b      	uxth	r3, r3
 8002092:	461a      	mov	r2, r3
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	00db      	lsls	r3, r3, #3
 800209a:	4413      	add	r3, r2
 800209c:	3306      	adds	r3, #6
 800209e:	005b      	lsls	r3, r3, #1
 80020a0:	68fa      	ldr	r2, [r7, #12]
 80020a2:	6812      	ldr	r2, [r2, #0]
 80020a4:	4413      	add	r3, r2
 80020a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020aa:	881b      	ldrh	r3, [r3, #0]
 80020ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020b0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	699a      	ldr	r2, [r3, #24]
 80020b6:	8b7b      	ldrh	r3, [r7, #26]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d306      	bcc.n	80020ca <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	699a      	ldr	r2, [r3, #24]
 80020c0:	8b7b      	ldrh	r3, [r7, #26]
 80020c2:	1ad2      	subs	r2, r2, r3
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	619a      	str	r2, [r3, #24]
 80020c8:	e002      	b.n	80020d0 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	2200      	movs	r2, #0
 80020ce:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	699b      	ldr	r3, [r3, #24]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d123      	bne.n	8002120 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	461a      	mov	r2, r3
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	4413      	add	r3, r2
 80020e6:	881b      	ldrh	r3, [r3, #0]
 80020e8:	b29b      	uxth	r3, r3
 80020ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80020ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020f2:	83fb      	strh	r3, [r7, #30]
 80020f4:	8bfb      	ldrh	r3, [r7, #30]
 80020f6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80020fa:	83fb      	strh	r3, [r7, #30]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	461a      	mov	r2, r3
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	441a      	add	r2, r3
 800210a:	8bfb      	ldrh	r3, [r7, #30]
 800210c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002110:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002114:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002118:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800211c:	b29b      	uxth	r3, r3
 800211e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002120:	88fb      	ldrh	r3, [r7, #6]
 8002122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002126:	2b00      	cmp	r3, #0
 8002128:	d11f      	bne.n	800216a <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	461a      	mov	r2, r3
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	4413      	add	r3, r2
 8002138:	881b      	ldrh	r3, [r3, #0]
 800213a:	b29b      	uxth	r3, r3
 800213c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002140:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002144:	83bb      	strh	r3, [r7, #28]
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	461a      	mov	r2, r3
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	441a      	add	r2, r3
 8002154:	8bbb      	ldrh	r3, [r7, #28]
 8002156:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800215a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800215e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002162:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002166:	b29b      	uxth	r3, r3
 8002168:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800216a:	8b7b      	ldrh	r3, [r7, #26]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d008      	beq.n	8002182 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	6818      	ldr	r0, [r3, #0]
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	6959      	ldr	r1, [r3, #20]
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	895a      	ldrh	r2, [r3, #10]
 800217c:	8b7b      	ldrh	r3, [r7, #26]
 800217e:	f004 f9a9 	bl	80064d4 <USB_ReadPMA>
    }
  }

  return count;
 8002182:	8b7b      	ldrh	r3, [r7, #26]
}
 8002184:	4618      	mov	r0, r3
 8002186:	3720      	adds	r7, #32
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b0a4      	sub	sp, #144	; 0x90
 8002190:	af00      	add	r7, sp, #0
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	60b9      	str	r1, [r7, #8]
 8002196:	4613      	mov	r3, r2
 8002198:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800219a:	88fb      	ldrh	r3, [r7, #6]
 800219c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	f000 81dd 	beq.w	8002560 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	461a      	mov	r2, r3
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	00db      	lsls	r3, r3, #3
 80021b8:	4413      	add	r3, r2
 80021ba:	3302      	adds	r3, #2
 80021bc:	005b      	lsls	r3, r3, #1
 80021be:	68fa      	ldr	r2, [r7, #12]
 80021c0:	6812      	ldr	r2, [r2, #0]
 80021c2:	4413      	add	r3, r2
 80021c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021c8:	881b      	ldrh	r3, [r3, #0]
 80021ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021ce:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	699a      	ldr	r2, [r3, #24]
 80021d6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80021da:	429a      	cmp	r2, r3
 80021dc:	d907      	bls.n	80021ee <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	699a      	ldr	r2, [r3, #24]
 80021e2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80021e6:	1ad2      	subs	r2, r2, r3
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	619a      	str	r2, [r3, #24]
 80021ec:	e002      	b.n	80021f4 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	2200      	movs	r2, #0
 80021f2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	699b      	ldr	r3, [r3, #24]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	f040 80b9 	bne.w	8002370 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	785b      	ldrb	r3, [r3, #1]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d126      	bne.n	8002254 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002214:	b29b      	uxth	r3, r3
 8002216:	461a      	mov	r2, r3
 8002218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800221a:	4413      	add	r3, r2
 800221c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	011a      	lsls	r2, r3, #4
 8002224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002226:	4413      	add	r3, r2
 8002228:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800222c:	62bb      	str	r3, [r7, #40]	; 0x28
 800222e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002230:	881b      	ldrh	r3, [r3, #0]
 8002232:	b29b      	uxth	r3, r3
 8002234:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002238:	b29a      	uxth	r2, r3
 800223a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800223c:	801a      	strh	r2, [r3, #0]
 800223e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002240:	881b      	ldrh	r3, [r3, #0]
 8002242:	b29b      	uxth	r3, r3
 8002244:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002248:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800224c:	b29a      	uxth	r2, r3
 800224e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002250:	801a      	strh	r2, [r3, #0]
 8002252:	e01a      	b.n	800228a <HAL_PCD_EP_DB_Transmit+0xfe>
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	785b      	ldrb	r3, [r3, #1]
 8002258:	2b01      	cmp	r3, #1
 800225a:	d116      	bne.n	800228a <HAL_PCD_EP_DB_Transmit+0xfe>
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	637b      	str	r3, [r7, #52]	; 0x34
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800226a:	b29b      	uxth	r3, r3
 800226c:	461a      	mov	r2, r3
 800226e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002270:	4413      	add	r3, r2
 8002272:	637b      	str	r3, [r7, #52]	; 0x34
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	011a      	lsls	r2, r3, #4
 800227a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800227c:	4413      	add	r3, r2
 800227e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002282:	633b      	str	r3, [r7, #48]	; 0x30
 8002284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002286:	2200      	movs	r2, #0
 8002288:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	627b      	str	r3, [r7, #36]	; 0x24
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	785b      	ldrb	r3, [r3, #1]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d126      	bne.n	80022e6 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	61fb      	str	r3, [r7, #28]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022a6:	b29b      	uxth	r3, r3
 80022a8:	461a      	mov	r2, r3
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	4413      	add	r3, r2
 80022ae:	61fb      	str	r3, [r7, #28]
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	011a      	lsls	r2, r3, #4
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	4413      	add	r3, r2
 80022ba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80022be:	61bb      	str	r3, [r7, #24]
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	881b      	ldrh	r3, [r3, #0]
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022ca:	b29a      	uxth	r2, r3
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	801a      	strh	r2, [r3, #0]
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	881b      	ldrh	r3, [r3, #0]
 80022d4:	b29b      	uxth	r3, r3
 80022d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80022da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80022de:	b29a      	uxth	r2, r3
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	801a      	strh	r2, [r3, #0]
 80022e4:	e017      	b.n	8002316 <HAL_PCD_EP_DB_Transmit+0x18a>
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	785b      	ldrb	r3, [r3, #1]
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d113      	bne.n	8002316 <HAL_PCD_EP_DB_Transmit+0x18a>
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022f6:	b29b      	uxth	r3, r3
 80022f8:	461a      	mov	r2, r3
 80022fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fc:	4413      	add	r3, r2
 80022fe:	627b      	str	r3, [r7, #36]	; 0x24
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	011a      	lsls	r2, r3, #4
 8002306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002308:	4413      	add	r3, r2
 800230a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800230e:	623b      	str	r3, [r7, #32]
 8002310:	6a3b      	ldr	r3, [r7, #32]
 8002312:	2200      	movs	r2, #0
 8002314:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	4619      	mov	r1, r3
 800231c:	68f8      	ldr	r0, [r7, #12]
 800231e:	f005 fede 	bl	80080de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002322:	88fb      	ldrh	r3, [r7, #6]
 8002324:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002328:	2b00      	cmp	r3, #0
 800232a:	f000 82fc 	beq.w	8002926 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	461a      	mov	r2, r3
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	4413      	add	r3, r2
 800233c:	881b      	ldrh	r3, [r3, #0]
 800233e:	b29b      	uxth	r3, r3
 8002340:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002344:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002348:	82fb      	strh	r3, [r7, #22]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	461a      	mov	r2, r3
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	441a      	add	r2, r3
 8002358:	8afb      	ldrh	r3, [r7, #22]
 800235a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800235e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002362:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002366:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800236a:	b29b      	uxth	r3, r3
 800236c:	8013      	strh	r3, [r2, #0]
 800236e:	e2da      	b.n	8002926 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002370:	88fb      	ldrh	r3, [r7, #6]
 8002372:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d021      	beq.n	80023be <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	461a      	mov	r2, r3
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	4413      	add	r3, r2
 8002388:	881b      	ldrh	r3, [r3, #0]
 800238a:	b29b      	uxth	r3, r3
 800238c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002390:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002394:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	461a      	mov	r2, r3
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	441a      	add	r2, r3
 80023a6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80023aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80023ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80023b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	f040 82ae 	bne.w	8002926 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	695a      	ldr	r2, [r3, #20]
 80023ce:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80023d2:	441a      	add	r2, r3
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	69da      	ldr	r2, [r3, #28]
 80023dc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80023e0:	441a      	add	r2, r3
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	6a1a      	ldr	r2, [r3, #32]
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d30b      	bcc.n	800240a <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	691b      	ldr	r3, [r3, #16]
 80023f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	6a1a      	ldr	r2, [r3, #32]
 80023fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002402:	1ad2      	subs	r2, r2, r3
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	621a      	str	r2, [r3, #32]
 8002408:	e017      	b.n	800243a <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	6a1b      	ldr	r3, [r3, #32]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d108      	bne.n	8002424 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8002412:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002416:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	2200      	movs	r2, #0
 800241e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002422:	e00a      	b.n	800243a <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	2200      	movs	r2, #0
 8002428:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	6a1b      	ldr	r3, [r3, #32]
 8002430:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	2200      	movs	r2, #0
 8002438:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	785b      	ldrb	r3, [r3, #1]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d165      	bne.n	800250e <HAL_PCD_EP_DB_Transmit+0x382>
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002450:	b29b      	uxth	r3, r3
 8002452:	461a      	mov	r2, r3
 8002454:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002456:	4413      	add	r3, r2
 8002458:	63fb      	str	r3, [r7, #60]	; 0x3c
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	011a      	lsls	r2, r3, #4
 8002460:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002462:	4413      	add	r3, r2
 8002464:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002468:	63bb      	str	r3, [r7, #56]	; 0x38
 800246a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800246c:	881b      	ldrh	r3, [r3, #0]
 800246e:	b29b      	uxth	r3, r3
 8002470:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002474:	b29a      	uxth	r2, r3
 8002476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002478:	801a      	strh	r2, [r3, #0]
 800247a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800247e:	2b3e      	cmp	r3, #62	; 0x3e
 8002480:	d91d      	bls.n	80024be <HAL_PCD_EP_DB_Transmit+0x332>
 8002482:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002486:	095b      	lsrs	r3, r3, #5
 8002488:	64bb      	str	r3, [r7, #72]	; 0x48
 800248a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800248e:	f003 031f 	and.w	r3, r3, #31
 8002492:	2b00      	cmp	r3, #0
 8002494:	d102      	bne.n	800249c <HAL_PCD_EP_DB_Transmit+0x310>
 8002496:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002498:	3b01      	subs	r3, #1
 800249a:	64bb      	str	r3, [r7, #72]	; 0x48
 800249c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800249e:	881b      	ldrh	r3, [r3, #0]
 80024a0:	b29a      	uxth	r2, r3
 80024a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	029b      	lsls	r3, r3, #10
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	4313      	orrs	r3, r2
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024b6:	b29a      	uxth	r2, r3
 80024b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024ba:	801a      	strh	r2, [r3, #0]
 80024bc:	e044      	b.n	8002548 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80024be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d10a      	bne.n	80024dc <HAL_PCD_EP_DB_Transmit+0x350>
 80024c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024c8:	881b      	ldrh	r3, [r3, #0]
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024d4:	b29a      	uxth	r2, r3
 80024d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024d8:	801a      	strh	r2, [r3, #0]
 80024da:	e035      	b.n	8002548 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80024dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024e0:	085b      	lsrs	r3, r3, #1
 80024e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80024e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024e8:	f003 0301 	and.w	r3, r3, #1
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d002      	beq.n	80024f6 <HAL_PCD_EP_DB_Transmit+0x36a>
 80024f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024f2:	3301      	adds	r3, #1
 80024f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80024f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024f8:	881b      	ldrh	r3, [r3, #0]
 80024fa:	b29a      	uxth	r2, r3
 80024fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024fe:	b29b      	uxth	r3, r3
 8002500:	029b      	lsls	r3, r3, #10
 8002502:	b29b      	uxth	r3, r3
 8002504:	4313      	orrs	r3, r2
 8002506:	b29a      	uxth	r2, r3
 8002508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800250a:	801a      	strh	r2, [r3, #0]
 800250c:	e01c      	b.n	8002548 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	785b      	ldrb	r3, [r3, #1]
 8002512:	2b01      	cmp	r3, #1
 8002514:	d118      	bne.n	8002548 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	647b      	str	r3, [r7, #68]	; 0x44
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002524:	b29b      	uxth	r3, r3
 8002526:	461a      	mov	r2, r3
 8002528:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800252a:	4413      	add	r3, r2
 800252c:	647b      	str	r3, [r7, #68]	; 0x44
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	011a      	lsls	r2, r3, #4
 8002534:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002536:	4413      	add	r3, r2
 8002538:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800253c:	643b      	str	r3, [r7, #64]	; 0x40
 800253e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002542:	b29a      	uxth	r2, r3
 8002544:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002546:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6818      	ldr	r0, [r3, #0]
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	6959      	ldr	r1, [r3, #20]
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	891a      	ldrh	r2, [r3, #8]
 8002554:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002558:	b29b      	uxth	r3, r3
 800255a:	f003 ff76 	bl	800644a <USB_WritePMA>
 800255e:	e1e2      	b.n	8002926 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002568:	b29b      	uxth	r3, r3
 800256a:	461a      	mov	r2, r3
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	00db      	lsls	r3, r3, #3
 8002572:	4413      	add	r3, r2
 8002574:	3306      	adds	r3, #6
 8002576:	005b      	lsls	r3, r3, #1
 8002578:	68fa      	ldr	r2, [r7, #12]
 800257a:	6812      	ldr	r2, [r2, #0]
 800257c:	4413      	add	r3, r2
 800257e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002582:	881b      	ldrh	r3, [r3, #0]
 8002584:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002588:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	699a      	ldr	r2, [r3, #24]
 8002590:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002594:	429a      	cmp	r2, r3
 8002596:	d307      	bcc.n	80025a8 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	699a      	ldr	r2, [r3, #24]
 800259c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80025a0:	1ad2      	subs	r2, r2, r3
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	619a      	str	r2, [r3, #24]
 80025a6:	e002      	b.n	80025ae <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	2200      	movs	r2, #0
 80025ac:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	699b      	ldr	r3, [r3, #24]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	f040 80c0 	bne.w	8002738 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	785b      	ldrb	r3, [r3, #1]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d126      	bne.n	800260e <HAL_PCD_EP_DB_Transmit+0x482>
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	461a      	mov	r2, r3
 80025d2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80025d4:	4413      	add	r3, r2
 80025d6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	011a      	lsls	r2, r3, #4
 80025de:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80025e0:	4413      	add	r3, r2
 80025e2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80025e6:	67bb      	str	r3, [r7, #120]	; 0x78
 80025e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025ea:	881b      	ldrh	r3, [r3, #0]
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025f2:	b29a      	uxth	r2, r3
 80025f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025f6:	801a      	strh	r2, [r3, #0]
 80025f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025fa:	881b      	ldrh	r3, [r3, #0]
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002602:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002606:	b29a      	uxth	r2, r3
 8002608:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800260a:	801a      	strh	r2, [r3, #0]
 800260c:	e01a      	b.n	8002644 <HAL_PCD_EP_DB_Transmit+0x4b8>
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	785b      	ldrb	r3, [r3, #1]
 8002612:	2b01      	cmp	r3, #1
 8002614:	d116      	bne.n	8002644 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	667b      	str	r3, [r7, #100]	; 0x64
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002624:	b29b      	uxth	r3, r3
 8002626:	461a      	mov	r2, r3
 8002628:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800262a:	4413      	add	r3, r2
 800262c:	667b      	str	r3, [r7, #100]	; 0x64
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	011a      	lsls	r2, r3, #4
 8002634:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002636:	4413      	add	r3, r2
 8002638:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800263c:	663b      	str	r3, [r7, #96]	; 0x60
 800263e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002640:	2200      	movs	r2, #0
 8002642:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	677b      	str	r3, [r7, #116]	; 0x74
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	785b      	ldrb	r3, [r3, #1]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d12b      	bne.n	80026aa <HAL_PCD_EP_DB_Transmit+0x51e>
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002660:	b29b      	uxth	r3, r3
 8002662:	461a      	mov	r2, r3
 8002664:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002666:	4413      	add	r3, r2
 8002668:	66fb      	str	r3, [r7, #108]	; 0x6c
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	011a      	lsls	r2, r3, #4
 8002670:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002672:	4413      	add	r3, r2
 8002674:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002678:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800267c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002680:	881b      	ldrh	r3, [r3, #0]
 8002682:	b29b      	uxth	r3, r3
 8002684:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002688:	b29a      	uxth	r2, r3
 800268a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800268e:	801a      	strh	r2, [r3, #0]
 8002690:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002694:	881b      	ldrh	r3, [r3, #0]
 8002696:	b29b      	uxth	r3, r3
 8002698:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800269c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026a0:	b29a      	uxth	r2, r3
 80026a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80026a6:	801a      	strh	r2, [r3, #0]
 80026a8:	e017      	b.n	80026da <HAL_PCD_EP_DB_Transmit+0x54e>
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	785b      	ldrb	r3, [r3, #1]
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d113      	bne.n	80026da <HAL_PCD_EP_DB_Transmit+0x54e>
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	461a      	mov	r2, r3
 80026be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026c0:	4413      	add	r3, r2
 80026c2:	677b      	str	r3, [r7, #116]	; 0x74
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	011a      	lsls	r2, r3, #4
 80026ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026cc:	4413      	add	r3, r2
 80026ce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80026d2:	673b      	str	r3, [r7, #112]	; 0x70
 80026d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80026d6:	2200      	movs	r2, #0
 80026d8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	4619      	mov	r1, r3
 80026e0:	68f8      	ldr	r0, [r7, #12]
 80026e2:	f005 fcfc 	bl	80080de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80026e6:	88fb      	ldrh	r3, [r7, #6]
 80026e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	f040 811a 	bne.w	8002926 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	461a      	mov	r2, r3
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	4413      	add	r3, r2
 8002700:	881b      	ldrh	r3, [r3, #0]
 8002702:	b29b      	uxth	r3, r3
 8002704:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002708:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800270c:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	461a      	mov	r2, r3
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	441a      	add	r2, r3
 800271e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8002722:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002726:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800272a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800272e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002732:	b29b      	uxth	r3, r3
 8002734:	8013      	strh	r3, [r2, #0]
 8002736:	e0f6      	b.n	8002926 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002738:	88fb      	ldrh	r3, [r7, #6]
 800273a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d121      	bne.n	8002786 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	461a      	mov	r2, r3
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	4413      	add	r3, r2
 8002750:	881b      	ldrh	r3, [r3, #0]
 8002752:	b29b      	uxth	r3, r3
 8002754:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002758:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800275c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	461a      	mov	r2, r3
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	441a      	add	r2, r3
 800276e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002772:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002776:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800277a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800277e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002782:	b29b      	uxth	r3, r3
 8002784:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800278c:	2b01      	cmp	r3, #1
 800278e:	f040 80ca 	bne.w	8002926 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	695a      	ldr	r2, [r3, #20]
 8002796:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800279a:	441a      	add	r2, r3
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	69da      	ldr	r2, [r3, #28]
 80027a4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80027a8:	441a      	add	r2, r3
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	6a1a      	ldr	r2, [r3, #32]
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	691b      	ldr	r3, [r3, #16]
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d30b      	bcc.n	80027d2 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	6a1a      	ldr	r2, [r3, #32]
 80027c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027ca:	1ad2      	subs	r2, r2, r3
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	621a      	str	r2, [r3, #32]
 80027d0:	e017      	b.n	8002802 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	6a1b      	ldr	r3, [r3, #32]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d108      	bne.n	80027ec <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80027da:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80027de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80027ea:	e00a      	b.n	8002802 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	6a1b      	ldr	r3, [r3, #32]
 80027f0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	2200      	movs	r2, #0
 80027f8:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	2200      	movs	r2, #0
 80027fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	657b      	str	r3, [r7, #84]	; 0x54
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	785b      	ldrb	r3, [r3, #1]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d165      	bne.n	80028dc <HAL_PCD_EP_DB_Transmit+0x750>
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800281e:	b29b      	uxth	r3, r3
 8002820:	461a      	mov	r2, r3
 8002822:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002824:	4413      	add	r3, r2
 8002826:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	011a      	lsls	r2, r3, #4
 800282e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002830:	4413      	add	r3, r2
 8002832:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002836:	65bb      	str	r3, [r7, #88]	; 0x58
 8002838:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800283a:	881b      	ldrh	r3, [r3, #0]
 800283c:	b29b      	uxth	r3, r3
 800283e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002842:	b29a      	uxth	r2, r3
 8002844:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002846:	801a      	strh	r2, [r3, #0]
 8002848:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800284c:	2b3e      	cmp	r3, #62	; 0x3e
 800284e:	d91d      	bls.n	800288c <HAL_PCD_EP_DB_Transmit+0x700>
 8002850:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002854:	095b      	lsrs	r3, r3, #5
 8002856:	66bb      	str	r3, [r7, #104]	; 0x68
 8002858:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800285c:	f003 031f 	and.w	r3, r3, #31
 8002860:	2b00      	cmp	r3, #0
 8002862:	d102      	bne.n	800286a <HAL_PCD_EP_DB_Transmit+0x6de>
 8002864:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002866:	3b01      	subs	r3, #1
 8002868:	66bb      	str	r3, [r7, #104]	; 0x68
 800286a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800286c:	881b      	ldrh	r3, [r3, #0]
 800286e:	b29a      	uxth	r2, r3
 8002870:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002872:	b29b      	uxth	r3, r3
 8002874:	029b      	lsls	r3, r3, #10
 8002876:	b29b      	uxth	r3, r3
 8002878:	4313      	orrs	r3, r2
 800287a:	b29b      	uxth	r3, r3
 800287c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002880:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002884:	b29a      	uxth	r2, r3
 8002886:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002888:	801a      	strh	r2, [r3, #0]
 800288a:	e041      	b.n	8002910 <HAL_PCD_EP_DB_Transmit+0x784>
 800288c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002890:	2b00      	cmp	r3, #0
 8002892:	d10a      	bne.n	80028aa <HAL_PCD_EP_DB_Transmit+0x71e>
 8002894:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002896:	881b      	ldrh	r3, [r3, #0]
 8002898:	b29b      	uxth	r3, r3
 800289a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800289e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028a2:	b29a      	uxth	r2, r3
 80028a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028a6:	801a      	strh	r2, [r3, #0]
 80028a8:	e032      	b.n	8002910 <HAL_PCD_EP_DB_Transmit+0x784>
 80028aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028ae:	085b      	lsrs	r3, r3, #1
 80028b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80028b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d002      	beq.n	80028c4 <HAL_PCD_EP_DB_Transmit+0x738>
 80028be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028c0:	3301      	adds	r3, #1
 80028c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80028c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028c6:	881b      	ldrh	r3, [r3, #0]
 80028c8:	b29a      	uxth	r2, r3
 80028ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	029b      	lsls	r3, r3, #10
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	4313      	orrs	r3, r2
 80028d4:	b29a      	uxth	r2, r3
 80028d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028d8:	801a      	strh	r2, [r3, #0]
 80028da:	e019      	b.n	8002910 <HAL_PCD_EP_DB_Transmit+0x784>
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	785b      	ldrb	r3, [r3, #1]
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d115      	bne.n	8002910 <HAL_PCD_EP_DB_Transmit+0x784>
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	461a      	mov	r2, r3
 80028f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028f2:	4413      	add	r3, r2
 80028f4:	657b      	str	r3, [r7, #84]	; 0x54
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	011a      	lsls	r2, r3, #4
 80028fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028fe:	4413      	add	r3, r2
 8002900:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002904:	653b      	str	r3, [r7, #80]	; 0x50
 8002906:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800290a:	b29a      	uxth	r2, r3
 800290c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800290e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6818      	ldr	r0, [r3, #0]
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	6959      	ldr	r1, [r3, #20]
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	895a      	ldrh	r2, [r3, #10]
 800291c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002920:	b29b      	uxth	r3, r3
 8002922:	f003 fd92 	bl	800644a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	461a      	mov	r2, r3
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	4413      	add	r3, r2
 8002934:	881b      	ldrh	r3, [r3, #0]
 8002936:	b29b      	uxth	r3, r3
 8002938:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800293c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002940:	82bb      	strh	r3, [r7, #20]
 8002942:	8abb      	ldrh	r3, [r7, #20]
 8002944:	f083 0310 	eor.w	r3, r3, #16
 8002948:	82bb      	strh	r3, [r7, #20]
 800294a:	8abb      	ldrh	r3, [r7, #20]
 800294c:	f083 0320 	eor.w	r3, r3, #32
 8002950:	82bb      	strh	r3, [r7, #20]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	461a      	mov	r2, r3
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	441a      	add	r2, r3
 8002960:	8abb      	ldrh	r3, [r7, #20]
 8002962:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002966:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800296a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800296e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002972:	b29b      	uxth	r3, r3
 8002974:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002976:	2300      	movs	r3, #0
}
 8002978:	4618      	mov	r0, r3
 800297a:	3790      	adds	r7, #144	; 0x90
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}

08002980 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002980:	b480      	push	{r7}
 8002982:	b087      	sub	sp, #28
 8002984:	af00      	add	r7, sp, #0
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	607b      	str	r3, [r7, #4]
 800298a:	460b      	mov	r3, r1
 800298c:	817b      	strh	r3, [r7, #10]
 800298e:	4613      	mov	r3, r2
 8002990:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002992:	897b      	ldrh	r3, [r7, #10]
 8002994:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002998:	b29b      	uxth	r3, r3
 800299a:	2b00      	cmp	r3, #0
 800299c:	d00b      	beq.n	80029b6 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800299e:	897b      	ldrh	r3, [r7, #10]
 80029a0:	f003 0307 	and.w	r3, r3, #7
 80029a4:	1c5a      	adds	r2, r3, #1
 80029a6:	4613      	mov	r3, r2
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	4413      	add	r3, r2
 80029ac:	00db      	lsls	r3, r3, #3
 80029ae:	68fa      	ldr	r2, [r7, #12]
 80029b0:	4413      	add	r3, r2
 80029b2:	617b      	str	r3, [r7, #20]
 80029b4:	e009      	b.n	80029ca <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80029b6:	897a      	ldrh	r2, [r7, #10]
 80029b8:	4613      	mov	r3, r2
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	4413      	add	r3, r2
 80029be:	00db      	lsls	r3, r3, #3
 80029c0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80029c4:	68fa      	ldr	r2, [r7, #12]
 80029c6:	4413      	add	r3, r2
 80029c8:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80029ca:	893b      	ldrh	r3, [r7, #8]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d107      	bne.n	80029e0 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	2200      	movs	r2, #0
 80029d4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	b29a      	uxth	r2, r3
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	80da      	strh	r2, [r3, #6]
 80029de:	e00b      	b.n	80029f8 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	2201      	movs	r2, #1
 80029e4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	b29a      	uxth	r2, r3
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	0c1b      	lsrs	r3, r3, #16
 80029f2:	b29a      	uxth	r2, r3
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	371c      	adds	r7, #28
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bc80      	pop	{r7}
 8002a02:	4770      	bx	lr

08002a04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b086      	sub	sp, #24
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d101      	bne.n	8002a16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e272      	b.n	8002efc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0301 	and.w	r3, r3, #1
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	f000 8087 	beq.w	8002b32 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a24:	4b92      	ldr	r3, [pc, #584]	; (8002c70 <HAL_RCC_OscConfig+0x26c>)
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f003 030c 	and.w	r3, r3, #12
 8002a2c:	2b04      	cmp	r3, #4
 8002a2e:	d00c      	beq.n	8002a4a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a30:	4b8f      	ldr	r3, [pc, #572]	; (8002c70 <HAL_RCC_OscConfig+0x26c>)
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f003 030c 	and.w	r3, r3, #12
 8002a38:	2b08      	cmp	r3, #8
 8002a3a:	d112      	bne.n	8002a62 <HAL_RCC_OscConfig+0x5e>
 8002a3c:	4b8c      	ldr	r3, [pc, #560]	; (8002c70 <HAL_RCC_OscConfig+0x26c>)
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a48:	d10b      	bne.n	8002a62 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a4a:	4b89      	ldr	r3, [pc, #548]	; (8002c70 <HAL_RCC_OscConfig+0x26c>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d06c      	beq.n	8002b30 <HAL_RCC_OscConfig+0x12c>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d168      	bne.n	8002b30 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e24c      	b.n	8002efc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a6a:	d106      	bne.n	8002a7a <HAL_RCC_OscConfig+0x76>
 8002a6c:	4b80      	ldr	r3, [pc, #512]	; (8002c70 <HAL_RCC_OscConfig+0x26c>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a7f      	ldr	r2, [pc, #508]	; (8002c70 <HAL_RCC_OscConfig+0x26c>)
 8002a72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a76:	6013      	str	r3, [r2, #0]
 8002a78:	e02e      	b.n	8002ad8 <HAL_RCC_OscConfig+0xd4>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d10c      	bne.n	8002a9c <HAL_RCC_OscConfig+0x98>
 8002a82:	4b7b      	ldr	r3, [pc, #492]	; (8002c70 <HAL_RCC_OscConfig+0x26c>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a7a      	ldr	r2, [pc, #488]	; (8002c70 <HAL_RCC_OscConfig+0x26c>)
 8002a88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a8c:	6013      	str	r3, [r2, #0]
 8002a8e:	4b78      	ldr	r3, [pc, #480]	; (8002c70 <HAL_RCC_OscConfig+0x26c>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a77      	ldr	r2, [pc, #476]	; (8002c70 <HAL_RCC_OscConfig+0x26c>)
 8002a94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a98:	6013      	str	r3, [r2, #0]
 8002a9a:	e01d      	b.n	8002ad8 <HAL_RCC_OscConfig+0xd4>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002aa4:	d10c      	bne.n	8002ac0 <HAL_RCC_OscConfig+0xbc>
 8002aa6:	4b72      	ldr	r3, [pc, #456]	; (8002c70 <HAL_RCC_OscConfig+0x26c>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a71      	ldr	r2, [pc, #452]	; (8002c70 <HAL_RCC_OscConfig+0x26c>)
 8002aac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ab0:	6013      	str	r3, [r2, #0]
 8002ab2:	4b6f      	ldr	r3, [pc, #444]	; (8002c70 <HAL_RCC_OscConfig+0x26c>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a6e      	ldr	r2, [pc, #440]	; (8002c70 <HAL_RCC_OscConfig+0x26c>)
 8002ab8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002abc:	6013      	str	r3, [r2, #0]
 8002abe:	e00b      	b.n	8002ad8 <HAL_RCC_OscConfig+0xd4>
 8002ac0:	4b6b      	ldr	r3, [pc, #428]	; (8002c70 <HAL_RCC_OscConfig+0x26c>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a6a      	ldr	r2, [pc, #424]	; (8002c70 <HAL_RCC_OscConfig+0x26c>)
 8002ac6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002aca:	6013      	str	r3, [r2, #0]
 8002acc:	4b68      	ldr	r3, [pc, #416]	; (8002c70 <HAL_RCC_OscConfig+0x26c>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a67      	ldr	r2, [pc, #412]	; (8002c70 <HAL_RCC_OscConfig+0x26c>)
 8002ad2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ad6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d013      	beq.n	8002b08 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae0:	f7fd ff6e 	bl	80009c0 <HAL_GetTick>
 8002ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ae6:	e008      	b.n	8002afa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ae8:	f7fd ff6a 	bl	80009c0 <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	2b64      	cmp	r3, #100	; 0x64
 8002af4:	d901      	bls.n	8002afa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e200      	b.n	8002efc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002afa:	4b5d      	ldr	r3, [pc, #372]	; (8002c70 <HAL_RCC_OscConfig+0x26c>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d0f0      	beq.n	8002ae8 <HAL_RCC_OscConfig+0xe4>
 8002b06:	e014      	b.n	8002b32 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b08:	f7fd ff5a 	bl	80009c0 <HAL_GetTick>
 8002b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b0e:	e008      	b.n	8002b22 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b10:	f7fd ff56 	bl	80009c0 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b64      	cmp	r3, #100	; 0x64
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e1ec      	b.n	8002efc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b22:	4b53      	ldr	r3, [pc, #332]	; (8002c70 <HAL_RCC_OscConfig+0x26c>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d1f0      	bne.n	8002b10 <HAL_RCC_OscConfig+0x10c>
 8002b2e:	e000      	b.n	8002b32 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d063      	beq.n	8002c06 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b3e:	4b4c      	ldr	r3, [pc, #304]	; (8002c70 <HAL_RCC_OscConfig+0x26c>)
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f003 030c 	and.w	r3, r3, #12
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d00b      	beq.n	8002b62 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002b4a:	4b49      	ldr	r3, [pc, #292]	; (8002c70 <HAL_RCC_OscConfig+0x26c>)
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	f003 030c 	and.w	r3, r3, #12
 8002b52:	2b08      	cmp	r3, #8
 8002b54:	d11c      	bne.n	8002b90 <HAL_RCC_OscConfig+0x18c>
 8002b56:	4b46      	ldr	r3, [pc, #280]	; (8002c70 <HAL_RCC_OscConfig+0x26c>)
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d116      	bne.n	8002b90 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b62:	4b43      	ldr	r3, [pc, #268]	; (8002c70 <HAL_RCC_OscConfig+0x26c>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d005      	beq.n	8002b7a <HAL_RCC_OscConfig+0x176>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d001      	beq.n	8002b7a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e1c0      	b.n	8002efc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b7a:	4b3d      	ldr	r3, [pc, #244]	; (8002c70 <HAL_RCC_OscConfig+0x26c>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	695b      	ldr	r3, [r3, #20]
 8002b86:	00db      	lsls	r3, r3, #3
 8002b88:	4939      	ldr	r1, [pc, #228]	; (8002c70 <HAL_RCC_OscConfig+0x26c>)
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b8e:	e03a      	b.n	8002c06 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	691b      	ldr	r3, [r3, #16]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d020      	beq.n	8002bda <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b98:	4b36      	ldr	r3, [pc, #216]	; (8002c74 <HAL_RCC_OscConfig+0x270>)
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b9e:	f7fd ff0f 	bl	80009c0 <HAL_GetTick>
 8002ba2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ba4:	e008      	b.n	8002bb8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ba6:	f7fd ff0b 	bl	80009c0 <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d901      	bls.n	8002bb8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e1a1      	b.n	8002efc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bb8:	4b2d      	ldr	r3, [pc, #180]	; (8002c70 <HAL_RCC_OscConfig+0x26c>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0302 	and.w	r3, r3, #2
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d0f0      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bc4:	4b2a      	ldr	r3, [pc, #168]	; (8002c70 <HAL_RCC_OscConfig+0x26c>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	695b      	ldr	r3, [r3, #20]
 8002bd0:	00db      	lsls	r3, r3, #3
 8002bd2:	4927      	ldr	r1, [pc, #156]	; (8002c70 <HAL_RCC_OscConfig+0x26c>)
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	600b      	str	r3, [r1, #0]
 8002bd8:	e015      	b.n	8002c06 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bda:	4b26      	ldr	r3, [pc, #152]	; (8002c74 <HAL_RCC_OscConfig+0x270>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be0:	f7fd feee 	bl	80009c0 <HAL_GetTick>
 8002be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002be6:	e008      	b.n	8002bfa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002be8:	f7fd feea 	bl	80009c0 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e180      	b.n	8002efc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bfa:	4b1d      	ldr	r3, [pc, #116]	; (8002c70 <HAL_RCC_OscConfig+0x26c>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d1f0      	bne.n	8002be8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0308 	and.w	r3, r3, #8
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d03a      	beq.n	8002c88 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	699b      	ldr	r3, [r3, #24]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d019      	beq.n	8002c4e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c1a:	4b17      	ldr	r3, [pc, #92]	; (8002c78 <HAL_RCC_OscConfig+0x274>)
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c20:	f7fd fece 	bl	80009c0 <HAL_GetTick>
 8002c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c26:	e008      	b.n	8002c3a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c28:	f7fd feca 	bl	80009c0 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e160      	b.n	8002efc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c3a:	4b0d      	ldr	r3, [pc, #52]	; (8002c70 <HAL_RCC_OscConfig+0x26c>)
 8002c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d0f0      	beq.n	8002c28 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002c46:	2001      	movs	r0, #1
 8002c48:	f000 fa9c 	bl	8003184 <RCC_Delay>
 8002c4c:	e01c      	b.n	8002c88 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c4e:	4b0a      	ldr	r3, [pc, #40]	; (8002c78 <HAL_RCC_OscConfig+0x274>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c54:	f7fd feb4 	bl	80009c0 <HAL_GetTick>
 8002c58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c5a:	e00f      	b.n	8002c7c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c5c:	f7fd feb0 	bl	80009c0 <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d908      	bls.n	8002c7c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e146      	b.n	8002efc <HAL_RCC_OscConfig+0x4f8>
 8002c6e:	bf00      	nop
 8002c70:	40021000 	.word	0x40021000
 8002c74:	42420000 	.word	0x42420000
 8002c78:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c7c:	4b92      	ldr	r3, [pc, #584]	; (8002ec8 <HAL_RCC_OscConfig+0x4c4>)
 8002c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c80:	f003 0302 	and.w	r3, r3, #2
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d1e9      	bne.n	8002c5c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0304 	and.w	r3, r3, #4
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	f000 80a6 	beq.w	8002de2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c96:	2300      	movs	r3, #0
 8002c98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c9a:	4b8b      	ldr	r3, [pc, #556]	; (8002ec8 <HAL_RCC_OscConfig+0x4c4>)
 8002c9c:	69db      	ldr	r3, [r3, #28]
 8002c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d10d      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ca6:	4b88      	ldr	r3, [pc, #544]	; (8002ec8 <HAL_RCC_OscConfig+0x4c4>)
 8002ca8:	69db      	ldr	r3, [r3, #28]
 8002caa:	4a87      	ldr	r2, [pc, #540]	; (8002ec8 <HAL_RCC_OscConfig+0x4c4>)
 8002cac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cb0:	61d3      	str	r3, [r2, #28]
 8002cb2:	4b85      	ldr	r3, [pc, #532]	; (8002ec8 <HAL_RCC_OscConfig+0x4c4>)
 8002cb4:	69db      	ldr	r3, [r3, #28]
 8002cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cba:	60bb      	str	r3, [r7, #8]
 8002cbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cc2:	4b82      	ldr	r3, [pc, #520]	; (8002ecc <HAL_RCC_OscConfig+0x4c8>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d118      	bne.n	8002d00 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cce:	4b7f      	ldr	r3, [pc, #508]	; (8002ecc <HAL_RCC_OscConfig+0x4c8>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a7e      	ldr	r2, [pc, #504]	; (8002ecc <HAL_RCC_OscConfig+0x4c8>)
 8002cd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cda:	f7fd fe71 	bl	80009c0 <HAL_GetTick>
 8002cde:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ce0:	e008      	b.n	8002cf4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ce2:	f7fd fe6d 	bl	80009c0 <HAL_GetTick>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	2b64      	cmp	r3, #100	; 0x64
 8002cee:	d901      	bls.n	8002cf4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	e103      	b.n	8002efc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cf4:	4b75      	ldr	r3, [pc, #468]	; (8002ecc <HAL_RCC_OscConfig+0x4c8>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d0f0      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d106      	bne.n	8002d16 <HAL_RCC_OscConfig+0x312>
 8002d08:	4b6f      	ldr	r3, [pc, #444]	; (8002ec8 <HAL_RCC_OscConfig+0x4c4>)
 8002d0a:	6a1b      	ldr	r3, [r3, #32]
 8002d0c:	4a6e      	ldr	r2, [pc, #440]	; (8002ec8 <HAL_RCC_OscConfig+0x4c4>)
 8002d0e:	f043 0301 	orr.w	r3, r3, #1
 8002d12:	6213      	str	r3, [r2, #32]
 8002d14:	e02d      	b.n	8002d72 <HAL_RCC_OscConfig+0x36e>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d10c      	bne.n	8002d38 <HAL_RCC_OscConfig+0x334>
 8002d1e:	4b6a      	ldr	r3, [pc, #424]	; (8002ec8 <HAL_RCC_OscConfig+0x4c4>)
 8002d20:	6a1b      	ldr	r3, [r3, #32]
 8002d22:	4a69      	ldr	r2, [pc, #420]	; (8002ec8 <HAL_RCC_OscConfig+0x4c4>)
 8002d24:	f023 0301 	bic.w	r3, r3, #1
 8002d28:	6213      	str	r3, [r2, #32]
 8002d2a:	4b67      	ldr	r3, [pc, #412]	; (8002ec8 <HAL_RCC_OscConfig+0x4c4>)
 8002d2c:	6a1b      	ldr	r3, [r3, #32]
 8002d2e:	4a66      	ldr	r2, [pc, #408]	; (8002ec8 <HAL_RCC_OscConfig+0x4c4>)
 8002d30:	f023 0304 	bic.w	r3, r3, #4
 8002d34:	6213      	str	r3, [r2, #32]
 8002d36:	e01c      	b.n	8002d72 <HAL_RCC_OscConfig+0x36e>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	2b05      	cmp	r3, #5
 8002d3e:	d10c      	bne.n	8002d5a <HAL_RCC_OscConfig+0x356>
 8002d40:	4b61      	ldr	r3, [pc, #388]	; (8002ec8 <HAL_RCC_OscConfig+0x4c4>)
 8002d42:	6a1b      	ldr	r3, [r3, #32]
 8002d44:	4a60      	ldr	r2, [pc, #384]	; (8002ec8 <HAL_RCC_OscConfig+0x4c4>)
 8002d46:	f043 0304 	orr.w	r3, r3, #4
 8002d4a:	6213      	str	r3, [r2, #32]
 8002d4c:	4b5e      	ldr	r3, [pc, #376]	; (8002ec8 <HAL_RCC_OscConfig+0x4c4>)
 8002d4e:	6a1b      	ldr	r3, [r3, #32]
 8002d50:	4a5d      	ldr	r2, [pc, #372]	; (8002ec8 <HAL_RCC_OscConfig+0x4c4>)
 8002d52:	f043 0301 	orr.w	r3, r3, #1
 8002d56:	6213      	str	r3, [r2, #32]
 8002d58:	e00b      	b.n	8002d72 <HAL_RCC_OscConfig+0x36e>
 8002d5a:	4b5b      	ldr	r3, [pc, #364]	; (8002ec8 <HAL_RCC_OscConfig+0x4c4>)
 8002d5c:	6a1b      	ldr	r3, [r3, #32]
 8002d5e:	4a5a      	ldr	r2, [pc, #360]	; (8002ec8 <HAL_RCC_OscConfig+0x4c4>)
 8002d60:	f023 0301 	bic.w	r3, r3, #1
 8002d64:	6213      	str	r3, [r2, #32]
 8002d66:	4b58      	ldr	r3, [pc, #352]	; (8002ec8 <HAL_RCC_OscConfig+0x4c4>)
 8002d68:	6a1b      	ldr	r3, [r3, #32]
 8002d6a:	4a57      	ldr	r2, [pc, #348]	; (8002ec8 <HAL_RCC_OscConfig+0x4c4>)
 8002d6c:	f023 0304 	bic.w	r3, r3, #4
 8002d70:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d015      	beq.n	8002da6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d7a:	f7fd fe21 	bl	80009c0 <HAL_GetTick>
 8002d7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d80:	e00a      	b.n	8002d98 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d82:	f7fd fe1d 	bl	80009c0 <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d901      	bls.n	8002d98 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	e0b1      	b.n	8002efc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d98:	4b4b      	ldr	r3, [pc, #300]	; (8002ec8 <HAL_RCC_OscConfig+0x4c4>)
 8002d9a:	6a1b      	ldr	r3, [r3, #32]
 8002d9c:	f003 0302 	and.w	r3, r3, #2
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d0ee      	beq.n	8002d82 <HAL_RCC_OscConfig+0x37e>
 8002da4:	e014      	b.n	8002dd0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002da6:	f7fd fe0b 	bl	80009c0 <HAL_GetTick>
 8002daa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dac:	e00a      	b.n	8002dc4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dae:	f7fd fe07 	bl	80009c0 <HAL_GetTick>
 8002db2:	4602      	mov	r2, r0
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d901      	bls.n	8002dc4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e09b      	b.n	8002efc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dc4:	4b40      	ldr	r3, [pc, #256]	; (8002ec8 <HAL_RCC_OscConfig+0x4c4>)
 8002dc6:	6a1b      	ldr	r3, [r3, #32]
 8002dc8:	f003 0302 	and.w	r3, r3, #2
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d1ee      	bne.n	8002dae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002dd0:	7dfb      	ldrb	r3, [r7, #23]
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d105      	bne.n	8002de2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dd6:	4b3c      	ldr	r3, [pc, #240]	; (8002ec8 <HAL_RCC_OscConfig+0x4c4>)
 8002dd8:	69db      	ldr	r3, [r3, #28]
 8002dda:	4a3b      	ldr	r2, [pc, #236]	; (8002ec8 <HAL_RCC_OscConfig+0x4c4>)
 8002ddc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002de0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	69db      	ldr	r3, [r3, #28]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	f000 8087 	beq.w	8002efa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002dec:	4b36      	ldr	r3, [pc, #216]	; (8002ec8 <HAL_RCC_OscConfig+0x4c4>)
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f003 030c 	and.w	r3, r3, #12
 8002df4:	2b08      	cmp	r3, #8
 8002df6:	d061      	beq.n	8002ebc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	69db      	ldr	r3, [r3, #28]
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d146      	bne.n	8002e8e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e00:	4b33      	ldr	r3, [pc, #204]	; (8002ed0 <HAL_RCC_OscConfig+0x4cc>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e06:	f7fd fddb 	bl	80009c0 <HAL_GetTick>
 8002e0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e0c:	e008      	b.n	8002e20 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e0e:	f7fd fdd7 	bl	80009c0 <HAL_GetTick>
 8002e12:	4602      	mov	r2, r0
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d901      	bls.n	8002e20 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e06d      	b.n	8002efc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e20:	4b29      	ldr	r3, [pc, #164]	; (8002ec8 <HAL_RCC_OscConfig+0x4c4>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d1f0      	bne.n	8002e0e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6a1b      	ldr	r3, [r3, #32]
 8002e30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e34:	d108      	bne.n	8002e48 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e36:	4b24      	ldr	r3, [pc, #144]	; (8002ec8 <HAL_RCC_OscConfig+0x4c4>)
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	4921      	ldr	r1, [pc, #132]	; (8002ec8 <HAL_RCC_OscConfig+0x4c4>)
 8002e44:	4313      	orrs	r3, r2
 8002e46:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e48:	4b1f      	ldr	r3, [pc, #124]	; (8002ec8 <HAL_RCC_OscConfig+0x4c4>)
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6a19      	ldr	r1, [r3, #32]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e58:	430b      	orrs	r3, r1
 8002e5a:	491b      	ldr	r1, [pc, #108]	; (8002ec8 <HAL_RCC_OscConfig+0x4c4>)
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e60:	4b1b      	ldr	r3, [pc, #108]	; (8002ed0 <HAL_RCC_OscConfig+0x4cc>)
 8002e62:	2201      	movs	r2, #1
 8002e64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e66:	f7fd fdab 	bl	80009c0 <HAL_GetTick>
 8002e6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e6c:	e008      	b.n	8002e80 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e6e:	f7fd fda7 	bl	80009c0 <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d901      	bls.n	8002e80 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	e03d      	b.n	8002efc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e80:	4b11      	ldr	r3, [pc, #68]	; (8002ec8 <HAL_RCC_OscConfig+0x4c4>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d0f0      	beq.n	8002e6e <HAL_RCC_OscConfig+0x46a>
 8002e8c:	e035      	b.n	8002efa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e8e:	4b10      	ldr	r3, [pc, #64]	; (8002ed0 <HAL_RCC_OscConfig+0x4cc>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e94:	f7fd fd94 	bl	80009c0 <HAL_GetTick>
 8002e98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e9a:	e008      	b.n	8002eae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e9c:	f7fd fd90 	bl	80009c0 <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d901      	bls.n	8002eae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e026      	b.n	8002efc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002eae:	4b06      	ldr	r3, [pc, #24]	; (8002ec8 <HAL_RCC_OscConfig+0x4c4>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d1f0      	bne.n	8002e9c <HAL_RCC_OscConfig+0x498>
 8002eba:	e01e      	b.n	8002efa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	69db      	ldr	r3, [r3, #28]
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d107      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e019      	b.n	8002efc <HAL_RCC_OscConfig+0x4f8>
 8002ec8:	40021000 	.word	0x40021000
 8002ecc:	40007000 	.word	0x40007000
 8002ed0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ed4:	4b0b      	ldr	r3, [pc, #44]	; (8002f04 <HAL_RCC_OscConfig+0x500>)
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6a1b      	ldr	r3, [r3, #32]
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d106      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d001      	beq.n	8002efa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e000      	b.n	8002efc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002efa:	2300      	movs	r3, #0
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3718      	adds	r7, #24
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	40021000 	.word	0x40021000

08002f08 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d101      	bne.n	8002f1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e0d0      	b.n	80030be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f1c:	4b6a      	ldr	r3, [pc, #424]	; (80030c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0307 	and.w	r3, r3, #7
 8002f24:	683a      	ldr	r2, [r7, #0]
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d910      	bls.n	8002f4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f2a:	4b67      	ldr	r3, [pc, #412]	; (80030c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f023 0207 	bic.w	r2, r3, #7
 8002f32:	4965      	ldr	r1, [pc, #404]	; (80030c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f3a:	4b63      	ldr	r3, [pc, #396]	; (80030c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0307 	and.w	r3, r3, #7
 8002f42:	683a      	ldr	r2, [r7, #0]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d001      	beq.n	8002f4c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e0b8      	b.n	80030be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0302 	and.w	r3, r3, #2
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d020      	beq.n	8002f9a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0304 	and.w	r3, r3, #4
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d005      	beq.n	8002f70 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f64:	4b59      	ldr	r3, [pc, #356]	; (80030cc <HAL_RCC_ClockConfig+0x1c4>)
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	4a58      	ldr	r2, [pc, #352]	; (80030cc <HAL_RCC_ClockConfig+0x1c4>)
 8002f6a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f6e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0308 	and.w	r3, r3, #8
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d005      	beq.n	8002f88 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f7c:	4b53      	ldr	r3, [pc, #332]	; (80030cc <HAL_RCC_ClockConfig+0x1c4>)
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	4a52      	ldr	r2, [pc, #328]	; (80030cc <HAL_RCC_ClockConfig+0x1c4>)
 8002f82:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002f86:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f88:	4b50      	ldr	r3, [pc, #320]	; (80030cc <HAL_RCC_ClockConfig+0x1c4>)
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	494d      	ldr	r1, [pc, #308]	; (80030cc <HAL_RCC_ClockConfig+0x1c4>)
 8002f96:	4313      	orrs	r3, r2
 8002f98:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0301 	and.w	r3, r3, #1
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d040      	beq.n	8003028 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d107      	bne.n	8002fbe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fae:	4b47      	ldr	r3, [pc, #284]	; (80030cc <HAL_RCC_ClockConfig+0x1c4>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d115      	bne.n	8002fe6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e07f      	b.n	80030be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d107      	bne.n	8002fd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fc6:	4b41      	ldr	r3, [pc, #260]	; (80030cc <HAL_RCC_ClockConfig+0x1c4>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d109      	bne.n	8002fe6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e073      	b.n	80030be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fd6:	4b3d      	ldr	r3, [pc, #244]	; (80030cc <HAL_RCC_ClockConfig+0x1c4>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0302 	and.w	r3, r3, #2
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d101      	bne.n	8002fe6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e06b      	b.n	80030be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fe6:	4b39      	ldr	r3, [pc, #228]	; (80030cc <HAL_RCC_ClockConfig+0x1c4>)
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f023 0203 	bic.w	r2, r3, #3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	4936      	ldr	r1, [pc, #216]	; (80030cc <HAL_RCC_ClockConfig+0x1c4>)
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ff8:	f7fd fce2 	bl	80009c0 <HAL_GetTick>
 8002ffc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ffe:	e00a      	b.n	8003016 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003000:	f7fd fcde 	bl	80009c0 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	f241 3288 	movw	r2, #5000	; 0x1388
 800300e:	4293      	cmp	r3, r2
 8003010:	d901      	bls.n	8003016 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e053      	b.n	80030be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003016:	4b2d      	ldr	r3, [pc, #180]	; (80030cc <HAL_RCC_ClockConfig+0x1c4>)
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f003 020c 	and.w	r2, r3, #12
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	429a      	cmp	r2, r3
 8003026:	d1eb      	bne.n	8003000 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003028:	4b27      	ldr	r3, [pc, #156]	; (80030c8 <HAL_RCC_ClockConfig+0x1c0>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0307 	and.w	r3, r3, #7
 8003030:	683a      	ldr	r2, [r7, #0]
 8003032:	429a      	cmp	r2, r3
 8003034:	d210      	bcs.n	8003058 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003036:	4b24      	ldr	r3, [pc, #144]	; (80030c8 <HAL_RCC_ClockConfig+0x1c0>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f023 0207 	bic.w	r2, r3, #7
 800303e:	4922      	ldr	r1, [pc, #136]	; (80030c8 <HAL_RCC_ClockConfig+0x1c0>)
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	4313      	orrs	r3, r2
 8003044:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003046:	4b20      	ldr	r3, [pc, #128]	; (80030c8 <HAL_RCC_ClockConfig+0x1c0>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0307 	and.w	r3, r3, #7
 800304e:	683a      	ldr	r2, [r7, #0]
 8003050:	429a      	cmp	r2, r3
 8003052:	d001      	beq.n	8003058 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e032      	b.n	80030be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0304 	and.w	r3, r3, #4
 8003060:	2b00      	cmp	r3, #0
 8003062:	d008      	beq.n	8003076 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003064:	4b19      	ldr	r3, [pc, #100]	; (80030cc <HAL_RCC_ClockConfig+0x1c4>)
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	4916      	ldr	r1, [pc, #88]	; (80030cc <HAL_RCC_ClockConfig+0x1c4>)
 8003072:	4313      	orrs	r3, r2
 8003074:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0308 	and.w	r3, r3, #8
 800307e:	2b00      	cmp	r3, #0
 8003080:	d009      	beq.n	8003096 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003082:	4b12      	ldr	r3, [pc, #72]	; (80030cc <HAL_RCC_ClockConfig+0x1c4>)
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	00db      	lsls	r3, r3, #3
 8003090:	490e      	ldr	r1, [pc, #56]	; (80030cc <HAL_RCC_ClockConfig+0x1c4>)
 8003092:	4313      	orrs	r3, r2
 8003094:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003096:	f000 f821 	bl	80030dc <HAL_RCC_GetSysClockFreq>
 800309a:	4602      	mov	r2, r0
 800309c:	4b0b      	ldr	r3, [pc, #44]	; (80030cc <HAL_RCC_ClockConfig+0x1c4>)
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	091b      	lsrs	r3, r3, #4
 80030a2:	f003 030f 	and.w	r3, r3, #15
 80030a6:	490a      	ldr	r1, [pc, #40]	; (80030d0 <HAL_RCC_ClockConfig+0x1c8>)
 80030a8:	5ccb      	ldrb	r3, [r1, r3]
 80030aa:	fa22 f303 	lsr.w	r3, r2, r3
 80030ae:	4a09      	ldr	r2, [pc, #36]	; (80030d4 <HAL_RCC_ClockConfig+0x1cc>)
 80030b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80030b2:	4b09      	ldr	r3, [pc, #36]	; (80030d8 <HAL_RCC_ClockConfig+0x1d0>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4618      	mov	r0, r3
 80030b8:	f7fd fc40 	bl	800093c <HAL_InitTick>

  return HAL_OK;
 80030bc:	2300      	movs	r3, #0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3710      	adds	r7, #16
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	40022000 	.word	0x40022000
 80030cc:	40021000 	.word	0x40021000
 80030d0:	080093a0 	.word	0x080093a0
 80030d4:	20000000 	.word	0x20000000
 80030d8:	20000004 	.word	0x20000004

080030dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030dc:	b480      	push	{r7}
 80030de:	b087      	sub	sp, #28
 80030e0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80030e2:	2300      	movs	r3, #0
 80030e4:	60fb      	str	r3, [r7, #12]
 80030e6:	2300      	movs	r3, #0
 80030e8:	60bb      	str	r3, [r7, #8]
 80030ea:	2300      	movs	r3, #0
 80030ec:	617b      	str	r3, [r7, #20]
 80030ee:	2300      	movs	r3, #0
 80030f0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80030f2:	2300      	movs	r3, #0
 80030f4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80030f6:	4b1e      	ldr	r3, [pc, #120]	; (8003170 <HAL_RCC_GetSysClockFreq+0x94>)
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f003 030c 	and.w	r3, r3, #12
 8003102:	2b04      	cmp	r3, #4
 8003104:	d002      	beq.n	800310c <HAL_RCC_GetSysClockFreq+0x30>
 8003106:	2b08      	cmp	r3, #8
 8003108:	d003      	beq.n	8003112 <HAL_RCC_GetSysClockFreq+0x36>
 800310a:	e027      	b.n	800315c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800310c:	4b19      	ldr	r3, [pc, #100]	; (8003174 <HAL_RCC_GetSysClockFreq+0x98>)
 800310e:	613b      	str	r3, [r7, #16]
      break;
 8003110:	e027      	b.n	8003162 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	0c9b      	lsrs	r3, r3, #18
 8003116:	f003 030f 	and.w	r3, r3, #15
 800311a:	4a17      	ldr	r2, [pc, #92]	; (8003178 <HAL_RCC_GetSysClockFreq+0x9c>)
 800311c:	5cd3      	ldrb	r3, [r2, r3]
 800311e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d010      	beq.n	800314c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800312a:	4b11      	ldr	r3, [pc, #68]	; (8003170 <HAL_RCC_GetSysClockFreq+0x94>)
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	0c5b      	lsrs	r3, r3, #17
 8003130:	f003 0301 	and.w	r3, r3, #1
 8003134:	4a11      	ldr	r2, [pc, #68]	; (800317c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003136:	5cd3      	ldrb	r3, [r2, r3]
 8003138:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a0d      	ldr	r2, [pc, #52]	; (8003174 <HAL_RCC_GetSysClockFreq+0x98>)
 800313e:	fb03 f202 	mul.w	r2, r3, r2
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	fbb2 f3f3 	udiv	r3, r2, r3
 8003148:	617b      	str	r3, [r7, #20]
 800314a:	e004      	b.n	8003156 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4a0c      	ldr	r2, [pc, #48]	; (8003180 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003150:	fb02 f303 	mul.w	r3, r2, r3
 8003154:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	613b      	str	r3, [r7, #16]
      break;
 800315a:	e002      	b.n	8003162 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800315c:	4b05      	ldr	r3, [pc, #20]	; (8003174 <HAL_RCC_GetSysClockFreq+0x98>)
 800315e:	613b      	str	r3, [r7, #16]
      break;
 8003160:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003162:	693b      	ldr	r3, [r7, #16]
}
 8003164:	4618      	mov	r0, r3
 8003166:	371c      	adds	r7, #28
 8003168:	46bd      	mov	sp, r7
 800316a:	bc80      	pop	{r7}
 800316c:	4770      	bx	lr
 800316e:	bf00      	nop
 8003170:	40021000 	.word	0x40021000
 8003174:	007a1200 	.word	0x007a1200
 8003178:	080093b0 	.word	0x080093b0
 800317c:	080093c0 	.word	0x080093c0
 8003180:	003d0900 	.word	0x003d0900

08003184 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003184:	b480      	push	{r7}
 8003186:	b085      	sub	sp, #20
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800318c:	4b0a      	ldr	r3, [pc, #40]	; (80031b8 <RCC_Delay+0x34>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a0a      	ldr	r2, [pc, #40]	; (80031bc <RCC_Delay+0x38>)
 8003192:	fba2 2303 	umull	r2, r3, r2, r3
 8003196:	0a5b      	lsrs	r3, r3, #9
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	fb02 f303 	mul.w	r3, r2, r3
 800319e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80031a0:	bf00      	nop
  }
  while (Delay --);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	1e5a      	subs	r2, r3, #1
 80031a6:	60fa      	str	r2, [r7, #12]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d1f9      	bne.n	80031a0 <RCC_Delay+0x1c>
}
 80031ac:	bf00      	nop
 80031ae:	bf00      	nop
 80031b0:	3714      	adds	r7, #20
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bc80      	pop	{r7}
 80031b6:	4770      	bx	lr
 80031b8:	20000000 	.word	0x20000000
 80031bc:	10624dd3 	.word	0x10624dd3

080031c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b086      	sub	sp, #24
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80031c8:	2300      	movs	r3, #0
 80031ca:	613b      	str	r3, [r7, #16]
 80031cc:	2300      	movs	r3, #0
 80031ce:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0301 	and.w	r3, r3, #1
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d07d      	beq.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80031dc:	2300      	movs	r3, #0
 80031de:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031e0:	4b4f      	ldr	r3, [pc, #316]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031e2:	69db      	ldr	r3, [r3, #28]
 80031e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d10d      	bne.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031ec:	4b4c      	ldr	r3, [pc, #304]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031ee:	69db      	ldr	r3, [r3, #28]
 80031f0:	4a4b      	ldr	r2, [pc, #300]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031f6:	61d3      	str	r3, [r2, #28]
 80031f8:	4b49      	ldr	r3, [pc, #292]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031fa:	69db      	ldr	r3, [r3, #28]
 80031fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003200:	60bb      	str	r3, [r7, #8]
 8003202:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003204:	2301      	movs	r3, #1
 8003206:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003208:	4b46      	ldr	r3, [pc, #280]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003210:	2b00      	cmp	r3, #0
 8003212:	d118      	bne.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003214:	4b43      	ldr	r3, [pc, #268]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a42      	ldr	r2, [pc, #264]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800321a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800321e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003220:	f7fd fbce 	bl	80009c0 <HAL_GetTick>
 8003224:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003226:	e008      	b.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003228:	f7fd fbca 	bl	80009c0 <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	2b64      	cmp	r3, #100	; 0x64
 8003234:	d901      	bls.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e06d      	b.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800323a:	4b3a      	ldr	r3, [pc, #232]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003242:	2b00      	cmp	r3, #0
 8003244:	d0f0      	beq.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003246:	4b36      	ldr	r3, [pc, #216]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003248:	6a1b      	ldr	r3, [r3, #32]
 800324a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800324e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d02e      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800325e:	68fa      	ldr	r2, [r7, #12]
 8003260:	429a      	cmp	r2, r3
 8003262:	d027      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003264:	4b2e      	ldr	r3, [pc, #184]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003266:	6a1b      	ldr	r3, [r3, #32]
 8003268:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800326c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800326e:	4b2e      	ldr	r3, [pc, #184]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003270:	2201      	movs	r2, #1
 8003272:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003274:	4b2c      	ldr	r3, [pc, #176]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003276:	2200      	movs	r2, #0
 8003278:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800327a:	4a29      	ldr	r2, [pc, #164]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f003 0301 	and.w	r3, r3, #1
 8003286:	2b00      	cmp	r3, #0
 8003288:	d014      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800328a:	f7fd fb99 	bl	80009c0 <HAL_GetTick>
 800328e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003290:	e00a      	b.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003292:	f7fd fb95 	bl	80009c0 <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	f241 3288 	movw	r2, #5000	; 0x1388
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d901      	bls.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80032a4:	2303      	movs	r3, #3
 80032a6:	e036      	b.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032a8:	4b1d      	ldr	r3, [pc, #116]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032aa:	6a1b      	ldr	r3, [r3, #32]
 80032ac:	f003 0302 	and.w	r3, r3, #2
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d0ee      	beq.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032b4:	4b1a      	ldr	r3, [pc, #104]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032b6:	6a1b      	ldr	r3, [r3, #32]
 80032b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	4917      	ldr	r1, [pc, #92]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80032c6:	7dfb      	ldrb	r3, [r7, #23]
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d105      	bne.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032cc:	4b14      	ldr	r3, [pc, #80]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032ce:	69db      	ldr	r3, [r3, #28]
 80032d0:	4a13      	ldr	r2, [pc, #76]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032d6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0302 	and.w	r3, r3, #2
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d008      	beq.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80032e4:	4b0e      	ldr	r3, [pc, #56]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	490b      	ldr	r1, [pc, #44]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0310 	and.w	r3, r3, #16
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d008      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003302:	4b07      	ldr	r3, [pc, #28]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	4904      	ldr	r1, [pc, #16]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003310:	4313      	orrs	r3, r2
 8003312:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003314:	2300      	movs	r3, #0
}
 8003316:	4618      	mov	r0, r3
 8003318:	3718      	adds	r7, #24
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	40021000 	.word	0x40021000
 8003324:	40007000 	.word	0x40007000
 8003328:	42420440 	.word	0x42420440

0800332c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d101      	bne.n	800333e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e076      	b.n	800342c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003342:	2b00      	cmp	r3, #0
 8003344:	d108      	bne.n	8003358 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800334e:	d009      	beq.n	8003364 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	61da      	str	r2, [r3, #28]
 8003356:	e005      	b.n	8003364 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003370:	b2db      	uxtb	r3, r3
 8003372:	2b00      	cmp	r3, #0
 8003374:	d106      	bne.n	8003384 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f7fd f9e8 	bl	8000754 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2202      	movs	r2, #2
 8003388:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800339a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80033ac:	431a      	orrs	r2, r3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033b6:	431a      	orrs	r2, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	691b      	ldr	r3, [r3, #16]
 80033bc:	f003 0302 	and.w	r3, r3, #2
 80033c0:	431a      	orrs	r2, r3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	695b      	ldr	r3, [r3, #20]
 80033c6:	f003 0301 	and.w	r3, r3, #1
 80033ca:	431a      	orrs	r2, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	699b      	ldr	r3, [r3, #24]
 80033d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033d4:	431a      	orrs	r2, r3
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	69db      	ldr	r3, [r3, #28]
 80033da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80033de:	431a      	orrs	r2, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a1b      	ldr	r3, [r3, #32]
 80033e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033e8:	ea42 0103 	orr.w	r1, r2, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	430a      	orrs	r2, r1
 80033fa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	699b      	ldr	r3, [r3, #24]
 8003400:	0c1a      	lsrs	r2, r3, #16
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f002 0204 	and.w	r2, r2, #4
 800340a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	69da      	ldr	r2, [r3, #28]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800341a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2201      	movs	r2, #1
 8003426:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800342a:	2300      	movs	r3, #0
}
 800342c:	4618      	mov	r0, r3
 800342e:	3708      	adds	r7, #8
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}

08003434 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b088      	sub	sp, #32
 8003438:	af00      	add	r7, sp, #0
 800343a:	60f8      	str	r0, [r7, #12]
 800343c:	60b9      	str	r1, [r7, #8]
 800343e:	603b      	str	r3, [r7, #0]
 8003440:	4613      	mov	r3, r2
 8003442:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003444:	2300      	movs	r3, #0
 8003446:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800344e:	2b01      	cmp	r3, #1
 8003450:	d101      	bne.n	8003456 <HAL_SPI_Transmit+0x22>
 8003452:	2302      	movs	r3, #2
 8003454:	e12d      	b.n	80036b2 <HAL_SPI_Transmit+0x27e>
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2201      	movs	r2, #1
 800345a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800345e:	f7fd faaf 	bl	80009c0 <HAL_GetTick>
 8003462:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003464:	88fb      	ldrh	r3, [r7, #6]
 8003466:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800346e:	b2db      	uxtb	r3, r3
 8003470:	2b01      	cmp	r3, #1
 8003472:	d002      	beq.n	800347a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003474:	2302      	movs	r3, #2
 8003476:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003478:	e116      	b.n	80036a8 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d002      	beq.n	8003486 <HAL_SPI_Transmit+0x52>
 8003480:	88fb      	ldrh	r3, [r7, #6]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d102      	bne.n	800348c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	77fb      	strb	r3, [r7, #31]
    goto error;
 800348a:	e10d      	b.n	80036a8 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2203      	movs	r2, #3
 8003490:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2200      	movs	r2, #0
 8003498:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	68ba      	ldr	r2, [r7, #8]
 800349e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	88fa      	ldrh	r2, [r7, #6]
 80034a4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	88fa      	ldrh	r2, [r7, #6]
 80034aa:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2200      	movs	r2, #0
 80034b0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2200      	movs	r2, #0
 80034b6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2200      	movs	r2, #0
 80034bc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2200      	movs	r2, #0
 80034c2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2200      	movs	r2, #0
 80034c8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034d2:	d10f      	bne.n	80034f4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034e2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034f2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034fe:	2b40      	cmp	r3, #64	; 0x40
 8003500:	d007      	beq.n	8003512 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003510:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800351a:	d14f      	bne.n	80035bc <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d002      	beq.n	800352a <HAL_SPI_Transmit+0xf6>
 8003524:	8afb      	ldrh	r3, [r7, #22]
 8003526:	2b01      	cmp	r3, #1
 8003528:	d142      	bne.n	80035b0 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800352e:	881a      	ldrh	r2, [r3, #0]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800353a:	1c9a      	adds	r2, r3, #2
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003544:	b29b      	uxth	r3, r3
 8003546:	3b01      	subs	r3, #1
 8003548:	b29a      	uxth	r2, r3
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800354e:	e02f      	b.n	80035b0 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f003 0302 	and.w	r3, r3, #2
 800355a:	2b02      	cmp	r3, #2
 800355c:	d112      	bne.n	8003584 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003562:	881a      	ldrh	r2, [r3, #0]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356e:	1c9a      	adds	r2, r3, #2
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003578:	b29b      	uxth	r3, r3
 800357a:	3b01      	subs	r3, #1
 800357c:	b29a      	uxth	r2, r3
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	86da      	strh	r2, [r3, #54]	; 0x36
 8003582:	e015      	b.n	80035b0 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003584:	f7fd fa1c 	bl	80009c0 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	69bb      	ldr	r3, [r7, #24]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	683a      	ldr	r2, [r7, #0]
 8003590:	429a      	cmp	r2, r3
 8003592:	d803      	bhi.n	800359c <HAL_SPI_Transmit+0x168>
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800359a:	d102      	bne.n	80035a2 <HAL_SPI_Transmit+0x16e>
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d106      	bne.n	80035b0 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2201      	movs	r2, #1
 80035aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80035ae:	e07b      	b.n	80036a8 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d1ca      	bne.n	8003550 <HAL_SPI_Transmit+0x11c>
 80035ba:	e050      	b.n	800365e <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d002      	beq.n	80035ca <HAL_SPI_Transmit+0x196>
 80035c4:	8afb      	ldrh	r3, [r7, #22]
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d144      	bne.n	8003654 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	330c      	adds	r3, #12
 80035d4:	7812      	ldrb	r2, [r2, #0]
 80035d6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035dc:	1c5a      	adds	r2, r3, #1
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	3b01      	subs	r3, #1
 80035ea:	b29a      	uxth	r2, r3
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80035f0:	e030      	b.n	8003654 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	f003 0302 	and.w	r3, r3, #2
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d113      	bne.n	8003628 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	330c      	adds	r3, #12
 800360a:	7812      	ldrb	r2, [r2, #0]
 800360c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003612:	1c5a      	adds	r2, r3, #1
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800361c:	b29b      	uxth	r3, r3
 800361e:	3b01      	subs	r3, #1
 8003620:	b29a      	uxth	r2, r3
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	86da      	strh	r2, [r3, #54]	; 0x36
 8003626:	e015      	b.n	8003654 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003628:	f7fd f9ca 	bl	80009c0 <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	683a      	ldr	r2, [r7, #0]
 8003634:	429a      	cmp	r2, r3
 8003636:	d803      	bhi.n	8003640 <HAL_SPI_Transmit+0x20c>
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800363e:	d102      	bne.n	8003646 <HAL_SPI_Transmit+0x212>
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d106      	bne.n	8003654 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2201      	movs	r2, #1
 800364e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003652:	e029      	b.n	80036a8 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003658:	b29b      	uxth	r3, r3
 800365a:	2b00      	cmp	r3, #0
 800365c:	d1c9      	bne.n	80035f2 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800365e:	69ba      	ldr	r2, [r7, #24]
 8003660:	6839      	ldr	r1, [r7, #0]
 8003662:	68f8      	ldr	r0, [r7, #12]
 8003664:	f000 fbcc 	bl	8003e00 <SPI_EndRxTxTransaction>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d002      	beq.n	8003674 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2220      	movs	r2, #32
 8003672:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d10a      	bne.n	8003692 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800367c:	2300      	movs	r3, #0
 800367e:	613b      	str	r3, [r7, #16]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	613b      	str	r3, [r7, #16]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	613b      	str	r3, [r7, #16]
 8003690:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003696:	2b00      	cmp	r3, #0
 8003698:	d002      	beq.n	80036a0 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	77fb      	strb	r3, [r7, #31]
 800369e:	e003      	b.n	80036a8 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80036b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3720      	adds	r7, #32
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}

080036ba <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b088      	sub	sp, #32
 80036be:	af02      	add	r7, sp, #8
 80036c0:	60f8      	str	r0, [r7, #12]
 80036c2:	60b9      	str	r1, [r7, #8]
 80036c4:	603b      	str	r3, [r7, #0]
 80036c6:	4613      	mov	r3, r2
 80036c8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80036ca:	2300      	movs	r3, #0
 80036cc:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d002      	beq.n	80036e0 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80036da:	2302      	movs	r3, #2
 80036dc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80036de:	e0fb      	b.n	80038d8 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036e8:	d112      	bne.n	8003710 <HAL_SPI_Receive+0x56>
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d10e      	bne.n	8003710 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2204      	movs	r2, #4
 80036f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80036fa:	88fa      	ldrh	r2, [r7, #6]
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	9300      	str	r3, [sp, #0]
 8003700:	4613      	mov	r3, r2
 8003702:	68ba      	ldr	r2, [r7, #8]
 8003704:	68b9      	ldr	r1, [r7, #8]
 8003706:	68f8      	ldr	r0, [r7, #12]
 8003708:	f000 f8ef 	bl	80038ea <HAL_SPI_TransmitReceive>
 800370c:	4603      	mov	r3, r0
 800370e:	e0e8      	b.n	80038e2 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003716:	2b01      	cmp	r3, #1
 8003718:	d101      	bne.n	800371e <HAL_SPI_Receive+0x64>
 800371a:	2302      	movs	r3, #2
 800371c:	e0e1      	b.n	80038e2 <HAL_SPI_Receive+0x228>
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2201      	movs	r2, #1
 8003722:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003726:	f7fd f94b 	bl	80009c0 <HAL_GetTick>
 800372a:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d002      	beq.n	8003738 <HAL_SPI_Receive+0x7e>
 8003732:	88fb      	ldrh	r3, [r7, #6]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d102      	bne.n	800373e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800373c:	e0cc      	b.n	80038d8 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2204      	movs	r2, #4
 8003742:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2200      	movs	r2, #0
 800374a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	68ba      	ldr	r2, [r7, #8]
 8003750:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	88fa      	ldrh	r2, [r7, #6]
 8003756:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	88fa      	ldrh	r2, [r7, #6]
 800375c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2200      	movs	r2, #0
 8003762:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2200      	movs	r2, #0
 8003768:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2200      	movs	r2, #0
 800376e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2200      	movs	r2, #0
 8003774:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2200      	movs	r2, #0
 800377a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003784:	d10f      	bne.n	80037a6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003794:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80037a4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037b0:	2b40      	cmp	r3, #64	; 0x40
 80037b2:	d007      	beq.n	80037c4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037c2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d16a      	bne.n	80038a2 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80037cc:	e032      	b.n	8003834 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	f003 0301 	and.w	r3, r3, #1
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d115      	bne.n	8003808 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f103 020c 	add.w	r2, r3, #12
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e8:	7812      	ldrb	r2, [r2, #0]
 80037ea:	b2d2      	uxtb	r2, r2
 80037ec:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f2:	1c5a      	adds	r2, r3, #1
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	3b01      	subs	r3, #1
 8003800:	b29a      	uxth	r2, r3
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003806:	e015      	b.n	8003834 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003808:	f7fd f8da 	bl	80009c0 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	683a      	ldr	r2, [r7, #0]
 8003814:	429a      	cmp	r2, r3
 8003816:	d803      	bhi.n	8003820 <HAL_SPI_Receive+0x166>
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800381e:	d102      	bne.n	8003826 <HAL_SPI_Receive+0x16c>
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d106      	bne.n	8003834 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2201      	movs	r2, #1
 800382e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003832:	e051      	b.n	80038d8 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003838:	b29b      	uxth	r3, r3
 800383a:	2b00      	cmp	r3, #0
 800383c:	d1c7      	bne.n	80037ce <HAL_SPI_Receive+0x114>
 800383e:	e035      	b.n	80038ac <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f003 0301 	and.w	r3, r3, #1
 800384a:	2b01      	cmp	r3, #1
 800384c:	d113      	bne.n	8003876 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	68da      	ldr	r2, [r3, #12]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003858:	b292      	uxth	r2, r2
 800385a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003860:	1c9a      	adds	r2, r3, #2
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800386a:	b29b      	uxth	r3, r3
 800386c:	3b01      	subs	r3, #1
 800386e:	b29a      	uxth	r2, r3
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003874:	e015      	b.n	80038a2 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003876:	f7fd f8a3 	bl	80009c0 <HAL_GetTick>
 800387a:	4602      	mov	r2, r0
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	683a      	ldr	r2, [r7, #0]
 8003882:	429a      	cmp	r2, r3
 8003884:	d803      	bhi.n	800388e <HAL_SPI_Receive+0x1d4>
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800388c:	d102      	bne.n	8003894 <HAL_SPI_Receive+0x1da>
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d106      	bne.n	80038a2 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8003894:	2303      	movs	r3, #3
 8003896:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80038a0:	e01a      	b.n	80038d8 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d1c9      	bne.n	8003840 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80038ac:	693a      	ldr	r2, [r7, #16]
 80038ae:	6839      	ldr	r1, [r7, #0]
 80038b0:	68f8      	ldr	r0, [r7, #12]
 80038b2:	f000 fa53 	bl	8003d5c <SPI_EndRxTransaction>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d002      	beq.n	80038c2 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2220      	movs	r2, #32
 80038c0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d002      	beq.n	80038d0 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	75fb      	strb	r3, [r7, #23]
 80038ce:	e003      	b.n	80038d8 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2201      	movs	r2, #1
 80038d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2200      	movs	r2, #0
 80038dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80038e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3718      	adds	r7, #24
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}

080038ea <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80038ea:	b580      	push	{r7, lr}
 80038ec:	b08c      	sub	sp, #48	; 0x30
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	60f8      	str	r0, [r7, #12]
 80038f2:	60b9      	str	r1, [r7, #8]
 80038f4:	607a      	str	r2, [r7, #4]
 80038f6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80038f8:	2301      	movs	r3, #1
 80038fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80038fc:	2300      	movs	r3, #0
 80038fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003908:	2b01      	cmp	r3, #1
 800390a:	d101      	bne.n	8003910 <HAL_SPI_TransmitReceive+0x26>
 800390c:	2302      	movs	r3, #2
 800390e:	e198      	b.n	8003c42 <HAL_SPI_TransmitReceive+0x358>
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003918:	f7fd f852 	bl	80009c0 <HAL_GetTick>
 800391c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003924:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800392e:	887b      	ldrh	r3, [r7, #2]
 8003930:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003932:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003936:	2b01      	cmp	r3, #1
 8003938:	d00f      	beq.n	800395a <HAL_SPI_TransmitReceive+0x70>
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003940:	d107      	bne.n	8003952 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d103      	bne.n	8003952 <HAL_SPI_TransmitReceive+0x68>
 800394a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800394e:	2b04      	cmp	r3, #4
 8003950:	d003      	beq.n	800395a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003952:	2302      	movs	r3, #2
 8003954:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003958:	e16d      	b.n	8003c36 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d005      	beq.n	800396c <HAL_SPI_TransmitReceive+0x82>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d002      	beq.n	800396c <HAL_SPI_TransmitReceive+0x82>
 8003966:	887b      	ldrh	r3, [r7, #2]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d103      	bne.n	8003974 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003972:	e160      	b.n	8003c36 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800397a:	b2db      	uxtb	r3, r3
 800397c:	2b04      	cmp	r3, #4
 800397e:	d003      	beq.n	8003988 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2205      	movs	r2, #5
 8003984:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2200      	movs	r2, #0
 800398c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	887a      	ldrh	r2, [r7, #2]
 8003998:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	887a      	ldrh	r2, [r7, #2]
 800399e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	68ba      	ldr	r2, [r7, #8]
 80039a4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	887a      	ldrh	r2, [r7, #2]
 80039aa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	887a      	ldrh	r2, [r7, #2]
 80039b0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2200      	movs	r2, #0
 80039b6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2200      	movs	r2, #0
 80039bc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039c8:	2b40      	cmp	r3, #64	; 0x40
 80039ca:	d007      	beq.n	80039dc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039da:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039e4:	d17c      	bne.n	8003ae0 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d002      	beq.n	80039f4 <HAL_SPI_TransmitReceive+0x10a>
 80039ee:	8b7b      	ldrh	r3, [r7, #26]
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d16a      	bne.n	8003aca <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f8:	881a      	ldrh	r2, [r3, #0]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a04:	1c9a      	adds	r2, r3, #2
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	3b01      	subs	r3, #1
 8003a12:	b29a      	uxth	r2, r3
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a18:	e057      	b.n	8003aca <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	f003 0302 	and.w	r3, r3, #2
 8003a24:	2b02      	cmp	r3, #2
 8003a26:	d11b      	bne.n	8003a60 <HAL_SPI_TransmitReceive+0x176>
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d016      	beq.n	8003a60 <HAL_SPI_TransmitReceive+0x176>
 8003a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d113      	bne.n	8003a60 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a3c:	881a      	ldrh	r2, [r3, #0]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a48:	1c9a      	adds	r2, r3, #2
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	3b01      	subs	r3, #1
 8003a56:	b29a      	uxth	r2, r3
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	f003 0301 	and.w	r3, r3, #1
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d119      	bne.n	8003aa2 <HAL_SPI_TransmitReceive+0x1b8>
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d014      	beq.n	8003aa2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68da      	ldr	r2, [r3, #12]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a82:	b292      	uxth	r2, r2
 8003a84:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a8a:	1c9a      	adds	r2, r3, #2
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	3b01      	subs	r3, #1
 8003a98:	b29a      	uxth	r2, r3
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003aa2:	f7fc ff8d 	bl	80009c0 <HAL_GetTick>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d80b      	bhi.n	8003aca <HAL_SPI_TransmitReceive+0x1e0>
 8003ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ab8:	d007      	beq.n	8003aca <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8003ac8:	e0b5      	b.n	8003c36 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d1a2      	bne.n	8003a1a <HAL_SPI_TransmitReceive+0x130>
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d19d      	bne.n	8003a1a <HAL_SPI_TransmitReceive+0x130>
 8003ade:	e080      	b.n	8003be2 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d002      	beq.n	8003aee <HAL_SPI_TransmitReceive+0x204>
 8003ae8:	8b7b      	ldrh	r3, [r7, #26]
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d16f      	bne.n	8003bce <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	330c      	adds	r3, #12
 8003af8:	7812      	ldrb	r2, [r2, #0]
 8003afa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b00:	1c5a      	adds	r2, r3, #1
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	3b01      	subs	r3, #1
 8003b0e:	b29a      	uxth	r2, r3
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b14:	e05b      	b.n	8003bce <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	f003 0302 	and.w	r3, r3, #2
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d11c      	bne.n	8003b5e <HAL_SPI_TransmitReceive+0x274>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d017      	beq.n	8003b5e <HAL_SPI_TransmitReceive+0x274>
 8003b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d114      	bne.n	8003b5e <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	330c      	adds	r3, #12
 8003b3e:	7812      	ldrb	r2, [r2, #0]
 8003b40:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b46:	1c5a      	adds	r2, r3, #1
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	3b01      	subs	r3, #1
 8003b54:	b29a      	uxth	r2, r3
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	f003 0301 	and.w	r3, r3, #1
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d119      	bne.n	8003ba0 <HAL_SPI_TransmitReceive+0x2b6>
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d014      	beq.n	8003ba0 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	68da      	ldr	r2, [r3, #12]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b80:	b2d2      	uxtb	r2, r2
 8003b82:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b88:	1c5a      	adds	r2, r3, #1
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	3b01      	subs	r3, #1
 8003b96:	b29a      	uxth	r2, r3
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003ba0:	f7fc ff0e 	bl	80009c0 <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d803      	bhi.n	8003bb8 <HAL_SPI_TransmitReceive+0x2ce>
 8003bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bb6:	d102      	bne.n	8003bbe <HAL_SPI_TransmitReceive+0x2d4>
 8003bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d107      	bne.n	8003bce <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8003bcc:	e033      	b.n	8003c36 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d19e      	bne.n	8003b16 <HAL_SPI_TransmitReceive+0x22c>
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d199      	bne.n	8003b16 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003be2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003be4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003be6:	68f8      	ldr	r0, [r7, #12]
 8003be8:	f000 f90a 	bl	8003e00 <SPI_EndRxTxTransaction>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d006      	beq.n	8003c00 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2220      	movs	r2, #32
 8003bfc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003bfe:	e01a      	b.n	8003c36 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d10a      	bne.n	8003c1e <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c08:	2300      	movs	r3, #0
 8003c0a:	617b      	str	r3, [r7, #20]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	68db      	ldr	r3, [r3, #12]
 8003c12:	617b      	str	r3, [r7, #20]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	617b      	str	r3, [r7, #20]
 8003c1c:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d003      	beq.n	8003c2e <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c2c:	e003      	b.n	8003c36 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2201      	movs	r2, #1
 8003c32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003c3e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3730      	adds	r7, #48	; 0x30
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
	...

08003c4c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b088      	sub	sp, #32
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	60f8      	str	r0, [r7, #12]
 8003c54:	60b9      	str	r1, [r7, #8]
 8003c56:	603b      	str	r3, [r7, #0]
 8003c58:	4613      	mov	r3, r2
 8003c5a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003c5c:	f7fc feb0 	bl	80009c0 <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c64:	1a9b      	subs	r3, r3, r2
 8003c66:	683a      	ldr	r2, [r7, #0]
 8003c68:	4413      	add	r3, r2
 8003c6a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003c6c:	f7fc fea8 	bl	80009c0 <HAL_GetTick>
 8003c70:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003c72:	4b39      	ldr	r3, [pc, #228]	; (8003d58 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	015b      	lsls	r3, r3, #5
 8003c78:	0d1b      	lsrs	r3, r3, #20
 8003c7a:	69fa      	ldr	r2, [r7, #28]
 8003c7c:	fb02 f303 	mul.w	r3, r2, r3
 8003c80:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c82:	e054      	b.n	8003d2e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c8a:	d050      	beq.n	8003d2e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003c8c:	f7fc fe98 	bl	80009c0 <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	69bb      	ldr	r3, [r7, #24]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	69fa      	ldr	r2, [r7, #28]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d902      	bls.n	8003ca2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d13d      	bne.n	8003d1e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	685a      	ldr	r2, [r3, #4]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003cb0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cba:	d111      	bne.n	8003ce0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cc4:	d004      	beq.n	8003cd0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cce:	d107      	bne.n	8003ce0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cde:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ce8:	d10f      	bne.n	8003d0a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003cf8:	601a      	str	r2, [r3, #0]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d08:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e017      	b.n	8003d4e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d101      	bne.n	8003d28 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003d24:	2300      	movs	r3, #0
 8003d26:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	3b01      	subs	r3, #1
 8003d2c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	689a      	ldr	r2, [r3, #8]
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	4013      	ands	r3, r2
 8003d38:	68ba      	ldr	r2, [r7, #8]
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	bf0c      	ite	eq
 8003d3e:	2301      	moveq	r3, #1
 8003d40:	2300      	movne	r3, #0
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	461a      	mov	r2, r3
 8003d46:	79fb      	ldrb	r3, [r7, #7]
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d19b      	bne.n	8003c84 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003d4c:	2300      	movs	r3, #0
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3720      	adds	r7, #32
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	20000000 	.word	0x20000000

08003d5c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b086      	sub	sp, #24
 8003d60:	af02      	add	r7, sp, #8
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	60b9      	str	r1, [r7, #8]
 8003d66:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d70:	d111      	bne.n	8003d96 <SPI_EndRxTransaction+0x3a>
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d7a:	d004      	beq.n	8003d86 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d84:	d107      	bne.n	8003d96 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d94:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d9e:	d117      	bne.n	8003dd0 <SPI_EndRxTransaction+0x74>
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003da8:	d112      	bne.n	8003dd0 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	9300      	str	r3, [sp, #0]
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	2200      	movs	r2, #0
 8003db2:	2101      	movs	r1, #1
 8003db4:	68f8      	ldr	r0, [r7, #12]
 8003db6:	f7ff ff49 	bl	8003c4c <SPI_WaitFlagStateUntilTimeout>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d01a      	beq.n	8003df6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dc4:	f043 0220 	orr.w	r2, r3, #32
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003dcc:	2303      	movs	r3, #3
 8003dce:	e013      	b.n	8003df8 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	9300      	str	r3, [sp, #0]
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	2180      	movs	r1, #128	; 0x80
 8003dda:	68f8      	ldr	r0, [r7, #12]
 8003ddc:	f7ff ff36 	bl	8003c4c <SPI_WaitFlagStateUntilTimeout>
 8003de0:	4603      	mov	r3, r0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d007      	beq.n	8003df6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dea:	f043 0220 	orr.w	r2, r3, #32
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e000      	b.n	8003df8 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8003df6:	2300      	movs	r3, #0
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3710      	adds	r7, #16
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}

08003e00 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b086      	sub	sp, #24
 8003e04:	af02      	add	r7, sp, #8
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	60b9      	str	r1, [r7, #8]
 8003e0a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	9300      	str	r3, [sp, #0]
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	2200      	movs	r2, #0
 8003e14:	2180      	movs	r1, #128	; 0x80
 8003e16:	68f8      	ldr	r0, [r7, #12]
 8003e18:	f7ff ff18 	bl	8003c4c <SPI_WaitFlagStateUntilTimeout>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d007      	beq.n	8003e32 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e26:	f043 0220 	orr.w	r2, r3, #32
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	e000      	b.n	8003e34 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003e32:	2300      	movs	r3, #0
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3710      	adds	r7, #16
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003e3c:	b084      	sub	sp, #16
 8003e3e:	b480      	push	{r7}
 8003e40:	b083      	sub	sp, #12
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	6078      	str	r0, [r7, #4]
 8003e46:	f107 0014 	add.w	r0, r7, #20
 8003e4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003e4e:	2300      	movs	r3, #0
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	370c      	adds	r7, #12
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bc80      	pop	{r7}
 8003e58:	b004      	add	sp, #16
 8003e5a:	4770      	bx	lr

08003e5c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b085      	sub	sp, #20
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003e6c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003e70:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	b29a      	uxth	r2, r3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3714      	adds	r7, #20
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bc80      	pop	{r7}
 8003e86:	4770      	bx	lr

08003e88 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b085      	sub	sp, #20
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003e90:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003e94:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003e9c:	b29a      	uxth	r2, r3
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	43db      	mvns	r3, r3
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	b29a      	uxth	r2, r3
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003eb0:	2300      	movs	r3, #0
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3714      	adds	r7, #20
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bc80      	pop	{r7}
 8003eba:	4770      	bx	lr

08003ebc <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b083      	sub	sp, #12
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003ec8:	2300      	movs	r3, #0
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	370c      	adds	r7, #12
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bc80      	pop	{r7}
 8003ed2:	4770      	bx	lr

08003ed4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003ed4:	b084      	sub	sp, #16
 8003ed6:	b480      	push	{r7}
 8003ed8:	b083      	sub	sp, #12
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	6078      	str	r0, [r7, #4]
 8003ede:	f107 0014 	add.w	r0, r7, #20
 8003ee2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2201      	movs	r2, #1
 8003eea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003f06:	2300      	movs	r3, #0
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	370c      	adds	r7, #12
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bc80      	pop	{r7}
 8003f10:	b004      	add	sp, #16
 8003f12:	4770      	bx	lr

08003f14 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b09d      	sub	sp, #116	; 0x74
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	781b      	ldrb	r3, [r3, #0]
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	4413      	add	r3, r2
 8003f2e:	881b      	ldrh	r3, [r3, #0]
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003f36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f3a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	78db      	ldrb	r3, [r3, #3]
 8003f42:	2b03      	cmp	r3, #3
 8003f44:	d81f      	bhi.n	8003f86 <USB_ActivateEndpoint+0x72>
 8003f46:	a201      	add	r2, pc, #4	; (adr r2, 8003f4c <USB_ActivateEndpoint+0x38>)
 8003f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f4c:	08003f5d 	.word	0x08003f5d
 8003f50:	08003f79 	.word	0x08003f79
 8003f54:	08003f8f 	.word	0x08003f8f
 8003f58:	08003f6b 	.word	0x08003f6b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003f5c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003f60:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f64:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8003f68:	e012      	b.n	8003f90 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003f6a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003f6e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003f72:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8003f76:	e00b      	b.n	8003f90 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003f78:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003f7c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f80:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8003f84:	e004      	b.n	8003f90 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8003f8c:	e000      	b.n	8003f90 <USB_ActivateEndpoint+0x7c>
      break;
 8003f8e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	441a      	add	r2, r3
 8003f9a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003f9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fa2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fa6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003faa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	4413      	add	r3, r2
 8003fbc:	881b      	ldrh	r3, [r3, #0]
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fc8:	b29a      	uxth	r2, r3
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	781b      	ldrb	r3, [r3, #0]
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	441a      	add	r2, r3
 8003fe0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003fe4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fe8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ff0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	7b1b      	ldrb	r3, [r3, #12]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	f040 8178 	bne.w	80042f2 <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	785b      	ldrb	r3, [r3, #1]
 8004006:	2b00      	cmp	r3, #0
 8004008:	f000 8084 	beq.w	8004114 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	61bb      	str	r3, [r7, #24]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004016:	b29b      	uxth	r3, r3
 8004018:	461a      	mov	r2, r3
 800401a:	69bb      	ldr	r3, [r7, #24]
 800401c:	4413      	add	r3, r2
 800401e:	61bb      	str	r3, [r7, #24]
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	011a      	lsls	r2, r3, #4
 8004026:	69bb      	ldr	r3, [r7, #24]
 8004028:	4413      	add	r3, r2
 800402a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800402e:	617b      	str	r3, [r7, #20]
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	88db      	ldrh	r3, [r3, #6]
 8004034:	085b      	lsrs	r3, r3, #1
 8004036:	b29b      	uxth	r3, r3
 8004038:	005b      	lsls	r3, r3, #1
 800403a:	b29a      	uxth	r2, r3
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	781b      	ldrb	r3, [r3, #0]
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	4413      	add	r3, r2
 800404a:	881b      	ldrh	r3, [r3, #0]
 800404c:	827b      	strh	r3, [r7, #18]
 800404e:	8a7b      	ldrh	r3, [r7, #18]
 8004050:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004054:	2b00      	cmp	r3, #0
 8004056:	d01b      	beq.n	8004090 <USB_ActivateEndpoint+0x17c>
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	781b      	ldrb	r3, [r3, #0]
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	4413      	add	r3, r2
 8004062:	881b      	ldrh	r3, [r3, #0]
 8004064:	b29b      	uxth	r3, r3
 8004066:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800406a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800406e:	823b      	strh	r3, [r7, #16]
 8004070:	687a      	ldr	r2, [r7, #4]
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	441a      	add	r2, r3
 800407a:	8a3b      	ldrh	r3, [r7, #16]
 800407c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004080:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004084:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004088:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800408c:	b29b      	uxth	r3, r3
 800408e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	78db      	ldrb	r3, [r3, #3]
 8004094:	2b01      	cmp	r3, #1
 8004096:	d020      	beq.n	80040da <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	4413      	add	r3, r2
 80040a2:	881b      	ldrh	r3, [r3, #0]
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040ae:	81bb      	strh	r3, [r7, #12]
 80040b0:	89bb      	ldrh	r3, [r7, #12]
 80040b2:	f083 0320 	eor.w	r3, r3, #32
 80040b6:	81bb      	strh	r3, [r7, #12]
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	781b      	ldrb	r3, [r3, #0]
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	441a      	add	r2, r3
 80040c2:	89bb      	ldrh	r3, [r7, #12]
 80040c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	8013      	strh	r3, [r2, #0]
 80040d8:	e2d5      	b.n	8004686 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	781b      	ldrb	r3, [r3, #0]
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	4413      	add	r3, r2
 80040e4:	881b      	ldrh	r3, [r3, #0]
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040f0:	81fb      	strh	r3, [r7, #14]
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	441a      	add	r2, r3
 80040fc:	89fb      	ldrh	r3, [r7, #14]
 80040fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004102:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004106:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800410a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800410e:	b29b      	uxth	r3, r3
 8004110:	8013      	strh	r3, [r2, #0]
 8004112:	e2b8      	b.n	8004686 <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	633b      	str	r3, [r7, #48]	; 0x30
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800411e:	b29b      	uxth	r3, r3
 8004120:	461a      	mov	r2, r3
 8004122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004124:	4413      	add	r3, r2
 8004126:	633b      	str	r3, [r7, #48]	; 0x30
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	011a      	lsls	r2, r3, #4
 800412e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004130:	4413      	add	r3, r2
 8004132:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004136:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	88db      	ldrh	r3, [r3, #6]
 800413c:	085b      	lsrs	r3, r3, #1
 800413e:	b29b      	uxth	r3, r3
 8004140:	005b      	lsls	r3, r3, #1
 8004142:	b29a      	uxth	r2, r3
 8004144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004146:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	62bb      	str	r3, [r7, #40]	; 0x28
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004152:	b29b      	uxth	r3, r3
 8004154:	461a      	mov	r2, r3
 8004156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004158:	4413      	add	r3, r2
 800415a:	62bb      	str	r3, [r7, #40]	; 0x28
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	011a      	lsls	r2, r3, #4
 8004162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004164:	4413      	add	r3, r2
 8004166:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800416a:	627b      	str	r3, [r7, #36]	; 0x24
 800416c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416e:	881b      	ldrh	r3, [r3, #0]
 8004170:	b29b      	uxth	r3, r3
 8004172:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004176:	b29a      	uxth	r2, r3
 8004178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417a:	801a      	strh	r2, [r3, #0]
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	691b      	ldr	r3, [r3, #16]
 8004180:	2b3e      	cmp	r3, #62	; 0x3e
 8004182:	d91d      	bls.n	80041c0 <USB_ActivateEndpoint+0x2ac>
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	691b      	ldr	r3, [r3, #16]
 8004188:	095b      	lsrs	r3, r3, #5
 800418a:	66bb      	str	r3, [r7, #104]	; 0x68
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	691b      	ldr	r3, [r3, #16]
 8004190:	f003 031f 	and.w	r3, r3, #31
 8004194:	2b00      	cmp	r3, #0
 8004196:	d102      	bne.n	800419e <USB_ActivateEndpoint+0x28a>
 8004198:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800419a:	3b01      	subs	r3, #1
 800419c:	66bb      	str	r3, [r7, #104]	; 0x68
 800419e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a0:	881b      	ldrh	r3, [r3, #0]
 80041a2:	b29a      	uxth	r2, r3
 80041a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	029b      	lsls	r3, r3, #10
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	4313      	orrs	r3, r2
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041b8:	b29a      	uxth	r2, r3
 80041ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041bc:	801a      	strh	r2, [r3, #0]
 80041be:	e026      	b.n	800420e <USB_ActivateEndpoint+0x2fa>
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	691b      	ldr	r3, [r3, #16]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d10a      	bne.n	80041de <USB_ActivateEndpoint+0x2ca>
 80041c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ca:	881b      	ldrh	r3, [r3, #0]
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041d6:	b29a      	uxth	r2, r3
 80041d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041da:	801a      	strh	r2, [r3, #0]
 80041dc:	e017      	b.n	800420e <USB_ActivateEndpoint+0x2fa>
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	085b      	lsrs	r3, r3, #1
 80041e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	691b      	ldr	r3, [r3, #16]
 80041ea:	f003 0301 	and.w	r3, r3, #1
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d002      	beq.n	80041f8 <USB_ActivateEndpoint+0x2e4>
 80041f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80041f4:	3301      	adds	r3, #1
 80041f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80041f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fa:	881b      	ldrh	r3, [r3, #0]
 80041fc:	b29a      	uxth	r2, r3
 80041fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004200:	b29b      	uxth	r3, r3
 8004202:	029b      	lsls	r3, r3, #10
 8004204:	b29b      	uxth	r3, r3
 8004206:	4313      	orrs	r3, r2
 8004208:	b29a      	uxth	r2, r3
 800420a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	781b      	ldrb	r3, [r3, #0]
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	4413      	add	r3, r2
 8004218:	881b      	ldrh	r3, [r3, #0]
 800421a:	847b      	strh	r3, [r7, #34]	; 0x22
 800421c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800421e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d01b      	beq.n	800425e <USB_ActivateEndpoint+0x34a>
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	009b      	lsls	r3, r3, #2
 800422e:	4413      	add	r3, r2
 8004230:	881b      	ldrh	r3, [r3, #0]
 8004232:	b29b      	uxth	r3, r3
 8004234:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004238:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800423c:	843b      	strh	r3, [r7, #32]
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	781b      	ldrb	r3, [r3, #0]
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	441a      	add	r2, r3
 8004248:	8c3b      	ldrh	r3, [r7, #32]
 800424a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800424e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004252:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004256:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800425a:	b29b      	uxth	r3, r3
 800425c:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	781b      	ldrb	r3, [r3, #0]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d124      	bne.n	80042b0 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	4413      	add	r3, r2
 8004270:	881b      	ldrh	r3, [r3, #0]
 8004272:	b29b      	uxth	r3, r3
 8004274:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004278:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800427c:	83bb      	strh	r3, [r7, #28]
 800427e:	8bbb      	ldrh	r3, [r7, #28]
 8004280:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004284:	83bb      	strh	r3, [r7, #28]
 8004286:	8bbb      	ldrh	r3, [r7, #28]
 8004288:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800428c:	83bb      	strh	r3, [r7, #28]
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	441a      	add	r2, r3
 8004298:	8bbb      	ldrh	r3, [r7, #28]
 800429a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800429e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	8013      	strh	r3, [r2, #0]
 80042ae:	e1ea      	b.n	8004686 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	4413      	add	r3, r2
 80042ba:	881b      	ldrh	r3, [r3, #0]
 80042bc:	b29b      	uxth	r3, r3
 80042be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042c6:	83fb      	strh	r3, [r7, #30]
 80042c8:	8bfb      	ldrh	r3, [r7, #30]
 80042ca:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80042ce:	83fb      	strh	r3, [r7, #30]
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	441a      	add	r2, r3
 80042da:	8bfb      	ldrh	r3, [r7, #30]
 80042dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	8013      	strh	r3, [r2, #0]
 80042f0:	e1c9      	b.n	8004686 <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	78db      	ldrb	r3, [r3, #3]
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	d11e      	bne.n	8004338 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	4413      	add	r3, r2
 8004304:	881b      	ldrh	r3, [r3, #0]
 8004306:	b29b      	uxth	r3, r3
 8004308:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800430c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004310:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	781b      	ldrb	r3, [r3, #0]
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	441a      	add	r2, r3
 800431e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004322:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004326:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800432a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800432e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004332:	b29b      	uxth	r3, r3
 8004334:	8013      	strh	r3, [r2, #0]
 8004336:	e01d      	b.n	8004374 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	781b      	ldrb	r3, [r3, #0]
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	4413      	add	r3, r2
 8004342:	881b      	ldrh	r3, [r3, #0]
 8004344:	b29b      	uxth	r3, r3
 8004346:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800434a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800434e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	441a      	add	r2, r3
 800435c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004360:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004364:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004368:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800436c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004370:	b29b      	uxth	r3, r3
 8004372:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800437e:	b29b      	uxth	r3, r3
 8004380:	461a      	mov	r2, r3
 8004382:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004384:	4413      	add	r3, r2
 8004386:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	011a      	lsls	r2, r3, #4
 800438e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004390:	4413      	add	r3, r2
 8004392:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004396:	65bb      	str	r3, [r7, #88]	; 0x58
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	891b      	ldrh	r3, [r3, #8]
 800439c:	085b      	lsrs	r3, r3, #1
 800439e:	b29b      	uxth	r3, r3
 80043a0:	005b      	lsls	r3, r3, #1
 80043a2:	b29a      	uxth	r2, r3
 80043a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043a6:	801a      	strh	r2, [r3, #0]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	657b      	str	r3, [r7, #84]	; 0x54
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	461a      	mov	r2, r3
 80043b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043b8:	4413      	add	r3, r2
 80043ba:	657b      	str	r3, [r7, #84]	; 0x54
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	011a      	lsls	r2, r3, #4
 80043c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043c4:	4413      	add	r3, r2
 80043c6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80043ca:	653b      	str	r3, [r7, #80]	; 0x50
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	895b      	ldrh	r3, [r3, #10]
 80043d0:	085b      	lsrs	r3, r3, #1
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	005b      	lsls	r3, r3, #1
 80043d6:	b29a      	uxth	r2, r3
 80043d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043da:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	785b      	ldrb	r3, [r3, #1]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	f040 8093 	bne.w	800450c <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	4413      	add	r3, r2
 80043f0:	881b      	ldrh	r3, [r3, #0]
 80043f2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80043f6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80043fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d01b      	beq.n	800443a <USB_ActivateEndpoint+0x526>
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	781b      	ldrb	r3, [r3, #0]
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	4413      	add	r3, r2
 800440c:	881b      	ldrh	r3, [r3, #0]
 800440e:	b29b      	uxth	r3, r3
 8004410:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004414:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004418:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	441a      	add	r2, r3
 8004424:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004426:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800442a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800442e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004432:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004436:	b29b      	uxth	r3, r3
 8004438:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	781b      	ldrb	r3, [r3, #0]
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	4413      	add	r3, r2
 8004444:	881b      	ldrh	r3, [r3, #0]
 8004446:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004448:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800444a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800444e:	2b00      	cmp	r3, #0
 8004450:	d01b      	beq.n	800448a <USB_ActivateEndpoint+0x576>
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	4413      	add	r3, r2
 800445c:	881b      	ldrh	r3, [r3, #0]
 800445e:	b29b      	uxth	r3, r3
 8004460:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004464:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004468:	877b      	strh	r3, [r7, #58]	; 0x3a
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	009b      	lsls	r3, r3, #2
 8004472:	441a      	add	r2, r3
 8004474:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004476:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800447a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800447e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004482:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004486:	b29b      	uxth	r3, r3
 8004488:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	4413      	add	r3, r2
 8004494:	881b      	ldrh	r3, [r3, #0]
 8004496:	b29b      	uxth	r3, r3
 8004498:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800449c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044a0:	873b      	strh	r3, [r7, #56]	; 0x38
 80044a2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80044a4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80044a8:	873b      	strh	r3, [r7, #56]	; 0x38
 80044aa:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80044ac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80044b0:	873b      	strh	r3, [r7, #56]	; 0x38
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	441a      	add	r2, r3
 80044bc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80044be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	4413      	add	r3, r2
 80044dc:	881b      	ldrh	r3, [r3, #0]
 80044de:	b29b      	uxth	r3, r3
 80044e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044e8:	86fb      	strh	r3, [r7, #54]	; 0x36
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	781b      	ldrb	r3, [r3, #0]
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	441a      	add	r2, r3
 80044f4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80044f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004502:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004506:	b29b      	uxth	r3, r3
 8004508:	8013      	strh	r3, [r2, #0]
 800450a:	e0bc      	b.n	8004686 <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	4413      	add	r3, r2
 8004516:	881b      	ldrh	r3, [r3, #0]
 8004518:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800451c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004520:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004524:	2b00      	cmp	r3, #0
 8004526:	d01d      	beq.n	8004564 <USB_ActivateEndpoint+0x650>
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	4413      	add	r3, r2
 8004532:	881b      	ldrh	r3, [r3, #0]
 8004534:	b29b      	uxth	r3, r3
 8004536:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800453a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800453e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	441a      	add	r2, r3
 800454c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004550:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004554:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004558:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800455c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004560:	b29b      	uxth	r3, r3
 8004562:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	4413      	add	r3, r2
 800456e:	881b      	ldrh	r3, [r3, #0]
 8004570:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004574:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800457c:	2b00      	cmp	r3, #0
 800457e:	d01d      	beq.n	80045bc <USB_ActivateEndpoint+0x6a8>
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	781b      	ldrb	r3, [r3, #0]
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	4413      	add	r3, r2
 800458a:	881b      	ldrh	r3, [r3, #0]
 800458c:	b29b      	uxth	r3, r3
 800458e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004592:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004596:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	441a      	add	r2, r3
 80045a4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80045a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045b4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	78db      	ldrb	r3, [r3, #3]
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d024      	beq.n	800460e <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	4413      	add	r3, r2
 80045ce:	881b      	ldrh	r3, [r3, #0]
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045da:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80045de:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80045e2:	f083 0320 	eor.w	r3, r3, #32
 80045e6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	441a      	add	r2, r3
 80045f4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80045f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004600:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004604:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004608:	b29b      	uxth	r3, r3
 800460a:	8013      	strh	r3, [r2, #0]
 800460c:	e01d      	b.n	800464a <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	4413      	add	r3, r2
 8004618:	881b      	ldrh	r3, [r3, #0]
 800461a:	b29b      	uxth	r3, r3
 800461c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004620:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004624:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	441a      	add	r2, r3
 8004632:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004636:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800463a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800463e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004642:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004646:	b29b      	uxth	r3, r3
 8004648:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	4413      	add	r3, r2
 8004654:	881b      	ldrh	r3, [r3, #0]
 8004656:	b29b      	uxth	r3, r3
 8004658:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800465c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004660:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	781b      	ldrb	r3, [r3, #0]
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	441a      	add	r2, r3
 800466e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004672:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004676:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800467a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800467e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004682:	b29b      	uxth	r3, r3
 8004684:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004686:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800468a:	4618      	mov	r0, r3
 800468c:	3774      	adds	r7, #116	; 0x74
 800468e:	46bd      	mov	sp, r7
 8004690:	bc80      	pop	{r7}
 8004692:	4770      	bx	lr

08004694 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004694:	b480      	push	{r7}
 8004696:	b08d      	sub	sp, #52	; 0x34
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	7b1b      	ldrb	r3, [r3, #12]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	f040 808e 	bne.w	80047c4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	785b      	ldrb	r3, [r3, #1]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d044      	beq.n	800473a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80046b0:	687a      	ldr	r2, [r7, #4]
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	4413      	add	r3, r2
 80046ba:	881b      	ldrh	r3, [r3, #0]
 80046bc:	81bb      	strh	r3, [r7, #12]
 80046be:	89bb      	ldrh	r3, [r7, #12]
 80046c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d01b      	beq.n	8004700 <USB_DeactivateEndpoint+0x6c>
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	4413      	add	r3, r2
 80046d2:	881b      	ldrh	r3, [r3, #0]
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046de:	817b      	strh	r3, [r7, #10]
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	781b      	ldrb	r3, [r3, #0]
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	441a      	add	r2, r3
 80046ea:	897b      	ldrh	r3, [r7, #10]
 80046ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046f8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	4413      	add	r3, r2
 800470a:	881b      	ldrh	r3, [r3, #0]
 800470c:	b29b      	uxth	r3, r3
 800470e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004712:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004716:	813b      	strh	r3, [r7, #8]
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	441a      	add	r2, r3
 8004722:	893b      	ldrh	r3, [r7, #8]
 8004724:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004728:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800472c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004734:	b29b      	uxth	r3, r3
 8004736:	8013      	strh	r3, [r2, #0]
 8004738:	e192      	b.n	8004a60 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	4413      	add	r3, r2
 8004744:	881b      	ldrh	r3, [r3, #0]
 8004746:	827b      	strh	r3, [r7, #18]
 8004748:	8a7b      	ldrh	r3, [r7, #18]
 800474a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d01b      	beq.n	800478a <USB_DeactivateEndpoint+0xf6>
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	781b      	ldrb	r3, [r3, #0]
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	4413      	add	r3, r2
 800475c:	881b      	ldrh	r3, [r3, #0]
 800475e:	b29b      	uxth	r3, r3
 8004760:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004764:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004768:	823b      	strh	r3, [r7, #16]
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	781b      	ldrb	r3, [r3, #0]
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	441a      	add	r2, r3
 8004774:	8a3b      	ldrh	r3, [r7, #16]
 8004776:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800477a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800477e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004782:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004786:	b29b      	uxth	r3, r3
 8004788:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	781b      	ldrb	r3, [r3, #0]
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	4413      	add	r3, r2
 8004794:	881b      	ldrh	r3, [r3, #0]
 8004796:	b29b      	uxth	r3, r3
 8004798:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800479c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047a0:	81fb      	strh	r3, [r7, #14]
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	781b      	ldrb	r3, [r3, #0]
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	441a      	add	r2, r3
 80047ac:	89fb      	ldrh	r3, [r7, #14]
 80047ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047be:	b29b      	uxth	r3, r3
 80047c0:	8013      	strh	r3, [r2, #0]
 80047c2:	e14d      	b.n	8004a60 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	785b      	ldrb	r3, [r3, #1]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	f040 80a5 	bne.w	8004918 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	4413      	add	r3, r2
 80047d8:	881b      	ldrh	r3, [r3, #0]
 80047da:	843b      	strh	r3, [r7, #32]
 80047dc:	8c3b      	ldrh	r3, [r7, #32]
 80047de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d01b      	beq.n	800481e <USB_DeactivateEndpoint+0x18a>
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	4413      	add	r3, r2
 80047f0:	881b      	ldrh	r3, [r3, #0]
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047fc:	83fb      	strh	r3, [r7, #30]
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	441a      	add	r2, r3
 8004808:	8bfb      	ldrh	r3, [r7, #30]
 800480a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800480e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004812:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004816:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800481a:	b29b      	uxth	r3, r3
 800481c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	4413      	add	r3, r2
 8004828:	881b      	ldrh	r3, [r3, #0]
 800482a:	83bb      	strh	r3, [r7, #28]
 800482c:	8bbb      	ldrh	r3, [r7, #28]
 800482e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004832:	2b00      	cmp	r3, #0
 8004834:	d01b      	beq.n	800486e <USB_DeactivateEndpoint+0x1da>
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	781b      	ldrb	r3, [r3, #0]
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	4413      	add	r3, r2
 8004840:	881b      	ldrh	r3, [r3, #0]
 8004842:	b29b      	uxth	r3, r3
 8004844:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004848:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800484c:	837b      	strh	r3, [r7, #26]
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	009b      	lsls	r3, r3, #2
 8004856:	441a      	add	r2, r3
 8004858:	8b7b      	ldrh	r3, [r7, #26]
 800485a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800485e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004862:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004866:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800486a:	b29b      	uxth	r3, r3
 800486c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	4413      	add	r3, r2
 8004878:	881b      	ldrh	r3, [r3, #0]
 800487a:	b29b      	uxth	r3, r3
 800487c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004880:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004884:	833b      	strh	r3, [r7, #24]
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	441a      	add	r2, r3
 8004890:	8b3b      	ldrh	r3, [r7, #24]
 8004892:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004896:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800489a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800489e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	781b      	ldrb	r3, [r3, #0]
 80048ac:	009b      	lsls	r3, r3, #2
 80048ae:	4413      	add	r3, r2
 80048b0:	881b      	ldrh	r3, [r3, #0]
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048bc:	82fb      	strh	r3, [r7, #22]
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	781b      	ldrb	r3, [r3, #0]
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	441a      	add	r2, r3
 80048c8:	8afb      	ldrh	r3, [r7, #22]
 80048ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048da:	b29b      	uxth	r3, r3
 80048dc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	781b      	ldrb	r3, [r3, #0]
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	4413      	add	r3, r2
 80048e8:	881b      	ldrh	r3, [r3, #0]
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048f4:	82bb      	strh	r3, [r7, #20]
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	441a      	add	r2, r3
 8004900:	8abb      	ldrh	r3, [r7, #20]
 8004902:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004906:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800490a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800490e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004912:	b29b      	uxth	r3, r3
 8004914:	8013      	strh	r3, [r2, #0]
 8004916:	e0a3      	b.n	8004a60 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	781b      	ldrb	r3, [r3, #0]
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	4413      	add	r3, r2
 8004922:	881b      	ldrh	r3, [r3, #0]
 8004924:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004926:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004928:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800492c:	2b00      	cmp	r3, #0
 800492e:	d01b      	beq.n	8004968 <USB_DeactivateEndpoint+0x2d4>
 8004930:	687a      	ldr	r2, [r7, #4]
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	781b      	ldrb	r3, [r3, #0]
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	4413      	add	r3, r2
 800493a:	881b      	ldrh	r3, [r3, #0]
 800493c:	b29b      	uxth	r3, r3
 800493e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004946:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	781b      	ldrb	r3, [r3, #0]
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	441a      	add	r2, r3
 8004952:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004954:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004958:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800495c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004960:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004964:	b29b      	uxth	r3, r3
 8004966:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	781b      	ldrb	r3, [r3, #0]
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	4413      	add	r3, r2
 8004972:	881b      	ldrh	r3, [r3, #0]
 8004974:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004976:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800497c:	2b00      	cmp	r3, #0
 800497e:	d01b      	beq.n	80049b8 <USB_DeactivateEndpoint+0x324>
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	4413      	add	r3, r2
 800498a:	881b      	ldrh	r3, [r3, #0]
 800498c:	b29b      	uxth	r3, r3
 800498e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004996:	853b      	strh	r3, [r7, #40]	; 0x28
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	781b      	ldrb	r3, [r3, #0]
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	441a      	add	r2, r3
 80049a2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80049a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049b0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80049b8:	687a      	ldr	r2, [r7, #4]
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	781b      	ldrb	r3, [r3, #0]
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	4413      	add	r3, r2
 80049c2:	881b      	ldrh	r3, [r3, #0]
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ce:	84fb      	strh	r3, [r7, #38]	; 0x26
 80049d0:	687a      	ldr	r2, [r7, #4]
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	781b      	ldrb	r3, [r3, #0]
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	441a      	add	r2, r3
 80049da:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80049dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80049e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	781b      	ldrb	r3, [r3, #0]
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	4413      	add	r3, r2
 80049fa:	881b      	ldrh	r3, [r3, #0]
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a06:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004a08:	687a      	ldr	r2, [r7, #4]
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	781b      	ldrb	r3, [r3, #0]
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	441a      	add	r2, r3
 8004a12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004a14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	781b      	ldrb	r3, [r3, #0]
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	4413      	add	r3, r2
 8004a32:	881b      	ldrh	r3, [r3, #0]
 8004a34:	b29b      	uxth	r3, r3
 8004a36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a3e:	847b      	strh	r3, [r7, #34]	; 0x22
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	781b      	ldrb	r3, [r3, #0]
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	441a      	add	r2, r3
 8004a4a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004a4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004a60:	2300      	movs	r3, #0
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3734      	adds	r7, #52	; 0x34
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bc80      	pop	{r7}
 8004a6a:	4770      	bx	lr

08004a6c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b0c2      	sub	sp, #264	; 0x108
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004a7a:	6018      	str	r0, [r3, #0]
 8004a7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a84:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004a86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	785b      	ldrb	r3, [r3, #1]
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	f040 86b7 	bne.w	8005806 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004a98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	699a      	ldr	r2, [r3, #24]
 8004aa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004aa8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	691b      	ldr	r3, [r3, #16]
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d908      	bls.n	8004ac6 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004ab4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ab8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	691b      	ldr	r3, [r3, #16]
 8004ac0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004ac4:	e007      	b.n	8004ad6 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8004ac6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004aca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	699b      	ldr	r3, [r3, #24]
 8004ad2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004ad6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ada:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	7b1b      	ldrb	r3, [r3, #12]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d13a      	bne.n	8004b5c <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004ae6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004aea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	6959      	ldr	r1, [r3, #20]
 8004af2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004af6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	88da      	ldrh	r2, [r3, #6]
 8004afe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004b08:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004b0c:	6800      	ldr	r0, [r0, #0]
 8004b0e:	f001 fc9c 	bl	800644a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004b12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	613b      	str	r3, [r7, #16]
 8004b1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b22:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	461a      	mov	r2, r3
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	4413      	add	r3, r2
 8004b34:	613b      	str	r3, [r7, #16]
 8004b36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	011a      	lsls	r2, r3, #4
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	4413      	add	r3, r2
 8004b48:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004b4c:	60fb      	str	r3, [r7, #12]
 8004b4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b52:	b29a      	uxth	r2, r3
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	801a      	strh	r2, [r3, #0]
 8004b58:	f000 be1f 	b.w	800579a <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004b5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	78db      	ldrb	r3, [r3, #3]
 8004b68:	2b02      	cmp	r3, #2
 8004b6a:	f040 8462 	bne.w	8005432 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004b6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	6a1a      	ldr	r2, [r3, #32]
 8004b7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	691b      	ldr	r3, [r3, #16]
 8004b86:	429a      	cmp	r2, r3
 8004b88:	f240 83df 	bls.w	800534a <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004b8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b90:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	4413      	add	r3, r2
 8004ba6:	881b      	ldrh	r3, [r3, #0]
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bb2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8004bb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004bba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004bc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	781b      	ldrb	r3, [r3, #0]
 8004bcc:	009b      	lsls	r3, r3, #2
 8004bce:	441a      	add	r2, r3
 8004bd0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004bd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bdc:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004be0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004be8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004bec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	6a1a      	ldr	r2, [r3, #32]
 8004bf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004bf8:	1ad2      	subs	r2, r2, r3
 8004bfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004bfe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004c06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	781b      	ldrb	r3, [r3, #0]
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	4413      	add	r3, r2
 8004c20:	881b      	ldrh	r3, [r3, #0]
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	f000 81c7 	beq.w	8004fbc <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004c2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	633b      	str	r3, [r7, #48]	; 0x30
 8004c3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	785b      	ldrb	r3, [r3, #1]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d177      	bne.n	8004d3a <USB_EPStartXfer+0x2ce>
 8004c4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c4e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	461a      	mov	r2, r3
 8004c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c6a:	4413      	add	r3, r2
 8004c6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	781b      	ldrb	r3, [r3, #0]
 8004c7a:	011a      	lsls	r2, r3, #4
 8004c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c7e:	4413      	add	r3, r2
 8004c80:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004c84:	627b      	str	r3, [r7, #36]	; 0x24
 8004c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c88:	881b      	ldrh	r3, [r3, #0]
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c90:	b29a      	uxth	r2, r3
 8004c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c94:	801a      	strh	r2, [r3, #0]
 8004c96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c9a:	2b3e      	cmp	r3, #62	; 0x3e
 8004c9c:	d921      	bls.n	8004ce2 <USB_EPStartXfer+0x276>
 8004c9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ca2:	095b      	lsrs	r3, r3, #5
 8004ca4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004ca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cac:	f003 031f 	and.w	r3, r3, #31
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d104      	bne.n	8004cbe <USB_EPStartXfer+0x252>
 8004cb4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004cb8:	3b01      	subs	r3, #1
 8004cba:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc0:	881b      	ldrh	r3, [r3, #0]
 8004cc2:	b29a      	uxth	r2, r3
 8004cc4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	029b      	lsls	r3, r3, #10
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cda:	b29a      	uxth	r2, r3
 8004cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cde:	801a      	strh	r2, [r3, #0]
 8004ce0:	e050      	b.n	8004d84 <USB_EPStartXfer+0x318>
 8004ce2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d10a      	bne.n	8004d00 <USB_EPStartXfer+0x294>
 8004cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cec:	881b      	ldrh	r3, [r3, #0]
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cf4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cf8:	b29a      	uxth	r2, r3
 8004cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfc:	801a      	strh	r2, [r3, #0]
 8004cfe:	e041      	b.n	8004d84 <USB_EPStartXfer+0x318>
 8004d00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d04:	085b      	lsrs	r3, r3, #1
 8004d06:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004d0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d0e:	f003 0301 	and.w	r3, r3, #1
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d004      	beq.n	8004d20 <USB_EPStartXfer+0x2b4>
 8004d16:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d22:	881b      	ldrh	r3, [r3, #0]
 8004d24:	b29a      	uxth	r2, r3
 8004d26:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	029b      	lsls	r3, r3, #10
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	4313      	orrs	r3, r2
 8004d32:	b29a      	uxth	r2, r3
 8004d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d36:	801a      	strh	r2, [r3, #0]
 8004d38:	e024      	b.n	8004d84 <USB_EPStartXfer+0x318>
 8004d3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	785b      	ldrb	r3, [r3, #1]
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d11c      	bne.n	8004d84 <USB_EPStartXfer+0x318>
 8004d4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d4e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d5e:	4413      	add	r3, r2
 8004d60:	633b      	str	r3, [r7, #48]	; 0x30
 8004d62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	781b      	ldrb	r3, [r3, #0]
 8004d6e:	011a      	lsls	r2, r3, #4
 8004d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d72:	4413      	add	r3, r2
 8004d74:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004d78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d7e:	b29a      	uxth	r2, r3
 8004d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d82:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004d84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	895b      	ldrh	r3, [r3, #10]
 8004d90:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004d94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	6959      	ldr	r1, [r3, #20]
 8004da0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004daa:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004dae:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004db2:	6800      	ldr	r0, [r0, #0]
 8004db4:	f001 fb49 	bl	800644a <USB_WritePMA>
            ep->xfer_buff += len;
 8004db8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004dbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	695a      	ldr	r2, [r3, #20]
 8004dc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004dc8:	441a      	add	r2, r3
 8004dca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004dce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004dd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004dda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	6a1a      	ldr	r2, [r3, #32]
 8004de2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004de6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	691b      	ldr	r3, [r3, #16]
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d90f      	bls.n	8004e12 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8004df2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004df6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	6a1a      	ldr	r2, [r3, #32]
 8004dfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e02:	1ad2      	subs	r2, r2, r3
 8004e04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	621a      	str	r2, [r3, #32]
 8004e10:	e00e      	b.n	8004e30 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8004e12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	6a1b      	ldr	r3, [r3, #32]
 8004e1e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8004e22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004e30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	785b      	ldrb	r3, [r3, #1]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d177      	bne.n	8004f30 <USB_EPStartXfer+0x4c4>
 8004e40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	61bb      	str	r3, [r7, #24]
 8004e4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	69bb      	ldr	r3, [r7, #24]
 8004e60:	4413      	add	r3, r2
 8004e62:	61bb      	str	r3, [r7, #24]
 8004e64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	011a      	lsls	r2, r3, #4
 8004e72:	69bb      	ldr	r3, [r7, #24]
 8004e74:	4413      	add	r3, r2
 8004e76:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004e7a:	617b      	str	r3, [r7, #20]
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	881b      	ldrh	r3, [r3, #0]
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e86:	b29a      	uxth	r2, r3
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	801a      	strh	r2, [r3, #0]
 8004e8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e90:	2b3e      	cmp	r3, #62	; 0x3e
 8004e92:	d921      	bls.n	8004ed8 <USB_EPStartXfer+0x46c>
 8004e94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e98:	095b      	lsrs	r3, r3, #5
 8004e9a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004e9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ea2:	f003 031f 	and.w	r3, r3, #31
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d104      	bne.n	8004eb4 <USB_EPStartXfer+0x448>
 8004eaa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004eae:	3b01      	subs	r3, #1
 8004eb0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	881b      	ldrh	r3, [r3, #0]
 8004eb8:	b29a      	uxth	r2, r3
 8004eba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	029b      	lsls	r3, r3, #10
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ecc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ed0:	b29a      	uxth	r2, r3
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	801a      	strh	r2, [r3, #0]
 8004ed6:	e056      	b.n	8004f86 <USB_EPStartXfer+0x51a>
 8004ed8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d10a      	bne.n	8004ef6 <USB_EPStartXfer+0x48a>
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	881b      	ldrh	r3, [r3, #0]
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004eea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004eee:	b29a      	uxth	r2, r3
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	801a      	strh	r2, [r3, #0]
 8004ef4:	e047      	b.n	8004f86 <USB_EPStartXfer+0x51a>
 8004ef6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004efa:	085b      	lsrs	r3, r3, #1
 8004efc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004f00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f04:	f003 0301 	and.w	r3, r3, #1
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d004      	beq.n	8004f16 <USB_EPStartXfer+0x4aa>
 8004f0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f10:	3301      	adds	r3, #1
 8004f12:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	881b      	ldrh	r3, [r3, #0]
 8004f1a:	b29a      	uxth	r2, r3
 8004f1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	029b      	lsls	r3, r3, #10
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	4313      	orrs	r3, r2
 8004f28:	b29a      	uxth	r2, r3
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	801a      	strh	r2, [r3, #0]
 8004f2e:	e02a      	b.n	8004f86 <USB_EPStartXfer+0x51a>
 8004f30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	785b      	ldrb	r3, [r3, #1]
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d122      	bne.n	8004f86 <USB_EPStartXfer+0x51a>
 8004f40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	623b      	str	r3, [r7, #32]
 8004f4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	6a3b      	ldr	r3, [r7, #32]
 8004f60:	4413      	add	r3, r2
 8004f62:	623b      	str	r3, [r7, #32]
 8004f64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	781b      	ldrb	r3, [r3, #0]
 8004f70:	011a      	lsls	r2, r3, #4
 8004f72:	6a3b      	ldr	r3, [r7, #32]
 8004f74:	4413      	add	r3, r2
 8004f76:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004f7a:	61fb      	str	r3, [r7, #28]
 8004f7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f80:	b29a      	uxth	r2, r3
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004f86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	891b      	ldrh	r3, [r3, #8]
 8004f92:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004f96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	6959      	ldr	r1, [r3, #20]
 8004fa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004fac:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004fb0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004fb4:	6800      	ldr	r0, [r0, #0]
 8004fb6:	f001 fa48 	bl	800644a <USB_WritePMA>
 8004fba:	e3ee      	b.n	800579a <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004fbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	785b      	ldrb	r3, [r3, #1]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d177      	bne.n	80050bc <USB_EPStartXfer+0x650>
 8004fcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fd0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	64bb      	str	r3, [r7, #72]	; 0x48
 8004fd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fdc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	461a      	mov	r2, r3
 8004fea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fec:	4413      	add	r3, r2
 8004fee:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ff0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ff4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	011a      	lsls	r2, r3, #4
 8004ffe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005000:	4413      	add	r3, r2
 8005002:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005006:	647b      	str	r3, [r7, #68]	; 0x44
 8005008:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800500a:	881b      	ldrh	r3, [r3, #0]
 800500c:	b29b      	uxth	r3, r3
 800500e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005012:	b29a      	uxth	r2, r3
 8005014:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005016:	801a      	strh	r2, [r3, #0]
 8005018:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800501c:	2b3e      	cmp	r3, #62	; 0x3e
 800501e:	d921      	bls.n	8005064 <USB_EPStartXfer+0x5f8>
 8005020:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005024:	095b      	lsrs	r3, r3, #5
 8005026:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800502a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800502e:	f003 031f 	and.w	r3, r3, #31
 8005032:	2b00      	cmp	r3, #0
 8005034:	d104      	bne.n	8005040 <USB_EPStartXfer+0x5d4>
 8005036:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800503a:	3b01      	subs	r3, #1
 800503c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005040:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005042:	881b      	ldrh	r3, [r3, #0]
 8005044:	b29a      	uxth	r2, r3
 8005046:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800504a:	b29b      	uxth	r3, r3
 800504c:	029b      	lsls	r3, r3, #10
 800504e:	b29b      	uxth	r3, r3
 8005050:	4313      	orrs	r3, r2
 8005052:	b29b      	uxth	r3, r3
 8005054:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005058:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800505c:	b29a      	uxth	r2, r3
 800505e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005060:	801a      	strh	r2, [r3, #0]
 8005062:	e056      	b.n	8005112 <USB_EPStartXfer+0x6a6>
 8005064:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005068:	2b00      	cmp	r3, #0
 800506a:	d10a      	bne.n	8005082 <USB_EPStartXfer+0x616>
 800506c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800506e:	881b      	ldrh	r3, [r3, #0]
 8005070:	b29b      	uxth	r3, r3
 8005072:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005076:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800507a:	b29a      	uxth	r2, r3
 800507c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800507e:	801a      	strh	r2, [r3, #0]
 8005080:	e047      	b.n	8005112 <USB_EPStartXfer+0x6a6>
 8005082:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005086:	085b      	lsrs	r3, r3, #1
 8005088:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800508c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005090:	f003 0301 	and.w	r3, r3, #1
 8005094:	2b00      	cmp	r3, #0
 8005096:	d004      	beq.n	80050a2 <USB_EPStartXfer+0x636>
 8005098:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800509c:	3301      	adds	r3, #1
 800509e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80050a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050a4:	881b      	ldrh	r3, [r3, #0]
 80050a6:	b29a      	uxth	r2, r3
 80050a8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	029b      	lsls	r3, r3, #10
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	4313      	orrs	r3, r2
 80050b4:	b29a      	uxth	r2, r3
 80050b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050b8:	801a      	strh	r2, [r3, #0]
 80050ba:	e02a      	b.n	8005112 <USB_EPStartXfer+0x6a6>
 80050bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	785b      	ldrb	r3, [r3, #1]
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d122      	bne.n	8005112 <USB_EPStartXfer+0x6a6>
 80050cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	653b      	str	r3, [r7, #80]	; 0x50
 80050d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050e6:	b29b      	uxth	r3, r3
 80050e8:	461a      	mov	r2, r3
 80050ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050ec:	4413      	add	r3, r2
 80050ee:	653b      	str	r3, [r7, #80]	; 0x50
 80050f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	781b      	ldrb	r3, [r3, #0]
 80050fc:	011a      	lsls	r2, r3, #4
 80050fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005100:	4413      	add	r3, r2
 8005102:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005106:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005108:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800510c:	b29a      	uxth	r2, r3
 800510e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005110:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005112:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005116:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	891b      	ldrh	r3, [r3, #8]
 800511e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005122:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005126:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	6959      	ldr	r1, [r3, #20]
 800512e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005132:	b29b      	uxth	r3, r3
 8005134:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005138:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800513c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005140:	6800      	ldr	r0, [r0, #0]
 8005142:	f001 f982 	bl	800644a <USB_WritePMA>
            ep->xfer_buff += len;
 8005146:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800514a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	695a      	ldr	r2, [r3, #20]
 8005152:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005156:	441a      	add	r2, r3
 8005158:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800515c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005164:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005168:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	6a1a      	ldr	r2, [r3, #32]
 8005170:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005174:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	691b      	ldr	r3, [r3, #16]
 800517c:	429a      	cmp	r2, r3
 800517e:	d90f      	bls.n	80051a0 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8005180:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005184:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	6a1a      	ldr	r2, [r3, #32]
 800518c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005190:	1ad2      	subs	r2, r2, r3
 8005192:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005196:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	621a      	str	r2, [r3, #32]
 800519e:	e00e      	b.n	80051be <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80051a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	6a1b      	ldr	r3, [r3, #32]
 80051ac:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80051b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	2200      	movs	r2, #0
 80051bc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80051be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	643b      	str	r3, [r7, #64]	; 0x40
 80051ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	785b      	ldrb	r3, [r3, #1]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d177      	bne.n	80052ca <USB_EPStartXfer+0x85e>
 80051da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80051e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	461a      	mov	r2, r3
 80051f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051fa:	4413      	add	r3, r2
 80051fc:	63bb      	str	r3, [r7, #56]	; 0x38
 80051fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005202:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	781b      	ldrb	r3, [r3, #0]
 800520a:	011a      	lsls	r2, r3, #4
 800520c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800520e:	4413      	add	r3, r2
 8005210:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005214:	637b      	str	r3, [r7, #52]	; 0x34
 8005216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005218:	881b      	ldrh	r3, [r3, #0]
 800521a:	b29b      	uxth	r3, r3
 800521c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005220:	b29a      	uxth	r2, r3
 8005222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005224:	801a      	strh	r2, [r3, #0]
 8005226:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800522a:	2b3e      	cmp	r3, #62	; 0x3e
 800522c:	d921      	bls.n	8005272 <USB_EPStartXfer+0x806>
 800522e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005232:	095b      	lsrs	r3, r3, #5
 8005234:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005238:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800523c:	f003 031f 	and.w	r3, r3, #31
 8005240:	2b00      	cmp	r3, #0
 8005242:	d104      	bne.n	800524e <USB_EPStartXfer+0x7e2>
 8005244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005248:	3b01      	subs	r3, #1
 800524a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800524e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005250:	881b      	ldrh	r3, [r3, #0]
 8005252:	b29a      	uxth	r2, r3
 8005254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005258:	b29b      	uxth	r3, r3
 800525a:	029b      	lsls	r3, r3, #10
 800525c:	b29b      	uxth	r3, r3
 800525e:	4313      	orrs	r3, r2
 8005260:	b29b      	uxth	r3, r3
 8005262:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005266:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800526a:	b29a      	uxth	r2, r3
 800526c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800526e:	801a      	strh	r2, [r3, #0]
 8005270:	e050      	b.n	8005314 <USB_EPStartXfer+0x8a8>
 8005272:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005276:	2b00      	cmp	r3, #0
 8005278:	d10a      	bne.n	8005290 <USB_EPStartXfer+0x824>
 800527a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800527c:	881b      	ldrh	r3, [r3, #0]
 800527e:	b29b      	uxth	r3, r3
 8005280:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005284:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005288:	b29a      	uxth	r2, r3
 800528a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800528c:	801a      	strh	r2, [r3, #0]
 800528e:	e041      	b.n	8005314 <USB_EPStartXfer+0x8a8>
 8005290:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005294:	085b      	lsrs	r3, r3, #1
 8005296:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800529a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800529e:	f003 0301 	and.w	r3, r3, #1
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d004      	beq.n	80052b0 <USB_EPStartXfer+0x844>
 80052a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052aa:	3301      	adds	r3, #1
 80052ac:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80052b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052b2:	881b      	ldrh	r3, [r3, #0]
 80052b4:	b29a      	uxth	r2, r3
 80052b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	029b      	lsls	r3, r3, #10
 80052be:	b29b      	uxth	r3, r3
 80052c0:	4313      	orrs	r3, r2
 80052c2:	b29a      	uxth	r2, r3
 80052c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052c6:	801a      	strh	r2, [r3, #0]
 80052c8:	e024      	b.n	8005314 <USB_EPStartXfer+0x8a8>
 80052ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	785b      	ldrb	r3, [r3, #1]
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d11c      	bne.n	8005314 <USB_EPStartXfer+0x8a8>
 80052da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	461a      	mov	r2, r3
 80052ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052ee:	4413      	add	r3, r2
 80052f0:	643b      	str	r3, [r7, #64]	; 0x40
 80052f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	781b      	ldrb	r3, [r3, #0]
 80052fe:	011a      	lsls	r2, r3, #4
 8005300:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005302:	4413      	add	r3, r2
 8005304:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005308:	63fb      	str	r3, [r7, #60]	; 0x3c
 800530a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800530e:	b29a      	uxth	r2, r3
 8005310:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005312:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005314:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005318:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	895b      	ldrh	r3, [r3, #10]
 8005320:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005324:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005328:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	6959      	ldr	r1, [r3, #20]
 8005330:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005334:	b29b      	uxth	r3, r3
 8005336:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800533a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800533e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005342:	6800      	ldr	r0, [r0, #0]
 8005344:	f001 f881 	bl	800644a <USB_WritePMA>
 8005348:	e227      	b.n	800579a <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800534a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800534e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	6a1b      	ldr	r3, [r3, #32]
 8005356:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800535a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800535e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005368:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	4413      	add	r3, r2
 8005374:	881b      	ldrh	r3, [r3, #0]
 8005376:	b29b      	uxth	r3, r3
 8005378:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800537c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005380:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005384:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005388:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005392:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	781b      	ldrb	r3, [r3, #0]
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	441a      	add	r2, r3
 800539e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80053a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80053b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80053c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	461a      	mov	r2, r3
 80053d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053d6:	4413      	add	r3, r2
 80053d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80053da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	781b      	ldrb	r3, [r3, #0]
 80053e6:	011a      	lsls	r2, r3, #4
 80053e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053ea:	4413      	add	r3, r2
 80053ec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80053f0:	65bb      	str	r3, [r7, #88]	; 0x58
 80053f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053f6:	b29a      	uxth	r2, r3
 80053f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80053fa:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80053fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005400:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	891b      	ldrh	r3, [r3, #8]
 8005408:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800540c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005410:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	6959      	ldr	r1, [r3, #20]
 8005418:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800541c:	b29b      	uxth	r3, r3
 800541e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005422:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005426:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800542a:	6800      	ldr	r0, [r0, #0]
 800542c:	f001 f80d 	bl	800644a <USB_WritePMA>
 8005430:	e1b3      	b.n	800579a <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005432:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005436:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	6a1a      	ldr	r2, [r3, #32]
 800543e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005442:	1ad2      	subs	r2, r2, r3
 8005444:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005448:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005450:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005454:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800545e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	4413      	add	r3, r2
 800546a:	881b      	ldrh	r3, [r3, #0]
 800546c:	b29b      	uxth	r3, r3
 800546e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005472:	2b00      	cmp	r3, #0
 8005474:	f000 80c6 	beq.w	8005604 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005478:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800547c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	673b      	str	r3, [r7, #112]	; 0x70
 8005484:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005488:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	785b      	ldrb	r3, [r3, #1]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d177      	bne.n	8005584 <USB_EPStartXfer+0xb18>
 8005494:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005498:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	66bb      	str	r3, [r7, #104]	; 0x68
 80054a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	461a      	mov	r2, r3
 80054b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80054b4:	4413      	add	r3, r2
 80054b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80054b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	781b      	ldrb	r3, [r3, #0]
 80054c4:	011a      	lsls	r2, r3, #4
 80054c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80054c8:	4413      	add	r3, r2
 80054ca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80054ce:	667b      	str	r3, [r7, #100]	; 0x64
 80054d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054d2:	881b      	ldrh	r3, [r3, #0]
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054da:	b29a      	uxth	r2, r3
 80054dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054de:	801a      	strh	r2, [r3, #0]
 80054e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054e4:	2b3e      	cmp	r3, #62	; 0x3e
 80054e6:	d921      	bls.n	800552c <USB_EPStartXfer+0xac0>
 80054e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054ec:	095b      	lsrs	r3, r3, #5
 80054ee:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80054f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054f6:	f003 031f 	and.w	r3, r3, #31
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d104      	bne.n	8005508 <USB_EPStartXfer+0xa9c>
 80054fe:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005502:	3b01      	subs	r3, #1
 8005504:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005508:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800550a:	881b      	ldrh	r3, [r3, #0]
 800550c:	b29a      	uxth	r2, r3
 800550e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005512:	b29b      	uxth	r3, r3
 8005514:	029b      	lsls	r3, r3, #10
 8005516:	b29b      	uxth	r3, r3
 8005518:	4313      	orrs	r3, r2
 800551a:	b29b      	uxth	r3, r3
 800551c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005520:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005524:	b29a      	uxth	r2, r3
 8005526:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005528:	801a      	strh	r2, [r3, #0]
 800552a:	e050      	b.n	80055ce <USB_EPStartXfer+0xb62>
 800552c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005530:	2b00      	cmp	r3, #0
 8005532:	d10a      	bne.n	800554a <USB_EPStartXfer+0xade>
 8005534:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005536:	881b      	ldrh	r3, [r3, #0]
 8005538:	b29b      	uxth	r3, r3
 800553a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800553e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005542:	b29a      	uxth	r2, r3
 8005544:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005546:	801a      	strh	r2, [r3, #0]
 8005548:	e041      	b.n	80055ce <USB_EPStartXfer+0xb62>
 800554a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800554e:	085b      	lsrs	r3, r3, #1
 8005550:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005554:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005558:	f003 0301 	and.w	r3, r3, #1
 800555c:	2b00      	cmp	r3, #0
 800555e:	d004      	beq.n	800556a <USB_EPStartXfer+0xafe>
 8005560:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005564:	3301      	adds	r3, #1
 8005566:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800556a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800556c:	881b      	ldrh	r3, [r3, #0]
 800556e:	b29a      	uxth	r2, r3
 8005570:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005574:	b29b      	uxth	r3, r3
 8005576:	029b      	lsls	r3, r3, #10
 8005578:	b29b      	uxth	r3, r3
 800557a:	4313      	orrs	r3, r2
 800557c:	b29a      	uxth	r2, r3
 800557e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005580:	801a      	strh	r2, [r3, #0]
 8005582:	e024      	b.n	80055ce <USB_EPStartXfer+0xb62>
 8005584:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005588:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	785b      	ldrb	r3, [r3, #1]
 8005590:	2b01      	cmp	r3, #1
 8005592:	d11c      	bne.n	80055ce <USB_EPStartXfer+0xb62>
 8005594:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005598:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055a2:	b29b      	uxth	r3, r3
 80055a4:	461a      	mov	r2, r3
 80055a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80055a8:	4413      	add	r3, r2
 80055aa:	673b      	str	r3, [r7, #112]	; 0x70
 80055ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	011a      	lsls	r2, r3, #4
 80055ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80055bc:	4413      	add	r3, r2
 80055be:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80055c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80055c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055c8:	b29a      	uxth	r2, r3
 80055ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055cc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80055ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	895b      	ldrh	r3, [r3, #10]
 80055da:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80055de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	6959      	ldr	r1, [r3, #20]
 80055ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80055f4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80055f8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80055fc:	6800      	ldr	r0, [r0, #0]
 80055fe:	f000 ff24 	bl	800644a <USB_WritePMA>
 8005602:	e0ca      	b.n	800579a <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005604:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005608:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	785b      	ldrb	r3, [r3, #1]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d177      	bne.n	8005704 <USB_EPStartXfer+0xc98>
 8005614:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005618:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005620:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005624:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800562e:	b29b      	uxth	r3, r3
 8005630:	461a      	mov	r2, r3
 8005632:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005634:	4413      	add	r3, r2
 8005636:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005638:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800563c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	781b      	ldrb	r3, [r3, #0]
 8005644:	011a      	lsls	r2, r3, #4
 8005646:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005648:	4413      	add	r3, r2
 800564a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800564e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005650:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005652:	881b      	ldrh	r3, [r3, #0]
 8005654:	b29b      	uxth	r3, r3
 8005656:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800565a:	b29a      	uxth	r2, r3
 800565c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800565e:	801a      	strh	r2, [r3, #0]
 8005660:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005664:	2b3e      	cmp	r3, #62	; 0x3e
 8005666:	d921      	bls.n	80056ac <USB_EPStartXfer+0xc40>
 8005668:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800566c:	095b      	lsrs	r3, r3, #5
 800566e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005672:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005676:	f003 031f 	and.w	r3, r3, #31
 800567a:	2b00      	cmp	r3, #0
 800567c:	d104      	bne.n	8005688 <USB_EPStartXfer+0xc1c>
 800567e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005682:	3b01      	subs	r3, #1
 8005684:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005688:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800568a:	881b      	ldrh	r3, [r3, #0]
 800568c:	b29a      	uxth	r2, r3
 800568e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005692:	b29b      	uxth	r3, r3
 8005694:	029b      	lsls	r3, r3, #10
 8005696:	b29b      	uxth	r3, r3
 8005698:	4313      	orrs	r3, r2
 800569a:	b29b      	uxth	r3, r3
 800569c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056a4:	b29a      	uxth	r2, r3
 80056a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056a8:	801a      	strh	r2, [r3, #0]
 80056aa:	e05c      	b.n	8005766 <USB_EPStartXfer+0xcfa>
 80056ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d10a      	bne.n	80056ca <USB_EPStartXfer+0xc5e>
 80056b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056b6:	881b      	ldrh	r3, [r3, #0]
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056c2:	b29a      	uxth	r2, r3
 80056c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056c6:	801a      	strh	r2, [r3, #0]
 80056c8:	e04d      	b.n	8005766 <USB_EPStartXfer+0xcfa>
 80056ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056ce:	085b      	lsrs	r3, r3, #1
 80056d0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80056d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056d8:	f003 0301 	and.w	r3, r3, #1
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d004      	beq.n	80056ea <USB_EPStartXfer+0xc7e>
 80056e0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80056e4:	3301      	adds	r3, #1
 80056e6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80056ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056ec:	881b      	ldrh	r3, [r3, #0]
 80056ee:	b29a      	uxth	r2, r3
 80056f0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	029b      	lsls	r3, r3, #10
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	4313      	orrs	r3, r2
 80056fc:	b29a      	uxth	r2, r3
 80056fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005700:	801a      	strh	r2, [r3, #0]
 8005702:	e030      	b.n	8005766 <USB_EPStartXfer+0xcfa>
 8005704:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005708:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	785b      	ldrb	r3, [r3, #1]
 8005710:	2b01      	cmp	r3, #1
 8005712:	d128      	bne.n	8005766 <USB_EPStartXfer+0xcfa>
 8005714:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005718:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005722:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005726:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005730:	b29b      	uxth	r3, r3
 8005732:	461a      	mov	r2, r3
 8005734:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005738:	4413      	add	r3, r2
 800573a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800573e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005742:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	781b      	ldrb	r3, [r3, #0]
 800574a:	011a      	lsls	r2, r3, #4
 800574c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005750:	4413      	add	r3, r2
 8005752:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005756:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800575a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800575e:	b29a      	uxth	r2, r3
 8005760:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005764:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005766:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800576a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	891b      	ldrh	r3, [r3, #8]
 8005772:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005776:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800577a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	6959      	ldr	r1, [r3, #20]
 8005782:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005786:	b29b      	uxth	r3, r3
 8005788:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800578c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005790:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005794:	6800      	ldr	r0, [r0, #0]
 8005796:	f000 fe58 	bl	800644a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800579a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800579e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	781b      	ldrb	r3, [r3, #0]
 80057b0:	009b      	lsls	r3, r3, #2
 80057b2:	4413      	add	r3, r2
 80057b4:	881b      	ldrh	r3, [r3, #0]
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057c0:	817b      	strh	r3, [r7, #10]
 80057c2:	897b      	ldrh	r3, [r7, #10]
 80057c4:	f083 0310 	eor.w	r3, r3, #16
 80057c8:	817b      	strh	r3, [r7, #10]
 80057ca:	897b      	ldrh	r3, [r7, #10]
 80057cc:	f083 0320 	eor.w	r3, r3, #32
 80057d0:	817b      	strh	r3, [r7, #10]
 80057d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	009b      	lsls	r3, r3, #2
 80057ea:	441a      	add	r2, r3
 80057ec:	897b      	ldrh	r3, [r7, #10]
 80057ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057fe:	b29b      	uxth	r3, r3
 8005800:	8013      	strh	r3, [r2, #0]
 8005802:	f000 bcde 	b.w	80061c2 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005806:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800580a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	7b1b      	ldrb	r3, [r3, #12]
 8005812:	2b00      	cmp	r3, #0
 8005814:	f040 80bb 	bne.w	800598e <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005818:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800581c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	699a      	ldr	r2, [r3, #24]
 8005824:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005828:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	691b      	ldr	r3, [r3, #16]
 8005830:	429a      	cmp	r2, r3
 8005832:	d917      	bls.n	8005864 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8005834:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005838:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	691b      	ldr	r3, [r3, #16]
 8005840:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8005844:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005848:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	699a      	ldr	r2, [r3, #24]
 8005850:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005854:	1ad2      	subs	r2, r2, r3
 8005856:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800585a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	619a      	str	r2, [r3, #24]
 8005862:	e00e      	b.n	8005882 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8005864:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005868:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	699b      	ldr	r3, [r3, #24]
 8005870:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8005874:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005878:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	2200      	movs	r2, #0
 8005880:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005882:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005886:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005890:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005894:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800589e:	b29b      	uxth	r3, r3
 80058a0:	461a      	mov	r2, r3
 80058a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80058a6:	4413      	add	r3, r2
 80058a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80058ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	781b      	ldrb	r3, [r3, #0]
 80058b8:	011a      	lsls	r2, r3, #4
 80058ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80058be:	4413      	add	r3, r2
 80058c0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80058c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80058c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80058cc:	881b      	ldrh	r3, [r3, #0]
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058d4:	b29a      	uxth	r2, r3
 80058d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80058da:	801a      	strh	r2, [r3, #0]
 80058dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058e0:	2b3e      	cmp	r3, #62	; 0x3e
 80058e2:	d924      	bls.n	800592e <USB_EPStartXfer+0xec2>
 80058e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058e8:	095b      	lsrs	r3, r3, #5
 80058ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80058ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058f2:	f003 031f 	and.w	r3, r3, #31
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d104      	bne.n	8005904 <USB_EPStartXfer+0xe98>
 80058fa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80058fe:	3b01      	subs	r3, #1
 8005900:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005904:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005908:	881b      	ldrh	r3, [r3, #0]
 800590a:	b29a      	uxth	r2, r3
 800590c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005910:	b29b      	uxth	r3, r3
 8005912:	029b      	lsls	r3, r3, #10
 8005914:	b29b      	uxth	r3, r3
 8005916:	4313      	orrs	r3, r2
 8005918:	b29b      	uxth	r3, r3
 800591a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800591e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005922:	b29a      	uxth	r2, r3
 8005924:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005928:	801a      	strh	r2, [r3, #0]
 800592a:	f000 bc10 	b.w	800614e <USB_EPStartXfer+0x16e2>
 800592e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005932:	2b00      	cmp	r3, #0
 8005934:	d10c      	bne.n	8005950 <USB_EPStartXfer+0xee4>
 8005936:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800593a:	881b      	ldrh	r3, [r3, #0]
 800593c:	b29b      	uxth	r3, r3
 800593e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005942:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005946:	b29a      	uxth	r2, r3
 8005948:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800594c:	801a      	strh	r2, [r3, #0]
 800594e:	e3fe      	b.n	800614e <USB_EPStartXfer+0x16e2>
 8005950:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005954:	085b      	lsrs	r3, r3, #1
 8005956:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800595a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800595e:	f003 0301 	and.w	r3, r3, #1
 8005962:	2b00      	cmp	r3, #0
 8005964:	d004      	beq.n	8005970 <USB_EPStartXfer+0xf04>
 8005966:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800596a:	3301      	adds	r3, #1
 800596c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005970:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005974:	881b      	ldrh	r3, [r3, #0]
 8005976:	b29a      	uxth	r2, r3
 8005978:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800597c:	b29b      	uxth	r3, r3
 800597e:	029b      	lsls	r3, r3, #10
 8005980:	b29b      	uxth	r3, r3
 8005982:	4313      	orrs	r3, r2
 8005984:	b29a      	uxth	r2, r3
 8005986:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800598a:	801a      	strh	r2, [r3, #0]
 800598c:	e3df      	b.n	800614e <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800598e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005992:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	78db      	ldrb	r3, [r3, #3]
 800599a:	2b02      	cmp	r3, #2
 800599c:	f040 8218 	bne.w	8005dd0 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80059a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	785b      	ldrb	r3, [r3, #1]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	f040 809d 	bne.w	8005aec <USB_EPStartXfer+0x1080>
 80059b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80059c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	461a      	mov	r2, r3
 80059d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80059d6:	4413      	add	r3, r2
 80059d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80059dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	781b      	ldrb	r3, [r3, #0]
 80059e8:	011a      	lsls	r2, r3, #4
 80059ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80059ee:	4413      	add	r3, r2
 80059f0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80059f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80059f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80059fc:	881b      	ldrh	r3, [r3, #0]
 80059fe:	b29b      	uxth	r3, r3
 8005a00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a04:	b29a      	uxth	r2, r3
 8005a06:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005a0a:	801a      	strh	r2, [r3, #0]
 8005a0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	691b      	ldr	r3, [r3, #16]
 8005a18:	2b3e      	cmp	r3, #62	; 0x3e
 8005a1a:	d92b      	bls.n	8005a74 <USB_EPStartXfer+0x1008>
 8005a1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	691b      	ldr	r3, [r3, #16]
 8005a28:	095b      	lsrs	r3, r3, #5
 8005a2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005a2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	691b      	ldr	r3, [r3, #16]
 8005a3a:	f003 031f 	and.w	r3, r3, #31
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d104      	bne.n	8005a4c <USB_EPStartXfer+0xfe0>
 8005a42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a46:	3b01      	subs	r3, #1
 8005a48:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005a4c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005a50:	881b      	ldrh	r3, [r3, #0]
 8005a52:	b29a      	uxth	r2, r3
 8005a54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	029b      	lsls	r3, r3, #10
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a6a:	b29a      	uxth	r2, r3
 8005a6c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005a70:	801a      	strh	r2, [r3, #0]
 8005a72:	e070      	b.n	8005b56 <USB_EPStartXfer+0x10ea>
 8005a74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	691b      	ldr	r3, [r3, #16]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d10c      	bne.n	8005a9e <USB_EPStartXfer+0x1032>
 8005a84:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005a88:	881b      	ldrh	r3, [r3, #0]
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a94:	b29a      	uxth	r2, r3
 8005a96:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005a9a:	801a      	strh	r2, [r3, #0]
 8005a9c:	e05b      	b.n	8005b56 <USB_EPStartXfer+0x10ea>
 8005a9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005aa2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	691b      	ldr	r3, [r3, #16]
 8005aaa:	085b      	lsrs	r3, r3, #1
 8005aac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005ab0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ab4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	691b      	ldr	r3, [r3, #16]
 8005abc:	f003 0301 	and.w	r3, r3, #1
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d004      	beq.n	8005ace <USB_EPStartXfer+0x1062>
 8005ac4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ac8:	3301      	adds	r3, #1
 8005aca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005ace:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005ad2:	881b      	ldrh	r3, [r3, #0]
 8005ad4:	b29a      	uxth	r2, r3
 8005ad6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	029b      	lsls	r3, r3, #10
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	b29a      	uxth	r2, r3
 8005ae4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005ae8:	801a      	strh	r2, [r3, #0]
 8005aea:	e034      	b.n	8005b56 <USB_EPStartXfer+0x10ea>
 8005aec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005af0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	785b      	ldrb	r3, [r3, #1]
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d12c      	bne.n	8005b56 <USB_EPStartXfer+0x10ea>
 8005afc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b00:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005b0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005b20:	4413      	add	r3, r2
 8005b22:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005b26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	781b      	ldrb	r3, [r3, #0]
 8005b32:	011a      	lsls	r2, r3, #4
 8005b34:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005b38:	4413      	add	r3, r2
 8005b3a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b3e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005b42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	691b      	ldr	r3, [r3, #16]
 8005b4e:	b29a      	uxth	r2, r3
 8005b50:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005b54:	801a      	strh	r2, [r3, #0]
 8005b56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005b64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	785b      	ldrb	r3, [r3, #1]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	f040 809d 	bne.w	8005cb0 <USB_EPStartXfer+0x1244>
 8005b76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005b84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b88:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	461a      	mov	r2, r3
 8005b96:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b9a:	4413      	add	r3, r2
 8005b9c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005ba0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ba4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	781b      	ldrb	r3, [r3, #0]
 8005bac:	011a      	lsls	r2, r3, #4
 8005bae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005bb2:	4413      	add	r3, r2
 8005bb4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005bb8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005bbc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005bc0:	881b      	ldrh	r3, [r3, #0]
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005bc8:	b29a      	uxth	r2, r3
 8005bca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005bce:	801a      	strh	r2, [r3, #0]
 8005bd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	691b      	ldr	r3, [r3, #16]
 8005bdc:	2b3e      	cmp	r3, #62	; 0x3e
 8005bde:	d92b      	bls.n	8005c38 <USB_EPStartXfer+0x11cc>
 8005be0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005be4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	691b      	ldr	r3, [r3, #16]
 8005bec:	095b      	lsrs	r3, r3, #5
 8005bee:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005bf2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bf6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	691b      	ldr	r3, [r3, #16]
 8005bfe:	f003 031f 	and.w	r3, r3, #31
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d104      	bne.n	8005c10 <USB_EPStartXfer+0x11a4>
 8005c06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c0a:	3b01      	subs	r3, #1
 8005c0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005c10:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005c14:	881b      	ldrh	r3, [r3, #0]
 8005c16:	b29a      	uxth	r2, r3
 8005c18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	029b      	lsls	r3, r3, #10
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	4313      	orrs	r3, r2
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c2e:	b29a      	uxth	r2, r3
 8005c30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005c34:	801a      	strh	r2, [r3, #0]
 8005c36:	e069      	b.n	8005d0c <USB_EPStartXfer+0x12a0>
 8005c38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	691b      	ldr	r3, [r3, #16]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d10c      	bne.n	8005c62 <USB_EPStartXfer+0x11f6>
 8005c48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005c4c:	881b      	ldrh	r3, [r3, #0]
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c58:	b29a      	uxth	r2, r3
 8005c5a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005c5e:	801a      	strh	r2, [r3, #0]
 8005c60:	e054      	b.n	8005d0c <USB_EPStartXfer+0x12a0>
 8005c62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	691b      	ldr	r3, [r3, #16]
 8005c6e:	085b      	lsrs	r3, r3, #1
 8005c70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005c74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	691b      	ldr	r3, [r3, #16]
 8005c80:	f003 0301 	and.w	r3, r3, #1
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d004      	beq.n	8005c92 <USB_EPStartXfer+0x1226>
 8005c88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c8c:	3301      	adds	r3, #1
 8005c8e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005c92:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005c96:	881b      	ldrh	r3, [r3, #0]
 8005c98:	b29a      	uxth	r2, r3
 8005c9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	029b      	lsls	r3, r3, #10
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	b29a      	uxth	r2, r3
 8005ca8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005cac:	801a      	strh	r2, [r3, #0]
 8005cae:	e02d      	b.n	8005d0c <USB_EPStartXfer+0x12a0>
 8005cb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	785b      	ldrb	r3, [r3, #1]
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d125      	bne.n	8005d0c <USB_EPStartXfer+0x12a0>
 8005cc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cc4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	461a      	mov	r2, r3
 8005cd2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005cd6:	4413      	add	r3, r2
 8005cd8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005cdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ce0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	781b      	ldrb	r3, [r3, #0]
 8005ce8:	011a      	lsls	r2, r3, #4
 8005cea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005cee:	4413      	add	r3, r2
 8005cf0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005cf4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005cf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cfc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	691b      	ldr	r3, [r3, #16]
 8005d04:	b29a      	uxth	r2, r3
 8005d06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005d0a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005d0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	69db      	ldr	r3, [r3, #28]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	f000 8218 	beq.w	800614e <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005d1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d22:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	781b      	ldrb	r3, [r3, #0]
 8005d34:	009b      	lsls	r3, r3, #2
 8005d36:	4413      	add	r3, r2
 8005d38:	881b      	ldrh	r3, [r3, #0]
 8005d3a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005d3e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005d42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d005      	beq.n	8005d56 <USB_EPStartXfer+0x12ea>
 8005d4a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d10d      	bne.n	8005d72 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005d56:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005d5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	f040 81f5 	bne.w	800614e <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005d64:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	f040 81ee 	bne.w	800614e <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8005d72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	009b      	lsls	r3, r3, #2
 8005d8a:	4413      	add	r3, r2
 8005d8c:	881b      	ldrh	r3, [r3, #0]
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d98:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8005d9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005da0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005da4:	681a      	ldr	r2, [r3, #0]
 8005da6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005daa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	009b      	lsls	r3, r3, #2
 8005db4:	441a      	add	r2, r3
 8005db6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8005dba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dc6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	8013      	strh	r3, [r2, #0]
 8005dce:	e1be      	b.n	800614e <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005dd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	78db      	ldrb	r3, [r3, #3]
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	f040 81b4 	bne.w	800614a <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005de2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005de6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	699a      	ldr	r2, [r3, #24]
 8005dee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005df2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	691b      	ldr	r3, [r3, #16]
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	d917      	bls.n	8005e2e <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8005dfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	691b      	ldr	r3, [r3, #16]
 8005e0a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8005e0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	699a      	ldr	r2, [r3, #24]
 8005e1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e1e:	1ad2      	subs	r2, r2, r3
 8005e20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	619a      	str	r2, [r3, #24]
 8005e2c:	e00e      	b.n	8005e4c <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8005e2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	699b      	ldr	r3, [r3, #24]
 8005e3a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8005e3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005e4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	785b      	ldrb	r3, [r3, #1]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	f040 8085 	bne.w	8005f68 <USB_EPStartXfer+0x14fc>
 8005e5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005e6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e70:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005e82:	4413      	add	r3, r2
 8005e84:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005e88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	011a      	lsls	r2, r3, #4
 8005e96:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005e9a:	4413      	add	r3, r2
 8005e9c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005ea0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005ea4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005ea8:	881b      	ldrh	r3, [r3, #0]
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005eb0:	b29a      	uxth	r2, r3
 8005eb2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005eb6:	801a      	strh	r2, [r3, #0]
 8005eb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ebc:	2b3e      	cmp	r3, #62	; 0x3e
 8005ebe:	d923      	bls.n	8005f08 <USB_EPStartXfer+0x149c>
 8005ec0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ec4:	095b      	lsrs	r3, r3, #5
 8005ec6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005eca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ece:	f003 031f 	and.w	r3, r3, #31
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d104      	bne.n	8005ee0 <USB_EPStartXfer+0x1474>
 8005ed6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005eda:	3b01      	subs	r3, #1
 8005edc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005ee0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005ee4:	881b      	ldrh	r3, [r3, #0]
 8005ee6:	b29a      	uxth	r2, r3
 8005ee8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	029b      	lsls	r3, r3, #10
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	b29b      	uxth	r3, r3
 8005ef6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005efa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005efe:	b29a      	uxth	r2, r3
 8005f00:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005f04:	801a      	strh	r2, [r3, #0]
 8005f06:	e060      	b.n	8005fca <USB_EPStartXfer+0x155e>
 8005f08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d10c      	bne.n	8005f2a <USB_EPStartXfer+0x14be>
 8005f10:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005f14:	881b      	ldrh	r3, [r3, #0]
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f20:	b29a      	uxth	r2, r3
 8005f22:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005f26:	801a      	strh	r2, [r3, #0]
 8005f28:	e04f      	b.n	8005fca <USB_EPStartXfer+0x155e>
 8005f2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f2e:	085b      	lsrs	r3, r3, #1
 8005f30:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005f34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f38:	f003 0301 	and.w	r3, r3, #1
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d004      	beq.n	8005f4a <USB_EPStartXfer+0x14de>
 8005f40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f44:	3301      	adds	r3, #1
 8005f46:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005f4a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005f4e:	881b      	ldrh	r3, [r3, #0]
 8005f50:	b29a      	uxth	r2, r3
 8005f52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f56:	b29b      	uxth	r3, r3
 8005f58:	029b      	lsls	r3, r3, #10
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	b29a      	uxth	r2, r3
 8005f60:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005f64:	801a      	strh	r2, [r3, #0]
 8005f66:	e030      	b.n	8005fca <USB_EPStartXfer+0x155e>
 8005f68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	785b      	ldrb	r3, [r3, #1]
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d128      	bne.n	8005fca <USB_EPStartXfer+0x155e>
 8005f78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f7c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005f86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	461a      	mov	r2, r3
 8005f98:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f9c:	4413      	add	r3, r2
 8005f9e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005fa2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fa6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	781b      	ldrb	r3, [r3, #0]
 8005fae:	011a      	lsls	r2, r3, #4
 8005fb0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005fb4:	4413      	add	r3, r2
 8005fb6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005fba:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005fbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fc2:	b29a      	uxth	r2, r3
 8005fc4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005fc8:	801a      	strh	r2, [r3, #0]
 8005fca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005fd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	785b      	ldrb	r3, [r3, #1]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	f040 8085 	bne.w	80060f4 <USB_EPStartXfer+0x1688>
 8005fea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005ff8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ffc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006006:	b29b      	uxth	r3, r3
 8006008:	461a      	mov	r2, r3
 800600a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800600e:	4413      	add	r3, r2
 8006010:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006014:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006018:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	781b      	ldrb	r3, [r3, #0]
 8006020:	011a      	lsls	r2, r3, #4
 8006022:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006026:	4413      	add	r3, r2
 8006028:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800602c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006030:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006034:	881b      	ldrh	r3, [r3, #0]
 8006036:	b29b      	uxth	r3, r3
 8006038:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800603c:	b29a      	uxth	r2, r3
 800603e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006042:	801a      	strh	r2, [r3, #0]
 8006044:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006048:	2b3e      	cmp	r3, #62	; 0x3e
 800604a:	d923      	bls.n	8006094 <USB_EPStartXfer+0x1628>
 800604c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006050:	095b      	lsrs	r3, r3, #5
 8006052:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006056:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800605a:	f003 031f 	and.w	r3, r3, #31
 800605e:	2b00      	cmp	r3, #0
 8006060:	d104      	bne.n	800606c <USB_EPStartXfer+0x1600>
 8006062:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006066:	3b01      	subs	r3, #1
 8006068:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800606c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006070:	881b      	ldrh	r3, [r3, #0]
 8006072:	b29a      	uxth	r2, r3
 8006074:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006078:	b29b      	uxth	r3, r3
 800607a:	029b      	lsls	r3, r3, #10
 800607c:	b29b      	uxth	r3, r3
 800607e:	4313      	orrs	r3, r2
 8006080:	b29b      	uxth	r3, r3
 8006082:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006086:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800608a:	b29a      	uxth	r2, r3
 800608c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006090:	801a      	strh	r2, [r3, #0]
 8006092:	e05c      	b.n	800614e <USB_EPStartXfer+0x16e2>
 8006094:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006098:	2b00      	cmp	r3, #0
 800609a:	d10c      	bne.n	80060b6 <USB_EPStartXfer+0x164a>
 800609c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80060a0:	881b      	ldrh	r3, [r3, #0]
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060ac:	b29a      	uxth	r2, r3
 80060ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80060b2:	801a      	strh	r2, [r3, #0]
 80060b4:	e04b      	b.n	800614e <USB_EPStartXfer+0x16e2>
 80060b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060ba:	085b      	lsrs	r3, r3, #1
 80060bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80060c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060c4:	f003 0301 	and.w	r3, r3, #1
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d004      	beq.n	80060d6 <USB_EPStartXfer+0x166a>
 80060cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80060d0:	3301      	adds	r3, #1
 80060d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80060d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80060da:	881b      	ldrh	r3, [r3, #0]
 80060dc:	b29a      	uxth	r2, r3
 80060de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	029b      	lsls	r3, r3, #10
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	4313      	orrs	r3, r2
 80060ea:	b29a      	uxth	r2, r3
 80060ec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80060f0:	801a      	strh	r2, [r3, #0]
 80060f2:	e02c      	b.n	800614e <USB_EPStartXfer+0x16e2>
 80060f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	785b      	ldrb	r3, [r3, #1]
 8006100:	2b01      	cmp	r3, #1
 8006102:	d124      	bne.n	800614e <USB_EPStartXfer+0x16e2>
 8006104:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006108:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006112:	b29b      	uxth	r3, r3
 8006114:	461a      	mov	r2, r3
 8006116:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800611a:	4413      	add	r3, r2
 800611c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006120:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006124:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	011a      	lsls	r2, r3, #4
 800612e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006132:	4413      	add	r3, r2
 8006134:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006138:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800613c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006140:	b29a      	uxth	r2, r3
 8006142:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006146:	801a      	strh	r2, [r3, #0]
 8006148:	e001      	b.n	800614e <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800614a:	2301      	movs	r3, #1
 800614c:	e03a      	b.n	80061c4 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800614e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006152:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800615c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	009b      	lsls	r3, r3, #2
 8006166:	4413      	add	r3, r2
 8006168:	881b      	ldrh	r3, [r3, #0]
 800616a:	b29b      	uxth	r3, r3
 800616c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006170:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006174:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006178:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800617c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006180:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006184:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006188:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800618c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006190:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006194:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006198:	681a      	ldr	r2, [r3, #0]
 800619a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800619e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	009b      	lsls	r3, r3, #2
 80061a8:	441a      	add	r2, r3
 80061aa:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80061ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061be:	b29b      	uxth	r3, r3
 80061c0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80061c2:	2300      	movs	r3, #0
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}

080061ce <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80061ce:	b480      	push	{r7}
 80061d0:	b085      	sub	sp, #20
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	6078      	str	r0, [r7, #4]
 80061d6:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	785b      	ldrb	r3, [r3, #1]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d020      	beq.n	8006222 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80061e0:	687a      	ldr	r2, [r7, #4]
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	781b      	ldrb	r3, [r3, #0]
 80061e6:	009b      	lsls	r3, r3, #2
 80061e8:	4413      	add	r3, r2
 80061ea:	881b      	ldrh	r3, [r3, #0]
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061f6:	81bb      	strh	r3, [r7, #12]
 80061f8:	89bb      	ldrh	r3, [r7, #12]
 80061fa:	f083 0310 	eor.w	r3, r3, #16
 80061fe:	81bb      	strh	r3, [r7, #12]
 8006200:	687a      	ldr	r2, [r7, #4]
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	781b      	ldrb	r3, [r3, #0]
 8006206:	009b      	lsls	r3, r3, #2
 8006208:	441a      	add	r2, r3
 800620a:	89bb      	ldrh	r3, [r7, #12]
 800620c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006210:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006214:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006218:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800621c:	b29b      	uxth	r3, r3
 800621e:	8013      	strh	r3, [r2, #0]
 8006220:	e01f      	b.n	8006262 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006222:	687a      	ldr	r2, [r7, #4]
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	781b      	ldrb	r3, [r3, #0]
 8006228:	009b      	lsls	r3, r3, #2
 800622a:	4413      	add	r3, r2
 800622c:	881b      	ldrh	r3, [r3, #0]
 800622e:	b29b      	uxth	r3, r3
 8006230:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006234:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006238:	81fb      	strh	r3, [r7, #14]
 800623a:	89fb      	ldrh	r3, [r7, #14]
 800623c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006240:	81fb      	strh	r3, [r7, #14]
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	781b      	ldrb	r3, [r3, #0]
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	441a      	add	r2, r3
 800624c:	89fb      	ldrh	r3, [r7, #14]
 800624e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006252:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006256:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800625a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800625e:	b29b      	uxth	r3, r3
 8006260:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006262:	2300      	movs	r3, #0
}
 8006264:	4618      	mov	r0, r3
 8006266:	3714      	adds	r7, #20
 8006268:	46bd      	mov	sp, r7
 800626a:	bc80      	pop	{r7}
 800626c:	4770      	bx	lr

0800626e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800626e:	b480      	push	{r7}
 8006270:	b087      	sub	sp, #28
 8006272:	af00      	add	r7, sp, #0
 8006274:	6078      	str	r0, [r7, #4]
 8006276:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	7b1b      	ldrb	r3, [r3, #12]
 800627c:	2b00      	cmp	r3, #0
 800627e:	f040 809d 	bne.w	80063bc <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	785b      	ldrb	r3, [r3, #1]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d04c      	beq.n	8006324 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800628a:	687a      	ldr	r2, [r7, #4]
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	781b      	ldrb	r3, [r3, #0]
 8006290:	009b      	lsls	r3, r3, #2
 8006292:	4413      	add	r3, r2
 8006294:	881b      	ldrh	r3, [r3, #0]
 8006296:	823b      	strh	r3, [r7, #16]
 8006298:	8a3b      	ldrh	r3, [r7, #16]
 800629a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d01b      	beq.n	80062da <USB_EPClearStall+0x6c>
 80062a2:	687a      	ldr	r2, [r7, #4]
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	781b      	ldrb	r3, [r3, #0]
 80062a8:	009b      	lsls	r3, r3, #2
 80062aa:	4413      	add	r3, r2
 80062ac:	881b      	ldrh	r3, [r3, #0]
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062b8:	81fb      	strh	r3, [r7, #14]
 80062ba:	687a      	ldr	r2, [r7, #4]
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	781b      	ldrb	r3, [r3, #0]
 80062c0:	009b      	lsls	r3, r3, #2
 80062c2:	441a      	add	r2, r3
 80062c4:	89fb      	ldrh	r3, [r7, #14]
 80062c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062d2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	78db      	ldrb	r3, [r3, #3]
 80062de:	2b01      	cmp	r3, #1
 80062e0:	d06c      	beq.n	80063bc <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80062e2:	687a      	ldr	r2, [r7, #4]
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	781b      	ldrb	r3, [r3, #0]
 80062e8:	009b      	lsls	r3, r3, #2
 80062ea:	4413      	add	r3, r2
 80062ec:	881b      	ldrh	r3, [r3, #0]
 80062ee:	b29b      	uxth	r3, r3
 80062f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062f8:	81bb      	strh	r3, [r7, #12]
 80062fa:	89bb      	ldrh	r3, [r7, #12]
 80062fc:	f083 0320 	eor.w	r3, r3, #32
 8006300:	81bb      	strh	r3, [r7, #12]
 8006302:	687a      	ldr	r2, [r7, #4]
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	781b      	ldrb	r3, [r3, #0]
 8006308:	009b      	lsls	r3, r3, #2
 800630a:	441a      	add	r2, r3
 800630c:	89bb      	ldrh	r3, [r7, #12]
 800630e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006312:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006316:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800631a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800631e:	b29b      	uxth	r3, r3
 8006320:	8013      	strh	r3, [r2, #0]
 8006322:	e04b      	b.n	80063bc <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006324:	687a      	ldr	r2, [r7, #4]
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	781b      	ldrb	r3, [r3, #0]
 800632a:	009b      	lsls	r3, r3, #2
 800632c:	4413      	add	r3, r2
 800632e:	881b      	ldrh	r3, [r3, #0]
 8006330:	82fb      	strh	r3, [r7, #22]
 8006332:	8afb      	ldrh	r3, [r7, #22]
 8006334:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006338:	2b00      	cmp	r3, #0
 800633a:	d01b      	beq.n	8006374 <USB_EPClearStall+0x106>
 800633c:	687a      	ldr	r2, [r7, #4]
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	781b      	ldrb	r3, [r3, #0]
 8006342:	009b      	lsls	r3, r3, #2
 8006344:	4413      	add	r3, r2
 8006346:	881b      	ldrh	r3, [r3, #0]
 8006348:	b29b      	uxth	r3, r3
 800634a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800634e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006352:	82bb      	strh	r3, [r7, #20]
 8006354:	687a      	ldr	r2, [r7, #4]
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	781b      	ldrb	r3, [r3, #0]
 800635a:	009b      	lsls	r3, r3, #2
 800635c:	441a      	add	r2, r3
 800635e:	8abb      	ldrh	r3, [r7, #20]
 8006360:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006364:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006368:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800636c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006370:	b29b      	uxth	r3, r3
 8006372:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006374:	687a      	ldr	r2, [r7, #4]
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	009b      	lsls	r3, r3, #2
 800637c:	4413      	add	r3, r2
 800637e:	881b      	ldrh	r3, [r3, #0]
 8006380:	b29b      	uxth	r3, r3
 8006382:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800638a:	827b      	strh	r3, [r7, #18]
 800638c:	8a7b      	ldrh	r3, [r7, #18]
 800638e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006392:	827b      	strh	r3, [r7, #18]
 8006394:	8a7b      	ldrh	r3, [r7, #18]
 8006396:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800639a:	827b      	strh	r3, [r7, #18]
 800639c:	687a      	ldr	r2, [r7, #4]
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	781b      	ldrb	r3, [r3, #0]
 80063a2:	009b      	lsls	r3, r3, #2
 80063a4:	441a      	add	r2, r3
 80063a6:	8a7b      	ldrh	r3, [r7, #18]
 80063a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80063bc:	2300      	movs	r3, #0
}
 80063be:	4618      	mov	r0, r3
 80063c0:	371c      	adds	r7, #28
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bc80      	pop	{r7}
 80063c6:	4770      	bx	lr

080063c8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b083      	sub	sp, #12
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	460b      	mov	r3, r1
 80063d2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80063d4:	78fb      	ldrb	r3, [r7, #3]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d103      	bne.n	80063e2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2280      	movs	r2, #128	; 0x80
 80063de:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80063e2:	2300      	movs	r3, #0
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	370c      	adds	r7, #12
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bc80      	pop	{r7}
 80063ec:	4770      	bx	lr

080063ee <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80063ee:	b480      	push	{r7}
 80063f0:	b083      	sub	sp, #12
 80063f2:	af00      	add	r7, sp, #0
 80063f4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80063f6:	2300      	movs	r3, #0
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	370c      	adds	r7, #12
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bc80      	pop	{r7}
 8006400:	4770      	bx	lr

08006402 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006402:	b480      	push	{r7}
 8006404:	b083      	sub	sp, #12
 8006406:	af00      	add	r7, sp, #0
 8006408:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800640a:	2300      	movs	r3, #0
}
 800640c:	4618      	mov	r0, r3
 800640e:	370c      	adds	r7, #12
 8006410:	46bd      	mov	sp, r7
 8006412:	bc80      	pop	{r7}
 8006414:	4770      	bx	lr

08006416 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8006416:	b480      	push	{r7}
 8006418:	b085      	sub	sp, #20
 800641a:	af00      	add	r7, sp, #0
 800641c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006424:	b29b      	uxth	r3, r3
 8006426:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006428:	68fb      	ldr	r3, [r7, #12]
}
 800642a:	4618      	mov	r0, r3
 800642c:	3714      	adds	r7, #20
 800642e:	46bd      	mov	sp, r7
 8006430:	bc80      	pop	{r7}
 8006432:	4770      	bx	lr

08006434 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006434:	b480      	push	{r7}
 8006436:	b083      	sub	sp, #12
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800643e:	2300      	movs	r3, #0
}
 8006440:	4618      	mov	r0, r3
 8006442:	370c      	adds	r7, #12
 8006444:	46bd      	mov	sp, r7
 8006446:	bc80      	pop	{r7}
 8006448:	4770      	bx	lr

0800644a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800644a:	b480      	push	{r7}
 800644c:	b08b      	sub	sp, #44	; 0x2c
 800644e:	af00      	add	r7, sp, #0
 8006450:	60f8      	str	r0, [r7, #12]
 8006452:	60b9      	str	r1, [r7, #8]
 8006454:	4611      	mov	r1, r2
 8006456:	461a      	mov	r2, r3
 8006458:	460b      	mov	r3, r1
 800645a:	80fb      	strh	r3, [r7, #6]
 800645c:	4613      	mov	r3, r2
 800645e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006460:	88bb      	ldrh	r3, [r7, #4]
 8006462:	3301      	adds	r3, #1
 8006464:	085b      	lsrs	r3, r3, #1
 8006466:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006470:	88fb      	ldrh	r3, [r7, #6]
 8006472:	005a      	lsls	r2, r3, #1
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	4413      	add	r3, r2
 8006478:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800647c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800647e:	69bb      	ldr	r3, [r7, #24]
 8006480:	627b      	str	r3, [r7, #36]	; 0x24
 8006482:	e01e      	b.n	80064c2 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8006484:	69fb      	ldr	r3, [r7, #28]
 8006486:	781b      	ldrb	r3, [r3, #0]
 8006488:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800648a:	69fb      	ldr	r3, [r7, #28]
 800648c:	3301      	adds	r3, #1
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	021b      	lsls	r3, r3, #8
 8006492:	b21a      	sxth	r2, r3
 8006494:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006498:	4313      	orrs	r3, r2
 800649a:	b21b      	sxth	r3, r3
 800649c:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800649e:	6a3b      	ldr	r3, [r7, #32]
 80064a0:	8a7a      	ldrh	r2, [r7, #18]
 80064a2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80064a4:	6a3b      	ldr	r3, [r7, #32]
 80064a6:	3302      	adds	r3, #2
 80064a8:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 80064aa:	6a3b      	ldr	r3, [r7, #32]
 80064ac:	3302      	adds	r3, #2
 80064ae:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 80064b0:	69fb      	ldr	r3, [r7, #28]
 80064b2:	3301      	adds	r3, #1
 80064b4:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80064b6:	69fb      	ldr	r3, [r7, #28]
 80064b8:	3301      	adds	r3, #1
 80064ba:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80064bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064be:	3b01      	subs	r3, #1
 80064c0:	627b      	str	r3, [r7, #36]	; 0x24
 80064c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d1dd      	bne.n	8006484 <USB_WritePMA+0x3a>
  }
}
 80064c8:	bf00      	nop
 80064ca:	bf00      	nop
 80064cc:	372c      	adds	r7, #44	; 0x2c
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bc80      	pop	{r7}
 80064d2:	4770      	bx	lr

080064d4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b08b      	sub	sp, #44	; 0x2c
 80064d8:	af00      	add	r7, sp, #0
 80064da:	60f8      	str	r0, [r7, #12]
 80064dc:	60b9      	str	r1, [r7, #8]
 80064de:	4611      	mov	r1, r2
 80064e0:	461a      	mov	r2, r3
 80064e2:	460b      	mov	r3, r1
 80064e4:	80fb      	strh	r3, [r7, #6]
 80064e6:	4613      	mov	r3, r2
 80064e8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80064ea:	88bb      	ldrh	r3, [r7, #4]
 80064ec:	085b      	lsrs	r3, r3, #1
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80064fa:	88fb      	ldrh	r3, [r7, #6]
 80064fc:	005a      	lsls	r2, r3, #1
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	4413      	add	r3, r2
 8006502:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006506:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006508:	69bb      	ldr	r3, [r7, #24]
 800650a:	627b      	str	r3, [r7, #36]	; 0x24
 800650c:	e01b      	b.n	8006546 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800650e:	6a3b      	ldr	r3, [r7, #32]
 8006510:	881b      	ldrh	r3, [r3, #0]
 8006512:	b29b      	uxth	r3, r3
 8006514:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006516:	6a3b      	ldr	r3, [r7, #32]
 8006518:	3302      	adds	r3, #2
 800651a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	b2da      	uxtb	r2, r3
 8006520:	69fb      	ldr	r3, [r7, #28]
 8006522:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006524:	69fb      	ldr	r3, [r7, #28]
 8006526:	3301      	adds	r3, #1
 8006528:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	0a1b      	lsrs	r3, r3, #8
 800652e:	b2da      	uxtb	r2, r3
 8006530:	69fb      	ldr	r3, [r7, #28]
 8006532:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006534:	69fb      	ldr	r3, [r7, #28]
 8006536:	3301      	adds	r3, #1
 8006538:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800653a:	6a3b      	ldr	r3, [r7, #32]
 800653c:	3302      	adds	r3, #2
 800653e:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8006540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006542:	3b01      	subs	r3, #1
 8006544:	627b      	str	r3, [r7, #36]	; 0x24
 8006546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006548:	2b00      	cmp	r3, #0
 800654a:	d1e0      	bne.n	800650e <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800654c:	88bb      	ldrh	r3, [r7, #4]
 800654e:	f003 0301 	and.w	r3, r3, #1
 8006552:	b29b      	uxth	r3, r3
 8006554:	2b00      	cmp	r3, #0
 8006556:	d007      	beq.n	8006568 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8006558:	6a3b      	ldr	r3, [r7, #32]
 800655a:	881b      	ldrh	r3, [r3, #0]
 800655c:	b29b      	uxth	r3, r3
 800655e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	b2da      	uxtb	r2, r3
 8006564:	69fb      	ldr	r3, [r7, #28]
 8006566:	701a      	strb	r2, [r3, #0]
  }
}
 8006568:	bf00      	nop
 800656a:	372c      	adds	r7, #44	; 0x2c
 800656c:	46bd      	mov	sp, r7
 800656e:	bc80      	pop	{r7}
 8006570:	4770      	bx	lr

08006572 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006572:	b580      	push	{r7, lr}
 8006574:	b084      	sub	sp, #16
 8006576:	af00      	add	r7, sp, #0
 8006578:	6078      	str	r0, [r7, #4]
 800657a:	460b      	mov	r3, r1
 800657c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800657e:	2300      	movs	r3, #0
 8006580:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	7c1b      	ldrb	r3, [r3, #16]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d115      	bne.n	80065b6 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800658a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800658e:	2202      	movs	r2, #2
 8006590:	2181      	movs	r1, #129	; 0x81
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f001 fe87 	bl	80082a6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2201      	movs	r2, #1
 800659c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800659e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80065a2:	2202      	movs	r2, #2
 80065a4:	2101      	movs	r1, #1
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f001 fe7d 	bl	80082a6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2201      	movs	r2, #1
 80065b0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80065b4:	e012      	b.n	80065dc <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80065b6:	2340      	movs	r3, #64	; 0x40
 80065b8:	2202      	movs	r2, #2
 80065ba:	2181      	movs	r1, #129	; 0x81
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f001 fe72 	bl	80082a6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2201      	movs	r2, #1
 80065c6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80065c8:	2340      	movs	r3, #64	; 0x40
 80065ca:	2202      	movs	r2, #2
 80065cc:	2101      	movs	r1, #1
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f001 fe69 	bl	80082a6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2201      	movs	r2, #1
 80065d8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80065dc:	2308      	movs	r3, #8
 80065de:	2203      	movs	r2, #3
 80065e0:	2182      	movs	r1, #130	; 0x82
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f001 fe5f 	bl	80082a6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2201      	movs	r2, #1
 80065ec:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80065ee:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80065f2:	f001 ff7f 	bl	80084f4 <USBD_static_malloc>
 80065f6:	4602      	mov	r2, r0
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006604:	2b00      	cmp	r3, #0
 8006606:	d102      	bne.n	800660e <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006608:	2301      	movs	r3, #1
 800660a:	73fb      	strb	r3, [r7, #15]
 800660c:	e026      	b.n	800665c <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006614:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	2200      	movs	r2, #0
 8006624:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	2200      	movs	r2, #0
 800662c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	7c1b      	ldrb	r3, [r3, #16]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d109      	bne.n	800664c <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800663e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006642:	2101      	movs	r1, #1
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f001 ff1f 	bl	8008488 <USBD_LL_PrepareReceive>
 800664a:	e007      	b.n	800665c <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006652:	2340      	movs	r3, #64	; 0x40
 8006654:	2101      	movs	r1, #1
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f001 ff16 	bl	8008488 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800665c:	7bfb      	ldrb	r3, [r7, #15]
}
 800665e:	4618      	mov	r0, r3
 8006660:	3710      	adds	r7, #16
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}

08006666 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006666:	b580      	push	{r7, lr}
 8006668:	b084      	sub	sp, #16
 800666a:	af00      	add	r7, sp, #0
 800666c:	6078      	str	r0, [r7, #4]
 800666e:	460b      	mov	r3, r1
 8006670:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006672:	2300      	movs	r3, #0
 8006674:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006676:	2181      	movs	r1, #129	; 0x81
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f001 fe3a 	bl	80082f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2200      	movs	r2, #0
 8006682:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006684:	2101      	movs	r1, #1
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f001 fe33 	bl	80082f2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2200      	movs	r2, #0
 8006690:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006694:	2182      	movs	r1, #130	; 0x82
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f001 fe2b 	bl	80082f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2200      	movs	r2, #0
 80066a0:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d00e      	beq.n	80066ca <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066bc:	4618      	mov	r0, r3
 80066be:	f001 ff25 	bl	800850c <USBD_static_free>
    pdev->pClassData = NULL;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2200      	movs	r2, #0
 80066c6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80066ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3710      	adds	r7, #16
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}

080066d4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b086      	sub	sp, #24
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
 80066dc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066e4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80066e6:	2300      	movs	r3, #0
 80066e8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80066ea:	2300      	movs	r3, #0
 80066ec:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80066ee:	2300      	movs	r3, #0
 80066f0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	781b      	ldrb	r3, [r3, #0]
 80066f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d039      	beq.n	8006772 <USBD_CDC_Setup+0x9e>
 80066fe:	2b20      	cmp	r3, #32
 8006700:	d17f      	bne.n	8006802 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	88db      	ldrh	r3, [r3, #6]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d029      	beq.n	800675e <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	781b      	ldrb	r3, [r3, #0]
 800670e:	b25b      	sxtb	r3, r3
 8006710:	2b00      	cmp	r3, #0
 8006712:	da11      	bge.n	8006738 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800671a:	689b      	ldr	r3, [r3, #8]
 800671c:	683a      	ldr	r2, [r7, #0]
 800671e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006720:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006722:	683a      	ldr	r2, [r7, #0]
 8006724:	88d2      	ldrh	r2, [r2, #6]
 8006726:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006728:	6939      	ldr	r1, [r7, #16]
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	88db      	ldrh	r3, [r3, #6]
 800672e:	461a      	mov	r2, r3
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f001 fa0a 	bl	8007b4a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006736:	e06b      	b.n	8006810 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	785a      	ldrb	r2, [r3, #1]
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	88db      	ldrh	r3, [r3, #6]
 8006746:	b2da      	uxtb	r2, r3
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800674e:	6939      	ldr	r1, [r7, #16]
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	88db      	ldrh	r3, [r3, #6]
 8006754:	461a      	mov	r2, r3
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f001 fa25 	bl	8007ba6 <USBD_CtlPrepareRx>
      break;
 800675c:	e058      	b.n	8006810 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	683a      	ldr	r2, [r7, #0]
 8006768:	7850      	ldrb	r0, [r2, #1]
 800676a:	2200      	movs	r2, #0
 800676c:	6839      	ldr	r1, [r7, #0]
 800676e:	4798      	blx	r3
      break;
 8006770:	e04e      	b.n	8006810 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	785b      	ldrb	r3, [r3, #1]
 8006776:	2b0b      	cmp	r3, #11
 8006778:	d02e      	beq.n	80067d8 <USBD_CDC_Setup+0x104>
 800677a:	2b0b      	cmp	r3, #11
 800677c:	dc38      	bgt.n	80067f0 <USBD_CDC_Setup+0x11c>
 800677e:	2b00      	cmp	r3, #0
 8006780:	d002      	beq.n	8006788 <USBD_CDC_Setup+0xb4>
 8006782:	2b0a      	cmp	r3, #10
 8006784:	d014      	beq.n	80067b0 <USBD_CDC_Setup+0xdc>
 8006786:	e033      	b.n	80067f0 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800678e:	2b03      	cmp	r3, #3
 8006790:	d107      	bne.n	80067a2 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006792:	f107 030c 	add.w	r3, r7, #12
 8006796:	2202      	movs	r2, #2
 8006798:	4619      	mov	r1, r3
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f001 f9d5 	bl	8007b4a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80067a0:	e02e      	b.n	8006800 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80067a2:	6839      	ldr	r1, [r7, #0]
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f001 f966 	bl	8007a76 <USBD_CtlError>
            ret = USBD_FAIL;
 80067aa:	2302      	movs	r3, #2
 80067ac:	75fb      	strb	r3, [r7, #23]
          break;
 80067ae:	e027      	b.n	8006800 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067b6:	2b03      	cmp	r3, #3
 80067b8:	d107      	bne.n	80067ca <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80067ba:	f107 030f 	add.w	r3, r7, #15
 80067be:	2201      	movs	r2, #1
 80067c0:	4619      	mov	r1, r3
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f001 f9c1 	bl	8007b4a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80067c8:	e01a      	b.n	8006800 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80067ca:	6839      	ldr	r1, [r7, #0]
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f001 f952 	bl	8007a76 <USBD_CtlError>
            ret = USBD_FAIL;
 80067d2:	2302      	movs	r3, #2
 80067d4:	75fb      	strb	r3, [r7, #23]
          break;
 80067d6:	e013      	b.n	8006800 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067de:	2b03      	cmp	r3, #3
 80067e0:	d00d      	beq.n	80067fe <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80067e2:	6839      	ldr	r1, [r7, #0]
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f001 f946 	bl	8007a76 <USBD_CtlError>
            ret = USBD_FAIL;
 80067ea:	2302      	movs	r3, #2
 80067ec:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80067ee:	e006      	b.n	80067fe <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80067f0:	6839      	ldr	r1, [r7, #0]
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f001 f93f 	bl	8007a76 <USBD_CtlError>
          ret = USBD_FAIL;
 80067f8:	2302      	movs	r3, #2
 80067fa:	75fb      	strb	r3, [r7, #23]
          break;
 80067fc:	e000      	b.n	8006800 <USBD_CDC_Setup+0x12c>
          break;
 80067fe:	bf00      	nop
      }
      break;
 8006800:	e006      	b.n	8006810 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006802:	6839      	ldr	r1, [r7, #0]
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f001 f936 	bl	8007a76 <USBD_CtlError>
      ret = USBD_FAIL;
 800680a:	2302      	movs	r3, #2
 800680c:	75fb      	strb	r3, [r7, #23]
      break;
 800680e:	bf00      	nop
  }

  return ret;
 8006810:	7dfb      	ldrb	r3, [r7, #23]
}
 8006812:	4618      	mov	r0, r3
 8006814:	3718      	adds	r7, #24
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}

0800681a <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800681a:	b580      	push	{r7, lr}
 800681c:	b084      	sub	sp, #16
 800681e:	af00      	add	r7, sp, #0
 8006820:	6078      	str	r0, [r7, #4]
 8006822:	460b      	mov	r3, r1
 8006824:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800682c:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006834:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800683c:	2b00      	cmp	r3, #0
 800683e:	d03a      	beq.n	80068b6 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006840:	78fa      	ldrb	r2, [r7, #3]
 8006842:	6879      	ldr	r1, [r7, #4]
 8006844:	4613      	mov	r3, r2
 8006846:	009b      	lsls	r3, r3, #2
 8006848:	4413      	add	r3, r2
 800684a:	009b      	lsls	r3, r3, #2
 800684c:	440b      	add	r3, r1
 800684e:	331c      	adds	r3, #28
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d029      	beq.n	80068aa <USBD_CDC_DataIn+0x90>
 8006856:	78fa      	ldrb	r2, [r7, #3]
 8006858:	6879      	ldr	r1, [r7, #4]
 800685a:	4613      	mov	r3, r2
 800685c:	009b      	lsls	r3, r3, #2
 800685e:	4413      	add	r3, r2
 8006860:	009b      	lsls	r3, r3, #2
 8006862:	440b      	add	r3, r1
 8006864:	331c      	adds	r3, #28
 8006866:	681a      	ldr	r2, [r3, #0]
 8006868:	78f9      	ldrb	r1, [r7, #3]
 800686a:	68b8      	ldr	r0, [r7, #8]
 800686c:	460b      	mov	r3, r1
 800686e:	009b      	lsls	r3, r3, #2
 8006870:	440b      	add	r3, r1
 8006872:	00db      	lsls	r3, r3, #3
 8006874:	4403      	add	r3, r0
 8006876:	3338      	adds	r3, #56	; 0x38
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	fbb2 f1f3 	udiv	r1, r2, r3
 800687e:	fb01 f303 	mul.w	r3, r1, r3
 8006882:	1ad3      	subs	r3, r2, r3
 8006884:	2b00      	cmp	r3, #0
 8006886:	d110      	bne.n	80068aa <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006888:	78fa      	ldrb	r2, [r7, #3]
 800688a:	6879      	ldr	r1, [r7, #4]
 800688c:	4613      	mov	r3, r2
 800688e:	009b      	lsls	r3, r3, #2
 8006890:	4413      	add	r3, r2
 8006892:	009b      	lsls	r3, r3, #2
 8006894:	440b      	add	r3, r1
 8006896:	331c      	adds	r3, #28
 8006898:	2200      	movs	r2, #0
 800689a:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800689c:	78f9      	ldrb	r1, [r7, #3]
 800689e:	2300      	movs	r3, #0
 80068a0:	2200      	movs	r2, #0
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f001 fdcd 	bl	8008442 <USBD_LL_Transmit>
 80068a8:	e003      	b.n	80068b2 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2200      	movs	r2, #0
 80068ae:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80068b2:	2300      	movs	r3, #0
 80068b4:	e000      	b.n	80068b8 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80068b6:	2302      	movs	r3, #2
  }
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3710      	adds	r7, #16
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}

080068c0 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b084      	sub	sp, #16
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
 80068c8:	460b      	mov	r3, r1
 80068ca:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068d2:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80068d4:	78fb      	ldrb	r3, [r7, #3]
 80068d6:	4619      	mov	r1, r3
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f001 fdf8 	bl	80084ce <USBD_LL_GetRxDataSize>
 80068de:	4602      	mov	r2, r0
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d00d      	beq.n	800690c <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80068f6:	68db      	ldr	r3, [r3, #12]
 80068f8:	68fa      	ldr	r2, [r7, #12]
 80068fa:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80068fe:	68fa      	ldr	r2, [r7, #12]
 8006900:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006904:	4611      	mov	r1, r2
 8006906:	4798      	blx	r3

    return USBD_OK;
 8006908:	2300      	movs	r3, #0
 800690a:	e000      	b.n	800690e <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800690c:	2302      	movs	r3, #2
  }
}
 800690e:	4618      	mov	r0, r3
 8006910:	3710      	adds	r7, #16
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}

08006916 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006916:	b580      	push	{r7, lr}
 8006918:	b084      	sub	sp, #16
 800691a:	af00      	add	r7, sp, #0
 800691c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006924:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800692c:	2b00      	cmp	r3, #0
 800692e:	d015      	beq.n	800695c <USBD_CDC_EP0_RxReady+0x46>
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006936:	2bff      	cmp	r3, #255	; 0xff
 8006938:	d010      	beq.n	800695c <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006940:	689b      	ldr	r3, [r3, #8]
 8006942:	68fa      	ldr	r2, [r7, #12]
 8006944:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006948:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800694a:	68fa      	ldr	r2, [r7, #12]
 800694c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006950:	b292      	uxth	r2, r2
 8006952:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	22ff      	movs	r2, #255	; 0xff
 8006958:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800695c:	2300      	movs	r3, #0
}
 800695e:	4618      	mov	r0, r3
 8006960:	3710      	adds	r7, #16
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}
	...

08006968 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006968:	b480      	push	{r7}
 800696a:	b083      	sub	sp, #12
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2243      	movs	r2, #67	; 0x43
 8006974:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006976:	4b03      	ldr	r3, [pc, #12]	; (8006984 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006978:	4618      	mov	r0, r3
 800697a:	370c      	adds	r7, #12
 800697c:	46bd      	mov	sp, r7
 800697e:	bc80      	pop	{r7}
 8006980:	4770      	bx	lr
 8006982:	bf00      	nop
 8006984:	20000094 	.word	0x20000094

08006988 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006988:	b480      	push	{r7}
 800698a:	b083      	sub	sp, #12
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2243      	movs	r2, #67	; 0x43
 8006994:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006996:	4b03      	ldr	r3, [pc, #12]	; (80069a4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006998:	4618      	mov	r0, r3
 800699a:	370c      	adds	r7, #12
 800699c:	46bd      	mov	sp, r7
 800699e:	bc80      	pop	{r7}
 80069a0:	4770      	bx	lr
 80069a2:	bf00      	nop
 80069a4:	20000050 	.word	0x20000050

080069a8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b083      	sub	sp, #12
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2243      	movs	r2, #67	; 0x43
 80069b4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80069b6:	4b03      	ldr	r3, [pc, #12]	; (80069c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	370c      	adds	r7, #12
 80069bc:	46bd      	mov	sp, r7
 80069be:	bc80      	pop	{r7}
 80069c0:	4770      	bx	lr
 80069c2:	bf00      	nop
 80069c4:	200000d8 	.word	0x200000d8

080069c8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b083      	sub	sp, #12
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	220a      	movs	r2, #10
 80069d4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80069d6:	4b03      	ldr	r3, [pc, #12]	; (80069e4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80069d8:	4618      	mov	r0, r3
 80069da:	370c      	adds	r7, #12
 80069dc:	46bd      	mov	sp, r7
 80069de:	bc80      	pop	{r7}
 80069e0:	4770      	bx	lr
 80069e2:	bf00      	nop
 80069e4:	2000000c 	.word	0x2000000c

080069e8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b085      	sub	sp, #20
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80069f2:	2302      	movs	r3, #2
 80069f4:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d005      	beq.n	8006a08 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	683a      	ldr	r2, [r7, #0]
 8006a00:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8006a04:	2300      	movs	r3, #0
 8006a06:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3714      	adds	r7, #20
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bc80      	pop	{r7}
 8006a12:	4770      	bx	lr

08006a14 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b087      	sub	sp, #28
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	60f8      	str	r0, [r7, #12]
 8006a1c:	60b9      	str	r1, [r7, #8]
 8006a1e:	4613      	mov	r3, r2
 8006a20:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a28:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	68ba      	ldr	r2, [r7, #8]
 8006a2e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006a32:	88fa      	ldrh	r2, [r7, #6]
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006a3a:	2300      	movs	r3, #0
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	371c      	adds	r7, #28
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bc80      	pop	{r7}
 8006a44:	4770      	bx	lr

08006a46 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006a46:	b480      	push	{r7}
 8006a48:	b085      	sub	sp, #20
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	6078      	str	r0, [r7, #4]
 8006a4e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a56:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	683a      	ldr	r2, [r7, #0]
 8006a5c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006a60:	2300      	movs	r3, #0
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3714      	adds	r7, #20
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bc80      	pop	{r7}
 8006a6a:	4770      	bx	lr

08006a6c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b084      	sub	sp, #16
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a7a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d01c      	beq.n	8006ac0 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d115      	bne.n	8006abc <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2201      	movs	r2, #1
 8006a94:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006aae:	b29b      	uxth	r3, r3
 8006ab0:	2181      	movs	r1, #129	; 0x81
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f001 fcc5 	bl	8008442 <USBD_LL_Transmit>

      return USBD_OK;
 8006ab8:	2300      	movs	r3, #0
 8006aba:	e002      	b.n	8006ac2 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8006abc:	2301      	movs	r3, #1
 8006abe:	e000      	b.n	8006ac2 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8006ac0:	2302      	movs	r3, #2
  }
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3710      	adds	r7, #16
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}

08006aca <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006aca:	b580      	push	{r7, lr}
 8006acc:	b084      	sub	sp, #16
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ad8:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d017      	beq.n	8006b14 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	7c1b      	ldrb	r3, [r3, #16]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d109      	bne.n	8006b00 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006af2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006af6:	2101      	movs	r1, #1
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f001 fcc5 	bl	8008488 <USBD_LL_PrepareReceive>
 8006afe:	e007      	b.n	8006b10 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006b06:	2340      	movs	r3, #64	; 0x40
 8006b08:	2101      	movs	r1, #1
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f001 fcbc 	bl	8008488 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006b10:	2300      	movs	r3, #0
 8006b12:	e000      	b.n	8006b16 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006b14:	2302      	movs	r3, #2
  }
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3710      	adds	r7, #16
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}

08006b1e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006b1e:	b580      	push	{r7, lr}
 8006b20:	b084      	sub	sp, #16
 8006b22:	af00      	add	r7, sp, #0
 8006b24:	60f8      	str	r0, [r7, #12]
 8006b26:	60b9      	str	r1, [r7, #8]
 8006b28:	4613      	mov	r3, r2
 8006b2a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d101      	bne.n	8006b36 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006b32:	2302      	movs	r3, #2
 8006b34:	e01a      	b.n	8006b6c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d003      	beq.n	8006b48 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2200      	movs	r2, #0
 8006b44:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d003      	beq.n	8006b56 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	68ba      	ldr	r2, [r7, #8]
 8006b52:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2201      	movs	r2, #1
 8006b5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	79fa      	ldrb	r2, [r7, #7]
 8006b62:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006b64:	68f8      	ldr	r0, [r7, #12]
 8006b66:	f001 fb29 	bl	80081bc <USBD_LL_Init>

  return USBD_OK;
 8006b6a:	2300      	movs	r3, #0
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3710      	adds	r7, #16
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}

08006b74 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b085      	sub	sp, #20
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
 8006b7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d006      	beq.n	8006b96 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	683a      	ldr	r2, [r7, #0]
 8006b8c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006b90:	2300      	movs	r3, #0
 8006b92:	73fb      	strb	r3, [r7, #15]
 8006b94:	e001      	b.n	8006b9a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006b96:	2302      	movs	r3, #2
 8006b98:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006b9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3714      	adds	r7, #20
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bc80      	pop	{r7}
 8006ba4:	4770      	bx	lr

08006ba6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006ba6:	b580      	push	{r7, lr}
 8006ba8:	b082      	sub	sp, #8
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f001 fb5e 	bl	8008270 <USBD_LL_Start>

  return USBD_OK;
 8006bb4:	2300      	movs	r3, #0
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3708      	adds	r7, #8
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}

08006bbe <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006bbe:	b480      	push	{r7}
 8006bc0:	b083      	sub	sp, #12
 8006bc2:	af00      	add	r7, sp, #0
 8006bc4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006bc6:	2300      	movs	r3, #0
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	370c      	adds	r7, #12
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bc80      	pop	{r7}
 8006bd0:	4770      	bx	lr

08006bd2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006bd2:	b580      	push	{r7, lr}
 8006bd4:	b084      	sub	sp, #16
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	6078      	str	r0, [r7, #4]
 8006bda:	460b      	mov	r3, r1
 8006bdc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006bde:	2302      	movs	r3, #2
 8006be0:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d00c      	beq.n	8006c06 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	78fa      	ldrb	r2, [r7, #3]
 8006bf6:	4611      	mov	r1, r2
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	4798      	blx	r3
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d101      	bne.n	8006c06 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006c02:	2300      	movs	r3, #0
 8006c04:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006c06:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3710      	adds	r7, #16
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}

08006c10 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b082      	sub	sp, #8
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	460b      	mov	r3, r1
 8006c1a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	78fa      	ldrb	r2, [r7, #3]
 8006c26:	4611      	mov	r1, r2
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	4798      	blx	r3

  return USBD_OK;
 8006c2c:	2300      	movs	r3, #0
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3708      	adds	r7, #8
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}

08006c36 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006c36:	b580      	push	{r7, lr}
 8006c38:	b082      	sub	sp, #8
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	6078      	str	r0, [r7, #4]
 8006c3e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006c46:	6839      	ldr	r1, [r7, #0]
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f000 fed8 	bl	80079fe <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2201      	movs	r2, #1
 8006c52:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006c5c:	461a      	mov	r2, r3
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006c6a:	f003 031f 	and.w	r3, r3, #31
 8006c6e:	2b02      	cmp	r3, #2
 8006c70:	d016      	beq.n	8006ca0 <USBD_LL_SetupStage+0x6a>
 8006c72:	2b02      	cmp	r3, #2
 8006c74:	d81c      	bhi.n	8006cb0 <USBD_LL_SetupStage+0x7a>
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d002      	beq.n	8006c80 <USBD_LL_SetupStage+0x4a>
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	d008      	beq.n	8006c90 <USBD_LL_SetupStage+0x5a>
 8006c7e:	e017      	b.n	8006cb0 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006c86:	4619      	mov	r1, r3
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f000 f9cb 	bl	8007024 <USBD_StdDevReq>
      break;
 8006c8e:	e01a      	b.n	8006cc6 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006c96:	4619      	mov	r1, r3
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f000 fa2d 	bl	80070f8 <USBD_StdItfReq>
      break;
 8006c9e:	e012      	b.n	8006cc6 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006ca6:	4619      	mov	r1, r3
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f000 fa6d 	bl	8007188 <USBD_StdEPReq>
      break;
 8006cae:	e00a      	b.n	8006cc6 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006cb6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006cba:	b2db      	uxtb	r3, r3
 8006cbc:	4619      	mov	r1, r3
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f001 fb36 	bl	8008330 <USBD_LL_StallEP>
      break;
 8006cc4:	bf00      	nop
  }

  return USBD_OK;
 8006cc6:	2300      	movs	r3, #0
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3708      	adds	r7, #8
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}

08006cd0 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b086      	sub	sp, #24
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	60f8      	str	r0, [r7, #12]
 8006cd8:	460b      	mov	r3, r1
 8006cda:	607a      	str	r2, [r7, #4]
 8006cdc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006cde:	7afb      	ldrb	r3, [r7, #11]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d14b      	bne.n	8006d7c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006cea:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006cf2:	2b03      	cmp	r3, #3
 8006cf4:	d134      	bne.n	8006d60 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	68da      	ldr	r2, [r3, #12]
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	691b      	ldr	r3, [r3, #16]
 8006cfe:	429a      	cmp	r2, r3
 8006d00:	d919      	bls.n	8006d36 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	68da      	ldr	r2, [r3, #12]
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	691b      	ldr	r3, [r3, #16]
 8006d0a:	1ad2      	subs	r2, r2, r3
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	68da      	ldr	r2, [r3, #12]
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d203      	bcs.n	8006d24 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	e002      	b.n	8006d2a <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006d28:	b29b      	uxth	r3, r3
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	6879      	ldr	r1, [r7, #4]
 8006d2e:	68f8      	ldr	r0, [r7, #12]
 8006d30:	f000 ff57 	bl	8007be2 <USBD_CtlContinueRx>
 8006d34:	e038      	b.n	8006da8 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d3c:	691b      	ldr	r3, [r3, #16]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d00a      	beq.n	8006d58 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006d48:	2b03      	cmp	r3, #3
 8006d4a:	d105      	bne.n	8006d58 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d52:	691b      	ldr	r3, [r3, #16]
 8006d54:	68f8      	ldr	r0, [r7, #12]
 8006d56:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006d58:	68f8      	ldr	r0, [r7, #12]
 8006d5a:	f000 ff54 	bl	8007c06 <USBD_CtlSendStatus>
 8006d5e:	e023      	b.n	8006da8 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006d66:	2b05      	cmp	r3, #5
 8006d68:	d11e      	bne.n	8006da8 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006d72:	2100      	movs	r1, #0
 8006d74:	68f8      	ldr	r0, [r7, #12]
 8006d76:	f001 fadb 	bl	8008330 <USBD_LL_StallEP>
 8006d7a:	e015      	b.n	8006da8 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d82:	699b      	ldr	r3, [r3, #24]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d00d      	beq.n	8006da4 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006d8e:	2b03      	cmp	r3, #3
 8006d90:	d108      	bne.n	8006da4 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d98:	699b      	ldr	r3, [r3, #24]
 8006d9a:	7afa      	ldrb	r2, [r7, #11]
 8006d9c:	4611      	mov	r1, r2
 8006d9e:	68f8      	ldr	r0, [r7, #12]
 8006da0:	4798      	blx	r3
 8006da2:	e001      	b.n	8006da8 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006da4:	2302      	movs	r3, #2
 8006da6:	e000      	b.n	8006daa <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006da8:	2300      	movs	r3, #0
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3718      	adds	r7, #24
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}

08006db2 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006db2:	b580      	push	{r7, lr}
 8006db4:	b086      	sub	sp, #24
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	60f8      	str	r0, [r7, #12]
 8006dba:	460b      	mov	r3, r1
 8006dbc:	607a      	str	r2, [r7, #4]
 8006dbe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006dc0:	7afb      	ldrb	r3, [r7, #11]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d17f      	bne.n	8006ec6 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	3314      	adds	r3, #20
 8006dca:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006dd2:	2b02      	cmp	r3, #2
 8006dd4:	d15c      	bne.n	8006e90 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	68da      	ldr	r2, [r3, #12]
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	691b      	ldr	r3, [r3, #16]
 8006dde:	429a      	cmp	r2, r3
 8006de0:	d915      	bls.n	8006e0e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	68da      	ldr	r2, [r3, #12]
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	691b      	ldr	r3, [r3, #16]
 8006dea:	1ad2      	subs	r2, r2, r3
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	68db      	ldr	r3, [r3, #12]
 8006df4:	b29b      	uxth	r3, r3
 8006df6:	461a      	mov	r2, r3
 8006df8:	6879      	ldr	r1, [r7, #4]
 8006dfa:	68f8      	ldr	r0, [r7, #12]
 8006dfc:	f000 fec1 	bl	8007b82 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006e00:	2300      	movs	r3, #0
 8006e02:	2200      	movs	r2, #0
 8006e04:	2100      	movs	r1, #0
 8006e06:	68f8      	ldr	r0, [r7, #12]
 8006e08:	f001 fb3e 	bl	8008488 <USBD_LL_PrepareReceive>
 8006e0c:	e04e      	b.n	8006eac <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	689b      	ldr	r3, [r3, #8]
 8006e12:	697a      	ldr	r2, [r7, #20]
 8006e14:	6912      	ldr	r2, [r2, #16]
 8006e16:	fbb3 f1f2 	udiv	r1, r3, r2
 8006e1a:	fb01 f202 	mul.w	r2, r1, r2
 8006e1e:	1a9b      	subs	r3, r3, r2
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d11c      	bne.n	8006e5e <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	689a      	ldr	r2, [r3, #8]
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006e2c:	429a      	cmp	r2, r3
 8006e2e:	d316      	bcc.n	8006e5e <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	689a      	ldr	r2, [r3, #8]
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006e3a:	429a      	cmp	r2, r3
 8006e3c:	d20f      	bcs.n	8006e5e <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006e3e:	2200      	movs	r2, #0
 8006e40:	2100      	movs	r1, #0
 8006e42:	68f8      	ldr	r0, [r7, #12]
 8006e44:	f000 fe9d 	bl	8007b82 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006e50:	2300      	movs	r3, #0
 8006e52:	2200      	movs	r2, #0
 8006e54:	2100      	movs	r1, #0
 8006e56:	68f8      	ldr	r0, [r7, #12]
 8006e58:	f001 fb16 	bl	8008488 <USBD_LL_PrepareReceive>
 8006e5c:	e026      	b.n	8006eac <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e64:	68db      	ldr	r3, [r3, #12]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d00a      	beq.n	8006e80 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006e70:	2b03      	cmp	r3, #3
 8006e72:	d105      	bne.n	8006e80 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e7a:	68db      	ldr	r3, [r3, #12]
 8006e7c:	68f8      	ldr	r0, [r7, #12]
 8006e7e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006e80:	2180      	movs	r1, #128	; 0x80
 8006e82:	68f8      	ldr	r0, [r7, #12]
 8006e84:	f001 fa54 	bl	8008330 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006e88:	68f8      	ldr	r0, [r7, #12]
 8006e8a:	f000 fecf 	bl	8007c2c <USBD_CtlReceiveStatus>
 8006e8e:	e00d      	b.n	8006eac <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006e96:	2b04      	cmp	r3, #4
 8006e98:	d004      	beq.n	8006ea4 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d103      	bne.n	8006eac <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006ea4:	2180      	movs	r1, #128	; 0x80
 8006ea6:	68f8      	ldr	r0, [r7, #12]
 8006ea8:	f001 fa42 	bl	8008330 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006eb2:	2b01      	cmp	r3, #1
 8006eb4:	d11d      	bne.n	8006ef2 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006eb6:	68f8      	ldr	r0, [r7, #12]
 8006eb8:	f7ff fe81 	bl	8006bbe <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006ec4:	e015      	b.n	8006ef2 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ecc:	695b      	ldr	r3, [r3, #20]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d00d      	beq.n	8006eee <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006ed8:	2b03      	cmp	r3, #3
 8006eda:	d108      	bne.n	8006eee <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ee2:	695b      	ldr	r3, [r3, #20]
 8006ee4:	7afa      	ldrb	r2, [r7, #11]
 8006ee6:	4611      	mov	r1, r2
 8006ee8:	68f8      	ldr	r0, [r7, #12]
 8006eea:	4798      	blx	r3
 8006eec:	e001      	b.n	8006ef2 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006eee:	2302      	movs	r3, #2
 8006ef0:	e000      	b.n	8006ef4 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006ef2:	2300      	movs	r3, #0
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3718      	adds	r7, #24
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}

08006efc <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b082      	sub	sp, #8
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006f04:	2340      	movs	r3, #64	; 0x40
 8006f06:	2200      	movs	r2, #0
 8006f08:	2100      	movs	r1, #0
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f001 f9cb 	bl	80082a6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2201      	movs	r2, #1
 8006f14:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2240      	movs	r2, #64	; 0x40
 8006f1c:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006f20:	2340      	movs	r3, #64	; 0x40
 8006f22:	2200      	movs	r2, #0
 8006f24:	2180      	movs	r1, #128	; 0x80
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f001 f9bd 	bl	80082a6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2201      	movs	r2, #1
 8006f30:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2240      	movs	r2, #64	; 0x40
 8006f36:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2200      	movs	r2, #0
 8006f44:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2200      	movs	r2, #0
 8006f52:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d009      	beq.n	8006f74 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	687a      	ldr	r2, [r7, #4]
 8006f6a:	6852      	ldr	r2, [r2, #4]
 8006f6c:	b2d2      	uxtb	r2, r2
 8006f6e:	4611      	mov	r1, r2
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	4798      	blx	r3
  }

  return USBD_OK;
 8006f74:	2300      	movs	r3, #0
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3708      	adds	r7, #8
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}

08006f7e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006f7e:	b480      	push	{r7}
 8006f80:	b083      	sub	sp, #12
 8006f82:	af00      	add	r7, sp, #0
 8006f84:	6078      	str	r0, [r7, #4]
 8006f86:	460b      	mov	r3, r1
 8006f88:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	78fa      	ldrb	r2, [r7, #3]
 8006f8e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006f90:	2300      	movs	r3, #0
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	370c      	adds	r7, #12
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bc80      	pop	{r7}
 8006f9a:	4770      	bx	lr

08006f9c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b083      	sub	sp, #12
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2204      	movs	r2, #4
 8006fb4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006fb8:	2300      	movs	r3, #0
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	370c      	adds	r7, #12
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bc80      	pop	{r7}
 8006fc2:	4770      	bx	lr

08006fc4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b083      	sub	sp, #12
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fd2:	2b04      	cmp	r3, #4
 8006fd4:	d105      	bne.n	8006fe2 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006fe2:	2300      	movs	r3, #0
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	370c      	adds	r7, #12
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bc80      	pop	{r7}
 8006fec:	4770      	bx	lr

08006fee <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006fee:	b580      	push	{r7, lr}
 8006ff0:	b082      	sub	sp, #8
 8006ff2:	af00      	add	r7, sp, #0
 8006ff4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ffc:	2b03      	cmp	r3, #3
 8006ffe:	d10b      	bne.n	8007018 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007006:	69db      	ldr	r3, [r3, #28]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d005      	beq.n	8007018 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007012:	69db      	ldr	r3, [r3, #28]
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007018:	2300      	movs	r3, #0
}
 800701a:	4618      	mov	r0, r3
 800701c:	3708      	adds	r7, #8
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
	...

08007024 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b084      	sub	sp, #16
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
 800702c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800702e:	2300      	movs	r3, #0
 8007030:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	781b      	ldrb	r3, [r3, #0]
 8007036:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800703a:	2b40      	cmp	r3, #64	; 0x40
 800703c:	d005      	beq.n	800704a <USBD_StdDevReq+0x26>
 800703e:	2b40      	cmp	r3, #64	; 0x40
 8007040:	d84f      	bhi.n	80070e2 <USBD_StdDevReq+0xbe>
 8007042:	2b00      	cmp	r3, #0
 8007044:	d009      	beq.n	800705a <USBD_StdDevReq+0x36>
 8007046:	2b20      	cmp	r3, #32
 8007048:	d14b      	bne.n	80070e2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007050:	689b      	ldr	r3, [r3, #8]
 8007052:	6839      	ldr	r1, [r7, #0]
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	4798      	blx	r3
      break;
 8007058:	e048      	b.n	80070ec <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	785b      	ldrb	r3, [r3, #1]
 800705e:	2b09      	cmp	r3, #9
 8007060:	d839      	bhi.n	80070d6 <USBD_StdDevReq+0xb2>
 8007062:	a201      	add	r2, pc, #4	; (adr r2, 8007068 <USBD_StdDevReq+0x44>)
 8007064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007068:	080070b9 	.word	0x080070b9
 800706c:	080070cd 	.word	0x080070cd
 8007070:	080070d7 	.word	0x080070d7
 8007074:	080070c3 	.word	0x080070c3
 8007078:	080070d7 	.word	0x080070d7
 800707c:	0800709b 	.word	0x0800709b
 8007080:	08007091 	.word	0x08007091
 8007084:	080070d7 	.word	0x080070d7
 8007088:	080070af 	.word	0x080070af
 800708c:	080070a5 	.word	0x080070a5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007090:	6839      	ldr	r1, [r7, #0]
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f000 f9dc 	bl	8007450 <USBD_GetDescriptor>
          break;
 8007098:	e022      	b.n	80070e0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800709a:	6839      	ldr	r1, [r7, #0]
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f000 fb3f 	bl	8007720 <USBD_SetAddress>
          break;
 80070a2:	e01d      	b.n	80070e0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80070a4:	6839      	ldr	r1, [r7, #0]
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f000 fb7e 	bl	80077a8 <USBD_SetConfig>
          break;
 80070ac:	e018      	b.n	80070e0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80070ae:	6839      	ldr	r1, [r7, #0]
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f000 fc07 	bl	80078c4 <USBD_GetConfig>
          break;
 80070b6:	e013      	b.n	80070e0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80070b8:	6839      	ldr	r1, [r7, #0]
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f000 fc37 	bl	800792e <USBD_GetStatus>
          break;
 80070c0:	e00e      	b.n	80070e0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80070c2:	6839      	ldr	r1, [r7, #0]
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f000 fc65 	bl	8007994 <USBD_SetFeature>
          break;
 80070ca:	e009      	b.n	80070e0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80070cc:	6839      	ldr	r1, [r7, #0]
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f000 fc74 	bl	80079bc <USBD_ClrFeature>
          break;
 80070d4:	e004      	b.n	80070e0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80070d6:	6839      	ldr	r1, [r7, #0]
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f000 fccc 	bl	8007a76 <USBD_CtlError>
          break;
 80070de:	bf00      	nop
      }
      break;
 80070e0:	e004      	b.n	80070ec <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80070e2:	6839      	ldr	r1, [r7, #0]
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f000 fcc6 	bl	8007a76 <USBD_CtlError>
      break;
 80070ea:	bf00      	nop
  }

  return ret;
 80070ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3710      	adds	r7, #16
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}
 80070f6:	bf00      	nop

080070f8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b084      	sub	sp, #16
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007102:	2300      	movs	r3, #0
 8007104:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	781b      	ldrb	r3, [r3, #0]
 800710a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800710e:	2b40      	cmp	r3, #64	; 0x40
 8007110:	d005      	beq.n	800711e <USBD_StdItfReq+0x26>
 8007112:	2b40      	cmp	r3, #64	; 0x40
 8007114:	d82e      	bhi.n	8007174 <USBD_StdItfReq+0x7c>
 8007116:	2b00      	cmp	r3, #0
 8007118:	d001      	beq.n	800711e <USBD_StdItfReq+0x26>
 800711a:	2b20      	cmp	r3, #32
 800711c:	d12a      	bne.n	8007174 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007124:	3b01      	subs	r3, #1
 8007126:	2b02      	cmp	r3, #2
 8007128:	d81d      	bhi.n	8007166 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	889b      	ldrh	r3, [r3, #4]
 800712e:	b2db      	uxtb	r3, r3
 8007130:	2b01      	cmp	r3, #1
 8007132:	d813      	bhi.n	800715c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800713a:	689b      	ldr	r3, [r3, #8]
 800713c:	6839      	ldr	r1, [r7, #0]
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	4798      	blx	r3
 8007142:	4603      	mov	r3, r0
 8007144:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	88db      	ldrh	r3, [r3, #6]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d110      	bne.n	8007170 <USBD_StdItfReq+0x78>
 800714e:	7bfb      	ldrb	r3, [r7, #15]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d10d      	bne.n	8007170 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f000 fd56 	bl	8007c06 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800715a:	e009      	b.n	8007170 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800715c:	6839      	ldr	r1, [r7, #0]
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f000 fc89 	bl	8007a76 <USBD_CtlError>
          break;
 8007164:	e004      	b.n	8007170 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007166:	6839      	ldr	r1, [r7, #0]
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f000 fc84 	bl	8007a76 <USBD_CtlError>
          break;
 800716e:	e000      	b.n	8007172 <USBD_StdItfReq+0x7a>
          break;
 8007170:	bf00      	nop
      }
      break;
 8007172:	e004      	b.n	800717e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007174:	6839      	ldr	r1, [r7, #0]
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f000 fc7d 	bl	8007a76 <USBD_CtlError>
      break;
 800717c:	bf00      	nop
  }

  return USBD_OK;
 800717e:	2300      	movs	r3, #0
}
 8007180:	4618      	mov	r0, r3
 8007182:	3710      	adds	r7, #16
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}

08007188 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b084      	sub	sp, #16
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
 8007190:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007192:	2300      	movs	r3, #0
 8007194:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	889b      	ldrh	r3, [r3, #4]
 800719a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	781b      	ldrb	r3, [r3, #0]
 80071a0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80071a4:	2b40      	cmp	r3, #64	; 0x40
 80071a6:	d007      	beq.n	80071b8 <USBD_StdEPReq+0x30>
 80071a8:	2b40      	cmp	r3, #64	; 0x40
 80071aa:	f200 8146 	bhi.w	800743a <USBD_StdEPReq+0x2b2>
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d00a      	beq.n	80071c8 <USBD_StdEPReq+0x40>
 80071b2:	2b20      	cmp	r3, #32
 80071b4:	f040 8141 	bne.w	800743a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071be:	689b      	ldr	r3, [r3, #8]
 80071c0:	6839      	ldr	r1, [r7, #0]
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	4798      	blx	r3
      break;
 80071c6:	e13d      	b.n	8007444 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	781b      	ldrb	r3, [r3, #0]
 80071cc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80071d0:	2b20      	cmp	r3, #32
 80071d2:	d10a      	bne.n	80071ea <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071da:	689b      	ldr	r3, [r3, #8]
 80071dc:	6839      	ldr	r1, [r7, #0]
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	4798      	blx	r3
 80071e2:	4603      	mov	r3, r0
 80071e4:	73fb      	strb	r3, [r7, #15]

        return ret;
 80071e6:	7bfb      	ldrb	r3, [r7, #15]
 80071e8:	e12d      	b.n	8007446 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	785b      	ldrb	r3, [r3, #1]
 80071ee:	2b03      	cmp	r3, #3
 80071f0:	d007      	beq.n	8007202 <USBD_StdEPReq+0x7a>
 80071f2:	2b03      	cmp	r3, #3
 80071f4:	f300 811b 	bgt.w	800742e <USBD_StdEPReq+0x2a6>
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d072      	beq.n	80072e2 <USBD_StdEPReq+0x15a>
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	d03a      	beq.n	8007276 <USBD_StdEPReq+0xee>
 8007200:	e115      	b.n	800742e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007208:	2b02      	cmp	r3, #2
 800720a:	d002      	beq.n	8007212 <USBD_StdEPReq+0x8a>
 800720c:	2b03      	cmp	r3, #3
 800720e:	d015      	beq.n	800723c <USBD_StdEPReq+0xb4>
 8007210:	e02b      	b.n	800726a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007212:	7bbb      	ldrb	r3, [r7, #14]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d00c      	beq.n	8007232 <USBD_StdEPReq+0xaa>
 8007218:	7bbb      	ldrb	r3, [r7, #14]
 800721a:	2b80      	cmp	r3, #128	; 0x80
 800721c:	d009      	beq.n	8007232 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800721e:	7bbb      	ldrb	r3, [r7, #14]
 8007220:	4619      	mov	r1, r3
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f001 f884 	bl	8008330 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007228:	2180      	movs	r1, #128	; 0x80
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f001 f880 	bl	8008330 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007230:	e020      	b.n	8007274 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007232:	6839      	ldr	r1, [r7, #0]
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f000 fc1e 	bl	8007a76 <USBD_CtlError>
              break;
 800723a:	e01b      	b.n	8007274 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	885b      	ldrh	r3, [r3, #2]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d10e      	bne.n	8007262 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007244:	7bbb      	ldrb	r3, [r7, #14]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d00b      	beq.n	8007262 <USBD_StdEPReq+0xda>
 800724a:	7bbb      	ldrb	r3, [r7, #14]
 800724c:	2b80      	cmp	r3, #128	; 0x80
 800724e:	d008      	beq.n	8007262 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	88db      	ldrh	r3, [r3, #6]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d104      	bne.n	8007262 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007258:	7bbb      	ldrb	r3, [r7, #14]
 800725a:	4619      	mov	r1, r3
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f001 f867 	bl	8008330 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f000 fccf 	bl	8007c06 <USBD_CtlSendStatus>

              break;
 8007268:	e004      	b.n	8007274 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800726a:	6839      	ldr	r1, [r7, #0]
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f000 fc02 	bl	8007a76 <USBD_CtlError>
              break;
 8007272:	bf00      	nop
          }
          break;
 8007274:	e0e0      	b.n	8007438 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800727c:	2b02      	cmp	r3, #2
 800727e:	d002      	beq.n	8007286 <USBD_StdEPReq+0xfe>
 8007280:	2b03      	cmp	r3, #3
 8007282:	d015      	beq.n	80072b0 <USBD_StdEPReq+0x128>
 8007284:	e026      	b.n	80072d4 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007286:	7bbb      	ldrb	r3, [r7, #14]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d00c      	beq.n	80072a6 <USBD_StdEPReq+0x11e>
 800728c:	7bbb      	ldrb	r3, [r7, #14]
 800728e:	2b80      	cmp	r3, #128	; 0x80
 8007290:	d009      	beq.n	80072a6 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007292:	7bbb      	ldrb	r3, [r7, #14]
 8007294:	4619      	mov	r1, r3
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f001 f84a 	bl	8008330 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800729c:	2180      	movs	r1, #128	; 0x80
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f001 f846 	bl	8008330 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80072a4:	e01c      	b.n	80072e0 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80072a6:	6839      	ldr	r1, [r7, #0]
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f000 fbe4 	bl	8007a76 <USBD_CtlError>
              break;
 80072ae:	e017      	b.n	80072e0 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	885b      	ldrh	r3, [r3, #2]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d112      	bne.n	80072de <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80072b8:	7bbb      	ldrb	r3, [r7, #14]
 80072ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d004      	beq.n	80072cc <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80072c2:	7bbb      	ldrb	r3, [r7, #14]
 80072c4:	4619      	mov	r1, r3
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f001 f851 	bl	800836e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f000 fc9a 	bl	8007c06 <USBD_CtlSendStatus>
              }
              break;
 80072d2:	e004      	b.n	80072de <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80072d4:	6839      	ldr	r1, [r7, #0]
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f000 fbcd 	bl	8007a76 <USBD_CtlError>
              break;
 80072dc:	e000      	b.n	80072e0 <USBD_StdEPReq+0x158>
              break;
 80072de:	bf00      	nop
          }
          break;
 80072e0:	e0aa      	b.n	8007438 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072e8:	2b02      	cmp	r3, #2
 80072ea:	d002      	beq.n	80072f2 <USBD_StdEPReq+0x16a>
 80072ec:	2b03      	cmp	r3, #3
 80072ee:	d032      	beq.n	8007356 <USBD_StdEPReq+0x1ce>
 80072f0:	e097      	b.n	8007422 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80072f2:	7bbb      	ldrb	r3, [r7, #14]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d007      	beq.n	8007308 <USBD_StdEPReq+0x180>
 80072f8:	7bbb      	ldrb	r3, [r7, #14]
 80072fa:	2b80      	cmp	r3, #128	; 0x80
 80072fc:	d004      	beq.n	8007308 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80072fe:	6839      	ldr	r1, [r7, #0]
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f000 fbb8 	bl	8007a76 <USBD_CtlError>
                break;
 8007306:	e091      	b.n	800742c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007308:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800730c:	2b00      	cmp	r3, #0
 800730e:	da0b      	bge.n	8007328 <USBD_StdEPReq+0x1a0>
 8007310:	7bbb      	ldrb	r3, [r7, #14]
 8007312:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007316:	4613      	mov	r3, r2
 8007318:	009b      	lsls	r3, r3, #2
 800731a:	4413      	add	r3, r2
 800731c:	009b      	lsls	r3, r3, #2
 800731e:	3310      	adds	r3, #16
 8007320:	687a      	ldr	r2, [r7, #4]
 8007322:	4413      	add	r3, r2
 8007324:	3304      	adds	r3, #4
 8007326:	e00b      	b.n	8007340 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007328:	7bbb      	ldrb	r3, [r7, #14]
 800732a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800732e:	4613      	mov	r3, r2
 8007330:	009b      	lsls	r3, r3, #2
 8007332:	4413      	add	r3, r2
 8007334:	009b      	lsls	r3, r3, #2
 8007336:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800733a:	687a      	ldr	r2, [r7, #4]
 800733c:	4413      	add	r3, r2
 800733e:	3304      	adds	r3, #4
 8007340:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	2200      	movs	r2, #0
 8007346:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	2202      	movs	r2, #2
 800734c:	4619      	mov	r1, r3
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f000 fbfb 	bl	8007b4a <USBD_CtlSendData>
              break;
 8007354:	e06a      	b.n	800742c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007356:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800735a:	2b00      	cmp	r3, #0
 800735c:	da11      	bge.n	8007382 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800735e:	7bbb      	ldrb	r3, [r7, #14]
 8007360:	f003 020f 	and.w	r2, r3, #15
 8007364:	6879      	ldr	r1, [r7, #4]
 8007366:	4613      	mov	r3, r2
 8007368:	009b      	lsls	r3, r3, #2
 800736a:	4413      	add	r3, r2
 800736c:	009b      	lsls	r3, r3, #2
 800736e:	440b      	add	r3, r1
 8007370:	3318      	adds	r3, #24
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d117      	bne.n	80073a8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007378:	6839      	ldr	r1, [r7, #0]
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 fb7b 	bl	8007a76 <USBD_CtlError>
                  break;
 8007380:	e054      	b.n	800742c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007382:	7bbb      	ldrb	r3, [r7, #14]
 8007384:	f003 020f 	and.w	r2, r3, #15
 8007388:	6879      	ldr	r1, [r7, #4]
 800738a:	4613      	mov	r3, r2
 800738c:	009b      	lsls	r3, r3, #2
 800738e:	4413      	add	r3, r2
 8007390:	009b      	lsls	r3, r3, #2
 8007392:	440b      	add	r3, r1
 8007394:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d104      	bne.n	80073a8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800739e:	6839      	ldr	r1, [r7, #0]
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f000 fb68 	bl	8007a76 <USBD_CtlError>
                  break;
 80073a6:	e041      	b.n	800742c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80073a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	da0b      	bge.n	80073c8 <USBD_StdEPReq+0x240>
 80073b0:	7bbb      	ldrb	r3, [r7, #14]
 80073b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80073b6:	4613      	mov	r3, r2
 80073b8:	009b      	lsls	r3, r3, #2
 80073ba:	4413      	add	r3, r2
 80073bc:	009b      	lsls	r3, r3, #2
 80073be:	3310      	adds	r3, #16
 80073c0:	687a      	ldr	r2, [r7, #4]
 80073c2:	4413      	add	r3, r2
 80073c4:	3304      	adds	r3, #4
 80073c6:	e00b      	b.n	80073e0 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80073c8:	7bbb      	ldrb	r3, [r7, #14]
 80073ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80073ce:	4613      	mov	r3, r2
 80073d0:	009b      	lsls	r3, r3, #2
 80073d2:	4413      	add	r3, r2
 80073d4:	009b      	lsls	r3, r3, #2
 80073d6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80073da:	687a      	ldr	r2, [r7, #4]
 80073dc:	4413      	add	r3, r2
 80073de:	3304      	adds	r3, #4
 80073e0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80073e2:	7bbb      	ldrb	r3, [r7, #14]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d002      	beq.n	80073ee <USBD_StdEPReq+0x266>
 80073e8:	7bbb      	ldrb	r3, [r7, #14]
 80073ea:	2b80      	cmp	r3, #128	; 0x80
 80073ec:	d103      	bne.n	80073f6 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	2200      	movs	r2, #0
 80073f2:	601a      	str	r2, [r3, #0]
 80073f4:	e00e      	b.n	8007414 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80073f6:	7bbb      	ldrb	r3, [r7, #14]
 80073f8:	4619      	mov	r1, r3
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f000 ffd6 	bl	80083ac <USBD_LL_IsStallEP>
 8007400:	4603      	mov	r3, r0
 8007402:	2b00      	cmp	r3, #0
 8007404:	d003      	beq.n	800740e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	2201      	movs	r2, #1
 800740a:	601a      	str	r2, [r3, #0]
 800740c:	e002      	b.n	8007414 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	2200      	movs	r2, #0
 8007412:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	2202      	movs	r2, #2
 8007418:	4619      	mov	r1, r3
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f000 fb95 	bl	8007b4a <USBD_CtlSendData>
              break;
 8007420:	e004      	b.n	800742c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007422:	6839      	ldr	r1, [r7, #0]
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f000 fb26 	bl	8007a76 <USBD_CtlError>
              break;
 800742a:	bf00      	nop
          }
          break;
 800742c:	e004      	b.n	8007438 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800742e:	6839      	ldr	r1, [r7, #0]
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f000 fb20 	bl	8007a76 <USBD_CtlError>
          break;
 8007436:	bf00      	nop
      }
      break;
 8007438:	e004      	b.n	8007444 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800743a:	6839      	ldr	r1, [r7, #0]
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f000 fb1a 	bl	8007a76 <USBD_CtlError>
      break;
 8007442:	bf00      	nop
  }

  return ret;
 8007444:	7bfb      	ldrb	r3, [r7, #15]
}
 8007446:	4618      	mov	r0, r3
 8007448:	3710      	adds	r7, #16
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}
	...

08007450 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b084      	sub	sp, #16
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
 8007458:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800745a:	2300      	movs	r3, #0
 800745c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800745e:	2300      	movs	r3, #0
 8007460:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007462:	2300      	movs	r3, #0
 8007464:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	885b      	ldrh	r3, [r3, #2]
 800746a:	0a1b      	lsrs	r3, r3, #8
 800746c:	b29b      	uxth	r3, r3
 800746e:	3b01      	subs	r3, #1
 8007470:	2b06      	cmp	r3, #6
 8007472:	f200 8128 	bhi.w	80076c6 <USBD_GetDescriptor+0x276>
 8007476:	a201      	add	r2, pc, #4	; (adr r2, 800747c <USBD_GetDescriptor+0x2c>)
 8007478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800747c:	08007499 	.word	0x08007499
 8007480:	080074b1 	.word	0x080074b1
 8007484:	080074f1 	.word	0x080074f1
 8007488:	080076c7 	.word	0x080076c7
 800748c:	080076c7 	.word	0x080076c7
 8007490:	08007667 	.word	0x08007667
 8007494:	08007693 	.word	0x08007693
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	687a      	ldr	r2, [r7, #4]
 80074a2:	7c12      	ldrb	r2, [r2, #16]
 80074a4:	f107 0108 	add.w	r1, r7, #8
 80074a8:	4610      	mov	r0, r2
 80074aa:	4798      	blx	r3
 80074ac:	60f8      	str	r0, [r7, #12]
      break;
 80074ae:	e112      	b.n	80076d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	7c1b      	ldrb	r3, [r3, #16]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d10d      	bne.n	80074d4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074c0:	f107 0208 	add.w	r2, r7, #8
 80074c4:	4610      	mov	r0, r2
 80074c6:	4798      	blx	r3
 80074c8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	3301      	adds	r3, #1
 80074ce:	2202      	movs	r2, #2
 80074d0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80074d2:	e100      	b.n	80076d6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074dc:	f107 0208 	add.w	r2, r7, #8
 80074e0:	4610      	mov	r0, r2
 80074e2:	4798      	blx	r3
 80074e4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	3301      	adds	r3, #1
 80074ea:	2202      	movs	r2, #2
 80074ec:	701a      	strb	r2, [r3, #0]
      break;
 80074ee:	e0f2      	b.n	80076d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	885b      	ldrh	r3, [r3, #2]
 80074f4:	b2db      	uxtb	r3, r3
 80074f6:	2b05      	cmp	r3, #5
 80074f8:	f200 80ac 	bhi.w	8007654 <USBD_GetDescriptor+0x204>
 80074fc:	a201      	add	r2, pc, #4	; (adr r2, 8007504 <USBD_GetDescriptor+0xb4>)
 80074fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007502:	bf00      	nop
 8007504:	0800751d 	.word	0x0800751d
 8007508:	08007551 	.word	0x08007551
 800750c:	08007585 	.word	0x08007585
 8007510:	080075b9 	.word	0x080075b9
 8007514:	080075ed 	.word	0x080075ed
 8007518:	08007621 	.word	0x08007621
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d00b      	beq.n	8007540 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800752e:	685b      	ldr	r3, [r3, #4]
 8007530:	687a      	ldr	r2, [r7, #4]
 8007532:	7c12      	ldrb	r2, [r2, #16]
 8007534:	f107 0108 	add.w	r1, r7, #8
 8007538:	4610      	mov	r0, r2
 800753a:	4798      	blx	r3
 800753c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800753e:	e091      	b.n	8007664 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007540:	6839      	ldr	r1, [r7, #0]
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f000 fa97 	bl	8007a76 <USBD_CtlError>
            err++;
 8007548:	7afb      	ldrb	r3, [r7, #11]
 800754a:	3301      	adds	r3, #1
 800754c:	72fb      	strb	r3, [r7, #11]
          break;
 800754e:	e089      	b.n	8007664 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007556:	689b      	ldr	r3, [r3, #8]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d00b      	beq.n	8007574 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007562:	689b      	ldr	r3, [r3, #8]
 8007564:	687a      	ldr	r2, [r7, #4]
 8007566:	7c12      	ldrb	r2, [r2, #16]
 8007568:	f107 0108 	add.w	r1, r7, #8
 800756c:	4610      	mov	r0, r2
 800756e:	4798      	blx	r3
 8007570:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007572:	e077      	b.n	8007664 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007574:	6839      	ldr	r1, [r7, #0]
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f000 fa7d 	bl	8007a76 <USBD_CtlError>
            err++;
 800757c:	7afb      	ldrb	r3, [r7, #11]
 800757e:	3301      	adds	r3, #1
 8007580:	72fb      	strb	r3, [r7, #11]
          break;
 8007582:	e06f      	b.n	8007664 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800758a:	68db      	ldr	r3, [r3, #12]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d00b      	beq.n	80075a8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007596:	68db      	ldr	r3, [r3, #12]
 8007598:	687a      	ldr	r2, [r7, #4]
 800759a:	7c12      	ldrb	r2, [r2, #16]
 800759c:	f107 0108 	add.w	r1, r7, #8
 80075a0:	4610      	mov	r0, r2
 80075a2:	4798      	blx	r3
 80075a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075a6:	e05d      	b.n	8007664 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80075a8:	6839      	ldr	r1, [r7, #0]
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f000 fa63 	bl	8007a76 <USBD_CtlError>
            err++;
 80075b0:	7afb      	ldrb	r3, [r7, #11]
 80075b2:	3301      	adds	r3, #1
 80075b4:	72fb      	strb	r3, [r7, #11]
          break;
 80075b6:	e055      	b.n	8007664 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80075be:	691b      	ldr	r3, [r3, #16]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d00b      	beq.n	80075dc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80075ca:	691b      	ldr	r3, [r3, #16]
 80075cc:	687a      	ldr	r2, [r7, #4]
 80075ce:	7c12      	ldrb	r2, [r2, #16]
 80075d0:	f107 0108 	add.w	r1, r7, #8
 80075d4:	4610      	mov	r0, r2
 80075d6:	4798      	blx	r3
 80075d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075da:	e043      	b.n	8007664 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80075dc:	6839      	ldr	r1, [r7, #0]
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f000 fa49 	bl	8007a76 <USBD_CtlError>
            err++;
 80075e4:	7afb      	ldrb	r3, [r7, #11]
 80075e6:	3301      	adds	r3, #1
 80075e8:	72fb      	strb	r3, [r7, #11]
          break;
 80075ea:	e03b      	b.n	8007664 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80075f2:	695b      	ldr	r3, [r3, #20]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d00b      	beq.n	8007610 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80075fe:	695b      	ldr	r3, [r3, #20]
 8007600:	687a      	ldr	r2, [r7, #4]
 8007602:	7c12      	ldrb	r2, [r2, #16]
 8007604:	f107 0108 	add.w	r1, r7, #8
 8007608:	4610      	mov	r0, r2
 800760a:	4798      	blx	r3
 800760c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800760e:	e029      	b.n	8007664 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007610:	6839      	ldr	r1, [r7, #0]
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f000 fa2f 	bl	8007a76 <USBD_CtlError>
            err++;
 8007618:	7afb      	ldrb	r3, [r7, #11]
 800761a:	3301      	adds	r3, #1
 800761c:	72fb      	strb	r3, [r7, #11]
          break;
 800761e:	e021      	b.n	8007664 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007626:	699b      	ldr	r3, [r3, #24]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d00b      	beq.n	8007644 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007632:	699b      	ldr	r3, [r3, #24]
 8007634:	687a      	ldr	r2, [r7, #4]
 8007636:	7c12      	ldrb	r2, [r2, #16]
 8007638:	f107 0108 	add.w	r1, r7, #8
 800763c:	4610      	mov	r0, r2
 800763e:	4798      	blx	r3
 8007640:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007642:	e00f      	b.n	8007664 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007644:	6839      	ldr	r1, [r7, #0]
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f000 fa15 	bl	8007a76 <USBD_CtlError>
            err++;
 800764c:	7afb      	ldrb	r3, [r7, #11]
 800764e:	3301      	adds	r3, #1
 8007650:	72fb      	strb	r3, [r7, #11]
          break;
 8007652:	e007      	b.n	8007664 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007654:	6839      	ldr	r1, [r7, #0]
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f000 fa0d 	bl	8007a76 <USBD_CtlError>
          err++;
 800765c:	7afb      	ldrb	r3, [r7, #11]
 800765e:	3301      	adds	r3, #1
 8007660:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007662:	e038      	b.n	80076d6 <USBD_GetDescriptor+0x286>
 8007664:	e037      	b.n	80076d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	7c1b      	ldrb	r3, [r3, #16]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d109      	bne.n	8007682 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007676:	f107 0208 	add.w	r2, r7, #8
 800767a:	4610      	mov	r0, r2
 800767c:	4798      	blx	r3
 800767e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007680:	e029      	b.n	80076d6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007682:	6839      	ldr	r1, [r7, #0]
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f000 f9f6 	bl	8007a76 <USBD_CtlError>
        err++;
 800768a:	7afb      	ldrb	r3, [r7, #11]
 800768c:	3301      	adds	r3, #1
 800768e:	72fb      	strb	r3, [r7, #11]
      break;
 8007690:	e021      	b.n	80076d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	7c1b      	ldrb	r3, [r3, #16]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d10d      	bne.n	80076b6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076a2:	f107 0208 	add.w	r2, r7, #8
 80076a6:	4610      	mov	r0, r2
 80076a8:	4798      	blx	r3
 80076aa:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	3301      	adds	r3, #1
 80076b0:	2207      	movs	r2, #7
 80076b2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80076b4:	e00f      	b.n	80076d6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80076b6:	6839      	ldr	r1, [r7, #0]
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f000 f9dc 	bl	8007a76 <USBD_CtlError>
        err++;
 80076be:	7afb      	ldrb	r3, [r7, #11]
 80076c0:	3301      	adds	r3, #1
 80076c2:	72fb      	strb	r3, [r7, #11]
      break;
 80076c4:	e007      	b.n	80076d6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80076c6:	6839      	ldr	r1, [r7, #0]
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f000 f9d4 	bl	8007a76 <USBD_CtlError>
      err++;
 80076ce:	7afb      	ldrb	r3, [r7, #11]
 80076d0:	3301      	adds	r3, #1
 80076d2:	72fb      	strb	r3, [r7, #11]
      break;
 80076d4:	bf00      	nop
  }

  if (err != 0U)
 80076d6:	7afb      	ldrb	r3, [r7, #11]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d11c      	bne.n	8007716 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80076dc:	893b      	ldrh	r3, [r7, #8]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d011      	beq.n	8007706 <USBD_GetDescriptor+0x2b6>
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	88db      	ldrh	r3, [r3, #6]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d00d      	beq.n	8007706 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	88da      	ldrh	r2, [r3, #6]
 80076ee:	893b      	ldrh	r3, [r7, #8]
 80076f0:	4293      	cmp	r3, r2
 80076f2:	bf28      	it	cs
 80076f4:	4613      	movcs	r3, r2
 80076f6:	b29b      	uxth	r3, r3
 80076f8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80076fa:	893b      	ldrh	r3, [r7, #8]
 80076fc:	461a      	mov	r2, r3
 80076fe:	68f9      	ldr	r1, [r7, #12]
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f000 fa22 	bl	8007b4a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	88db      	ldrh	r3, [r3, #6]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d104      	bne.n	8007718 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f000 fa79 	bl	8007c06 <USBD_CtlSendStatus>
 8007714:	e000      	b.n	8007718 <USBD_GetDescriptor+0x2c8>
    return;
 8007716:	bf00      	nop
    }
  }
}
 8007718:	3710      	adds	r7, #16
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}
 800771e:	bf00      	nop

08007720 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b084      	sub	sp, #16
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
 8007728:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	889b      	ldrh	r3, [r3, #4]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d130      	bne.n	8007794 <USBD_SetAddress+0x74>
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	88db      	ldrh	r3, [r3, #6]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d12c      	bne.n	8007794 <USBD_SetAddress+0x74>
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	885b      	ldrh	r3, [r3, #2]
 800773e:	2b7f      	cmp	r3, #127	; 0x7f
 8007740:	d828      	bhi.n	8007794 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	885b      	ldrh	r3, [r3, #2]
 8007746:	b2db      	uxtb	r3, r3
 8007748:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800774c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007754:	2b03      	cmp	r3, #3
 8007756:	d104      	bne.n	8007762 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007758:	6839      	ldr	r1, [r7, #0]
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f000 f98b 	bl	8007a76 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007760:	e01d      	b.n	800779e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	7bfa      	ldrb	r2, [r7, #15]
 8007766:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800776a:	7bfb      	ldrb	r3, [r7, #15]
 800776c:	4619      	mov	r1, r3
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f000 fe48 	bl	8008404 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f000 fa46 	bl	8007c06 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800777a:	7bfb      	ldrb	r3, [r7, #15]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d004      	beq.n	800778a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2202      	movs	r2, #2
 8007784:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007788:	e009      	b.n	800779e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2201      	movs	r2, #1
 800778e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007792:	e004      	b.n	800779e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007794:	6839      	ldr	r1, [r7, #0]
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f000 f96d 	bl	8007a76 <USBD_CtlError>
  }
}
 800779c:	bf00      	nop
 800779e:	bf00      	nop
 80077a0:	3710      	adds	r7, #16
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}
	...

080077a8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b082      	sub	sp, #8
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
 80077b0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	885b      	ldrh	r3, [r3, #2]
 80077b6:	b2da      	uxtb	r2, r3
 80077b8:	4b41      	ldr	r3, [pc, #260]	; (80078c0 <USBD_SetConfig+0x118>)
 80077ba:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80077bc:	4b40      	ldr	r3, [pc, #256]	; (80078c0 <USBD_SetConfig+0x118>)
 80077be:	781b      	ldrb	r3, [r3, #0]
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d904      	bls.n	80077ce <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80077c4:	6839      	ldr	r1, [r7, #0]
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f000 f955 	bl	8007a76 <USBD_CtlError>
 80077cc:	e075      	b.n	80078ba <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077d4:	2b02      	cmp	r3, #2
 80077d6:	d002      	beq.n	80077de <USBD_SetConfig+0x36>
 80077d8:	2b03      	cmp	r3, #3
 80077da:	d023      	beq.n	8007824 <USBD_SetConfig+0x7c>
 80077dc:	e062      	b.n	80078a4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80077de:	4b38      	ldr	r3, [pc, #224]	; (80078c0 <USBD_SetConfig+0x118>)
 80077e0:	781b      	ldrb	r3, [r3, #0]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d01a      	beq.n	800781c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80077e6:	4b36      	ldr	r3, [pc, #216]	; (80078c0 <USBD_SetConfig+0x118>)
 80077e8:	781b      	ldrb	r3, [r3, #0]
 80077ea:	461a      	mov	r2, r3
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2203      	movs	r2, #3
 80077f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80077f8:	4b31      	ldr	r3, [pc, #196]	; (80078c0 <USBD_SetConfig+0x118>)
 80077fa:	781b      	ldrb	r3, [r3, #0]
 80077fc:	4619      	mov	r1, r3
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f7ff f9e7 	bl	8006bd2 <USBD_SetClassConfig>
 8007804:	4603      	mov	r3, r0
 8007806:	2b02      	cmp	r3, #2
 8007808:	d104      	bne.n	8007814 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800780a:	6839      	ldr	r1, [r7, #0]
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f000 f932 	bl	8007a76 <USBD_CtlError>
            return;
 8007812:	e052      	b.n	80078ba <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f000 f9f6 	bl	8007c06 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800781a:	e04e      	b.n	80078ba <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f000 f9f2 	bl	8007c06 <USBD_CtlSendStatus>
        break;
 8007822:	e04a      	b.n	80078ba <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007824:	4b26      	ldr	r3, [pc, #152]	; (80078c0 <USBD_SetConfig+0x118>)
 8007826:	781b      	ldrb	r3, [r3, #0]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d112      	bne.n	8007852 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2202      	movs	r2, #2
 8007830:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007834:	4b22      	ldr	r3, [pc, #136]	; (80078c0 <USBD_SetConfig+0x118>)
 8007836:	781b      	ldrb	r3, [r3, #0]
 8007838:	461a      	mov	r2, r3
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800783e:	4b20      	ldr	r3, [pc, #128]	; (80078c0 <USBD_SetConfig+0x118>)
 8007840:	781b      	ldrb	r3, [r3, #0]
 8007842:	4619      	mov	r1, r3
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f7ff f9e3 	bl	8006c10 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f000 f9db 	bl	8007c06 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007850:	e033      	b.n	80078ba <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007852:	4b1b      	ldr	r3, [pc, #108]	; (80078c0 <USBD_SetConfig+0x118>)
 8007854:	781b      	ldrb	r3, [r3, #0]
 8007856:	461a      	mov	r2, r3
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	685b      	ldr	r3, [r3, #4]
 800785c:	429a      	cmp	r2, r3
 800785e:	d01d      	beq.n	800789c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	b2db      	uxtb	r3, r3
 8007866:	4619      	mov	r1, r3
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f7ff f9d1 	bl	8006c10 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800786e:	4b14      	ldr	r3, [pc, #80]	; (80078c0 <USBD_SetConfig+0x118>)
 8007870:	781b      	ldrb	r3, [r3, #0]
 8007872:	461a      	mov	r2, r3
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007878:	4b11      	ldr	r3, [pc, #68]	; (80078c0 <USBD_SetConfig+0x118>)
 800787a:	781b      	ldrb	r3, [r3, #0]
 800787c:	4619      	mov	r1, r3
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f7ff f9a7 	bl	8006bd2 <USBD_SetClassConfig>
 8007884:	4603      	mov	r3, r0
 8007886:	2b02      	cmp	r3, #2
 8007888:	d104      	bne.n	8007894 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800788a:	6839      	ldr	r1, [r7, #0]
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f000 f8f2 	bl	8007a76 <USBD_CtlError>
            return;
 8007892:	e012      	b.n	80078ba <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f000 f9b6 	bl	8007c06 <USBD_CtlSendStatus>
        break;
 800789a:	e00e      	b.n	80078ba <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f000 f9b2 	bl	8007c06 <USBD_CtlSendStatus>
        break;
 80078a2:	e00a      	b.n	80078ba <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80078a4:	6839      	ldr	r1, [r7, #0]
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f000 f8e5 	bl	8007a76 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80078ac:	4b04      	ldr	r3, [pc, #16]	; (80078c0 <USBD_SetConfig+0x118>)
 80078ae:	781b      	ldrb	r3, [r3, #0]
 80078b0:	4619      	mov	r1, r3
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f7ff f9ac 	bl	8006c10 <USBD_ClrClassConfig>
        break;
 80078b8:	bf00      	nop
    }
  }
}
 80078ba:	3708      	adds	r7, #8
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}
 80078c0:	20000248 	.word	0x20000248

080078c4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b082      	sub	sp, #8
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
 80078cc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	88db      	ldrh	r3, [r3, #6]
 80078d2:	2b01      	cmp	r3, #1
 80078d4:	d004      	beq.n	80078e0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80078d6:	6839      	ldr	r1, [r7, #0]
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f000 f8cc 	bl	8007a76 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80078de:	e022      	b.n	8007926 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078e6:	2b02      	cmp	r3, #2
 80078e8:	dc02      	bgt.n	80078f0 <USBD_GetConfig+0x2c>
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	dc03      	bgt.n	80078f6 <USBD_GetConfig+0x32>
 80078ee:	e015      	b.n	800791c <USBD_GetConfig+0x58>
 80078f0:	2b03      	cmp	r3, #3
 80078f2:	d00b      	beq.n	800790c <USBD_GetConfig+0x48>
 80078f4:	e012      	b.n	800791c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2200      	movs	r2, #0
 80078fa:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	3308      	adds	r3, #8
 8007900:	2201      	movs	r2, #1
 8007902:	4619      	mov	r1, r3
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f000 f920 	bl	8007b4a <USBD_CtlSendData>
        break;
 800790a:	e00c      	b.n	8007926 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	3304      	adds	r3, #4
 8007910:	2201      	movs	r2, #1
 8007912:	4619      	mov	r1, r3
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f000 f918 	bl	8007b4a <USBD_CtlSendData>
        break;
 800791a:	e004      	b.n	8007926 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800791c:	6839      	ldr	r1, [r7, #0]
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f000 f8a9 	bl	8007a76 <USBD_CtlError>
        break;
 8007924:	bf00      	nop
}
 8007926:	bf00      	nop
 8007928:	3708      	adds	r7, #8
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}

0800792e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800792e:	b580      	push	{r7, lr}
 8007930:	b082      	sub	sp, #8
 8007932:	af00      	add	r7, sp, #0
 8007934:	6078      	str	r0, [r7, #4]
 8007936:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800793e:	3b01      	subs	r3, #1
 8007940:	2b02      	cmp	r3, #2
 8007942:	d81e      	bhi.n	8007982 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	88db      	ldrh	r3, [r3, #6]
 8007948:	2b02      	cmp	r3, #2
 800794a:	d004      	beq.n	8007956 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800794c:	6839      	ldr	r1, [r7, #0]
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f000 f891 	bl	8007a76 <USBD_CtlError>
        break;
 8007954:	e01a      	b.n	800798c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2201      	movs	r2, #1
 800795a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007962:	2b00      	cmp	r3, #0
 8007964:	d005      	beq.n	8007972 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	68db      	ldr	r3, [r3, #12]
 800796a:	f043 0202 	orr.w	r2, r3, #2
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	330c      	adds	r3, #12
 8007976:	2202      	movs	r2, #2
 8007978:	4619      	mov	r1, r3
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f000 f8e5 	bl	8007b4a <USBD_CtlSendData>
      break;
 8007980:	e004      	b.n	800798c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007982:	6839      	ldr	r1, [r7, #0]
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f000 f876 	bl	8007a76 <USBD_CtlError>
      break;
 800798a:	bf00      	nop
  }
}
 800798c:	bf00      	nop
 800798e:	3708      	adds	r7, #8
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}

08007994 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b082      	sub	sp, #8
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
 800799c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	885b      	ldrh	r3, [r3, #2]
 80079a2:	2b01      	cmp	r3, #1
 80079a4:	d106      	bne.n	80079b4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2201      	movs	r2, #1
 80079aa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f000 f929 	bl	8007c06 <USBD_CtlSendStatus>
  }
}
 80079b4:	bf00      	nop
 80079b6:	3708      	adds	r7, #8
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}

080079bc <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b082      	sub	sp, #8
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
 80079c4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079cc:	3b01      	subs	r3, #1
 80079ce:	2b02      	cmp	r3, #2
 80079d0:	d80b      	bhi.n	80079ea <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	885b      	ldrh	r3, [r3, #2]
 80079d6:	2b01      	cmp	r3, #1
 80079d8:	d10c      	bne.n	80079f4 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2200      	movs	r2, #0
 80079de:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f000 f90f 	bl	8007c06 <USBD_CtlSendStatus>
      }
      break;
 80079e8:	e004      	b.n	80079f4 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80079ea:	6839      	ldr	r1, [r7, #0]
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f000 f842 	bl	8007a76 <USBD_CtlError>
      break;
 80079f2:	e000      	b.n	80079f6 <USBD_ClrFeature+0x3a>
      break;
 80079f4:	bf00      	nop
  }
}
 80079f6:	bf00      	nop
 80079f8:	3708      	adds	r7, #8
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}

080079fe <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80079fe:	b480      	push	{r7}
 8007a00:	b083      	sub	sp, #12
 8007a02:	af00      	add	r7, sp, #0
 8007a04:	6078      	str	r0, [r7, #4]
 8007a06:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	781a      	ldrb	r2, [r3, #0]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	785a      	ldrb	r2, [r3, #1]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	3302      	adds	r3, #2
 8007a1c:	781b      	ldrb	r3, [r3, #0]
 8007a1e:	b29a      	uxth	r2, r3
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	3303      	adds	r3, #3
 8007a24:	781b      	ldrb	r3, [r3, #0]
 8007a26:	b29b      	uxth	r3, r3
 8007a28:	021b      	lsls	r3, r3, #8
 8007a2a:	b29b      	uxth	r3, r3
 8007a2c:	4413      	add	r3, r2
 8007a2e:	b29a      	uxth	r2, r3
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	3304      	adds	r3, #4
 8007a38:	781b      	ldrb	r3, [r3, #0]
 8007a3a:	b29a      	uxth	r2, r3
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	3305      	adds	r3, #5
 8007a40:	781b      	ldrb	r3, [r3, #0]
 8007a42:	b29b      	uxth	r3, r3
 8007a44:	021b      	lsls	r3, r3, #8
 8007a46:	b29b      	uxth	r3, r3
 8007a48:	4413      	add	r3, r2
 8007a4a:	b29a      	uxth	r2, r3
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	3306      	adds	r3, #6
 8007a54:	781b      	ldrb	r3, [r3, #0]
 8007a56:	b29a      	uxth	r2, r3
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	3307      	adds	r3, #7
 8007a5c:	781b      	ldrb	r3, [r3, #0]
 8007a5e:	b29b      	uxth	r3, r3
 8007a60:	021b      	lsls	r3, r3, #8
 8007a62:	b29b      	uxth	r3, r3
 8007a64:	4413      	add	r3, r2
 8007a66:	b29a      	uxth	r2, r3
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	80da      	strh	r2, [r3, #6]

}
 8007a6c:	bf00      	nop
 8007a6e:	370c      	adds	r7, #12
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bc80      	pop	{r7}
 8007a74:	4770      	bx	lr

08007a76 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007a76:	b580      	push	{r7, lr}
 8007a78:	b082      	sub	sp, #8
 8007a7a:	af00      	add	r7, sp, #0
 8007a7c:	6078      	str	r0, [r7, #4]
 8007a7e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007a80:	2180      	movs	r1, #128	; 0x80
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f000 fc54 	bl	8008330 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007a88:	2100      	movs	r1, #0
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f000 fc50 	bl	8008330 <USBD_LL_StallEP>
}
 8007a90:	bf00      	nop
 8007a92:	3708      	adds	r7, #8
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}

08007a98 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b086      	sub	sp, #24
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	60f8      	str	r0, [r7, #12]
 8007aa0:	60b9      	str	r1, [r7, #8]
 8007aa2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d032      	beq.n	8007b14 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007aae:	68f8      	ldr	r0, [r7, #12]
 8007ab0:	f000 f834 	bl	8007b1c <USBD_GetLen>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	3301      	adds	r3, #1
 8007ab8:	b29b      	uxth	r3, r3
 8007aba:	005b      	lsls	r3, r3, #1
 8007abc:	b29a      	uxth	r2, r3
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007ac2:	7dfb      	ldrb	r3, [r7, #23]
 8007ac4:	1c5a      	adds	r2, r3, #1
 8007ac6:	75fa      	strb	r2, [r7, #23]
 8007ac8:	461a      	mov	r2, r3
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	4413      	add	r3, r2
 8007ace:	687a      	ldr	r2, [r7, #4]
 8007ad0:	7812      	ldrb	r2, [r2, #0]
 8007ad2:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007ad4:	7dfb      	ldrb	r3, [r7, #23]
 8007ad6:	1c5a      	adds	r2, r3, #1
 8007ad8:	75fa      	strb	r2, [r7, #23]
 8007ada:	461a      	mov	r2, r3
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	4413      	add	r3, r2
 8007ae0:	2203      	movs	r2, #3
 8007ae2:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007ae4:	e012      	b.n	8007b0c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	1c5a      	adds	r2, r3, #1
 8007aea:	60fa      	str	r2, [r7, #12]
 8007aec:	7dfa      	ldrb	r2, [r7, #23]
 8007aee:	1c51      	adds	r1, r2, #1
 8007af0:	75f9      	strb	r1, [r7, #23]
 8007af2:	4611      	mov	r1, r2
 8007af4:	68ba      	ldr	r2, [r7, #8]
 8007af6:	440a      	add	r2, r1
 8007af8:	781b      	ldrb	r3, [r3, #0]
 8007afa:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007afc:	7dfb      	ldrb	r3, [r7, #23]
 8007afe:	1c5a      	adds	r2, r3, #1
 8007b00:	75fa      	strb	r2, [r7, #23]
 8007b02:	461a      	mov	r2, r3
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	4413      	add	r3, r2
 8007b08:	2200      	movs	r2, #0
 8007b0a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	781b      	ldrb	r3, [r3, #0]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d1e8      	bne.n	8007ae6 <USBD_GetString+0x4e>
    }
  }
}
 8007b14:	bf00      	nop
 8007b16:	3718      	adds	r7, #24
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}

08007b1c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b085      	sub	sp, #20
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007b24:	2300      	movs	r3, #0
 8007b26:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007b28:	e005      	b.n	8007b36 <USBD_GetLen+0x1a>
  {
    len++;
 8007b2a:	7bfb      	ldrb	r3, [r7, #15]
 8007b2c:	3301      	adds	r3, #1
 8007b2e:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	3301      	adds	r3, #1
 8007b34:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	781b      	ldrb	r3, [r3, #0]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d1f5      	bne.n	8007b2a <USBD_GetLen+0xe>
  }

  return len;
 8007b3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	3714      	adds	r7, #20
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bc80      	pop	{r7}
 8007b48:	4770      	bx	lr

08007b4a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007b4a:	b580      	push	{r7, lr}
 8007b4c:	b084      	sub	sp, #16
 8007b4e:	af00      	add	r7, sp, #0
 8007b50:	60f8      	str	r0, [r7, #12]
 8007b52:	60b9      	str	r1, [r7, #8]
 8007b54:	4613      	mov	r3, r2
 8007b56:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	2202      	movs	r2, #2
 8007b5c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007b60:	88fa      	ldrh	r2, [r7, #6]
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007b66:	88fa      	ldrh	r2, [r7, #6]
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007b6c:	88fb      	ldrh	r3, [r7, #6]
 8007b6e:	68ba      	ldr	r2, [r7, #8]
 8007b70:	2100      	movs	r1, #0
 8007b72:	68f8      	ldr	r0, [r7, #12]
 8007b74:	f000 fc65 	bl	8008442 <USBD_LL_Transmit>

  return USBD_OK;
 8007b78:	2300      	movs	r3, #0
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	3710      	adds	r7, #16
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}

08007b82 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007b82:	b580      	push	{r7, lr}
 8007b84:	b084      	sub	sp, #16
 8007b86:	af00      	add	r7, sp, #0
 8007b88:	60f8      	str	r0, [r7, #12]
 8007b8a:	60b9      	str	r1, [r7, #8]
 8007b8c:	4613      	mov	r3, r2
 8007b8e:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007b90:	88fb      	ldrh	r3, [r7, #6]
 8007b92:	68ba      	ldr	r2, [r7, #8]
 8007b94:	2100      	movs	r1, #0
 8007b96:	68f8      	ldr	r0, [r7, #12]
 8007b98:	f000 fc53 	bl	8008442 <USBD_LL_Transmit>

  return USBD_OK;
 8007b9c:	2300      	movs	r3, #0
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3710      	adds	r7, #16
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}

08007ba6 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007ba6:	b580      	push	{r7, lr}
 8007ba8:	b084      	sub	sp, #16
 8007baa:	af00      	add	r7, sp, #0
 8007bac:	60f8      	str	r0, [r7, #12]
 8007bae:	60b9      	str	r1, [r7, #8]
 8007bb0:	4613      	mov	r3, r2
 8007bb2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	2203      	movs	r2, #3
 8007bb8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007bbc:	88fa      	ldrh	r2, [r7, #6]
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007bc4:	88fa      	ldrh	r2, [r7, #6]
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007bcc:	88fb      	ldrh	r3, [r7, #6]
 8007bce:	68ba      	ldr	r2, [r7, #8]
 8007bd0:	2100      	movs	r1, #0
 8007bd2:	68f8      	ldr	r0, [r7, #12]
 8007bd4:	f000 fc58 	bl	8008488 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007bd8:	2300      	movs	r3, #0
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3710      	adds	r7, #16
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}

08007be2 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007be2:	b580      	push	{r7, lr}
 8007be4:	b084      	sub	sp, #16
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	60f8      	str	r0, [r7, #12]
 8007bea:	60b9      	str	r1, [r7, #8]
 8007bec:	4613      	mov	r3, r2
 8007bee:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007bf0:	88fb      	ldrh	r3, [r7, #6]
 8007bf2:	68ba      	ldr	r2, [r7, #8]
 8007bf4:	2100      	movs	r1, #0
 8007bf6:	68f8      	ldr	r0, [r7, #12]
 8007bf8:	f000 fc46 	bl	8008488 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007bfc:	2300      	movs	r3, #0
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	3710      	adds	r7, #16
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}

08007c06 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007c06:	b580      	push	{r7, lr}
 8007c08:	b082      	sub	sp, #8
 8007c0a:	af00      	add	r7, sp, #0
 8007c0c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2204      	movs	r2, #4
 8007c12:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007c16:	2300      	movs	r3, #0
 8007c18:	2200      	movs	r2, #0
 8007c1a:	2100      	movs	r1, #0
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f000 fc10 	bl	8008442 <USBD_LL_Transmit>

  return USBD_OK;
 8007c22:	2300      	movs	r3, #0
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	3708      	adds	r7, #8
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}

08007c2c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b082      	sub	sp, #8
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2205      	movs	r2, #5
 8007c38:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	2200      	movs	r2, #0
 8007c40:	2100      	movs	r1, #0
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f000 fc20 	bl	8008488 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007c48:	2300      	movs	r3, #0
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	3708      	adds	r7, #8
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}
	...

08007c54 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007c58:	2200      	movs	r2, #0
 8007c5a:	4912      	ldr	r1, [pc, #72]	; (8007ca4 <MX_USB_DEVICE_Init+0x50>)
 8007c5c:	4812      	ldr	r0, [pc, #72]	; (8007ca8 <MX_USB_DEVICE_Init+0x54>)
 8007c5e:	f7fe ff5e 	bl	8006b1e <USBD_Init>
 8007c62:	4603      	mov	r3, r0
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d001      	beq.n	8007c6c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007c68:	f7f8 fd3c 	bl	80006e4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007c6c:	490f      	ldr	r1, [pc, #60]	; (8007cac <MX_USB_DEVICE_Init+0x58>)
 8007c6e:	480e      	ldr	r0, [pc, #56]	; (8007ca8 <MX_USB_DEVICE_Init+0x54>)
 8007c70:	f7fe ff80 	bl	8006b74 <USBD_RegisterClass>
 8007c74:	4603      	mov	r3, r0
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d001      	beq.n	8007c7e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007c7a:	f7f8 fd33 	bl	80006e4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007c7e:	490c      	ldr	r1, [pc, #48]	; (8007cb0 <MX_USB_DEVICE_Init+0x5c>)
 8007c80:	4809      	ldr	r0, [pc, #36]	; (8007ca8 <MX_USB_DEVICE_Init+0x54>)
 8007c82:	f7fe feb1 	bl	80069e8 <USBD_CDC_RegisterInterface>
 8007c86:	4603      	mov	r3, r0
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d001      	beq.n	8007c90 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007c8c:	f7f8 fd2a 	bl	80006e4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007c90:	4805      	ldr	r0, [pc, #20]	; (8007ca8 <MX_USB_DEVICE_Init+0x54>)
 8007c92:	f7fe ff88 	bl	8006ba6 <USBD_Start>
 8007c96:	4603      	mov	r3, r0
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d001      	beq.n	8007ca0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007c9c:	f7f8 fd22 	bl	80006e4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007ca0:	bf00      	nop
 8007ca2:	bd80      	pop	{r7, pc}
 8007ca4:	2000012c 	.word	0x2000012c
 8007ca8:	2000024c 	.word	0x2000024c
 8007cac:	20000018 	.word	0x20000018
 8007cb0:	2000011c 	.word	0x2000011c

08007cb4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007cb8:	2200      	movs	r2, #0
 8007cba:	4905      	ldr	r1, [pc, #20]	; (8007cd0 <CDC_Init_FS+0x1c>)
 8007cbc:	4805      	ldr	r0, [pc, #20]	; (8007cd4 <CDC_Init_FS+0x20>)
 8007cbe:	f7fe fea9 	bl	8006a14 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007cc2:	4905      	ldr	r1, [pc, #20]	; (8007cd8 <CDC_Init_FS+0x24>)
 8007cc4:	4803      	ldr	r0, [pc, #12]	; (8007cd4 <CDC_Init_FS+0x20>)
 8007cc6:	f7fe febe 	bl	8006a46 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007cca:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	bd80      	pop	{r7, pc}
 8007cd0:	20000910 	.word	0x20000910
 8007cd4:	2000024c 	.word	0x2000024c
 8007cd8:	20000510 	.word	0x20000510

08007cdc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007ce0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bc80      	pop	{r7}
 8007ce8:	4770      	bx	lr
	...

08007cec <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007cec:	b480      	push	{r7}
 8007cee:	b083      	sub	sp, #12
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	6039      	str	r1, [r7, #0]
 8007cf6:	71fb      	strb	r3, [r7, #7]
 8007cf8:	4613      	mov	r3, r2
 8007cfa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007cfc:	79fb      	ldrb	r3, [r7, #7]
 8007cfe:	2b23      	cmp	r3, #35	; 0x23
 8007d00:	d84a      	bhi.n	8007d98 <CDC_Control_FS+0xac>
 8007d02:	a201      	add	r2, pc, #4	; (adr r2, 8007d08 <CDC_Control_FS+0x1c>)
 8007d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d08:	08007d99 	.word	0x08007d99
 8007d0c:	08007d99 	.word	0x08007d99
 8007d10:	08007d99 	.word	0x08007d99
 8007d14:	08007d99 	.word	0x08007d99
 8007d18:	08007d99 	.word	0x08007d99
 8007d1c:	08007d99 	.word	0x08007d99
 8007d20:	08007d99 	.word	0x08007d99
 8007d24:	08007d99 	.word	0x08007d99
 8007d28:	08007d99 	.word	0x08007d99
 8007d2c:	08007d99 	.word	0x08007d99
 8007d30:	08007d99 	.word	0x08007d99
 8007d34:	08007d99 	.word	0x08007d99
 8007d38:	08007d99 	.word	0x08007d99
 8007d3c:	08007d99 	.word	0x08007d99
 8007d40:	08007d99 	.word	0x08007d99
 8007d44:	08007d99 	.word	0x08007d99
 8007d48:	08007d99 	.word	0x08007d99
 8007d4c:	08007d99 	.word	0x08007d99
 8007d50:	08007d99 	.word	0x08007d99
 8007d54:	08007d99 	.word	0x08007d99
 8007d58:	08007d99 	.word	0x08007d99
 8007d5c:	08007d99 	.word	0x08007d99
 8007d60:	08007d99 	.word	0x08007d99
 8007d64:	08007d99 	.word	0x08007d99
 8007d68:	08007d99 	.word	0x08007d99
 8007d6c:	08007d99 	.word	0x08007d99
 8007d70:	08007d99 	.word	0x08007d99
 8007d74:	08007d99 	.word	0x08007d99
 8007d78:	08007d99 	.word	0x08007d99
 8007d7c:	08007d99 	.word	0x08007d99
 8007d80:	08007d99 	.word	0x08007d99
 8007d84:	08007d99 	.word	0x08007d99
 8007d88:	08007d99 	.word	0x08007d99
 8007d8c:	08007d99 	.word	0x08007d99
 8007d90:	08007d99 	.word	0x08007d99
 8007d94:	08007d99 	.word	0x08007d99
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007d98:	bf00      	nop
  }

  return (USBD_OK);
 8007d9a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	370c      	adds	r7, #12
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bc80      	pop	{r7}
 8007da4:	4770      	bx	lr
 8007da6:	bf00      	nop

08007da8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b082      	sub	sp, #8
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
 8007db0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007db2:	6879      	ldr	r1, [r7, #4]
 8007db4:	4805      	ldr	r0, [pc, #20]	; (8007dcc <CDC_Receive_FS+0x24>)
 8007db6:	f7fe fe46 	bl	8006a46 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007dba:	4804      	ldr	r0, [pc, #16]	; (8007dcc <CDC_Receive_FS+0x24>)
 8007dbc:	f7fe fe85 	bl	8006aca <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007dc0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	3708      	adds	r7, #8
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}
 8007dca:	bf00      	nop
 8007dcc:	2000024c 	.word	0x2000024c

08007dd0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b084      	sub	sp, #16
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	460b      	mov	r3, r1
 8007dda:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007ddc:	2300      	movs	r3, #0
 8007dde:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007de0:	4b0d      	ldr	r3, [pc, #52]	; (8007e18 <CDC_Transmit_FS+0x48>)
 8007de2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007de6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d001      	beq.n	8007df6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007df2:	2301      	movs	r3, #1
 8007df4:	e00b      	b.n	8007e0e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007df6:	887b      	ldrh	r3, [r7, #2]
 8007df8:	461a      	mov	r2, r3
 8007dfa:	6879      	ldr	r1, [r7, #4]
 8007dfc:	4806      	ldr	r0, [pc, #24]	; (8007e18 <CDC_Transmit_FS+0x48>)
 8007dfe:	f7fe fe09 	bl	8006a14 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007e02:	4805      	ldr	r0, [pc, #20]	; (8007e18 <CDC_Transmit_FS+0x48>)
 8007e04:	f7fe fe32 	bl	8006a6c <USBD_CDC_TransmitPacket>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3710      	adds	r7, #16
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}
 8007e16:	bf00      	nop
 8007e18:	2000024c 	.word	0x2000024c

08007e1c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b083      	sub	sp, #12
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	4603      	mov	r3, r0
 8007e24:	6039      	str	r1, [r7, #0]
 8007e26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	2212      	movs	r2, #18
 8007e2c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007e2e:	4b03      	ldr	r3, [pc, #12]	; (8007e3c <USBD_FS_DeviceDescriptor+0x20>)
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	370c      	adds	r7, #12
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bc80      	pop	{r7}
 8007e38:	4770      	bx	lr
 8007e3a:	bf00      	nop
 8007e3c:	20000148 	.word	0x20000148

08007e40 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e40:	b480      	push	{r7}
 8007e42:	b083      	sub	sp, #12
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	4603      	mov	r3, r0
 8007e48:	6039      	str	r1, [r7, #0]
 8007e4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	2204      	movs	r2, #4
 8007e50:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007e52:	4b03      	ldr	r3, [pc, #12]	; (8007e60 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	370c      	adds	r7, #12
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bc80      	pop	{r7}
 8007e5c:	4770      	bx	lr
 8007e5e:	bf00      	nop
 8007e60:	2000015c 	.word	0x2000015c

08007e64 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b082      	sub	sp, #8
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	6039      	str	r1, [r7, #0]
 8007e6e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007e70:	79fb      	ldrb	r3, [r7, #7]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d105      	bne.n	8007e82 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007e76:	683a      	ldr	r2, [r7, #0]
 8007e78:	4907      	ldr	r1, [pc, #28]	; (8007e98 <USBD_FS_ProductStrDescriptor+0x34>)
 8007e7a:	4808      	ldr	r0, [pc, #32]	; (8007e9c <USBD_FS_ProductStrDescriptor+0x38>)
 8007e7c:	f7ff fe0c 	bl	8007a98 <USBD_GetString>
 8007e80:	e004      	b.n	8007e8c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007e82:	683a      	ldr	r2, [r7, #0]
 8007e84:	4904      	ldr	r1, [pc, #16]	; (8007e98 <USBD_FS_ProductStrDescriptor+0x34>)
 8007e86:	4805      	ldr	r0, [pc, #20]	; (8007e9c <USBD_FS_ProductStrDescriptor+0x38>)
 8007e88:	f7ff fe06 	bl	8007a98 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007e8c:	4b02      	ldr	r3, [pc, #8]	; (8007e98 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007e8e:	4618      	mov	r0, r3
 8007e90:	3708      	adds	r7, #8
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd80      	pop	{r7, pc}
 8007e96:	bf00      	nop
 8007e98:	20000d10 	.word	0x20000d10
 8007e9c:	08008f58 	.word	0x08008f58

08007ea0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b082      	sub	sp, #8
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	6039      	str	r1, [r7, #0]
 8007eaa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007eac:	683a      	ldr	r2, [r7, #0]
 8007eae:	4904      	ldr	r1, [pc, #16]	; (8007ec0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007eb0:	4804      	ldr	r0, [pc, #16]	; (8007ec4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007eb2:	f7ff fdf1 	bl	8007a98 <USBD_GetString>
  return USBD_StrDesc;
 8007eb6:	4b02      	ldr	r3, [pc, #8]	; (8007ec0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007eb8:	4618      	mov	r0, r3
 8007eba:	3708      	adds	r7, #8
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}
 8007ec0:	20000d10 	.word	0x20000d10
 8007ec4:	08008f70 	.word	0x08008f70

08007ec8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b082      	sub	sp, #8
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	4603      	mov	r3, r0
 8007ed0:	6039      	str	r1, [r7, #0]
 8007ed2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	221a      	movs	r2, #26
 8007ed8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007eda:	f000 f843 	bl	8007f64 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007ede:	4b02      	ldr	r3, [pc, #8]	; (8007ee8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3708      	adds	r7, #8
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}
 8007ee8:	20000160 	.word	0x20000160

08007eec <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b082      	sub	sp, #8
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	6039      	str	r1, [r7, #0]
 8007ef6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007ef8:	79fb      	ldrb	r3, [r7, #7]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d105      	bne.n	8007f0a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007efe:	683a      	ldr	r2, [r7, #0]
 8007f00:	4907      	ldr	r1, [pc, #28]	; (8007f20 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007f02:	4808      	ldr	r0, [pc, #32]	; (8007f24 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007f04:	f7ff fdc8 	bl	8007a98 <USBD_GetString>
 8007f08:	e004      	b.n	8007f14 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007f0a:	683a      	ldr	r2, [r7, #0]
 8007f0c:	4904      	ldr	r1, [pc, #16]	; (8007f20 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007f0e:	4805      	ldr	r0, [pc, #20]	; (8007f24 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007f10:	f7ff fdc2 	bl	8007a98 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007f14:	4b02      	ldr	r3, [pc, #8]	; (8007f20 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	3708      	adds	r7, #8
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}
 8007f1e:	bf00      	nop
 8007f20:	20000d10 	.word	0x20000d10
 8007f24:	08008f84 	.word	0x08008f84

08007f28 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b082      	sub	sp, #8
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	4603      	mov	r3, r0
 8007f30:	6039      	str	r1, [r7, #0]
 8007f32:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007f34:	79fb      	ldrb	r3, [r7, #7]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d105      	bne.n	8007f46 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007f3a:	683a      	ldr	r2, [r7, #0]
 8007f3c:	4907      	ldr	r1, [pc, #28]	; (8007f5c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007f3e:	4808      	ldr	r0, [pc, #32]	; (8007f60 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007f40:	f7ff fdaa 	bl	8007a98 <USBD_GetString>
 8007f44:	e004      	b.n	8007f50 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007f46:	683a      	ldr	r2, [r7, #0]
 8007f48:	4904      	ldr	r1, [pc, #16]	; (8007f5c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007f4a:	4805      	ldr	r0, [pc, #20]	; (8007f60 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007f4c:	f7ff fda4 	bl	8007a98 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007f50:	4b02      	ldr	r3, [pc, #8]	; (8007f5c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	3708      	adds	r7, #8
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}
 8007f5a:	bf00      	nop
 8007f5c:	20000d10 	.word	0x20000d10
 8007f60:	08008f90 	.word	0x08008f90

08007f64 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b084      	sub	sp, #16
 8007f68:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007f6a:	4b0f      	ldr	r3, [pc, #60]	; (8007fa8 <Get_SerialNum+0x44>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007f70:	4b0e      	ldr	r3, [pc, #56]	; (8007fac <Get_SerialNum+0x48>)
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007f76:	4b0e      	ldr	r3, [pc, #56]	; (8007fb0 <Get_SerialNum+0x4c>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007f7c:	68fa      	ldr	r2, [r7, #12]
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	4413      	add	r3, r2
 8007f82:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d009      	beq.n	8007f9e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007f8a:	2208      	movs	r2, #8
 8007f8c:	4909      	ldr	r1, [pc, #36]	; (8007fb4 <Get_SerialNum+0x50>)
 8007f8e:	68f8      	ldr	r0, [r7, #12]
 8007f90:	f000 f814 	bl	8007fbc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007f94:	2204      	movs	r2, #4
 8007f96:	4908      	ldr	r1, [pc, #32]	; (8007fb8 <Get_SerialNum+0x54>)
 8007f98:	68b8      	ldr	r0, [r7, #8]
 8007f9a:	f000 f80f 	bl	8007fbc <IntToUnicode>
  }
}
 8007f9e:	bf00      	nop
 8007fa0:	3710      	adds	r7, #16
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}
 8007fa6:	bf00      	nop
 8007fa8:	1ffff7e8 	.word	0x1ffff7e8
 8007fac:	1ffff7ec 	.word	0x1ffff7ec
 8007fb0:	1ffff7f0 	.word	0x1ffff7f0
 8007fb4:	20000162 	.word	0x20000162
 8007fb8:	20000172 	.word	0x20000172

08007fbc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b087      	sub	sp, #28
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	60f8      	str	r0, [r7, #12]
 8007fc4:	60b9      	str	r1, [r7, #8]
 8007fc6:	4613      	mov	r3, r2
 8007fc8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007fce:	2300      	movs	r3, #0
 8007fd0:	75fb      	strb	r3, [r7, #23]
 8007fd2:	e027      	b.n	8008024 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	0f1b      	lsrs	r3, r3, #28
 8007fd8:	2b09      	cmp	r3, #9
 8007fda:	d80b      	bhi.n	8007ff4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	0f1b      	lsrs	r3, r3, #28
 8007fe0:	b2da      	uxtb	r2, r3
 8007fe2:	7dfb      	ldrb	r3, [r7, #23]
 8007fe4:	005b      	lsls	r3, r3, #1
 8007fe6:	4619      	mov	r1, r3
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	440b      	add	r3, r1
 8007fec:	3230      	adds	r2, #48	; 0x30
 8007fee:	b2d2      	uxtb	r2, r2
 8007ff0:	701a      	strb	r2, [r3, #0]
 8007ff2:	e00a      	b.n	800800a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	0f1b      	lsrs	r3, r3, #28
 8007ff8:	b2da      	uxtb	r2, r3
 8007ffa:	7dfb      	ldrb	r3, [r7, #23]
 8007ffc:	005b      	lsls	r3, r3, #1
 8007ffe:	4619      	mov	r1, r3
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	440b      	add	r3, r1
 8008004:	3237      	adds	r2, #55	; 0x37
 8008006:	b2d2      	uxtb	r2, r2
 8008008:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	011b      	lsls	r3, r3, #4
 800800e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008010:	7dfb      	ldrb	r3, [r7, #23]
 8008012:	005b      	lsls	r3, r3, #1
 8008014:	3301      	adds	r3, #1
 8008016:	68ba      	ldr	r2, [r7, #8]
 8008018:	4413      	add	r3, r2
 800801a:	2200      	movs	r2, #0
 800801c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800801e:	7dfb      	ldrb	r3, [r7, #23]
 8008020:	3301      	adds	r3, #1
 8008022:	75fb      	strb	r3, [r7, #23]
 8008024:	7dfa      	ldrb	r2, [r7, #23]
 8008026:	79fb      	ldrb	r3, [r7, #7]
 8008028:	429a      	cmp	r2, r3
 800802a:	d3d3      	bcc.n	8007fd4 <IntToUnicode+0x18>
  }
}
 800802c:	bf00      	nop
 800802e:	bf00      	nop
 8008030:	371c      	adds	r7, #28
 8008032:	46bd      	mov	sp, r7
 8008034:	bc80      	pop	{r7}
 8008036:	4770      	bx	lr

08008038 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b084      	sub	sp, #16
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4a0d      	ldr	r2, [pc, #52]	; (800807c <HAL_PCD_MspInit+0x44>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d113      	bne.n	8008072 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800804a:	4b0d      	ldr	r3, [pc, #52]	; (8008080 <HAL_PCD_MspInit+0x48>)
 800804c:	69db      	ldr	r3, [r3, #28]
 800804e:	4a0c      	ldr	r2, [pc, #48]	; (8008080 <HAL_PCD_MspInit+0x48>)
 8008050:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008054:	61d3      	str	r3, [r2, #28]
 8008056:	4b0a      	ldr	r3, [pc, #40]	; (8008080 <HAL_PCD_MspInit+0x48>)
 8008058:	69db      	ldr	r3, [r3, #28]
 800805a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800805e:	60fb      	str	r3, [r7, #12]
 8008060:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008062:	2200      	movs	r2, #0
 8008064:	2100      	movs	r1, #0
 8008066:	2014      	movs	r0, #20
 8008068:	f7f8 fd8b 	bl	8000b82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800806c:	2014      	movs	r0, #20
 800806e:	f7f8 fda4 	bl	8000bba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008072:	bf00      	nop
 8008074:	3710      	adds	r7, #16
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}
 800807a:	bf00      	nop
 800807c:	40005c00 	.word	0x40005c00
 8008080:	40021000 	.word	0x40021000

08008084 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b082      	sub	sp, #8
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008098:	4619      	mov	r1, r3
 800809a:	4610      	mov	r0, r2
 800809c:	f7fe fdcb 	bl	8006c36 <USBD_LL_SetupStage>
}
 80080a0:	bf00      	nop
 80080a2:	3708      	adds	r7, #8
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}

080080a8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b082      	sub	sp, #8
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
 80080b0:	460b      	mov	r3, r1
 80080b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 80080ba:	78fa      	ldrb	r2, [r7, #3]
 80080bc:	6879      	ldr	r1, [r7, #4]
 80080be:	4613      	mov	r3, r2
 80080c0:	009b      	lsls	r3, r3, #2
 80080c2:	4413      	add	r3, r2
 80080c4:	00db      	lsls	r3, r3, #3
 80080c6:	440b      	add	r3, r1
 80080c8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80080cc:	681a      	ldr	r2, [r3, #0]
 80080ce:	78fb      	ldrb	r3, [r7, #3]
 80080d0:	4619      	mov	r1, r3
 80080d2:	f7fe fdfd 	bl	8006cd0 <USBD_LL_DataOutStage>
}
 80080d6:	bf00      	nop
 80080d8:	3708      	adds	r7, #8
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}

080080de <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080de:	b580      	push	{r7, lr}
 80080e0:	b082      	sub	sp, #8
 80080e2:	af00      	add	r7, sp, #0
 80080e4:	6078      	str	r0, [r7, #4]
 80080e6:	460b      	mov	r3, r1
 80080e8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 80080f0:	78fa      	ldrb	r2, [r7, #3]
 80080f2:	6879      	ldr	r1, [r7, #4]
 80080f4:	4613      	mov	r3, r2
 80080f6:	009b      	lsls	r3, r3, #2
 80080f8:	4413      	add	r3, r2
 80080fa:	00db      	lsls	r3, r3, #3
 80080fc:	440b      	add	r3, r1
 80080fe:	333c      	adds	r3, #60	; 0x3c
 8008100:	681a      	ldr	r2, [r3, #0]
 8008102:	78fb      	ldrb	r3, [r7, #3]
 8008104:	4619      	mov	r1, r3
 8008106:	f7fe fe54 	bl	8006db2 <USBD_LL_DataInStage>
}
 800810a:	bf00      	nop
 800810c:	3708      	adds	r7, #8
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}

08008112 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008112:	b580      	push	{r7, lr}
 8008114:	b082      	sub	sp, #8
 8008116:	af00      	add	r7, sp, #0
 8008118:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8008120:	4618      	mov	r0, r3
 8008122:	f7fe ff64 	bl	8006fee <USBD_LL_SOF>
}
 8008126:	bf00      	nop
 8008128:	3708      	adds	r7, #8
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}

0800812e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800812e:	b580      	push	{r7, lr}
 8008130:	b084      	sub	sp, #16
 8008132:	af00      	add	r7, sp, #0
 8008134:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008136:	2301      	movs	r3, #1
 8008138:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	689b      	ldr	r3, [r3, #8]
 800813e:	2b02      	cmp	r3, #2
 8008140:	d001      	beq.n	8008146 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008142:	f7f8 facf 	bl	80006e4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800814c:	7bfa      	ldrb	r2, [r7, #15]
 800814e:	4611      	mov	r1, r2
 8008150:	4618      	mov	r0, r3
 8008152:	f7fe ff14 	bl	8006f7e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800815c:	4618      	mov	r0, r3
 800815e:	f7fe fecd 	bl	8006efc <USBD_LL_Reset>
}
 8008162:	bf00      	nop
 8008164:	3710      	adds	r7, #16
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}
	...

0800816c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b082      	sub	sp, #8
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800817a:	4618      	mov	r0, r3
 800817c:	f7fe ff0e 	bl	8006f9c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	699b      	ldr	r3, [r3, #24]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d005      	beq.n	8008194 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008188:	4b04      	ldr	r3, [pc, #16]	; (800819c <HAL_PCD_SuspendCallback+0x30>)
 800818a:	691b      	ldr	r3, [r3, #16]
 800818c:	4a03      	ldr	r2, [pc, #12]	; (800819c <HAL_PCD_SuspendCallback+0x30>)
 800818e:	f043 0306 	orr.w	r3, r3, #6
 8008192:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008194:	bf00      	nop
 8008196:	3708      	adds	r7, #8
 8008198:	46bd      	mov	sp, r7
 800819a:	bd80      	pop	{r7, pc}
 800819c:	e000ed00 	.word	0xe000ed00

080081a0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b082      	sub	sp, #8
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80081ae:	4618      	mov	r0, r3
 80081b0:	f7fe ff08 	bl	8006fc4 <USBD_LL_Resume>
}
 80081b4:	bf00      	nop
 80081b6:	3708      	adds	r7, #8
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}

080081bc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b082      	sub	sp, #8
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80081c4:	4a28      	ldr	r2, [pc, #160]	; (8008268 <USBD_LL_Init+0xac>)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	4a26      	ldr	r2, [pc, #152]	; (8008268 <USBD_LL_Init+0xac>)
 80081d0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80081d4:	4b24      	ldr	r3, [pc, #144]	; (8008268 <USBD_LL_Init+0xac>)
 80081d6:	4a25      	ldr	r2, [pc, #148]	; (800826c <USBD_LL_Init+0xb0>)
 80081d8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80081da:	4b23      	ldr	r3, [pc, #140]	; (8008268 <USBD_LL_Init+0xac>)
 80081dc:	2208      	movs	r2, #8
 80081de:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80081e0:	4b21      	ldr	r3, [pc, #132]	; (8008268 <USBD_LL_Init+0xac>)
 80081e2:	2202      	movs	r2, #2
 80081e4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80081e6:	4b20      	ldr	r3, [pc, #128]	; (8008268 <USBD_LL_Init+0xac>)
 80081e8:	2200      	movs	r2, #0
 80081ea:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80081ec:	4b1e      	ldr	r3, [pc, #120]	; (8008268 <USBD_LL_Init+0xac>)
 80081ee:	2200      	movs	r2, #0
 80081f0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80081f2:	4b1d      	ldr	r3, [pc, #116]	; (8008268 <USBD_LL_Init+0xac>)
 80081f4:	2200      	movs	r2, #0
 80081f6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80081f8:	481b      	ldr	r0, [pc, #108]	; (8008268 <USBD_LL_Init+0xac>)
 80081fa:	f7f8 fe95 	bl	8000f28 <HAL_PCD_Init>
 80081fe:	4603      	mov	r3, r0
 8008200:	2b00      	cmp	r3, #0
 8008202:	d001      	beq.n	8008208 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008204:	f7f8 fa6e 	bl	80006e4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800820e:	2318      	movs	r3, #24
 8008210:	2200      	movs	r2, #0
 8008212:	2100      	movs	r1, #0
 8008214:	f7fa fbb4 	bl	8002980 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800821e:	2358      	movs	r3, #88	; 0x58
 8008220:	2200      	movs	r2, #0
 8008222:	2180      	movs	r1, #128	; 0x80
 8008224:	f7fa fbac 	bl	8002980 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800822e:	23c0      	movs	r3, #192	; 0xc0
 8008230:	2200      	movs	r2, #0
 8008232:	2181      	movs	r1, #129	; 0x81
 8008234:	f7fa fba4 	bl	8002980 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800823e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008242:	2200      	movs	r2, #0
 8008244:	2101      	movs	r1, #1
 8008246:	f7fa fb9b 	bl	8002980 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008250:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008254:	2200      	movs	r2, #0
 8008256:	2182      	movs	r1, #130	; 0x82
 8008258:	f7fa fb92 	bl	8002980 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800825c:	2300      	movs	r3, #0
}
 800825e:	4618      	mov	r0, r3
 8008260:	3708      	adds	r7, #8
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}
 8008266:	bf00      	nop
 8008268:	20000f10 	.word	0x20000f10
 800826c:	40005c00 	.word	0x40005c00

08008270 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b084      	sub	sp, #16
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008278:	2300      	movs	r3, #0
 800827a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800827c:	2300      	movs	r3, #0
 800827e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008286:	4618      	mov	r0, r3
 8008288:	f7f8 ff4d 	bl	8001126 <HAL_PCD_Start>
 800828c:	4603      	mov	r3, r0
 800828e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008290:	7bfb      	ldrb	r3, [r7, #15]
 8008292:	4618      	mov	r0, r3
 8008294:	f000 f94e 	bl	8008534 <USBD_Get_USB_Status>
 8008298:	4603      	mov	r3, r0
 800829a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800829c:	7bbb      	ldrb	r3, [r7, #14]
}
 800829e:	4618      	mov	r0, r3
 80082a0:	3710      	adds	r7, #16
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bd80      	pop	{r7, pc}

080082a6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80082a6:	b580      	push	{r7, lr}
 80082a8:	b084      	sub	sp, #16
 80082aa:	af00      	add	r7, sp, #0
 80082ac:	6078      	str	r0, [r7, #4]
 80082ae:	4608      	mov	r0, r1
 80082b0:	4611      	mov	r1, r2
 80082b2:	461a      	mov	r2, r3
 80082b4:	4603      	mov	r3, r0
 80082b6:	70fb      	strb	r3, [r7, #3]
 80082b8:	460b      	mov	r3, r1
 80082ba:	70bb      	strb	r3, [r7, #2]
 80082bc:	4613      	mov	r3, r2
 80082be:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082c0:	2300      	movs	r3, #0
 80082c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082c4:	2300      	movs	r3, #0
 80082c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80082ce:	78bb      	ldrb	r3, [r7, #2]
 80082d0:	883a      	ldrh	r2, [r7, #0]
 80082d2:	78f9      	ldrb	r1, [r7, #3]
 80082d4:	f7f9 f8a2 	bl	800141c <HAL_PCD_EP_Open>
 80082d8:	4603      	mov	r3, r0
 80082da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082dc:	7bfb      	ldrb	r3, [r7, #15]
 80082de:	4618      	mov	r0, r3
 80082e0:	f000 f928 	bl	8008534 <USBD_Get_USB_Status>
 80082e4:	4603      	mov	r3, r0
 80082e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80082e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80082ea:	4618      	mov	r0, r3
 80082ec:	3710      	adds	r7, #16
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bd80      	pop	{r7, pc}

080082f2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80082f2:	b580      	push	{r7, lr}
 80082f4:	b084      	sub	sp, #16
 80082f6:	af00      	add	r7, sp, #0
 80082f8:	6078      	str	r0, [r7, #4]
 80082fa:	460b      	mov	r3, r1
 80082fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082fe:	2300      	movs	r3, #0
 8008300:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008302:	2300      	movs	r3, #0
 8008304:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800830c:	78fa      	ldrb	r2, [r7, #3]
 800830e:	4611      	mov	r1, r2
 8008310:	4618      	mov	r0, r3
 8008312:	f7f9 f8e0 	bl	80014d6 <HAL_PCD_EP_Close>
 8008316:	4603      	mov	r3, r0
 8008318:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800831a:	7bfb      	ldrb	r3, [r7, #15]
 800831c:	4618      	mov	r0, r3
 800831e:	f000 f909 	bl	8008534 <USBD_Get_USB_Status>
 8008322:	4603      	mov	r3, r0
 8008324:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008326:	7bbb      	ldrb	r3, [r7, #14]
}
 8008328:	4618      	mov	r0, r3
 800832a:	3710      	adds	r7, #16
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}

08008330 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b084      	sub	sp, #16
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
 8008338:	460b      	mov	r3, r1
 800833a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800833c:	2300      	movs	r3, #0
 800833e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008340:	2300      	movs	r3, #0
 8008342:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800834a:	78fa      	ldrb	r2, [r7, #3]
 800834c:	4611      	mov	r1, r2
 800834e:	4618      	mov	r0, r3
 8008350:	f7f9 f988 	bl	8001664 <HAL_PCD_EP_SetStall>
 8008354:	4603      	mov	r3, r0
 8008356:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008358:	7bfb      	ldrb	r3, [r7, #15]
 800835a:	4618      	mov	r0, r3
 800835c:	f000 f8ea 	bl	8008534 <USBD_Get_USB_Status>
 8008360:	4603      	mov	r3, r0
 8008362:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008364:	7bbb      	ldrb	r3, [r7, #14]
}
 8008366:	4618      	mov	r0, r3
 8008368:	3710      	adds	r7, #16
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}

0800836e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800836e:	b580      	push	{r7, lr}
 8008370:	b084      	sub	sp, #16
 8008372:	af00      	add	r7, sp, #0
 8008374:	6078      	str	r0, [r7, #4]
 8008376:	460b      	mov	r3, r1
 8008378:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800837a:	2300      	movs	r3, #0
 800837c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800837e:	2300      	movs	r3, #0
 8008380:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008388:	78fa      	ldrb	r2, [r7, #3]
 800838a:	4611      	mov	r1, r2
 800838c:	4618      	mov	r0, r3
 800838e:	f7f9 f9c9 	bl	8001724 <HAL_PCD_EP_ClrStall>
 8008392:	4603      	mov	r3, r0
 8008394:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008396:	7bfb      	ldrb	r3, [r7, #15]
 8008398:	4618      	mov	r0, r3
 800839a:	f000 f8cb 	bl	8008534 <USBD_Get_USB_Status>
 800839e:	4603      	mov	r3, r0
 80083a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80083a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	3710      	adds	r7, #16
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}

080083ac <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80083ac:	b480      	push	{r7}
 80083ae:	b085      	sub	sp, #20
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
 80083b4:	460b      	mov	r3, r1
 80083b6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80083be:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80083c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	da0c      	bge.n	80083e2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80083c8:	78fb      	ldrb	r3, [r7, #3]
 80083ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083ce:	68f9      	ldr	r1, [r7, #12]
 80083d0:	1c5a      	adds	r2, r3, #1
 80083d2:	4613      	mov	r3, r2
 80083d4:	009b      	lsls	r3, r3, #2
 80083d6:	4413      	add	r3, r2
 80083d8:	00db      	lsls	r3, r3, #3
 80083da:	440b      	add	r3, r1
 80083dc:	3302      	adds	r3, #2
 80083de:	781b      	ldrb	r3, [r3, #0]
 80083e0:	e00b      	b.n	80083fa <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80083e2:	78fb      	ldrb	r3, [r7, #3]
 80083e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80083e8:	68f9      	ldr	r1, [r7, #12]
 80083ea:	4613      	mov	r3, r2
 80083ec:	009b      	lsls	r3, r3, #2
 80083ee:	4413      	add	r3, r2
 80083f0:	00db      	lsls	r3, r3, #3
 80083f2:	440b      	add	r3, r1
 80083f4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80083f8:	781b      	ldrb	r3, [r3, #0]
  }
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3714      	adds	r7, #20
 80083fe:	46bd      	mov	sp, r7
 8008400:	bc80      	pop	{r7}
 8008402:	4770      	bx	lr

08008404 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b084      	sub	sp, #16
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
 800840c:	460b      	mov	r3, r1
 800840e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008410:	2300      	movs	r3, #0
 8008412:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008414:	2300      	movs	r3, #0
 8008416:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800841e:	78fa      	ldrb	r2, [r7, #3]
 8008420:	4611      	mov	r1, r2
 8008422:	4618      	mov	r0, r3
 8008424:	f7f8 ffd5 	bl	80013d2 <HAL_PCD_SetAddress>
 8008428:	4603      	mov	r3, r0
 800842a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800842c:	7bfb      	ldrb	r3, [r7, #15]
 800842e:	4618      	mov	r0, r3
 8008430:	f000 f880 	bl	8008534 <USBD_Get_USB_Status>
 8008434:	4603      	mov	r3, r0
 8008436:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008438:	7bbb      	ldrb	r3, [r7, #14]
}
 800843a:	4618      	mov	r0, r3
 800843c:	3710      	adds	r7, #16
 800843e:	46bd      	mov	sp, r7
 8008440:	bd80      	pop	{r7, pc}

08008442 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008442:	b580      	push	{r7, lr}
 8008444:	b086      	sub	sp, #24
 8008446:	af00      	add	r7, sp, #0
 8008448:	60f8      	str	r0, [r7, #12]
 800844a:	607a      	str	r2, [r7, #4]
 800844c:	461a      	mov	r2, r3
 800844e:	460b      	mov	r3, r1
 8008450:	72fb      	strb	r3, [r7, #11]
 8008452:	4613      	mov	r3, r2
 8008454:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008456:	2300      	movs	r3, #0
 8008458:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800845a:	2300      	movs	r3, #0
 800845c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008464:	893b      	ldrh	r3, [r7, #8]
 8008466:	7af9      	ldrb	r1, [r7, #11]
 8008468:	687a      	ldr	r2, [r7, #4]
 800846a:	f7f9 f8c4 	bl	80015f6 <HAL_PCD_EP_Transmit>
 800846e:	4603      	mov	r3, r0
 8008470:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008472:	7dfb      	ldrb	r3, [r7, #23]
 8008474:	4618      	mov	r0, r3
 8008476:	f000 f85d 	bl	8008534 <USBD_Get_USB_Status>
 800847a:	4603      	mov	r3, r0
 800847c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800847e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008480:	4618      	mov	r0, r3
 8008482:	3718      	adds	r7, #24
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}

08008488 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b086      	sub	sp, #24
 800848c:	af00      	add	r7, sp, #0
 800848e:	60f8      	str	r0, [r7, #12]
 8008490:	607a      	str	r2, [r7, #4]
 8008492:	461a      	mov	r2, r3
 8008494:	460b      	mov	r3, r1
 8008496:	72fb      	strb	r3, [r7, #11]
 8008498:	4613      	mov	r3, r2
 800849a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800849c:	2300      	movs	r3, #0
 800849e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084a0:	2300      	movs	r3, #0
 80084a2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80084aa:	893b      	ldrh	r3, [r7, #8]
 80084ac:	7af9      	ldrb	r1, [r7, #11]
 80084ae:	687a      	ldr	r2, [r7, #4]
 80084b0:	f7f9 f859 	bl	8001566 <HAL_PCD_EP_Receive>
 80084b4:	4603      	mov	r3, r0
 80084b6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084b8:	7dfb      	ldrb	r3, [r7, #23]
 80084ba:	4618      	mov	r0, r3
 80084bc:	f000 f83a 	bl	8008534 <USBD_Get_USB_Status>
 80084c0:	4603      	mov	r3, r0
 80084c2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80084c4:	7dbb      	ldrb	r3, [r7, #22]
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	3718      	adds	r7, #24
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}

080084ce <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80084ce:	b580      	push	{r7, lr}
 80084d0:	b082      	sub	sp, #8
 80084d2:	af00      	add	r7, sp, #0
 80084d4:	6078      	str	r0, [r7, #4]
 80084d6:	460b      	mov	r3, r1
 80084d8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80084e0:	78fa      	ldrb	r2, [r7, #3]
 80084e2:	4611      	mov	r1, r2
 80084e4:	4618      	mov	r0, r3
 80084e6:	f7f9 f86f 	bl	80015c8 <HAL_PCD_EP_GetRxCount>
 80084ea:	4603      	mov	r3, r0
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	3708      	adds	r7, #8
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}

080084f4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80084f4:	b480      	push	{r7}
 80084f6:	b083      	sub	sp, #12
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80084fc:	4b02      	ldr	r3, [pc, #8]	; (8008508 <USBD_static_malloc+0x14>)
}
 80084fe:	4618      	mov	r0, r3
 8008500:	370c      	adds	r7, #12
 8008502:	46bd      	mov	sp, r7
 8008504:	bc80      	pop	{r7}
 8008506:	4770      	bx	lr
 8008508:	20001200 	.word	0x20001200

0800850c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800850c:	b480      	push	{r7}
 800850e:	b083      	sub	sp, #12
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]

}
 8008514:	bf00      	nop
 8008516:	370c      	adds	r7, #12
 8008518:	46bd      	mov	sp, r7
 800851a:	bc80      	pop	{r7}
 800851c:	4770      	bx	lr

0800851e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800851e:	b480      	push	{r7}
 8008520:	b083      	sub	sp, #12
 8008522:	af00      	add	r7, sp, #0
 8008524:	6078      	str	r0, [r7, #4]
 8008526:	460b      	mov	r3, r1
 8008528:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800852a:	bf00      	nop
 800852c:	370c      	adds	r7, #12
 800852e:	46bd      	mov	sp, r7
 8008530:	bc80      	pop	{r7}
 8008532:	4770      	bx	lr

08008534 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008534:	b480      	push	{r7}
 8008536:	b085      	sub	sp, #20
 8008538:	af00      	add	r7, sp, #0
 800853a:	4603      	mov	r3, r0
 800853c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800853e:	2300      	movs	r3, #0
 8008540:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008542:	79fb      	ldrb	r3, [r7, #7]
 8008544:	2b03      	cmp	r3, #3
 8008546:	d817      	bhi.n	8008578 <USBD_Get_USB_Status+0x44>
 8008548:	a201      	add	r2, pc, #4	; (adr r2, 8008550 <USBD_Get_USB_Status+0x1c>)
 800854a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800854e:	bf00      	nop
 8008550:	08008561 	.word	0x08008561
 8008554:	08008567 	.word	0x08008567
 8008558:	0800856d 	.word	0x0800856d
 800855c:	08008573 	.word	0x08008573
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008560:	2300      	movs	r3, #0
 8008562:	73fb      	strb	r3, [r7, #15]
    break;
 8008564:	e00b      	b.n	800857e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008566:	2302      	movs	r3, #2
 8008568:	73fb      	strb	r3, [r7, #15]
    break;
 800856a:	e008      	b.n	800857e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800856c:	2301      	movs	r3, #1
 800856e:	73fb      	strb	r3, [r7, #15]
    break;
 8008570:	e005      	b.n	800857e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008572:	2302      	movs	r3, #2
 8008574:	73fb      	strb	r3, [r7, #15]
    break;
 8008576:	e002      	b.n	800857e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008578:	2302      	movs	r3, #2
 800857a:	73fb      	strb	r3, [r7, #15]
    break;
 800857c:	bf00      	nop
  }
  return usb_status;
 800857e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008580:	4618      	mov	r0, r3
 8008582:	3714      	adds	r7, #20
 8008584:	46bd      	mov	sp, r7
 8008586:	bc80      	pop	{r7}
 8008588:	4770      	bx	lr
 800858a:	bf00      	nop

0800858c <siprintf>:
 800858c:	b40e      	push	{r1, r2, r3}
 800858e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008592:	b500      	push	{lr}
 8008594:	b09c      	sub	sp, #112	; 0x70
 8008596:	ab1d      	add	r3, sp, #116	; 0x74
 8008598:	9002      	str	r0, [sp, #8]
 800859a:	9006      	str	r0, [sp, #24]
 800859c:	9107      	str	r1, [sp, #28]
 800859e:	9104      	str	r1, [sp, #16]
 80085a0:	4808      	ldr	r0, [pc, #32]	; (80085c4 <siprintf+0x38>)
 80085a2:	4909      	ldr	r1, [pc, #36]	; (80085c8 <siprintf+0x3c>)
 80085a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80085a8:	9105      	str	r1, [sp, #20]
 80085aa:	6800      	ldr	r0, [r0, #0]
 80085ac:	a902      	add	r1, sp, #8
 80085ae:	9301      	str	r3, [sp, #4]
 80085b0:	f000 f9a2 	bl	80088f8 <_svfiprintf_r>
 80085b4:	2200      	movs	r2, #0
 80085b6:	9b02      	ldr	r3, [sp, #8]
 80085b8:	701a      	strb	r2, [r3, #0]
 80085ba:	b01c      	add	sp, #112	; 0x70
 80085bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80085c0:	b003      	add	sp, #12
 80085c2:	4770      	bx	lr
 80085c4:	200001c8 	.word	0x200001c8
 80085c8:	ffff0208 	.word	0xffff0208

080085cc <memset>:
 80085cc:	4603      	mov	r3, r0
 80085ce:	4402      	add	r2, r0
 80085d0:	4293      	cmp	r3, r2
 80085d2:	d100      	bne.n	80085d6 <memset+0xa>
 80085d4:	4770      	bx	lr
 80085d6:	f803 1b01 	strb.w	r1, [r3], #1
 80085da:	e7f9      	b.n	80085d0 <memset+0x4>

080085dc <strncat>:
 80085dc:	b530      	push	{r4, r5, lr}
 80085de:	4604      	mov	r4, r0
 80085e0:	7825      	ldrb	r5, [r4, #0]
 80085e2:	4623      	mov	r3, r4
 80085e4:	3401      	adds	r4, #1
 80085e6:	2d00      	cmp	r5, #0
 80085e8:	d1fa      	bne.n	80085e0 <strncat+0x4>
 80085ea:	3a01      	subs	r2, #1
 80085ec:	d304      	bcc.n	80085f8 <strncat+0x1c>
 80085ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80085f2:	f803 4b01 	strb.w	r4, [r3], #1
 80085f6:	b904      	cbnz	r4, 80085fa <strncat+0x1e>
 80085f8:	bd30      	pop	{r4, r5, pc}
 80085fa:	2a00      	cmp	r2, #0
 80085fc:	d1f5      	bne.n	80085ea <strncat+0xe>
 80085fe:	701a      	strb	r2, [r3, #0]
 8008600:	e7f3      	b.n	80085ea <strncat+0xe>
	...

08008604 <__errno>:
 8008604:	4b01      	ldr	r3, [pc, #4]	; (800860c <__errno+0x8>)
 8008606:	6818      	ldr	r0, [r3, #0]
 8008608:	4770      	bx	lr
 800860a:	bf00      	nop
 800860c:	200001c8 	.word	0x200001c8

08008610 <__libc_init_array>:
 8008610:	b570      	push	{r4, r5, r6, lr}
 8008612:	2600      	movs	r6, #0
 8008614:	4d0c      	ldr	r5, [pc, #48]	; (8008648 <__libc_init_array+0x38>)
 8008616:	4c0d      	ldr	r4, [pc, #52]	; (800864c <__libc_init_array+0x3c>)
 8008618:	1b64      	subs	r4, r4, r5
 800861a:	10a4      	asrs	r4, r4, #2
 800861c:	42a6      	cmp	r6, r4
 800861e:	d109      	bne.n	8008634 <__libc_init_array+0x24>
 8008620:	f000 fc7a 	bl	8008f18 <_init>
 8008624:	2600      	movs	r6, #0
 8008626:	4d0a      	ldr	r5, [pc, #40]	; (8008650 <__libc_init_array+0x40>)
 8008628:	4c0a      	ldr	r4, [pc, #40]	; (8008654 <__libc_init_array+0x44>)
 800862a:	1b64      	subs	r4, r4, r5
 800862c:	10a4      	asrs	r4, r4, #2
 800862e:	42a6      	cmp	r6, r4
 8008630:	d105      	bne.n	800863e <__libc_init_array+0x2e>
 8008632:	bd70      	pop	{r4, r5, r6, pc}
 8008634:	f855 3b04 	ldr.w	r3, [r5], #4
 8008638:	4798      	blx	r3
 800863a:	3601      	adds	r6, #1
 800863c:	e7ee      	b.n	800861c <__libc_init_array+0xc>
 800863e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008642:	4798      	blx	r3
 8008644:	3601      	adds	r6, #1
 8008646:	e7f2      	b.n	800862e <__libc_init_array+0x1e>
 8008648:	080093f8 	.word	0x080093f8
 800864c:	080093f8 	.word	0x080093f8
 8008650:	080093f8 	.word	0x080093f8
 8008654:	080093fc 	.word	0x080093fc

08008658 <__retarget_lock_acquire_recursive>:
 8008658:	4770      	bx	lr

0800865a <__retarget_lock_release_recursive>:
 800865a:	4770      	bx	lr

0800865c <_free_r>:
 800865c:	b538      	push	{r3, r4, r5, lr}
 800865e:	4605      	mov	r5, r0
 8008660:	2900      	cmp	r1, #0
 8008662:	d040      	beq.n	80086e6 <_free_r+0x8a>
 8008664:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008668:	1f0c      	subs	r4, r1, #4
 800866a:	2b00      	cmp	r3, #0
 800866c:	bfb8      	it	lt
 800866e:	18e4      	addlt	r4, r4, r3
 8008670:	f000 f8dc 	bl	800882c <__malloc_lock>
 8008674:	4a1c      	ldr	r2, [pc, #112]	; (80086e8 <_free_r+0x8c>)
 8008676:	6813      	ldr	r3, [r2, #0]
 8008678:	b933      	cbnz	r3, 8008688 <_free_r+0x2c>
 800867a:	6063      	str	r3, [r4, #4]
 800867c:	6014      	str	r4, [r2, #0]
 800867e:	4628      	mov	r0, r5
 8008680:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008684:	f000 b8d8 	b.w	8008838 <__malloc_unlock>
 8008688:	42a3      	cmp	r3, r4
 800868a:	d908      	bls.n	800869e <_free_r+0x42>
 800868c:	6820      	ldr	r0, [r4, #0]
 800868e:	1821      	adds	r1, r4, r0
 8008690:	428b      	cmp	r3, r1
 8008692:	bf01      	itttt	eq
 8008694:	6819      	ldreq	r1, [r3, #0]
 8008696:	685b      	ldreq	r3, [r3, #4]
 8008698:	1809      	addeq	r1, r1, r0
 800869a:	6021      	streq	r1, [r4, #0]
 800869c:	e7ed      	b.n	800867a <_free_r+0x1e>
 800869e:	461a      	mov	r2, r3
 80086a0:	685b      	ldr	r3, [r3, #4]
 80086a2:	b10b      	cbz	r3, 80086a8 <_free_r+0x4c>
 80086a4:	42a3      	cmp	r3, r4
 80086a6:	d9fa      	bls.n	800869e <_free_r+0x42>
 80086a8:	6811      	ldr	r1, [r2, #0]
 80086aa:	1850      	adds	r0, r2, r1
 80086ac:	42a0      	cmp	r0, r4
 80086ae:	d10b      	bne.n	80086c8 <_free_r+0x6c>
 80086b0:	6820      	ldr	r0, [r4, #0]
 80086b2:	4401      	add	r1, r0
 80086b4:	1850      	adds	r0, r2, r1
 80086b6:	4283      	cmp	r3, r0
 80086b8:	6011      	str	r1, [r2, #0]
 80086ba:	d1e0      	bne.n	800867e <_free_r+0x22>
 80086bc:	6818      	ldr	r0, [r3, #0]
 80086be:	685b      	ldr	r3, [r3, #4]
 80086c0:	4408      	add	r0, r1
 80086c2:	6010      	str	r0, [r2, #0]
 80086c4:	6053      	str	r3, [r2, #4]
 80086c6:	e7da      	b.n	800867e <_free_r+0x22>
 80086c8:	d902      	bls.n	80086d0 <_free_r+0x74>
 80086ca:	230c      	movs	r3, #12
 80086cc:	602b      	str	r3, [r5, #0]
 80086ce:	e7d6      	b.n	800867e <_free_r+0x22>
 80086d0:	6820      	ldr	r0, [r4, #0]
 80086d2:	1821      	adds	r1, r4, r0
 80086d4:	428b      	cmp	r3, r1
 80086d6:	bf01      	itttt	eq
 80086d8:	6819      	ldreq	r1, [r3, #0]
 80086da:	685b      	ldreq	r3, [r3, #4]
 80086dc:	1809      	addeq	r1, r1, r0
 80086de:	6021      	streq	r1, [r4, #0]
 80086e0:	6063      	str	r3, [r4, #4]
 80086e2:	6054      	str	r4, [r2, #4]
 80086e4:	e7cb      	b.n	800867e <_free_r+0x22>
 80086e6:	bd38      	pop	{r3, r4, r5, pc}
 80086e8:	20001560 	.word	0x20001560

080086ec <sbrk_aligned>:
 80086ec:	b570      	push	{r4, r5, r6, lr}
 80086ee:	4e0e      	ldr	r6, [pc, #56]	; (8008728 <sbrk_aligned+0x3c>)
 80086f0:	460c      	mov	r4, r1
 80086f2:	6831      	ldr	r1, [r6, #0]
 80086f4:	4605      	mov	r5, r0
 80086f6:	b911      	cbnz	r1, 80086fe <sbrk_aligned+0x12>
 80086f8:	f000 fbaa 	bl	8008e50 <_sbrk_r>
 80086fc:	6030      	str	r0, [r6, #0]
 80086fe:	4621      	mov	r1, r4
 8008700:	4628      	mov	r0, r5
 8008702:	f000 fba5 	bl	8008e50 <_sbrk_r>
 8008706:	1c43      	adds	r3, r0, #1
 8008708:	d00a      	beq.n	8008720 <sbrk_aligned+0x34>
 800870a:	1cc4      	adds	r4, r0, #3
 800870c:	f024 0403 	bic.w	r4, r4, #3
 8008710:	42a0      	cmp	r0, r4
 8008712:	d007      	beq.n	8008724 <sbrk_aligned+0x38>
 8008714:	1a21      	subs	r1, r4, r0
 8008716:	4628      	mov	r0, r5
 8008718:	f000 fb9a 	bl	8008e50 <_sbrk_r>
 800871c:	3001      	adds	r0, #1
 800871e:	d101      	bne.n	8008724 <sbrk_aligned+0x38>
 8008720:	f04f 34ff 	mov.w	r4, #4294967295
 8008724:	4620      	mov	r0, r4
 8008726:	bd70      	pop	{r4, r5, r6, pc}
 8008728:	20001564 	.word	0x20001564

0800872c <_malloc_r>:
 800872c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008730:	1ccd      	adds	r5, r1, #3
 8008732:	f025 0503 	bic.w	r5, r5, #3
 8008736:	3508      	adds	r5, #8
 8008738:	2d0c      	cmp	r5, #12
 800873a:	bf38      	it	cc
 800873c:	250c      	movcc	r5, #12
 800873e:	2d00      	cmp	r5, #0
 8008740:	4607      	mov	r7, r0
 8008742:	db01      	blt.n	8008748 <_malloc_r+0x1c>
 8008744:	42a9      	cmp	r1, r5
 8008746:	d905      	bls.n	8008754 <_malloc_r+0x28>
 8008748:	230c      	movs	r3, #12
 800874a:	2600      	movs	r6, #0
 800874c:	603b      	str	r3, [r7, #0]
 800874e:	4630      	mov	r0, r6
 8008750:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008754:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008828 <_malloc_r+0xfc>
 8008758:	f000 f868 	bl	800882c <__malloc_lock>
 800875c:	f8d8 3000 	ldr.w	r3, [r8]
 8008760:	461c      	mov	r4, r3
 8008762:	bb5c      	cbnz	r4, 80087bc <_malloc_r+0x90>
 8008764:	4629      	mov	r1, r5
 8008766:	4638      	mov	r0, r7
 8008768:	f7ff ffc0 	bl	80086ec <sbrk_aligned>
 800876c:	1c43      	adds	r3, r0, #1
 800876e:	4604      	mov	r4, r0
 8008770:	d155      	bne.n	800881e <_malloc_r+0xf2>
 8008772:	f8d8 4000 	ldr.w	r4, [r8]
 8008776:	4626      	mov	r6, r4
 8008778:	2e00      	cmp	r6, #0
 800877a:	d145      	bne.n	8008808 <_malloc_r+0xdc>
 800877c:	2c00      	cmp	r4, #0
 800877e:	d048      	beq.n	8008812 <_malloc_r+0xe6>
 8008780:	6823      	ldr	r3, [r4, #0]
 8008782:	4631      	mov	r1, r6
 8008784:	4638      	mov	r0, r7
 8008786:	eb04 0903 	add.w	r9, r4, r3
 800878a:	f000 fb61 	bl	8008e50 <_sbrk_r>
 800878e:	4581      	cmp	r9, r0
 8008790:	d13f      	bne.n	8008812 <_malloc_r+0xe6>
 8008792:	6821      	ldr	r1, [r4, #0]
 8008794:	4638      	mov	r0, r7
 8008796:	1a6d      	subs	r5, r5, r1
 8008798:	4629      	mov	r1, r5
 800879a:	f7ff ffa7 	bl	80086ec <sbrk_aligned>
 800879e:	3001      	adds	r0, #1
 80087a0:	d037      	beq.n	8008812 <_malloc_r+0xe6>
 80087a2:	6823      	ldr	r3, [r4, #0]
 80087a4:	442b      	add	r3, r5
 80087a6:	6023      	str	r3, [r4, #0]
 80087a8:	f8d8 3000 	ldr.w	r3, [r8]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d038      	beq.n	8008822 <_malloc_r+0xf6>
 80087b0:	685a      	ldr	r2, [r3, #4]
 80087b2:	42a2      	cmp	r2, r4
 80087b4:	d12b      	bne.n	800880e <_malloc_r+0xe2>
 80087b6:	2200      	movs	r2, #0
 80087b8:	605a      	str	r2, [r3, #4]
 80087ba:	e00f      	b.n	80087dc <_malloc_r+0xb0>
 80087bc:	6822      	ldr	r2, [r4, #0]
 80087be:	1b52      	subs	r2, r2, r5
 80087c0:	d41f      	bmi.n	8008802 <_malloc_r+0xd6>
 80087c2:	2a0b      	cmp	r2, #11
 80087c4:	d917      	bls.n	80087f6 <_malloc_r+0xca>
 80087c6:	1961      	adds	r1, r4, r5
 80087c8:	42a3      	cmp	r3, r4
 80087ca:	6025      	str	r5, [r4, #0]
 80087cc:	bf18      	it	ne
 80087ce:	6059      	strne	r1, [r3, #4]
 80087d0:	6863      	ldr	r3, [r4, #4]
 80087d2:	bf08      	it	eq
 80087d4:	f8c8 1000 	streq.w	r1, [r8]
 80087d8:	5162      	str	r2, [r4, r5]
 80087da:	604b      	str	r3, [r1, #4]
 80087dc:	4638      	mov	r0, r7
 80087de:	f104 060b 	add.w	r6, r4, #11
 80087e2:	f000 f829 	bl	8008838 <__malloc_unlock>
 80087e6:	f026 0607 	bic.w	r6, r6, #7
 80087ea:	1d23      	adds	r3, r4, #4
 80087ec:	1af2      	subs	r2, r6, r3
 80087ee:	d0ae      	beq.n	800874e <_malloc_r+0x22>
 80087f0:	1b9b      	subs	r3, r3, r6
 80087f2:	50a3      	str	r3, [r4, r2]
 80087f4:	e7ab      	b.n	800874e <_malloc_r+0x22>
 80087f6:	42a3      	cmp	r3, r4
 80087f8:	6862      	ldr	r2, [r4, #4]
 80087fa:	d1dd      	bne.n	80087b8 <_malloc_r+0x8c>
 80087fc:	f8c8 2000 	str.w	r2, [r8]
 8008800:	e7ec      	b.n	80087dc <_malloc_r+0xb0>
 8008802:	4623      	mov	r3, r4
 8008804:	6864      	ldr	r4, [r4, #4]
 8008806:	e7ac      	b.n	8008762 <_malloc_r+0x36>
 8008808:	4634      	mov	r4, r6
 800880a:	6876      	ldr	r6, [r6, #4]
 800880c:	e7b4      	b.n	8008778 <_malloc_r+0x4c>
 800880e:	4613      	mov	r3, r2
 8008810:	e7cc      	b.n	80087ac <_malloc_r+0x80>
 8008812:	230c      	movs	r3, #12
 8008814:	4638      	mov	r0, r7
 8008816:	603b      	str	r3, [r7, #0]
 8008818:	f000 f80e 	bl	8008838 <__malloc_unlock>
 800881c:	e797      	b.n	800874e <_malloc_r+0x22>
 800881e:	6025      	str	r5, [r4, #0]
 8008820:	e7dc      	b.n	80087dc <_malloc_r+0xb0>
 8008822:	605b      	str	r3, [r3, #4]
 8008824:	deff      	udf	#255	; 0xff
 8008826:	bf00      	nop
 8008828:	20001560 	.word	0x20001560

0800882c <__malloc_lock>:
 800882c:	4801      	ldr	r0, [pc, #4]	; (8008834 <__malloc_lock+0x8>)
 800882e:	f7ff bf13 	b.w	8008658 <__retarget_lock_acquire_recursive>
 8008832:	bf00      	nop
 8008834:	2000155c 	.word	0x2000155c

08008838 <__malloc_unlock>:
 8008838:	4801      	ldr	r0, [pc, #4]	; (8008840 <__malloc_unlock+0x8>)
 800883a:	f7ff bf0e 	b.w	800865a <__retarget_lock_release_recursive>
 800883e:	bf00      	nop
 8008840:	2000155c 	.word	0x2000155c

08008844 <__ssputs_r>:
 8008844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008848:	461f      	mov	r7, r3
 800884a:	688e      	ldr	r6, [r1, #8]
 800884c:	4682      	mov	sl, r0
 800884e:	42be      	cmp	r6, r7
 8008850:	460c      	mov	r4, r1
 8008852:	4690      	mov	r8, r2
 8008854:	680b      	ldr	r3, [r1, #0]
 8008856:	d82c      	bhi.n	80088b2 <__ssputs_r+0x6e>
 8008858:	898a      	ldrh	r2, [r1, #12]
 800885a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800885e:	d026      	beq.n	80088ae <__ssputs_r+0x6a>
 8008860:	6965      	ldr	r5, [r4, #20]
 8008862:	6909      	ldr	r1, [r1, #16]
 8008864:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008868:	eba3 0901 	sub.w	r9, r3, r1
 800886c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008870:	1c7b      	adds	r3, r7, #1
 8008872:	444b      	add	r3, r9
 8008874:	106d      	asrs	r5, r5, #1
 8008876:	429d      	cmp	r5, r3
 8008878:	bf38      	it	cc
 800887a:	461d      	movcc	r5, r3
 800887c:	0553      	lsls	r3, r2, #21
 800887e:	d527      	bpl.n	80088d0 <__ssputs_r+0x8c>
 8008880:	4629      	mov	r1, r5
 8008882:	f7ff ff53 	bl	800872c <_malloc_r>
 8008886:	4606      	mov	r6, r0
 8008888:	b360      	cbz	r0, 80088e4 <__ssputs_r+0xa0>
 800888a:	464a      	mov	r2, r9
 800888c:	6921      	ldr	r1, [r4, #16]
 800888e:	f000 fafd 	bl	8008e8c <memcpy>
 8008892:	89a3      	ldrh	r3, [r4, #12]
 8008894:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008898:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800889c:	81a3      	strh	r3, [r4, #12]
 800889e:	6126      	str	r6, [r4, #16]
 80088a0:	444e      	add	r6, r9
 80088a2:	6026      	str	r6, [r4, #0]
 80088a4:	463e      	mov	r6, r7
 80088a6:	6165      	str	r5, [r4, #20]
 80088a8:	eba5 0509 	sub.w	r5, r5, r9
 80088ac:	60a5      	str	r5, [r4, #8]
 80088ae:	42be      	cmp	r6, r7
 80088b0:	d900      	bls.n	80088b4 <__ssputs_r+0x70>
 80088b2:	463e      	mov	r6, r7
 80088b4:	4632      	mov	r2, r6
 80088b6:	4641      	mov	r1, r8
 80088b8:	6820      	ldr	r0, [r4, #0]
 80088ba:	f000 faaf 	bl	8008e1c <memmove>
 80088be:	2000      	movs	r0, #0
 80088c0:	68a3      	ldr	r3, [r4, #8]
 80088c2:	1b9b      	subs	r3, r3, r6
 80088c4:	60a3      	str	r3, [r4, #8]
 80088c6:	6823      	ldr	r3, [r4, #0]
 80088c8:	4433      	add	r3, r6
 80088ca:	6023      	str	r3, [r4, #0]
 80088cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088d0:	462a      	mov	r2, r5
 80088d2:	f000 fae9 	bl	8008ea8 <_realloc_r>
 80088d6:	4606      	mov	r6, r0
 80088d8:	2800      	cmp	r0, #0
 80088da:	d1e0      	bne.n	800889e <__ssputs_r+0x5a>
 80088dc:	4650      	mov	r0, sl
 80088de:	6921      	ldr	r1, [r4, #16]
 80088e0:	f7ff febc 	bl	800865c <_free_r>
 80088e4:	230c      	movs	r3, #12
 80088e6:	f8ca 3000 	str.w	r3, [sl]
 80088ea:	89a3      	ldrh	r3, [r4, #12]
 80088ec:	f04f 30ff 	mov.w	r0, #4294967295
 80088f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088f4:	81a3      	strh	r3, [r4, #12]
 80088f6:	e7e9      	b.n	80088cc <__ssputs_r+0x88>

080088f8 <_svfiprintf_r>:
 80088f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088fc:	4698      	mov	r8, r3
 80088fe:	898b      	ldrh	r3, [r1, #12]
 8008900:	4607      	mov	r7, r0
 8008902:	061b      	lsls	r3, r3, #24
 8008904:	460d      	mov	r5, r1
 8008906:	4614      	mov	r4, r2
 8008908:	b09d      	sub	sp, #116	; 0x74
 800890a:	d50e      	bpl.n	800892a <_svfiprintf_r+0x32>
 800890c:	690b      	ldr	r3, [r1, #16]
 800890e:	b963      	cbnz	r3, 800892a <_svfiprintf_r+0x32>
 8008910:	2140      	movs	r1, #64	; 0x40
 8008912:	f7ff ff0b 	bl	800872c <_malloc_r>
 8008916:	6028      	str	r0, [r5, #0]
 8008918:	6128      	str	r0, [r5, #16]
 800891a:	b920      	cbnz	r0, 8008926 <_svfiprintf_r+0x2e>
 800891c:	230c      	movs	r3, #12
 800891e:	603b      	str	r3, [r7, #0]
 8008920:	f04f 30ff 	mov.w	r0, #4294967295
 8008924:	e0d0      	b.n	8008ac8 <_svfiprintf_r+0x1d0>
 8008926:	2340      	movs	r3, #64	; 0x40
 8008928:	616b      	str	r3, [r5, #20]
 800892a:	2300      	movs	r3, #0
 800892c:	9309      	str	r3, [sp, #36]	; 0x24
 800892e:	2320      	movs	r3, #32
 8008930:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008934:	2330      	movs	r3, #48	; 0x30
 8008936:	f04f 0901 	mov.w	r9, #1
 800893a:	f8cd 800c 	str.w	r8, [sp, #12]
 800893e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8008ae0 <_svfiprintf_r+0x1e8>
 8008942:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008946:	4623      	mov	r3, r4
 8008948:	469a      	mov	sl, r3
 800894a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800894e:	b10a      	cbz	r2, 8008954 <_svfiprintf_r+0x5c>
 8008950:	2a25      	cmp	r2, #37	; 0x25
 8008952:	d1f9      	bne.n	8008948 <_svfiprintf_r+0x50>
 8008954:	ebba 0b04 	subs.w	fp, sl, r4
 8008958:	d00b      	beq.n	8008972 <_svfiprintf_r+0x7a>
 800895a:	465b      	mov	r3, fp
 800895c:	4622      	mov	r2, r4
 800895e:	4629      	mov	r1, r5
 8008960:	4638      	mov	r0, r7
 8008962:	f7ff ff6f 	bl	8008844 <__ssputs_r>
 8008966:	3001      	adds	r0, #1
 8008968:	f000 80a9 	beq.w	8008abe <_svfiprintf_r+0x1c6>
 800896c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800896e:	445a      	add	r2, fp
 8008970:	9209      	str	r2, [sp, #36]	; 0x24
 8008972:	f89a 3000 	ldrb.w	r3, [sl]
 8008976:	2b00      	cmp	r3, #0
 8008978:	f000 80a1 	beq.w	8008abe <_svfiprintf_r+0x1c6>
 800897c:	2300      	movs	r3, #0
 800897e:	f04f 32ff 	mov.w	r2, #4294967295
 8008982:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008986:	f10a 0a01 	add.w	sl, sl, #1
 800898a:	9304      	str	r3, [sp, #16]
 800898c:	9307      	str	r3, [sp, #28]
 800898e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008992:	931a      	str	r3, [sp, #104]	; 0x68
 8008994:	4654      	mov	r4, sl
 8008996:	2205      	movs	r2, #5
 8008998:	f814 1b01 	ldrb.w	r1, [r4], #1
 800899c:	4850      	ldr	r0, [pc, #320]	; (8008ae0 <_svfiprintf_r+0x1e8>)
 800899e:	f000 fa67 	bl	8008e70 <memchr>
 80089a2:	9a04      	ldr	r2, [sp, #16]
 80089a4:	b9d8      	cbnz	r0, 80089de <_svfiprintf_r+0xe6>
 80089a6:	06d0      	lsls	r0, r2, #27
 80089a8:	bf44      	itt	mi
 80089aa:	2320      	movmi	r3, #32
 80089ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80089b0:	0711      	lsls	r1, r2, #28
 80089b2:	bf44      	itt	mi
 80089b4:	232b      	movmi	r3, #43	; 0x2b
 80089b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80089ba:	f89a 3000 	ldrb.w	r3, [sl]
 80089be:	2b2a      	cmp	r3, #42	; 0x2a
 80089c0:	d015      	beq.n	80089ee <_svfiprintf_r+0xf6>
 80089c2:	4654      	mov	r4, sl
 80089c4:	2000      	movs	r0, #0
 80089c6:	f04f 0c0a 	mov.w	ip, #10
 80089ca:	9a07      	ldr	r2, [sp, #28]
 80089cc:	4621      	mov	r1, r4
 80089ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80089d2:	3b30      	subs	r3, #48	; 0x30
 80089d4:	2b09      	cmp	r3, #9
 80089d6:	d94d      	bls.n	8008a74 <_svfiprintf_r+0x17c>
 80089d8:	b1b0      	cbz	r0, 8008a08 <_svfiprintf_r+0x110>
 80089da:	9207      	str	r2, [sp, #28]
 80089dc:	e014      	b.n	8008a08 <_svfiprintf_r+0x110>
 80089de:	eba0 0308 	sub.w	r3, r0, r8
 80089e2:	fa09 f303 	lsl.w	r3, r9, r3
 80089e6:	4313      	orrs	r3, r2
 80089e8:	46a2      	mov	sl, r4
 80089ea:	9304      	str	r3, [sp, #16]
 80089ec:	e7d2      	b.n	8008994 <_svfiprintf_r+0x9c>
 80089ee:	9b03      	ldr	r3, [sp, #12]
 80089f0:	1d19      	adds	r1, r3, #4
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	9103      	str	r1, [sp, #12]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	bfbb      	ittet	lt
 80089fa:	425b      	neglt	r3, r3
 80089fc:	f042 0202 	orrlt.w	r2, r2, #2
 8008a00:	9307      	strge	r3, [sp, #28]
 8008a02:	9307      	strlt	r3, [sp, #28]
 8008a04:	bfb8      	it	lt
 8008a06:	9204      	strlt	r2, [sp, #16]
 8008a08:	7823      	ldrb	r3, [r4, #0]
 8008a0a:	2b2e      	cmp	r3, #46	; 0x2e
 8008a0c:	d10c      	bne.n	8008a28 <_svfiprintf_r+0x130>
 8008a0e:	7863      	ldrb	r3, [r4, #1]
 8008a10:	2b2a      	cmp	r3, #42	; 0x2a
 8008a12:	d134      	bne.n	8008a7e <_svfiprintf_r+0x186>
 8008a14:	9b03      	ldr	r3, [sp, #12]
 8008a16:	3402      	adds	r4, #2
 8008a18:	1d1a      	adds	r2, r3, #4
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	9203      	str	r2, [sp, #12]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	bfb8      	it	lt
 8008a22:	f04f 33ff 	movlt.w	r3, #4294967295
 8008a26:	9305      	str	r3, [sp, #20]
 8008a28:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8008ae4 <_svfiprintf_r+0x1ec>
 8008a2c:	2203      	movs	r2, #3
 8008a2e:	4650      	mov	r0, sl
 8008a30:	7821      	ldrb	r1, [r4, #0]
 8008a32:	f000 fa1d 	bl	8008e70 <memchr>
 8008a36:	b138      	cbz	r0, 8008a48 <_svfiprintf_r+0x150>
 8008a38:	2240      	movs	r2, #64	; 0x40
 8008a3a:	9b04      	ldr	r3, [sp, #16]
 8008a3c:	eba0 000a 	sub.w	r0, r0, sl
 8008a40:	4082      	lsls	r2, r0
 8008a42:	4313      	orrs	r3, r2
 8008a44:	3401      	adds	r4, #1
 8008a46:	9304      	str	r3, [sp, #16]
 8008a48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a4c:	2206      	movs	r2, #6
 8008a4e:	4826      	ldr	r0, [pc, #152]	; (8008ae8 <_svfiprintf_r+0x1f0>)
 8008a50:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008a54:	f000 fa0c 	bl	8008e70 <memchr>
 8008a58:	2800      	cmp	r0, #0
 8008a5a:	d038      	beq.n	8008ace <_svfiprintf_r+0x1d6>
 8008a5c:	4b23      	ldr	r3, [pc, #140]	; (8008aec <_svfiprintf_r+0x1f4>)
 8008a5e:	bb1b      	cbnz	r3, 8008aa8 <_svfiprintf_r+0x1b0>
 8008a60:	9b03      	ldr	r3, [sp, #12]
 8008a62:	3307      	adds	r3, #7
 8008a64:	f023 0307 	bic.w	r3, r3, #7
 8008a68:	3308      	adds	r3, #8
 8008a6a:	9303      	str	r3, [sp, #12]
 8008a6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a6e:	4433      	add	r3, r6
 8008a70:	9309      	str	r3, [sp, #36]	; 0x24
 8008a72:	e768      	b.n	8008946 <_svfiprintf_r+0x4e>
 8008a74:	460c      	mov	r4, r1
 8008a76:	2001      	movs	r0, #1
 8008a78:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a7c:	e7a6      	b.n	80089cc <_svfiprintf_r+0xd4>
 8008a7e:	2300      	movs	r3, #0
 8008a80:	f04f 0c0a 	mov.w	ip, #10
 8008a84:	4619      	mov	r1, r3
 8008a86:	3401      	adds	r4, #1
 8008a88:	9305      	str	r3, [sp, #20]
 8008a8a:	4620      	mov	r0, r4
 8008a8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a90:	3a30      	subs	r2, #48	; 0x30
 8008a92:	2a09      	cmp	r2, #9
 8008a94:	d903      	bls.n	8008a9e <_svfiprintf_r+0x1a6>
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d0c6      	beq.n	8008a28 <_svfiprintf_r+0x130>
 8008a9a:	9105      	str	r1, [sp, #20]
 8008a9c:	e7c4      	b.n	8008a28 <_svfiprintf_r+0x130>
 8008a9e:	4604      	mov	r4, r0
 8008aa0:	2301      	movs	r3, #1
 8008aa2:	fb0c 2101 	mla	r1, ip, r1, r2
 8008aa6:	e7f0      	b.n	8008a8a <_svfiprintf_r+0x192>
 8008aa8:	ab03      	add	r3, sp, #12
 8008aaa:	9300      	str	r3, [sp, #0]
 8008aac:	462a      	mov	r2, r5
 8008aae:	4638      	mov	r0, r7
 8008ab0:	4b0f      	ldr	r3, [pc, #60]	; (8008af0 <_svfiprintf_r+0x1f8>)
 8008ab2:	a904      	add	r1, sp, #16
 8008ab4:	f3af 8000 	nop.w
 8008ab8:	1c42      	adds	r2, r0, #1
 8008aba:	4606      	mov	r6, r0
 8008abc:	d1d6      	bne.n	8008a6c <_svfiprintf_r+0x174>
 8008abe:	89ab      	ldrh	r3, [r5, #12]
 8008ac0:	065b      	lsls	r3, r3, #25
 8008ac2:	f53f af2d 	bmi.w	8008920 <_svfiprintf_r+0x28>
 8008ac6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008ac8:	b01d      	add	sp, #116	; 0x74
 8008aca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ace:	ab03      	add	r3, sp, #12
 8008ad0:	9300      	str	r3, [sp, #0]
 8008ad2:	462a      	mov	r2, r5
 8008ad4:	4638      	mov	r0, r7
 8008ad6:	4b06      	ldr	r3, [pc, #24]	; (8008af0 <_svfiprintf_r+0x1f8>)
 8008ad8:	a904      	add	r1, sp, #16
 8008ada:	f000 f87d 	bl	8008bd8 <_printf_i>
 8008ade:	e7eb      	b.n	8008ab8 <_svfiprintf_r+0x1c0>
 8008ae0:	080093c2 	.word	0x080093c2
 8008ae4:	080093c8 	.word	0x080093c8
 8008ae8:	080093cc 	.word	0x080093cc
 8008aec:	00000000 	.word	0x00000000
 8008af0:	08008845 	.word	0x08008845

08008af4 <_printf_common>:
 8008af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008af8:	4616      	mov	r6, r2
 8008afa:	4699      	mov	r9, r3
 8008afc:	688a      	ldr	r2, [r1, #8]
 8008afe:	690b      	ldr	r3, [r1, #16]
 8008b00:	4607      	mov	r7, r0
 8008b02:	4293      	cmp	r3, r2
 8008b04:	bfb8      	it	lt
 8008b06:	4613      	movlt	r3, r2
 8008b08:	6033      	str	r3, [r6, #0]
 8008b0a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008b0e:	460c      	mov	r4, r1
 8008b10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008b14:	b10a      	cbz	r2, 8008b1a <_printf_common+0x26>
 8008b16:	3301      	adds	r3, #1
 8008b18:	6033      	str	r3, [r6, #0]
 8008b1a:	6823      	ldr	r3, [r4, #0]
 8008b1c:	0699      	lsls	r1, r3, #26
 8008b1e:	bf42      	ittt	mi
 8008b20:	6833      	ldrmi	r3, [r6, #0]
 8008b22:	3302      	addmi	r3, #2
 8008b24:	6033      	strmi	r3, [r6, #0]
 8008b26:	6825      	ldr	r5, [r4, #0]
 8008b28:	f015 0506 	ands.w	r5, r5, #6
 8008b2c:	d106      	bne.n	8008b3c <_printf_common+0x48>
 8008b2e:	f104 0a19 	add.w	sl, r4, #25
 8008b32:	68e3      	ldr	r3, [r4, #12]
 8008b34:	6832      	ldr	r2, [r6, #0]
 8008b36:	1a9b      	subs	r3, r3, r2
 8008b38:	42ab      	cmp	r3, r5
 8008b3a:	dc2b      	bgt.n	8008b94 <_printf_common+0xa0>
 8008b3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008b40:	1e13      	subs	r3, r2, #0
 8008b42:	6822      	ldr	r2, [r4, #0]
 8008b44:	bf18      	it	ne
 8008b46:	2301      	movne	r3, #1
 8008b48:	0692      	lsls	r2, r2, #26
 8008b4a:	d430      	bmi.n	8008bae <_printf_common+0xba>
 8008b4c:	4649      	mov	r1, r9
 8008b4e:	4638      	mov	r0, r7
 8008b50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008b54:	47c0      	blx	r8
 8008b56:	3001      	adds	r0, #1
 8008b58:	d023      	beq.n	8008ba2 <_printf_common+0xae>
 8008b5a:	6823      	ldr	r3, [r4, #0]
 8008b5c:	6922      	ldr	r2, [r4, #16]
 8008b5e:	f003 0306 	and.w	r3, r3, #6
 8008b62:	2b04      	cmp	r3, #4
 8008b64:	bf14      	ite	ne
 8008b66:	2500      	movne	r5, #0
 8008b68:	6833      	ldreq	r3, [r6, #0]
 8008b6a:	f04f 0600 	mov.w	r6, #0
 8008b6e:	bf08      	it	eq
 8008b70:	68e5      	ldreq	r5, [r4, #12]
 8008b72:	f104 041a 	add.w	r4, r4, #26
 8008b76:	bf08      	it	eq
 8008b78:	1aed      	subeq	r5, r5, r3
 8008b7a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008b7e:	bf08      	it	eq
 8008b80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b84:	4293      	cmp	r3, r2
 8008b86:	bfc4      	itt	gt
 8008b88:	1a9b      	subgt	r3, r3, r2
 8008b8a:	18ed      	addgt	r5, r5, r3
 8008b8c:	42b5      	cmp	r5, r6
 8008b8e:	d11a      	bne.n	8008bc6 <_printf_common+0xd2>
 8008b90:	2000      	movs	r0, #0
 8008b92:	e008      	b.n	8008ba6 <_printf_common+0xb2>
 8008b94:	2301      	movs	r3, #1
 8008b96:	4652      	mov	r2, sl
 8008b98:	4649      	mov	r1, r9
 8008b9a:	4638      	mov	r0, r7
 8008b9c:	47c0      	blx	r8
 8008b9e:	3001      	adds	r0, #1
 8008ba0:	d103      	bne.n	8008baa <_printf_common+0xb6>
 8008ba2:	f04f 30ff 	mov.w	r0, #4294967295
 8008ba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008baa:	3501      	adds	r5, #1
 8008bac:	e7c1      	b.n	8008b32 <_printf_common+0x3e>
 8008bae:	2030      	movs	r0, #48	; 0x30
 8008bb0:	18e1      	adds	r1, r4, r3
 8008bb2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008bb6:	1c5a      	adds	r2, r3, #1
 8008bb8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008bbc:	4422      	add	r2, r4
 8008bbe:	3302      	adds	r3, #2
 8008bc0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008bc4:	e7c2      	b.n	8008b4c <_printf_common+0x58>
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	4622      	mov	r2, r4
 8008bca:	4649      	mov	r1, r9
 8008bcc:	4638      	mov	r0, r7
 8008bce:	47c0      	blx	r8
 8008bd0:	3001      	adds	r0, #1
 8008bd2:	d0e6      	beq.n	8008ba2 <_printf_common+0xae>
 8008bd4:	3601      	adds	r6, #1
 8008bd6:	e7d9      	b.n	8008b8c <_printf_common+0x98>

08008bd8 <_printf_i>:
 8008bd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008bdc:	7e0f      	ldrb	r7, [r1, #24]
 8008bde:	4691      	mov	r9, r2
 8008be0:	2f78      	cmp	r7, #120	; 0x78
 8008be2:	4680      	mov	r8, r0
 8008be4:	460c      	mov	r4, r1
 8008be6:	469a      	mov	sl, r3
 8008be8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008bea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008bee:	d807      	bhi.n	8008c00 <_printf_i+0x28>
 8008bf0:	2f62      	cmp	r7, #98	; 0x62
 8008bf2:	d80a      	bhi.n	8008c0a <_printf_i+0x32>
 8008bf4:	2f00      	cmp	r7, #0
 8008bf6:	f000 80d5 	beq.w	8008da4 <_printf_i+0x1cc>
 8008bfa:	2f58      	cmp	r7, #88	; 0x58
 8008bfc:	f000 80c1 	beq.w	8008d82 <_printf_i+0x1aa>
 8008c00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008c08:	e03a      	b.n	8008c80 <_printf_i+0xa8>
 8008c0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008c0e:	2b15      	cmp	r3, #21
 8008c10:	d8f6      	bhi.n	8008c00 <_printf_i+0x28>
 8008c12:	a101      	add	r1, pc, #4	; (adr r1, 8008c18 <_printf_i+0x40>)
 8008c14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008c18:	08008c71 	.word	0x08008c71
 8008c1c:	08008c85 	.word	0x08008c85
 8008c20:	08008c01 	.word	0x08008c01
 8008c24:	08008c01 	.word	0x08008c01
 8008c28:	08008c01 	.word	0x08008c01
 8008c2c:	08008c01 	.word	0x08008c01
 8008c30:	08008c85 	.word	0x08008c85
 8008c34:	08008c01 	.word	0x08008c01
 8008c38:	08008c01 	.word	0x08008c01
 8008c3c:	08008c01 	.word	0x08008c01
 8008c40:	08008c01 	.word	0x08008c01
 8008c44:	08008d8b 	.word	0x08008d8b
 8008c48:	08008cb1 	.word	0x08008cb1
 8008c4c:	08008d45 	.word	0x08008d45
 8008c50:	08008c01 	.word	0x08008c01
 8008c54:	08008c01 	.word	0x08008c01
 8008c58:	08008dad 	.word	0x08008dad
 8008c5c:	08008c01 	.word	0x08008c01
 8008c60:	08008cb1 	.word	0x08008cb1
 8008c64:	08008c01 	.word	0x08008c01
 8008c68:	08008c01 	.word	0x08008c01
 8008c6c:	08008d4d 	.word	0x08008d4d
 8008c70:	682b      	ldr	r3, [r5, #0]
 8008c72:	1d1a      	adds	r2, r3, #4
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	602a      	str	r2, [r5, #0]
 8008c78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008c80:	2301      	movs	r3, #1
 8008c82:	e0a0      	b.n	8008dc6 <_printf_i+0x1ee>
 8008c84:	6820      	ldr	r0, [r4, #0]
 8008c86:	682b      	ldr	r3, [r5, #0]
 8008c88:	0607      	lsls	r7, r0, #24
 8008c8a:	f103 0104 	add.w	r1, r3, #4
 8008c8e:	6029      	str	r1, [r5, #0]
 8008c90:	d501      	bpl.n	8008c96 <_printf_i+0xbe>
 8008c92:	681e      	ldr	r6, [r3, #0]
 8008c94:	e003      	b.n	8008c9e <_printf_i+0xc6>
 8008c96:	0646      	lsls	r6, r0, #25
 8008c98:	d5fb      	bpl.n	8008c92 <_printf_i+0xba>
 8008c9a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008c9e:	2e00      	cmp	r6, #0
 8008ca0:	da03      	bge.n	8008caa <_printf_i+0xd2>
 8008ca2:	232d      	movs	r3, #45	; 0x2d
 8008ca4:	4276      	negs	r6, r6
 8008ca6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008caa:	230a      	movs	r3, #10
 8008cac:	4859      	ldr	r0, [pc, #356]	; (8008e14 <_printf_i+0x23c>)
 8008cae:	e012      	b.n	8008cd6 <_printf_i+0xfe>
 8008cb0:	682b      	ldr	r3, [r5, #0]
 8008cb2:	6820      	ldr	r0, [r4, #0]
 8008cb4:	1d19      	adds	r1, r3, #4
 8008cb6:	6029      	str	r1, [r5, #0]
 8008cb8:	0605      	lsls	r5, r0, #24
 8008cba:	d501      	bpl.n	8008cc0 <_printf_i+0xe8>
 8008cbc:	681e      	ldr	r6, [r3, #0]
 8008cbe:	e002      	b.n	8008cc6 <_printf_i+0xee>
 8008cc0:	0641      	lsls	r1, r0, #25
 8008cc2:	d5fb      	bpl.n	8008cbc <_printf_i+0xe4>
 8008cc4:	881e      	ldrh	r6, [r3, #0]
 8008cc6:	2f6f      	cmp	r7, #111	; 0x6f
 8008cc8:	bf0c      	ite	eq
 8008cca:	2308      	moveq	r3, #8
 8008ccc:	230a      	movne	r3, #10
 8008cce:	4851      	ldr	r0, [pc, #324]	; (8008e14 <_printf_i+0x23c>)
 8008cd0:	2100      	movs	r1, #0
 8008cd2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008cd6:	6865      	ldr	r5, [r4, #4]
 8008cd8:	2d00      	cmp	r5, #0
 8008cda:	bfa8      	it	ge
 8008cdc:	6821      	ldrge	r1, [r4, #0]
 8008cde:	60a5      	str	r5, [r4, #8]
 8008ce0:	bfa4      	itt	ge
 8008ce2:	f021 0104 	bicge.w	r1, r1, #4
 8008ce6:	6021      	strge	r1, [r4, #0]
 8008ce8:	b90e      	cbnz	r6, 8008cee <_printf_i+0x116>
 8008cea:	2d00      	cmp	r5, #0
 8008cec:	d04b      	beq.n	8008d86 <_printf_i+0x1ae>
 8008cee:	4615      	mov	r5, r2
 8008cf0:	fbb6 f1f3 	udiv	r1, r6, r3
 8008cf4:	fb03 6711 	mls	r7, r3, r1, r6
 8008cf8:	5dc7      	ldrb	r7, [r0, r7]
 8008cfa:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008cfe:	4637      	mov	r7, r6
 8008d00:	42bb      	cmp	r3, r7
 8008d02:	460e      	mov	r6, r1
 8008d04:	d9f4      	bls.n	8008cf0 <_printf_i+0x118>
 8008d06:	2b08      	cmp	r3, #8
 8008d08:	d10b      	bne.n	8008d22 <_printf_i+0x14a>
 8008d0a:	6823      	ldr	r3, [r4, #0]
 8008d0c:	07de      	lsls	r6, r3, #31
 8008d0e:	d508      	bpl.n	8008d22 <_printf_i+0x14a>
 8008d10:	6923      	ldr	r3, [r4, #16]
 8008d12:	6861      	ldr	r1, [r4, #4]
 8008d14:	4299      	cmp	r1, r3
 8008d16:	bfde      	ittt	le
 8008d18:	2330      	movle	r3, #48	; 0x30
 8008d1a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008d1e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008d22:	1b52      	subs	r2, r2, r5
 8008d24:	6122      	str	r2, [r4, #16]
 8008d26:	464b      	mov	r3, r9
 8008d28:	4621      	mov	r1, r4
 8008d2a:	4640      	mov	r0, r8
 8008d2c:	f8cd a000 	str.w	sl, [sp]
 8008d30:	aa03      	add	r2, sp, #12
 8008d32:	f7ff fedf 	bl	8008af4 <_printf_common>
 8008d36:	3001      	adds	r0, #1
 8008d38:	d14a      	bne.n	8008dd0 <_printf_i+0x1f8>
 8008d3a:	f04f 30ff 	mov.w	r0, #4294967295
 8008d3e:	b004      	add	sp, #16
 8008d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d44:	6823      	ldr	r3, [r4, #0]
 8008d46:	f043 0320 	orr.w	r3, r3, #32
 8008d4a:	6023      	str	r3, [r4, #0]
 8008d4c:	2778      	movs	r7, #120	; 0x78
 8008d4e:	4832      	ldr	r0, [pc, #200]	; (8008e18 <_printf_i+0x240>)
 8008d50:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008d54:	6823      	ldr	r3, [r4, #0]
 8008d56:	6829      	ldr	r1, [r5, #0]
 8008d58:	061f      	lsls	r7, r3, #24
 8008d5a:	f851 6b04 	ldr.w	r6, [r1], #4
 8008d5e:	d402      	bmi.n	8008d66 <_printf_i+0x18e>
 8008d60:	065f      	lsls	r7, r3, #25
 8008d62:	bf48      	it	mi
 8008d64:	b2b6      	uxthmi	r6, r6
 8008d66:	07df      	lsls	r7, r3, #31
 8008d68:	bf48      	it	mi
 8008d6a:	f043 0320 	orrmi.w	r3, r3, #32
 8008d6e:	6029      	str	r1, [r5, #0]
 8008d70:	bf48      	it	mi
 8008d72:	6023      	strmi	r3, [r4, #0]
 8008d74:	b91e      	cbnz	r6, 8008d7e <_printf_i+0x1a6>
 8008d76:	6823      	ldr	r3, [r4, #0]
 8008d78:	f023 0320 	bic.w	r3, r3, #32
 8008d7c:	6023      	str	r3, [r4, #0]
 8008d7e:	2310      	movs	r3, #16
 8008d80:	e7a6      	b.n	8008cd0 <_printf_i+0xf8>
 8008d82:	4824      	ldr	r0, [pc, #144]	; (8008e14 <_printf_i+0x23c>)
 8008d84:	e7e4      	b.n	8008d50 <_printf_i+0x178>
 8008d86:	4615      	mov	r5, r2
 8008d88:	e7bd      	b.n	8008d06 <_printf_i+0x12e>
 8008d8a:	682b      	ldr	r3, [r5, #0]
 8008d8c:	6826      	ldr	r6, [r4, #0]
 8008d8e:	1d18      	adds	r0, r3, #4
 8008d90:	6961      	ldr	r1, [r4, #20]
 8008d92:	6028      	str	r0, [r5, #0]
 8008d94:	0635      	lsls	r5, r6, #24
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	d501      	bpl.n	8008d9e <_printf_i+0x1c6>
 8008d9a:	6019      	str	r1, [r3, #0]
 8008d9c:	e002      	b.n	8008da4 <_printf_i+0x1cc>
 8008d9e:	0670      	lsls	r0, r6, #25
 8008da0:	d5fb      	bpl.n	8008d9a <_printf_i+0x1c2>
 8008da2:	8019      	strh	r1, [r3, #0]
 8008da4:	2300      	movs	r3, #0
 8008da6:	4615      	mov	r5, r2
 8008da8:	6123      	str	r3, [r4, #16]
 8008daa:	e7bc      	b.n	8008d26 <_printf_i+0x14e>
 8008dac:	682b      	ldr	r3, [r5, #0]
 8008dae:	2100      	movs	r1, #0
 8008db0:	1d1a      	adds	r2, r3, #4
 8008db2:	602a      	str	r2, [r5, #0]
 8008db4:	681d      	ldr	r5, [r3, #0]
 8008db6:	6862      	ldr	r2, [r4, #4]
 8008db8:	4628      	mov	r0, r5
 8008dba:	f000 f859 	bl	8008e70 <memchr>
 8008dbe:	b108      	cbz	r0, 8008dc4 <_printf_i+0x1ec>
 8008dc0:	1b40      	subs	r0, r0, r5
 8008dc2:	6060      	str	r0, [r4, #4]
 8008dc4:	6863      	ldr	r3, [r4, #4]
 8008dc6:	6123      	str	r3, [r4, #16]
 8008dc8:	2300      	movs	r3, #0
 8008dca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008dce:	e7aa      	b.n	8008d26 <_printf_i+0x14e>
 8008dd0:	462a      	mov	r2, r5
 8008dd2:	4649      	mov	r1, r9
 8008dd4:	4640      	mov	r0, r8
 8008dd6:	6923      	ldr	r3, [r4, #16]
 8008dd8:	47d0      	blx	sl
 8008dda:	3001      	adds	r0, #1
 8008ddc:	d0ad      	beq.n	8008d3a <_printf_i+0x162>
 8008dde:	6823      	ldr	r3, [r4, #0]
 8008de0:	079b      	lsls	r3, r3, #30
 8008de2:	d413      	bmi.n	8008e0c <_printf_i+0x234>
 8008de4:	68e0      	ldr	r0, [r4, #12]
 8008de6:	9b03      	ldr	r3, [sp, #12]
 8008de8:	4298      	cmp	r0, r3
 8008dea:	bfb8      	it	lt
 8008dec:	4618      	movlt	r0, r3
 8008dee:	e7a6      	b.n	8008d3e <_printf_i+0x166>
 8008df0:	2301      	movs	r3, #1
 8008df2:	4632      	mov	r2, r6
 8008df4:	4649      	mov	r1, r9
 8008df6:	4640      	mov	r0, r8
 8008df8:	47d0      	blx	sl
 8008dfa:	3001      	adds	r0, #1
 8008dfc:	d09d      	beq.n	8008d3a <_printf_i+0x162>
 8008dfe:	3501      	adds	r5, #1
 8008e00:	68e3      	ldr	r3, [r4, #12]
 8008e02:	9903      	ldr	r1, [sp, #12]
 8008e04:	1a5b      	subs	r3, r3, r1
 8008e06:	42ab      	cmp	r3, r5
 8008e08:	dcf2      	bgt.n	8008df0 <_printf_i+0x218>
 8008e0a:	e7eb      	b.n	8008de4 <_printf_i+0x20c>
 8008e0c:	2500      	movs	r5, #0
 8008e0e:	f104 0619 	add.w	r6, r4, #25
 8008e12:	e7f5      	b.n	8008e00 <_printf_i+0x228>
 8008e14:	080093d3 	.word	0x080093d3
 8008e18:	080093e4 	.word	0x080093e4

08008e1c <memmove>:
 8008e1c:	4288      	cmp	r0, r1
 8008e1e:	b510      	push	{r4, lr}
 8008e20:	eb01 0402 	add.w	r4, r1, r2
 8008e24:	d902      	bls.n	8008e2c <memmove+0x10>
 8008e26:	4284      	cmp	r4, r0
 8008e28:	4623      	mov	r3, r4
 8008e2a:	d807      	bhi.n	8008e3c <memmove+0x20>
 8008e2c:	1e43      	subs	r3, r0, #1
 8008e2e:	42a1      	cmp	r1, r4
 8008e30:	d008      	beq.n	8008e44 <memmove+0x28>
 8008e32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008e36:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008e3a:	e7f8      	b.n	8008e2e <memmove+0x12>
 8008e3c:	4601      	mov	r1, r0
 8008e3e:	4402      	add	r2, r0
 8008e40:	428a      	cmp	r2, r1
 8008e42:	d100      	bne.n	8008e46 <memmove+0x2a>
 8008e44:	bd10      	pop	{r4, pc}
 8008e46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008e4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008e4e:	e7f7      	b.n	8008e40 <memmove+0x24>

08008e50 <_sbrk_r>:
 8008e50:	b538      	push	{r3, r4, r5, lr}
 8008e52:	2300      	movs	r3, #0
 8008e54:	4d05      	ldr	r5, [pc, #20]	; (8008e6c <_sbrk_r+0x1c>)
 8008e56:	4604      	mov	r4, r0
 8008e58:	4608      	mov	r0, r1
 8008e5a:	602b      	str	r3, [r5, #0]
 8008e5c:	f7f7 fcf6 	bl	800084c <_sbrk>
 8008e60:	1c43      	adds	r3, r0, #1
 8008e62:	d102      	bne.n	8008e6a <_sbrk_r+0x1a>
 8008e64:	682b      	ldr	r3, [r5, #0]
 8008e66:	b103      	cbz	r3, 8008e6a <_sbrk_r+0x1a>
 8008e68:	6023      	str	r3, [r4, #0]
 8008e6a:	bd38      	pop	{r3, r4, r5, pc}
 8008e6c:	20001558 	.word	0x20001558

08008e70 <memchr>:
 8008e70:	4603      	mov	r3, r0
 8008e72:	b510      	push	{r4, lr}
 8008e74:	b2c9      	uxtb	r1, r1
 8008e76:	4402      	add	r2, r0
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	d101      	bne.n	8008e82 <memchr+0x12>
 8008e7e:	2000      	movs	r0, #0
 8008e80:	e003      	b.n	8008e8a <memchr+0x1a>
 8008e82:	7804      	ldrb	r4, [r0, #0]
 8008e84:	3301      	adds	r3, #1
 8008e86:	428c      	cmp	r4, r1
 8008e88:	d1f6      	bne.n	8008e78 <memchr+0x8>
 8008e8a:	bd10      	pop	{r4, pc}

08008e8c <memcpy>:
 8008e8c:	440a      	add	r2, r1
 8008e8e:	4291      	cmp	r1, r2
 8008e90:	f100 33ff 	add.w	r3, r0, #4294967295
 8008e94:	d100      	bne.n	8008e98 <memcpy+0xc>
 8008e96:	4770      	bx	lr
 8008e98:	b510      	push	{r4, lr}
 8008e9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e9e:	4291      	cmp	r1, r2
 8008ea0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ea4:	d1f9      	bne.n	8008e9a <memcpy+0xe>
 8008ea6:	bd10      	pop	{r4, pc}

08008ea8 <_realloc_r>:
 8008ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008eac:	4680      	mov	r8, r0
 8008eae:	4614      	mov	r4, r2
 8008eb0:	460e      	mov	r6, r1
 8008eb2:	b921      	cbnz	r1, 8008ebe <_realloc_r+0x16>
 8008eb4:	4611      	mov	r1, r2
 8008eb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008eba:	f7ff bc37 	b.w	800872c <_malloc_r>
 8008ebe:	b92a      	cbnz	r2, 8008ecc <_realloc_r+0x24>
 8008ec0:	f7ff fbcc 	bl	800865c <_free_r>
 8008ec4:	4625      	mov	r5, r4
 8008ec6:	4628      	mov	r0, r5
 8008ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ecc:	f000 f81b 	bl	8008f06 <_malloc_usable_size_r>
 8008ed0:	4284      	cmp	r4, r0
 8008ed2:	4607      	mov	r7, r0
 8008ed4:	d802      	bhi.n	8008edc <_realloc_r+0x34>
 8008ed6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008eda:	d812      	bhi.n	8008f02 <_realloc_r+0x5a>
 8008edc:	4621      	mov	r1, r4
 8008ede:	4640      	mov	r0, r8
 8008ee0:	f7ff fc24 	bl	800872c <_malloc_r>
 8008ee4:	4605      	mov	r5, r0
 8008ee6:	2800      	cmp	r0, #0
 8008ee8:	d0ed      	beq.n	8008ec6 <_realloc_r+0x1e>
 8008eea:	42bc      	cmp	r4, r7
 8008eec:	4622      	mov	r2, r4
 8008eee:	4631      	mov	r1, r6
 8008ef0:	bf28      	it	cs
 8008ef2:	463a      	movcs	r2, r7
 8008ef4:	f7ff ffca 	bl	8008e8c <memcpy>
 8008ef8:	4631      	mov	r1, r6
 8008efa:	4640      	mov	r0, r8
 8008efc:	f7ff fbae 	bl	800865c <_free_r>
 8008f00:	e7e1      	b.n	8008ec6 <_realloc_r+0x1e>
 8008f02:	4635      	mov	r5, r6
 8008f04:	e7df      	b.n	8008ec6 <_realloc_r+0x1e>

08008f06 <_malloc_usable_size_r>:
 8008f06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f0a:	1f18      	subs	r0, r3, #4
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	bfbc      	itt	lt
 8008f10:	580b      	ldrlt	r3, [r1, r0]
 8008f12:	18c0      	addlt	r0, r0, r3
 8008f14:	4770      	bx	lr
	...

08008f18 <_init>:
 8008f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f1a:	bf00      	nop
 8008f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f1e:	bc08      	pop	{r3}
 8008f20:	469e      	mov	lr, r3
 8008f22:	4770      	bx	lr

08008f24 <_fini>:
 8008f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f26:	bf00      	nop
 8008f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f2a:	bc08      	pop	{r3}
 8008f2c:	469e      	mov	lr, r3
 8008f2e:	4770      	bx	lr
