
SerialCheck.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008de0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c8  08008eec  08008eec  00018eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080093b4  080093b4  000201cc  2**0
                  CONTENTS
  4 .ARM          00000000  080093b4  080093b4  000201cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080093b4  080093b4  000201cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080093b4  080093b4  000193b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080093b8  080093b8  000193b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001cc  20000000  080093bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000139c  200001cc  08009588  000201cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001568  08009588  00021568  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201cc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201f5  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e0f8  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002dfd  00000000  00000000  0002e330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c80  00000000  00000000  00031130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000933  00000000  00000000  00031db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019873  00000000  00000000  000326e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000108f2  00000000  00000000  0004bf56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00086768  00000000  00000000  0005c848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003658  00000000  00000000  000e2fb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000e6608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001cc 	.word	0x200001cc
 8000128:	00000000 	.word	0x00000000
 800012c:	08008ed4 	.word	0x08008ed4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001d0 	.word	0x200001d0
 8000148:	08008ed4 	.word	0x08008ed4

0800014c <pec15_calc>:
		0xba39, 0xb10b, 0x7492, 0x5368, 0x96f1, 0x9dc3, 0x585a, 0x8ba7, 0x4e3e,
		0x450c, 0x8095 };

uint16_t pec15_calc(uint8_t len, //Number of bytes that will be used to calculate a PEC
		uint8_t *data //Array of data that will be used to calculate  a PEC
		) {
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	6039      	str	r1, [r7, #0]
 8000156:	71fb      	strb	r3, [r7, #7]
	uint16_t remainder, addr;
	remainder = 16; //initialize the PEC
 8000158:	2310      	movs	r3, #16
 800015a:	81fb      	strh	r3, [r7, #14]

	for (uint8_t i = 0; i < len; i++) // loops for each byte in data array
 800015c:	2300      	movs	r3, #0
 800015e:	737b      	strb	r3, [r7, #13]
 8000160:	e018      	b.n	8000194 <pec15_calc+0x48>
			{
		addr = ((remainder >> 7) ^ data[i]) & 0xff; //calculate PEC table address
 8000162:	89fb      	ldrh	r3, [r7, #14]
 8000164:	09db      	lsrs	r3, r3, #7
 8000166:	b29a      	uxth	r2, r3
 8000168:	7b7b      	ldrb	r3, [r7, #13]
 800016a:	6839      	ldr	r1, [r7, #0]
 800016c:	440b      	add	r3, r1
 800016e:	781b      	ldrb	r3, [r3, #0]
 8000170:	b29b      	uxth	r3, r3
 8000172:	4053      	eors	r3, r2
 8000174:	b29b      	uxth	r3, r3
 8000176:	b2db      	uxtb	r3, r3
 8000178:	817b      	strh	r3, [r7, #10]
		remainder = (remainder << 8) ^ crc15Table[addr];
 800017a:	89fb      	ldrh	r3, [r7, #14]
 800017c:	021b      	lsls	r3, r3, #8
 800017e:	b29a      	uxth	r2, r3
 8000180:	897b      	ldrh	r3, [r7, #10]
 8000182:	490a      	ldr	r1, [pc, #40]	; (80001ac <pec15_calc+0x60>)
 8000184:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000188:	b29b      	uxth	r3, r3
 800018a:	4053      	eors	r3, r2
 800018c:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i < len; i++) // loops for each byte in data array
 800018e:	7b7b      	ldrb	r3, [r7, #13]
 8000190:	3301      	adds	r3, #1
 8000192:	737b      	strb	r3, [r7, #13]
 8000194:	7b7a      	ldrb	r2, [r7, #13]
 8000196:	79fb      	ldrb	r3, [r7, #7]
 8000198:	429a      	cmp	r2, r3
 800019a:	d3e2      	bcc.n	8000162 <pec15_calc+0x16>
	}

	return (remainder * 2); //The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 800019c:	89fb      	ldrh	r3, [r7, #14]
 800019e:	005b      	lsls	r3, r3, #1
 80001a0:	b29b      	uxth	r3, r3
}
 80001a2:	4618      	mov	r0, r3
 80001a4:	3714      	adds	r7, #20
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bc80      	pop	{r7}
 80001aa:	4770      	bx	lr
 80001ac:	08008f5c 	.word	0x08008f5c

080001b0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80001b0:	b580      	push	{r7, lr}
 80001b2:	f6ad 0d58 	subw	sp, sp, #2136	; 0x858
 80001b6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	uint32_t prev = 0, curr = 0;
 80001b8:	2300      	movs	r3, #0
 80001ba:	f8c7 3854 	str.w	r3, [r7, #2132]	; 0x854
 80001be:	2300      	movs	r3, #0
 80001c0:	f8c7 3840 	str.w	r3, [r7, #2112]	; 0x840
	uint16_t cmd_pec;
	uint16_t voltages[4];
	//	const uint8_t REG_LEN = 8; // number of bytes in the register + 2 bytes for the PEC
	uint8_t cmd[4], read_val[10] = { 0 };
 80001c4:	2300      	movs	r3, #0
 80001c6:	f8c7 3820 	str.w	r3, [r7, #2080]	; 0x820
 80001ca:	f607 0324 	addw	r3, r7, #2084	; 0x824
 80001ce:	2200      	movs	r2, #0
 80001d0:	601a      	str	r2, [r3, #0]
 80001d2:	809a      	strh	r2, [r3, #4]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80001d4:	f000 fb7a 	bl	80008cc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80001d8:	f000 f994 	bl	8000504 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80001dc:	f000 fa22 	bl	8000624 <MX_GPIO_Init>
	MX_USB_DEVICE_Init();
 80001e0:	f007 fd16 	bl	8007c10 <MX_USB_DEVICE_Init>
	MX_SPI1_Init();
 80001e4:	f000 f9e8 	bl	80005b8 <MX_SPI1_Init>
	/* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); //Pull CS high
 80001e8:	2201      	movs	r2, #1
 80001ea:	2110      	movs	r1, #16
 80001ec:	48c1      	ldr	r0, [pc, #772]	; (80004f4 <main+0x344>)
 80001ee:	f000 fe61 	bl	8000eb4 <HAL_GPIO_WritePin>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	cmd[0] = 0x00;
 80001f2:	2300      	movs	r3, #0
 80001f4:	f887 382c 	strb.w	r3, [r7, #2092]	; 0x82c
	cmd[1] = 0x04;
 80001f8:	2304      	movs	r3, #4
 80001fa:	f887 382d 	strb.w	r3, [r7, #2093]	; 0x82d
	int cellNumber = 1;
 80001fe:	2301      	movs	r3, #1
 8000200:	f8c7 3850 	str.w	r3, [r7, #2128]	; 0x850
	while (1) {
		curr = HAL_GetTick(); //Record current timestamp
 8000204:	f000 fbba 	bl	800097c <HAL_GetTick>
 8000208:	f8c7 0840 	str.w	r0, [r7, #2112]	; 0x840

		if (curr - prev > LTC_DELAY) {
 800020c:	f8d7 2840 	ldr.w	r2, [r7, #2112]	; 0x840
 8000210:	f8d7 3854 	ldr.w	r3, [r7, #2132]	; 0x854
 8000214:	1ad3      	subs	r3, r2, r3
 8000216:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800021a:	d9f3      	bls.n	8000204 <main+0x54>
			char buf[20];
			char outbuf[2048] = "";
 800021c:	f607 0358 	addw	r3, r7, #2136	; 0x858
 8000220:	f6a3 0358 	subw	r3, r3, #2136	; 0x858
 8000224:	2200      	movs	r2, #0
 8000226:	601a      	str	r2, [r3, #0]
 8000228:	3304      	adds	r3, #4
 800022a:	f240 72fc 	movw	r2, #2044	; 0x7fc
 800022e:	2100      	movs	r1, #0
 8000230:	4618      	mov	r0, r3
 8000232:	f008 f9a9 	bl	8008588 <memset>
			char charToStr[2];

			charToStr[0] = '\n';
 8000236:	230a      	movs	r3, #10
 8000238:	f887 3808 	strb.w	r3, [r7, #2056]	; 0x808
			charToStr[1] = '\0';
 800023c:	2300      	movs	r3, #0
 800023e:	f887 3809 	strb.w	r3, [r7, #2057]	; 0x809
			//cmd[0] = 0x07; //Returns 0xFF
			//cmd[1] = 0x12; //Returns 0xFF
			cmd_pec = pec15_calc(2, cmd);
 8000242:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 8000246:	4619      	mov	r1, r3
 8000248:	2002      	movs	r0, #2
 800024a:	f7ff ff7f 	bl	800014c <pec15_calc>
 800024e:	4603      	mov	r3, r0
 8000250:	f8a7 383e 	strh.w	r3, [r7, #2110]	; 0x83e
			cmd[2] = (uint8_t) (cmd_pec >> 8);
 8000254:	f8b7 383e 	ldrh.w	r3, [r7, #2110]	; 0x83e
 8000258:	0a1b      	lsrs	r3, r3, #8
 800025a:	b29b      	uxth	r3, r3
 800025c:	b2db      	uxtb	r3, r3
 800025e:	f887 382e 	strb.w	r3, [r7, #2094]	; 0x82e
			cmd[3] = (uint8_t) (cmd_pec);
 8000262:	f8b7 383e 	ldrh.w	r3, [r7, #2110]	; 0x83e
 8000266:	b2db      	uxtb	r3, r3
 8000268:	f887 382f 	strb.w	r3, [r7, #2095]	; 0x82f

			char dummy = 0xFF;
 800026c:	23ff      	movs	r3, #255	; 0xff
 800026e:	f887 3807 	strb.w	r3, [r7, #2055]	; 0x807
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); //Pull CS low
 8000272:	2200      	movs	r2, #0
 8000274:	2110      	movs	r1, #16
 8000276:	489f      	ldr	r0, [pc, #636]	; (80004f4 <main+0x344>)
 8000278:	f000 fe1c 	bl	8000eb4 <HAL_GPIO_WritePin>
			HAL_SPI_Transmit(&hspi1, (uint8_t*) (&dummy), 1, 100);
 800027c:	f607 0107 	addw	r1, r7, #2055	; 0x807
 8000280:	2364      	movs	r3, #100	; 0x64
 8000282:	2201      	movs	r2, #1
 8000284:	489c      	ldr	r0, [pc, #624]	; (80004f8 <main+0x348>)
 8000286:	f003 f8b3 	bl	80033f0 <HAL_SPI_Transmit>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); //Pull CS high
 800028a:	2201      	movs	r2, #1
 800028c:	2110      	movs	r1, #16
 800028e:	4899      	ldr	r0, [pc, #612]	; (80004f4 <main+0x344>)
 8000290:	f000 fe10 	bl	8000eb4 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); //Pull CS low
 8000294:	2200      	movs	r2, #0
 8000296:	2110      	movs	r1, #16
 8000298:	4896      	ldr	r0, [pc, #600]	; (80004f4 <main+0x344>)
 800029a:	f000 fe0b 	bl	8000eb4 <HAL_GPIO_WritePin>
			HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 800029e:	f607 012c 	addw	r1, r7, #2092	; 0x82c
 80002a2:	2364      	movs	r3, #100	; 0x64
 80002a4:	2204      	movs	r2, #4
 80002a6:	4894      	ldr	r0, [pc, #592]	; (80004f8 <main+0x348>)
 80002a8:	f003 f8a2 	bl	80033f0 <HAL_SPI_Transmit>
			HAL_SPI_Receive(&hspi1, (uint8_t*) read_val, 10, 100);
 80002ac:	f507 6102 	add.w	r1, r7, #2080	; 0x820
 80002b0:	2364      	movs	r3, #100	; 0x64
 80002b2:	220a      	movs	r2, #10
 80002b4:	4890      	ldr	r0, [pc, #576]	; (80004f8 <main+0x348>)
 80002b6:	f003 f9de 	bl	8003676 <HAL_SPI_Receive>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); //Pull CS high
 80002ba:	2201      	movs	r2, #1
 80002bc:	2110      	movs	r1, #16
 80002be:	488d      	ldr	r0, [pc, #564]	; (80004f4 <main+0x344>)
 80002c0:	f000 fdf8 	bl	8000eb4 <HAL_GPIO_WritePin>

			for (uint8_t i = 0; i < 6; i += 2) {
 80002c4:	2300      	movs	r3, #0
 80002c6:	f887 384f 	strb.w	r3, [r7, #2127]	; 0x84f
 80002ca:	e02d      	b.n	8000328 <main+0x178>
				uint16_t hb = (uint16_t) read_val[i + 1];
 80002cc:	f897 384f 	ldrb.w	r3, [r7, #2127]	; 0x84f
 80002d0:	3301      	adds	r3, #1
 80002d2:	f603 0358 	addw	r3, r3, #2136	; 0x858
 80002d6:	443b      	add	r3, r7
 80002d8:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 80002dc:	f8a7 383c 	strh.w	r3, [r7, #2108]	; 0x83c
				uint16_t lb = (uint16_t) read_val[i];
 80002e0:	f897 384f 	ldrb.w	r3, [r7, #2127]	; 0x84f
 80002e4:	f603 0358 	addw	r3, r3, #2136	; 0x858
 80002e8:	443b      	add	r3, r7
 80002ea:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 80002ee:	f8a7 383a 	strh.w	r3, [r7, #2106]	; 0x83a
				uint16_t x = (hb << 8) | lb;
 80002f2:	f8b7 383c 	ldrh.w	r3, [r7, #2108]	; 0x83c
 80002f6:	021b      	lsls	r3, r3, #8
 80002f8:	b21a      	sxth	r2, r3
 80002fa:	f9b7 383a 	ldrsh.w	r3, [r7, #2106]	; 0x83a
 80002fe:	4313      	orrs	r3, r2
 8000300:	b21b      	sxth	r3, r3
 8000302:	f8a7 3838 	strh.w	r3, [r7, #2104]	; 0x838
				voltages[(int) (i / 2)] = x;
 8000306:	f897 384f 	ldrb.w	r3, [r7, #2127]	; 0x84f
 800030a:	085b      	lsrs	r3, r3, #1
 800030c:	b2db      	uxtb	r3, r3
 800030e:	005b      	lsls	r3, r3, #1
 8000310:	f603 0358 	addw	r3, r3, #2136	; 0x858
 8000314:	443b      	add	r3, r7
 8000316:	f8b7 2838 	ldrh.w	r2, [r7, #2104]	; 0x838
 800031a:	f823 2c28 	strh.w	r2, [r3, #-40]
			for (uint8_t i = 0; i < 6; i += 2) {
 800031e:	f897 384f 	ldrb.w	r3, [r7, #2127]	; 0x84f
 8000322:	3302      	adds	r3, #2
 8000324:	f887 384f 	strb.w	r3, [r7, #2127]	; 0x84f
 8000328:	f897 384f 	ldrb.w	r3, [r7, #2127]	; 0x84f
 800032c:	2b05      	cmp	r3, #5
 800032e:	d9cd      	bls.n	80002cc <main+0x11c>
			 charToStr[0] = '\n';
			 strncat(outbuf, charToStr, 3);
			 CDC_Transmit_FS((uint8_t*)outbuf, sizeof(outbuf));
			 charToStr[0] = ' ';
			 */
			voltages[3] = (uint8_t) cmd[1];
 8000330:	f897 382d 	ldrb.w	r3, [r7, #2093]	; 0x82d
 8000334:	b29b      	uxth	r3, r3
 8000336:	f8a7 3836 	strh.w	r3, [r7, #2102]	; 0x836
			char values[7] = "";
 800033a:	2300      	movs	r3, #0
 800033c:	f8c7 3800 	str.w	r3, [r7, #2048]	; 0x800
 8000340:	f607 0304 	addw	r3, r7, #2052	; 0x804
 8000344:	2100      	movs	r1, #0
 8000346:	460a      	mov	r2, r1
 8000348:	801a      	strh	r2, [r3, #0]
 800034a:	460a      	mov	r2, r1
 800034c:	709a      	strb	r2, [r3, #2]

			for (int i = 0; i < 3; i++) {
 800034e:	2300      	movs	r3, #0
 8000350:	f8c7 3848 	str.w	r3, [r7, #2120]	; 0x848
 8000354:	e0a9      	b.n	80004aa <main+0x2fa>

				//printing cv in right format
				for (int j = 5; j >= 0; j--) {
 8000356:	2305      	movs	r3, #5
 8000358:	f8c7 3844 	str.w	r3, [r7, #2116]	; 0x844
 800035c:	e07c      	b.n	8000458 <main+0x2a8>
					if (j > 1) {
 800035e:	f8d7 3844 	ldr.w	r3, [r7, #2116]	; 0x844
 8000362:	2b01      	cmp	r3, #1
 8000364:	dd31      	ble.n	80003ca <main+0x21a>
						values[j] = (voltages[i] % 10) + '0';
 8000366:	f8d7 3848 	ldr.w	r3, [r7, #2120]	; 0x848
 800036a:	005b      	lsls	r3, r3, #1
 800036c:	f603 0358 	addw	r3, r3, #2136	; 0x858
 8000370:	443b      	add	r3, r7
 8000372:	f833 2c28 	ldrh.w	r2, [r3, #-40]
 8000376:	4b61      	ldr	r3, [pc, #388]	; (80004fc <main+0x34c>)
 8000378:	fba3 1302 	umull	r1, r3, r3, r2
 800037c:	08d9      	lsrs	r1, r3, #3
 800037e:	460b      	mov	r3, r1
 8000380:	009b      	lsls	r3, r3, #2
 8000382:	440b      	add	r3, r1
 8000384:	005b      	lsls	r3, r3, #1
 8000386:	1ad3      	subs	r3, r2, r3
 8000388:	b29b      	uxth	r3, r3
 800038a:	b2db      	uxtb	r3, r3
 800038c:	3330      	adds	r3, #48	; 0x30
 800038e:	b2d9      	uxtb	r1, r3
 8000390:	f507 6200 	add.w	r2, r7, #2048	; 0x800
 8000394:	f8d7 3844 	ldr.w	r3, [r7, #2116]	; 0x844
 8000398:	4413      	add	r3, r2
 800039a:	460a      	mov	r2, r1
 800039c:	701a      	strb	r2, [r3, #0]
						voltages[i] /= 10;
 800039e:	f8d7 3848 	ldr.w	r3, [r7, #2120]	; 0x848
 80003a2:	005b      	lsls	r3, r3, #1
 80003a4:	f603 0358 	addw	r3, r3, #2136	; 0x858
 80003a8:	443b      	add	r3, r7
 80003aa:	f833 3c28 	ldrh.w	r3, [r3, #-40]
 80003ae:	4a53      	ldr	r2, [pc, #332]	; (80004fc <main+0x34c>)
 80003b0:	fba2 2303 	umull	r2, r3, r2, r3
 80003b4:	08db      	lsrs	r3, r3, #3
 80003b6:	b29a      	uxth	r2, r3
 80003b8:	f8d7 3848 	ldr.w	r3, [r7, #2120]	; 0x848
 80003bc:	005b      	lsls	r3, r3, #1
 80003be:	f603 0358 	addw	r3, r3, #2136	; 0x858
 80003c2:	443b      	add	r3, r7
 80003c4:	f823 2c28 	strh.w	r2, [r3, #-40]
 80003c8:	e041      	b.n	800044e <main+0x29e>
					} else if (j == 1) {
 80003ca:	f8d7 3844 	ldr.w	r3, [r7, #2116]	; 0x844
 80003ce:	2b01      	cmp	r3, #1
 80003d0:	d13d      	bne.n	800044e <main+0x29e>
						values[j] = '.';
 80003d2:	f507 6200 	add.w	r2, r7, #2048	; 0x800
 80003d6:	f8d7 3844 	ldr.w	r3, [r7, #2116]	; 0x844
 80003da:	4413      	add	r3, r2
 80003dc:	222e      	movs	r2, #46	; 0x2e
 80003de:	701a      	strb	r2, [r3, #0]
						values[j - 1] = (voltages[i] % 10) + '0';
 80003e0:	f8d7 3848 	ldr.w	r3, [r7, #2120]	; 0x848
 80003e4:	005b      	lsls	r3, r3, #1
 80003e6:	f603 0358 	addw	r3, r3, #2136	; 0x858
 80003ea:	443b      	add	r3, r7
 80003ec:	f833 2c28 	ldrh.w	r2, [r3, #-40]
 80003f0:	4b42      	ldr	r3, [pc, #264]	; (80004fc <main+0x34c>)
 80003f2:	fba3 1302 	umull	r1, r3, r3, r2
 80003f6:	08d9      	lsrs	r1, r3, #3
 80003f8:	460b      	mov	r3, r1
 80003fa:	009b      	lsls	r3, r3, #2
 80003fc:	440b      	add	r3, r1
 80003fe:	005b      	lsls	r3, r3, #1
 8000400:	1ad3      	subs	r3, r2, r3
 8000402:	b29b      	uxth	r3, r3
 8000404:	b2da      	uxtb	r2, r3
 8000406:	f8d7 3844 	ldr.w	r3, [r7, #2116]	; 0x844
 800040a:	3b01      	subs	r3, #1
 800040c:	3230      	adds	r2, #48	; 0x30
 800040e:	b2d2      	uxtb	r2, r2
 8000410:	f603 0358 	addw	r3, r3, #2136	; 0x858
 8000414:	443b      	add	r3, r7
 8000416:	f803 2c58 	strb.w	r2, [r3, #-88]
						voltages[i] /= 10;
 800041a:	f8d7 3848 	ldr.w	r3, [r7, #2120]	; 0x848
 800041e:	005b      	lsls	r3, r3, #1
 8000420:	f603 0358 	addw	r3, r3, #2136	; 0x858
 8000424:	443b      	add	r3, r7
 8000426:	f833 3c28 	ldrh.w	r3, [r3, #-40]
 800042a:	4a34      	ldr	r2, [pc, #208]	; (80004fc <main+0x34c>)
 800042c:	fba2 2303 	umull	r2, r3, r2, r3
 8000430:	08db      	lsrs	r3, r3, #3
 8000432:	b29a      	uxth	r2, r3
 8000434:	f8d7 3848 	ldr.w	r3, [r7, #2120]	; 0x848
 8000438:	005b      	lsls	r3, r3, #1
 800043a:	f603 0358 	addw	r3, r3, #2136	; 0x858
 800043e:	443b      	add	r3, r7
 8000440:	f823 2c28 	strh.w	r2, [r3, #-40]
						j--;
 8000444:	f8d7 3844 	ldr.w	r3, [r7, #2116]	; 0x844
 8000448:	3b01      	subs	r3, #1
 800044a:	f8c7 3844 	str.w	r3, [r7, #2116]	; 0x844
				for (int j = 5; j >= 0; j--) {
 800044e:	f8d7 3844 	ldr.w	r3, [r7, #2116]	; 0x844
 8000452:	3b01      	subs	r3, #1
 8000454:	f8c7 3844 	str.w	r3, [r7, #2116]	; 0x844
 8000458:	f8d7 3844 	ldr.w	r3, [r7, #2116]	; 0x844
 800045c:	2b00      	cmp	r3, #0
 800045e:	f6bf af7e 	bge.w	800035e <main+0x1ae>
					}
				}
				values[6] = '\0';
 8000462:	2300      	movs	r3, #0
 8000464:	f887 3806 	strb.w	r3, [r7, #2054]	; 0x806

				sprintf(buf, "Cell %d: %sV", cellNumber, values);
 8000468:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 800046c:	f607 000c 	addw	r0, r7, #2060	; 0x80c
 8000470:	f8d7 2850 	ldr.w	r2, [r7, #2128]	; 0x850
 8000474:	4922      	ldr	r1, [pc, #136]	; (8000500 <main+0x350>)
 8000476:	f008 f867 	bl	8008548 <siprintf>
				strncat(outbuf, buf, 20);
 800047a:	f607 010c 	addw	r1, r7, #2060	; 0x80c
 800047e:	463b      	mov	r3, r7
 8000480:	2214      	movs	r2, #20
 8000482:	4618      	mov	r0, r3
 8000484:	f008 f888 	bl	8008598 <strncat>
				strncat(outbuf, charToStr, 3);
 8000488:	f607 0108 	addw	r1, r7, #2056	; 0x808
 800048c:	463b      	mov	r3, r7
 800048e:	2203      	movs	r2, #3
 8000490:	4618      	mov	r0, r3
 8000492:	f008 f881 	bl	8008598 <strncat>
				cellNumber++;
 8000496:	f8d7 3850 	ldr.w	r3, [r7, #2128]	; 0x850
 800049a:	3301      	adds	r3, #1
 800049c:	f8c7 3850 	str.w	r3, [r7, #2128]	; 0x850
			for (int i = 0; i < 3; i++) {
 80004a0:	f8d7 3848 	ldr.w	r3, [r7, #2120]	; 0x848
 80004a4:	3301      	adds	r3, #1
 80004a6:	f8c7 3848 	str.w	r3, [r7, #2120]	; 0x848
 80004aa:	f8d7 3848 	ldr.w	r3, [r7, #2120]	; 0x848
 80004ae:	2b02      	cmp	r3, #2
 80004b0:	f77f af51 	ble.w	8000356 <main+0x1a6>
			}
			charToStr[0] = '\n';
 80004b4:	230a      	movs	r3, #10
 80004b6:	f887 3808 	strb.w	r3, [r7, #2056]	; 0x808
			//strncat(outbuf, charToStr, 3);

			CDC_Transmit_FS((uint8_t*) outbuf, sizeof(outbuf));
 80004ba:	463b      	mov	r3, r7
 80004bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004c0:	4618      	mov	r0, r3
 80004c2:	f007 fc63 	bl	8007d8c <CDC_Transmit_FS>
			 charToStr[0] = '\n';
			 strncat(outbuf, charToStr, 3);
			 CDC_Transmit_FS((uint8_t*)outbuf, sizeof(outbuf));
			 */

			if (cmd[1] == 0x0A) {
 80004c6:	f897 382d 	ldrb.w	r3, [r7, #2093]	; 0x82d
 80004ca:	2b0a      	cmp	r3, #10
 80004cc:	d106      	bne.n	80004dc <main+0x32c>
				cmd[1] = 0x04;
 80004ce:	2304      	movs	r3, #4
 80004d0:	f887 382d 	strb.w	r3, [r7, #2093]	; 0x82d
				cellNumber = 1;
 80004d4:	2301      	movs	r3, #1
 80004d6:	f8c7 3850 	str.w	r3, [r7, #2128]	; 0x850
 80004da:	e005      	b.n	80004e8 <main+0x338>
			} else {
				cmd[1] += 2;
 80004dc:	f897 382d 	ldrb.w	r3, [r7, #2093]	; 0x82d
 80004e0:	3302      	adds	r3, #2
 80004e2:	b2db      	uxtb	r3, r3
 80004e4:	f887 382d 	strb.w	r3, [r7, #2093]	; 0x82d
			}

			prev = curr;
 80004e8:	f8d7 3840 	ldr.w	r3, [r7, #2112]	; 0x840
 80004ec:	f8c7 3854 	str.w	r3, [r7, #2132]	; 0x854
		curr = HAL_GetTick(); //Record current timestamp
 80004f0:	e688      	b.n	8000204 <main+0x54>
 80004f2:	bf00      	nop
 80004f4:	40010800 	.word	0x40010800
 80004f8:	200001e8 	.word	0x200001e8
 80004fc:	cccccccd 	.word	0xcccccccd
 8000500:	08008f04 	.word	0x08008f04

08000504 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000504:	b580      	push	{r7, lr}
 8000506:	b094      	sub	sp, #80	; 0x50
 8000508:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800050a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800050e:	2228      	movs	r2, #40	; 0x28
 8000510:	2100      	movs	r1, #0
 8000512:	4618      	mov	r0, r3
 8000514:	f008 f838 	bl	8008588 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000518:	f107 0314 	add.w	r3, r7, #20
 800051c:	2200      	movs	r2, #0
 800051e:	601a      	str	r2, [r3, #0]
 8000520:	605a      	str	r2, [r3, #4]
 8000522:	609a      	str	r2, [r3, #8]
 8000524:	60da      	str	r2, [r3, #12]
 8000526:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000528:	1d3b      	adds	r3, r7, #4
 800052a:	2200      	movs	r2, #0
 800052c:	601a      	str	r2, [r3, #0]
 800052e:	605a      	str	r2, [r3, #4]
 8000530:	609a      	str	r2, [r3, #8]
 8000532:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000534:	2301      	movs	r3, #1
 8000536:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000538:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800053c:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800053e:	2300      	movs	r3, #0
 8000540:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000542:	2301      	movs	r3, #1
 8000544:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000546:	2302      	movs	r3, #2
 8000548:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800054a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800054e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000550:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000554:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000556:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800055a:	4618      	mov	r0, r3
 800055c:	f002 fa30 	bl	80029c0 <HAL_RCC_OscConfig>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <SystemClock_Config+0x66>
		Error_Handler();
 8000566:	f000 f89b 	bl	80006a0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800056a:	230f      	movs	r3, #15
 800056c:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800056e:	2302      	movs	r3, #2
 8000570:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000572:	2300      	movs	r3, #0
 8000574:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000576:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800057a:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800057c:	2300      	movs	r3, #0
 800057e:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000580:	f107 0314 	add.w	r3, r7, #20
 8000584:	2102      	movs	r1, #2
 8000586:	4618      	mov	r0, r3
 8000588:	f002 fc9c 	bl	8002ec4 <HAL_RCC_ClockConfig>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <SystemClock_Config+0x92>
		Error_Handler();
 8000592:	f000 f885 	bl	80006a0 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000596:	2310      	movs	r3, #16
 8000598:	607b      	str	r3, [r7, #4]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800059a:	2300      	movs	r3, #0
 800059c:	613b      	str	r3, [r7, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 800059e:	1d3b      	adds	r3, r7, #4
 80005a0:	4618      	mov	r0, r3
 80005a2:	f002 fdeb 	bl	800317c <HAL_RCCEx_PeriphCLKConfig>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <SystemClock_Config+0xac>
		Error_Handler();
 80005ac:	f000 f878 	bl	80006a0 <Error_Handler>
	}
}
 80005b0:	bf00      	nop
 80005b2:	3750      	adds	r7, #80	; 0x50
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}

080005b8 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80005bc:	4b17      	ldr	r3, [pc, #92]	; (800061c <MX_SPI1_Init+0x64>)
 80005be:	4a18      	ldr	r2, [pc, #96]	; (8000620 <MX_SPI1_Init+0x68>)
 80005c0:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80005c2:	4b16      	ldr	r3, [pc, #88]	; (800061c <MX_SPI1_Init+0x64>)
 80005c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80005c8:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80005ca:	4b14      	ldr	r3, [pc, #80]	; (800061c <MX_SPI1_Init+0x64>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80005d0:	4b12      	ldr	r3, [pc, #72]	; (800061c <MX_SPI1_Init+0x64>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005d6:	4b11      	ldr	r3, [pc, #68]	; (800061c <MX_SPI1_Init+0x64>)
 80005d8:	2200      	movs	r2, #0
 80005da:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005dc:	4b0f      	ldr	r3, [pc, #60]	; (800061c <MX_SPI1_Init+0x64>)
 80005de:	2200      	movs	r2, #0
 80005e0:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80005e2:	4b0e      	ldr	r3, [pc, #56]	; (800061c <MX_SPI1_Init+0x64>)
 80005e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005e8:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80005ea:	4b0c      	ldr	r3, [pc, #48]	; (800061c <MX_SPI1_Init+0x64>)
 80005ec:	2228      	movs	r2, #40	; 0x28
 80005ee:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80005f0:	4b0a      	ldr	r3, [pc, #40]	; (800061c <MX_SPI1_Init+0x64>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80005f6:	4b09      	ldr	r3, [pc, #36]	; (800061c <MX_SPI1_Init+0x64>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80005fc:	4b07      	ldr	r3, [pc, #28]	; (800061c <MX_SPI1_Init+0x64>)
 80005fe:	2200      	movs	r2, #0
 8000600:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8000602:	4b06      	ldr	r3, [pc, #24]	; (800061c <MX_SPI1_Init+0x64>)
 8000604:	220a      	movs	r2, #10
 8000606:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8000608:	4804      	ldr	r0, [pc, #16]	; (800061c <MX_SPI1_Init+0x64>)
 800060a:	f002 fe6d 	bl	80032e8 <HAL_SPI_Init>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <MX_SPI1_Init+0x60>
		Error_Handler();
 8000614:	f000 f844 	bl	80006a0 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000618:	bf00      	nop
 800061a:	bd80      	pop	{r7, pc}
 800061c:	200001e8 	.word	0x200001e8
 8000620:	40013000 	.word	0x40013000

08000624 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000624:	b580      	push	{r7, lr}
 8000626:	b086      	sub	sp, #24
 8000628:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800062a:	f107 0308 	add.w	r3, r7, #8
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	605a      	str	r2, [r3, #4]
 8000634:	609a      	str	r2, [r3, #8]
 8000636:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000638:	4b17      	ldr	r3, [pc, #92]	; (8000698 <MX_GPIO_Init+0x74>)
 800063a:	699b      	ldr	r3, [r3, #24]
 800063c:	4a16      	ldr	r2, [pc, #88]	; (8000698 <MX_GPIO_Init+0x74>)
 800063e:	f043 0320 	orr.w	r3, r3, #32
 8000642:	6193      	str	r3, [r2, #24]
 8000644:	4b14      	ldr	r3, [pc, #80]	; (8000698 <MX_GPIO_Init+0x74>)
 8000646:	699b      	ldr	r3, [r3, #24]
 8000648:	f003 0320 	and.w	r3, r3, #32
 800064c:	607b      	str	r3, [r7, #4]
 800064e:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000650:	4b11      	ldr	r3, [pc, #68]	; (8000698 <MX_GPIO_Init+0x74>)
 8000652:	699b      	ldr	r3, [r3, #24]
 8000654:	4a10      	ldr	r2, [pc, #64]	; (8000698 <MX_GPIO_Init+0x74>)
 8000656:	f043 0304 	orr.w	r3, r3, #4
 800065a:	6193      	str	r3, [r2, #24]
 800065c:	4b0e      	ldr	r3, [pc, #56]	; (8000698 <MX_GPIO_Init+0x74>)
 800065e:	699b      	ldr	r3, [r3, #24]
 8000660:	f003 0304 	and.w	r3, r3, #4
 8000664:	603b      	str	r3, [r7, #0]
 8000666:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LTC_nCS_GPIO_Port, LTC_nCS_Pin, GPIO_PIN_RESET);
 8000668:	2200      	movs	r2, #0
 800066a:	2110      	movs	r1, #16
 800066c:	480b      	ldr	r0, [pc, #44]	; (800069c <MX_GPIO_Init+0x78>)
 800066e:	f000 fc21 	bl	8000eb4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LTC_nCS_Pin */
	GPIO_InitStruct.Pin = LTC_nCS_Pin;
 8000672:	2310      	movs	r3, #16
 8000674:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000676:	2301      	movs	r3, #1
 8000678:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067a:	2300      	movs	r3, #0
 800067c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067e:	2302      	movs	r3, #2
 8000680:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(LTC_nCS_GPIO_Port, &GPIO_InitStruct);
 8000682:	f107 0308 	add.w	r3, r7, #8
 8000686:	4619      	mov	r1, r3
 8000688:	4804      	ldr	r0, [pc, #16]	; (800069c <MX_GPIO_Init+0x78>)
 800068a:	f000 fa8f 	bl	8000bac <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800068e:	bf00      	nop
 8000690:	3718      	adds	r7, #24
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	40021000 	.word	0x40021000
 800069c:	40010800 	.word	0x40010800

080006a0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006a4:	b672      	cpsid	i
}
 80006a6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80006a8:	e7fe      	b.n	80006a8 <Error_Handler+0x8>
	...

080006ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b085      	sub	sp, #20
 80006b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006b2:	4b15      	ldr	r3, [pc, #84]	; (8000708 <HAL_MspInit+0x5c>)
 80006b4:	699b      	ldr	r3, [r3, #24]
 80006b6:	4a14      	ldr	r2, [pc, #80]	; (8000708 <HAL_MspInit+0x5c>)
 80006b8:	f043 0301 	orr.w	r3, r3, #1
 80006bc:	6193      	str	r3, [r2, #24]
 80006be:	4b12      	ldr	r3, [pc, #72]	; (8000708 <HAL_MspInit+0x5c>)
 80006c0:	699b      	ldr	r3, [r3, #24]
 80006c2:	f003 0301 	and.w	r3, r3, #1
 80006c6:	60bb      	str	r3, [r7, #8]
 80006c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ca:	4b0f      	ldr	r3, [pc, #60]	; (8000708 <HAL_MspInit+0x5c>)
 80006cc:	69db      	ldr	r3, [r3, #28]
 80006ce:	4a0e      	ldr	r2, [pc, #56]	; (8000708 <HAL_MspInit+0x5c>)
 80006d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006d4:	61d3      	str	r3, [r2, #28]
 80006d6:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <HAL_MspInit+0x5c>)
 80006d8:	69db      	ldr	r3, [r3, #28]
 80006da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80006e2:	4b0a      	ldr	r3, [pc, #40]	; (800070c <HAL_MspInit+0x60>)
 80006e4:	685b      	ldr	r3, [r3, #4]
 80006e6:	60fb      	str	r3, [r7, #12]
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80006ee:	60fb      	str	r3, [r7, #12]
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006f6:	60fb      	str	r3, [r7, #12]
 80006f8:	4a04      	ldr	r2, [pc, #16]	; (800070c <HAL_MspInit+0x60>)
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006fe:	bf00      	nop
 8000700:	3714      	adds	r7, #20
 8000702:	46bd      	mov	sp, r7
 8000704:	bc80      	pop	{r7}
 8000706:	4770      	bx	lr
 8000708:	40021000 	.word	0x40021000
 800070c:	40010000 	.word	0x40010000

08000710 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b088      	sub	sp, #32
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000718:	f107 0310 	add.w	r3, r7, #16
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]
 8000724:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	4a1b      	ldr	r2, [pc, #108]	; (8000798 <HAL_SPI_MspInit+0x88>)
 800072c:	4293      	cmp	r3, r2
 800072e:	d12f      	bne.n	8000790 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000730:	4b1a      	ldr	r3, [pc, #104]	; (800079c <HAL_SPI_MspInit+0x8c>)
 8000732:	699b      	ldr	r3, [r3, #24]
 8000734:	4a19      	ldr	r2, [pc, #100]	; (800079c <HAL_SPI_MspInit+0x8c>)
 8000736:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800073a:	6193      	str	r3, [r2, #24]
 800073c:	4b17      	ldr	r3, [pc, #92]	; (800079c <HAL_SPI_MspInit+0x8c>)
 800073e:	699b      	ldr	r3, [r3, #24]
 8000740:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000744:	60fb      	str	r3, [r7, #12]
 8000746:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000748:	4b14      	ldr	r3, [pc, #80]	; (800079c <HAL_SPI_MspInit+0x8c>)
 800074a:	699b      	ldr	r3, [r3, #24]
 800074c:	4a13      	ldr	r2, [pc, #76]	; (800079c <HAL_SPI_MspInit+0x8c>)
 800074e:	f043 0304 	orr.w	r3, r3, #4
 8000752:	6193      	str	r3, [r2, #24]
 8000754:	4b11      	ldr	r3, [pc, #68]	; (800079c <HAL_SPI_MspInit+0x8c>)
 8000756:	699b      	ldr	r3, [r3, #24]
 8000758:	f003 0304 	and.w	r3, r3, #4
 800075c:	60bb      	str	r3, [r7, #8]
 800075e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000760:	23a0      	movs	r3, #160	; 0xa0
 8000762:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000764:	2302      	movs	r3, #2
 8000766:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000768:	2303      	movs	r3, #3
 800076a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800076c:	f107 0310 	add.w	r3, r7, #16
 8000770:	4619      	mov	r1, r3
 8000772:	480b      	ldr	r0, [pc, #44]	; (80007a0 <HAL_SPI_MspInit+0x90>)
 8000774:	f000 fa1a 	bl	8000bac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000778:	2340      	movs	r3, #64	; 0x40
 800077a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800077c:	2300      	movs	r3, #0
 800077e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000780:	2300      	movs	r3, #0
 8000782:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000784:	f107 0310 	add.w	r3, r7, #16
 8000788:	4619      	mov	r1, r3
 800078a:	4805      	ldr	r0, [pc, #20]	; (80007a0 <HAL_SPI_MspInit+0x90>)
 800078c:	f000 fa0e 	bl	8000bac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000790:	bf00      	nop
 8000792:	3720      	adds	r7, #32
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	40013000 	.word	0x40013000
 800079c:	40021000 	.word	0x40021000
 80007a0:	40010800 	.word	0x40010800

080007a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007a8:	e7fe      	b.n	80007a8 <NMI_Handler+0x4>

080007aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007aa:	b480      	push	{r7}
 80007ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007ae:	e7fe      	b.n	80007ae <HardFault_Handler+0x4>

080007b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007b4:	e7fe      	b.n	80007b4 <MemManage_Handler+0x4>

080007b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007b6:	b480      	push	{r7}
 80007b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007ba:	e7fe      	b.n	80007ba <BusFault_Handler+0x4>

080007bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007c0:	e7fe      	b.n	80007c0 <UsageFault_Handler+0x4>

080007c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007c2:	b480      	push	{r7}
 80007c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007c6:	bf00      	nop
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bc80      	pop	{r7}
 80007cc:	4770      	bx	lr

080007ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007ce:	b480      	push	{r7}
 80007d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007d2:	bf00      	nop
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bc80      	pop	{r7}
 80007d8:	4770      	bx	lr

080007da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007da:	b480      	push	{r7}
 80007dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007de:	bf00      	nop
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bc80      	pop	{r7}
 80007e4:	4770      	bx	lr

080007e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007e6:	b580      	push	{r7, lr}
 80007e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007ea:	f000 f8b5 	bl	8000958 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}
	...

080007f4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80007f8:	4802      	ldr	r0, [pc, #8]	; (8000804 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80007fa:	f000 fc98 	bl	800112e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	20000f10 	.word	0x20000f10

08000808 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b086      	sub	sp, #24
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000810:	4a14      	ldr	r2, [pc, #80]	; (8000864 <_sbrk+0x5c>)
 8000812:	4b15      	ldr	r3, [pc, #84]	; (8000868 <_sbrk+0x60>)
 8000814:	1ad3      	subs	r3, r2, r3
 8000816:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000818:	697b      	ldr	r3, [r7, #20]
 800081a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800081c:	4b13      	ldr	r3, [pc, #76]	; (800086c <_sbrk+0x64>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d102      	bne.n	800082a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000824:	4b11      	ldr	r3, [pc, #68]	; (800086c <_sbrk+0x64>)
 8000826:	4a12      	ldr	r2, [pc, #72]	; (8000870 <_sbrk+0x68>)
 8000828:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800082a:	4b10      	ldr	r3, [pc, #64]	; (800086c <_sbrk+0x64>)
 800082c:	681a      	ldr	r2, [r3, #0]
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	4413      	add	r3, r2
 8000832:	693a      	ldr	r2, [r7, #16]
 8000834:	429a      	cmp	r2, r3
 8000836:	d207      	bcs.n	8000848 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000838:	f007 fec2 	bl	80085c0 <__errno>
 800083c:	4603      	mov	r3, r0
 800083e:	220c      	movs	r2, #12
 8000840:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000842:	f04f 33ff 	mov.w	r3, #4294967295
 8000846:	e009      	b.n	800085c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000848:	4b08      	ldr	r3, [pc, #32]	; (800086c <_sbrk+0x64>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800084e:	4b07      	ldr	r3, [pc, #28]	; (800086c <_sbrk+0x64>)
 8000850:	681a      	ldr	r2, [r3, #0]
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	4413      	add	r3, r2
 8000856:	4a05      	ldr	r2, [pc, #20]	; (800086c <_sbrk+0x64>)
 8000858:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800085a:	68fb      	ldr	r3, [r7, #12]
}
 800085c:	4618      	mov	r0, r3
 800085e:	3718      	adds	r7, #24
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	20005000 	.word	0x20005000
 8000868:	00000400 	.word	0x00000400
 800086c:	20000240 	.word	0x20000240
 8000870:	20001568 	.word	0x20001568

08000874 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000878:	bf00      	nop
 800087a:	46bd      	mov	sp, r7
 800087c:	bc80      	pop	{r7}
 800087e:	4770      	bx	lr

08000880 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000880:	f7ff fff8 	bl	8000874 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000884:	480b      	ldr	r0, [pc, #44]	; (80008b4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000886:	490c      	ldr	r1, [pc, #48]	; (80008b8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000888:	4a0c      	ldr	r2, [pc, #48]	; (80008bc <LoopFillZerobss+0x16>)
  movs r3, #0
 800088a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800088c:	e002      	b.n	8000894 <LoopCopyDataInit>

0800088e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800088e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000890:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000892:	3304      	adds	r3, #4

08000894 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000894:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000896:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000898:	d3f9      	bcc.n	800088e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800089a:	4a09      	ldr	r2, [pc, #36]	; (80008c0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800089c:	4c09      	ldr	r4, [pc, #36]	; (80008c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800089e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008a0:	e001      	b.n	80008a6 <LoopFillZerobss>

080008a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008a4:	3204      	adds	r2, #4

080008a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008a8:	d3fb      	bcc.n	80008a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008aa:	f007 fe8f 	bl	80085cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008ae:	f7ff fc7f 	bl	80001b0 <main>
  bx lr
 80008b2:	4770      	bx	lr
  ldr r0, =_sdata
 80008b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008b8:	200001cc 	.word	0x200001cc
  ldr r2, =_sidata
 80008bc:	080093bc 	.word	0x080093bc
  ldr r2, =_sbss
 80008c0:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 80008c4:	20001568 	.word	0x20001568

080008c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008c8:	e7fe      	b.n	80008c8 <ADC1_2_IRQHandler>
	...

080008cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008d0:	4b08      	ldr	r3, [pc, #32]	; (80008f4 <HAL_Init+0x28>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a07      	ldr	r2, [pc, #28]	; (80008f4 <HAL_Init+0x28>)
 80008d6:	f043 0310 	orr.w	r3, r3, #16
 80008da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008dc:	2003      	movs	r0, #3
 80008de:	f000 f923 	bl	8000b28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008e2:	200f      	movs	r0, #15
 80008e4:	f000 f808 	bl	80008f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008e8:	f7ff fee0 	bl	80006ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008ec:	2300      	movs	r3, #0
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	40022000 	.word	0x40022000

080008f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000900:	4b12      	ldr	r3, [pc, #72]	; (800094c <HAL_InitTick+0x54>)
 8000902:	681a      	ldr	r2, [r3, #0]
 8000904:	4b12      	ldr	r3, [pc, #72]	; (8000950 <HAL_InitTick+0x58>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	4619      	mov	r1, r3
 800090a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800090e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000912:	fbb2 f3f3 	udiv	r3, r2, r3
 8000916:	4618      	mov	r0, r3
 8000918:	f000 f93b 	bl	8000b92 <HAL_SYSTICK_Config>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000922:	2301      	movs	r3, #1
 8000924:	e00e      	b.n	8000944 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	2b0f      	cmp	r3, #15
 800092a:	d80a      	bhi.n	8000942 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800092c:	2200      	movs	r2, #0
 800092e:	6879      	ldr	r1, [r7, #4]
 8000930:	f04f 30ff 	mov.w	r0, #4294967295
 8000934:	f000 f903 	bl	8000b3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000938:	4a06      	ldr	r2, [pc, #24]	; (8000954 <HAL_InitTick+0x5c>)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800093e:	2300      	movs	r3, #0
 8000940:	e000      	b.n	8000944 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000942:	2301      	movs	r3, #1
}
 8000944:	4618      	mov	r0, r3
 8000946:	3708      	adds	r7, #8
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	20000000 	.word	0x20000000
 8000950:	20000008 	.word	0x20000008
 8000954:	20000004 	.word	0x20000004

08000958 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800095c:	4b05      	ldr	r3, [pc, #20]	; (8000974 <HAL_IncTick+0x1c>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	461a      	mov	r2, r3
 8000962:	4b05      	ldr	r3, [pc, #20]	; (8000978 <HAL_IncTick+0x20>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	4413      	add	r3, r2
 8000968:	4a03      	ldr	r2, [pc, #12]	; (8000978 <HAL_IncTick+0x20>)
 800096a:	6013      	str	r3, [r2, #0]
}
 800096c:	bf00      	nop
 800096e:	46bd      	mov	sp, r7
 8000970:	bc80      	pop	{r7}
 8000972:	4770      	bx	lr
 8000974:	20000008 	.word	0x20000008
 8000978:	20000244 	.word	0x20000244

0800097c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  return uwTick;
 8000980:	4b02      	ldr	r3, [pc, #8]	; (800098c <HAL_GetTick+0x10>)
 8000982:	681b      	ldr	r3, [r3, #0]
}
 8000984:	4618      	mov	r0, r3
 8000986:	46bd      	mov	sp, r7
 8000988:	bc80      	pop	{r7}
 800098a:	4770      	bx	lr
 800098c:	20000244 	.word	0x20000244

08000990 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000990:	b480      	push	{r7}
 8000992:	b085      	sub	sp, #20
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	f003 0307 	and.w	r3, r3, #7
 800099e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009a0:	4b0c      	ldr	r3, [pc, #48]	; (80009d4 <__NVIC_SetPriorityGrouping+0x44>)
 80009a2:	68db      	ldr	r3, [r3, #12]
 80009a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009a6:	68ba      	ldr	r2, [r7, #8]
 80009a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009ac:	4013      	ands	r3, r2
 80009ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009b4:	68bb      	ldr	r3, [r7, #8]
 80009b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009c2:	4a04      	ldr	r2, [pc, #16]	; (80009d4 <__NVIC_SetPriorityGrouping+0x44>)
 80009c4:	68bb      	ldr	r3, [r7, #8]
 80009c6:	60d3      	str	r3, [r2, #12]
}
 80009c8:	bf00      	nop
 80009ca:	3714      	adds	r7, #20
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bc80      	pop	{r7}
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	e000ed00 	.word	0xe000ed00

080009d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009dc:	4b04      	ldr	r3, [pc, #16]	; (80009f0 <__NVIC_GetPriorityGrouping+0x18>)
 80009de:	68db      	ldr	r3, [r3, #12]
 80009e0:	0a1b      	lsrs	r3, r3, #8
 80009e2:	f003 0307 	and.w	r3, r3, #7
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bc80      	pop	{r7}
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	e000ed00 	.word	0xe000ed00

080009f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	4603      	mov	r3, r0
 80009fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	db0b      	blt.n	8000a1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a06:	79fb      	ldrb	r3, [r7, #7]
 8000a08:	f003 021f 	and.w	r2, r3, #31
 8000a0c:	4906      	ldr	r1, [pc, #24]	; (8000a28 <__NVIC_EnableIRQ+0x34>)
 8000a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a12:	095b      	lsrs	r3, r3, #5
 8000a14:	2001      	movs	r0, #1
 8000a16:	fa00 f202 	lsl.w	r2, r0, r2
 8000a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a1e:	bf00      	nop
 8000a20:	370c      	adds	r7, #12
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bc80      	pop	{r7}
 8000a26:	4770      	bx	lr
 8000a28:	e000e100 	.word	0xe000e100

08000a2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	4603      	mov	r3, r0
 8000a34:	6039      	str	r1, [r7, #0]
 8000a36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	db0a      	blt.n	8000a56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	b2da      	uxtb	r2, r3
 8000a44:	490c      	ldr	r1, [pc, #48]	; (8000a78 <__NVIC_SetPriority+0x4c>)
 8000a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a4a:	0112      	lsls	r2, r2, #4
 8000a4c:	b2d2      	uxtb	r2, r2
 8000a4e:	440b      	add	r3, r1
 8000a50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a54:	e00a      	b.n	8000a6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	b2da      	uxtb	r2, r3
 8000a5a:	4908      	ldr	r1, [pc, #32]	; (8000a7c <__NVIC_SetPriority+0x50>)
 8000a5c:	79fb      	ldrb	r3, [r7, #7]
 8000a5e:	f003 030f 	and.w	r3, r3, #15
 8000a62:	3b04      	subs	r3, #4
 8000a64:	0112      	lsls	r2, r2, #4
 8000a66:	b2d2      	uxtb	r2, r2
 8000a68:	440b      	add	r3, r1
 8000a6a:	761a      	strb	r2, [r3, #24]
}
 8000a6c:	bf00      	nop
 8000a6e:	370c      	adds	r7, #12
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bc80      	pop	{r7}
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	e000e100 	.word	0xe000e100
 8000a7c:	e000ed00 	.word	0xe000ed00

08000a80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b089      	sub	sp, #36	; 0x24
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	60f8      	str	r0, [r7, #12]
 8000a88:	60b9      	str	r1, [r7, #8]
 8000a8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	f003 0307 	and.w	r3, r3, #7
 8000a92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a94:	69fb      	ldr	r3, [r7, #28]
 8000a96:	f1c3 0307 	rsb	r3, r3, #7
 8000a9a:	2b04      	cmp	r3, #4
 8000a9c:	bf28      	it	cs
 8000a9e:	2304      	movcs	r3, #4
 8000aa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aa2:	69fb      	ldr	r3, [r7, #28]
 8000aa4:	3304      	adds	r3, #4
 8000aa6:	2b06      	cmp	r3, #6
 8000aa8:	d902      	bls.n	8000ab0 <NVIC_EncodePriority+0x30>
 8000aaa:	69fb      	ldr	r3, [r7, #28]
 8000aac:	3b03      	subs	r3, #3
 8000aae:	e000      	b.n	8000ab2 <NVIC_EncodePriority+0x32>
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ab8:	69bb      	ldr	r3, [r7, #24]
 8000aba:	fa02 f303 	lsl.w	r3, r2, r3
 8000abe:	43da      	mvns	r2, r3
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	401a      	ands	r2, r3
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ac8:	f04f 31ff 	mov.w	r1, #4294967295
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	fa01 f303 	lsl.w	r3, r1, r3
 8000ad2:	43d9      	mvns	r1, r3
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad8:	4313      	orrs	r3, r2
         );
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3724      	adds	r7, #36	; 0x24
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bc80      	pop	{r7}
 8000ae2:	4770      	bx	lr

08000ae4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	3b01      	subs	r3, #1
 8000af0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000af4:	d301      	bcc.n	8000afa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000af6:	2301      	movs	r3, #1
 8000af8:	e00f      	b.n	8000b1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000afa:	4a0a      	ldr	r2, [pc, #40]	; (8000b24 <SysTick_Config+0x40>)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	3b01      	subs	r3, #1
 8000b00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b02:	210f      	movs	r1, #15
 8000b04:	f04f 30ff 	mov.w	r0, #4294967295
 8000b08:	f7ff ff90 	bl	8000a2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b0c:	4b05      	ldr	r3, [pc, #20]	; (8000b24 <SysTick_Config+0x40>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b12:	4b04      	ldr	r3, [pc, #16]	; (8000b24 <SysTick_Config+0x40>)
 8000b14:	2207      	movs	r2, #7
 8000b16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b18:	2300      	movs	r3, #0
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	e000e010 	.word	0xe000e010

08000b28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b30:	6878      	ldr	r0, [r7, #4]
 8000b32:	f7ff ff2d 	bl	8000990 <__NVIC_SetPriorityGrouping>
}
 8000b36:	bf00      	nop
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}

08000b3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	b086      	sub	sp, #24
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	4603      	mov	r3, r0
 8000b46:	60b9      	str	r1, [r7, #8]
 8000b48:	607a      	str	r2, [r7, #4]
 8000b4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b50:	f7ff ff42 	bl	80009d8 <__NVIC_GetPriorityGrouping>
 8000b54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b56:	687a      	ldr	r2, [r7, #4]
 8000b58:	68b9      	ldr	r1, [r7, #8]
 8000b5a:	6978      	ldr	r0, [r7, #20]
 8000b5c:	f7ff ff90 	bl	8000a80 <NVIC_EncodePriority>
 8000b60:	4602      	mov	r2, r0
 8000b62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b66:	4611      	mov	r1, r2
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f7ff ff5f 	bl	8000a2c <__NVIC_SetPriority>
}
 8000b6e:	bf00      	nop
 8000b70:	3718      	adds	r7, #24
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b76:	b580      	push	{r7, lr}
 8000b78:	b082      	sub	sp, #8
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff ff35 	bl	80009f4 <__NVIC_EnableIRQ>
}
 8000b8a:	bf00      	nop
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}

08000b92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b92:	b580      	push	{r7, lr}
 8000b94:	b082      	sub	sp, #8
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b9a:	6878      	ldr	r0, [r7, #4]
 8000b9c:	f7ff ffa2 	bl	8000ae4 <SysTick_Config>
 8000ba0:	4603      	mov	r3, r0
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
	...

08000bac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b08b      	sub	sp, #44	; 0x2c
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
 8000bb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bbe:	e169      	b.n	8000e94 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	69fa      	ldr	r2, [r7, #28]
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000bd4:	69ba      	ldr	r2, [r7, #24]
 8000bd6:	69fb      	ldr	r3, [r7, #28]
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	f040 8158 	bne.w	8000e8e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	4a9a      	ldr	r2, [pc, #616]	; (8000e4c <HAL_GPIO_Init+0x2a0>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d05e      	beq.n	8000ca6 <HAL_GPIO_Init+0xfa>
 8000be8:	4a98      	ldr	r2, [pc, #608]	; (8000e4c <HAL_GPIO_Init+0x2a0>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d875      	bhi.n	8000cda <HAL_GPIO_Init+0x12e>
 8000bee:	4a98      	ldr	r2, [pc, #608]	; (8000e50 <HAL_GPIO_Init+0x2a4>)
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d058      	beq.n	8000ca6 <HAL_GPIO_Init+0xfa>
 8000bf4:	4a96      	ldr	r2, [pc, #600]	; (8000e50 <HAL_GPIO_Init+0x2a4>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d86f      	bhi.n	8000cda <HAL_GPIO_Init+0x12e>
 8000bfa:	4a96      	ldr	r2, [pc, #600]	; (8000e54 <HAL_GPIO_Init+0x2a8>)
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d052      	beq.n	8000ca6 <HAL_GPIO_Init+0xfa>
 8000c00:	4a94      	ldr	r2, [pc, #592]	; (8000e54 <HAL_GPIO_Init+0x2a8>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d869      	bhi.n	8000cda <HAL_GPIO_Init+0x12e>
 8000c06:	4a94      	ldr	r2, [pc, #592]	; (8000e58 <HAL_GPIO_Init+0x2ac>)
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d04c      	beq.n	8000ca6 <HAL_GPIO_Init+0xfa>
 8000c0c:	4a92      	ldr	r2, [pc, #584]	; (8000e58 <HAL_GPIO_Init+0x2ac>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d863      	bhi.n	8000cda <HAL_GPIO_Init+0x12e>
 8000c12:	4a92      	ldr	r2, [pc, #584]	; (8000e5c <HAL_GPIO_Init+0x2b0>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d046      	beq.n	8000ca6 <HAL_GPIO_Init+0xfa>
 8000c18:	4a90      	ldr	r2, [pc, #576]	; (8000e5c <HAL_GPIO_Init+0x2b0>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d85d      	bhi.n	8000cda <HAL_GPIO_Init+0x12e>
 8000c1e:	2b12      	cmp	r3, #18
 8000c20:	d82a      	bhi.n	8000c78 <HAL_GPIO_Init+0xcc>
 8000c22:	2b12      	cmp	r3, #18
 8000c24:	d859      	bhi.n	8000cda <HAL_GPIO_Init+0x12e>
 8000c26:	a201      	add	r2, pc, #4	; (adr r2, 8000c2c <HAL_GPIO_Init+0x80>)
 8000c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c2c:	08000ca7 	.word	0x08000ca7
 8000c30:	08000c81 	.word	0x08000c81
 8000c34:	08000c93 	.word	0x08000c93
 8000c38:	08000cd5 	.word	0x08000cd5
 8000c3c:	08000cdb 	.word	0x08000cdb
 8000c40:	08000cdb 	.word	0x08000cdb
 8000c44:	08000cdb 	.word	0x08000cdb
 8000c48:	08000cdb 	.word	0x08000cdb
 8000c4c:	08000cdb 	.word	0x08000cdb
 8000c50:	08000cdb 	.word	0x08000cdb
 8000c54:	08000cdb 	.word	0x08000cdb
 8000c58:	08000cdb 	.word	0x08000cdb
 8000c5c:	08000cdb 	.word	0x08000cdb
 8000c60:	08000cdb 	.word	0x08000cdb
 8000c64:	08000cdb 	.word	0x08000cdb
 8000c68:	08000cdb 	.word	0x08000cdb
 8000c6c:	08000cdb 	.word	0x08000cdb
 8000c70:	08000c89 	.word	0x08000c89
 8000c74:	08000c9d 	.word	0x08000c9d
 8000c78:	4a79      	ldr	r2, [pc, #484]	; (8000e60 <HAL_GPIO_Init+0x2b4>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d013      	beq.n	8000ca6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c7e:	e02c      	b.n	8000cda <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	623b      	str	r3, [r7, #32]
          break;
 8000c86:	e029      	b.n	8000cdc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	68db      	ldr	r3, [r3, #12]
 8000c8c:	3304      	adds	r3, #4
 8000c8e:	623b      	str	r3, [r7, #32]
          break;
 8000c90:	e024      	b.n	8000cdc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	68db      	ldr	r3, [r3, #12]
 8000c96:	3308      	adds	r3, #8
 8000c98:	623b      	str	r3, [r7, #32]
          break;
 8000c9a:	e01f      	b.n	8000cdc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	68db      	ldr	r3, [r3, #12]
 8000ca0:	330c      	adds	r3, #12
 8000ca2:	623b      	str	r3, [r7, #32]
          break;
 8000ca4:	e01a      	b.n	8000cdc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	689b      	ldr	r3, [r3, #8]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d102      	bne.n	8000cb4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000cae:	2304      	movs	r3, #4
 8000cb0:	623b      	str	r3, [r7, #32]
          break;
 8000cb2:	e013      	b.n	8000cdc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	689b      	ldr	r3, [r3, #8]
 8000cb8:	2b01      	cmp	r3, #1
 8000cba:	d105      	bne.n	8000cc8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cbc:	2308      	movs	r3, #8
 8000cbe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	69fa      	ldr	r2, [r7, #28]
 8000cc4:	611a      	str	r2, [r3, #16]
          break;
 8000cc6:	e009      	b.n	8000cdc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cc8:	2308      	movs	r3, #8
 8000cca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	69fa      	ldr	r2, [r7, #28]
 8000cd0:	615a      	str	r2, [r3, #20]
          break;
 8000cd2:	e003      	b.n	8000cdc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	623b      	str	r3, [r7, #32]
          break;
 8000cd8:	e000      	b.n	8000cdc <HAL_GPIO_Init+0x130>
          break;
 8000cda:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000cdc:	69bb      	ldr	r3, [r7, #24]
 8000cde:	2bff      	cmp	r3, #255	; 0xff
 8000ce0:	d801      	bhi.n	8000ce6 <HAL_GPIO_Init+0x13a>
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	e001      	b.n	8000cea <HAL_GPIO_Init+0x13e>
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	3304      	adds	r3, #4
 8000cea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000cec:	69bb      	ldr	r3, [r7, #24]
 8000cee:	2bff      	cmp	r3, #255	; 0xff
 8000cf0:	d802      	bhi.n	8000cf8 <HAL_GPIO_Init+0x14c>
 8000cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf4:	009b      	lsls	r3, r3, #2
 8000cf6:	e002      	b.n	8000cfe <HAL_GPIO_Init+0x152>
 8000cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cfa:	3b08      	subs	r3, #8
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	210f      	movs	r1, #15
 8000d06:	693b      	ldr	r3, [r7, #16]
 8000d08:	fa01 f303 	lsl.w	r3, r1, r3
 8000d0c:	43db      	mvns	r3, r3
 8000d0e:	401a      	ands	r2, r3
 8000d10:	6a39      	ldr	r1, [r7, #32]
 8000d12:	693b      	ldr	r3, [r7, #16]
 8000d14:	fa01 f303 	lsl.w	r3, r1, r3
 8000d18:	431a      	orrs	r2, r3
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	f000 80b1 	beq.w	8000e8e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d2c:	4b4d      	ldr	r3, [pc, #308]	; (8000e64 <HAL_GPIO_Init+0x2b8>)
 8000d2e:	699b      	ldr	r3, [r3, #24]
 8000d30:	4a4c      	ldr	r2, [pc, #304]	; (8000e64 <HAL_GPIO_Init+0x2b8>)
 8000d32:	f043 0301 	orr.w	r3, r3, #1
 8000d36:	6193      	str	r3, [r2, #24]
 8000d38:	4b4a      	ldr	r3, [pc, #296]	; (8000e64 <HAL_GPIO_Init+0x2b8>)
 8000d3a:	699b      	ldr	r3, [r3, #24]
 8000d3c:	f003 0301 	and.w	r3, r3, #1
 8000d40:	60bb      	str	r3, [r7, #8]
 8000d42:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d44:	4a48      	ldr	r2, [pc, #288]	; (8000e68 <HAL_GPIO_Init+0x2bc>)
 8000d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d48:	089b      	lsrs	r3, r3, #2
 8000d4a:	3302      	adds	r3, #2
 8000d4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d50:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d54:	f003 0303 	and.w	r3, r3, #3
 8000d58:	009b      	lsls	r3, r3, #2
 8000d5a:	220f      	movs	r2, #15
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	43db      	mvns	r3, r3
 8000d62:	68fa      	ldr	r2, [r7, #12]
 8000d64:	4013      	ands	r3, r2
 8000d66:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	4a40      	ldr	r2, [pc, #256]	; (8000e6c <HAL_GPIO_Init+0x2c0>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d013      	beq.n	8000d98 <HAL_GPIO_Init+0x1ec>
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	4a3f      	ldr	r2, [pc, #252]	; (8000e70 <HAL_GPIO_Init+0x2c4>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d00d      	beq.n	8000d94 <HAL_GPIO_Init+0x1e8>
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	4a3e      	ldr	r2, [pc, #248]	; (8000e74 <HAL_GPIO_Init+0x2c8>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d007      	beq.n	8000d90 <HAL_GPIO_Init+0x1e4>
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	4a3d      	ldr	r2, [pc, #244]	; (8000e78 <HAL_GPIO_Init+0x2cc>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d101      	bne.n	8000d8c <HAL_GPIO_Init+0x1e0>
 8000d88:	2303      	movs	r3, #3
 8000d8a:	e006      	b.n	8000d9a <HAL_GPIO_Init+0x1ee>
 8000d8c:	2304      	movs	r3, #4
 8000d8e:	e004      	b.n	8000d9a <HAL_GPIO_Init+0x1ee>
 8000d90:	2302      	movs	r3, #2
 8000d92:	e002      	b.n	8000d9a <HAL_GPIO_Init+0x1ee>
 8000d94:	2301      	movs	r3, #1
 8000d96:	e000      	b.n	8000d9a <HAL_GPIO_Init+0x1ee>
 8000d98:	2300      	movs	r3, #0
 8000d9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d9c:	f002 0203 	and.w	r2, r2, #3
 8000da0:	0092      	lsls	r2, r2, #2
 8000da2:	4093      	lsls	r3, r2
 8000da4:	68fa      	ldr	r2, [r7, #12]
 8000da6:	4313      	orrs	r3, r2
 8000da8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000daa:	492f      	ldr	r1, [pc, #188]	; (8000e68 <HAL_GPIO_Init+0x2bc>)
 8000dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dae:	089b      	lsrs	r3, r3, #2
 8000db0:	3302      	adds	r3, #2
 8000db2:	68fa      	ldr	r2, [r7, #12]
 8000db4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d006      	beq.n	8000dd2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000dc4:	4b2d      	ldr	r3, [pc, #180]	; (8000e7c <HAL_GPIO_Init+0x2d0>)
 8000dc6:	689a      	ldr	r2, [r3, #8]
 8000dc8:	492c      	ldr	r1, [pc, #176]	; (8000e7c <HAL_GPIO_Init+0x2d0>)
 8000dca:	69bb      	ldr	r3, [r7, #24]
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	608b      	str	r3, [r1, #8]
 8000dd0:	e006      	b.n	8000de0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000dd2:	4b2a      	ldr	r3, [pc, #168]	; (8000e7c <HAL_GPIO_Init+0x2d0>)
 8000dd4:	689a      	ldr	r2, [r3, #8]
 8000dd6:	69bb      	ldr	r3, [r7, #24]
 8000dd8:	43db      	mvns	r3, r3
 8000dda:	4928      	ldr	r1, [pc, #160]	; (8000e7c <HAL_GPIO_Init+0x2d0>)
 8000ddc:	4013      	ands	r3, r2
 8000dde:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d006      	beq.n	8000dfa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000dec:	4b23      	ldr	r3, [pc, #140]	; (8000e7c <HAL_GPIO_Init+0x2d0>)
 8000dee:	68da      	ldr	r2, [r3, #12]
 8000df0:	4922      	ldr	r1, [pc, #136]	; (8000e7c <HAL_GPIO_Init+0x2d0>)
 8000df2:	69bb      	ldr	r3, [r7, #24]
 8000df4:	4313      	orrs	r3, r2
 8000df6:	60cb      	str	r3, [r1, #12]
 8000df8:	e006      	b.n	8000e08 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000dfa:	4b20      	ldr	r3, [pc, #128]	; (8000e7c <HAL_GPIO_Init+0x2d0>)
 8000dfc:	68da      	ldr	r2, [r3, #12]
 8000dfe:	69bb      	ldr	r3, [r7, #24]
 8000e00:	43db      	mvns	r3, r3
 8000e02:	491e      	ldr	r1, [pc, #120]	; (8000e7c <HAL_GPIO_Init+0x2d0>)
 8000e04:	4013      	ands	r3, r2
 8000e06:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d006      	beq.n	8000e22 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e14:	4b19      	ldr	r3, [pc, #100]	; (8000e7c <HAL_GPIO_Init+0x2d0>)
 8000e16:	685a      	ldr	r2, [r3, #4]
 8000e18:	4918      	ldr	r1, [pc, #96]	; (8000e7c <HAL_GPIO_Init+0x2d0>)
 8000e1a:	69bb      	ldr	r3, [r7, #24]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	604b      	str	r3, [r1, #4]
 8000e20:	e006      	b.n	8000e30 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e22:	4b16      	ldr	r3, [pc, #88]	; (8000e7c <HAL_GPIO_Init+0x2d0>)
 8000e24:	685a      	ldr	r2, [r3, #4]
 8000e26:	69bb      	ldr	r3, [r7, #24]
 8000e28:	43db      	mvns	r3, r3
 8000e2a:	4914      	ldr	r1, [pc, #80]	; (8000e7c <HAL_GPIO_Init+0x2d0>)
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d021      	beq.n	8000e80 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e3c:	4b0f      	ldr	r3, [pc, #60]	; (8000e7c <HAL_GPIO_Init+0x2d0>)
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	490e      	ldr	r1, [pc, #56]	; (8000e7c <HAL_GPIO_Init+0x2d0>)
 8000e42:	69bb      	ldr	r3, [r7, #24]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	600b      	str	r3, [r1, #0]
 8000e48:	e021      	b.n	8000e8e <HAL_GPIO_Init+0x2e2>
 8000e4a:	bf00      	nop
 8000e4c:	10320000 	.word	0x10320000
 8000e50:	10310000 	.word	0x10310000
 8000e54:	10220000 	.word	0x10220000
 8000e58:	10210000 	.word	0x10210000
 8000e5c:	10120000 	.word	0x10120000
 8000e60:	10110000 	.word	0x10110000
 8000e64:	40021000 	.word	0x40021000
 8000e68:	40010000 	.word	0x40010000
 8000e6c:	40010800 	.word	0x40010800
 8000e70:	40010c00 	.word	0x40010c00
 8000e74:	40011000 	.word	0x40011000
 8000e78:	40011400 	.word	0x40011400
 8000e7c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e80:	4b0b      	ldr	r3, [pc, #44]	; (8000eb0 <HAL_GPIO_Init+0x304>)
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	69bb      	ldr	r3, [r7, #24]
 8000e86:	43db      	mvns	r3, r3
 8000e88:	4909      	ldr	r1, [pc, #36]	; (8000eb0 <HAL_GPIO_Init+0x304>)
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e90:	3301      	adds	r3, #1
 8000e92:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e9a:	fa22 f303 	lsr.w	r3, r2, r3
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	f47f ae8e 	bne.w	8000bc0 <HAL_GPIO_Init+0x14>
  }
}
 8000ea4:	bf00      	nop
 8000ea6:	bf00      	nop
 8000ea8:	372c      	adds	r7, #44	; 0x2c
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bc80      	pop	{r7}
 8000eae:	4770      	bx	lr
 8000eb0:	40010400 	.word	0x40010400

08000eb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	460b      	mov	r3, r1
 8000ebe:	807b      	strh	r3, [r7, #2]
 8000ec0:	4613      	mov	r3, r2
 8000ec2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ec4:	787b      	ldrb	r3, [r7, #1]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d003      	beq.n	8000ed2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000eca:	887a      	ldrh	r2, [r7, #2]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000ed0:	e003      	b.n	8000eda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ed2:	887b      	ldrh	r3, [r7, #2]
 8000ed4:	041a      	lsls	r2, r3, #16
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	611a      	str	r2, [r3, #16]
}
 8000eda:	bf00      	nop
 8000edc:	370c      	adds	r7, #12
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bc80      	pop	{r7}
 8000ee2:	4770      	bx	lr

08000ee4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ee6:	b08b      	sub	sp, #44	; 0x2c
 8000ee8:	af06      	add	r7, sp, #24
 8000eea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d101      	bne.n	8000ef6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e0f1      	b.n	80010da <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d106      	bne.n	8000f10 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2200      	movs	r2, #0
 8000f06:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	f007 f872 	bl	8007ff4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2203      	movs	r2, #3
 8000f14:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f002 ff91 	bl	8003e44 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	603b      	str	r3, [r7, #0]
 8000f28:	687e      	ldr	r6, [r7, #4]
 8000f2a:	466d      	mov	r5, sp
 8000f2c:	f106 0410 	add.w	r4, r6, #16
 8000f30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f34:	6823      	ldr	r3, [r4, #0]
 8000f36:	602b      	str	r3, [r5, #0]
 8000f38:	1d33      	adds	r3, r6, #4
 8000f3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f3c:	6838      	ldr	r0, [r7, #0]
 8000f3e:	f002 ff5b 	bl	8003df8 <USB_CoreInit>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d005      	beq.n	8000f54 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2202      	movs	r2, #2
 8000f4c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000f50:	2301      	movs	r3, #1
 8000f52:	e0c2      	b.n	80010da <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	2100      	movs	r1, #0
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f002 ff8c 	bl	8003e78 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f60:	2300      	movs	r3, #0
 8000f62:	73fb      	strb	r3, [r7, #15]
 8000f64:	e040      	b.n	8000fe8 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000f66:	7bfb      	ldrb	r3, [r7, #15]
 8000f68:	6879      	ldr	r1, [r7, #4]
 8000f6a:	1c5a      	adds	r2, r3, #1
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	4413      	add	r3, r2
 8000f72:	00db      	lsls	r3, r3, #3
 8000f74:	440b      	add	r3, r1
 8000f76:	3301      	adds	r3, #1
 8000f78:	2201      	movs	r2, #1
 8000f7a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000f7c:	7bfb      	ldrb	r3, [r7, #15]
 8000f7e:	6879      	ldr	r1, [r7, #4]
 8000f80:	1c5a      	adds	r2, r3, #1
 8000f82:	4613      	mov	r3, r2
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	4413      	add	r3, r2
 8000f88:	00db      	lsls	r3, r3, #3
 8000f8a:	440b      	add	r3, r1
 8000f8c:	7bfa      	ldrb	r2, [r7, #15]
 8000f8e:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000f90:	7bfb      	ldrb	r3, [r7, #15]
 8000f92:	6879      	ldr	r1, [r7, #4]
 8000f94:	1c5a      	adds	r2, r3, #1
 8000f96:	4613      	mov	r3, r2
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	4413      	add	r3, r2
 8000f9c:	00db      	lsls	r3, r3, #3
 8000f9e:	440b      	add	r3, r1
 8000fa0:	3303      	adds	r3, #3
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000fa6:	7bfa      	ldrb	r2, [r7, #15]
 8000fa8:	6879      	ldr	r1, [r7, #4]
 8000faa:	4613      	mov	r3, r2
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	4413      	add	r3, r2
 8000fb0:	00db      	lsls	r3, r3, #3
 8000fb2:	440b      	add	r3, r1
 8000fb4:	3338      	adds	r3, #56	; 0x38
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000fba:	7bfa      	ldrb	r2, [r7, #15]
 8000fbc:	6879      	ldr	r1, [r7, #4]
 8000fbe:	4613      	mov	r3, r2
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	4413      	add	r3, r2
 8000fc4:	00db      	lsls	r3, r3, #3
 8000fc6:	440b      	add	r3, r1
 8000fc8:	333c      	adds	r3, #60	; 0x3c
 8000fca:	2200      	movs	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000fce:	7bfa      	ldrb	r2, [r7, #15]
 8000fd0:	6879      	ldr	r1, [r7, #4]
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	4413      	add	r3, r2
 8000fd8:	00db      	lsls	r3, r3, #3
 8000fda:	440b      	add	r3, r1
 8000fdc:	3340      	adds	r3, #64	; 0x40
 8000fde:	2200      	movs	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fe2:	7bfb      	ldrb	r3, [r7, #15]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	73fb      	strb	r3, [r7, #15]
 8000fe8:	7bfa      	ldrb	r2, [r7, #15]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	429a      	cmp	r2, r3
 8000ff0:	d3b9      	bcc.n	8000f66 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	73fb      	strb	r3, [r7, #15]
 8000ff6:	e044      	b.n	8001082 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000ff8:	7bfa      	ldrb	r2, [r7, #15]
 8000ffa:	6879      	ldr	r1, [r7, #4]
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	4413      	add	r3, r2
 8001002:	00db      	lsls	r3, r3, #3
 8001004:	440b      	add	r3, r1
 8001006:	f203 1369 	addw	r3, r3, #361	; 0x169
 800100a:	2200      	movs	r2, #0
 800100c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800100e:	7bfa      	ldrb	r2, [r7, #15]
 8001010:	6879      	ldr	r1, [r7, #4]
 8001012:	4613      	mov	r3, r2
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	4413      	add	r3, r2
 8001018:	00db      	lsls	r3, r3, #3
 800101a:	440b      	add	r3, r1
 800101c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001020:	7bfa      	ldrb	r2, [r7, #15]
 8001022:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001024:	7bfa      	ldrb	r2, [r7, #15]
 8001026:	6879      	ldr	r1, [r7, #4]
 8001028:	4613      	mov	r3, r2
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	4413      	add	r3, r2
 800102e:	00db      	lsls	r3, r3, #3
 8001030:	440b      	add	r3, r1
 8001032:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001036:	2200      	movs	r2, #0
 8001038:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800103a:	7bfa      	ldrb	r2, [r7, #15]
 800103c:	6879      	ldr	r1, [r7, #4]
 800103e:	4613      	mov	r3, r2
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	4413      	add	r3, r2
 8001044:	00db      	lsls	r3, r3, #3
 8001046:	440b      	add	r3, r1
 8001048:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001050:	7bfa      	ldrb	r2, [r7, #15]
 8001052:	6879      	ldr	r1, [r7, #4]
 8001054:	4613      	mov	r3, r2
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	4413      	add	r3, r2
 800105a:	00db      	lsls	r3, r3, #3
 800105c:	440b      	add	r3, r1
 800105e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001062:	2200      	movs	r2, #0
 8001064:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001066:	7bfa      	ldrb	r2, [r7, #15]
 8001068:	6879      	ldr	r1, [r7, #4]
 800106a:	4613      	mov	r3, r2
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	4413      	add	r3, r2
 8001070:	00db      	lsls	r3, r3, #3
 8001072:	440b      	add	r3, r1
 8001074:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800107c:	7bfb      	ldrb	r3, [r7, #15]
 800107e:	3301      	adds	r3, #1
 8001080:	73fb      	strb	r3, [r7, #15]
 8001082:	7bfa      	ldrb	r2, [r7, #15]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	429a      	cmp	r2, r3
 800108a:	d3b5      	bcc.n	8000ff8 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	603b      	str	r3, [r7, #0]
 8001092:	687e      	ldr	r6, [r7, #4]
 8001094:	466d      	mov	r5, sp
 8001096:	f106 0410 	add.w	r4, r6, #16
 800109a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800109c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800109e:	6823      	ldr	r3, [r4, #0]
 80010a0:	602b      	str	r3, [r5, #0]
 80010a2:	1d33      	adds	r3, r6, #4
 80010a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010a6:	6838      	ldr	r0, [r7, #0]
 80010a8:	f002 fef2 	bl	8003e90 <USB_DevInit>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d005      	beq.n	80010be <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2202      	movs	r2, #2
 80010b6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e00d      	b.n	80010da <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2200      	movs	r2, #0
 80010c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2201      	movs	r2, #1
 80010ca:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4618      	mov	r0, r3
 80010d4:	f005 f973 	bl	80063be <USB_DevDisconnect>

  return HAL_OK;
 80010d8:	2300      	movs	r3, #0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3714      	adds	r7, #20
 80010de:	46bd      	mov	sp, r7
 80010e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080010e2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b082      	sub	sp, #8
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d101      	bne.n	80010f8 <HAL_PCD_Start+0x16>
 80010f4:	2302      	movs	r3, #2
 80010f6:	e016      	b.n	8001126 <HAL_PCD_Start+0x44>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2201      	movs	r2, #1
 80010fc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4618      	mov	r0, r3
 8001106:	f002 fe87 	bl	8003e18 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800110a:	2101      	movs	r1, #1
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f007 f9e4 	bl	80084da <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4618      	mov	r0, r3
 8001118:	f005 f947 	bl	80063aa <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2200      	movs	r2, #0
 8001120:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001124:	2300      	movs	r3, #0
}
 8001126:	4618      	mov	r0, r3
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	b088      	sub	sp, #32
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4618      	mov	r0, r3
 800113c:	f005 f949 	bl	80063d2 <USB_ReadInterrupts>
 8001140:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001142:	69bb      	ldr	r3, [r7, #24]
 8001144:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001148:	2b00      	cmp	r3, #0
 800114a:	d003      	beq.n	8001154 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	f000 fb1b 	bl	8001788 <PCD_EP_ISR_Handler>

    return;
 8001152:	e119      	b.n	8001388 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001154:	69bb      	ldr	r3, [r7, #24]
 8001156:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800115a:	2b00      	cmp	r3, #0
 800115c:	d013      	beq.n	8001186 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001166:	b29a      	uxth	r2, r3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001170:	b292      	uxth	r2, r2
 8001172:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f006 ffb7 	bl	80080ea <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800117c:	2100      	movs	r1, #0
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f000 f905 	bl	800138e <HAL_PCD_SetAddress>

    return;
 8001184:	e100      	b.n	8001388 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001186:	69bb      	ldr	r3, [r7, #24]
 8001188:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800118c:	2b00      	cmp	r3, #0
 800118e:	d00c      	beq.n	80011aa <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001198:	b29a      	uxth	r2, r3
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80011a2:	b292      	uxth	r2, r2
 80011a4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80011a8:	e0ee      	b.n	8001388 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80011aa:	69bb      	ldr	r3, [r7, #24]
 80011ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d00c      	beq.n	80011ce <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80011bc:	b29a      	uxth	r2, r3
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80011c6:	b292      	uxth	r2, r2
 80011c8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80011cc:	e0dc      	b.n	8001388 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80011ce:	69bb      	ldr	r3, [r7, #24]
 80011d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d027      	beq.n	8001228 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80011e0:	b29a      	uxth	r2, r3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f022 0204 	bic.w	r2, r2, #4
 80011ea:	b292      	uxth	r2, r2
 80011ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80011f8:	b29a      	uxth	r2, r3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f022 0208 	bic.w	r2, r2, #8
 8001202:	b292      	uxth	r2, r2
 8001204:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f006 ffa7 	bl	800815c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001216:	b29a      	uxth	r2, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001220:	b292      	uxth	r2, r2
 8001222:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001226:	e0af      	b.n	8001388 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001228:	69bb      	ldr	r3, [r7, #24]
 800122a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800122e:	2b00      	cmp	r3, #0
 8001230:	f000 8083 	beq.w	800133a <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8001234:	2300      	movs	r3, #0
 8001236:	77fb      	strb	r3, [r7, #31]
 8001238:	e010      	b.n	800125c <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	461a      	mov	r2, r3
 8001240:	7ffb      	ldrb	r3, [r7, #31]
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	441a      	add	r2, r3
 8001246:	7ffb      	ldrb	r3, [r7, #31]
 8001248:	8812      	ldrh	r2, [r2, #0]
 800124a:	b292      	uxth	r2, r2
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	3320      	adds	r3, #32
 8001250:	443b      	add	r3, r7
 8001252:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8001256:	7ffb      	ldrb	r3, [r7, #31]
 8001258:	3301      	adds	r3, #1
 800125a:	77fb      	strb	r3, [r7, #31]
 800125c:	7ffb      	ldrb	r3, [r7, #31]
 800125e:	2b07      	cmp	r3, #7
 8001260:	d9eb      	bls.n	800123a <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800126a:	b29a      	uxth	r2, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f042 0201 	orr.w	r2, r2, #1
 8001274:	b292      	uxth	r2, r2
 8001276:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001282:	b29a      	uxth	r2, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f022 0201 	bic.w	r2, r2, #1
 800128c:	b292      	uxth	r2, r2
 800128e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001292:	bf00      	nop
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800129c:	b29b      	uxth	r3, r3
 800129e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d0f6      	beq.n	8001294 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80012ae:	b29a      	uxth	r2, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80012b8:	b292      	uxth	r2, r2
 80012ba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80012be:	2300      	movs	r3, #0
 80012c0:	77fb      	strb	r3, [r7, #31]
 80012c2:	e00f      	b.n	80012e4 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80012c4:	7ffb      	ldrb	r3, [r7, #31]
 80012c6:	687a      	ldr	r2, [r7, #4]
 80012c8:	6812      	ldr	r2, [r2, #0]
 80012ca:	4611      	mov	r1, r2
 80012cc:	7ffa      	ldrb	r2, [r7, #31]
 80012ce:	0092      	lsls	r2, r2, #2
 80012d0:	440a      	add	r2, r1
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	3320      	adds	r3, #32
 80012d6:	443b      	add	r3, r7
 80012d8:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80012dc:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80012de:	7ffb      	ldrb	r3, [r7, #31]
 80012e0:	3301      	adds	r3, #1
 80012e2:	77fb      	strb	r3, [r7, #31]
 80012e4:	7ffb      	ldrb	r3, [r7, #31]
 80012e6:	2b07      	cmp	r3, #7
 80012e8:	d9ec      	bls.n	80012c4 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80012f2:	b29a      	uxth	r2, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f042 0208 	orr.w	r2, r2, #8
 80012fc:	b292      	uxth	r2, r2
 80012fe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800130a:	b29a      	uxth	r2, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001314:	b292      	uxth	r2, r2
 8001316:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001322:	b29a      	uxth	r2, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f042 0204 	orr.w	r2, r2, #4
 800132c:	b292      	uxth	r2, r2
 800132e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f006 fef8 	bl	8008128 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001338:	e026      	b.n	8001388 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001340:	2b00      	cmp	r3, #0
 8001342:	d00f      	beq.n	8001364 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800134c:	b29a      	uxth	r2, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001356:	b292      	uxth	r2, r2
 8001358:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f006 feb6 	bl	80080ce <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001362:	e011      	b.n	8001388 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800136a:	2b00      	cmp	r3, #0
 800136c:	d00c      	beq.n	8001388 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001376:	b29a      	uxth	r2, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001380:	b292      	uxth	r2, r2
 8001382:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001386:	bf00      	nop
  }
}
 8001388:	3720      	adds	r7, #32
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	b082      	sub	sp, #8
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
 8001396:	460b      	mov	r3, r1
 8001398:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d101      	bne.n	80013a8 <HAL_PCD_SetAddress+0x1a>
 80013a4:	2302      	movs	r3, #2
 80013a6:	e013      	b.n	80013d0 <HAL_PCD_SetAddress+0x42>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2201      	movs	r2, #1
 80013ac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	78fa      	ldrb	r2, [r7, #3]
 80013b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	78fa      	ldrb	r2, [r7, #3]
 80013be:	4611      	mov	r1, r2
 80013c0:	4618      	mov	r0, r3
 80013c2:	f004 ffdf 	bl	8006384 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2200      	movs	r2, #0
 80013ca:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80013ce:	2300      	movs	r3, #0
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	4608      	mov	r0, r1
 80013e2:	4611      	mov	r1, r2
 80013e4:	461a      	mov	r2, r3
 80013e6:	4603      	mov	r3, r0
 80013e8:	70fb      	strb	r3, [r7, #3]
 80013ea:	460b      	mov	r3, r1
 80013ec:	803b      	strh	r3, [r7, #0]
 80013ee:	4613      	mov	r3, r2
 80013f0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80013f2:	2300      	movs	r3, #0
 80013f4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80013f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	da0e      	bge.n	800141c <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80013fe:	78fb      	ldrb	r3, [r7, #3]
 8001400:	f003 0307 	and.w	r3, r3, #7
 8001404:	1c5a      	adds	r2, r3, #1
 8001406:	4613      	mov	r3, r2
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	4413      	add	r3, r2
 800140c:	00db      	lsls	r3, r3, #3
 800140e:	687a      	ldr	r2, [r7, #4]
 8001410:	4413      	add	r3, r2
 8001412:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	2201      	movs	r2, #1
 8001418:	705a      	strb	r2, [r3, #1]
 800141a:	e00e      	b.n	800143a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800141c:	78fb      	ldrb	r3, [r7, #3]
 800141e:	f003 0207 	and.w	r2, r3, #7
 8001422:	4613      	mov	r3, r2
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	4413      	add	r3, r2
 8001428:	00db      	lsls	r3, r3, #3
 800142a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	4413      	add	r3, r2
 8001432:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	2200      	movs	r2, #0
 8001438:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800143a:	78fb      	ldrb	r3, [r7, #3]
 800143c:	f003 0307 	and.w	r3, r3, #7
 8001440:	b2da      	uxtb	r2, r3
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001446:	883a      	ldrh	r2, [r7, #0]
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	78ba      	ldrb	r2, [r7, #2]
 8001450:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001452:	78bb      	ldrb	r3, [r7, #2]
 8001454:	2b02      	cmp	r3, #2
 8001456:	d102      	bne.n	800145e <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	2200      	movs	r2, #0
 800145c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001464:	2b01      	cmp	r3, #1
 8001466:	d101      	bne.n	800146c <HAL_PCD_EP_Open+0x94>
 8001468:	2302      	movs	r3, #2
 800146a:	e00e      	b.n	800148a <HAL_PCD_EP_Open+0xb2>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2201      	movs	r2, #1
 8001470:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	68f9      	ldr	r1, [r7, #12]
 800147a:	4618      	mov	r0, r3
 800147c:	f002 fd28 	bl	8003ed0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2200      	movs	r2, #0
 8001484:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001488:	7afb      	ldrb	r3, [r7, #11]
}
 800148a:	4618      	mov	r0, r3
 800148c:	3710      	adds	r7, #16
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}

08001492 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	b084      	sub	sp, #16
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
 800149a:	460b      	mov	r3, r1
 800149c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800149e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	da0e      	bge.n	80014c4 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80014a6:	78fb      	ldrb	r3, [r7, #3]
 80014a8:	f003 0307 	and.w	r3, r3, #7
 80014ac:	1c5a      	adds	r2, r3, #1
 80014ae:	4613      	mov	r3, r2
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	4413      	add	r3, r2
 80014b4:	00db      	lsls	r3, r3, #3
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	4413      	add	r3, r2
 80014ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	2201      	movs	r2, #1
 80014c0:	705a      	strb	r2, [r3, #1]
 80014c2:	e00e      	b.n	80014e2 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80014c4:	78fb      	ldrb	r3, [r7, #3]
 80014c6:	f003 0207 	and.w	r2, r3, #7
 80014ca:	4613      	mov	r3, r2
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	4413      	add	r3, r2
 80014d0:	00db      	lsls	r3, r3, #3
 80014d2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	4413      	add	r3, r2
 80014da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	2200      	movs	r2, #0
 80014e0:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80014e2:	78fb      	ldrb	r3, [r7, #3]
 80014e4:	f003 0307 	and.w	r3, r3, #7
 80014e8:	b2da      	uxtb	r2, r3
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d101      	bne.n	80014fc <HAL_PCD_EP_Close+0x6a>
 80014f8:	2302      	movs	r3, #2
 80014fa:	e00e      	b.n	800151a <HAL_PCD_EP_Close+0x88>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2201      	movs	r2, #1
 8001500:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	68f9      	ldr	r1, [r7, #12]
 800150a:	4618      	mov	r0, r3
 800150c:	f003 f8a0 	bl	8004650 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2200      	movs	r2, #0
 8001514:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001518:	2300      	movs	r3, #0
}
 800151a:	4618      	mov	r0, r3
 800151c:	3710      	adds	r7, #16
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	b086      	sub	sp, #24
 8001526:	af00      	add	r7, sp, #0
 8001528:	60f8      	str	r0, [r7, #12]
 800152a:	607a      	str	r2, [r7, #4]
 800152c:	603b      	str	r3, [r7, #0]
 800152e:	460b      	mov	r3, r1
 8001530:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001532:	7afb      	ldrb	r3, [r7, #11]
 8001534:	f003 0207 	and.w	r2, r3, #7
 8001538:	4613      	mov	r3, r2
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	4413      	add	r3, r2
 800153e:	00db      	lsls	r3, r3, #3
 8001540:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001544:	68fa      	ldr	r2, [r7, #12]
 8001546:	4413      	add	r3, r2
 8001548:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	687a      	ldr	r2, [r7, #4]
 800154e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	683a      	ldr	r2, [r7, #0]
 8001554:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	2200      	movs	r2, #0
 800155a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	2200      	movs	r2, #0
 8001560:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001562:	7afb      	ldrb	r3, [r7, #11]
 8001564:	f003 0307 	and.w	r3, r3, #7
 8001568:	b2da      	uxtb	r2, r3
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	6979      	ldr	r1, [r7, #20]
 8001574:	4618      	mov	r0, r3
 8001576:	f003 fa57 	bl	8004a28 <USB_EPStartXfer>

  return HAL_OK;
 800157a:	2300      	movs	r3, #0
}
 800157c:	4618      	mov	r0, r3
 800157e:	3718      	adds	r7, #24
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}

08001584 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	460b      	mov	r3, r1
 800158e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001590:	78fb      	ldrb	r3, [r7, #3]
 8001592:	f003 0207 	and.w	r2, r3, #7
 8001596:	6879      	ldr	r1, [r7, #4]
 8001598:	4613      	mov	r3, r2
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	4413      	add	r3, r2
 800159e:	00db      	lsls	r3, r3, #3
 80015a0:	440b      	add	r3, r1
 80015a2:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80015a6:	681b      	ldr	r3, [r3, #0]
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bc80      	pop	{r7}
 80015b0:	4770      	bx	lr

080015b2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b086      	sub	sp, #24
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	60f8      	str	r0, [r7, #12]
 80015ba:	607a      	str	r2, [r7, #4]
 80015bc:	603b      	str	r3, [r7, #0]
 80015be:	460b      	mov	r3, r1
 80015c0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80015c2:	7afb      	ldrb	r3, [r7, #11]
 80015c4:	f003 0307 	and.w	r3, r3, #7
 80015c8:	1c5a      	adds	r2, r3, #1
 80015ca:	4613      	mov	r3, r2
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	4413      	add	r3, r2
 80015d0:	00db      	lsls	r3, r3, #3
 80015d2:	68fa      	ldr	r2, [r7, #12]
 80015d4:	4413      	add	r3, r2
 80015d6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	683a      	ldr	r2, [r7, #0]
 80015e2:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	2201      	movs	r2, #1
 80015e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	683a      	ldr	r2, [r7, #0]
 80015f0:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	2200      	movs	r2, #0
 80015f6:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	2201      	movs	r2, #1
 80015fc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80015fe:	7afb      	ldrb	r3, [r7, #11]
 8001600:	f003 0307 	and.w	r3, r3, #7
 8001604:	b2da      	uxtb	r2, r3
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	6979      	ldr	r1, [r7, #20]
 8001610:	4618      	mov	r0, r3
 8001612:	f003 fa09 	bl	8004a28 <USB_EPStartXfer>

  return HAL_OK;
 8001616:	2300      	movs	r3, #0
}
 8001618:	4618      	mov	r0, r3
 800161a:	3718      	adds	r7, #24
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}

08001620 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	460b      	mov	r3, r1
 800162a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800162c:	78fb      	ldrb	r3, [r7, #3]
 800162e:	f003 0207 	and.w	r2, r3, #7
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	429a      	cmp	r2, r3
 8001638:	d901      	bls.n	800163e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e04c      	b.n	80016d8 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800163e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001642:	2b00      	cmp	r3, #0
 8001644:	da0e      	bge.n	8001664 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001646:	78fb      	ldrb	r3, [r7, #3]
 8001648:	f003 0307 	and.w	r3, r3, #7
 800164c:	1c5a      	adds	r2, r3, #1
 800164e:	4613      	mov	r3, r2
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	4413      	add	r3, r2
 8001654:	00db      	lsls	r3, r3, #3
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	4413      	add	r3, r2
 800165a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	2201      	movs	r2, #1
 8001660:	705a      	strb	r2, [r3, #1]
 8001662:	e00c      	b.n	800167e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001664:	78fa      	ldrb	r2, [r7, #3]
 8001666:	4613      	mov	r3, r2
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	4413      	add	r3, r2
 800166c:	00db      	lsls	r3, r3, #3
 800166e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	4413      	add	r3, r2
 8001676:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	2200      	movs	r2, #0
 800167c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	2201      	movs	r2, #1
 8001682:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001684:	78fb      	ldrb	r3, [r7, #3]
 8001686:	f003 0307 	and.w	r3, r3, #7
 800168a:	b2da      	uxtb	r2, r3
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001696:	2b01      	cmp	r3, #1
 8001698:	d101      	bne.n	800169e <HAL_PCD_EP_SetStall+0x7e>
 800169a:	2302      	movs	r3, #2
 800169c:	e01c      	b.n	80016d8 <HAL_PCD_EP_SetStall+0xb8>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2201      	movs	r2, #1
 80016a2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	68f9      	ldr	r1, [r7, #12]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f004 fd6c 	bl	800618a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80016b2:	78fb      	ldrb	r3, [r7, #3]
 80016b4:	f003 0307 	and.w	r3, r3, #7
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d108      	bne.n	80016ce <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80016c6:	4619      	mov	r1, r3
 80016c8:	4610      	mov	r0, r2
 80016ca:	f004 fe91 	bl	80063f0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2200      	movs	r2, #0
 80016d2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80016d6:	2300      	movs	r3, #0
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3710      	adds	r7, #16
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}

080016e0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	460b      	mov	r3, r1
 80016ea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80016ec:	78fb      	ldrb	r3, [r7, #3]
 80016ee:	f003 020f 	and.w	r2, r3, #15
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d901      	bls.n	80016fe <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e040      	b.n	8001780 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80016fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001702:	2b00      	cmp	r3, #0
 8001704:	da0e      	bge.n	8001724 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001706:	78fb      	ldrb	r3, [r7, #3]
 8001708:	f003 0307 	and.w	r3, r3, #7
 800170c:	1c5a      	adds	r2, r3, #1
 800170e:	4613      	mov	r3, r2
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	4413      	add	r3, r2
 8001714:	00db      	lsls	r3, r3, #3
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	4413      	add	r3, r2
 800171a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	2201      	movs	r2, #1
 8001720:	705a      	strb	r2, [r3, #1]
 8001722:	e00e      	b.n	8001742 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001724:	78fb      	ldrb	r3, [r7, #3]
 8001726:	f003 0207 	and.w	r2, r3, #7
 800172a:	4613      	mov	r3, r2
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	4413      	add	r3, r2
 8001730:	00db      	lsls	r3, r3, #3
 8001732:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	4413      	add	r3, r2
 800173a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	2200      	movs	r2, #0
 8001740:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	2200      	movs	r2, #0
 8001746:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001748:	78fb      	ldrb	r3, [r7, #3]
 800174a:	f003 0307 	and.w	r3, r3, #7
 800174e:	b2da      	uxtb	r2, r3
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800175a:	2b01      	cmp	r3, #1
 800175c:	d101      	bne.n	8001762 <HAL_PCD_EP_ClrStall+0x82>
 800175e:	2302      	movs	r3, #2
 8001760:	e00e      	b.n	8001780 <HAL_PCD_EP_ClrStall+0xa0>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2201      	movs	r2, #1
 8001766:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	68f9      	ldr	r1, [r7, #12]
 8001770:	4618      	mov	r0, r3
 8001772:	f004 fd5a 	bl	800622a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2200      	movs	r2, #0
 800177a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800177e:	2300      	movs	r3, #0
}
 8001780:	4618      	mov	r0, r3
 8001782:	3710      	adds	r7, #16
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}

08001788 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b096      	sub	sp, #88	; 0x58
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001790:	e3bf      	b.n	8001f12 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800179a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800179e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	f003 030f 	and.w	r3, r3, #15
 80017a8:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 80017ac:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	f040 8179 	bne.w	8001aa8 <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80017b6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80017ba:	f003 0310 	and.w	r3, r3, #16
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d152      	bne.n	8001868 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	881b      	ldrh	r3, [r3, #0]
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80017ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017d2:	81fb      	strh	r3, [r7, #14]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	89fb      	ldrh	r3, [r7, #14]
 80017da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80017de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80017e2:	b29b      	uxth	r3, r3
 80017e4:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	3328      	adds	r3, #40	; 0x28
 80017ea:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	461a      	mov	r2, r3
 80017f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	00db      	lsls	r3, r3, #3
 80017fe:	4413      	add	r3, r2
 8001800:	3302      	adds	r3, #2
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	6812      	ldr	r2, [r2, #0]
 8001808:	4413      	add	r3, r2
 800180a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800180e:	881b      	ldrh	r3, [r3, #0]
 8001810:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001814:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001816:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001818:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800181a:	695a      	ldr	r2, [r3, #20]
 800181c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800181e:	69db      	ldr	r3, [r3, #28]
 8001820:	441a      	add	r2, r3
 8001822:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001824:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001826:	2100      	movs	r1, #0
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f006 fc36 	bl	800809a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001834:	b2db      	uxtb	r3, r3
 8001836:	2b00      	cmp	r3, #0
 8001838:	f000 836b 	beq.w	8001f12 <PCD_EP_ISR_Handler+0x78a>
 800183c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800183e:	699b      	ldr	r3, [r3, #24]
 8001840:	2b00      	cmp	r3, #0
 8001842:	f040 8366 	bne.w	8001f12 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800184c:	b2db      	uxtb	r3, r3
 800184e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001852:	b2da      	uxtb	r2, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	b292      	uxth	r2, r2
 800185a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2200      	movs	r2, #0
 8001862:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001866:	e354      	b.n	8001f12 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800186e:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	881b      	ldrh	r3, [r3, #0]
 8001876:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800187a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800187e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001882:	2b00      	cmp	r3, #0
 8001884:	d034      	beq.n	80018f0 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800188e:	b29b      	uxth	r3, r3
 8001890:	461a      	mov	r2, r3
 8001892:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	00db      	lsls	r3, r3, #3
 8001898:	4413      	add	r3, r2
 800189a:	3306      	adds	r3, #6
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	6812      	ldr	r2, [r2, #0]
 80018a2:	4413      	add	r3, r2
 80018a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80018a8:	881b      	ldrh	r3, [r3, #0]
 80018aa:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80018ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018b0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6818      	ldr	r0, [r3, #0]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80018bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018be:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80018c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018c2:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80018c4:	b29b      	uxth	r3, r3
 80018c6:	f004 fde3 	bl	8006490 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	881b      	ldrh	r3, [r3, #0]
 80018d0:	b29a      	uxth	r2, r3
 80018d2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80018d6:	4013      	ands	r3, r2
 80018d8:	823b      	strh	r3, [r7, #16]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	8a3a      	ldrh	r2, [r7, #16]
 80018e0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80018e4:	b292      	uxth	r2, r2
 80018e6:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f006 fba9 	bl	8008040 <HAL_PCD_SetupStageCallback>
 80018ee:	e310      	b.n	8001f12 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80018f0:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	f280 830c 	bge.w	8001f12 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	881b      	ldrh	r3, [r3, #0]
 8001900:	b29a      	uxth	r2, r3
 8001902:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001906:	4013      	ands	r3, r2
 8001908:	83fb      	strh	r3, [r7, #30]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	8bfa      	ldrh	r2, [r7, #30]
 8001910:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001914:	b292      	uxth	r2, r2
 8001916:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001920:	b29b      	uxth	r3, r3
 8001922:	461a      	mov	r2, r3
 8001924:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	00db      	lsls	r3, r3, #3
 800192a:	4413      	add	r3, r2
 800192c:	3306      	adds	r3, #6
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	6812      	ldr	r2, [r2, #0]
 8001934:	4413      	add	r3, r2
 8001936:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800193a:	881b      	ldrh	r3, [r3, #0]
 800193c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001940:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001942:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001944:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001946:	69db      	ldr	r3, [r3, #28]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d019      	beq.n	8001980 <PCD_EP_ISR_Handler+0x1f8>
 800194c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800194e:	695b      	ldr	r3, [r3, #20]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d015      	beq.n	8001980 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6818      	ldr	r0, [r3, #0]
 8001958:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800195a:	6959      	ldr	r1, [r3, #20]
 800195c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800195e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001960:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001962:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001964:	b29b      	uxth	r3, r3
 8001966:	f004 fd93 	bl	8006490 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800196a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800196c:	695a      	ldr	r2, [r3, #20]
 800196e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001970:	69db      	ldr	r3, [r3, #28]
 8001972:	441a      	add	r2, r3
 8001974:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001976:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001978:	2100      	movs	r1, #0
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f006 fb72 	bl	8008064 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	881b      	ldrh	r3, [r3, #0]
 8001986:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800198a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800198e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001992:	2b00      	cmp	r3, #0
 8001994:	f040 82bd 	bne.w	8001f12 <PCD_EP_ISR_Handler+0x78a>
 8001998:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800199c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80019a0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80019a4:	f000 82b5 	beq.w	8001f12 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	61bb      	str	r3, [r7, #24]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80019b6:	b29b      	uxth	r3, r3
 80019b8:	461a      	mov	r2, r3
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	4413      	add	r3, r2
 80019be:	61bb      	str	r3, [r7, #24]
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80019c6:	617b      	str	r3, [r7, #20]
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	881b      	ldrh	r3, [r3, #0]
 80019cc:	b29b      	uxth	r3, r3
 80019ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80019d2:	b29a      	uxth	r2, r3
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	801a      	strh	r2, [r3, #0]
 80019d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019da:	691b      	ldr	r3, [r3, #16]
 80019dc:	2b3e      	cmp	r3, #62	; 0x3e
 80019de:	d91d      	bls.n	8001a1c <PCD_EP_ISR_Handler+0x294>
 80019e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019e2:	691b      	ldr	r3, [r3, #16]
 80019e4:	095b      	lsrs	r3, r3, #5
 80019e6:	647b      	str	r3, [r7, #68]	; 0x44
 80019e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019ea:	691b      	ldr	r3, [r3, #16]
 80019ec:	f003 031f 	and.w	r3, r3, #31
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d102      	bne.n	80019fa <PCD_EP_ISR_Handler+0x272>
 80019f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019f6:	3b01      	subs	r3, #1
 80019f8:	647b      	str	r3, [r7, #68]	; 0x44
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	881b      	ldrh	r3, [r3, #0]
 80019fe:	b29a      	uxth	r2, r3
 8001a00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	029b      	lsls	r3, r3, #10
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a14:	b29a      	uxth	r2, r3
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	801a      	strh	r2, [r3, #0]
 8001a1a:	e026      	b.n	8001a6a <PCD_EP_ISR_Handler+0x2e2>
 8001a1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a1e:	691b      	ldr	r3, [r3, #16]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d10a      	bne.n	8001a3a <PCD_EP_ISR_Handler+0x2b2>
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	881b      	ldrh	r3, [r3, #0]
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a32:	b29a      	uxth	r2, r3
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	801a      	strh	r2, [r3, #0]
 8001a38:	e017      	b.n	8001a6a <PCD_EP_ISR_Handler+0x2e2>
 8001a3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a3c:	691b      	ldr	r3, [r3, #16]
 8001a3e:	085b      	lsrs	r3, r3, #1
 8001a40:	647b      	str	r3, [r7, #68]	; 0x44
 8001a42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a44:	691b      	ldr	r3, [r3, #16]
 8001a46:	f003 0301 	and.w	r3, r3, #1
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d002      	beq.n	8001a54 <PCD_EP_ISR_Handler+0x2cc>
 8001a4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a50:	3301      	adds	r3, #1
 8001a52:	647b      	str	r3, [r7, #68]	; 0x44
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	881b      	ldrh	r3, [r3, #0]
 8001a58:	b29a      	uxth	r2, r3
 8001a5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	029b      	lsls	r3, r3, #10
 8001a60:	b29b      	uxth	r3, r3
 8001a62:	4313      	orrs	r3, r2
 8001a64:	b29a      	uxth	r2, r3
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	881b      	ldrh	r3, [r3, #0]
 8001a70:	b29b      	uxth	r3, r3
 8001a72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001a76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a7a:	827b      	strh	r3, [r7, #18]
 8001a7c:	8a7b      	ldrh	r3, [r7, #18]
 8001a7e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001a82:	827b      	strh	r3, [r7, #18]
 8001a84:	8a7b      	ldrh	r3, [r7, #18]
 8001a86:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001a8a:	827b      	strh	r3, [r7, #18]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	8a7b      	ldrh	r3, [r7, #18]
 8001a92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001a96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001a9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	8013      	strh	r3, [r2, #0]
 8001aa6:	e234      	b.n	8001f12 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	461a      	mov	r2, r3
 8001aae:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	4413      	add	r3, r2
 8001ab6:	881b      	ldrh	r3, [r3, #0]
 8001ab8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001abc:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	f280 80fc 	bge.w	8001cbe <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	461a      	mov	r2, r3
 8001acc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	4413      	add	r3, r2
 8001ad4:	881b      	ldrh	r3, [r3, #0]
 8001ad6:	b29a      	uxth	r2, r3
 8001ad8:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001adc:	4013      	ands	r3, r2
 8001ade:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	4413      	add	r3, r2
 8001af0:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001af4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001af8:	b292      	uxth	r2, r2
 8001afa:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001afc:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8001b00:	4613      	mov	r3, r2
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	4413      	add	r3, r2
 8001b06:	00db      	lsls	r3, r3, #3
 8001b08:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	4413      	add	r3, r2
 8001b10:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001b12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b14:	7b1b      	ldrb	r3, [r3, #12]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d125      	bne.n	8001b66 <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	461a      	mov	r2, r3
 8001b26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	00db      	lsls	r3, r3, #3
 8001b2c:	4413      	add	r3, r2
 8001b2e:	3306      	adds	r3, #6
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	6812      	ldr	r2, [r2, #0]
 8001b36:	4413      	add	r3, r2
 8001b38:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b3c:	881b      	ldrh	r3, [r3, #0]
 8001b3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b42:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8001b46:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	f000 8092 	beq.w	8001c74 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6818      	ldr	r0, [r3, #0]
 8001b54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b56:	6959      	ldr	r1, [r3, #20]
 8001b58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b5a:	88da      	ldrh	r2, [r3, #6]
 8001b5c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001b60:	f004 fc96 	bl	8006490 <USB_ReadPMA>
 8001b64:	e086      	b.n	8001c74 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001b66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b68:	78db      	ldrb	r3, [r3, #3]
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d10a      	bne.n	8001b84 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001b6e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001b72:	461a      	mov	r2, r3
 8001b74:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f000 f9d9 	bl	8001f2e <HAL_PCD_EP_DB_Receive>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8001b82:	e077      	b.n	8001c74 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	461a      	mov	r2, r3
 8001b8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	4413      	add	r3, r2
 8001b92:	881b      	ldrh	r3, [r3, #0]
 8001b94:	b29b      	uxth	r3, r3
 8001b96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b9e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	441a      	add	r2, r3
 8001bb0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001bb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001bb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001bbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bc0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	461a      	mov	r2, r3
 8001bce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	4413      	add	r3, r2
 8001bd6:	881b      	ldrh	r3, [r3, #0]
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d024      	beq.n	8001c2c <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	461a      	mov	r2, r3
 8001bee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	00db      	lsls	r3, r3, #3
 8001bf4:	4413      	add	r3, r2
 8001bf6:	3302      	adds	r3, #2
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	6812      	ldr	r2, [r2, #0]
 8001bfe:	4413      	add	r3, r2
 8001c00:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c04:	881b      	ldrh	r3, [r3, #0]
 8001c06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c0a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001c0e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d02e      	beq.n	8001c74 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6818      	ldr	r0, [r3, #0]
 8001c1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c1c:	6959      	ldr	r1, [r3, #20]
 8001c1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c20:	891a      	ldrh	r2, [r3, #8]
 8001c22:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001c26:	f004 fc33 	bl	8006490 <USB_ReadPMA>
 8001c2a:	e023      	b.n	8001c74 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c34:	b29b      	uxth	r3, r3
 8001c36:	461a      	mov	r2, r3
 8001c38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	00db      	lsls	r3, r3, #3
 8001c3e:	4413      	add	r3, r2
 8001c40:	3306      	adds	r3, #6
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	6812      	ldr	r2, [r2, #0]
 8001c48:	4413      	add	r3, r2
 8001c4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c4e:	881b      	ldrh	r3, [r3, #0]
 8001c50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c54:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001c58:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d009      	beq.n	8001c74 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6818      	ldr	r0, [r3, #0]
 8001c64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c66:	6959      	ldr	r1, [r3, #20]
 8001c68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c6a:	895a      	ldrh	r2, [r3, #10]
 8001c6c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001c70:	f004 fc0e 	bl	8006490 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001c74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c76:	69da      	ldr	r2, [r3, #28]
 8001c78:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001c7c:	441a      	add	r2, r3
 8001c7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c80:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001c82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c84:	695a      	ldr	r2, [r3, #20]
 8001c86:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001c8a:	441a      	add	r2, r3
 8001c8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c8e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001c90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c92:	699b      	ldr	r3, [r3, #24]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d005      	beq.n	8001ca4 <PCD_EP_ISR_Handler+0x51c>
 8001c98:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8001c9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c9e:	691b      	ldr	r3, [r3, #16]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d206      	bcs.n	8001cb2 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001ca4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	4619      	mov	r1, r3
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f006 f9da 	bl	8008064 <HAL_PCD_DataOutStageCallback>
 8001cb0:	e005      	b.n	8001cbe <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f002 feb5 	bl	8004a28 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001cbe:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	f000 8123 	beq.w	8001f12 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8001ccc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001cd0:	1c5a      	adds	r2, r3, #1
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	4413      	add	r3, r2
 8001cd8:	00db      	lsls	r3, r3, #3
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	4413      	add	r3, r2
 8001cde:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	4413      	add	r3, r2
 8001cee:	881b      	ldrh	r3, [r3, #0]
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001cf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cfa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	461a      	mov	r2, r3
 8001d04:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	441a      	add	r2, r3
 8001d0c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001d10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001d1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d1e:	78db      	ldrb	r3, [r3, #3]
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	f040 80a2 	bne.w	8001e6a <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 8001d26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d28:	2200      	movs	r2, #0
 8001d2a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001d2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d2e:	7b1b      	ldrb	r3, [r3, #12]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	f000 8093 	beq.w	8001e5c <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001d36:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d046      	beq.n	8001dd0 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001d42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d44:	785b      	ldrb	r3, [r3, #1]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d126      	bne.n	8001d98 <PCD_EP_ISR_Handler+0x610>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5e:	4413      	add	r3, r2
 8001d60:	627b      	str	r3, [r7, #36]	; 0x24
 8001d62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	011a      	lsls	r2, r3, #4
 8001d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6a:	4413      	add	r3, r2
 8001d6c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001d70:	623b      	str	r3, [r7, #32]
 8001d72:	6a3b      	ldr	r3, [r7, #32]
 8001d74:	881b      	ldrh	r3, [r3, #0]
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d7c:	b29a      	uxth	r2, r3
 8001d7e:	6a3b      	ldr	r3, [r7, #32]
 8001d80:	801a      	strh	r2, [r3, #0]
 8001d82:	6a3b      	ldr	r3, [r7, #32]
 8001d84:	881b      	ldrh	r3, [r3, #0]
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d90:	b29a      	uxth	r2, r3
 8001d92:	6a3b      	ldr	r3, [r7, #32]
 8001d94:	801a      	strh	r2, [r3, #0]
 8001d96:	e061      	b.n	8001e5c <PCD_EP_ISR_Handler+0x6d4>
 8001d98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d9a:	785b      	ldrb	r3, [r3, #1]
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d15d      	bne.n	8001e5c <PCD_EP_ISR_Handler+0x6d4>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	461a      	mov	r2, r3
 8001db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001db4:	4413      	add	r3, r2
 8001db6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001db8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	011a      	lsls	r2, r3, #4
 8001dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dc0:	4413      	add	r3, r2
 8001dc2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001dc6:	62bb      	str	r3, [r7, #40]	; 0x28
 8001dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dca:	2200      	movs	r2, #0
 8001dcc:	801a      	strh	r2, [r3, #0]
 8001dce:	e045      	b.n	8001e5c <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001dd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dd8:	785b      	ldrb	r3, [r3, #1]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d126      	bne.n	8001e2c <PCD_EP_ISR_Handler+0x6a4>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	637b      	str	r3, [r7, #52]	; 0x34
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001dec:	b29b      	uxth	r3, r3
 8001dee:	461a      	mov	r2, r3
 8001df0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001df2:	4413      	add	r3, r2
 8001df4:	637b      	str	r3, [r7, #52]	; 0x34
 8001df6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	011a      	lsls	r2, r3, #4
 8001dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dfe:	4413      	add	r3, r2
 8001e00:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001e04:	633b      	str	r3, [r7, #48]	; 0x30
 8001e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e08:	881b      	ldrh	r3, [r3, #0]
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e10:	b29a      	uxth	r2, r3
 8001e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e14:	801a      	strh	r2, [r3, #0]
 8001e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e18:	881b      	ldrh	r3, [r3, #0]
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e24:	b29a      	uxth	r2, r3
 8001e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e28:	801a      	strh	r2, [r3, #0]
 8001e2a:	e017      	b.n	8001e5c <PCD_EP_ISR_Handler+0x6d4>
 8001e2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e2e:	785b      	ldrb	r3, [r3, #1]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d113      	bne.n	8001e5c <PCD_EP_ISR_Handler+0x6d4>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e3c:	b29b      	uxth	r3, r3
 8001e3e:	461a      	mov	r2, r3
 8001e40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e42:	4413      	add	r3, r2
 8001e44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	011a      	lsls	r2, r3, #4
 8001e4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e4e:	4413      	add	r3, r2
 8001e50:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001e54:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e58:	2200      	movs	r2, #0
 8001e5a:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001e5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	4619      	mov	r1, r3
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f006 f919 	bl	800809a <HAL_PCD_DataInStageCallback>
 8001e68:	e053      	b.n	8001f12 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001e6a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d146      	bne.n	8001f04 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e7e:	b29b      	uxth	r3, r3
 8001e80:	461a      	mov	r2, r3
 8001e82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	00db      	lsls	r3, r3, #3
 8001e88:	4413      	add	r3, r2
 8001e8a:	3302      	adds	r3, #2
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	6812      	ldr	r2, [r2, #0]
 8001e92:	4413      	add	r3, r2
 8001e94:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e98:	881b      	ldrh	r3, [r3, #0]
 8001e9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e9e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8001ea2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ea4:	699a      	ldr	r2, [r3, #24]
 8001ea6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d907      	bls.n	8001ebe <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 8001eae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001eb0:	699a      	ldr	r2, [r3, #24]
 8001eb2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001eb6:	1ad2      	subs	r2, r2, r3
 8001eb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001eba:	619a      	str	r2, [r3, #24]
 8001ebc:	e002      	b.n	8001ec4 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 8001ebe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001ec4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ec6:	699b      	ldr	r3, [r3, #24]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d106      	bne.n	8001eda <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001ecc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f006 f8e1 	bl	800809a <HAL_PCD_DataInStageCallback>
 8001ed8:	e01b      	b.n	8001f12 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001eda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001edc:	695a      	ldr	r2, [r3, #20]
 8001ede:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001ee2:	441a      	add	r2, r3
 8001ee4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ee6:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001ee8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001eea:	69da      	ldr	r2, [r3, #28]
 8001eec:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001ef0:	441a      	add	r2, r3
 8001ef2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ef4:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001efc:	4618      	mov	r0, r3
 8001efe:	f002 fd93 	bl	8004a28 <USB_EPStartXfer>
 8001f02:	e006      	b.n	8001f12 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001f04:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001f08:	461a      	mov	r2, r3
 8001f0a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f000 f91b 	bl	8002148 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	b21b      	sxth	r3, r3
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	f6ff ac37 	blt.w	8001792 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3758      	adds	r7, #88	; 0x58
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b088      	sub	sp, #32
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	60f8      	str	r0, [r7, #12]
 8001f36:	60b9      	str	r1, [r7, #8]
 8001f38:	4613      	mov	r3, r2
 8001f3a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001f3c:	88fb      	ldrh	r3, [r7, #6]
 8001f3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d07e      	beq.n	8002044 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	461a      	mov	r2, r3
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	00db      	lsls	r3, r3, #3
 8001f58:	4413      	add	r3, r2
 8001f5a:	3302      	adds	r3, #2
 8001f5c:	005b      	lsls	r3, r3, #1
 8001f5e:	68fa      	ldr	r2, [r7, #12]
 8001f60:	6812      	ldr	r2, [r2, #0]
 8001f62:	4413      	add	r3, r2
 8001f64:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f68:	881b      	ldrh	r3, [r3, #0]
 8001f6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f6e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	699a      	ldr	r2, [r3, #24]
 8001f74:	8b7b      	ldrh	r3, [r7, #26]
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d306      	bcc.n	8001f88 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	699a      	ldr	r2, [r3, #24]
 8001f7e:	8b7b      	ldrh	r3, [r7, #26]
 8001f80:	1ad2      	subs	r2, r2, r3
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	619a      	str	r2, [r3, #24]
 8001f86:	e002      	b.n	8001f8e <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	699b      	ldr	r3, [r3, #24]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d123      	bne.n	8001fde <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	4413      	add	r3, r2
 8001fa4:	881b      	ldrh	r3, [r3, #0]
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001fac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fb0:	833b      	strh	r3, [r7, #24]
 8001fb2:	8b3b      	ldrh	r3, [r7, #24]
 8001fb4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001fb8:	833b      	strh	r3, [r7, #24]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	441a      	add	r2, r3
 8001fc8:	8b3b      	ldrh	r3, [r7, #24]
 8001fca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001fce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001fd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001fde:	88fb      	ldrh	r3, [r7, #6]
 8001fe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d01f      	beq.n	8002028 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	461a      	mov	r2, r3
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	4413      	add	r3, r2
 8001ff6:	881b      	ldrh	r3, [r3, #0]
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001ffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002002:	82fb      	strh	r3, [r7, #22]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	461a      	mov	r2, r3
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	441a      	add	r2, r3
 8002012:	8afb      	ldrh	r3, [r7, #22]
 8002014:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002018:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800201c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002020:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002024:	b29b      	uxth	r3, r3
 8002026:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002028:	8b7b      	ldrh	r3, [r7, #26]
 800202a:	2b00      	cmp	r3, #0
 800202c:	f000 8087 	beq.w	800213e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	6818      	ldr	r0, [r3, #0]
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	6959      	ldr	r1, [r3, #20]
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	891a      	ldrh	r2, [r3, #8]
 800203c:	8b7b      	ldrh	r3, [r7, #26]
 800203e:	f004 fa27 	bl	8006490 <USB_ReadPMA>
 8002042:	e07c      	b.n	800213e <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800204c:	b29b      	uxth	r3, r3
 800204e:	461a      	mov	r2, r3
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	00db      	lsls	r3, r3, #3
 8002056:	4413      	add	r3, r2
 8002058:	3306      	adds	r3, #6
 800205a:	005b      	lsls	r3, r3, #1
 800205c:	68fa      	ldr	r2, [r7, #12]
 800205e:	6812      	ldr	r2, [r2, #0]
 8002060:	4413      	add	r3, r2
 8002062:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002066:	881b      	ldrh	r3, [r3, #0]
 8002068:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800206c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	699a      	ldr	r2, [r3, #24]
 8002072:	8b7b      	ldrh	r3, [r7, #26]
 8002074:	429a      	cmp	r2, r3
 8002076:	d306      	bcc.n	8002086 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	699a      	ldr	r2, [r3, #24]
 800207c:	8b7b      	ldrh	r3, [r7, #26]
 800207e:	1ad2      	subs	r2, r2, r3
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	619a      	str	r2, [r3, #24]
 8002084:	e002      	b.n	800208c <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	2200      	movs	r2, #0
 800208a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	699b      	ldr	r3, [r3, #24]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d123      	bne.n	80020dc <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	461a      	mov	r2, r3
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	4413      	add	r3, r2
 80020a2:	881b      	ldrh	r3, [r3, #0]
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80020aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020ae:	83fb      	strh	r3, [r7, #30]
 80020b0:	8bfb      	ldrh	r3, [r7, #30]
 80020b2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80020b6:	83fb      	strh	r3, [r7, #30]
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	461a      	mov	r2, r3
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	441a      	add	r2, r3
 80020c6:	8bfb      	ldrh	r3, [r7, #30]
 80020c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80020cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80020d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020d8:	b29b      	uxth	r3, r3
 80020da:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80020dc:	88fb      	ldrh	r3, [r7, #6]
 80020de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d11f      	bne.n	8002126 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	461a      	mov	r2, r3
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	4413      	add	r3, r2
 80020f4:	881b      	ldrh	r3, [r3, #0]
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002100:	83bb      	strh	r3, [r7, #28]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	461a      	mov	r2, r3
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	441a      	add	r2, r3
 8002110:	8bbb      	ldrh	r3, [r7, #28]
 8002112:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002116:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800211a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800211e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002122:	b29b      	uxth	r3, r3
 8002124:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002126:	8b7b      	ldrh	r3, [r7, #26]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d008      	beq.n	800213e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	6818      	ldr	r0, [r3, #0]
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	6959      	ldr	r1, [r3, #20]
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	895a      	ldrh	r2, [r3, #10]
 8002138:	8b7b      	ldrh	r3, [r7, #26]
 800213a:	f004 f9a9 	bl	8006490 <USB_ReadPMA>
    }
  }

  return count;
 800213e:	8b7b      	ldrh	r3, [r7, #26]
}
 8002140:	4618      	mov	r0, r3
 8002142:	3720      	adds	r7, #32
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}

08002148 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b0a4      	sub	sp, #144	; 0x90
 800214c:	af00      	add	r7, sp, #0
 800214e:	60f8      	str	r0, [r7, #12]
 8002150:	60b9      	str	r1, [r7, #8]
 8002152:	4613      	mov	r3, r2
 8002154:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002156:	88fb      	ldrh	r3, [r7, #6]
 8002158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800215c:	2b00      	cmp	r3, #0
 800215e:	f000 81dd 	beq.w	800251c <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800216a:	b29b      	uxth	r3, r3
 800216c:	461a      	mov	r2, r3
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	00db      	lsls	r3, r3, #3
 8002174:	4413      	add	r3, r2
 8002176:	3302      	adds	r3, #2
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	68fa      	ldr	r2, [r7, #12]
 800217c:	6812      	ldr	r2, [r2, #0]
 800217e:	4413      	add	r3, r2
 8002180:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002184:	881b      	ldrh	r3, [r3, #0]
 8002186:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800218a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	699a      	ldr	r2, [r3, #24]
 8002192:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002196:	429a      	cmp	r2, r3
 8002198:	d907      	bls.n	80021aa <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	699a      	ldr	r2, [r3, #24]
 800219e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80021a2:	1ad2      	subs	r2, r2, r3
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	619a      	str	r2, [r3, #24]
 80021a8:	e002      	b.n	80021b0 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	2200      	movs	r2, #0
 80021ae:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	699b      	ldr	r3, [r3, #24]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	f040 80b9 	bne.w	800232c <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	785b      	ldrb	r3, [r3, #1]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d126      	bne.n	8002210 <HAL_PCD_EP_DB_Transmit+0xc8>
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	461a      	mov	r2, r3
 80021d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021d6:	4413      	add	r3, r2
 80021d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	011a      	lsls	r2, r3, #4
 80021e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021e2:	4413      	add	r3, r2
 80021e4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80021e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80021ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ec:	881b      	ldrh	r3, [r3, #0]
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021f4:	b29a      	uxth	r2, r3
 80021f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021f8:	801a      	strh	r2, [r3, #0]
 80021fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021fc:	881b      	ldrh	r3, [r3, #0]
 80021fe:	b29b      	uxth	r3, r3
 8002200:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002204:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002208:	b29a      	uxth	r2, r3
 800220a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800220c:	801a      	strh	r2, [r3, #0]
 800220e:	e01a      	b.n	8002246 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	785b      	ldrb	r3, [r3, #1]
 8002214:	2b01      	cmp	r3, #1
 8002216:	d116      	bne.n	8002246 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	637b      	str	r3, [r7, #52]	; 0x34
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002226:	b29b      	uxth	r3, r3
 8002228:	461a      	mov	r2, r3
 800222a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800222c:	4413      	add	r3, r2
 800222e:	637b      	str	r3, [r7, #52]	; 0x34
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	011a      	lsls	r2, r3, #4
 8002236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002238:	4413      	add	r3, r2
 800223a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800223e:	633b      	str	r3, [r7, #48]	; 0x30
 8002240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002242:	2200      	movs	r2, #0
 8002244:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	627b      	str	r3, [r7, #36]	; 0x24
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	785b      	ldrb	r3, [r3, #1]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d126      	bne.n	80022a2 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	61fb      	str	r3, [r7, #28]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002262:	b29b      	uxth	r3, r3
 8002264:	461a      	mov	r2, r3
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	4413      	add	r3, r2
 800226a:	61fb      	str	r3, [r7, #28]
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	011a      	lsls	r2, r3, #4
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	4413      	add	r3, r2
 8002276:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800227a:	61bb      	str	r3, [r7, #24]
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	881b      	ldrh	r3, [r3, #0]
 8002280:	b29b      	uxth	r3, r3
 8002282:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002286:	b29a      	uxth	r2, r3
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	801a      	strh	r2, [r3, #0]
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	881b      	ldrh	r3, [r3, #0]
 8002290:	b29b      	uxth	r3, r3
 8002292:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002296:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800229a:	b29a      	uxth	r2, r3
 800229c:	69bb      	ldr	r3, [r7, #24]
 800229e:	801a      	strh	r2, [r3, #0]
 80022a0:	e017      	b.n	80022d2 <HAL_PCD_EP_DB_Transmit+0x18a>
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	785b      	ldrb	r3, [r3, #1]
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d113      	bne.n	80022d2 <HAL_PCD_EP_DB_Transmit+0x18a>
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	461a      	mov	r2, r3
 80022b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b8:	4413      	add	r3, r2
 80022ba:	627b      	str	r3, [r7, #36]	; 0x24
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	011a      	lsls	r2, r3, #4
 80022c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c4:	4413      	add	r3, r2
 80022c6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80022ca:	623b      	str	r3, [r7, #32]
 80022cc:	6a3b      	ldr	r3, [r7, #32]
 80022ce:	2200      	movs	r2, #0
 80022d0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	4619      	mov	r1, r3
 80022d8:	68f8      	ldr	r0, [r7, #12]
 80022da:	f005 fede 	bl	800809a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80022de:	88fb      	ldrh	r3, [r7, #6]
 80022e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	f000 82fc 	beq.w	80028e2 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	461a      	mov	r2, r3
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	4413      	add	r3, r2
 80022f8:	881b      	ldrh	r3, [r3, #0]
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002300:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002304:	82fb      	strh	r3, [r7, #22]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	461a      	mov	r2, r3
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	441a      	add	r2, r3
 8002314:	8afb      	ldrh	r3, [r7, #22]
 8002316:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800231a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800231e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002322:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002326:	b29b      	uxth	r3, r3
 8002328:	8013      	strh	r3, [r2, #0]
 800232a:	e2da      	b.n	80028e2 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800232c:	88fb      	ldrh	r3, [r7, #6]
 800232e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d021      	beq.n	800237a <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	461a      	mov	r2, r3
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	4413      	add	r3, r2
 8002344:	881b      	ldrh	r3, [r3, #0]
 8002346:	b29b      	uxth	r3, r3
 8002348:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800234c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002350:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	461a      	mov	r2, r3
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	441a      	add	r2, r3
 8002362:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8002366:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800236a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800236e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002372:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002376:	b29b      	uxth	r3, r3
 8002378:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002380:	2b01      	cmp	r3, #1
 8002382:	f040 82ae 	bne.w	80028e2 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	695a      	ldr	r2, [r3, #20]
 800238a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800238e:	441a      	add	r2, r3
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	69da      	ldr	r2, [r3, #28]
 8002398:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800239c:	441a      	add	r2, r3
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	6a1a      	ldr	r2, [r3, #32]
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d30b      	bcc.n	80023c6 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	691b      	ldr	r3, [r3, #16]
 80023b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	6a1a      	ldr	r2, [r3, #32]
 80023ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023be:	1ad2      	subs	r2, r2, r3
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	621a      	str	r2, [r3, #32]
 80023c4:	e017      	b.n	80023f6 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	6a1b      	ldr	r3, [r3, #32]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d108      	bne.n	80023e0 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80023ce:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80023d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	2200      	movs	r2, #0
 80023da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80023de:	e00a      	b.n	80023f6 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	2200      	movs	r2, #0
 80023e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	6a1b      	ldr	r3, [r3, #32]
 80023ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	2200      	movs	r2, #0
 80023f4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	785b      	ldrb	r3, [r3, #1]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d165      	bne.n	80024ca <HAL_PCD_EP_DB_Transmit+0x382>
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800240c:	b29b      	uxth	r3, r3
 800240e:	461a      	mov	r2, r3
 8002410:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002412:	4413      	add	r3, r2
 8002414:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	011a      	lsls	r2, r3, #4
 800241c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800241e:	4413      	add	r3, r2
 8002420:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002424:	63bb      	str	r3, [r7, #56]	; 0x38
 8002426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002428:	881b      	ldrh	r3, [r3, #0]
 800242a:	b29b      	uxth	r3, r3
 800242c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002430:	b29a      	uxth	r2, r3
 8002432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002434:	801a      	strh	r2, [r3, #0]
 8002436:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800243a:	2b3e      	cmp	r3, #62	; 0x3e
 800243c:	d91d      	bls.n	800247a <HAL_PCD_EP_DB_Transmit+0x332>
 800243e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002442:	095b      	lsrs	r3, r3, #5
 8002444:	64bb      	str	r3, [r7, #72]	; 0x48
 8002446:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800244a:	f003 031f 	and.w	r3, r3, #31
 800244e:	2b00      	cmp	r3, #0
 8002450:	d102      	bne.n	8002458 <HAL_PCD_EP_DB_Transmit+0x310>
 8002452:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002454:	3b01      	subs	r3, #1
 8002456:	64bb      	str	r3, [r7, #72]	; 0x48
 8002458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800245a:	881b      	ldrh	r3, [r3, #0]
 800245c:	b29a      	uxth	r2, r3
 800245e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002460:	b29b      	uxth	r3, r3
 8002462:	029b      	lsls	r3, r3, #10
 8002464:	b29b      	uxth	r3, r3
 8002466:	4313      	orrs	r3, r2
 8002468:	b29b      	uxth	r3, r3
 800246a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800246e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002472:	b29a      	uxth	r2, r3
 8002474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002476:	801a      	strh	r2, [r3, #0]
 8002478:	e044      	b.n	8002504 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800247a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800247e:	2b00      	cmp	r3, #0
 8002480:	d10a      	bne.n	8002498 <HAL_PCD_EP_DB_Transmit+0x350>
 8002482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002484:	881b      	ldrh	r3, [r3, #0]
 8002486:	b29b      	uxth	r3, r3
 8002488:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800248c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002490:	b29a      	uxth	r2, r3
 8002492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002494:	801a      	strh	r2, [r3, #0]
 8002496:	e035      	b.n	8002504 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002498:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800249c:	085b      	lsrs	r3, r3, #1
 800249e:	64bb      	str	r3, [r7, #72]	; 0x48
 80024a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024a4:	f003 0301 	and.w	r3, r3, #1
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d002      	beq.n	80024b2 <HAL_PCD_EP_DB_Transmit+0x36a>
 80024ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024ae:	3301      	adds	r3, #1
 80024b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80024b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024b4:	881b      	ldrh	r3, [r3, #0]
 80024b6:	b29a      	uxth	r2, r3
 80024b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	029b      	lsls	r3, r3, #10
 80024be:	b29b      	uxth	r3, r3
 80024c0:	4313      	orrs	r3, r2
 80024c2:	b29a      	uxth	r2, r3
 80024c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024c6:	801a      	strh	r2, [r3, #0]
 80024c8:	e01c      	b.n	8002504 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	785b      	ldrb	r3, [r3, #1]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d118      	bne.n	8002504 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	647b      	str	r3, [r7, #68]	; 0x44
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	461a      	mov	r2, r3
 80024e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024e6:	4413      	add	r3, r2
 80024e8:	647b      	str	r3, [r7, #68]	; 0x44
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	011a      	lsls	r2, r3, #4
 80024f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024f2:	4413      	add	r3, r2
 80024f4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80024f8:	643b      	str	r3, [r7, #64]	; 0x40
 80024fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024fe:	b29a      	uxth	r2, r3
 8002500:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002502:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6818      	ldr	r0, [r3, #0]
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	6959      	ldr	r1, [r3, #20]
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	891a      	ldrh	r2, [r3, #8]
 8002510:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002514:	b29b      	uxth	r3, r3
 8002516:	f003 ff76 	bl	8006406 <USB_WritePMA>
 800251a:	e1e2      	b.n	80028e2 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002524:	b29b      	uxth	r3, r3
 8002526:	461a      	mov	r2, r3
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	00db      	lsls	r3, r3, #3
 800252e:	4413      	add	r3, r2
 8002530:	3306      	adds	r3, #6
 8002532:	005b      	lsls	r3, r3, #1
 8002534:	68fa      	ldr	r2, [r7, #12]
 8002536:	6812      	ldr	r2, [r2, #0]
 8002538:	4413      	add	r3, r2
 800253a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800253e:	881b      	ldrh	r3, [r3, #0]
 8002540:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002544:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	699a      	ldr	r2, [r3, #24]
 800254c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002550:	429a      	cmp	r2, r3
 8002552:	d307      	bcc.n	8002564 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	699a      	ldr	r2, [r3, #24]
 8002558:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800255c:	1ad2      	subs	r2, r2, r3
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	619a      	str	r2, [r3, #24]
 8002562:	e002      	b.n	800256a <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	2200      	movs	r2, #0
 8002568:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	699b      	ldr	r3, [r3, #24]
 800256e:	2b00      	cmp	r3, #0
 8002570:	f040 80c0 	bne.w	80026f4 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	785b      	ldrb	r3, [r3, #1]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d126      	bne.n	80025ca <HAL_PCD_EP_DB_Transmit+0x482>
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800258a:	b29b      	uxth	r3, r3
 800258c:	461a      	mov	r2, r3
 800258e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002590:	4413      	add	r3, r2
 8002592:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	011a      	lsls	r2, r3, #4
 800259a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800259c:	4413      	add	r3, r2
 800259e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80025a2:	67bb      	str	r3, [r7, #120]	; 0x78
 80025a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025a6:	881b      	ldrh	r3, [r3, #0]
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025ae:	b29a      	uxth	r2, r3
 80025b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025b2:	801a      	strh	r2, [r3, #0]
 80025b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025b6:	881b      	ldrh	r3, [r3, #0]
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025c2:	b29a      	uxth	r2, r3
 80025c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025c6:	801a      	strh	r2, [r3, #0]
 80025c8:	e01a      	b.n	8002600 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	785b      	ldrb	r3, [r3, #1]
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d116      	bne.n	8002600 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	667b      	str	r3, [r7, #100]	; 0x64
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	461a      	mov	r2, r3
 80025e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80025e6:	4413      	add	r3, r2
 80025e8:	667b      	str	r3, [r7, #100]	; 0x64
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	011a      	lsls	r2, r3, #4
 80025f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80025f2:	4413      	add	r3, r2
 80025f4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80025f8:	663b      	str	r3, [r7, #96]	; 0x60
 80025fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025fc:	2200      	movs	r2, #0
 80025fe:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	677b      	str	r3, [r7, #116]	; 0x74
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	785b      	ldrb	r3, [r3, #1]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d12b      	bne.n	8002666 <HAL_PCD_EP_DB_Transmit+0x51e>
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800261c:	b29b      	uxth	r3, r3
 800261e:	461a      	mov	r2, r3
 8002620:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002622:	4413      	add	r3, r2
 8002624:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	011a      	lsls	r2, r3, #4
 800262c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800262e:	4413      	add	r3, r2
 8002630:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002634:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002638:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800263c:	881b      	ldrh	r3, [r3, #0]
 800263e:	b29b      	uxth	r3, r3
 8002640:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002644:	b29a      	uxth	r2, r3
 8002646:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800264a:	801a      	strh	r2, [r3, #0]
 800264c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002650:	881b      	ldrh	r3, [r3, #0]
 8002652:	b29b      	uxth	r3, r3
 8002654:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002658:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800265c:	b29a      	uxth	r2, r3
 800265e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002662:	801a      	strh	r2, [r3, #0]
 8002664:	e017      	b.n	8002696 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	785b      	ldrb	r3, [r3, #1]
 800266a:	2b01      	cmp	r3, #1
 800266c:	d113      	bne.n	8002696 <HAL_PCD_EP_DB_Transmit+0x54e>
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002676:	b29b      	uxth	r3, r3
 8002678:	461a      	mov	r2, r3
 800267a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800267c:	4413      	add	r3, r2
 800267e:	677b      	str	r3, [r7, #116]	; 0x74
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	011a      	lsls	r2, r3, #4
 8002686:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002688:	4413      	add	r3, r2
 800268a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800268e:	673b      	str	r3, [r7, #112]	; 0x70
 8002690:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002692:	2200      	movs	r2, #0
 8002694:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	4619      	mov	r1, r3
 800269c:	68f8      	ldr	r0, [r7, #12]
 800269e:	f005 fcfc 	bl	800809a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80026a2:	88fb      	ldrh	r3, [r7, #6]
 80026a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	f040 811a 	bne.w	80028e2 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	461a      	mov	r2, r3
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	4413      	add	r3, r2
 80026bc:	881b      	ldrh	r3, [r3, #0]
 80026be:	b29b      	uxth	r3, r3
 80026c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026c8:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	461a      	mov	r2, r3
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	441a      	add	r2, r3
 80026da:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80026de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	8013      	strh	r3, [r2, #0]
 80026f2:	e0f6      	b.n	80028e2 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80026f4:	88fb      	ldrh	r3, [r7, #6]
 80026f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d121      	bne.n	8002742 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	461a      	mov	r2, r3
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	4413      	add	r3, r2
 800270c:	881b      	ldrh	r3, [r3, #0]
 800270e:	b29b      	uxth	r3, r3
 8002710:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002714:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002718:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	461a      	mov	r2, r3
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	441a      	add	r2, r3
 800272a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800272e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002732:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002736:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800273a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800273e:	b29b      	uxth	r3, r3
 8002740:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002748:	2b01      	cmp	r3, #1
 800274a:	f040 80ca 	bne.w	80028e2 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	695a      	ldr	r2, [r3, #20]
 8002752:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002756:	441a      	add	r2, r3
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	69da      	ldr	r2, [r3, #28]
 8002760:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002764:	441a      	add	r2, r3
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	6a1a      	ldr	r2, [r3, #32]
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	429a      	cmp	r2, r3
 8002774:	d30b      	bcc.n	800278e <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	6a1a      	ldr	r2, [r3, #32]
 8002782:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002786:	1ad2      	subs	r2, r2, r3
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	621a      	str	r2, [r3, #32]
 800278c:	e017      	b.n	80027be <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	6a1b      	ldr	r3, [r3, #32]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d108      	bne.n	80027a8 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8002796:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800279a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80027a6:	e00a      	b.n	80027be <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	6a1b      	ldr	r3, [r3, #32]
 80027ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	2200      	movs	r2, #0
 80027b4:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	2200      	movs	r2, #0
 80027ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	657b      	str	r3, [r7, #84]	; 0x54
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	785b      	ldrb	r3, [r3, #1]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d165      	bne.n	8002898 <HAL_PCD_EP_DB_Transmit+0x750>
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027da:	b29b      	uxth	r3, r3
 80027dc:	461a      	mov	r2, r3
 80027de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027e0:	4413      	add	r3, r2
 80027e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	011a      	lsls	r2, r3, #4
 80027ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027ec:	4413      	add	r3, r2
 80027ee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80027f2:	65bb      	str	r3, [r7, #88]	; 0x58
 80027f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027f6:	881b      	ldrh	r3, [r3, #0]
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027fe:	b29a      	uxth	r2, r3
 8002800:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002802:	801a      	strh	r2, [r3, #0]
 8002804:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002808:	2b3e      	cmp	r3, #62	; 0x3e
 800280a:	d91d      	bls.n	8002848 <HAL_PCD_EP_DB_Transmit+0x700>
 800280c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002810:	095b      	lsrs	r3, r3, #5
 8002812:	66bb      	str	r3, [r7, #104]	; 0x68
 8002814:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002818:	f003 031f 	and.w	r3, r3, #31
 800281c:	2b00      	cmp	r3, #0
 800281e:	d102      	bne.n	8002826 <HAL_PCD_EP_DB_Transmit+0x6de>
 8002820:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002822:	3b01      	subs	r3, #1
 8002824:	66bb      	str	r3, [r7, #104]	; 0x68
 8002826:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002828:	881b      	ldrh	r3, [r3, #0]
 800282a:	b29a      	uxth	r2, r3
 800282c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800282e:	b29b      	uxth	r3, r3
 8002830:	029b      	lsls	r3, r3, #10
 8002832:	b29b      	uxth	r3, r3
 8002834:	4313      	orrs	r3, r2
 8002836:	b29b      	uxth	r3, r3
 8002838:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800283c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002840:	b29a      	uxth	r2, r3
 8002842:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002844:	801a      	strh	r2, [r3, #0]
 8002846:	e041      	b.n	80028cc <HAL_PCD_EP_DB_Transmit+0x784>
 8002848:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800284c:	2b00      	cmp	r3, #0
 800284e:	d10a      	bne.n	8002866 <HAL_PCD_EP_DB_Transmit+0x71e>
 8002850:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002852:	881b      	ldrh	r3, [r3, #0]
 8002854:	b29b      	uxth	r3, r3
 8002856:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800285a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800285e:	b29a      	uxth	r2, r3
 8002860:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002862:	801a      	strh	r2, [r3, #0]
 8002864:	e032      	b.n	80028cc <HAL_PCD_EP_DB_Transmit+0x784>
 8002866:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800286a:	085b      	lsrs	r3, r3, #1
 800286c:	66bb      	str	r3, [r7, #104]	; 0x68
 800286e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002872:	f003 0301 	and.w	r3, r3, #1
 8002876:	2b00      	cmp	r3, #0
 8002878:	d002      	beq.n	8002880 <HAL_PCD_EP_DB_Transmit+0x738>
 800287a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800287c:	3301      	adds	r3, #1
 800287e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002880:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002882:	881b      	ldrh	r3, [r3, #0]
 8002884:	b29a      	uxth	r2, r3
 8002886:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002888:	b29b      	uxth	r3, r3
 800288a:	029b      	lsls	r3, r3, #10
 800288c:	b29b      	uxth	r3, r3
 800288e:	4313      	orrs	r3, r2
 8002890:	b29a      	uxth	r2, r3
 8002892:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002894:	801a      	strh	r2, [r3, #0]
 8002896:	e019      	b.n	80028cc <HAL_PCD_EP_DB_Transmit+0x784>
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	785b      	ldrb	r3, [r3, #1]
 800289c:	2b01      	cmp	r3, #1
 800289e:	d115      	bne.n	80028cc <HAL_PCD_EP_DB_Transmit+0x784>
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	461a      	mov	r2, r3
 80028ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028ae:	4413      	add	r3, r2
 80028b0:	657b      	str	r3, [r7, #84]	; 0x54
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	011a      	lsls	r2, r3, #4
 80028b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028ba:	4413      	add	r3, r2
 80028bc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80028c0:	653b      	str	r3, [r7, #80]	; 0x50
 80028c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028c6:	b29a      	uxth	r2, r3
 80028c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028ca:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6818      	ldr	r0, [r3, #0]
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	6959      	ldr	r1, [r3, #20]
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	895a      	ldrh	r2, [r3, #10]
 80028d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028dc:	b29b      	uxth	r3, r3
 80028de:	f003 fd92 	bl	8006406 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	461a      	mov	r2, r3
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	4413      	add	r3, r2
 80028f0:	881b      	ldrh	r3, [r3, #0]
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028fc:	82bb      	strh	r3, [r7, #20]
 80028fe:	8abb      	ldrh	r3, [r7, #20]
 8002900:	f083 0310 	eor.w	r3, r3, #16
 8002904:	82bb      	strh	r3, [r7, #20]
 8002906:	8abb      	ldrh	r3, [r7, #20]
 8002908:	f083 0320 	eor.w	r3, r3, #32
 800290c:	82bb      	strh	r3, [r7, #20]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	461a      	mov	r2, r3
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	441a      	add	r2, r3
 800291c:	8abb      	ldrh	r3, [r7, #20]
 800291e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002922:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002926:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800292a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800292e:	b29b      	uxth	r3, r3
 8002930:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002932:	2300      	movs	r3, #0
}
 8002934:	4618      	mov	r0, r3
 8002936:	3790      	adds	r7, #144	; 0x90
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}

0800293c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800293c:	b480      	push	{r7}
 800293e:	b087      	sub	sp, #28
 8002940:	af00      	add	r7, sp, #0
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	607b      	str	r3, [r7, #4]
 8002946:	460b      	mov	r3, r1
 8002948:	817b      	strh	r3, [r7, #10]
 800294a:	4613      	mov	r3, r2
 800294c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800294e:	897b      	ldrh	r3, [r7, #10]
 8002950:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002954:	b29b      	uxth	r3, r3
 8002956:	2b00      	cmp	r3, #0
 8002958:	d00b      	beq.n	8002972 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800295a:	897b      	ldrh	r3, [r7, #10]
 800295c:	f003 0307 	and.w	r3, r3, #7
 8002960:	1c5a      	adds	r2, r3, #1
 8002962:	4613      	mov	r3, r2
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	4413      	add	r3, r2
 8002968:	00db      	lsls	r3, r3, #3
 800296a:	68fa      	ldr	r2, [r7, #12]
 800296c:	4413      	add	r3, r2
 800296e:	617b      	str	r3, [r7, #20]
 8002970:	e009      	b.n	8002986 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002972:	897a      	ldrh	r2, [r7, #10]
 8002974:	4613      	mov	r3, r2
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	4413      	add	r3, r2
 800297a:	00db      	lsls	r3, r3, #3
 800297c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002980:	68fa      	ldr	r2, [r7, #12]
 8002982:	4413      	add	r3, r2
 8002984:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002986:	893b      	ldrh	r3, [r7, #8]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d107      	bne.n	800299c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	2200      	movs	r2, #0
 8002990:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	b29a      	uxth	r2, r3
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	80da      	strh	r2, [r3, #6]
 800299a:	e00b      	b.n	80029b4 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	2201      	movs	r2, #1
 80029a0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	b29a      	uxth	r2, r3
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	0c1b      	lsrs	r3, r3, #16
 80029ae:	b29a      	uxth	r2, r3
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	371c      	adds	r7, #28
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bc80      	pop	{r7}
 80029be:	4770      	bx	lr

080029c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b086      	sub	sp, #24
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d101      	bne.n	80029d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e272      	b.n	8002eb8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0301 	and.w	r3, r3, #1
 80029da:	2b00      	cmp	r3, #0
 80029dc:	f000 8087 	beq.w	8002aee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029e0:	4b92      	ldr	r3, [pc, #584]	; (8002c2c <HAL_RCC_OscConfig+0x26c>)
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f003 030c 	and.w	r3, r3, #12
 80029e8:	2b04      	cmp	r3, #4
 80029ea:	d00c      	beq.n	8002a06 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80029ec:	4b8f      	ldr	r3, [pc, #572]	; (8002c2c <HAL_RCC_OscConfig+0x26c>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f003 030c 	and.w	r3, r3, #12
 80029f4:	2b08      	cmp	r3, #8
 80029f6:	d112      	bne.n	8002a1e <HAL_RCC_OscConfig+0x5e>
 80029f8:	4b8c      	ldr	r3, [pc, #560]	; (8002c2c <HAL_RCC_OscConfig+0x26c>)
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a04:	d10b      	bne.n	8002a1e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a06:	4b89      	ldr	r3, [pc, #548]	; (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d06c      	beq.n	8002aec <HAL_RCC_OscConfig+0x12c>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d168      	bne.n	8002aec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e24c      	b.n	8002eb8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a26:	d106      	bne.n	8002a36 <HAL_RCC_OscConfig+0x76>
 8002a28:	4b80      	ldr	r3, [pc, #512]	; (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a7f      	ldr	r2, [pc, #508]	; (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002a2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a32:	6013      	str	r3, [r2, #0]
 8002a34:	e02e      	b.n	8002a94 <HAL_RCC_OscConfig+0xd4>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d10c      	bne.n	8002a58 <HAL_RCC_OscConfig+0x98>
 8002a3e:	4b7b      	ldr	r3, [pc, #492]	; (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a7a      	ldr	r2, [pc, #488]	; (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002a44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a48:	6013      	str	r3, [r2, #0]
 8002a4a:	4b78      	ldr	r3, [pc, #480]	; (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a77      	ldr	r2, [pc, #476]	; (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002a50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a54:	6013      	str	r3, [r2, #0]
 8002a56:	e01d      	b.n	8002a94 <HAL_RCC_OscConfig+0xd4>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a60:	d10c      	bne.n	8002a7c <HAL_RCC_OscConfig+0xbc>
 8002a62:	4b72      	ldr	r3, [pc, #456]	; (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a71      	ldr	r2, [pc, #452]	; (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002a68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a6c:	6013      	str	r3, [r2, #0]
 8002a6e:	4b6f      	ldr	r3, [pc, #444]	; (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a6e      	ldr	r2, [pc, #440]	; (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002a74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a78:	6013      	str	r3, [r2, #0]
 8002a7a:	e00b      	b.n	8002a94 <HAL_RCC_OscConfig+0xd4>
 8002a7c:	4b6b      	ldr	r3, [pc, #428]	; (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a6a      	ldr	r2, [pc, #424]	; (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002a82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a86:	6013      	str	r3, [r2, #0]
 8002a88:	4b68      	ldr	r3, [pc, #416]	; (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a67      	ldr	r2, [pc, #412]	; (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002a8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a92:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d013      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a9c:	f7fd ff6e 	bl	800097c <HAL_GetTick>
 8002aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aa2:	e008      	b.n	8002ab6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002aa4:	f7fd ff6a 	bl	800097c <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b64      	cmp	r3, #100	; 0x64
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e200      	b.n	8002eb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ab6:	4b5d      	ldr	r3, [pc, #372]	; (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d0f0      	beq.n	8002aa4 <HAL_RCC_OscConfig+0xe4>
 8002ac2:	e014      	b.n	8002aee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac4:	f7fd ff5a 	bl	800097c <HAL_GetTick>
 8002ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aca:	e008      	b.n	8002ade <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002acc:	f7fd ff56 	bl	800097c <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	2b64      	cmp	r3, #100	; 0x64
 8002ad8:	d901      	bls.n	8002ade <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e1ec      	b.n	8002eb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ade:	4b53      	ldr	r3, [pc, #332]	; (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d1f0      	bne.n	8002acc <HAL_RCC_OscConfig+0x10c>
 8002aea:	e000      	b.n	8002aee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d063      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002afa:	4b4c      	ldr	r3, [pc, #304]	; (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f003 030c 	and.w	r3, r3, #12
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d00b      	beq.n	8002b1e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002b06:	4b49      	ldr	r3, [pc, #292]	; (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	f003 030c 	and.w	r3, r3, #12
 8002b0e:	2b08      	cmp	r3, #8
 8002b10:	d11c      	bne.n	8002b4c <HAL_RCC_OscConfig+0x18c>
 8002b12:	4b46      	ldr	r3, [pc, #280]	; (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d116      	bne.n	8002b4c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b1e:	4b43      	ldr	r3, [pc, #268]	; (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0302 	and.w	r3, r3, #2
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d005      	beq.n	8002b36 <HAL_RCC_OscConfig+0x176>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	691b      	ldr	r3, [r3, #16]
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d001      	beq.n	8002b36 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e1c0      	b.n	8002eb8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b36:	4b3d      	ldr	r3, [pc, #244]	; (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	695b      	ldr	r3, [r3, #20]
 8002b42:	00db      	lsls	r3, r3, #3
 8002b44:	4939      	ldr	r1, [pc, #228]	; (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b4a:	e03a      	b.n	8002bc2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	691b      	ldr	r3, [r3, #16]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d020      	beq.n	8002b96 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b54:	4b36      	ldr	r3, [pc, #216]	; (8002c30 <HAL_RCC_OscConfig+0x270>)
 8002b56:	2201      	movs	r2, #1
 8002b58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b5a:	f7fd ff0f 	bl	800097c <HAL_GetTick>
 8002b5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b60:	e008      	b.n	8002b74 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b62:	f7fd ff0b 	bl	800097c <HAL_GetTick>
 8002b66:	4602      	mov	r2, r0
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d901      	bls.n	8002b74 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	e1a1      	b.n	8002eb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b74:	4b2d      	ldr	r3, [pc, #180]	; (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0302 	and.w	r3, r3, #2
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d0f0      	beq.n	8002b62 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b80:	4b2a      	ldr	r3, [pc, #168]	; (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	695b      	ldr	r3, [r3, #20]
 8002b8c:	00db      	lsls	r3, r3, #3
 8002b8e:	4927      	ldr	r1, [pc, #156]	; (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002b90:	4313      	orrs	r3, r2
 8002b92:	600b      	str	r3, [r1, #0]
 8002b94:	e015      	b.n	8002bc2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b96:	4b26      	ldr	r3, [pc, #152]	; (8002c30 <HAL_RCC_OscConfig+0x270>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b9c:	f7fd feee 	bl	800097c <HAL_GetTick>
 8002ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ba2:	e008      	b.n	8002bb6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ba4:	f7fd feea 	bl	800097c <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d901      	bls.n	8002bb6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e180      	b.n	8002eb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bb6:	4b1d      	ldr	r3, [pc, #116]	; (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d1f0      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0308 	and.w	r3, r3, #8
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d03a      	beq.n	8002c44 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	699b      	ldr	r3, [r3, #24]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d019      	beq.n	8002c0a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bd6:	4b17      	ldr	r3, [pc, #92]	; (8002c34 <HAL_RCC_OscConfig+0x274>)
 8002bd8:	2201      	movs	r2, #1
 8002bda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bdc:	f7fd fece 	bl	800097c <HAL_GetTick>
 8002be0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002be2:	e008      	b.n	8002bf6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002be4:	f7fd feca 	bl	800097c <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d901      	bls.n	8002bf6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e160      	b.n	8002eb8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bf6:	4b0d      	ldr	r3, [pc, #52]	; (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfa:	f003 0302 	and.w	r3, r3, #2
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d0f0      	beq.n	8002be4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002c02:	2001      	movs	r0, #1
 8002c04:	f000 fa9c 	bl	8003140 <RCC_Delay>
 8002c08:	e01c      	b.n	8002c44 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c0a:	4b0a      	ldr	r3, [pc, #40]	; (8002c34 <HAL_RCC_OscConfig+0x274>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c10:	f7fd feb4 	bl	800097c <HAL_GetTick>
 8002c14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c16:	e00f      	b.n	8002c38 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c18:	f7fd feb0 	bl	800097c <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d908      	bls.n	8002c38 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e146      	b.n	8002eb8 <HAL_RCC_OscConfig+0x4f8>
 8002c2a:	bf00      	nop
 8002c2c:	40021000 	.word	0x40021000
 8002c30:	42420000 	.word	0x42420000
 8002c34:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c38:	4b92      	ldr	r3, [pc, #584]	; (8002e84 <HAL_RCC_OscConfig+0x4c4>)
 8002c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3c:	f003 0302 	and.w	r3, r3, #2
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d1e9      	bne.n	8002c18 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0304 	and.w	r3, r3, #4
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	f000 80a6 	beq.w	8002d9e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c52:	2300      	movs	r3, #0
 8002c54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c56:	4b8b      	ldr	r3, [pc, #556]	; (8002e84 <HAL_RCC_OscConfig+0x4c4>)
 8002c58:	69db      	ldr	r3, [r3, #28]
 8002c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d10d      	bne.n	8002c7e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c62:	4b88      	ldr	r3, [pc, #544]	; (8002e84 <HAL_RCC_OscConfig+0x4c4>)
 8002c64:	69db      	ldr	r3, [r3, #28]
 8002c66:	4a87      	ldr	r2, [pc, #540]	; (8002e84 <HAL_RCC_OscConfig+0x4c4>)
 8002c68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c6c:	61d3      	str	r3, [r2, #28]
 8002c6e:	4b85      	ldr	r3, [pc, #532]	; (8002e84 <HAL_RCC_OscConfig+0x4c4>)
 8002c70:	69db      	ldr	r3, [r3, #28]
 8002c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c76:	60bb      	str	r3, [r7, #8]
 8002c78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c7e:	4b82      	ldr	r3, [pc, #520]	; (8002e88 <HAL_RCC_OscConfig+0x4c8>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d118      	bne.n	8002cbc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c8a:	4b7f      	ldr	r3, [pc, #508]	; (8002e88 <HAL_RCC_OscConfig+0x4c8>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a7e      	ldr	r2, [pc, #504]	; (8002e88 <HAL_RCC_OscConfig+0x4c8>)
 8002c90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c96:	f7fd fe71 	bl	800097c <HAL_GetTick>
 8002c9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c9c:	e008      	b.n	8002cb0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c9e:	f7fd fe6d 	bl	800097c <HAL_GetTick>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	2b64      	cmp	r3, #100	; 0x64
 8002caa:	d901      	bls.n	8002cb0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	e103      	b.n	8002eb8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cb0:	4b75      	ldr	r3, [pc, #468]	; (8002e88 <HAL_RCC_OscConfig+0x4c8>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d0f0      	beq.n	8002c9e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d106      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x312>
 8002cc4:	4b6f      	ldr	r3, [pc, #444]	; (8002e84 <HAL_RCC_OscConfig+0x4c4>)
 8002cc6:	6a1b      	ldr	r3, [r3, #32]
 8002cc8:	4a6e      	ldr	r2, [pc, #440]	; (8002e84 <HAL_RCC_OscConfig+0x4c4>)
 8002cca:	f043 0301 	orr.w	r3, r3, #1
 8002cce:	6213      	str	r3, [r2, #32]
 8002cd0:	e02d      	b.n	8002d2e <HAL_RCC_OscConfig+0x36e>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d10c      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x334>
 8002cda:	4b6a      	ldr	r3, [pc, #424]	; (8002e84 <HAL_RCC_OscConfig+0x4c4>)
 8002cdc:	6a1b      	ldr	r3, [r3, #32]
 8002cde:	4a69      	ldr	r2, [pc, #420]	; (8002e84 <HAL_RCC_OscConfig+0x4c4>)
 8002ce0:	f023 0301 	bic.w	r3, r3, #1
 8002ce4:	6213      	str	r3, [r2, #32]
 8002ce6:	4b67      	ldr	r3, [pc, #412]	; (8002e84 <HAL_RCC_OscConfig+0x4c4>)
 8002ce8:	6a1b      	ldr	r3, [r3, #32]
 8002cea:	4a66      	ldr	r2, [pc, #408]	; (8002e84 <HAL_RCC_OscConfig+0x4c4>)
 8002cec:	f023 0304 	bic.w	r3, r3, #4
 8002cf0:	6213      	str	r3, [r2, #32]
 8002cf2:	e01c      	b.n	8002d2e <HAL_RCC_OscConfig+0x36e>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	2b05      	cmp	r3, #5
 8002cfa:	d10c      	bne.n	8002d16 <HAL_RCC_OscConfig+0x356>
 8002cfc:	4b61      	ldr	r3, [pc, #388]	; (8002e84 <HAL_RCC_OscConfig+0x4c4>)
 8002cfe:	6a1b      	ldr	r3, [r3, #32]
 8002d00:	4a60      	ldr	r2, [pc, #384]	; (8002e84 <HAL_RCC_OscConfig+0x4c4>)
 8002d02:	f043 0304 	orr.w	r3, r3, #4
 8002d06:	6213      	str	r3, [r2, #32]
 8002d08:	4b5e      	ldr	r3, [pc, #376]	; (8002e84 <HAL_RCC_OscConfig+0x4c4>)
 8002d0a:	6a1b      	ldr	r3, [r3, #32]
 8002d0c:	4a5d      	ldr	r2, [pc, #372]	; (8002e84 <HAL_RCC_OscConfig+0x4c4>)
 8002d0e:	f043 0301 	orr.w	r3, r3, #1
 8002d12:	6213      	str	r3, [r2, #32]
 8002d14:	e00b      	b.n	8002d2e <HAL_RCC_OscConfig+0x36e>
 8002d16:	4b5b      	ldr	r3, [pc, #364]	; (8002e84 <HAL_RCC_OscConfig+0x4c4>)
 8002d18:	6a1b      	ldr	r3, [r3, #32]
 8002d1a:	4a5a      	ldr	r2, [pc, #360]	; (8002e84 <HAL_RCC_OscConfig+0x4c4>)
 8002d1c:	f023 0301 	bic.w	r3, r3, #1
 8002d20:	6213      	str	r3, [r2, #32]
 8002d22:	4b58      	ldr	r3, [pc, #352]	; (8002e84 <HAL_RCC_OscConfig+0x4c4>)
 8002d24:	6a1b      	ldr	r3, [r3, #32]
 8002d26:	4a57      	ldr	r2, [pc, #348]	; (8002e84 <HAL_RCC_OscConfig+0x4c4>)
 8002d28:	f023 0304 	bic.w	r3, r3, #4
 8002d2c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d015      	beq.n	8002d62 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d36:	f7fd fe21 	bl	800097c <HAL_GetTick>
 8002d3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d3c:	e00a      	b.n	8002d54 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d3e:	f7fd fe1d 	bl	800097c <HAL_GetTick>
 8002d42:	4602      	mov	r2, r0
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d901      	bls.n	8002d54 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002d50:	2303      	movs	r3, #3
 8002d52:	e0b1      	b.n	8002eb8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d54:	4b4b      	ldr	r3, [pc, #300]	; (8002e84 <HAL_RCC_OscConfig+0x4c4>)
 8002d56:	6a1b      	ldr	r3, [r3, #32]
 8002d58:	f003 0302 	and.w	r3, r3, #2
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d0ee      	beq.n	8002d3e <HAL_RCC_OscConfig+0x37e>
 8002d60:	e014      	b.n	8002d8c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d62:	f7fd fe0b 	bl	800097c <HAL_GetTick>
 8002d66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d68:	e00a      	b.n	8002d80 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d6a:	f7fd fe07 	bl	800097c <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d901      	bls.n	8002d80 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	e09b      	b.n	8002eb8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d80:	4b40      	ldr	r3, [pc, #256]	; (8002e84 <HAL_RCC_OscConfig+0x4c4>)
 8002d82:	6a1b      	ldr	r3, [r3, #32]
 8002d84:	f003 0302 	and.w	r3, r3, #2
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d1ee      	bne.n	8002d6a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d8c:	7dfb      	ldrb	r3, [r7, #23]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d105      	bne.n	8002d9e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d92:	4b3c      	ldr	r3, [pc, #240]	; (8002e84 <HAL_RCC_OscConfig+0x4c4>)
 8002d94:	69db      	ldr	r3, [r3, #28]
 8002d96:	4a3b      	ldr	r2, [pc, #236]	; (8002e84 <HAL_RCC_OscConfig+0x4c4>)
 8002d98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d9c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	69db      	ldr	r3, [r3, #28]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	f000 8087 	beq.w	8002eb6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002da8:	4b36      	ldr	r3, [pc, #216]	; (8002e84 <HAL_RCC_OscConfig+0x4c4>)
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f003 030c 	and.w	r3, r3, #12
 8002db0:	2b08      	cmp	r3, #8
 8002db2:	d061      	beq.n	8002e78 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	69db      	ldr	r3, [r3, #28]
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d146      	bne.n	8002e4a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dbc:	4b33      	ldr	r3, [pc, #204]	; (8002e8c <HAL_RCC_OscConfig+0x4cc>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc2:	f7fd fddb 	bl	800097c <HAL_GetTick>
 8002dc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dc8:	e008      	b.n	8002ddc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dca:	f7fd fdd7 	bl	800097c <HAL_GetTick>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d901      	bls.n	8002ddc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	e06d      	b.n	8002eb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ddc:	4b29      	ldr	r3, [pc, #164]	; (8002e84 <HAL_RCC_OscConfig+0x4c4>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d1f0      	bne.n	8002dca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6a1b      	ldr	r3, [r3, #32]
 8002dec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002df0:	d108      	bne.n	8002e04 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002df2:	4b24      	ldr	r3, [pc, #144]	; (8002e84 <HAL_RCC_OscConfig+0x4c4>)
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	4921      	ldr	r1, [pc, #132]	; (8002e84 <HAL_RCC_OscConfig+0x4c4>)
 8002e00:	4313      	orrs	r3, r2
 8002e02:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e04:	4b1f      	ldr	r3, [pc, #124]	; (8002e84 <HAL_RCC_OscConfig+0x4c4>)
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a19      	ldr	r1, [r3, #32]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e14:	430b      	orrs	r3, r1
 8002e16:	491b      	ldr	r1, [pc, #108]	; (8002e84 <HAL_RCC_OscConfig+0x4c4>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e1c:	4b1b      	ldr	r3, [pc, #108]	; (8002e8c <HAL_RCC_OscConfig+0x4cc>)
 8002e1e:	2201      	movs	r2, #1
 8002e20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e22:	f7fd fdab 	bl	800097c <HAL_GetTick>
 8002e26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e28:	e008      	b.n	8002e3c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e2a:	f7fd fda7 	bl	800097c <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d901      	bls.n	8002e3c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e03d      	b.n	8002eb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e3c:	4b11      	ldr	r3, [pc, #68]	; (8002e84 <HAL_RCC_OscConfig+0x4c4>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d0f0      	beq.n	8002e2a <HAL_RCC_OscConfig+0x46a>
 8002e48:	e035      	b.n	8002eb6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e4a:	4b10      	ldr	r3, [pc, #64]	; (8002e8c <HAL_RCC_OscConfig+0x4cc>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e50:	f7fd fd94 	bl	800097c <HAL_GetTick>
 8002e54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e56:	e008      	b.n	8002e6a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e58:	f7fd fd90 	bl	800097c <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d901      	bls.n	8002e6a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e026      	b.n	8002eb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e6a:	4b06      	ldr	r3, [pc, #24]	; (8002e84 <HAL_RCC_OscConfig+0x4c4>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d1f0      	bne.n	8002e58 <HAL_RCC_OscConfig+0x498>
 8002e76:	e01e      	b.n	8002eb6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	69db      	ldr	r3, [r3, #28]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d107      	bne.n	8002e90 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e019      	b.n	8002eb8 <HAL_RCC_OscConfig+0x4f8>
 8002e84:	40021000 	.word	0x40021000
 8002e88:	40007000 	.word	0x40007000
 8002e8c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e90:	4b0b      	ldr	r3, [pc, #44]	; (8002ec0 <HAL_RCC_OscConfig+0x500>)
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6a1b      	ldr	r3, [r3, #32]
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d106      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d001      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e000      	b.n	8002eb8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002eb6:	2300      	movs	r3, #0
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3718      	adds	r7, #24
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	40021000 	.word	0x40021000

08002ec4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d101      	bne.n	8002ed8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e0d0      	b.n	800307a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ed8:	4b6a      	ldr	r3, [pc, #424]	; (8003084 <HAL_RCC_ClockConfig+0x1c0>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0307 	and.w	r3, r3, #7
 8002ee0:	683a      	ldr	r2, [r7, #0]
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d910      	bls.n	8002f08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ee6:	4b67      	ldr	r3, [pc, #412]	; (8003084 <HAL_RCC_ClockConfig+0x1c0>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f023 0207 	bic.w	r2, r3, #7
 8002eee:	4965      	ldr	r1, [pc, #404]	; (8003084 <HAL_RCC_ClockConfig+0x1c0>)
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ef6:	4b63      	ldr	r3, [pc, #396]	; (8003084 <HAL_RCC_ClockConfig+0x1c0>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0307 	and.w	r3, r3, #7
 8002efe:	683a      	ldr	r2, [r7, #0]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d001      	beq.n	8002f08 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e0b8      	b.n	800307a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0302 	and.w	r3, r3, #2
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d020      	beq.n	8002f56 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0304 	and.w	r3, r3, #4
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d005      	beq.n	8002f2c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f20:	4b59      	ldr	r3, [pc, #356]	; (8003088 <HAL_RCC_ClockConfig+0x1c4>)
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	4a58      	ldr	r2, [pc, #352]	; (8003088 <HAL_RCC_ClockConfig+0x1c4>)
 8002f26:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f2a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0308 	and.w	r3, r3, #8
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d005      	beq.n	8002f44 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f38:	4b53      	ldr	r3, [pc, #332]	; (8003088 <HAL_RCC_ClockConfig+0x1c4>)
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	4a52      	ldr	r2, [pc, #328]	; (8003088 <HAL_RCC_ClockConfig+0x1c4>)
 8002f3e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002f42:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f44:	4b50      	ldr	r3, [pc, #320]	; (8003088 <HAL_RCC_ClockConfig+0x1c4>)
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	494d      	ldr	r1, [pc, #308]	; (8003088 <HAL_RCC_ClockConfig+0x1c4>)
 8002f52:	4313      	orrs	r3, r2
 8002f54:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0301 	and.w	r3, r3, #1
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d040      	beq.n	8002fe4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d107      	bne.n	8002f7a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f6a:	4b47      	ldr	r3, [pc, #284]	; (8003088 <HAL_RCC_ClockConfig+0x1c4>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d115      	bne.n	8002fa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e07f      	b.n	800307a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d107      	bne.n	8002f92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f82:	4b41      	ldr	r3, [pc, #260]	; (8003088 <HAL_RCC_ClockConfig+0x1c4>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d109      	bne.n	8002fa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e073      	b.n	800307a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f92:	4b3d      	ldr	r3, [pc, #244]	; (8003088 <HAL_RCC_ClockConfig+0x1c4>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0302 	and.w	r3, r3, #2
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d101      	bne.n	8002fa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e06b      	b.n	800307a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fa2:	4b39      	ldr	r3, [pc, #228]	; (8003088 <HAL_RCC_ClockConfig+0x1c4>)
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	f023 0203 	bic.w	r2, r3, #3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	4936      	ldr	r1, [pc, #216]	; (8003088 <HAL_RCC_ClockConfig+0x1c4>)
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fb4:	f7fd fce2 	bl	800097c <HAL_GetTick>
 8002fb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fba:	e00a      	b.n	8002fd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fbc:	f7fd fcde 	bl	800097c <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d901      	bls.n	8002fd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	e053      	b.n	800307a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fd2:	4b2d      	ldr	r3, [pc, #180]	; (8003088 <HAL_RCC_ClockConfig+0x1c4>)
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f003 020c 	and.w	r2, r3, #12
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d1eb      	bne.n	8002fbc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fe4:	4b27      	ldr	r3, [pc, #156]	; (8003084 <HAL_RCC_ClockConfig+0x1c0>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0307 	and.w	r3, r3, #7
 8002fec:	683a      	ldr	r2, [r7, #0]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d210      	bcs.n	8003014 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ff2:	4b24      	ldr	r3, [pc, #144]	; (8003084 <HAL_RCC_ClockConfig+0x1c0>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f023 0207 	bic.w	r2, r3, #7
 8002ffa:	4922      	ldr	r1, [pc, #136]	; (8003084 <HAL_RCC_ClockConfig+0x1c0>)
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003002:	4b20      	ldr	r3, [pc, #128]	; (8003084 <HAL_RCC_ClockConfig+0x1c0>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0307 	and.w	r3, r3, #7
 800300a:	683a      	ldr	r2, [r7, #0]
 800300c:	429a      	cmp	r2, r3
 800300e:	d001      	beq.n	8003014 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e032      	b.n	800307a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0304 	and.w	r3, r3, #4
 800301c:	2b00      	cmp	r3, #0
 800301e:	d008      	beq.n	8003032 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003020:	4b19      	ldr	r3, [pc, #100]	; (8003088 <HAL_RCC_ClockConfig+0x1c4>)
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	4916      	ldr	r1, [pc, #88]	; (8003088 <HAL_RCC_ClockConfig+0x1c4>)
 800302e:	4313      	orrs	r3, r2
 8003030:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0308 	and.w	r3, r3, #8
 800303a:	2b00      	cmp	r3, #0
 800303c:	d009      	beq.n	8003052 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800303e:	4b12      	ldr	r3, [pc, #72]	; (8003088 <HAL_RCC_ClockConfig+0x1c4>)
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	00db      	lsls	r3, r3, #3
 800304c:	490e      	ldr	r1, [pc, #56]	; (8003088 <HAL_RCC_ClockConfig+0x1c4>)
 800304e:	4313      	orrs	r3, r2
 8003050:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003052:	f000 f821 	bl	8003098 <HAL_RCC_GetSysClockFreq>
 8003056:	4602      	mov	r2, r0
 8003058:	4b0b      	ldr	r3, [pc, #44]	; (8003088 <HAL_RCC_ClockConfig+0x1c4>)
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	091b      	lsrs	r3, r3, #4
 800305e:	f003 030f 	and.w	r3, r3, #15
 8003062:	490a      	ldr	r1, [pc, #40]	; (800308c <HAL_RCC_ClockConfig+0x1c8>)
 8003064:	5ccb      	ldrb	r3, [r1, r3]
 8003066:	fa22 f303 	lsr.w	r3, r2, r3
 800306a:	4a09      	ldr	r2, [pc, #36]	; (8003090 <HAL_RCC_ClockConfig+0x1cc>)
 800306c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800306e:	4b09      	ldr	r3, [pc, #36]	; (8003094 <HAL_RCC_ClockConfig+0x1d0>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4618      	mov	r0, r3
 8003074:	f7fd fc40 	bl	80008f8 <HAL_InitTick>

  return HAL_OK;
 8003078:	2300      	movs	r3, #0
}
 800307a:	4618      	mov	r0, r3
 800307c:	3710      	adds	r7, #16
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	40022000 	.word	0x40022000
 8003088:	40021000 	.word	0x40021000
 800308c:	0800935c 	.word	0x0800935c
 8003090:	20000000 	.word	0x20000000
 8003094:	20000004 	.word	0x20000004

08003098 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003098:	b480      	push	{r7}
 800309a:	b087      	sub	sp, #28
 800309c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800309e:	2300      	movs	r3, #0
 80030a0:	60fb      	str	r3, [r7, #12]
 80030a2:	2300      	movs	r3, #0
 80030a4:	60bb      	str	r3, [r7, #8]
 80030a6:	2300      	movs	r3, #0
 80030a8:	617b      	str	r3, [r7, #20]
 80030aa:	2300      	movs	r3, #0
 80030ac:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80030ae:	2300      	movs	r3, #0
 80030b0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80030b2:	4b1e      	ldr	r3, [pc, #120]	; (800312c <HAL_RCC_GetSysClockFreq+0x94>)
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f003 030c 	and.w	r3, r3, #12
 80030be:	2b04      	cmp	r3, #4
 80030c0:	d002      	beq.n	80030c8 <HAL_RCC_GetSysClockFreq+0x30>
 80030c2:	2b08      	cmp	r3, #8
 80030c4:	d003      	beq.n	80030ce <HAL_RCC_GetSysClockFreq+0x36>
 80030c6:	e027      	b.n	8003118 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80030c8:	4b19      	ldr	r3, [pc, #100]	; (8003130 <HAL_RCC_GetSysClockFreq+0x98>)
 80030ca:	613b      	str	r3, [r7, #16]
      break;
 80030cc:	e027      	b.n	800311e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	0c9b      	lsrs	r3, r3, #18
 80030d2:	f003 030f 	and.w	r3, r3, #15
 80030d6:	4a17      	ldr	r2, [pc, #92]	; (8003134 <HAL_RCC_GetSysClockFreq+0x9c>)
 80030d8:	5cd3      	ldrb	r3, [r2, r3]
 80030da:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d010      	beq.n	8003108 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80030e6:	4b11      	ldr	r3, [pc, #68]	; (800312c <HAL_RCC_GetSysClockFreq+0x94>)
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	0c5b      	lsrs	r3, r3, #17
 80030ec:	f003 0301 	and.w	r3, r3, #1
 80030f0:	4a11      	ldr	r2, [pc, #68]	; (8003138 <HAL_RCC_GetSysClockFreq+0xa0>)
 80030f2:	5cd3      	ldrb	r3, [r2, r3]
 80030f4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a0d      	ldr	r2, [pc, #52]	; (8003130 <HAL_RCC_GetSysClockFreq+0x98>)
 80030fa:	fb03 f202 	mul.w	r2, r3, r2
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	fbb2 f3f3 	udiv	r3, r2, r3
 8003104:	617b      	str	r3, [r7, #20]
 8003106:	e004      	b.n	8003112 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	4a0c      	ldr	r2, [pc, #48]	; (800313c <HAL_RCC_GetSysClockFreq+0xa4>)
 800310c:	fb02 f303 	mul.w	r3, r2, r3
 8003110:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	613b      	str	r3, [r7, #16]
      break;
 8003116:	e002      	b.n	800311e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003118:	4b05      	ldr	r3, [pc, #20]	; (8003130 <HAL_RCC_GetSysClockFreq+0x98>)
 800311a:	613b      	str	r3, [r7, #16]
      break;
 800311c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800311e:	693b      	ldr	r3, [r7, #16]
}
 8003120:	4618      	mov	r0, r3
 8003122:	371c      	adds	r7, #28
 8003124:	46bd      	mov	sp, r7
 8003126:	bc80      	pop	{r7}
 8003128:	4770      	bx	lr
 800312a:	bf00      	nop
 800312c:	40021000 	.word	0x40021000
 8003130:	007a1200 	.word	0x007a1200
 8003134:	0800936c 	.word	0x0800936c
 8003138:	0800937c 	.word	0x0800937c
 800313c:	003d0900 	.word	0x003d0900

08003140 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003140:	b480      	push	{r7}
 8003142:	b085      	sub	sp, #20
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003148:	4b0a      	ldr	r3, [pc, #40]	; (8003174 <RCC_Delay+0x34>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a0a      	ldr	r2, [pc, #40]	; (8003178 <RCC_Delay+0x38>)
 800314e:	fba2 2303 	umull	r2, r3, r2, r3
 8003152:	0a5b      	lsrs	r3, r3, #9
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	fb02 f303 	mul.w	r3, r2, r3
 800315a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800315c:	bf00      	nop
  }
  while (Delay --);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	1e5a      	subs	r2, r3, #1
 8003162:	60fa      	str	r2, [r7, #12]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d1f9      	bne.n	800315c <RCC_Delay+0x1c>
}
 8003168:	bf00      	nop
 800316a:	bf00      	nop
 800316c:	3714      	adds	r7, #20
 800316e:	46bd      	mov	sp, r7
 8003170:	bc80      	pop	{r7}
 8003172:	4770      	bx	lr
 8003174:	20000000 	.word	0x20000000
 8003178:	10624dd3 	.word	0x10624dd3

0800317c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b086      	sub	sp, #24
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003184:	2300      	movs	r3, #0
 8003186:	613b      	str	r3, [r7, #16]
 8003188:	2300      	movs	r3, #0
 800318a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0301 	and.w	r3, r3, #1
 8003194:	2b00      	cmp	r3, #0
 8003196:	d07d      	beq.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003198:	2300      	movs	r3, #0
 800319a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800319c:	4b4f      	ldr	r3, [pc, #316]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800319e:	69db      	ldr	r3, [r3, #28]
 80031a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d10d      	bne.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031a8:	4b4c      	ldr	r3, [pc, #304]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031aa:	69db      	ldr	r3, [r3, #28]
 80031ac:	4a4b      	ldr	r2, [pc, #300]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031b2:	61d3      	str	r3, [r2, #28]
 80031b4:	4b49      	ldr	r3, [pc, #292]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031b6:	69db      	ldr	r3, [r3, #28]
 80031b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031bc:	60bb      	str	r3, [r7, #8]
 80031be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031c0:	2301      	movs	r3, #1
 80031c2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031c4:	4b46      	ldr	r3, [pc, #280]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d118      	bne.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031d0:	4b43      	ldr	r3, [pc, #268]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a42      	ldr	r2, [pc, #264]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031da:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031dc:	f7fd fbce 	bl	800097c <HAL_GetTick>
 80031e0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031e2:	e008      	b.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031e4:	f7fd fbca 	bl	800097c <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	2b64      	cmp	r3, #100	; 0x64
 80031f0:	d901      	bls.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e06d      	b.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031f6:	4b3a      	ldr	r3, [pc, #232]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d0f0      	beq.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003202:	4b36      	ldr	r3, [pc, #216]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003204:	6a1b      	ldr	r3, [r3, #32]
 8003206:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800320a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d02e      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800321a:	68fa      	ldr	r2, [r7, #12]
 800321c:	429a      	cmp	r2, r3
 800321e:	d027      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003220:	4b2e      	ldr	r3, [pc, #184]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003222:	6a1b      	ldr	r3, [r3, #32]
 8003224:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003228:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800322a:	4b2e      	ldr	r3, [pc, #184]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800322c:	2201      	movs	r2, #1
 800322e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003230:	4b2c      	ldr	r3, [pc, #176]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003232:	2200      	movs	r2, #0
 8003234:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003236:	4a29      	ldr	r2, [pc, #164]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f003 0301 	and.w	r3, r3, #1
 8003242:	2b00      	cmp	r3, #0
 8003244:	d014      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003246:	f7fd fb99 	bl	800097c <HAL_GetTick>
 800324a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800324c:	e00a      	b.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800324e:	f7fd fb95 	bl	800097c <HAL_GetTick>
 8003252:	4602      	mov	r2, r0
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	f241 3288 	movw	r2, #5000	; 0x1388
 800325c:	4293      	cmp	r3, r2
 800325e:	d901      	bls.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	e036      	b.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003264:	4b1d      	ldr	r3, [pc, #116]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003266:	6a1b      	ldr	r3, [r3, #32]
 8003268:	f003 0302 	and.w	r3, r3, #2
 800326c:	2b00      	cmp	r3, #0
 800326e:	d0ee      	beq.n	800324e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003270:	4b1a      	ldr	r3, [pc, #104]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003272:	6a1b      	ldr	r3, [r3, #32]
 8003274:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	4917      	ldr	r1, [pc, #92]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800327e:	4313      	orrs	r3, r2
 8003280:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003282:	7dfb      	ldrb	r3, [r7, #23]
 8003284:	2b01      	cmp	r3, #1
 8003286:	d105      	bne.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003288:	4b14      	ldr	r3, [pc, #80]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800328a:	69db      	ldr	r3, [r3, #28]
 800328c:	4a13      	ldr	r2, [pc, #76]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800328e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003292:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0302 	and.w	r3, r3, #2
 800329c:	2b00      	cmp	r3, #0
 800329e:	d008      	beq.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80032a0:	4b0e      	ldr	r3, [pc, #56]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	490b      	ldr	r1, [pc, #44]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0310 	and.w	r3, r3, #16
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d008      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80032be:	4b07      	ldr	r3, [pc, #28]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	4904      	ldr	r1, [pc, #16]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032cc:	4313      	orrs	r3, r2
 80032ce:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3718      	adds	r7, #24
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	40021000 	.word	0x40021000
 80032e0:	40007000 	.word	0x40007000
 80032e4:	42420440 	.word	0x42420440

080032e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d101      	bne.n	80032fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e076      	b.n	80033e8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d108      	bne.n	8003314 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800330a:	d009      	beq.n	8003320 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	61da      	str	r2, [r3, #28]
 8003312:	e005      	b.n	8003320 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800332c:	b2db      	uxtb	r3, r3
 800332e:	2b00      	cmp	r3, #0
 8003330:	d106      	bne.n	8003340 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2200      	movs	r2, #0
 8003336:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f7fd f9e8 	bl	8000710 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2202      	movs	r2, #2
 8003344:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003356:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003368:	431a      	orrs	r2, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003372:	431a      	orrs	r2, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	691b      	ldr	r3, [r3, #16]
 8003378:	f003 0302 	and.w	r3, r3, #2
 800337c:	431a      	orrs	r2, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	695b      	ldr	r3, [r3, #20]
 8003382:	f003 0301 	and.w	r3, r3, #1
 8003386:	431a      	orrs	r2, r3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	699b      	ldr	r3, [r3, #24]
 800338c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003390:	431a      	orrs	r2, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	69db      	ldr	r3, [r3, #28]
 8003396:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800339a:	431a      	orrs	r2, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a1b      	ldr	r3, [r3, #32]
 80033a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033a4:	ea42 0103 	orr.w	r1, r2, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ac:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	430a      	orrs	r2, r1
 80033b6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	699b      	ldr	r3, [r3, #24]
 80033bc:	0c1a      	lsrs	r2, r3, #16
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f002 0204 	and.w	r2, r2, #4
 80033c6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	69da      	ldr	r2, [r3, #28]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033d6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2201      	movs	r2, #1
 80033e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80033e6:	2300      	movs	r3, #0
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3708      	adds	r7, #8
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b088      	sub	sp, #32
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	60b9      	str	r1, [r7, #8]
 80033fa:	603b      	str	r3, [r7, #0]
 80033fc:	4613      	mov	r3, r2
 80033fe:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003400:	2300      	movs	r3, #0
 8003402:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800340a:	2b01      	cmp	r3, #1
 800340c:	d101      	bne.n	8003412 <HAL_SPI_Transmit+0x22>
 800340e:	2302      	movs	r3, #2
 8003410:	e12d      	b.n	800366e <HAL_SPI_Transmit+0x27e>
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2201      	movs	r2, #1
 8003416:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800341a:	f7fd faaf 	bl	800097c <HAL_GetTick>
 800341e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003420:	88fb      	ldrh	r3, [r7, #6]
 8003422:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800342a:	b2db      	uxtb	r3, r3
 800342c:	2b01      	cmp	r3, #1
 800342e:	d002      	beq.n	8003436 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003430:	2302      	movs	r3, #2
 8003432:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003434:	e116      	b.n	8003664 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d002      	beq.n	8003442 <HAL_SPI_Transmit+0x52>
 800343c:	88fb      	ldrh	r3, [r7, #6]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d102      	bne.n	8003448 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003446:	e10d      	b.n	8003664 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2203      	movs	r2, #3
 800344c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2200      	movs	r2, #0
 8003454:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	68ba      	ldr	r2, [r7, #8]
 800345a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	88fa      	ldrh	r2, [r7, #6]
 8003460:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	88fa      	ldrh	r2, [r7, #6]
 8003466:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2200      	movs	r2, #0
 800346c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2200      	movs	r2, #0
 8003472:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2200      	movs	r2, #0
 8003478:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2200      	movs	r2, #0
 800347e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2200      	movs	r2, #0
 8003484:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800348e:	d10f      	bne.n	80034b0 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800349e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034ae:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ba:	2b40      	cmp	r3, #64	; 0x40
 80034bc:	d007      	beq.n	80034ce <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034cc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034d6:	d14f      	bne.n	8003578 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d002      	beq.n	80034e6 <HAL_SPI_Transmit+0xf6>
 80034e0:	8afb      	ldrh	r3, [r7, #22]
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d142      	bne.n	800356c <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ea:	881a      	ldrh	r2, [r3, #0]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f6:	1c9a      	adds	r2, r3, #2
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003500:	b29b      	uxth	r3, r3
 8003502:	3b01      	subs	r3, #1
 8003504:	b29a      	uxth	r2, r3
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800350a:	e02f      	b.n	800356c <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	f003 0302 	and.w	r3, r3, #2
 8003516:	2b02      	cmp	r3, #2
 8003518:	d112      	bne.n	8003540 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351e:	881a      	ldrh	r2, [r3, #0]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800352a:	1c9a      	adds	r2, r3, #2
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003534:	b29b      	uxth	r3, r3
 8003536:	3b01      	subs	r3, #1
 8003538:	b29a      	uxth	r2, r3
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	86da      	strh	r2, [r3, #54]	; 0x36
 800353e:	e015      	b.n	800356c <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003540:	f7fd fa1c 	bl	800097c <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	69bb      	ldr	r3, [r7, #24]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	683a      	ldr	r2, [r7, #0]
 800354c:	429a      	cmp	r2, r3
 800354e:	d803      	bhi.n	8003558 <HAL_SPI_Transmit+0x168>
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003556:	d102      	bne.n	800355e <HAL_SPI_Transmit+0x16e>
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d106      	bne.n	800356c <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2201      	movs	r2, #1
 8003566:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800356a:	e07b      	b.n	8003664 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003570:	b29b      	uxth	r3, r3
 8003572:	2b00      	cmp	r3, #0
 8003574:	d1ca      	bne.n	800350c <HAL_SPI_Transmit+0x11c>
 8003576:	e050      	b.n	800361a <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d002      	beq.n	8003586 <HAL_SPI_Transmit+0x196>
 8003580:	8afb      	ldrh	r3, [r7, #22]
 8003582:	2b01      	cmp	r3, #1
 8003584:	d144      	bne.n	8003610 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	330c      	adds	r3, #12
 8003590:	7812      	ldrb	r2, [r2, #0]
 8003592:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003598:	1c5a      	adds	r2, r3, #1
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	3b01      	subs	r3, #1
 80035a6:	b29a      	uxth	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80035ac:	e030      	b.n	8003610 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	f003 0302 	and.w	r3, r3, #2
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	d113      	bne.n	80035e4 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	330c      	adds	r3, #12
 80035c6:	7812      	ldrb	r2, [r2, #0]
 80035c8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ce:	1c5a      	adds	r2, r3, #1
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035d8:	b29b      	uxth	r3, r3
 80035da:	3b01      	subs	r3, #1
 80035dc:	b29a      	uxth	r2, r3
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	86da      	strh	r2, [r3, #54]	; 0x36
 80035e2:	e015      	b.n	8003610 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035e4:	f7fd f9ca 	bl	800097c <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	69bb      	ldr	r3, [r7, #24]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	683a      	ldr	r2, [r7, #0]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d803      	bhi.n	80035fc <HAL_SPI_Transmit+0x20c>
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035fa:	d102      	bne.n	8003602 <HAL_SPI_Transmit+0x212>
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d106      	bne.n	8003610 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2201      	movs	r2, #1
 800360a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800360e:	e029      	b.n	8003664 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003614:	b29b      	uxth	r3, r3
 8003616:	2b00      	cmp	r3, #0
 8003618:	d1c9      	bne.n	80035ae <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800361a:	69ba      	ldr	r2, [r7, #24]
 800361c:	6839      	ldr	r1, [r7, #0]
 800361e:	68f8      	ldr	r0, [r7, #12]
 8003620:	f000 fbcc 	bl	8003dbc <SPI_EndRxTxTransaction>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d002      	beq.n	8003630 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2220      	movs	r2, #32
 800362e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d10a      	bne.n	800364e <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003638:	2300      	movs	r3, #0
 800363a:	613b      	str	r3, [r7, #16]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	613b      	str	r3, [r7, #16]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	613b      	str	r3, [r7, #16]
 800364c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003652:	2b00      	cmp	r3, #0
 8003654:	d002      	beq.n	800365c <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	77fb      	strb	r3, [r7, #31]
 800365a:	e003      	b.n	8003664 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2200      	movs	r2, #0
 8003668:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800366c:	7ffb      	ldrb	r3, [r7, #31]
}
 800366e:	4618      	mov	r0, r3
 8003670:	3720      	adds	r7, #32
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}

08003676 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003676:	b580      	push	{r7, lr}
 8003678:	b088      	sub	sp, #32
 800367a:	af02      	add	r7, sp, #8
 800367c:	60f8      	str	r0, [r7, #12]
 800367e:	60b9      	str	r1, [r7, #8]
 8003680:	603b      	str	r3, [r7, #0]
 8003682:	4613      	mov	r3, r2
 8003684:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003686:	2300      	movs	r3, #0
 8003688:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003690:	b2db      	uxtb	r3, r3
 8003692:	2b01      	cmp	r3, #1
 8003694:	d002      	beq.n	800369c <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8003696:	2302      	movs	r3, #2
 8003698:	75fb      	strb	r3, [r7, #23]
    goto error;
 800369a:	e0fb      	b.n	8003894 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036a4:	d112      	bne.n	80036cc <HAL_SPI_Receive+0x56>
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d10e      	bne.n	80036cc <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2204      	movs	r2, #4
 80036b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80036b6:	88fa      	ldrh	r2, [r7, #6]
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	9300      	str	r3, [sp, #0]
 80036bc:	4613      	mov	r3, r2
 80036be:	68ba      	ldr	r2, [r7, #8]
 80036c0:	68b9      	ldr	r1, [r7, #8]
 80036c2:	68f8      	ldr	r0, [r7, #12]
 80036c4:	f000 f8ef 	bl	80038a6 <HAL_SPI_TransmitReceive>
 80036c8:	4603      	mov	r3, r0
 80036ca:	e0e8      	b.n	800389e <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d101      	bne.n	80036da <HAL_SPI_Receive+0x64>
 80036d6:	2302      	movs	r3, #2
 80036d8:	e0e1      	b.n	800389e <HAL_SPI_Receive+0x228>
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2201      	movs	r2, #1
 80036de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80036e2:	f7fd f94b 	bl	800097c <HAL_GetTick>
 80036e6:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d002      	beq.n	80036f4 <HAL_SPI_Receive+0x7e>
 80036ee:	88fb      	ldrh	r3, [r7, #6]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d102      	bne.n	80036fa <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80036f8:	e0cc      	b.n	8003894 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2204      	movs	r2, #4
 80036fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2200      	movs	r2, #0
 8003706:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	68ba      	ldr	r2, [r7, #8]
 800370c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	88fa      	ldrh	r2, [r7, #6]
 8003712:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	88fa      	ldrh	r2, [r7, #6]
 8003718:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2200      	movs	r2, #0
 800371e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2200      	movs	r2, #0
 8003724:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2200      	movs	r2, #0
 800372a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2200      	movs	r2, #0
 8003730:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2200      	movs	r2, #0
 8003736:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003740:	d10f      	bne.n	8003762 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003750:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003760:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800376c:	2b40      	cmp	r3, #64	; 0x40
 800376e:	d007      	beq.n	8003780 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800377e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d16a      	bne.n	800385e <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003788:	e032      	b.n	80037f0 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	f003 0301 	and.w	r3, r3, #1
 8003794:	2b01      	cmp	r3, #1
 8003796:	d115      	bne.n	80037c4 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f103 020c 	add.w	r2, r3, #12
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a4:	7812      	ldrb	r2, [r2, #0]
 80037a6:	b2d2      	uxtb	r2, r2
 80037a8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ae:	1c5a      	adds	r2, r3, #1
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	3b01      	subs	r3, #1
 80037bc:	b29a      	uxth	r2, r3
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80037c2:	e015      	b.n	80037f0 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80037c4:	f7fd f8da 	bl	800097c <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	683a      	ldr	r2, [r7, #0]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d803      	bhi.n	80037dc <HAL_SPI_Receive+0x166>
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037da:	d102      	bne.n	80037e2 <HAL_SPI_Receive+0x16c>
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d106      	bne.n	80037f0 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2201      	movs	r2, #1
 80037ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80037ee:	e051      	b.n	8003894 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d1c7      	bne.n	800378a <HAL_SPI_Receive+0x114>
 80037fa:	e035      	b.n	8003868 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	f003 0301 	and.w	r3, r3, #1
 8003806:	2b01      	cmp	r3, #1
 8003808:	d113      	bne.n	8003832 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	68da      	ldr	r2, [r3, #12]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003814:	b292      	uxth	r2, r2
 8003816:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800381c:	1c9a      	adds	r2, r3, #2
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003826:	b29b      	uxth	r3, r3
 8003828:	3b01      	subs	r3, #1
 800382a:	b29a      	uxth	r2, r3
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003830:	e015      	b.n	800385e <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003832:	f7fd f8a3 	bl	800097c <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	683a      	ldr	r2, [r7, #0]
 800383e:	429a      	cmp	r2, r3
 8003840:	d803      	bhi.n	800384a <HAL_SPI_Receive+0x1d4>
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003848:	d102      	bne.n	8003850 <HAL_SPI_Receive+0x1da>
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d106      	bne.n	800385e <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8003850:	2303      	movs	r3, #3
 8003852:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800385c:	e01a      	b.n	8003894 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003862:	b29b      	uxth	r3, r3
 8003864:	2b00      	cmp	r3, #0
 8003866:	d1c9      	bne.n	80037fc <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003868:	693a      	ldr	r2, [r7, #16]
 800386a:	6839      	ldr	r1, [r7, #0]
 800386c:	68f8      	ldr	r0, [r7, #12]
 800386e:	f000 fa53 	bl	8003d18 <SPI_EndRxTransaction>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d002      	beq.n	800387e <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2220      	movs	r2, #32
 800387c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003882:	2b00      	cmp	r3, #0
 8003884:	d002      	beq.n	800388c <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	75fb      	strb	r3, [r7, #23]
 800388a:	e003      	b.n	8003894 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2200      	movs	r2, #0
 8003898:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800389c:	7dfb      	ldrb	r3, [r7, #23]
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3718      	adds	r7, #24
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}

080038a6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80038a6:	b580      	push	{r7, lr}
 80038a8:	b08c      	sub	sp, #48	; 0x30
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	60f8      	str	r0, [r7, #12]
 80038ae:	60b9      	str	r1, [r7, #8]
 80038b0:	607a      	str	r2, [r7, #4]
 80038b2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80038b4:	2301      	movs	r3, #1
 80038b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80038b8:	2300      	movs	r3, #0
 80038ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d101      	bne.n	80038cc <HAL_SPI_TransmitReceive+0x26>
 80038c8:	2302      	movs	r3, #2
 80038ca:	e198      	b.n	8003bfe <HAL_SPI_TransmitReceive+0x358>
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80038d4:	f7fd f852 	bl	800097c <HAL_GetTick>
 80038d8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80038ea:	887b      	ldrh	r3, [r7, #2]
 80038ec:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80038ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d00f      	beq.n	8003916 <HAL_SPI_TransmitReceive+0x70>
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038fc:	d107      	bne.n	800390e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d103      	bne.n	800390e <HAL_SPI_TransmitReceive+0x68>
 8003906:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800390a:	2b04      	cmp	r3, #4
 800390c:	d003      	beq.n	8003916 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800390e:	2302      	movs	r3, #2
 8003910:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003914:	e16d      	b.n	8003bf2 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d005      	beq.n	8003928 <HAL_SPI_TransmitReceive+0x82>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d002      	beq.n	8003928 <HAL_SPI_TransmitReceive+0x82>
 8003922:	887b      	ldrh	r3, [r7, #2]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d103      	bne.n	8003930 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800392e:	e160      	b.n	8003bf2 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003936:	b2db      	uxtb	r3, r3
 8003938:	2b04      	cmp	r3, #4
 800393a:	d003      	beq.n	8003944 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2205      	movs	r2, #5
 8003940:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2200      	movs	r2, #0
 8003948:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	887a      	ldrh	r2, [r7, #2]
 8003954:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	887a      	ldrh	r2, [r7, #2]
 800395a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	68ba      	ldr	r2, [r7, #8]
 8003960:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	887a      	ldrh	r2, [r7, #2]
 8003966:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	887a      	ldrh	r2, [r7, #2]
 800396c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2200      	movs	r2, #0
 8003972:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2200      	movs	r2, #0
 8003978:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003984:	2b40      	cmp	r3, #64	; 0x40
 8003986:	d007      	beq.n	8003998 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003996:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039a0:	d17c      	bne.n	8003a9c <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d002      	beq.n	80039b0 <HAL_SPI_TransmitReceive+0x10a>
 80039aa:	8b7b      	ldrh	r3, [r7, #26]
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d16a      	bne.n	8003a86 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b4:	881a      	ldrh	r2, [r3, #0]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c0:	1c9a      	adds	r2, r3, #2
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	3b01      	subs	r3, #1
 80039ce:	b29a      	uxth	r2, r3
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039d4:	e057      	b.n	8003a86 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	f003 0302 	and.w	r3, r3, #2
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d11b      	bne.n	8003a1c <HAL_SPI_TransmitReceive+0x176>
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d016      	beq.n	8003a1c <HAL_SPI_TransmitReceive+0x176>
 80039ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d113      	bne.n	8003a1c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f8:	881a      	ldrh	r2, [r3, #0]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a04:	1c9a      	adds	r2, r3, #2
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	3b01      	subs	r3, #1
 8003a12:	b29a      	uxth	r2, r3
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	f003 0301 	and.w	r3, r3, #1
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d119      	bne.n	8003a5e <HAL_SPI_TransmitReceive+0x1b8>
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d014      	beq.n	8003a5e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68da      	ldr	r2, [r3, #12]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a3e:	b292      	uxth	r2, r2
 8003a40:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a46:	1c9a      	adds	r2, r3, #2
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	3b01      	subs	r3, #1
 8003a54:	b29a      	uxth	r2, r3
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003a5e:	f7fc ff8d 	bl	800097c <HAL_GetTick>
 8003a62:	4602      	mov	r2, r0
 8003a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d80b      	bhi.n	8003a86 <HAL_SPI_TransmitReceive+0x1e0>
 8003a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a74:	d007      	beq.n	8003a86 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8003a84:	e0b5      	b.n	8003bf2 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d1a2      	bne.n	80039d6 <HAL_SPI_TransmitReceive+0x130>
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d19d      	bne.n	80039d6 <HAL_SPI_TransmitReceive+0x130>
 8003a9a:	e080      	b.n	8003b9e <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d002      	beq.n	8003aaa <HAL_SPI_TransmitReceive+0x204>
 8003aa4:	8b7b      	ldrh	r3, [r7, #26]
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d16f      	bne.n	8003b8a <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	330c      	adds	r3, #12
 8003ab4:	7812      	ldrb	r2, [r2, #0]
 8003ab6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003abc:	1c5a      	adds	r2, r3, #1
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	3b01      	subs	r3, #1
 8003aca:	b29a      	uxth	r2, r3
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ad0:	e05b      	b.n	8003b8a <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	f003 0302 	and.w	r3, r3, #2
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d11c      	bne.n	8003b1a <HAL_SPI_TransmitReceive+0x274>
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d017      	beq.n	8003b1a <HAL_SPI_TransmitReceive+0x274>
 8003aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d114      	bne.n	8003b1a <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	330c      	adds	r3, #12
 8003afa:	7812      	ldrb	r2, [r2, #0]
 8003afc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b02:	1c5a      	adds	r2, r3, #1
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	3b01      	subs	r3, #1
 8003b10:	b29a      	uxth	r2, r3
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003b16:	2300      	movs	r3, #0
 8003b18:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	f003 0301 	and.w	r3, r3, #1
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d119      	bne.n	8003b5c <HAL_SPI_TransmitReceive+0x2b6>
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d014      	beq.n	8003b5c <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	68da      	ldr	r2, [r3, #12]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b3c:	b2d2      	uxtb	r2, r2
 8003b3e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b44:	1c5a      	adds	r2, r3, #1
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	3b01      	subs	r3, #1
 8003b52:	b29a      	uxth	r2, r3
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003b5c:	f7fc ff0e 	bl	800097c <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d803      	bhi.n	8003b74 <HAL_SPI_TransmitReceive+0x2ce>
 8003b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b72:	d102      	bne.n	8003b7a <HAL_SPI_TransmitReceive+0x2d4>
 8003b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d107      	bne.n	8003b8a <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8003b88:	e033      	b.n	8003bf2 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d19e      	bne.n	8003ad2 <HAL_SPI_TransmitReceive+0x22c>
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d199      	bne.n	8003ad2 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ba0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003ba2:	68f8      	ldr	r0, [r7, #12]
 8003ba4:	f000 f90a 	bl	8003dbc <SPI_EndRxTxTransaction>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d006      	beq.n	8003bbc <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2220      	movs	r2, #32
 8003bb8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003bba:	e01a      	b.n	8003bf2 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d10a      	bne.n	8003bda <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	617b      	str	r3, [r7, #20]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	617b      	str	r3, [r7, #20]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	617b      	str	r3, [r7, #20]
 8003bd8:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d003      	beq.n	8003bea <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003be8:	e003      	b.n	8003bf2 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2201      	movs	r2, #1
 8003bee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003bfa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3730      	adds	r7, #48	; 0x30
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
	...

08003c08 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b088      	sub	sp, #32
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	60b9      	str	r1, [r7, #8]
 8003c12:	603b      	str	r3, [r7, #0]
 8003c14:	4613      	mov	r3, r2
 8003c16:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003c18:	f7fc feb0 	bl	800097c <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c20:	1a9b      	subs	r3, r3, r2
 8003c22:	683a      	ldr	r2, [r7, #0]
 8003c24:	4413      	add	r3, r2
 8003c26:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003c28:	f7fc fea8 	bl	800097c <HAL_GetTick>
 8003c2c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003c2e:	4b39      	ldr	r3, [pc, #228]	; (8003d14 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	015b      	lsls	r3, r3, #5
 8003c34:	0d1b      	lsrs	r3, r3, #20
 8003c36:	69fa      	ldr	r2, [r7, #28]
 8003c38:	fb02 f303 	mul.w	r3, r2, r3
 8003c3c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c3e:	e054      	b.n	8003cea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c46:	d050      	beq.n	8003cea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003c48:	f7fc fe98 	bl	800097c <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	69bb      	ldr	r3, [r7, #24]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	69fa      	ldr	r2, [r7, #28]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d902      	bls.n	8003c5e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d13d      	bne.n	8003cda <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	685a      	ldr	r2, [r3, #4]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003c6c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c76:	d111      	bne.n	8003c9c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c80:	d004      	beq.n	8003c8c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c8a:	d107      	bne.n	8003c9c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c9a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ca4:	d10f      	bne.n	8003cc6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003cb4:	601a      	str	r2, [r3, #0]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003cc4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2201      	movs	r2, #1
 8003cca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e017      	b.n	8003d0a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d101      	bne.n	8003ce4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	3b01      	subs	r3, #1
 8003ce8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	689a      	ldr	r2, [r3, #8]
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	68ba      	ldr	r2, [r7, #8]
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	bf0c      	ite	eq
 8003cfa:	2301      	moveq	r3, #1
 8003cfc:	2300      	movne	r3, #0
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	461a      	mov	r2, r3
 8003d02:	79fb      	ldrb	r3, [r7, #7]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d19b      	bne.n	8003c40 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003d08:	2300      	movs	r3, #0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3720      	adds	r7, #32
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	20000000 	.word	0x20000000

08003d18 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b086      	sub	sp, #24
 8003d1c:	af02      	add	r7, sp, #8
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	60b9      	str	r1, [r7, #8]
 8003d22:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d2c:	d111      	bne.n	8003d52 <SPI_EndRxTransaction+0x3a>
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d36:	d004      	beq.n	8003d42 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d40:	d107      	bne.n	8003d52 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d50:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d5a:	d117      	bne.n	8003d8c <SPI_EndRxTransaction+0x74>
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d64:	d112      	bne.n	8003d8c <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	9300      	str	r3, [sp, #0]
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	2101      	movs	r1, #1
 8003d70:	68f8      	ldr	r0, [r7, #12]
 8003d72:	f7ff ff49 	bl	8003c08 <SPI_WaitFlagStateUntilTimeout>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d01a      	beq.n	8003db2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d80:	f043 0220 	orr.w	r2, r3, #32
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	e013      	b.n	8003db4 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	9300      	str	r3, [sp, #0]
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	2200      	movs	r2, #0
 8003d94:	2180      	movs	r1, #128	; 0x80
 8003d96:	68f8      	ldr	r0, [r7, #12]
 8003d98:	f7ff ff36 	bl	8003c08 <SPI_WaitFlagStateUntilTimeout>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d007      	beq.n	8003db2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003da6:	f043 0220 	orr.w	r2, r3, #32
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	e000      	b.n	8003db4 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8003db2:	2300      	movs	r3, #0
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3710      	adds	r7, #16
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b086      	sub	sp, #24
 8003dc0:	af02      	add	r7, sp, #8
 8003dc2:	60f8      	str	r0, [r7, #12]
 8003dc4:	60b9      	str	r1, [r7, #8]
 8003dc6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	9300      	str	r3, [sp, #0]
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	2180      	movs	r1, #128	; 0x80
 8003dd2:	68f8      	ldr	r0, [r7, #12]
 8003dd4:	f7ff ff18 	bl	8003c08 <SPI_WaitFlagStateUntilTimeout>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d007      	beq.n	8003dee <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003de2:	f043 0220 	orr.w	r2, r3, #32
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e000      	b.n	8003df0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003dee:	2300      	movs	r3, #0
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3710      	adds	r7, #16
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}

08003df8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003df8:	b084      	sub	sp, #16
 8003dfa:	b480      	push	{r7}
 8003dfc:	b083      	sub	sp, #12
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]
 8003e02:	f107 0014 	add.w	r0, r7, #20
 8003e06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003e0a:	2300      	movs	r3, #0
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	370c      	adds	r7, #12
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bc80      	pop	{r7}
 8003e14:	b004      	add	sp, #16
 8003e16:	4770      	bx	lr

08003e18 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b085      	sub	sp, #20
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003e28:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003e2c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	b29a      	uxth	r2, r3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003e38:	2300      	movs	r3, #0
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3714      	adds	r7, #20
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bc80      	pop	{r7}
 8003e42:	4770      	bx	lr

08003e44 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b085      	sub	sp, #20
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003e4c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003e50:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003e58:	b29a      	uxth	r2, r3
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	43db      	mvns	r3, r3
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	4013      	ands	r3, r2
 8003e64:	b29a      	uxth	r2, r3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003e6c:	2300      	movs	r3, #0
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3714      	adds	r7, #20
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bc80      	pop	{r7}
 8003e76:	4770      	bx	lr

08003e78 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	460b      	mov	r3, r1
 8003e82:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	370c      	adds	r7, #12
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bc80      	pop	{r7}
 8003e8e:	4770      	bx	lr

08003e90 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003e90:	b084      	sub	sp, #16
 8003e92:	b480      	push	{r7}
 8003e94:	b083      	sub	sp, #12
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]
 8003e9a:	f107 0014 	add.w	r0, r7, #20
 8003e9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003ec2:	2300      	movs	r3, #0
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	370c      	adds	r7, #12
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bc80      	pop	{r7}
 8003ecc:	b004      	add	sp, #16
 8003ece:	4770      	bx	lr

08003ed0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b09d      	sub	sp, #116	; 0x74
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003eda:	2300      	movs	r3, #0
 8003edc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	781b      	ldrb	r3, [r3, #0]
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	4413      	add	r3, r2
 8003eea:	881b      	ldrh	r3, [r3, #0]
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003ef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ef6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	78db      	ldrb	r3, [r3, #3]
 8003efe:	2b03      	cmp	r3, #3
 8003f00:	d81f      	bhi.n	8003f42 <USB_ActivateEndpoint+0x72>
 8003f02:	a201      	add	r2, pc, #4	; (adr r2, 8003f08 <USB_ActivateEndpoint+0x38>)
 8003f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f08:	08003f19 	.word	0x08003f19
 8003f0c:	08003f35 	.word	0x08003f35
 8003f10:	08003f4b 	.word	0x08003f4b
 8003f14:	08003f27 	.word	0x08003f27
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003f18:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003f1c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f20:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8003f24:	e012      	b.n	8003f4c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003f26:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003f2a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003f2e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8003f32:	e00b      	b.n	8003f4c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003f34:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003f38:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f3c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8003f40:	e004      	b.n	8003f4c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8003f48:	e000      	b.n	8003f4c <USB_ActivateEndpoint+0x7c>
      break;
 8003f4a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	781b      	ldrb	r3, [r3, #0]
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	441a      	add	r2, r3
 8003f56:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003f5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	4413      	add	r3, r2
 8003f78:	881b      	ldrh	r3, [r3, #0]
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f84:	b29a      	uxth	r2, r3
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	781b      	ldrb	r3, [r3, #0]
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	441a      	add	r2, r3
 8003f9c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003fa0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fa4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fa8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	7b1b      	ldrb	r3, [r3, #12]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	f040 8178 	bne.w	80042ae <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	785b      	ldrb	r3, [r3, #1]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	f000 8084 	beq.w	80040d0 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	61bb      	str	r3, [r7, #24]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	69bb      	ldr	r3, [r7, #24]
 8003fd8:	4413      	add	r3, r2
 8003fda:	61bb      	str	r3, [r7, #24]
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	781b      	ldrb	r3, [r3, #0]
 8003fe0:	011a      	lsls	r2, r3, #4
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	4413      	add	r3, r2
 8003fe6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003fea:	617b      	str	r3, [r7, #20]
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	88db      	ldrh	r3, [r3, #6]
 8003ff0:	085b      	lsrs	r3, r3, #1
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	005b      	lsls	r3, r3, #1
 8003ff6:	b29a      	uxth	r2, r3
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	781b      	ldrb	r3, [r3, #0]
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	4413      	add	r3, r2
 8004006:	881b      	ldrh	r3, [r3, #0]
 8004008:	827b      	strh	r3, [r7, #18]
 800400a:	8a7b      	ldrh	r3, [r7, #18]
 800400c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004010:	2b00      	cmp	r3, #0
 8004012:	d01b      	beq.n	800404c <USB_ActivateEndpoint+0x17c>
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	781b      	ldrb	r3, [r3, #0]
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	4413      	add	r3, r2
 800401e:	881b      	ldrh	r3, [r3, #0]
 8004020:	b29b      	uxth	r3, r3
 8004022:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800402a:	823b      	strh	r3, [r7, #16]
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	781b      	ldrb	r3, [r3, #0]
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	441a      	add	r2, r3
 8004036:	8a3b      	ldrh	r3, [r7, #16]
 8004038:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800403c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004040:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004044:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004048:	b29b      	uxth	r3, r3
 800404a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	78db      	ldrb	r3, [r3, #3]
 8004050:	2b01      	cmp	r3, #1
 8004052:	d020      	beq.n	8004096 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	781b      	ldrb	r3, [r3, #0]
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	4413      	add	r3, r2
 800405e:	881b      	ldrh	r3, [r3, #0]
 8004060:	b29b      	uxth	r3, r3
 8004062:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004066:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800406a:	81bb      	strh	r3, [r7, #12]
 800406c:	89bb      	ldrh	r3, [r7, #12]
 800406e:	f083 0320 	eor.w	r3, r3, #32
 8004072:	81bb      	strh	r3, [r7, #12]
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	781b      	ldrb	r3, [r3, #0]
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	441a      	add	r2, r3
 800407e:	89bb      	ldrh	r3, [r7, #12]
 8004080:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004084:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004088:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800408c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004090:	b29b      	uxth	r3, r3
 8004092:	8013      	strh	r3, [r2, #0]
 8004094:	e2d5      	b.n	8004642 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	781b      	ldrb	r3, [r3, #0]
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	4413      	add	r3, r2
 80040a0:	881b      	ldrh	r3, [r3, #0]
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040ac:	81fb      	strh	r3, [r7, #14]
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	441a      	add	r2, r3
 80040b8:	89fb      	ldrh	r3, [r7, #14]
 80040ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	8013      	strh	r3, [r2, #0]
 80040ce:	e2b8      	b.n	8004642 <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	633b      	str	r3, [r7, #48]	; 0x30
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040da:	b29b      	uxth	r3, r3
 80040dc:	461a      	mov	r2, r3
 80040de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e0:	4413      	add	r3, r2
 80040e2:	633b      	str	r3, [r7, #48]	; 0x30
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	011a      	lsls	r2, r3, #4
 80040ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ec:	4413      	add	r3, r2
 80040ee:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80040f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	88db      	ldrh	r3, [r3, #6]
 80040f8:	085b      	lsrs	r3, r3, #1
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	005b      	lsls	r3, r3, #1
 80040fe:	b29a      	uxth	r2, r3
 8004100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004102:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	62bb      	str	r3, [r7, #40]	; 0x28
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800410e:	b29b      	uxth	r3, r3
 8004110:	461a      	mov	r2, r3
 8004112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004114:	4413      	add	r3, r2
 8004116:	62bb      	str	r3, [r7, #40]	; 0x28
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	011a      	lsls	r2, r3, #4
 800411e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004120:	4413      	add	r3, r2
 8004122:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004126:	627b      	str	r3, [r7, #36]	; 0x24
 8004128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412a:	881b      	ldrh	r3, [r3, #0]
 800412c:	b29b      	uxth	r3, r3
 800412e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004132:	b29a      	uxth	r2, r3
 8004134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004136:	801a      	strh	r2, [r3, #0]
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	691b      	ldr	r3, [r3, #16]
 800413c:	2b3e      	cmp	r3, #62	; 0x3e
 800413e:	d91d      	bls.n	800417c <USB_ActivateEndpoint+0x2ac>
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	691b      	ldr	r3, [r3, #16]
 8004144:	095b      	lsrs	r3, r3, #5
 8004146:	66bb      	str	r3, [r7, #104]	; 0x68
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	691b      	ldr	r3, [r3, #16]
 800414c:	f003 031f 	and.w	r3, r3, #31
 8004150:	2b00      	cmp	r3, #0
 8004152:	d102      	bne.n	800415a <USB_ActivateEndpoint+0x28a>
 8004154:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004156:	3b01      	subs	r3, #1
 8004158:	66bb      	str	r3, [r7, #104]	; 0x68
 800415a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415c:	881b      	ldrh	r3, [r3, #0]
 800415e:	b29a      	uxth	r2, r3
 8004160:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004162:	b29b      	uxth	r3, r3
 8004164:	029b      	lsls	r3, r3, #10
 8004166:	b29b      	uxth	r3, r3
 8004168:	4313      	orrs	r3, r2
 800416a:	b29b      	uxth	r3, r3
 800416c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004170:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004174:	b29a      	uxth	r2, r3
 8004176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004178:	801a      	strh	r2, [r3, #0]
 800417a:	e026      	b.n	80041ca <USB_ActivateEndpoint+0x2fa>
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	691b      	ldr	r3, [r3, #16]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d10a      	bne.n	800419a <USB_ActivateEndpoint+0x2ca>
 8004184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004186:	881b      	ldrh	r3, [r3, #0]
 8004188:	b29b      	uxth	r3, r3
 800418a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800418e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004192:	b29a      	uxth	r2, r3
 8004194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004196:	801a      	strh	r2, [r3, #0]
 8004198:	e017      	b.n	80041ca <USB_ActivateEndpoint+0x2fa>
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	691b      	ldr	r3, [r3, #16]
 800419e:	085b      	lsrs	r3, r3, #1
 80041a0:	66bb      	str	r3, [r7, #104]	; 0x68
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	691b      	ldr	r3, [r3, #16]
 80041a6:	f003 0301 	and.w	r3, r3, #1
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d002      	beq.n	80041b4 <USB_ActivateEndpoint+0x2e4>
 80041ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80041b0:	3301      	adds	r3, #1
 80041b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80041b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b6:	881b      	ldrh	r3, [r3, #0]
 80041b8:	b29a      	uxth	r2, r3
 80041ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80041bc:	b29b      	uxth	r3, r3
 80041be:	029b      	lsls	r3, r3, #10
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	4313      	orrs	r3, r2
 80041c4:	b29a      	uxth	r2, r3
 80041c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	781b      	ldrb	r3, [r3, #0]
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	4413      	add	r3, r2
 80041d4:	881b      	ldrh	r3, [r3, #0]
 80041d6:	847b      	strh	r3, [r7, #34]	; 0x22
 80041d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80041da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d01b      	beq.n	800421a <USB_ActivateEndpoint+0x34a>
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	4413      	add	r3, r2
 80041ec:	881b      	ldrh	r3, [r3, #0]
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041f8:	843b      	strh	r3, [r7, #32]
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	441a      	add	r2, r3
 8004204:	8c3b      	ldrh	r3, [r7, #32]
 8004206:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800420a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800420e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004212:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004216:	b29b      	uxth	r3, r3
 8004218:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	781b      	ldrb	r3, [r3, #0]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d124      	bne.n	800426c <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	4413      	add	r3, r2
 800422c:	881b      	ldrh	r3, [r3, #0]
 800422e:	b29b      	uxth	r3, r3
 8004230:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004234:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004238:	83bb      	strh	r3, [r7, #28]
 800423a:	8bbb      	ldrh	r3, [r7, #28]
 800423c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004240:	83bb      	strh	r3, [r7, #28]
 8004242:	8bbb      	ldrh	r3, [r7, #28]
 8004244:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004248:	83bb      	strh	r3, [r7, #28]
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	441a      	add	r2, r3
 8004254:	8bbb      	ldrh	r3, [r7, #28]
 8004256:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800425a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800425e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004262:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004266:	b29b      	uxth	r3, r3
 8004268:	8013      	strh	r3, [r2, #0]
 800426a:	e1ea      	b.n	8004642 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	781b      	ldrb	r3, [r3, #0]
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	4413      	add	r3, r2
 8004276:	881b      	ldrh	r3, [r3, #0]
 8004278:	b29b      	uxth	r3, r3
 800427a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800427e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004282:	83fb      	strh	r3, [r7, #30]
 8004284:	8bfb      	ldrh	r3, [r7, #30]
 8004286:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800428a:	83fb      	strh	r3, [r7, #30]
 800428c:	687a      	ldr	r2, [r7, #4]
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	781b      	ldrb	r3, [r3, #0]
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	441a      	add	r2, r3
 8004296:	8bfb      	ldrh	r3, [r7, #30]
 8004298:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800429c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	8013      	strh	r3, [r2, #0]
 80042ac:	e1c9      	b.n	8004642 <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	78db      	ldrb	r3, [r3, #3]
 80042b2:	2b02      	cmp	r3, #2
 80042b4:	d11e      	bne.n	80042f4 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	781b      	ldrb	r3, [r3, #0]
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	4413      	add	r3, r2
 80042c0:	881b      	ldrh	r3, [r3, #0]
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042cc:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	441a      	add	r2, r3
 80042da:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80042de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042e6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80042ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	8013      	strh	r3, [r2, #0]
 80042f2:	e01d      	b.n	8004330 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	781b      	ldrb	r3, [r3, #0]
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	4413      	add	r3, r2
 80042fe:	881b      	ldrh	r3, [r3, #0]
 8004300:	b29b      	uxth	r3, r3
 8004302:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004306:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800430a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	441a      	add	r2, r3
 8004318:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800431c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004320:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004324:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004328:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800432c:	b29b      	uxth	r3, r3
 800432e:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800433a:	b29b      	uxth	r3, r3
 800433c:	461a      	mov	r2, r3
 800433e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004340:	4413      	add	r3, r2
 8004342:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	011a      	lsls	r2, r3, #4
 800434a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800434c:	4413      	add	r3, r2
 800434e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004352:	65bb      	str	r3, [r7, #88]	; 0x58
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	891b      	ldrh	r3, [r3, #8]
 8004358:	085b      	lsrs	r3, r3, #1
 800435a:	b29b      	uxth	r3, r3
 800435c:	005b      	lsls	r3, r3, #1
 800435e:	b29a      	uxth	r2, r3
 8004360:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004362:	801a      	strh	r2, [r3, #0]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	657b      	str	r3, [r7, #84]	; 0x54
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800436e:	b29b      	uxth	r3, r3
 8004370:	461a      	mov	r2, r3
 8004372:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004374:	4413      	add	r3, r2
 8004376:	657b      	str	r3, [r7, #84]	; 0x54
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	011a      	lsls	r2, r3, #4
 800437e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004380:	4413      	add	r3, r2
 8004382:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004386:	653b      	str	r3, [r7, #80]	; 0x50
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	895b      	ldrh	r3, [r3, #10]
 800438c:	085b      	lsrs	r3, r3, #1
 800438e:	b29b      	uxth	r3, r3
 8004390:	005b      	lsls	r3, r3, #1
 8004392:	b29a      	uxth	r2, r3
 8004394:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004396:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	785b      	ldrb	r3, [r3, #1]
 800439c:	2b00      	cmp	r3, #0
 800439e:	f040 8093 	bne.w	80044c8 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	4413      	add	r3, r2
 80043ac:	881b      	ldrh	r3, [r3, #0]
 80043ae:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80043b2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80043b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d01b      	beq.n	80043f6 <USB_ActivateEndpoint+0x526>
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	4413      	add	r3, r2
 80043c8:	881b      	ldrh	r3, [r3, #0]
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043d4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	441a      	add	r2, r3
 80043e0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80043e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80043ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	4413      	add	r3, r2
 8004400:	881b      	ldrh	r3, [r3, #0]
 8004402:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004404:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800440a:	2b00      	cmp	r3, #0
 800440c:	d01b      	beq.n	8004446 <USB_ActivateEndpoint+0x576>
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	4413      	add	r3, r2
 8004418:	881b      	ldrh	r3, [r3, #0]
 800441a:	b29b      	uxth	r3, r3
 800441c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004420:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004424:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	781b      	ldrb	r3, [r3, #0]
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	441a      	add	r2, r3
 8004430:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004432:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004436:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800443a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800443e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004442:	b29b      	uxth	r3, r3
 8004444:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	4413      	add	r3, r2
 8004450:	881b      	ldrh	r3, [r3, #0]
 8004452:	b29b      	uxth	r3, r3
 8004454:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004458:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800445c:	873b      	strh	r3, [r7, #56]	; 0x38
 800445e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004460:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004464:	873b      	strh	r3, [r7, #56]	; 0x38
 8004466:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004468:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800446c:	873b      	strh	r3, [r7, #56]	; 0x38
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	441a      	add	r2, r3
 8004478:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800447a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800447e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004482:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004486:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800448a:	b29b      	uxth	r3, r3
 800448c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	781b      	ldrb	r3, [r3, #0]
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	4413      	add	r3, r2
 8004498:	881b      	ldrh	r3, [r3, #0]
 800449a:	b29b      	uxth	r3, r3
 800449c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044a4:	86fb      	strh	r3, [r7, #54]	; 0x36
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	441a      	add	r2, r3
 80044b0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80044b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	8013      	strh	r3, [r2, #0]
 80044c6:	e0bc      	b.n	8004642 <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	781b      	ldrb	r3, [r3, #0]
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	4413      	add	r3, r2
 80044d2:	881b      	ldrh	r3, [r3, #0]
 80044d4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80044d8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80044dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d01d      	beq.n	8004520 <USB_ActivateEndpoint+0x650>
 80044e4:	687a      	ldr	r2, [r7, #4]
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	4413      	add	r3, r2
 80044ee:	881b      	ldrh	r3, [r3, #0]
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044fa:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	781b      	ldrb	r3, [r3, #0]
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	441a      	add	r2, r3
 8004508:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800450c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004510:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004514:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004518:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800451c:	b29b      	uxth	r3, r3
 800451e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	4413      	add	r3, r2
 800452a:	881b      	ldrh	r3, [r3, #0]
 800452c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004530:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004538:	2b00      	cmp	r3, #0
 800453a:	d01d      	beq.n	8004578 <USB_ActivateEndpoint+0x6a8>
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	781b      	ldrb	r3, [r3, #0]
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	4413      	add	r3, r2
 8004546:	881b      	ldrh	r3, [r3, #0]
 8004548:	b29b      	uxth	r3, r3
 800454a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800454e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004552:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	441a      	add	r2, r3
 8004560:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004564:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004568:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800456c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004570:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004574:	b29b      	uxth	r3, r3
 8004576:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	78db      	ldrb	r3, [r3, #3]
 800457c:	2b01      	cmp	r3, #1
 800457e:	d024      	beq.n	80045ca <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	781b      	ldrb	r3, [r3, #0]
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	4413      	add	r3, r2
 800458a:	881b      	ldrh	r3, [r3, #0]
 800458c:	b29b      	uxth	r3, r3
 800458e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004592:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004596:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800459a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800459e:	f083 0320 	eor.w	r3, r3, #32
 80045a2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	441a      	add	r2, r3
 80045b0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80045b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	8013      	strh	r3, [r2, #0]
 80045c8:	e01d      	b.n	8004606 <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	781b      	ldrb	r3, [r3, #0]
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	4413      	add	r3, r2
 80045d4:	881b      	ldrh	r3, [r3, #0]
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045e0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	781b      	ldrb	r3, [r3, #0]
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	441a      	add	r2, r3
 80045ee:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80045f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004602:	b29b      	uxth	r3, r3
 8004604:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	781b      	ldrb	r3, [r3, #0]
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	4413      	add	r3, r2
 8004610:	881b      	ldrh	r3, [r3, #0]
 8004612:	b29b      	uxth	r3, r3
 8004614:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004618:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800461c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004620:	687a      	ldr	r2, [r7, #4]
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	441a      	add	r2, r3
 800462a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800462e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004632:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004636:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800463a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800463e:	b29b      	uxth	r3, r3
 8004640:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004642:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8004646:	4618      	mov	r0, r3
 8004648:	3774      	adds	r7, #116	; 0x74
 800464a:	46bd      	mov	sp, r7
 800464c:	bc80      	pop	{r7}
 800464e:	4770      	bx	lr

08004650 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004650:	b480      	push	{r7}
 8004652:	b08d      	sub	sp, #52	; 0x34
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	7b1b      	ldrb	r3, [r3, #12]
 800465e:	2b00      	cmp	r3, #0
 8004660:	f040 808e 	bne.w	8004780 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	785b      	ldrb	r3, [r3, #1]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d044      	beq.n	80046f6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	4413      	add	r3, r2
 8004676:	881b      	ldrh	r3, [r3, #0]
 8004678:	81bb      	strh	r3, [r7, #12]
 800467a:	89bb      	ldrh	r3, [r7, #12]
 800467c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004680:	2b00      	cmp	r3, #0
 8004682:	d01b      	beq.n	80046bc <USB_DeactivateEndpoint+0x6c>
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	781b      	ldrb	r3, [r3, #0]
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	4413      	add	r3, r2
 800468e:	881b      	ldrh	r3, [r3, #0]
 8004690:	b29b      	uxth	r3, r3
 8004692:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800469a:	817b      	strh	r3, [r7, #10]
 800469c:	687a      	ldr	r2, [r7, #4]
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	781b      	ldrb	r3, [r3, #0]
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	441a      	add	r2, r3
 80046a6:	897b      	ldrh	r3, [r7, #10]
 80046a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046b4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	4413      	add	r3, r2
 80046c6:	881b      	ldrh	r3, [r3, #0]
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046d2:	813b      	strh	r3, [r7, #8]
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	781b      	ldrb	r3, [r3, #0]
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	441a      	add	r2, r3
 80046de:	893b      	ldrh	r3, [r7, #8]
 80046e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	8013      	strh	r3, [r2, #0]
 80046f4:	e192      	b.n	8004a1c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	009b      	lsls	r3, r3, #2
 80046fe:	4413      	add	r3, r2
 8004700:	881b      	ldrh	r3, [r3, #0]
 8004702:	827b      	strh	r3, [r7, #18]
 8004704:	8a7b      	ldrh	r3, [r7, #18]
 8004706:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800470a:	2b00      	cmp	r3, #0
 800470c:	d01b      	beq.n	8004746 <USB_DeactivateEndpoint+0xf6>
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	4413      	add	r3, r2
 8004718:	881b      	ldrh	r3, [r3, #0]
 800471a:	b29b      	uxth	r3, r3
 800471c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004720:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004724:	823b      	strh	r3, [r7, #16]
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	781b      	ldrb	r3, [r3, #0]
 800472c:	009b      	lsls	r3, r3, #2
 800472e:	441a      	add	r2, r3
 8004730:	8a3b      	ldrh	r3, [r7, #16]
 8004732:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004736:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800473a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800473e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004742:	b29b      	uxth	r3, r3
 8004744:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	4413      	add	r3, r2
 8004750:	881b      	ldrh	r3, [r3, #0]
 8004752:	b29b      	uxth	r3, r3
 8004754:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004758:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800475c:	81fb      	strh	r3, [r7, #14]
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	009b      	lsls	r3, r3, #2
 8004766:	441a      	add	r2, r3
 8004768:	89fb      	ldrh	r3, [r7, #14]
 800476a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800476e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004772:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004776:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800477a:	b29b      	uxth	r3, r3
 800477c:	8013      	strh	r3, [r2, #0]
 800477e:	e14d      	b.n	8004a1c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	785b      	ldrb	r3, [r3, #1]
 8004784:	2b00      	cmp	r3, #0
 8004786:	f040 80a5 	bne.w	80048d4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	781b      	ldrb	r3, [r3, #0]
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	4413      	add	r3, r2
 8004794:	881b      	ldrh	r3, [r3, #0]
 8004796:	843b      	strh	r3, [r7, #32]
 8004798:	8c3b      	ldrh	r3, [r7, #32]
 800479a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d01b      	beq.n	80047da <USB_DeactivateEndpoint+0x18a>
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	781b      	ldrb	r3, [r3, #0]
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	4413      	add	r3, r2
 80047ac:	881b      	ldrh	r3, [r3, #0]
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047b8:	83fb      	strh	r3, [r7, #30]
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	441a      	add	r2, r3
 80047c4:	8bfb      	ldrh	r3, [r7, #30]
 80047c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80047d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	009b      	lsls	r3, r3, #2
 80047e2:	4413      	add	r3, r2
 80047e4:	881b      	ldrh	r3, [r3, #0]
 80047e6:	83bb      	strh	r3, [r7, #28]
 80047e8:	8bbb      	ldrh	r3, [r7, #28]
 80047ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d01b      	beq.n	800482a <USB_DeactivateEndpoint+0x1da>
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	781b      	ldrb	r3, [r3, #0]
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	4413      	add	r3, r2
 80047fc:	881b      	ldrh	r3, [r3, #0]
 80047fe:	b29b      	uxth	r3, r3
 8004800:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004804:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004808:	837b      	strh	r3, [r7, #26]
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	781b      	ldrb	r3, [r3, #0]
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	441a      	add	r2, r3
 8004814:	8b7b      	ldrh	r3, [r7, #26]
 8004816:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800481a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800481e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004822:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004826:	b29b      	uxth	r3, r3
 8004828:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	4413      	add	r3, r2
 8004834:	881b      	ldrh	r3, [r3, #0]
 8004836:	b29b      	uxth	r3, r3
 8004838:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800483c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004840:	833b      	strh	r3, [r7, #24]
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	009b      	lsls	r3, r3, #2
 800484a:	441a      	add	r2, r3
 800484c:	8b3b      	ldrh	r3, [r7, #24]
 800484e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004852:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004856:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800485a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800485e:	b29b      	uxth	r3, r3
 8004860:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	781b      	ldrb	r3, [r3, #0]
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	4413      	add	r3, r2
 800486c:	881b      	ldrh	r3, [r3, #0]
 800486e:	b29b      	uxth	r3, r3
 8004870:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004874:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004878:	82fb      	strh	r3, [r7, #22]
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	009b      	lsls	r3, r3, #2
 8004882:	441a      	add	r2, r3
 8004884:	8afb      	ldrh	r3, [r7, #22]
 8004886:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800488a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800488e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004892:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004896:	b29b      	uxth	r3, r3
 8004898:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	009b      	lsls	r3, r3, #2
 80048a2:	4413      	add	r3, r2
 80048a4:	881b      	ldrh	r3, [r3, #0]
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048b0:	82bb      	strh	r3, [r7, #20]
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	441a      	add	r2, r3
 80048bc:	8abb      	ldrh	r3, [r7, #20]
 80048be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	8013      	strh	r3, [r2, #0]
 80048d2:	e0a3      	b.n	8004a1c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	781b      	ldrb	r3, [r3, #0]
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	4413      	add	r3, r2
 80048de:	881b      	ldrh	r3, [r3, #0]
 80048e0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80048e2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80048e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d01b      	beq.n	8004924 <USB_DeactivateEndpoint+0x2d4>
 80048ec:	687a      	ldr	r2, [r7, #4]
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	781b      	ldrb	r3, [r3, #0]
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	4413      	add	r3, r2
 80048f6:	881b      	ldrh	r3, [r3, #0]
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004902:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	441a      	add	r2, r3
 800490e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004910:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004914:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004918:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800491c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004920:	b29b      	uxth	r3, r3
 8004922:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	781b      	ldrb	r3, [r3, #0]
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	4413      	add	r3, r2
 800492e:	881b      	ldrh	r3, [r3, #0]
 8004930:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004932:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004938:	2b00      	cmp	r3, #0
 800493a:	d01b      	beq.n	8004974 <USB_DeactivateEndpoint+0x324>
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	781b      	ldrb	r3, [r3, #0]
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	4413      	add	r3, r2
 8004946:	881b      	ldrh	r3, [r3, #0]
 8004948:	b29b      	uxth	r3, r3
 800494a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800494e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004952:	853b      	strh	r3, [r7, #40]	; 0x28
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	781b      	ldrb	r3, [r3, #0]
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	441a      	add	r2, r3
 800495e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004960:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004964:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004968:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800496c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004970:	b29b      	uxth	r3, r3
 8004972:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	781b      	ldrb	r3, [r3, #0]
 800497a:	009b      	lsls	r3, r3, #2
 800497c:	4413      	add	r3, r2
 800497e:	881b      	ldrh	r3, [r3, #0]
 8004980:	b29b      	uxth	r3, r3
 8004982:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004986:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800498a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	781b      	ldrb	r3, [r3, #0]
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	441a      	add	r2, r3
 8004996:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004998:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800499c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80049a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	781b      	ldrb	r3, [r3, #0]
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	4413      	add	r3, r2
 80049b6:	881b      	ldrh	r3, [r3, #0]
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049c2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	781b      	ldrb	r3, [r3, #0]
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	441a      	add	r2, r3
 80049ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80049d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	781b      	ldrb	r3, [r3, #0]
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	4413      	add	r3, r2
 80049ee:	881b      	ldrh	r3, [r3, #0]
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049fa:	847b      	strh	r3, [r7, #34]	; 0x22
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	781b      	ldrb	r3, [r3, #0]
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	441a      	add	r2, r3
 8004a06:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004a08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004a1c:	2300      	movs	r3, #0
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3734      	adds	r7, #52	; 0x34
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bc80      	pop	{r7}
 8004a26:	4770      	bx	lr

08004a28 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b0c2      	sub	sp, #264	; 0x108
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004a36:	6018      	str	r0, [r3, #0]
 8004a38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a40:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004a42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	785b      	ldrb	r3, [r3, #1]
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	f040 86b7 	bne.w	80057c2 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004a54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	699a      	ldr	r2, [r3, #24]
 8004a60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	691b      	ldr	r3, [r3, #16]
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d908      	bls.n	8004a82 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004a70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	691b      	ldr	r3, [r3, #16]
 8004a7c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004a80:	e007      	b.n	8004a92 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8004a82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	699b      	ldr	r3, [r3, #24]
 8004a8e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004a92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	7b1b      	ldrb	r3, [r3, #12]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d13a      	bne.n	8004b18 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004aa2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004aa6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	6959      	ldr	r1, [r3, #20]
 8004aae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ab2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	88da      	ldrh	r2, [r3, #6]
 8004aba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004ac4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004ac8:	6800      	ldr	r0, [r0, #0]
 8004aca:	f001 fc9c 	bl	8006406 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004ace:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ad2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	613b      	str	r3, [r7, #16]
 8004ada:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ade:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	461a      	mov	r2, r3
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	4413      	add	r3, r2
 8004af0:	613b      	str	r3, [r7, #16]
 8004af2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004af6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	011a      	lsls	r2, r3, #4
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	4413      	add	r3, r2
 8004b04:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004b08:	60fb      	str	r3, [r7, #12]
 8004b0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b0e:	b29a      	uxth	r2, r3
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	801a      	strh	r2, [r3, #0]
 8004b14:	f000 be1f 	b.w	8005756 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004b18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	78db      	ldrb	r3, [r3, #3]
 8004b24:	2b02      	cmp	r3, #2
 8004b26:	f040 8462 	bne.w	80053ee <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004b2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	6a1a      	ldr	r2, [r3, #32]
 8004b36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	691b      	ldr	r3, [r3, #16]
 8004b42:	429a      	cmp	r2, r3
 8004b44:	f240 83df 	bls.w	8005306 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004b48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b4c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	4413      	add	r3, r2
 8004b62:	881b      	ldrh	r3, [r3, #0]
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b6e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8004b72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	781b      	ldrb	r3, [r3, #0]
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	441a      	add	r2, r3
 8004b8c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004b90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b98:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004b9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004ba4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ba8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	6a1a      	ldr	r2, [r3, #32]
 8004bb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004bb4:	1ad2      	subs	r2, r2, r3
 8004bb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004bba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004bc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004bc6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004bd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	781b      	ldrb	r3, [r3, #0]
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	4413      	add	r3, r2
 8004bdc:	881b      	ldrh	r3, [r3, #0]
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	f000 81c7 	beq.w	8004f78 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004bea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004bee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	633b      	str	r3, [r7, #48]	; 0x30
 8004bf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004bfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	785b      	ldrb	r3, [r3, #1]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d177      	bne.n	8004cf6 <USB_EPStartXfer+0x2ce>
 8004c06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	461a      	mov	r2, r3
 8004c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c26:	4413      	add	r3, r2
 8004c28:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	011a      	lsls	r2, r3, #4
 8004c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c3a:	4413      	add	r3, r2
 8004c3c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004c40:	627b      	str	r3, [r7, #36]	; 0x24
 8004c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c44:	881b      	ldrh	r3, [r3, #0]
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c4c:	b29a      	uxth	r2, r3
 8004c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c50:	801a      	strh	r2, [r3, #0]
 8004c52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c56:	2b3e      	cmp	r3, #62	; 0x3e
 8004c58:	d921      	bls.n	8004c9e <USB_EPStartXfer+0x276>
 8004c5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c5e:	095b      	lsrs	r3, r3, #5
 8004c60:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004c64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c68:	f003 031f 	and.w	r3, r3, #31
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d104      	bne.n	8004c7a <USB_EPStartXfer+0x252>
 8004c70:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004c74:	3b01      	subs	r3, #1
 8004c76:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7c:	881b      	ldrh	r3, [r3, #0]
 8004c7e:	b29a      	uxth	r2, r3
 8004c80:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	029b      	lsls	r3, r3, #10
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c96:	b29a      	uxth	r2, r3
 8004c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9a:	801a      	strh	r2, [r3, #0]
 8004c9c:	e050      	b.n	8004d40 <USB_EPStartXfer+0x318>
 8004c9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d10a      	bne.n	8004cbc <USB_EPStartXfer+0x294>
 8004ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca8:	881b      	ldrh	r3, [r3, #0]
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cb4:	b29a      	uxth	r2, r3
 8004cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb8:	801a      	strh	r2, [r3, #0]
 8004cba:	e041      	b.n	8004d40 <USB_EPStartXfer+0x318>
 8004cbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cc0:	085b      	lsrs	r3, r3, #1
 8004cc2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004cc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cca:	f003 0301 	and.w	r3, r3, #1
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d004      	beq.n	8004cdc <USB_EPStartXfer+0x2b4>
 8004cd2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004cd6:	3301      	adds	r3, #1
 8004cd8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cde:	881b      	ldrh	r3, [r3, #0]
 8004ce0:	b29a      	uxth	r2, r3
 8004ce2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	029b      	lsls	r3, r3, #10
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	4313      	orrs	r3, r2
 8004cee:	b29a      	uxth	r2, r3
 8004cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf2:	801a      	strh	r2, [r3, #0]
 8004cf4:	e024      	b.n	8004d40 <USB_EPStartXfer+0x318>
 8004cf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004cfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	785b      	ldrb	r3, [r3, #1]
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d11c      	bne.n	8004d40 <USB_EPStartXfer+0x318>
 8004d06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	461a      	mov	r2, r3
 8004d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d1a:	4413      	add	r3, r2
 8004d1c:	633b      	str	r3, [r7, #48]	; 0x30
 8004d1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	781b      	ldrb	r3, [r3, #0]
 8004d2a:	011a      	lsls	r2, r3, #4
 8004d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d2e:	4413      	add	r3, r2
 8004d30:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004d34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d3a:	b29a      	uxth	r2, r3
 8004d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d3e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004d40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	895b      	ldrh	r3, [r3, #10]
 8004d4c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004d50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	6959      	ldr	r1, [r3, #20]
 8004d5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004d66:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004d6a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004d6e:	6800      	ldr	r0, [r0, #0]
 8004d70:	f001 fb49 	bl	8006406 <USB_WritePMA>
            ep->xfer_buff += len;
 8004d74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	695a      	ldr	r2, [r3, #20]
 8004d80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d84:	441a      	add	r2, r3
 8004d86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004d92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	6a1a      	ldr	r2, [r3, #32]
 8004d9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004da2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	691b      	ldr	r3, [r3, #16]
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d90f      	bls.n	8004dce <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8004dae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004db2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	6a1a      	ldr	r2, [r3, #32]
 8004dba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004dbe:	1ad2      	subs	r2, r2, r3
 8004dc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004dc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	621a      	str	r2, [r3, #32]
 8004dcc:	e00e      	b.n	8004dec <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8004dce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004dd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	6a1b      	ldr	r3, [r3, #32]
 8004dda:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8004dde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004de2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	2200      	movs	r2, #0
 8004dea:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004dec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004df0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	785b      	ldrb	r3, [r3, #1]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d177      	bne.n	8004eec <USB_EPStartXfer+0x4c4>
 8004dfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e00:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	61bb      	str	r3, [r7, #24]
 8004e08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e0c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	461a      	mov	r2, r3
 8004e1a:	69bb      	ldr	r3, [r7, #24]
 8004e1c:	4413      	add	r3, r2
 8004e1e:	61bb      	str	r3, [r7, #24]
 8004e20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	011a      	lsls	r2, r3, #4
 8004e2e:	69bb      	ldr	r3, [r7, #24]
 8004e30:	4413      	add	r3, r2
 8004e32:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004e36:	617b      	str	r3, [r7, #20]
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	881b      	ldrh	r3, [r3, #0]
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e42:	b29a      	uxth	r2, r3
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	801a      	strh	r2, [r3, #0]
 8004e48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e4c:	2b3e      	cmp	r3, #62	; 0x3e
 8004e4e:	d921      	bls.n	8004e94 <USB_EPStartXfer+0x46c>
 8004e50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e54:	095b      	lsrs	r3, r3, #5
 8004e56:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004e5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e5e:	f003 031f 	and.w	r3, r3, #31
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d104      	bne.n	8004e70 <USB_EPStartXfer+0x448>
 8004e66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e6a:	3b01      	subs	r3, #1
 8004e6c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	881b      	ldrh	r3, [r3, #0]
 8004e74:	b29a      	uxth	r2, r3
 8004e76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	029b      	lsls	r3, r3, #10
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	4313      	orrs	r3, r2
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e8c:	b29a      	uxth	r2, r3
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	801a      	strh	r2, [r3, #0]
 8004e92:	e056      	b.n	8004f42 <USB_EPStartXfer+0x51a>
 8004e94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d10a      	bne.n	8004eb2 <USB_EPStartXfer+0x48a>
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	881b      	ldrh	r3, [r3, #0]
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ea6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004eaa:	b29a      	uxth	r2, r3
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	801a      	strh	r2, [r3, #0]
 8004eb0:	e047      	b.n	8004f42 <USB_EPStartXfer+0x51a>
 8004eb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004eb6:	085b      	lsrs	r3, r3, #1
 8004eb8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004ebc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ec0:	f003 0301 	and.w	r3, r3, #1
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d004      	beq.n	8004ed2 <USB_EPStartXfer+0x4aa>
 8004ec8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ecc:	3301      	adds	r3, #1
 8004ece:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	881b      	ldrh	r3, [r3, #0]
 8004ed6:	b29a      	uxth	r2, r3
 8004ed8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	029b      	lsls	r3, r3, #10
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	b29a      	uxth	r2, r3
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	801a      	strh	r2, [r3, #0]
 8004eea:	e02a      	b.n	8004f42 <USB_EPStartXfer+0x51a>
 8004eec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ef0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	785b      	ldrb	r3, [r3, #1]
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d122      	bne.n	8004f42 <USB_EPStartXfer+0x51a>
 8004efc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f00:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	623b      	str	r3, [r7, #32]
 8004f08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f0c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	461a      	mov	r2, r3
 8004f1a:	6a3b      	ldr	r3, [r7, #32]
 8004f1c:	4413      	add	r3, r2
 8004f1e:	623b      	str	r3, [r7, #32]
 8004f20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	781b      	ldrb	r3, [r3, #0]
 8004f2c:	011a      	lsls	r2, r3, #4
 8004f2e:	6a3b      	ldr	r3, [r7, #32]
 8004f30:	4413      	add	r3, r2
 8004f32:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004f36:	61fb      	str	r3, [r7, #28]
 8004f38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f3c:	b29a      	uxth	r2, r3
 8004f3e:	69fb      	ldr	r3, [r7, #28]
 8004f40:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004f42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	891b      	ldrh	r3, [r3, #8]
 8004f4e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004f52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	6959      	ldr	r1, [r3, #20]
 8004f5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004f68:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004f6c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004f70:	6800      	ldr	r0, [r0, #0]
 8004f72:	f001 fa48 	bl	8006406 <USB_WritePMA>
 8004f76:	e3ee      	b.n	8005756 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004f78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	785b      	ldrb	r3, [r3, #1]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d177      	bne.n	8005078 <USB_EPStartXfer+0x650>
 8004f88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f8c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f98:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fa8:	4413      	add	r3, r2
 8004faa:	64bb      	str	r3, [r7, #72]	; 0x48
 8004fac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	011a      	lsls	r2, r3, #4
 8004fba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fbc:	4413      	add	r3, r2
 8004fbe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004fc2:	647b      	str	r3, [r7, #68]	; 0x44
 8004fc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fc6:	881b      	ldrh	r3, [r3, #0]
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004fce:	b29a      	uxth	r2, r3
 8004fd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fd2:	801a      	strh	r2, [r3, #0]
 8004fd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fd8:	2b3e      	cmp	r3, #62	; 0x3e
 8004fda:	d921      	bls.n	8005020 <USB_EPStartXfer+0x5f8>
 8004fdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fe0:	095b      	lsrs	r3, r3, #5
 8004fe2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004fe6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fea:	f003 031f 	and.w	r3, r3, #31
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d104      	bne.n	8004ffc <USB_EPStartXfer+0x5d4>
 8004ff2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004ff6:	3b01      	subs	r3, #1
 8004ff8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004ffc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ffe:	881b      	ldrh	r3, [r3, #0]
 8005000:	b29a      	uxth	r2, r3
 8005002:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005006:	b29b      	uxth	r3, r3
 8005008:	029b      	lsls	r3, r3, #10
 800500a:	b29b      	uxth	r3, r3
 800500c:	4313      	orrs	r3, r2
 800500e:	b29b      	uxth	r3, r3
 8005010:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005014:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005018:	b29a      	uxth	r2, r3
 800501a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800501c:	801a      	strh	r2, [r3, #0]
 800501e:	e056      	b.n	80050ce <USB_EPStartXfer+0x6a6>
 8005020:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005024:	2b00      	cmp	r3, #0
 8005026:	d10a      	bne.n	800503e <USB_EPStartXfer+0x616>
 8005028:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800502a:	881b      	ldrh	r3, [r3, #0]
 800502c:	b29b      	uxth	r3, r3
 800502e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005032:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005036:	b29a      	uxth	r2, r3
 8005038:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800503a:	801a      	strh	r2, [r3, #0]
 800503c:	e047      	b.n	80050ce <USB_EPStartXfer+0x6a6>
 800503e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005042:	085b      	lsrs	r3, r3, #1
 8005044:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005048:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800504c:	f003 0301 	and.w	r3, r3, #1
 8005050:	2b00      	cmp	r3, #0
 8005052:	d004      	beq.n	800505e <USB_EPStartXfer+0x636>
 8005054:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005058:	3301      	adds	r3, #1
 800505a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800505e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005060:	881b      	ldrh	r3, [r3, #0]
 8005062:	b29a      	uxth	r2, r3
 8005064:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005068:	b29b      	uxth	r3, r3
 800506a:	029b      	lsls	r3, r3, #10
 800506c:	b29b      	uxth	r3, r3
 800506e:	4313      	orrs	r3, r2
 8005070:	b29a      	uxth	r2, r3
 8005072:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005074:	801a      	strh	r2, [r3, #0]
 8005076:	e02a      	b.n	80050ce <USB_EPStartXfer+0x6a6>
 8005078:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800507c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	785b      	ldrb	r3, [r3, #1]
 8005084:	2b01      	cmp	r3, #1
 8005086:	d122      	bne.n	80050ce <USB_EPStartXfer+0x6a6>
 8005088:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800508c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	653b      	str	r3, [r7, #80]	; 0x50
 8005094:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005098:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	461a      	mov	r2, r3
 80050a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050a8:	4413      	add	r3, r2
 80050aa:	653b      	str	r3, [r7, #80]	; 0x50
 80050ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	011a      	lsls	r2, r3, #4
 80050ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050bc:	4413      	add	r3, r2
 80050be:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80050c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050c8:	b29a      	uxth	r2, r3
 80050ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050cc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80050ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	891b      	ldrh	r3, [r3, #8]
 80050da:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80050de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	6959      	ldr	r1, [r3, #20]
 80050ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80050f4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80050f8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80050fc:	6800      	ldr	r0, [r0, #0]
 80050fe:	f001 f982 	bl	8006406 <USB_WritePMA>
            ep->xfer_buff += len;
 8005102:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005106:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	695a      	ldr	r2, [r3, #20]
 800510e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005112:	441a      	add	r2, r3
 8005114:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005118:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005120:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005124:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	6a1a      	ldr	r2, [r3, #32]
 800512c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005130:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	691b      	ldr	r3, [r3, #16]
 8005138:	429a      	cmp	r2, r3
 800513a:	d90f      	bls.n	800515c <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800513c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005140:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	6a1a      	ldr	r2, [r3, #32]
 8005148:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800514c:	1ad2      	subs	r2, r2, r3
 800514e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005152:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	621a      	str	r2, [r3, #32]
 800515a:	e00e      	b.n	800517a <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800515c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005160:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	6a1b      	ldr	r3, [r3, #32]
 8005168:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800516c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005170:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	2200      	movs	r2, #0
 8005178:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800517a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800517e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	643b      	str	r3, [r7, #64]	; 0x40
 8005186:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800518a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	785b      	ldrb	r3, [r3, #1]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d177      	bne.n	8005286 <USB_EPStartXfer+0x85e>
 8005196:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800519a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80051a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	461a      	mov	r2, r3
 80051b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051b6:	4413      	add	r3, r2
 80051b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80051ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	781b      	ldrb	r3, [r3, #0]
 80051c6:	011a      	lsls	r2, r3, #4
 80051c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ca:	4413      	add	r3, r2
 80051cc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80051d0:	637b      	str	r3, [r7, #52]	; 0x34
 80051d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051d4:	881b      	ldrh	r3, [r3, #0]
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051dc:	b29a      	uxth	r2, r3
 80051de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051e0:	801a      	strh	r2, [r3, #0]
 80051e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051e6:	2b3e      	cmp	r3, #62	; 0x3e
 80051e8:	d921      	bls.n	800522e <USB_EPStartXfer+0x806>
 80051ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051ee:	095b      	lsrs	r3, r3, #5
 80051f0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80051f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051f8:	f003 031f 	and.w	r3, r3, #31
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d104      	bne.n	800520a <USB_EPStartXfer+0x7e2>
 8005200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005204:	3b01      	subs	r3, #1
 8005206:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800520a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800520c:	881b      	ldrh	r3, [r3, #0]
 800520e:	b29a      	uxth	r2, r3
 8005210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005214:	b29b      	uxth	r3, r3
 8005216:	029b      	lsls	r3, r3, #10
 8005218:	b29b      	uxth	r3, r3
 800521a:	4313      	orrs	r3, r2
 800521c:	b29b      	uxth	r3, r3
 800521e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005222:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005226:	b29a      	uxth	r2, r3
 8005228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800522a:	801a      	strh	r2, [r3, #0]
 800522c:	e050      	b.n	80052d0 <USB_EPStartXfer+0x8a8>
 800522e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005232:	2b00      	cmp	r3, #0
 8005234:	d10a      	bne.n	800524c <USB_EPStartXfer+0x824>
 8005236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005238:	881b      	ldrh	r3, [r3, #0]
 800523a:	b29b      	uxth	r3, r3
 800523c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005240:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005244:	b29a      	uxth	r2, r3
 8005246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005248:	801a      	strh	r2, [r3, #0]
 800524a:	e041      	b.n	80052d0 <USB_EPStartXfer+0x8a8>
 800524c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005250:	085b      	lsrs	r3, r3, #1
 8005252:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005256:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800525a:	f003 0301 	and.w	r3, r3, #1
 800525e:	2b00      	cmp	r3, #0
 8005260:	d004      	beq.n	800526c <USB_EPStartXfer+0x844>
 8005262:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005266:	3301      	adds	r3, #1
 8005268:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800526c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800526e:	881b      	ldrh	r3, [r3, #0]
 8005270:	b29a      	uxth	r2, r3
 8005272:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005276:	b29b      	uxth	r3, r3
 8005278:	029b      	lsls	r3, r3, #10
 800527a:	b29b      	uxth	r3, r3
 800527c:	4313      	orrs	r3, r2
 800527e:	b29a      	uxth	r2, r3
 8005280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005282:	801a      	strh	r2, [r3, #0]
 8005284:	e024      	b.n	80052d0 <USB_EPStartXfer+0x8a8>
 8005286:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800528a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	785b      	ldrb	r3, [r3, #1]
 8005292:	2b01      	cmp	r3, #1
 8005294:	d11c      	bne.n	80052d0 <USB_EPStartXfer+0x8a8>
 8005296:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800529a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	461a      	mov	r2, r3
 80052a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052aa:	4413      	add	r3, r2
 80052ac:	643b      	str	r3, [r7, #64]	; 0x40
 80052ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	781b      	ldrb	r3, [r3, #0]
 80052ba:	011a      	lsls	r2, r3, #4
 80052bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052be:	4413      	add	r3, r2
 80052c0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80052c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052ca:	b29a      	uxth	r2, r3
 80052cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052ce:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80052d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	895b      	ldrh	r3, [r3, #10]
 80052dc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80052e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	6959      	ldr	r1, [r3, #20]
 80052ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80052f6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80052fa:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80052fe:	6800      	ldr	r0, [r0, #0]
 8005300:	f001 f881 	bl	8006406 <USB_WritePMA>
 8005304:	e227      	b.n	8005756 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005306:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800530a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	6a1b      	ldr	r3, [r3, #32]
 8005312:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005316:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800531a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005324:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	009b      	lsls	r3, r3, #2
 800532e:	4413      	add	r3, r2
 8005330:	881b      	ldrh	r3, [r3, #0]
 8005332:	b29b      	uxth	r3, r3
 8005334:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005338:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800533c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005340:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005344:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800534e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	441a      	add	r2, r3
 800535a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800535e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005362:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005366:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800536a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800536e:	b29b      	uxth	r3, r3
 8005370:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005372:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005376:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800537e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005382:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800538c:	b29b      	uxth	r3, r3
 800538e:	461a      	mov	r2, r3
 8005390:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005392:	4413      	add	r3, r2
 8005394:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005396:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800539a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	781b      	ldrb	r3, [r3, #0]
 80053a2:	011a      	lsls	r2, r3, #4
 80053a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053a6:	4413      	add	r3, r2
 80053a8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80053ac:	65bb      	str	r3, [r7, #88]	; 0x58
 80053ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053b2:	b29a      	uxth	r2, r3
 80053b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80053b6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80053b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	891b      	ldrh	r3, [r3, #8]
 80053c4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80053c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	6959      	ldr	r1, [r3, #20]
 80053d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053d8:	b29b      	uxth	r3, r3
 80053da:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80053de:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80053e2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80053e6:	6800      	ldr	r0, [r0, #0]
 80053e8:	f001 f80d 	bl	8006406 <USB_WritePMA>
 80053ec:	e1b3      	b.n	8005756 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80053ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	6a1a      	ldr	r2, [r3, #32]
 80053fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053fe:	1ad2      	subs	r2, r2, r3
 8005400:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005404:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800540c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005410:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800541a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	781b      	ldrb	r3, [r3, #0]
 8005422:	009b      	lsls	r3, r3, #2
 8005424:	4413      	add	r3, r2
 8005426:	881b      	ldrh	r3, [r3, #0]
 8005428:	b29b      	uxth	r3, r3
 800542a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800542e:	2b00      	cmp	r3, #0
 8005430:	f000 80c6 	beq.w	80055c0 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005434:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005438:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	673b      	str	r3, [r7, #112]	; 0x70
 8005440:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005444:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	785b      	ldrb	r3, [r3, #1]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d177      	bne.n	8005540 <USB_EPStartXfer+0xb18>
 8005450:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005454:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	66bb      	str	r3, [r7, #104]	; 0x68
 800545c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005460:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800546a:	b29b      	uxth	r3, r3
 800546c:	461a      	mov	r2, r3
 800546e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005470:	4413      	add	r3, r2
 8005472:	66bb      	str	r3, [r7, #104]	; 0x68
 8005474:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005478:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	781b      	ldrb	r3, [r3, #0]
 8005480:	011a      	lsls	r2, r3, #4
 8005482:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005484:	4413      	add	r3, r2
 8005486:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800548a:	667b      	str	r3, [r7, #100]	; 0x64
 800548c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800548e:	881b      	ldrh	r3, [r3, #0]
 8005490:	b29b      	uxth	r3, r3
 8005492:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005496:	b29a      	uxth	r2, r3
 8005498:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800549a:	801a      	strh	r2, [r3, #0]
 800549c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054a0:	2b3e      	cmp	r3, #62	; 0x3e
 80054a2:	d921      	bls.n	80054e8 <USB_EPStartXfer+0xac0>
 80054a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054a8:	095b      	lsrs	r3, r3, #5
 80054aa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80054ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054b2:	f003 031f 	and.w	r3, r3, #31
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d104      	bne.n	80054c4 <USB_EPStartXfer+0xa9c>
 80054ba:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80054be:	3b01      	subs	r3, #1
 80054c0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80054c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054c6:	881b      	ldrh	r3, [r3, #0]
 80054c8:	b29a      	uxth	r2, r3
 80054ca:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	029b      	lsls	r3, r3, #10
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	4313      	orrs	r3, r2
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054e0:	b29a      	uxth	r2, r3
 80054e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054e4:	801a      	strh	r2, [r3, #0]
 80054e6:	e050      	b.n	800558a <USB_EPStartXfer+0xb62>
 80054e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d10a      	bne.n	8005506 <USB_EPStartXfer+0xade>
 80054f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054f2:	881b      	ldrh	r3, [r3, #0]
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054fe:	b29a      	uxth	r2, r3
 8005500:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005502:	801a      	strh	r2, [r3, #0]
 8005504:	e041      	b.n	800558a <USB_EPStartXfer+0xb62>
 8005506:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800550a:	085b      	lsrs	r3, r3, #1
 800550c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005510:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005514:	f003 0301 	and.w	r3, r3, #1
 8005518:	2b00      	cmp	r3, #0
 800551a:	d004      	beq.n	8005526 <USB_EPStartXfer+0xafe>
 800551c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005520:	3301      	adds	r3, #1
 8005522:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005526:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005528:	881b      	ldrh	r3, [r3, #0]
 800552a:	b29a      	uxth	r2, r3
 800552c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005530:	b29b      	uxth	r3, r3
 8005532:	029b      	lsls	r3, r3, #10
 8005534:	b29b      	uxth	r3, r3
 8005536:	4313      	orrs	r3, r2
 8005538:	b29a      	uxth	r2, r3
 800553a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800553c:	801a      	strh	r2, [r3, #0]
 800553e:	e024      	b.n	800558a <USB_EPStartXfer+0xb62>
 8005540:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005544:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	785b      	ldrb	r3, [r3, #1]
 800554c:	2b01      	cmp	r3, #1
 800554e:	d11c      	bne.n	800558a <USB_EPStartXfer+0xb62>
 8005550:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005554:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800555e:	b29b      	uxth	r3, r3
 8005560:	461a      	mov	r2, r3
 8005562:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005564:	4413      	add	r3, r2
 8005566:	673b      	str	r3, [r7, #112]	; 0x70
 8005568:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800556c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	781b      	ldrb	r3, [r3, #0]
 8005574:	011a      	lsls	r2, r3, #4
 8005576:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005578:	4413      	add	r3, r2
 800557a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800557e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005580:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005584:	b29a      	uxth	r2, r3
 8005586:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005588:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800558a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800558e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	895b      	ldrh	r3, [r3, #10]
 8005596:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800559a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800559e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	6959      	ldr	r1, [r3, #20]
 80055a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80055b0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80055b4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80055b8:	6800      	ldr	r0, [r0, #0]
 80055ba:	f000 ff24 	bl	8006406 <USB_WritePMA>
 80055be:	e0ca      	b.n	8005756 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80055c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	785b      	ldrb	r3, [r3, #1]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d177      	bne.n	80056c0 <USB_EPStartXfer+0xc98>
 80055d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	67fb      	str	r3, [r7, #124]	; 0x7c
 80055dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	461a      	mov	r2, r3
 80055ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80055f0:	4413      	add	r3, r2
 80055f2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80055f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	781b      	ldrb	r3, [r3, #0]
 8005600:	011a      	lsls	r2, r3, #4
 8005602:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005604:	4413      	add	r3, r2
 8005606:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800560a:	67bb      	str	r3, [r7, #120]	; 0x78
 800560c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800560e:	881b      	ldrh	r3, [r3, #0]
 8005610:	b29b      	uxth	r3, r3
 8005612:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005616:	b29a      	uxth	r2, r3
 8005618:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800561a:	801a      	strh	r2, [r3, #0]
 800561c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005620:	2b3e      	cmp	r3, #62	; 0x3e
 8005622:	d921      	bls.n	8005668 <USB_EPStartXfer+0xc40>
 8005624:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005628:	095b      	lsrs	r3, r3, #5
 800562a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800562e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005632:	f003 031f 	and.w	r3, r3, #31
 8005636:	2b00      	cmp	r3, #0
 8005638:	d104      	bne.n	8005644 <USB_EPStartXfer+0xc1c>
 800563a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800563e:	3b01      	subs	r3, #1
 8005640:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005644:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005646:	881b      	ldrh	r3, [r3, #0]
 8005648:	b29a      	uxth	r2, r3
 800564a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800564e:	b29b      	uxth	r3, r3
 8005650:	029b      	lsls	r3, r3, #10
 8005652:	b29b      	uxth	r3, r3
 8005654:	4313      	orrs	r3, r2
 8005656:	b29b      	uxth	r3, r3
 8005658:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800565c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005660:	b29a      	uxth	r2, r3
 8005662:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005664:	801a      	strh	r2, [r3, #0]
 8005666:	e05c      	b.n	8005722 <USB_EPStartXfer+0xcfa>
 8005668:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800566c:	2b00      	cmp	r3, #0
 800566e:	d10a      	bne.n	8005686 <USB_EPStartXfer+0xc5e>
 8005670:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005672:	881b      	ldrh	r3, [r3, #0]
 8005674:	b29b      	uxth	r3, r3
 8005676:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800567a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800567e:	b29a      	uxth	r2, r3
 8005680:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005682:	801a      	strh	r2, [r3, #0]
 8005684:	e04d      	b.n	8005722 <USB_EPStartXfer+0xcfa>
 8005686:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800568a:	085b      	lsrs	r3, r3, #1
 800568c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005690:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005694:	f003 0301 	and.w	r3, r3, #1
 8005698:	2b00      	cmp	r3, #0
 800569a:	d004      	beq.n	80056a6 <USB_EPStartXfer+0xc7e>
 800569c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80056a0:	3301      	adds	r3, #1
 80056a2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80056a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056a8:	881b      	ldrh	r3, [r3, #0]
 80056aa:	b29a      	uxth	r2, r3
 80056ac:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	029b      	lsls	r3, r3, #10
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	4313      	orrs	r3, r2
 80056b8:	b29a      	uxth	r2, r3
 80056ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056bc:	801a      	strh	r2, [r3, #0]
 80056be:	e030      	b.n	8005722 <USB_EPStartXfer+0xcfa>
 80056c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	785b      	ldrb	r3, [r3, #1]
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d128      	bne.n	8005722 <USB_EPStartXfer+0xcfa>
 80056d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80056de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	461a      	mov	r2, r3
 80056f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80056f4:	4413      	add	r3, r2
 80056f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80056fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	781b      	ldrb	r3, [r3, #0]
 8005706:	011a      	lsls	r2, r3, #4
 8005708:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800570c:	4413      	add	r3, r2
 800570e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005712:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005716:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800571a:	b29a      	uxth	r2, r3
 800571c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005720:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005722:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005726:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	891b      	ldrh	r3, [r3, #8]
 800572e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005732:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005736:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	6959      	ldr	r1, [r3, #20]
 800573e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005742:	b29b      	uxth	r3, r3
 8005744:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005748:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800574c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005750:	6800      	ldr	r0, [r0, #0]
 8005752:	f000 fe58 	bl	8006406 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005756:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800575a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800575e:	681a      	ldr	r2, [r3, #0]
 8005760:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005764:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	781b      	ldrb	r3, [r3, #0]
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	4413      	add	r3, r2
 8005770:	881b      	ldrh	r3, [r3, #0]
 8005772:	b29b      	uxth	r3, r3
 8005774:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005778:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800577c:	817b      	strh	r3, [r7, #10]
 800577e:	897b      	ldrh	r3, [r7, #10]
 8005780:	f083 0310 	eor.w	r3, r3, #16
 8005784:	817b      	strh	r3, [r7, #10]
 8005786:	897b      	ldrh	r3, [r7, #10]
 8005788:	f083 0320 	eor.w	r3, r3, #32
 800578c:	817b      	strh	r3, [r7, #10]
 800578e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005792:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800579c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	781b      	ldrb	r3, [r3, #0]
 80057a4:	009b      	lsls	r3, r3, #2
 80057a6:	441a      	add	r2, r3
 80057a8:	897b      	ldrh	r3, [r7, #10]
 80057aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	8013      	strh	r3, [r2, #0]
 80057be:	f000 bcde 	b.w	800617e <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80057c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	7b1b      	ldrb	r3, [r3, #12]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	f040 80bb 	bne.w	800594a <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80057d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	699a      	ldr	r2, [r3, #24]
 80057e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	691b      	ldr	r3, [r3, #16]
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d917      	bls.n	8005820 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80057f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	691b      	ldr	r3, [r3, #16]
 80057fc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8005800:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005804:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	699a      	ldr	r2, [r3, #24]
 800580c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005810:	1ad2      	subs	r2, r2, r3
 8005812:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005816:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	619a      	str	r2, [r3, #24]
 800581e:	e00e      	b.n	800583e <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8005820:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005824:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	699b      	ldr	r3, [r3, #24]
 800582c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8005830:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005834:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	2200      	movs	r2, #0
 800583c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800583e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005842:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800584c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005850:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800585a:	b29b      	uxth	r3, r3
 800585c:	461a      	mov	r2, r3
 800585e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005862:	4413      	add	r3, r2
 8005864:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005868:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800586c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	781b      	ldrb	r3, [r3, #0]
 8005874:	011a      	lsls	r2, r3, #4
 8005876:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800587a:	4413      	add	r3, r2
 800587c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005880:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005884:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005888:	881b      	ldrh	r3, [r3, #0]
 800588a:	b29b      	uxth	r3, r3
 800588c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005890:	b29a      	uxth	r2, r3
 8005892:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005896:	801a      	strh	r2, [r3, #0]
 8005898:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800589c:	2b3e      	cmp	r3, #62	; 0x3e
 800589e:	d924      	bls.n	80058ea <USB_EPStartXfer+0xec2>
 80058a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058a4:	095b      	lsrs	r3, r3, #5
 80058a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80058aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058ae:	f003 031f 	and.w	r3, r3, #31
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d104      	bne.n	80058c0 <USB_EPStartXfer+0xe98>
 80058b6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80058ba:	3b01      	subs	r3, #1
 80058bc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80058c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80058c4:	881b      	ldrh	r3, [r3, #0]
 80058c6:	b29a      	uxth	r2, r3
 80058c8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	029b      	lsls	r3, r3, #10
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	4313      	orrs	r3, r2
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058de:	b29a      	uxth	r2, r3
 80058e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80058e4:	801a      	strh	r2, [r3, #0]
 80058e6:	f000 bc10 	b.w	800610a <USB_EPStartXfer+0x16e2>
 80058ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d10c      	bne.n	800590c <USB_EPStartXfer+0xee4>
 80058f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80058f6:	881b      	ldrh	r3, [r3, #0]
 80058f8:	b29b      	uxth	r3, r3
 80058fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005902:	b29a      	uxth	r2, r3
 8005904:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005908:	801a      	strh	r2, [r3, #0]
 800590a:	e3fe      	b.n	800610a <USB_EPStartXfer+0x16e2>
 800590c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005910:	085b      	lsrs	r3, r3, #1
 8005912:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005916:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800591a:	f003 0301 	and.w	r3, r3, #1
 800591e:	2b00      	cmp	r3, #0
 8005920:	d004      	beq.n	800592c <USB_EPStartXfer+0xf04>
 8005922:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005926:	3301      	adds	r3, #1
 8005928:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800592c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005930:	881b      	ldrh	r3, [r3, #0]
 8005932:	b29a      	uxth	r2, r3
 8005934:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005938:	b29b      	uxth	r3, r3
 800593a:	029b      	lsls	r3, r3, #10
 800593c:	b29b      	uxth	r3, r3
 800593e:	4313      	orrs	r3, r2
 8005940:	b29a      	uxth	r2, r3
 8005942:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005946:	801a      	strh	r2, [r3, #0]
 8005948:	e3df      	b.n	800610a <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800594a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800594e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	78db      	ldrb	r3, [r3, #3]
 8005956:	2b02      	cmp	r3, #2
 8005958:	f040 8218 	bne.w	8005d8c <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800595c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005960:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	785b      	ldrb	r3, [r3, #1]
 8005968:	2b00      	cmp	r3, #0
 800596a:	f040 809d 	bne.w	8005aa8 <USB_EPStartXfer+0x1080>
 800596e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005972:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800597c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005980:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800598a:	b29b      	uxth	r3, r3
 800598c:	461a      	mov	r2, r3
 800598e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005992:	4413      	add	r3, r2
 8005994:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005998:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800599c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	781b      	ldrb	r3, [r3, #0]
 80059a4:	011a      	lsls	r2, r3, #4
 80059a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80059aa:	4413      	add	r3, r2
 80059ac:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80059b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80059b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80059b8:	881b      	ldrh	r3, [r3, #0]
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80059c0:	b29a      	uxth	r2, r3
 80059c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80059c6:	801a      	strh	r2, [r3, #0]
 80059c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	691b      	ldr	r3, [r3, #16]
 80059d4:	2b3e      	cmp	r3, #62	; 0x3e
 80059d6:	d92b      	bls.n	8005a30 <USB_EPStartXfer+0x1008>
 80059d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	691b      	ldr	r3, [r3, #16]
 80059e4:	095b      	lsrs	r3, r3, #5
 80059e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80059ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	691b      	ldr	r3, [r3, #16]
 80059f6:	f003 031f 	and.w	r3, r3, #31
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d104      	bne.n	8005a08 <USB_EPStartXfer+0xfe0>
 80059fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a02:	3b01      	subs	r3, #1
 8005a04:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005a08:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005a0c:	881b      	ldrh	r3, [r3, #0]
 8005a0e:	b29a      	uxth	r2, r3
 8005a10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	029b      	lsls	r3, r3, #10
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a26:	b29a      	uxth	r2, r3
 8005a28:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005a2c:	801a      	strh	r2, [r3, #0]
 8005a2e:	e070      	b.n	8005b12 <USB_EPStartXfer+0x10ea>
 8005a30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	691b      	ldr	r3, [r3, #16]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d10c      	bne.n	8005a5a <USB_EPStartXfer+0x1032>
 8005a40:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005a44:	881b      	ldrh	r3, [r3, #0]
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a50:	b29a      	uxth	r2, r3
 8005a52:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005a56:	801a      	strh	r2, [r3, #0]
 8005a58:	e05b      	b.n	8005b12 <USB_EPStartXfer+0x10ea>
 8005a5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	691b      	ldr	r3, [r3, #16]
 8005a66:	085b      	lsrs	r3, r3, #1
 8005a68:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005a6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	691b      	ldr	r3, [r3, #16]
 8005a78:	f003 0301 	and.w	r3, r3, #1
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d004      	beq.n	8005a8a <USB_EPStartXfer+0x1062>
 8005a80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a84:	3301      	adds	r3, #1
 8005a86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005a8a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005a8e:	881b      	ldrh	r3, [r3, #0]
 8005a90:	b29a      	uxth	r2, r3
 8005a92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	029b      	lsls	r3, r3, #10
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	b29a      	uxth	r2, r3
 8005aa0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005aa4:	801a      	strh	r2, [r3, #0]
 8005aa6:	e034      	b.n	8005b12 <USB_EPStartXfer+0x10ea>
 8005aa8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005aac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	785b      	ldrb	r3, [r3, #1]
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	d12c      	bne.n	8005b12 <USB_EPStartXfer+0x10ea>
 8005ab8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005abc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005ac6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005aca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005adc:	4413      	add	r3, r2
 8005ade:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005ae2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ae6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	781b      	ldrb	r3, [r3, #0]
 8005aee:	011a      	lsls	r2, r3, #4
 8005af0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005af4:	4413      	add	r3, r2
 8005af6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005afa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005afe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	691b      	ldr	r3, [r3, #16]
 8005b0a:	b29a      	uxth	r2, r3
 8005b0c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005b10:	801a      	strh	r2, [r3, #0]
 8005b12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005b20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	785b      	ldrb	r3, [r3, #1]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	f040 809d 	bne.w	8005c6c <USB_EPStartXfer+0x1244>
 8005b32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b36:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005b40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	461a      	mov	r2, r3
 8005b52:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b56:	4413      	add	r3, r2
 8005b58:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005b5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	011a      	lsls	r2, r3, #4
 8005b6a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b6e:	4413      	add	r3, r2
 8005b70:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005b78:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b7c:	881b      	ldrh	r3, [r3, #0]
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b84:	b29a      	uxth	r2, r3
 8005b86:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b8a:	801a      	strh	r2, [r3, #0]
 8005b8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	691b      	ldr	r3, [r3, #16]
 8005b98:	2b3e      	cmp	r3, #62	; 0x3e
 8005b9a:	d92b      	bls.n	8005bf4 <USB_EPStartXfer+0x11cc>
 8005b9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ba0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	691b      	ldr	r3, [r3, #16]
 8005ba8:	095b      	lsrs	r3, r3, #5
 8005baa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005bae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	691b      	ldr	r3, [r3, #16]
 8005bba:	f003 031f 	and.w	r3, r3, #31
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d104      	bne.n	8005bcc <USB_EPStartXfer+0x11a4>
 8005bc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bc6:	3b01      	subs	r3, #1
 8005bc8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005bcc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005bd0:	881b      	ldrh	r3, [r3, #0]
 8005bd2:	b29a      	uxth	r2, r3
 8005bd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	029b      	lsls	r3, r3, #10
 8005bdc:	b29b      	uxth	r3, r3
 8005bde:	4313      	orrs	r3, r2
 8005be0:	b29b      	uxth	r3, r3
 8005be2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005be6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bea:	b29a      	uxth	r2, r3
 8005bec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005bf0:	801a      	strh	r2, [r3, #0]
 8005bf2:	e069      	b.n	8005cc8 <USB_EPStartXfer+0x12a0>
 8005bf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bf8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	691b      	ldr	r3, [r3, #16]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d10c      	bne.n	8005c1e <USB_EPStartXfer+0x11f6>
 8005c04:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005c08:	881b      	ldrh	r3, [r3, #0]
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c14:	b29a      	uxth	r2, r3
 8005c16:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005c1a:	801a      	strh	r2, [r3, #0]
 8005c1c:	e054      	b.n	8005cc8 <USB_EPStartXfer+0x12a0>
 8005c1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	691b      	ldr	r3, [r3, #16]
 8005c2a:	085b      	lsrs	r3, r3, #1
 8005c2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005c30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	691b      	ldr	r3, [r3, #16]
 8005c3c:	f003 0301 	and.w	r3, r3, #1
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d004      	beq.n	8005c4e <USB_EPStartXfer+0x1226>
 8005c44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c48:	3301      	adds	r3, #1
 8005c4a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005c4e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005c52:	881b      	ldrh	r3, [r3, #0]
 8005c54:	b29a      	uxth	r2, r3
 8005c56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	029b      	lsls	r3, r3, #10
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	4313      	orrs	r3, r2
 8005c62:	b29a      	uxth	r2, r3
 8005c64:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005c68:	801a      	strh	r2, [r3, #0]
 8005c6a:	e02d      	b.n	8005cc8 <USB_EPStartXfer+0x12a0>
 8005c6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	785b      	ldrb	r3, [r3, #1]
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d125      	bne.n	8005cc8 <USB_EPStartXfer+0x12a0>
 8005c7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c80:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005c92:	4413      	add	r3, r2
 8005c94:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005c98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	781b      	ldrb	r3, [r3, #0]
 8005ca4:	011a      	lsls	r2, r3, #4
 8005ca6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005caa:	4413      	add	r3, r2
 8005cac:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005cb0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005cb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	691b      	ldr	r3, [r3, #16]
 8005cc0:	b29a      	uxth	r2, r3
 8005cc2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005cc6:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005cc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ccc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	69db      	ldr	r3, [r3, #28]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	f000 8218 	beq.w	800610a <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005cda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cde:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ce8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	781b      	ldrb	r3, [r3, #0]
 8005cf0:	009b      	lsls	r3, r3, #2
 8005cf2:	4413      	add	r3, r2
 8005cf4:	881b      	ldrh	r3, [r3, #0]
 8005cf6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005cfa:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005cfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d005      	beq.n	8005d12 <USB_EPStartXfer+0x12ea>
 8005d06:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d10d      	bne.n	8005d2e <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005d12:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005d16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	f040 81f5 	bne.w	800610a <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005d20:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	f040 81ee 	bne.w	800610a <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8005d2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	009b      	lsls	r3, r3, #2
 8005d46:	4413      	add	r3, r2
 8005d48:	881b      	ldrh	r3, [r3, #0]
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d54:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8005d58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d5c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	781b      	ldrb	r3, [r3, #0]
 8005d6e:	009b      	lsls	r3, r3, #2
 8005d70:	441a      	add	r2, r3
 8005d72:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8005d76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d82:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	8013      	strh	r3, [r2, #0]
 8005d8a:	e1be      	b.n	800610a <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005d8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	78db      	ldrb	r3, [r3, #3]
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	f040 81b4 	bne.w	8006106 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005d9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005da2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	699a      	ldr	r2, [r3, #24]
 8005daa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	691b      	ldr	r3, [r3, #16]
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d917      	bls.n	8005dea <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8005dba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	691b      	ldr	r3, [r3, #16]
 8005dc6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8005dca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	699a      	ldr	r2, [r3, #24]
 8005dd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dda:	1ad2      	subs	r2, r2, r3
 8005ddc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005de0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	619a      	str	r2, [r3, #24]
 8005de8:	e00e      	b.n	8005e08 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8005dea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	699b      	ldr	r3, [r3, #24]
 8005df6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8005dfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dfe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	2200      	movs	r2, #0
 8005e06:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005e08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	785b      	ldrb	r3, [r3, #1]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	f040 8085 	bne.w	8005f24 <USB_EPStartXfer+0x14fc>
 8005e1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e1e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005e28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e2c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e36:	b29b      	uxth	r3, r3
 8005e38:	461a      	mov	r2, r3
 8005e3a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005e3e:	4413      	add	r3, r2
 8005e40:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005e44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	781b      	ldrb	r3, [r3, #0]
 8005e50:	011a      	lsls	r2, r3, #4
 8005e52:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005e56:	4413      	add	r3, r2
 8005e58:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005e5c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005e60:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005e64:	881b      	ldrh	r3, [r3, #0]
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e6c:	b29a      	uxth	r2, r3
 8005e6e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005e72:	801a      	strh	r2, [r3, #0]
 8005e74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e78:	2b3e      	cmp	r3, #62	; 0x3e
 8005e7a:	d923      	bls.n	8005ec4 <USB_EPStartXfer+0x149c>
 8005e7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e80:	095b      	lsrs	r3, r3, #5
 8005e82:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005e86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e8a:	f003 031f 	and.w	r3, r3, #31
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d104      	bne.n	8005e9c <USB_EPStartXfer+0x1474>
 8005e92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e96:	3b01      	subs	r3, #1
 8005e98:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005e9c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005ea0:	881b      	ldrh	r3, [r3, #0]
 8005ea2:	b29a      	uxth	r2, r3
 8005ea4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	029b      	lsls	r3, r3, #10
 8005eac:	b29b      	uxth	r3, r3
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005eb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005eba:	b29a      	uxth	r2, r3
 8005ebc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005ec0:	801a      	strh	r2, [r3, #0]
 8005ec2:	e060      	b.n	8005f86 <USB_EPStartXfer+0x155e>
 8005ec4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d10c      	bne.n	8005ee6 <USB_EPStartXfer+0x14be>
 8005ecc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005ed0:	881b      	ldrh	r3, [r3, #0]
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ed8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005edc:	b29a      	uxth	r2, r3
 8005ede:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005ee2:	801a      	strh	r2, [r3, #0]
 8005ee4:	e04f      	b.n	8005f86 <USB_EPStartXfer+0x155e>
 8005ee6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005eea:	085b      	lsrs	r3, r3, #1
 8005eec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005ef0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ef4:	f003 0301 	and.w	r3, r3, #1
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d004      	beq.n	8005f06 <USB_EPStartXfer+0x14de>
 8005efc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f00:	3301      	adds	r3, #1
 8005f02:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005f06:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005f0a:	881b      	ldrh	r3, [r3, #0]
 8005f0c:	b29a      	uxth	r2, r3
 8005f0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	029b      	lsls	r3, r3, #10
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	b29a      	uxth	r2, r3
 8005f1c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005f20:	801a      	strh	r2, [r3, #0]
 8005f22:	e030      	b.n	8005f86 <USB_EPStartXfer+0x155e>
 8005f24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	785b      	ldrb	r3, [r3, #1]
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d128      	bne.n	8005f86 <USB_EPStartXfer+0x155e>
 8005f34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f38:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005f42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	461a      	mov	r2, r3
 8005f54:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f58:	4413      	add	r3, r2
 8005f5a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005f5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	781b      	ldrb	r3, [r3, #0]
 8005f6a:	011a      	lsls	r2, r3, #4
 8005f6c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f70:	4413      	add	r3, r2
 8005f72:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005f76:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005f7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f7e:	b29a      	uxth	r2, r3
 8005f80:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005f84:	801a      	strh	r2, [r3, #0]
 8005f86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005f94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	785b      	ldrb	r3, [r3, #1]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	f040 8085 	bne.w	80060b0 <USB_EPStartXfer+0x1688>
 8005fa6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005faa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005fb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fb8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	461a      	mov	r2, r3
 8005fc6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005fca:	4413      	add	r3, r2
 8005fcc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005fd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	781b      	ldrb	r3, [r3, #0]
 8005fdc:	011a      	lsls	r2, r3, #4
 8005fde:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005fe2:	4413      	add	r3, r2
 8005fe4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005fe8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005fec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005ff0:	881b      	ldrh	r3, [r3, #0]
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ff8:	b29a      	uxth	r2, r3
 8005ffa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005ffe:	801a      	strh	r2, [r3, #0]
 8006000:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006004:	2b3e      	cmp	r3, #62	; 0x3e
 8006006:	d923      	bls.n	8006050 <USB_EPStartXfer+0x1628>
 8006008:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800600c:	095b      	lsrs	r3, r3, #5
 800600e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006012:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006016:	f003 031f 	and.w	r3, r3, #31
 800601a:	2b00      	cmp	r3, #0
 800601c:	d104      	bne.n	8006028 <USB_EPStartXfer+0x1600>
 800601e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006022:	3b01      	subs	r3, #1
 8006024:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006028:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800602c:	881b      	ldrh	r3, [r3, #0]
 800602e:	b29a      	uxth	r2, r3
 8006030:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006034:	b29b      	uxth	r3, r3
 8006036:	029b      	lsls	r3, r3, #10
 8006038:	b29b      	uxth	r3, r3
 800603a:	4313      	orrs	r3, r2
 800603c:	b29b      	uxth	r3, r3
 800603e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006042:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006046:	b29a      	uxth	r2, r3
 8006048:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800604c:	801a      	strh	r2, [r3, #0]
 800604e:	e05c      	b.n	800610a <USB_EPStartXfer+0x16e2>
 8006050:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006054:	2b00      	cmp	r3, #0
 8006056:	d10c      	bne.n	8006072 <USB_EPStartXfer+0x164a>
 8006058:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800605c:	881b      	ldrh	r3, [r3, #0]
 800605e:	b29b      	uxth	r3, r3
 8006060:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006064:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006068:	b29a      	uxth	r2, r3
 800606a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800606e:	801a      	strh	r2, [r3, #0]
 8006070:	e04b      	b.n	800610a <USB_EPStartXfer+0x16e2>
 8006072:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006076:	085b      	lsrs	r3, r3, #1
 8006078:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800607c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006080:	f003 0301 	and.w	r3, r3, #1
 8006084:	2b00      	cmp	r3, #0
 8006086:	d004      	beq.n	8006092 <USB_EPStartXfer+0x166a>
 8006088:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800608c:	3301      	adds	r3, #1
 800608e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006092:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006096:	881b      	ldrh	r3, [r3, #0]
 8006098:	b29a      	uxth	r2, r3
 800609a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800609e:	b29b      	uxth	r3, r3
 80060a0:	029b      	lsls	r3, r3, #10
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	4313      	orrs	r3, r2
 80060a6:	b29a      	uxth	r2, r3
 80060a8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80060ac:	801a      	strh	r2, [r3, #0]
 80060ae:	e02c      	b.n	800610a <USB_EPStartXfer+0x16e2>
 80060b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	785b      	ldrb	r3, [r3, #1]
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d124      	bne.n	800610a <USB_EPStartXfer+0x16e2>
 80060c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	461a      	mov	r2, r3
 80060d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80060d6:	4413      	add	r3, r2
 80060d8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80060dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	781b      	ldrb	r3, [r3, #0]
 80060e8:	011a      	lsls	r2, r3, #4
 80060ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80060ee:	4413      	add	r3, r2
 80060f0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80060f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80060f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060fc:	b29a      	uxth	r2, r3
 80060fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006102:	801a      	strh	r2, [r3, #0]
 8006104:	e001      	b.n	800610a <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8006106:	2301      	movs	r3, #1
 8006108:	e03a      	b.n	8006180 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800610a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800610e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006112:	681a      	ldr	r2, [r3, #0]
 8006114:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006118:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	781b      	ldrb	r3, [r3, #0]
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	4413      	add	r3, r2
 8006124:	881b      	ldrh	r3, [r3, #0]
 8006126:	b29b      	uxth	r3, r3
 8006128:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800612c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006130:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006134:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006138:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800613c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006140:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006144:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006148:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800614c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006150:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800615a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	781b      	ldrb	r3, [r3, #0]
 8006162:	009b      	lsls	r3, r3, #2
 8006164:	441a      	add	r2, r3
 8006166:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800616a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800616e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006172:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006176:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800617a:	b29b      	uxth	r3, r3
 800617c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800617e:	2300      	movs	r3, #0
}
 8006180:	4618      	mov	r0, r3
 8006182:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}

0800618a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800618a:	b480      	push	{r7}
 800618c:	b085      	sub	sp, #20
 800618e:	af00      	add	r7, sp, #0
 8006190:	6078      	str	r0, [r7, #4]
 8006192:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	785b      	ldrb	r3, [r3, #1]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d020      	beq.n	80061de <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800619c:	687a      	ldr	r2, [r7, #4]
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	781b      	ldrb	r3, [r3, #0]
 80061a2:	009b      	lsls	r3, r3, #2
 80061a4:	4413      	add	r3, r2
 80061a6:	881b      	ldrh	r3, [r3, #0]
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061b2:	81bb      	strh	r3, [r7, #12]
 80061b4:	89bb      	ldrh	r3, [r7, #12]
 80061b6:	f083 0310 	eor.w	r3, r3, #16
 80061ba:	81bb      	strh	r3, [r7, #12]
 80061bc:	687a      	ldr	r2, [r7, #4]
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	781b      	ldrb	r3, [r3, #0]
 80061c2:	009b      	lsls	r3, r3, #2
 80061c4:	441a      	add	r2, r3
 80061c6:	89bb      	ldrh	r3, [r7, #12]
 80061c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061d8:	b29b      	uxth	r3, r3
 80061da:	8013      	strh	r3, [r2, #0]
 80061dc:	e01f      	b.n	800621e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	781b      	ldrb	r3, [r3, #0]
 80061e4:	009b      	lsls	r3, r3, #2
 80061e6:	4413      	add	r3, r2
 80061e8:	881b      	ldrh	r3, [r3, #0]
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061f4:	81fb      	strh	r3, [r7, #14]
 80061f6:	89fb      	ldrh	r3, [r7, #14]
 80061f8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80061fc:	81fb      	strh	r3, [r7, #14]
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	781b      	ldrb	r3, [r3, #0]
 8006204:	009b      	lsls	r3, r3, #2
 8006206:	441a      	add	r2, r3
 8006208:	89fb      	ldrh	r3, [r7, #14]
 800620a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800620e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006212:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006216:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800621a:	b29b      	uxth	r3, r3
 800621c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800621e:	2300      	movs	r3, #0
}
 8006220:	4618      	mov	r0, r3
 8006222:	3714      	adds	r7, #20
 8006224:	46bd      	mov	sp, r7
 8006226:	bc80      	pop	{r7}
 8006228:	4770      	bx	lr

0800622a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800622a:	b480      	push	{r7}
 800622c:	b087      	sub	sp, #28
 800622e:	af00      	add	r7, sp, #0
 8006230:	6078      	str	r0, [r7, #4]
 8006232:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	7b1b      	ldrb	r3, [r3, #12]
 8006238:	2b00      	cmp	r3, #0
 800623a:	f040 809d 	bne.w	8006378 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	785b      	ldrb	r3, [r3, #1]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d04c      	beq.n	80062e0 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006246:	687a      	ldr	r2, [r7, #4]
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	781b      	ldrb	r3, [r3, #0]
 800624c:	009b      	lsls	r3, r3, #2
 800624e:	4413      	add	r3, r2
 8006250:	881b      	ldrh	r3, [r3, #0]
 8006252:	823b      	strh	r3, [r7, #16]
 8006254:	8a3b      	ldrh	r3, [r7, #16]
 8006256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800625a:	2b00      	cmp	r3, #0
 800625c:	d01b      	beq.n	8006296 <USB_EPClearStall+0x6c>
 800625e:	687a      	ldr	r2, [r7, #4]
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	781b      	ldrb	r3, [r3, #0]
 8006264:	009b      	lsls	r3, r3, #2
 8006266:	4413      	add	r3, r2
 8006268:	881b      	ldrh	r3, [r3, #0]
 800626a:	b29b      	uxth	r3, r3
 800626c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006270:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006274:	81fb      	strh	r3, [r7, #14]
 8006276:	687a      	ldr	r2, [r7, #4]
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	781b      	ldrb	r3, [r3, #0]
 800627c:	009b      	lsls	r3, r3, #2
 800627e:	441a      	add	r2, r3
 8006280:	89fb      	ldrh	r3, [r7, #14]
 8006282:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006286:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800628a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800628e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006292:	b29b      	uxth	r3, r3
 8006294:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	78db      	ldrb	r3, [r3, #3]
 800629a:	2b01      	cmp	r3, #1
 800629c:	d06c      	beq.n	8006378 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800629e:	687a      	ldr	r2, [r7, #4]
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	781b      	ldrb	r3, [r3, #0]
 80062a4:	009b      	lsls	r3, r3, #2
 80062a6:	4413      	add	r3, r2
 80062a8:	881b      	ldrh	r3, [r3, #0]
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062b4:	81bb      	strh	r3, [r7, #12]
 80062b6:	89bb      	ldrh	r3, [r7, #12]
 80062b8:	f083 0320 	eor.w	r3, r3, #32
 80062bc:	81bb      	strh	r3, [r7, #12]
 80062be:	687a      	ldr	r2, [r7, #4]
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	009b      	lsls	r3, r3, #2
 80062c6:	441a      	add	r2, r3
 80062c8:	89bb      	ldrh	r3, [r7, #12]
 80062ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062da:	b29b      	uxth	r3, r3
 80062dc:	8013      	strh	r3, [r2, #0]
 80062de:	e04b      	b.n	8006378 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80062e0:	687a      	ldr	r2, [r7, #4]
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	781b      	ldrb	r3, [r3, #0]
 80062e6:	009b      	lsls	r3, r3, #2
 80062e8:	4413      	add	r3, r2
 80062ea:	881b      	ldrh	r3, [r3, #0]
 80062ec:	82fb      	strh	r3, [r7, #22]
 80062ee:	8afb      	ldrh	r3, [r7, #22]
 80062f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d01b      	beq.n	8006330 <USB_EPClearStall+0x106>
 80062f8:	687a      	ldr	r2, [r7, #4]
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	781b      	ldrb	r3, [r3, #0]
 80062fe:	009b      	lsls	r3, r3, #2
 8006300:	4413      	add	r3, r2
 8006302:	881b      	ldrh	r3, [r3, #0]
 8006304:	b29b      	uxth	r3, r3
 8006306:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800630a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800630e:	82bb      	strh	r3, [r7, #20]
 8006310:	687a      	ldr	r2, [r7, #4]
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	781b      	ldrb	r3, [r3, #0]
 8006316:	009b      	lsls	r3, r3, #2
 8006318:	441a      	add	r2, r3
 800631a:	8abb      	ldrh	r3, [r7, #20]
 800631c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006320:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006324:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006328:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800632c:	b29b      	uxth	r3, r3
 800632e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006330:	687a      	ldr	r2, [r7, #4]
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	781b      	ldrb	r3, [r3, #0]
 8006336:	009b      	lsls	r3, r3, #2
 8006338:	4413      	add	r3, r2
 800633a:	881b      	ldrh	r3, [r3, #0]
 800633c:	b29b      	uxth	r3, r3
 800633e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006342:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006346:	827b      	strh	r3, [r7, #18]
 8006348:	8a7b      	ldrh	r3, [r7, #18]
 800634a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800634e:	827b      	strh	r3, [r7, #18]
 8006350:	8a7b      	ldrh	r3, [r7, #18]
 8006352:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006356:	827b      	strh	r3, [r7, #18]
 8006358:	687a      	ldr	r2, [r7, #4]
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	781b      	ldrb	r3, [r3, #0]
 800635e:	009b      	lsls	r3, r3, #2
 8006360:	441a      	add	r2, r3
 8006362:	8a7b      	ldrh	r3, [r7, #18]
 8006364:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006368:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800636c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006370:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006374:	b29b      	uxth	r3, r3
 8006376:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006378:	2300      	movs	r3, #0
}
 800637a:	4618      	mov	r0, r3
 800637c:	371c      	adds	r7, #28
 800637e:	46bd      	mov	sp, r7
 8006380:	bc80      	pop	{r7}
 8006382:	4770      	bx	lr

08006384 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006384:	b480      	push	{r7}
 8006386:	b083      	sub	sp, #12
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	460b      	mov	r3, r1
 800638e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006390:	78fb      	ldrb	r3, [r7, #3]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d103      	bne.n	800639e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2280      	movs	r2, #128	; 0x80
 800639a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800639e:	2300      	movs	r3, #0
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	370c      	adds	r7, #12
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bc80      	pop	{r7}
 80063a8:	4770      	bx	lr

080063aa <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80063aa:	b480      	push	{r7}
 80063ac:	b083      	sub	sp, #12
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80063b2:	2300      	movs	r3, #0
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	370c      	adds	r7, #12
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bc80      	pop	{r7}
 80063bc:	4770      	bx	lr

080063be <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80063be:	b480      	push	{r7}
 80063c0:	b083      	sub	sp, #12
 80063c2:	af00      	add	r7, sp, #0
 80063c4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80063c6:	2300      	movs	r3, #0
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	370c      	adds	r7, #12
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bc80      	pop	{r7}
 80063d0:	4770      	bx	lr

080063d2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80063d2:	b480      	push	{r7}
 80063d4:	b085      	sub	sp, #20
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80063e0:	b29b      	uxth	r3, r3
 80063e2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80063e4:	68fb      	ldr	r3, [r7, #12]
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3714      	adds	r7, #20
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bc80      	pop	{r7}
 80063ee:	4770      	bx	lr

080063f0 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b083      	sub	sp, #12
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
 80063f8:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80063fa:	2300      	movs	r3, #0
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	370c      	adds	r7, #12
 8006400:	46bd      	mov	sp, r7
 8006402:	bc80      	pop	{r7}
 8006404:	4770      	bx	lr

08006406 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006406:	b480      	push	{r7}
 8006408:	b08b      	sub	sp, #44	; 0x2c
 800640a:	af00      	add	r7, sp, #0
 800640c:	60f8      	str	r0, [r7, #12]
 800640e:	60b9      	str	r1, [r7, #8]
 8006410:	4611      	mov	r1, r2
 8006412:	461a      	mov	r2, r3
 8006414:	460b      	mov	r3, r1
 8006416:	80fb      	strh	r3, [r7, #6]
 8006418:	4613      	mov	r3, r2
 800641a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800641c:	88bb      	ldrh	r3, [r7, #4]
 800641e:	3301      	adds	r3, #1
 8006420:	085b      	lsrs	r3, r3, #1
 8006422:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800642c:	88fb      	ldrh	r3, [r7, #6]
 800642e:	005a      	lsls	r2, r3, #1
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	4413      	add	r3, r2
 8006434:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006438:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800643a:	69bb      	ldr	r3, [r7, #24]
 800643c:	627b      	str	r3, [r7, #36]	; 0x24
 800643e:	e01e      	b.n	800647e <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8006440:	69fb      	ldr	r3, [r7, #28]
 8006442:	781b      	ldrb	r3, [r3, #0]
 8006444:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8006446:	69fb      	ldr	r3, [r7, #28]
 8006448:	3301      	adds	r3, #1
 800644a:	781b      	ldrb	r3, [r3, #0]
 800644c:	021b      	lsls	r3, r3, #8
 800644e:	b21a      	sxth	r2, r3
 8006450:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006454:	4313      	orrs	r3, r2
 8006456:	b21b      	sxth	r3, r3
 8006458:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800645a:	6a3b      	ldr	r3, [r7, #32]
 800645c:	8a7a      	ldrh	r2, [r7, #18]
 800645e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006460:	6a3b      	ldr	r3, [r7, #32]
 8006462:	3302      	adds	r3, #2
 8006464:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006466:	6a3b      	ldr	r3, [r7, #32]
 8006468:	3302      	adds	r3, #2
 800646a:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800646c:	69fb      	ldr	r3, [r7, #28]
 800646e:	3301      	adds	r3, #1
 8006470:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8006472:	69fb      	ldr	r3, [r7, #28]
 8006474:	3301      	adds	r3, #1
 8006476:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647a:	3b01      	subs	r3, #1
 800647c:	627b      	str	r3, [r7, #36]	; 0x24
 800647e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006480:	2b00      	cmp	r3, #0
 8006482:	d1dd      	bne.n	8006440 <USB_WritePMA+0x3a>
  }
}
 8006484:	bf00      	nop
 8006486:	bf00      	nop
 8006488:	372c      	adds	r7, #44	; 0x2c
 800648a:	46bd      	mov	sp, r7
 800648c:	bc80      	pop	{r7}
 800648e:	4770      	bx	lr

08006490 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006490:	b480      	push	{r7}
 8006492:	b08b      	sub	sp, #44	; 0x2c
 8006494:	af00      	add	r7, sp, #0
 8006496:	60f8      	str	r0, [r7, #12]
 8006498:	60b9      	str	r1, [r7, #8]
 800649a:	4611      	mov	r1, r2
 800649c:	461a      	mov	r2, r3
 800649e:	460b      	mov	r3, r1
 80064a0:	80fb      	strh	r3, [r7, #6]
 80064a2:	4613      	mov	r3, r2
 80064a4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80064a6:	88bb      	ldrh	r3, [r7, #4]
 80064a8:	085b      	lsrs	r3, r3, #1
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80064b6:	88fb      	ldrh	r3, [r7, #6]
 80064b8:	005a      	lsls	r2, r3, #1
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	4413      	add	r3, r2
 80064be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064c2:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80064c4:	69bb      	ldr	r3, [r7, #24]
 80064c6:	627b      	str	r3, [r7, #36]	; 0x24
 80064c8:	e01b      	b.n	8006502 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80064ca:	6a3b      	ldr	r3, [r7, #32]
 80064cc:	881b      	ldrh	r3, [r3, #0]
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80064d2:	6a3b      	ldr	r3, [r7, #32]
 80064d4:	3302      	adds	r3, #2
 80064d6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	b2da      	uxtb	r2, r3
 80064dc:	69fb      	ldr	r3, [r7, #28]
 80064de:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80064e0:	69fb      	ldr	r3, [r7, #28]
 80064e2:	3301      	adds	r3, #1
 80064e4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	0a1b      	lsrs	r3, r3, #8
 80064ea:	b2da      	uxtb	r2, r3
 80064ec:	69fb      	ldr	r3, [r7, #28]
 80064ee:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80064f0:	69fb      	ldr	r3, [r7, #28]
 80064f2:	3301      	adds	r3, #1
 80064f4:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80064f6:	6a3b      	ldr	r3, [r7, #32]
 80064f8:	3302      	adds	r3, #2
 80064fa:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 80064fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fe:	3b01      	subs	r3, #1
 8006500:	627b      	str	r3, [r7, #36]	; 0x24
 8006502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006504:	2b00      	cmp	r3, #0
 8006506:	d1e0      	bne.n	80064ca <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8006508:	88bb      	ldrh	r3, [r7, #4]
 800650a:	f003 0301 	and.w	r3, r3, #1
 800650e:	b29b      	uxth	r3, r3
 8006510:	2b00      	cmp	r3, #0
 8006512:	d007      	beq.n	8006524 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8006514:	6a3b      	ldr	r3, [r7, #32]
 8006516:	881b      	ldrh	r3, [r3, #0]
 8006518:	b29b      	uxth	r3, r3
 800651a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	b2da      	uxtb	r2, r3
 8006520:	69fb      	ldr	r3, [r7, #28]
 8006522:	701a      	strb	r2, [r3, #0]
  }
}
 8006524:	bf00      	nop
 8006526:	372c      	adds	r7, #44	; 0x2c
 8006528:	46bd      	mov	sp, r7
 800652a:	bc80      	pop	{r7}
 800652c:	4770      	bx	lr

0800652e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800652e:	b580      	push	{r7, lr}
 8006530:	b084      	sub	sp, #16
 8006532:	af00      	add	r7, sp, #0
 8006534:	6078      	str	r0, [r7, #4]
 8006536:	460b      	mov	r3, r1
 8006538:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800653a:	2300      	movs	r3, #0
 800653c:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	7c1b      	ldrb	r3, [r3, #16]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d115      	bne.n	8006572 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006546:	f44f 7300 	mov.w	r3, #512	; 0x200
 800654a:	2202      	movs	r2, #2
 800654c:	2181      	movs	r1, #129	; 0x81
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f001 fe87 	bl	8008262 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2201      	movs	r2, #1
 8006558:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800655a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800655e:	2202      	movs	r2, #2
 8006560:	2101      	movs	r1, #1
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f001 fe7d 	bl	8008262 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2201      	movs	r2, #1
 800656c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8006570:	e012      	b.n	8006598 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006572:	2340      	movs	r3, #64	; 0x40
 8006574:	2202      	movs	r2, #2
 8006576:	2181      	movs	r1, #129	; 0x81
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f001 fe72 	bl	8008262 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2201      	movs	r2, #1
 8006582:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006584:	2340      	movs	r3, #64	; 0x40
 8006586:	2202      	movs	r2, #2
 8006588:	2101      	movs	r1, #1
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f001 fe69 	bl	8008262 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2201      	movs	r2, #1
 8006594:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006598:	2308      	movs	r3, #8
 800659a:	2203      	movs	r2, #3
 800659c:	2182      	movs	r1, #130	; 0x82
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f001 fe5f 	bl	8008262 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2201      	movs	r2, #1
 80065a8:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80065aa:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80065ae:	f001 ff7f 	bl	80084b0 <USBD_static_malloc>
 80065b2:	4602      	mov	r2, r0
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d102      	bne.n	80065ca <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80065c4:	2301      	movs	r3, #1
 80065c6:	73fb      	strb	r3, [r7, #15]
 80065c8:	e026      	b.n	8006618 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065d0:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	2200      	movs	r2, #0
 80065e0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	2200      	movs	r2, #0
 80065e8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	7c1b      	ldrb	r3, [r3, #16]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d109      	bne.n	8006608 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80065fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80065fe:	2101      	movs	r1, #1
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f001 ff1f 	bl	8008444 <USBD_LL_PrepareReceive>
 8006606:	e007      	b.n	8006618 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800660e:	2340      	movs	r3, #64	; 0x40
 8006610:	2101      	movs	r1, #1
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f001 ff16 	bl	8008444 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006618:	7bfb      	ldrb	r3, [r7, #15]
}
 800661a:	4618      	mov	r0, r3
 800661c:	3710      	adds	r7, #16
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}

08006622 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006622:	b580      	push	{r7, lr}
 8006624:	b084      	sub	sp, #16
 8006626:	af00      	add	r7, sp, #0
 8006628:	6078      	str	r0, [r7, #4]
 800662a:	460b      	mov	r3, r1
 800662c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800662e:	2300      	movs	r3, #0
 8006630:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006632:	2181      	movs	r1, #129	; 0x81
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f001 fe3a 	bl	80082ae <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2200      	movs	r2, #0
 800663e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006640:	2101      	movs	r1, #1
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f001 fe33 	bl	80082ae <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2200      	movs	r2, #0
 800664c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006650:	2182      	movs	r1, #130	; 0x82
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f001 fe2b 	bl	80082ae <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2200      	movs	r2, #0
 800665c:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006664:	2b00      	cmp	r3, #0
 8006666:	d00e      	beq.n	8006686 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006678:	4618      	mov	r0, r3
 800667a:	f001 ff25 	bl	80084c8 <USBD_static_free>
    pdev->pClassData = NULL;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2200      	movs	r2, #0
 8006682:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8006686:	7bfb      	ldrb	r3, [r7, #15]
}
 8006688:	4618      	mov	r0, r3
 800668a:	3710      	adds	r7, #16
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}

08006690 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b086      	sub	sp, #24
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066a0:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80066a2:	2300      	movs	r3, #0
 80066a4:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80066a6:	2300      	movs	r3, #0
 80066a8:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80066aa:	2300      	movs	r3, #0
 80066ac:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	781b      	ldrb	r3, [r3, #0]
 80066b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d039      	beq.n	800672e <USBD_CDC_Setup+0x9e>
 80066ba:	2b20      	cmp	r3, #32
 80066bc:	d17f      	bne.n	80067be <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	88db      	ldrh	r3, [r3, #6]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d029      	beq.n	800671a <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	781b      	ldrb	r3, [r3, #0]
 80066ca:	b25b      	sxtb	r3, r3
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	da11      	bge.n	80066f4 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	683a      	ldr	r2, [r7, #0]
 80066da:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80066dc:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80066de:	683a      	ldr	r2, [r7, #0]
 80066e0:	88d2      	ldrh	r2, [r2, #6]
 80066e2:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80066e4:	6939      	ldr	r1, [r7, #16]
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	88db      	ldrh	r3, [r3, #6]
 80066ea:	461a      	mov	r2, r3
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f001 fa0a 	bl	8007b06 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80066f2:	e06b      	b.n	80067cc <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	785a      	ldrb	r2, [r3, #1]
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	88db      	ldrh	r3, [r3, #6]
 8006702:	b2da      	uxtb	r2, r3
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800670a:	6939      	ldr	r1, [r7, #16]
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	88db      	ldrh	r3, [r3, #6]
 8006710:	461a      	mov	r2, r3
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f001 fa25 	bl	8007b62 <USBD_CtlPrepareRx>
      break;
 8006718:	e058      	b.n	80067cc <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	683a      	ldr	r2, [r7, #0]
 8006724:	7850      	ldrb	r0, [r2, #1]
 8006726:	2200      	movs	r2, #0
 8006728:	6839      	ldr	r1, [r7, #0]
 800672a:	4798      	blx	r3
      break;
 800672c:	e04e      	b.n	80067cc <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	785b      	ldrb	r3, [r3, #1]
 8006732:	2b0b      	cmp	r3, #11
 8006734:	d02e      	beq.n	8006794 <USBD_CDC_Setup+0x104>
 8006736:	2b0b      	cmp	r3, #11
 8006738:	dc38      	bgt.n	80067ac <USBD_CDC_Setup+0x11c>
 800673a:	2b00      	cmp	r3, #0
 800673c:	d002      	beq.n	8006744 <USBD_CDC_Setup+0xb4>
 800673e:	2b0a      	cmp	r3, #10
 8006740:	d014      	beq.n	800676c <USBD_CDC_Setup+0xdc>
 8006742:	e033      	b.n	80067ac <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800674a:	2b03      	cmp	r3, #3
 800674c:	d107      	bne.n	800675e <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800674e:	f107 030c 	add.w	r3, r7, #12
 8006752:	2202      	movs	r2, #2
 8006754:	4619      	mov	r1, r3
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f001 f9d5 	bl	8007b06 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800675c:	e02e      	b.n	80067bc <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800675e:	6839      	ldr	r1, [r7, #0]
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f001 f966 	bl	8007a32 <USBD_CtlError>
            ret = USBD_FAIL;
 8006766:	2302      	movs	r3, #2
 8006768:	75fb      	strb	r3, [r7, #23]
          break;
 800676a:	e027      	b.n	80067bc <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006772:	2b03      	cmp	r3, #3
 8006774:	d107      	bne.n	8006786 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006776:	f107 030f 	add.w	r3, r7, #15
 800677a:	2201      	movs	r2, #1
 800677c:	4619      	mov	r1, r3
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f001 f9c1 	bl	8007b06 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006784:	e01a      	b.n	80067bc <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006786:	6839      	ldr	r1, [r7, #0]
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f001 f952 	bl	8007a32 <USBD_CtlError>
            ret = USBD_FAIL;
 800678e:	2302      	movs	r3, #2
 8006790:	75fb      	strb	r3, [r7, #23]
          break;
 8006792:	e013      	b.n	80067bc <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800679a:	2b03      	cmp	r3, #3
 800679c:	d00d      	beq.n	80067ba <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800679e:	6839      	ldr	r1, [r7, #0]
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f001 f946 	bl	8007a32 <USBD_CtlError>
            ret = USBD_FAIL;
 80067a6:	2302      	movs	r3, #2
 80067a8:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80067aa:	e006      	b.n	80067ba <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80067ac:	6839      	ldr	r1, [r7, #0]
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f001 f93f 	bl	8007a32 <USBD_CtlError>
          ret = USBD_FAIL;
 80067b4:	2302      	movs	r3, #2
 80067b6:	75fb      	strb	r3, [r7, #23]
          break;
 80067b8:	e000      	b.n	80067bc <USBD_CDC_Setup+0x12c>
          break;
 80067ba:	bf00      	nop
      }
      break;
 80067bc:	e006      	b.n	80067cc <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80067be:	6839      	ldr	r1, [r7, #0]
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f001 f936 	bl	8007a32 <USBD_CtlError>
      ret = USBD_FAIL;
 80067c6:	2302      	movs	r3, #2
 80067c8:	75fb      	strb	r3, [r7, #23]
      break;
 80067ca:	bf00      	nop
  }

  return ret;
 80067cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3718      	adds	r7, #24
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}

080067d6 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80067d6:	b580      	push	{r7, lr}
 80067d8:	b084      	sub	sp, #16
 80067da:	af00      	add	r7, sp, #0
 80067dc:	6078      	str	r0, [r7, #4]
 80067de:	460b      	mov	r3, r1
 80067e0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067e8:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80067f0:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d03a      	beq.n	8006872 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80067fc:	78fa      	ldrb	r2, [r7, #3]
 80067fe:	6879      	ldr	r1, [r7, #4]
 8006800:	4613      	mov	r3, r2
 8006802:	009b      	lsls	r3, r3, #2
 8006804:	4413      	add	r3, r2
 8006806:	009b      	lsls	r3, r3, #2
 8006808:	440b      	add	r3, r1
 800680a:	331c      	adds	r3, #28
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d029      	beq.n	8006866 <USBD_CDC_DataIn+0x90>
 8006812:	78fa      	ldrb	r2, [r7, #3]
 8006814:	6879      	ldr	r1, [r7, #4]
 8006816:	4613      	mov	r3, r2
 8006818:	009b      	lsls	r3, r3, #2
 800681a:	4413      	add	r3, r2
 800681c:	009b      	lsls	r3, r3, #2
 800681e:	440b      	add	r3, r1
 8006820:	331c      	adds	r3, #28
 8006822:	681a      	ldr	r2, [r3, #0]
 8006824:	78f9      	ldrb	r1, [r7, #3]
 8006826:	68b8      	ldr	r0, [r7, #8]
 8006828:	460b      	mov	r3, r1
 800682a:	009b      	lsls	r3, r3, #2
 800682c:	440b      	add	r3, r1
 800682e:	00db      	lsls	r3, r3, #3
 8006830:	4403      	add	r3, r0
 8006832:	3338      	adds	r3, #56	; 0x38
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	fbb2 f1f3 	udiv	r1, r2, r3
 800683a:	fb01 f303 	mul.w	r3, r1, r3
 800683e:	1ad3      	subs	r3, r2, r3
 8006840:	2b00      	cmp	r3, #0
 8006842:	d110      	bne.n	8006866 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006844:	78fa      	ldrb	r2, [r7, #3]
 8006846:	6879      	ldr	r1, [r7, #4]
 8006848:	4613      	mov	r3, r2
 800684a:	009b      	lsls	r3, r3, #2
 800684c:	4413      	add	r3, r2
 800684e:	009b      	lsls	r3, r3, #2
 8006850:	440b      	add	r3, r1
 8006852:	331c      	adds	r3, #28
 8006854:	2200      	movs	r2, #0
 8006856:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006858:	78f9      	ldrb	r1, [r7, #3]
 800685a:	2300      	movs	r3, #0
 800685c:	2200      	movs	r2, #0
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f001 fdcd 	bl	80083fe <USBD_LL_Transmit>
 8006864:	e003      	b.n	800686e <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2200      	movs	r2, #0
 800686a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800686e:	2300      	movs	r3, #0
 8006870:	e000      	b.n	8006874 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006872:	2302      	movs	r3, #2
  }
}
 8006874:	4618      	mov	r0, r3
 8006876:	3710      	adds	r7, #16
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}

0800687c <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b084      	sub	sp, #16
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	460b      	mov	r3, r1
 8006886:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800688e:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006890:	78fb      	ldrb	r3, [r7, #3]
 8006892:	4619      	mov	r1, r3
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f001 fdf8 	bl	800848a <USBD_LL_GetRxDataSize>
 800689a:	4602      	mov	r2, r0
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d00d      	beq.n	80068c8 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80068b2:	68db      	ldr	r3, [r3, #12]
 80068b4:	68fa      	ldr	r2, [r7, #12]
 80068b6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80068ba:	68fa      	ldr	r2, [r7, #12]
 80068bc:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80068c0:	4611      	mov	r1, r2
 80068c2:	4798      	blx	r3

    return USBD_OK;
 80068c4:	2300      	movs	r3, #0
 80068c6:	e000      	b.n	80068ca <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80068c8:	2302      	movs	r3, #2
  }
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3710      	adds	r7, #16
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}

080068d2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80068d2:	b580      	push	{r7, lr}
 80068d4:	b084      	sub	sp, #16
 80068d6:	af00      	add	r7, sp, #0
 80068d8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068e0:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d015      	beq.n	8006918 <USBD_CDC_EP0_RxReady+0x46>
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80068f2:	2bff      	cmp	r3, #255	; 0xff
 80068f4:	d010      	beq.n	8006918 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80068fc:	689b      	ldr	r3, [r3, #8]
 80068fe:	68fa      	ldr	r2, [r7, #12]
 8006900:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006904:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006906:	68fa      	ldr	r2, [r7, #12]
 8006908:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800690c:	b292      	uxth	r2, r2
 800690e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	22ff      	movs	r2, #255	; 0xff
 8006914:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006918:	2300      	movs	r3, #0
}
 800691a:	4618      	mov	r0, r3
 800691c:	3710      	adds	r7, #16
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}
	...

08006924 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006924:	b480      	push	{r7}
 8006926:	b083      	sub	sp, #12
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2243      	movs	r2, #67	; 0x43
 8006930:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006932:	4b03      	ldr	r3, [pc, #12]	; (8006940 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006934:	4618      	mov	r0, r3
 8006936:	370c      	adds	r7, #12
 8006938:	46bd      	mov	sp, r7
 800693a:	bc80      	pop	{r7}
 800693c:	4770      	bx	lr
 800693e:	bf00      	nop
 8006940:	20000094 	.word	0x20000094

08006944 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006944:	b480      	push	{r7}
 8006946:	b083      	sub	sp, #12
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2243      	movs	r2, #67	; 0x43
 8006950:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006952:	4b03      	ldr	r3, [pc, #12]	; (8006960 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006954:	4618      	mov	r0, r3
 8006956:	370c      	adds	r7, #12
 8006958:	46bd      	mov	sp, r7
 800695a:	bc80      	pop	{r7}
 800695c:	4770      	bx	lr
 800695e:	bf00      	nop
 8006960:	20000050 	.word	0x20000050

08006964 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006964:	b480      	push	{r7}
 8006966:	b083      	sub	sp, #12
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2243      	movs	r2, #67	; 0x43
 8006970:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006972:	4b03      	ldr	r3, [pc, #12]	; (8006980 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006974:	4618      	mov	r0, r3
 8006976:	370c      	adds	r7, #12
 8006978:	46bd      	mov	sp, r7
 800697a:	bc80      	pop	{r7}
 800697c:	4770      	bx	lr
 800697e:	bf00      	nop
 8006980:	200000d8 	.word	0x200000d8

08006984 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006984:	b480      	push	{r7}
 8006986:	b083      	sub	sp, #12
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	220a      	movs	r2, #10
 8006990:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006992:	4b03      	ldr	r3, [pc, #12]	; (80069a0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006994:	4618      	mov	r0, r3
 8006996:	370c      	adds	r7, #12
 8006998:	46bd      	mov	sp, r7
 800699a:	bc80      	pop	{r7}
 800699c:	4770      	bx	lr
 800699e:	bf00      	nop
 80069a0:	2000000c 	.word	0x2000000c

080069a4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b085      	sub	sp, #20
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
 80069ac:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80069ae:	2302      	movs	r3, #2
 80069b0:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d005      	beq.n	80069c4 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	683a      	ldr	r2, [r7, #0]
 80069bc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80069c0:	2300      	movs	r3, #0
 80069c2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80069c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3714      	adds	r7, #20
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bc80      	pop	{r7}
 80069ce:	4770      	bx	lr

080069d0 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b087      	sub	sp, #28
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	60f8      	str	r0, [r7, #12]
 80069d8:	60b9      	str	r1, [r7, #8]
 80069da:	4613      	mov	r3, r2
 80069dc:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069e4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	68ba      	ldr	r2, [r7, #8]
 80069ea:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80069ee:	88fa      	ldrh	r2, [r7, #6]
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80069f6:	2300      	movs	r3, #0
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	371c      	adds	r7, #28
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bc80      	pop	{r7}
 8006a00:	4770      	bx	lr

08006a02 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006a02:	b480      	push	{r7}
 8006a04:	b085      	sub	sp, #20
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	6078      	str	r0, [r7, #4]
 8006a0a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a12:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	683a      	ldr	r2, [r7, #0]
 8006a18:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006a1c:	2300      	movs	r3, #0
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3714      	adds	r7, #20
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bc80      	pop	{r7}
 8006a26:	4770      	bx	lr

08006a28 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b084      	sub	sp, #16
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a36:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d01c      	beq.n	8006a7c <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d115      	bne.n	8006a78 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	2201      	movs	r2, #1
 8006a50:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	2181      	movs	r1, #129	; 0x81
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f001 fcc5 	bl	80083fe <USBD_LL_Transmit>

      return USBD_OK;
 8006a74:	2300      	movs	r3, #0
 8006a76:	e002      	b.n	8006a7e <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	e000      	b.n	8006a7e <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8006a7c:	2302      	movs	r3, #2
  }
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3710      	adds	r7, #16
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}

08006a86 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006a86:	b580      	push	{r7, lr}
 8006a88:	b084      	sub	sp, #16
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a94:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d017      	beq.n	8006ad0 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	7c1b      	ldrb	r3, [r3, #16]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d109      	bne.n	8006abc <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006aae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ab2:	2101      	movs	r1, #1
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f001 fcc5 	bl	8008444 <USBD_LL_PrepareReceive>
 8006aba:	e007      	b.n	8006acc <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006ac2:	2340      	movs	r3, #64	; 0x40
 8006ac4:	2101      	movs	r1, #1
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f001 fcbc 	bl	8008444 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006acc:	2300      	movs	r3, #0
 8006ace:	e000      	b.n	8006ad2 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006ad0:	2302      	movs	r3, #2
  }
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3710      	adds	r7, #16
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}

08006ada <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006ada:	b580      	push	{r7, lr}
 8006adc:	b084      	sub	sp, #16
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	60f8      	str	r0, [r7, #12]
 8006ae2:	60b9      	str	r1, [r7, #8]
 8006ae4:	4613      	mov	r3, r2
 8006ae6:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d101      	bne.n	8006af2 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006aee:	2302      	movs	r3, #2
 8006af0:	e01a      	b.n	8006b28 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d003      	beq.n	8006b04 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2200      	movs	r2, #0
 8006b00:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d003      	beq.n	8006b12 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	68ba      	ldr	r2, [r7, #8]
 8006b0e:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	2201      	movs	r2, #1
 8006b16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	79fa      	ldrb	r2, [r7, #7]
 8006b1e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006b20:	68f8      	ldr	r0, [r7, #12]
 8006b22:	f001 fb29 	bl	8008178 <USBD_LL_Init>

  return USBD_OK;
 8006b26:	2300      	movs	r3, #0
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3710      	adds	r7, #16
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}

08006b30 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b085      	sub	sp, #20
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
 8006b38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d006      	beq.n	8006b52 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	683a      	ldr	r2, [r7, #0]
 8006b48:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	73fb      	strb	r3, [r7, #15]
 8006b50:	e001      	b.n	8006b56 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006b52:	2302      	movs	r3, #2
 8006b54:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3714      	adds	r7, #20
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bc80      	pop	{r7}
 8006b60:	4770      	bx	lr

08006b62 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006b62:	b580      	push	{r7, lr}
 8006b64:	b082      	sub	sp, #8
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f001 fb5e 	bl	800822c <USBD_LL_Start>

  return USBD_OK;
 8006b70:	2300      	movs	r3, #0
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3708      	adds	r7, #8
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}

08006b7a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006b7a:	b480      	push	{r7}
 8006b7c:	b083      	sub	sp, #12
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006b82:	2300      	movs	r3, #0
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	370c      	adds	r7, #12
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bc80      	pop	{r7}
 8006b8c:	4770      	bx	lr

08006b8e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006b8e:	b580      	push	{r7, lr}
 8006b90:	b084      	sub	sp, #16
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	6078      	str	r0, [r7, #4]
 8006b96:	460b      	mov	r3, r1
 8006b98:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006b9a:	2302      	movs	r3, #2
 8006b9c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d00c      	beq.n	8006bc2 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	78fa      	ldrb	r2, [r7, #3]
 8006bb2:	4611      	mov	r1, r2
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	4798      	blx	r3
 8006bb8:	4603      	mov	r3, r0
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d101      	bne.n	8006bc2 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006bc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	3710      	adds	r7, #16
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}

08006bcc <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b082      	sub	sp, #8
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	460b      	mov	r3, r1
 8006bd6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	78fa      	ldrb	r2, [r7, #3]
 8006be2:	4611      	mov	r1, r2
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	4798      	blx	r3

  return USBD_OK;
 8006be8:	2300      	movs	r3, #0
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3708      	adds	r7, #8
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}

08006bf2 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006bf2:	b580      	push	{r7, lr}
 8006bf4:	b082      	sub	sp, #8
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	6078      	str	r0, [r7, #4]
 8006bfa:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006c02:	6839      	ldr	r1, [r7, #0]
 8006c04:	4618      	mov	r0, r3
 8006c06:	f000 fed8 	bl	80079ba <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2201      	movs	r2, #1
 8006c0e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006c18:	461a      	mov	r2, r3
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006c26:	f003 031f 	and.w	r3, r3, #31
 8006c2a:	2b02      	cmp	r3, #2
 8006c2c:	d016      	beq.n	8006c5c <USBD_LL_SetupStage+0x6a>
 8006c2e:	2b02      	cmp	r3, #2
 8006c30:	d81c      	bhi.n	8006c6c <USBD_LL_SetupStage+0x7a>
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d002      	beq.n	8006c3c <USBD_LL_SetupStage+0x4a>
 8006c36:	2b01      	cmp	r3, #1
 8006c38:	d008      	beq.n	8006c4c <USBD_LL_SetupStage+0x5a>
 8006c3a:	e017      	b.n	8006c6c <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006c42:	4619      	mov	r1, r3
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f000 f9cb 	bl	8006fe0 <USBD_StdDevReq>
      break;
 8006c4a:	e01a      	b.n	8006c82 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006c52:	4619      	mov	r1, r3
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f000 fa2d 	bl	80070b4 <USBD_StdItfReq>
      break;
 8006c5a:	e012      	b.n	8006c82 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006c62:	4619      	mov	r1, r3
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f000 fa6d 	bl	8007144 <USBD_StdEPReq>
      break;
 8006c6a:	e00a      	b.n	8006c82 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006c72:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006c76:	b2db      	uxtb	r3, r3
 8006c78:	4619      	mov	r1, r3
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f001 fb36 	bl	80082ec <USBD_LL_StallEP>
      break;
 8006c80:	bf00      	nop
  }

  return USBD_OK;
 8006c82:	2300      	movs	r3, #0
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	3708      	adds	r7, #8
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}

08006c8c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b086      	sub	sp, #24
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	60f8      	str	r0, [r7, #12]
 8006c94:	460b      	mov	r3, r1
 8006c96:	607a      	str	r2, [r7, #4]
 8006c98:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006c9a:	7afb      	ldrb	r3, [r7, #11]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d14b      	bne.n	8006d38 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006ca6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006cae:	2b03      	cmp	r3, #3
 8006cb0:	d134      	bne.n	8006d1c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	68da      	ldr	r2, [r3, #12]
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	691b      	ldr	r3, [r3, #16]
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	d919      	bls.n	8006cf2 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	68da      	ldr	r2, [r3, #12]
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	691b      	ldr	r3, [r3, #16]
 8006cc6:	1ad2      	subs	r2, r2, r3
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	68da      	ldr	r2, [r3, #12]
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	d203      	bcs.n	8006ce0 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006cdc:	b29b      	uxth	r3, r3
 8006cde:	e002      	b.n	8006ce6 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	461a      	mov	r2, r3
 8006ce8:	6879      	ldr	r1, [r7, #4]
 8006cea:	68f8      	ldr	r0, [r7, #12]
 8006cec:	f000 ff57 	bl	8007b9e <USBD_CtlContinueRx>
 8006cf0:	e038      	b.n	8006d64 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cf8:	691b      	ldr	r3, [r3, #16]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d00a      	beq.n	8006d14 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006d04:	2b03      	cmp	r3, #3
 8006d06:	d105      	bne.n	8006d14 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d0e:	691b      	ldr	r3, [r3, #16]
 8006d10:	68f8      	ldr	r0, [r7, #12]
 8006d12:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006d14:	68f8      	ldr	r0, [r7, #12]
 8006d16:	f000 ff54 	bl	8007bc2 <USBD_CtlSendStatus>
 8006d1a:	e023      	b.n	8006d64 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006d22:	2b05      	cmp	r3, #5
 8006d24:	d11e      	bne.n	8006d64 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006d2e:	2100      	movs	r1, #0
 8006d30:	68f8      	ldr	r0, [r7, #12]
 8006d32:	f001 fadb 	bl	80082ec <USBD_LL_StallEP>
 8006d36:	e015      	b.n	8006d64 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d3e:	699b      	ldr	r3, [r3, #24]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d00d      	beq.n	8006d60 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006d4a:	2b03      	cmp	r3, #3
 8006d4c:	d108      	bne.n	8006d60 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d54:	699b      	ldr	r3, [r3, #24]
 8006d56:	7afa      	ldrb	r2, [r7, #11]
 8006d58:	4611      	mov	r1, r2
 8006d5a:	68f8      	ldr	r0, [r7, #12]
 8006d5c:	4798      	blx	r3
 8006d5e:	e001      	b.n	8006d64 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006d60:	2302      	movs	r3, #2
 8006d62:	e000      	b.n	8006d66 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006d64:	2300      	movs	r3, #0
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	3718      	adds	r7, #24
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}

08006d6e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006d6e:	b580      	push	{r7, lr}
 8006d70:	b086      	sub	sp, #24
 8006d72:	af00      	add	r7, sp, #0
 8006d74:	60f8      	str	r0, [r7, #12]
 8006d76:	460b      	mov	r3, r1
 8006d78:	607a      	str	r2, [r7, #4]
 8006d7a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006d7c:	7afb      	ldrb	r3, [r7, #11]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d17f      	bne.n	8006e82 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	3314      	adds	r3, #20
 8006d86:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006d8e:	2b02      	cmp	r3, #2
 8006d90:	d15c      	bne.n	8006e4c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	68da      	ldr	r2, [r3, #12]
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	691b      	ldr	r3, [r3, #16]
 8006d9a:	429a      	cmp	r2, r3
 8006d9c:	d915      	bls.n	8006dca <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	68da      	ldr	r2, [r3, #12]
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	691b      	ldr	r3, [r3, #16]
 8006da6:	1ad2      	subs	r2, r2, r3
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	68db      	ldr	r3, [r3, #12]
 8006db0:	b29b      	uxth	r3, r3
 8006db2:	461a      	mov	r2, r3
 8006db4:	6879      	ldr	r1, [r7, #4]
 8006db6:	68f8      	ldr	r0, [r7, #12]
 8006db8:	f000 fec1 	bl	8007b3e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	2100      	movs	r1, #0
 8006dc2:	68f8      	ldr	r0, [r7, #12]
 8006dc4:	f001 fb3e 	bl	8008444 <USBD_LL_PrepareReceive>
 8006dc8:	e04e      	b.n	8006e68 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	689b      	ldr	r3, [r3, #8]
 8006dce:	697a      	ldr	r2, [r7, #20]
 8006dd0:	6912      	ldr	r2, [r2, #16]
 8006dd2:	fbb3 f1f2 	udiv	r1, r3, r2
 8006dd6:	fb01 f202 	mul.w	r2, r1, r2
 8006dda:	1a9b      	subs	r3, r3, r2
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d11c      	bne.n	8006e1a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	689a      	ldr	r2, [r3, #8]
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006de8:	429a      	cmp	r2, r3
 8006dea:	d316      	bcc.n	8006e1a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	689a      	ldr	r2, [r3, #8]
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006df6:	429a      	cmp	r2, r3
 8006df8:	d20f      	bcs.n	8006e1a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	2100      	movs	r1, #0
 8006dfe:	68f8      	ldr	r0, [r7, #12]
 8006e00:	f000 fe9d 	bl	8007b3e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2200      	movs	r2, #0
 8006e08:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	2200      	movs	r2, #0
 8006e10:	2100      	movs	r1, #0
 8006e12:	68f8      	ldr	r0, [r7, #12]
 8006e14:	f001 fb16 	bl	8008444 <USBD_LL_PrepareReceive>
 8006e18:	e026      	b.n	8006e68 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e20:	68db      	ldr	r3, [r3, #12]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d00a      	beq.n	8006e3c <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006e2c:	2b03      	cmp	r3, #3
 8006e2e:	d105      	bne.n	8006e3c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e36:	68db      	ldr	r3, [r3, #12]
 8006e38:	68f8      	ldr	r0, [r7, #12]
 8006e3a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006e3c:	2180      	movs	r1, #128	; 0x80
 8006e3e:	68f8      	ldr	r0, [r7, #12]
 8006e40:	f001 fa54 	bl	80082ec <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006e44:	68f8      	ldr	r0, [r7, #12]
 8006e46:	f000 fecf 	bl	8007be8 <USBD_CtlReceiveStatus>
 8006e4a:	e00d      	b.n	8006e68 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006e52:	2b04      	cmp	r3, #4
 8006e54:	d004      	beq.n	8006e60 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d103      	bne.n	8006e68 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006e60:	2180      	movs	r1, #128	; 0x80
 8006e62:	68f8      	ldr	r0, [r7, #12]
 8006e64:	f001 fa42 	bl	80082ec <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006e6e:	2b01      	cmp	r3, #1
 8006e70:	d11d      	bne.n	8006eae <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006e72:	68f8      	ldr	r0, [r7, #12]
 8006e74:	f7ff fe81 	bl	8006b7a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006e80:	e015      	b.n	8006eae <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e88:	695b      	ldr	r3, [r3, #20]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d00d      	beq.n	8006eaa <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006e94:	2b03      	cmp	r3, #3
 8006e96:	d108      	bne.n	8006eaa <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e9e:	695b      	ldr	r3, [r3, #20]
 8006ea0:	7afa      	ldrb	r2, [r7, #11]
 8006ea2:	4611      	mov	r1, r2
 8006ea4:	68f8      	ldr	r0, [r7, #12]
 8006ea6:	4798      	blx	r3
 8006ea8:	e001      	b.n	8006eae <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006eaa:	2302      	movs	r3, #2
 8006eac:	e000      	b.n	8006eb0 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006eae:	2300      	movs	r3, #0
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3718      	adds	r7, #24
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}

08006eb8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b082      	sub	sp, #8
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006ec0:	2340      	movs	r3, #64	; 0x40
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	2100      	movs	r1, #0
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f001 f9cb 	bl	8008262 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2201      	movs	r2, #1
 8006ed0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2240      	movs	r2, #64	; 0x40
 8006ed8:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006edc:	2340      	movs	r3, #64	; 0x40
 8006ede:	2200      	movs	r2, #0
 8006ee0:	2180      	movs	r1, #128	; 0x80
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f001 f9bd 	bl	8008262 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2201      	movs	r2, #1
 8006eec:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2240      	movs	r2, #64	; 0x40
 8006ef2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2200      	movs	r2, #0
 8006f00:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2200      	movs	r2, #0
 8006f08:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d009      	beq.n	8006f30 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f22:	685b      	ldr	r3, [r3, #4]
 8006f24:	687a      	ldr	r2, [r7, #4]
 8006f26:	6852      	ldr	r2, [r2, #4]
 8006f28:	b2d2      	uxtb	r2, r2
 8006f2a:	4611      	mov	r1, r2
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	4798      	blx	r3
  }

  return USBD_OK;
 8006f30:	2300      	movs	r3, #0
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3708      	adds	r7, #8
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}

08006f3a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006f3a:	b480      	push	{r7}
 8006f3c:	b083      	sub	sp, #12
 8006f3e:	af00      	add	r7, sp, #0
 8006f40:	6078      	str	r0, [r7, #4]
 8006f42:	460b      	mov	r3, r1
 8006f44:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	78fa      	ldrb	r2, [r7, #3]
 8006f4a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006f4c:	2300      	movs	r3, #0
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	370c      	adds	r7, #12
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bc80      	pop	{r7}
 8006f56:	4770      	bx	lr

08006f58 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b083      	sub	sp, #12
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2204      	movs	r2, #4
 8006f70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006f74:	2300      	movs	r3, #0
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	370c      	adds	r7, #12
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bc80      	pop	{r7}
 8006f7e:	4770      	bx	lr

08006f80 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b083      	sub	sp, #12
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f8e:	2b04      	cmp	r3, #4
 8006f90:	d105      	bne.n	8006f9e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006f9e:	2300      	movs	r3, #0
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	370c      	adds	r7, #12
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bc80      	pop	{r7}
 8006fa8:	4770      	bx	lr

08006faa <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006faa:	b580      	push	{r7, lr}
 8006fac:	b082      	sub	sp, #8
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fb8:	2b03      	cmp	r3, #3
 8006fba:	d10b      	bne.n	8006fd4 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fc2:	69db      	ldr	r3, [r3, #28]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d005      	beq.n	8006fd4 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fce:	69db      	ldr	r3, [r3, #28]
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006fd4:	2300      	movs	r3, #0
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3708      	adds	r7, #8
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}
	...

08006fe0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b084      	sub	sp, #16
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
 8006fe8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006fea:	2300      	movs	r3, #0
 8006fec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	781b      	ldrb	r3, [r3, #0]
 8006ff2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006ff6:	2b40      	cmp	r3, #64	; 0x40
 8006ff8:	d005      	beq.n	8007006 <USBD_StdDevReq+0x26>
 8006ffa:	2b40      	cmp	r3, #64	; 0x40
 8006ffc:	d84f      	bhi.n	800709e <USBD_StdDevReq+0xbe>
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d009      	beq.n	8007016 <USBD_StdDevReq+0x36>
 8007002:	2b20      	cmp	r3, #32
 8007004:	d14b      	bne.n	800709e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800700c:	689b      	ldr	r3, [r3, #8]
 800700e:	6839      	ldr	r1, [r7, #0]
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	4798      	blx	r3
      break;
 8007014:	e048      	b.n	80070a8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	785b      	ldrb	r3, [r3, #1]
 800701a:	2b09      	cmp	r3, #9
 800701c:	d839      	bhi.n	8007092 <USBD_StdDevReq+0xb2>
 800701e:	a201      	add	r2, pc, #4	; (adr r2, 8007024 <USBD_StdDevReq+0x44>)
 8007020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007024:	08007075 	.word	0x08007075
 8007028:	08007089 	.word	0x08007089
 800702c:	08007093 	.word	0x08007093
 8007030:	0800707f 	.word	0x0800707f
 8007034:	08007093 	.word	0x08007093
 8007038:	08007057 	.word	0x08007057
 800703c:	0800704d 	.word	0x0800704d
 8007040:	08007093 	.word	0x08007093
 8007044:	0800706b 	.word	0x0800706b
 8007048:	08007061 	.word	0x08007061
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800704c:	6839      	ldr	r1, [r7, #0]
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f000 f9dc 	bl	800740c <USBD_GetDescriptor>
          break;
 8007054:	e022      	b.n	800709c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007056:	6839      	ldr	r1, [r7, #0]
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f000 fb3f 	bl	80076dc <USBD_SetAddress>
          break;
 800705e:	e01d      	b.n	800709c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007060:	6839      	ldr	r1, [r7, #0]
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f000 fb7e 	bl	8007764 <USBD_SetConfig>
          break;
 8007068:	e018      	b.n	800709c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800706a:	6839      	ldr	r1, [r7, #0]
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f000 fc07 	bl	8007880 <USBD_GetConfig>
          break;
 8007072:	e013      	b.n	800709c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007074:	6839      	ldr	r1, [r7, #0]
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f000 fc37 	bl	80078ea <USBD_GetStatus>
          break;
 800707c:	e00e      	b.n	800709c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800707e:	6839      	ldr	r1, [r7, #0]
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f000 fc65 	bl	8007950 <USBD_SetFeature>
          break;
 8007086:	e009      	b.n	800709c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007088:	6839      	ldr	r1, [r7, #0]
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f000 fc74 	bl	8007978 <USBD_ClrFeature>
          break;
 8007090:	e004      	b.n	800709c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007092:	6839      	ldr	r1, [r7, #0]
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	f000 fccc 	bl	8007a32 <USBD_CtlError>
          break;
 800709a:	bf00      	nop
      }
      break;
 800709c:	e004      	b.n	80070a8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800709e:	6839      	ldr	r1, [r7, #0]
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f000 fcc6 	bl	8007a32 <USBD_CtlError>
      break;
 80070a6:	bf00      	nop
  }

  return ret;
 80070a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3710      	adds	r7, #16
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}
 80070b2:	bf00      	nop

080070b4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b084      	sub	sp, #16
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
 80070bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80070be:	2300      	movs	r3, #0
 80070c0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	781b      	ldrb	r3, [r3, #0]
 80070c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80070ca:	2b40      	cmp	r3, #64	; 0x40
 80070cc:	d005      	beq.n	80070da <USBD_StdItfReq+0x26>
 80070ce:	2b40      	cmp	r3, #64	; 0x40
 80070d0:	d82e      	bhi.n	8007130 <USBD_StdItfReq+0x7c>
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d001      	beq.n	80070da <USBD_StdItfReq+0x26>
 80070d6:	2b20      	cmp	r3, #32
 80070d8:	d12a      	bne.n	8007130 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070e0:	3b01      	subs	r3, #1
 80070e2:	2b02      	cmp	r3, #2
 80070e4:	d81d      	bhi.n	8007122 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	889b      	ldrh	r3, [r3, #4]
 80070ea:	b2db      	uxtb	r3, r3
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d813      	bhi.n	8007118 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070f6:	689b      	ldr	r3, [r3, #8]
 80070f8:	6839      	ldr	r1, [r7, #0]
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	4798      	blx	r3
 80070fe:	4603      	mov	r3, r0
 8007100:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	88db      	ldrh	r3, [r3, #6]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d110      	bne.n	800712c <USBD_StdItfReq+0x78>
 800710a:	7bfb      	ldrb	r3, [r7, #15]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d10d      	bne.n	800712c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f000 fd56 	bl	8007bc2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007116:	e009      	b.n	800712c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007118:	6839      	ldr	r1, [r7, #0]
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f000 fc89 	bl	8007a32 <USBD_CtlError>
          break;
 8007120:	e004      	b.n	800712c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007122:	6839      	ldr	r1, [r7, #0]
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f000 fc84 	bl	8007a32 <USBD_CtlError>
          break;
 800712a:	e000      	b.n	800712e <USBD_StdItfReq+0x7a>
          break;
 800712c:	bf00      	nop
      }
      break;
 800712e:	e004      	b.n	800713a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007130:	6839      	ldr	r1, [r7, #0]
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f000 fc7d 	bl	8007a32 <USBD_CtlError>
      break;
 8007138:	bf00      	nop
  }

  return USBD_OK;
 800713a:	2300      	movs	r3, #0
}
 800713c:	4618      	mov	r0, r3
 800713e:	3710      	adds	r7, #16
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}

08007144 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b084      	sub	sp, #16
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
 800714c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800714e:	2300      	movs	r3, #0
 8007150:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	889b      	ldrh	r3, [r3, #4]
 8007156:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	781b      	ldrb	r3, [r3, #0]
 800715c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007160:	2b40      	cmp	r3, #64	; 0x40
 8007162:	d007      	beq.n	8007174 <USBD_StdEPReq+0x30>
 8007164:	2b40      	cmp	r3, #64	; 0x40
 8007166:	f200 8146 	bhi.w	80073f6 <USBD_StdEPReq+0x2b2>
 800716a:	2b00      	cmp	r3, #0
 800716c:	d00a      	beq.n	8007184 <USBD_StdEPReq+0x40>
 800716e:	2b20      	cmp	r3, #32
 8007170:	f040 8141 	bne.w	80073f6 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800717a:	689b      	ldr	r3, [r3, #8]
 800717c:	6839      	ldr	r1, [r7, #0]
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	4798      	blx	r3
      break;
 8007182:	e13d      	b.n	8007400 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	781b      	ldrb	r3, [r3, #0]
 8007188:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800718c:	2b20      	cmp	r3, #32
 800718e:	d10a      	bne.n	80071a6 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007196:	689b      	ldr	r3, [r3, #8]
 8007198:	6839      	ldr	r1, [r7, #0]
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	4798      	blx	r3
 800719e:	4603      	mov	r3, r0
 80071a0:	73fb      	strb	r3, [r7, #15]

        return ret;
 80071a2:	7bfb      	ldrb	r3, [r7, #15]
 80071a4:	e12d      	b.n	8007402 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	785b      	ldrb	r3, [r3, #1]
 80071aa:	2b03      	cmp	r3, #3
 80071ac:	d007      	beq.n	80071be <USBD_StdEPReq+0x7a>
 80071ae:	2b03      	cmp	r3, #3
 80071b0:	f300 811b 	bgt.w	80073ea <USBD_StdEPReq+0x2a6>
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d072      	beq.n	800729e <USBD_StdEPReq+0x15a>
 80071b8:	2b01      	cmp	r3, #1
 80071ba:	d03a      	beq.n	8007232 <USBD_StdEPReq+0xee>
 80071bc:	e115      	b.n	80073ea <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071c4:	2b02      	cmp	r3, #2
 80071c6:	d002      	beq.n	80071ce <USBD_StdEPReq+0x8a>
 80071c8:	2b03      	cmp	r3, #3
 80071ca:	d015      	beq.n	80071f8 <USBD_StdEPReq+0xb4>
 80071cc:	e02b      	b.n	8007226 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80071ce:	7bbb      	ldrb	r3, [r7, #14]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d00c      	beq.n	80071ee <USBD_StdEPReq+0xaa>
 80071d4:	7bbb      	ldrb	r3, [r7, #14]
 80071d6:	2b80      	cmp	r3, #128	; 0x80
 80071d8:	d009      	beq.n	80071ee <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80071da:	7bbb      	ldrb	r3, [r7, #14]
 80071dc:	4619      	mov	r1, r3
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f001 f884 	bl	80082ec <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80071e4:	2180      	movs	r1, #128	; 0x80
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f001 f880 	bl	80082ec <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80071ec:	e020      	b.n	8007230 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80071ee:	6839      	ldr	r1, [r7, #0]
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f000 fc1e 	bl	8007a32 <USBD_CtlError>
              break;
 80071f6:	e01b      	b.n	8007230 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	885b      	ldrh	r3, [r3, #2]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d10e      	bne.n	800721e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007200:	7bbb      	ldrb	r3, [r7, #14]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d00b      	beq.n	800721e <USBD_StdEPReq+0xda>
 8007206:	7bbb      	ldrb	r3, [r7, #14]
 8007208:	2b80      	cmp	r3, #128	; 0x80
 800720a:	d008      	beq.n	800721e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	88db      	ldrh	r3, [r3, #6]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d104      	bne.n	800721e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007214:	7bbb      	ldrb	r3, [r7, #14]
 8007216:	4619      	mov	r1, r3
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f001 f867 	bl	80082ec <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f000 fccf 	bl	8007bc2 <USBD_CtlSendStatus>

              break;
 8007224:	e004      	b.n	8007230 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007226:	6839      	ldr	r1, [r7, #0]
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f000 fc02 	bl	8007a32 <USBD_CtlError>
              break;
 800722e:	bf00      	nop
          }
          break;
 8007230:	e0e0      	b.n	80073f4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007238:	2b02      	cmp	r3, #2
 800723a:	d002      	beq.n	8007242 <USBD_StdEPReq+0xfe>
 800723c:	2b03      	cmp	r3, #3
 800723e:	d015      	beq.n	800726c <USBD_StdEPReq+0x128>
 8007240:	e026      	b.n	8007290 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007242:	7bbb      	ldrb	r3, [r7, #14]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d00c      	beq.n	8007262 <USBD_StdEPReq+0x11e>
 8007248:	7bbb      	ldrb	r3, [r7, #14]
 800724a:	2b80      	cmp	r3, #128	; 0x80
 800724c:	d009      	beq.n	8007262 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800724e:	7bbb      	ldrb	r3, [r7, #14]
 8007250:	4619      	mov	r1, r3
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f001 f84a 	bl	80082ec <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007258:	2180      	movs	r1, #128	; 0x80
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f001 f846 	bl	80082ec <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007260:	e01c      	b.n	800729c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007262:	6839      	ldr	r1, [r7, #0]
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f000 fbe4 	bl	8007a32 <USBD_CtlError>
              break;
 800726a:	e017      	b.n	800729c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	885b      	ldrh	r3, [r3, #2]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d112      	bne.n	800729a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007274:	7bbb      	ldrb	r3, [r7, #14]
 8007276:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800727a:	2b00      	cmp	r3, #0
 800727c:	d004      	beq.n	8007288 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800727e:	7bbb      	ldrb	r3, [r7, #14]
 8007280:	4619      	mov	r1, r3
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f001 f851 	bl	800832a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f000 fc9a 	bl	8007bc2 <USBD_CtlSendStatus>
              }
              break;
 800728e:	e004      	b.n	800729a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007290:	6839      	ldr	r1, [r7, #0]
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f000 fbcd 	bl	8007a32 <USBD_CtlError>
              break;
 8007298:	e000      	b.n	800729c <USBD_StdEPReq+0x158>
              break;
 800729a:	bf00      	nop
          }
          break;
 800729c:	e0aa      	b.n	80073f4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072a4:	2b02      	cmp	r3, #2
 80072a6:	d002      	beq.n	80072ae <USBD_StdEPReq+0x16a>
 80072a8:	2b03      	cmp	r3, #3
 80072aa:	d032      	beq.n	8007312 <USBD_StdEPReq+0x1ce>
 80072ac:	e097      	b.n	80073de <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80072ae:	7bbb      	ldrb	r3, [r7, #14]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d007      	beq.n	80072c4 <USBD_StdEPReq+0x180>
 80072b4:	7bbb      	ldrb	r3, [r7, #14]
 80072b6:	2b80      	cmp	r3, #128	; 0x80
 80072b8:	d004      	beq.n	80072c4 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80072ba:	6839      	ldr	r1, [r7, #0]
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f000 fbb8 	bl	8007a32 <USBD_CtlError>
                break;
 80072c2:	e091      	b.n	80073e8 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80072c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	da0b      	bge.n	80072e4 <USBD_StdEPReq+0x1a0>
 80072cc:	7bbb      	ldrb	r3, [r7, #14]
 80072ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80072d2:	4613      	mov	r3, r2
 80072d4:	009b      	lsls	r3, r3, #2
 80072d6:	4413      	add	r3, r2
 80072d8:	009b      	lsls	r3, r3, #2
 80072da:	3310      	adds	r3, #16
 80072dc:	687a      	ldr	r2, [r7, #4]
 80072de:	4413      	add	r3, r2
 80072e0:	3304      	adds	r3, #4
 80072e2:	e00b      	b.n	80072fc <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80072e4:	7bbb      	ldrb	r3, [r7, #14]
 80072e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80072ea:	4613      	mov	r3, r2
 80072ec:	009b      	lsls	r3, r3, #2
 80072ee:	4413      	add	r3, r2
 80072f0:	009b      	lsls	r3, r3, #2
 80072f2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80072f6:	687a      	ldr	r2, [r7, #4]
 80072f8:	4413      	add	r3, r2
 80072fa:	3304      	adds	r3, #4
 80072fc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	2200      	movs	r2, #0
 8007302:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	2202      	movs	r2, #2
 8007308:	4619      	mov	r1, r3
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f000 fbfb 	bl	8007b06 <USBD_CtlSendData>
              break;
 8007310:	e06a      	b.n	80073e8 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007312:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007316:	2b00      	cmp	r3, #0
 8007318:	da11      	bge.n	800733e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800731a:	7bbb      	ldrb	r3, [r7, #14]
 800731c:	f003 020f 	and.w	r2, r3, #15
 8007320:	6879      	ldr	r1, [r7, #4]
 8007322:	4613      	mov	r3, r2
 8007324:	009b      	lsls	r3, r3, #2
 8007326:	4413      	add	r3, r2
 8007328:	009b      	lsls	r3, r3, #2
 800732a:	440b      	add	r3, r1
 800732c:	3318      	adds	r3, #24
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d117      	bne.n	8007364 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007334:	6839      	ldr	r1, [r7, #0]
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 fb7b 	bl	8007a32 <USBD_CtlError>
                  break;
 800733c:	e054      	b.n	80073e8 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800733e:	7bbb      	ldrb	r3, [r7, #14]
 8007340:	f003 020f 	and.w	r2, r3, #15
 8007344:	6879      	ldr	r1, [r7, #4]
 8007346:	4613      	mov	r3, r2
 8007348:	009b      	lsls	r3, r3, #2
 800734a:	4413      	add	r3, r2
 800734c:	009b      	lsls	r3, r3, #2
 800734e:	440b      	add	r3, r1
 8007350:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d104      	bne.n	8007364 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800735a:	6839      	ldr	r1, [r7, #0]
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f000 fb68 	bl	8007a32 <USBD_CtlError>
                  break;
 8007362:	e041      	b.n	80073e8 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007364:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007368:	2b00      	cmp	r3, #0
 800736a:	da0b      	bge.n	8007384 <USBD_StdEPReq+0x240>
 800736c:	7bbb      	ldrb	r3, [r7, #14]
 800736e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007372:	4613      	mov	r3, r2
 8007374:	009b      	lsls	r3, r3, #2
 8007376:	4413      	add	r3, r2
 8007378:	009b      	lsls	r3, r3, #2
 800737a:	3310      	adds	r3, #16
 800737c:	687a      	ldr	r2, [r7, #4]
 800737e:	4413      	add	r3, r2
 8007380:	3304      	adds	r3, #4
 8007382:	e00b      	b.n	800739c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007384:	7bbb      	ldrb	r3, [r7, #14]
 8007386:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800738a:	4613      	mov	r3, r2
 800738c:	009b      	lsls	r3, r3, #2
 800738e:	4413      	add	r3, r2
 8007390:	009b      	lsls	r3, r3, #2
 8007392:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007396:	687a      	ldr	r2, [r7, #4]
 8007398:	4413      	add	r3, r2
 800739a:	3304      	adds	r3, #4
 800739c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800739e:	7bbb      	ldrb	r3, [r7, #14]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d002      	beq.n	80073aa <USBD_StdEPReq+0x266>
 80073a4:	7bbb      	ldrb	r3, [r7, #14]
 80073a6:	2b80      	cmp	r3, #128	; 0x80
 80073a8:	d103      	bne.n	80073b2 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	2200      	movs	r2, #0
 80073ae:	601a      	str	r2, [r3, #0]
 80073b0:	e00e      	b.n	80073d0 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80073b2:	7bbb      	ldrb	r3, [r7, #14]
 80073b4:	4619      	mov	r1, r3
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 ffd6 	bl	8008368 <USBD_LL_IsStallEP>
 80073bc:	4603      	mov	r3, r0
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d003      	beq.n	80073ca <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	2201      	movs	r2, #1
 80073c6:	601a      	str	r2, [r3, #0]
 80073c8:	e002      	b.n	80073d0 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	2200      	movs	r2, #0
 80073ce:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	2202      	movs	r2, #2
 80073d4:	4619      	mov	r1, r3
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f000 fb95 	bl	8007b06 <USBD_CtlSendData>
              break;
 80073dc:	e004      	b.n	80073e8 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80073de:	6839      	ldr	r1, [r7, #0]
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f000 fb26 	bl	8007a32 <USBD_CtlError>
              break;
 80073e6:	bf00      	nop
          }
          break;
 80073e8:	e004      	b.n	80073f4 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80073ea:	6839      	ldr	r1, [r7, #0]
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f000 fb20 	bl	8007a32 <USBD_CtlError>
          break;
 80073f2:	bf00      	nop
      }
      break;
 80073f4:	e004      	b.n	8007400 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80073f6:	6839      	ldr	r1, [r7, #0]
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f000 fb1a 	bl	8007a32 <USBD_CtlError>
      break;
 80073fe:	bf00      	nop
  }

  return ret;
 8007400:	7bfb      	ldrb	r3, [r7, #15]
}
 8007402:	4618      	mov	r0, r3
 8007404:	3710      	adds	r7, #16
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}
	...

0800740c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b084      	sub	sp, #16
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
 8007414:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007416:	2300      	movs	r3, #0
 8007418:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800741a:	2300      	movs	r3, #0
 800741c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800741e:	2300      	movs	r3, #0
 8007420:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	885b      	ldrh	r3, [r3, #2]
 8007426:	0a1b      	lsrs	r3, r3, #8
 8007428:	b29b      	uxth	r3, r3
 800742a:	3b01      	subs	r3, #1
 800742c:	2b06      	cmp	r3, #6
 800742e:	f200 8128 	bhi.w	8007682 <USBD_GetDescriptor+0x276>
 8007432:	a201      	add	r2, pc, #4	; (adr r2, 8007438 <USBD_GetDescriptor+0x2c>)
 8007434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007438:	08007455 	.word	0x08007455
 800743c:	0800746d 	.word	0x0800746d
 8007440:	080074ad 	.word	0x080074ad
 8007444:	08007683 	.word	0x08007683
 8007448:	08007683 	.word	0x08007683
 800744c:	08007623 	.word	0x08007623
 8007450:	0800764f 	.word	0x0800764f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	687a      	ldr	r2, [r7, #4]
 800745e:	7c12      	ldrb	r2, [r2, #16]
 8007460:	f107 0108 	add.w	r1, r7, #8
 8007464:	4610      	mov	r0, r2
 8007466:	4798      	blx	r3
 8007468:	60f8      	str	r0, [r7, #12]
      break;
 800746a:	e112      	b.n	8007692 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	7c1b      	ldrb	r3, [r3, #16]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d10d      	bne.n	8007490 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800747a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800747c:	f107 0208 	add.w	r2, r7, #8
 8007480:	4610      	mov	r0, r2
 8007482:	4798      	blx	r3
 8007484:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	3301      	adds	r3, #1
 800748a:	2202      	movs	r2, #2
 800748c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800748e:	e100      	b.n	8007692 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007498:	f107 0208 	add.w	r2, r7, #8
 800749c:	4610      	mov	r0, r2
 800749e:	4798      	blx	r3
 80074a0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	3301      	adds	r3, #1
 80074a6:	2202      	movs	r2, #2
 80074a8:	701a      	strb	r2, [r3, #0]
      break;
 80074aa:	e0f2      	b.n	8007692 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	885b      	ldrh	r3, [r3, #2]
 80074b0:	b2db      	uxtb	r3, r3
 80074b2:	2b05      	cmp	r3, #5
 80074b4:	f200 80ac 	bhi.w	8007610 <USBD_GetDescriptor+0x204>
 80074b8:	a201      	add	r2, pc, #4	; (adr r2, 80074c0 <USBD_GetDescriptor+0xb4>)
 80074ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074be:	bf00      	nop
 80074c0:	080074d9 	.word	0x080074d9
 80074c4:	0800750d 	.word	0x0800750d
 80074c8:	08007541 	.word	0x08007541
 80074cc:	08007575 	.word	0x08007575
 80074d0:	080075a9 	.word	0x080075a9
 80074d4:	080075dd 	.word	0x080075dd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d00b      	beq.n	80074fc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80074ea:	685b      	ldr	r3, [r3, #4]
 80074ec:	687a      	ldr	r2, [r7, #4]
 80074ee:	7c12      	ldrb	r2, [r2, #16]
 80074f0:	f107 0108 	add.w	r1, r7, #8
 80074f4:	4610      	mov	r0, r2
 80074f6:	4798      	blx	r3
 80074f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80074fa:	e091      	b.n	8007620 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80074fc:	6839      	ldr	r1, [r7, #0]
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f000 fa97 	bl	8007a32 <USBD_CtlError>
            err++;
 8007504:	7afb      	ldrb	r3, [r7, #11]
 8007506:	3301      	adds	r3, #1
 8007508:	72fb      	strb	r3, [r7, #11]
          break;
 800750a:	e089      	b.n	8007620 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007512:	689b      	ldr	r3, [r3, #8]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d00b      	beq.n	8007530 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800751e:	689b      	ldr	r3, [r3, #8]
 8007520:	687a      	ldr	r2, [r7, #4]
 8007522:	7c12      	ldrb	r2, [r2, #16]
 8007524:	f107 0108 	add.w	r1, r7, #8
 8007528:	4610      	mov	r0, r2
 800752a:	4798      	blx	r3
 800752c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800752e:	e077      	b.n	8007620 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007530:	6839      	ldr	r1, [r7, #0]
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f000 fa7d 	bl	8007a32 <USBD_CtlError>
            err++;
 8007538:	7afb      	ldrb	r3, [r7, #11]
 800753a:	3301      	adds	r3, #1
 800753c:	72fb      	strb	r3, [r7, #11]
          break;
 800753e:	e06f      	b.n	8007620 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007546:	68db      	ldr	r3, [r3, #12]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d00b      	beq.n	8007564 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007552:	68db      	ldr	r3, [r3, #12]
 8007554:	687a      	ldr	r2, [r7, #4]
 8007556:	7c12      	ldrb	r2, [r2, #16]
 8007558:	f107 0108 	add.w	r1, r7, #8
 800755c:	4610      	mov	r0, r2
 800755e:	4798      	blx	r3
 8007560:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007562:	e05d      	b.n	8007620 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007564:	6839      	ldr	r1, [r7, #0]
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f000 fa63 	bl	8007a32 <USBD_CtlError>
            err++;
 800756c:	7afb      	ldrb	r3, [r7, #11]
 800756e:	3301      	adds	r3, #1
 8007570:	72fb      	strb	r3, [r7, #11]
          break;
 8007572:	e055      	b.n	8007620 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800757a:	691b      	ldr	r3, [r3, #16]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d00b      	beq.n	8007598 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007586:	691b      	ldr	r3, [r3, #16]
 8007588:	687a      	ldr	r2, [r7, #4]
 800758a:	7c12      	ldrb	r2, [r2, #16]
 800758c:	f107 0108 	add.w	r1, r7, #8
 8007590:	4610      	mov	r0, r2
 8007592:	4798      	blx	r3
 8007594:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007596:	e043      	b.n	8007620 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007598:	6839      	ldr	r1, [r7, #0]
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f000 fa49 	bl	8007a32 <USBD_CtlError>
            err++;
 80075a0:	7afb      	ldrb	r3, [r7, #11]
 80075a2:	3301      	adds	r3, #1
 80075a4:	72fb      	strb	r3, [r7, #11]
          break;
 80075a6:	e03b      	b.n	8007620 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80075ae:	695b      	ldr	r3, [r3, #20]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d00b      	beq.n	80075cc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80075ba:	695b      	ldr	r3, [r3, #20]
 80075bc:	687a      	ldr	r2, [r7, #4]
 80075be:	7c12      	ldrb	r2, [r2, #16]
 80075c0:	f107 0108 	add.w	r1, r7, #8
 80075c4:	4610      	mov	r0, r2
 80075c6:	4798      	blx	r3
 80075c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075ca:	e029      	b.n	8007620 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80075cc:	6839      	ldr	r1, [r7, #0]
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f000 fa2f 	bl	8007a32 <USBD_CtlError>
            err++;
 80075d4:	7afb      	ldrb	r3, [r7, #11]
 80075d6:	3301      	adds	r3, #1
 80075d8:	72fb      	strb	r3, [r7, #11]
          break;
 80075da:	e021      	b.n	8007620 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80075e2:	699b      	ldr	r3, [r3, #24]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d00b      	beq.n	8007600 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80075ee:	699b      	ldr	r3, [r3, #24]
 80075f0:	687a      	ldr	r2, [r7, #4]
 80075f2:	7c12      	ldrb	r2, [r2, #16]
 80075f4:	f107 0108 	add.w	r1, r7, #8
 80075f8:	4610      	mov	r0, r2
 80075fa:	4798      	blx	r3
 80075fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075fe:	e00f      	b.n	8007620 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007600:	6839      	ldr	r1, [r7, #0]
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f000 fa15 	bl	8007a32 <USBD_CtlError>
            err++;
 8007608:	7afb      	ldrb	r3, [r7, #11]
 800760a:	3301      	adds	r3, #1
 800760c:	72fb      	strb	r3, [r7, #11]
          break;
 800760e:	e007      	b.n	8007620 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007610:	6839      	ldr	r1, [r7, #0]
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f000 fa0d 	bl	8007a32 <USBD_CtlError>
          err++;
 8007618:	7afb      	ldrb	r3, [r7, #11]
 800761a:	3301      	adds	r3, #1
 800761c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800761e:	e038      	b.n	8007692 <USBD_GetDescriptor+0x286>
 8007620:	e037      	b.n	8007692 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	7c1b      	ldrb	r3, [r3, #16]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d109      	bne.n	800763e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007632:	f107 0208 	add.w	r2, r7, #8
 8007636:	4610      	mov	r0, r2
 8007638:	4798      	blx	r3
 800763a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800763c:	e029      	b.n	8007692 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800763e:	6839      	ldr	r1, [r7, #0]
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f000 f9f6 	bl	8007a32 <USBD_CtlError>
        err++;
 8007646:	7afb      	ldrb	r3, [r7, #11]
 8007648:	3301      	adds	r3, #1
 800764a:	72fb      	strb	r3, [r7, #11]
      break;
 800764c:	e021      	b.n	8007692 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	7c1b      	ldrb	r3, [r3, #16]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d10d      	bne.n	8007672 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800765c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800765e:	f107 0208 	add.w	r2, r7, #8
 8007662:	4610      	mov	r0, r2
 8007664:	4798      	blx	r3
 8007666:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	3301      	adds	r3, #1
 800766c:	2207      	movs	r2, #7
 800766e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007670:	e00f      	b.n	8007692 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007672:	6839      	ldr	r1, [r7, #0]
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f000 f9dc 	bl	8007a32 <USBD_CtlError>
        err++;
 800767a:	7afb      	ldrb	r3, [r7, #11]
 800767c:	3301      	adds	r3, #1
 800767e:	72fb      	strb	r3, [r7, #11]
      break;
 8007680:	e007      	b.n	8007692 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007682:	6839      	ldr	r1, [r7, #0]
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f000 f9d4 	bl	8007a32 <USBD_CtlError>
      err++;
 800768a:	7afb      	ldrb	r3, [r7, #11]
 800768c:	3301      	adds	r3, #1
 800768e:	72fb      	strb	r3, [r7, #11]
      break;
 8007690:	bf00      	nop
  }

  if (err != 0U)
 8007692:	7afb      	ldrb	r3, [r7, #11]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d11c      	bne.n	80076d2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007698:	893b      	ldrh	r3, [r7, #8]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d011      	beq.n	80076c2 <USBD_GetDescriptor+0x2b6>
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	88db      	ldrh	r3, [r3, #6]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d00d      	beq.n	80076c2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	88da      	ldrh	r2, [r3, #6]
 80076aa:	893b      	ldrh	r3, [r7, #8]
 80076ac:	4293      	cmp	r3, r2
 80076ae:	bf28      	it	cs
 80076b0:	4613      	movcs	r3, r2
 80076b2:	b29b      	uxth	r3, r3
 80076b4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80076b6:	893b      	ldrh	r3, [r7, #8]
 80076b8:	461a      	mov	r2, r3
 80076ba:	68f9      	ldr	r1, [r7, #12]
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f000 fa22 	bl	8007b06 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	88db      	ldrh	r3, [r3, #6]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d104      	bne.n	80076d4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f000 fa79 	bl	8007bc2 <USBD_CtlSendStatus>
 80076d0:	e000      	b.n	80076d4 <USBD_GetDescriptor+0x2c8>
    return;
 80076d2:	bf00      	nop
    }
  }
}
 80076d4:	3710      	adds	r7, #16
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}
 80076da:	bf00      	nop

080076dc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b084      	sub	sp, #16
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
 80076e4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	889b      	ldrh	r3, [r3, #4]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d130      	bne.n	8007750 <USBD_SetAddress+0x74>
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	88db      	ldrh	r3, [r3, #6]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d12c      	bne.n	8007750 <USBD_SetAddress+0x74>
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	885b      	ldrh	r3, [r3, #2]
 80076fa:	2b7f      	cmp	r3, #127	; 0x7f
 80076fc:	d828      	bhi.n	8007750 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	885b      	ldrh	r3, [r3, #2]
 8007702:	b2db      	uxtb	r3, r3
 8007704:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007708:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007710:	2b03      	cmp	r3, #3
 8007712:	d104      	bne.n	800771e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007714:	6839      	ldr	r1, [r7, #0]
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f000 f98b 	bl	8007a32 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800771c:	e01d      	b.n	800775a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	7bfa      	ldrb	r2, [r7, #15]
 8007722:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007726:	7bfb      	ldrb	r3, [r7, #15]
 8007728:	4619      	mov	r1, r3
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f000 fe48 	bl	80083c0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f000 fa46 	bl	8007bc2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007736:	7bfb      	ldrb	r3, [r7, #15]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d004      	beq.n	8007746 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2202      	movs	r2, #2
 8007740:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007744:	e009      	b.n	800775a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2201      	movs	r2, #1
 800774a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800774e:	e004      	b.n	800775a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007750:	6839      	ldr	r1, [r7, #0]
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f000 f96d 	bl	8007a32 <USBD_CtlError>
  }
}
 8007758:	bf00      	nop
 800775a:	bf00      	nop
 800775c:	3710      	adds	r7, #16
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}
	...

08007764 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b082      	sub	sp, #8
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
 800776c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	885b      	ldrh	r3, [r3, #2]
 8007772:	b2da      	uxtb	r2, r3
 8007774:	4b41      	ldr	r3, [pc, #260]	; (800787c <USBD_SetConfig+0x118>)
 8007776:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007778:	4b40      	ldr	r3, [pc, #256]	; (800787c <USBD_SetConfig+0x118>)
 800777a:	781b      	ldrb	r3, [r3, #0]
 800777c:	2b01      	cmp	r3, #1
 800777e:	d904      	bls.n	800778a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007780:	6839      	ldr	r1, [r7, #0]
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f000 f955 	bl	8007a32 <USBD_CtlError>
 8007788:	e075      	b.n	8007876 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007790:	2b02      	cmp	r3, #2
 8007792:	d002      	beq.n	800779a <USBD_SetConfig+0x36>
 8007794:	2b03      	cmp	r3, #3
 8007796:	d023      	beq.n	80077e0 <USBD_SetConfig+0x7c>
 8007798:	e062      	b.n	8007860 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800779a:	4b38      	ldr	r3, [pc, #224]	; (800787c <USBD_SetConfig+0x118>)
 800779c:	781b      	ldrb	r3, [r3, #0]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d01a      	beq.n	80077d8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80077a2:	4b36      	ldr	r3, [pc, #216]	; (800787c <USBD_SetConfig+0x118>)
 80077a4:	781b      	ldrb	r3, [r3, #0]
 80077a6:	461a      	mov	r2, r3
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2203      	movs	r2, #3
 80077b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80077b4:	4b31      	ldr	r3, [pc, #196]	; (800787c <USBD_SetConfig+0x118>)
 80077b6:	781b      	ldrb	r3, [r3, #0]
 80077b8:	4619      	mov	r1, r3
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f7ff f9e7 	bl	8006b8e <USBD_SetClassConfig>
 80077c0:	4603      	mov	r3, r0
 80077c2:	2b02      	cmp	r3, #2
 80077c4:	d104      	bne.n	80077d0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80077c6:	6839      	ldr	r1, [r7, #0]
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f000 f932 	bl	8007a32 <USBD_CtlError>
            return;
 80077ce:	e052      	b.n	8007876 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f000 f9f6 	bl	8007bc2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80077d6:	e04e      	b.n	8007876 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f000 f9f2 	bl	8007bc2 <USBD_CtlSendStatus>
        break;
 80077de:	e04a      	b.n	8007876 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80077e0:	4b26      	ldr	r3, [pc, #152]	; (800787c <USBD_SetConfig+0x118>)
 80077e2:	781b      	ldrb	r3, [r3, #0]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d112      	bne.n	800780e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2202      	movs	r2, #2
 80077ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80077f0:	4b22      	ldr	r3, [pc, #136]	; (800787c <USBD_SetConfig+0x118>)
 80077f2:	781b      	ldrb	r3, [r3, #0]
 80077f4:	461a      	mov	r2, r3
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80077fa:	4b20      	ldr	r3, [pc, #128]	; (800787c <USBD_SetConfig+0x118>)
 80077fc:	781b      	ldrb	r3, [r3, #0]
 80077fe:	4619      	mov	r1, r3
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f7ff f9e3 	bl	8006bcc <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f000 f9db 	bl	8007bc2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800780c:	e033      	b.n	8007876 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800780e:	4b1b      	ldr	r3, [pc, #108]	; (800787c <USBD_SetConfig+0x118>)
 8007810:	781b      	ldrb	r3, [r3, #0]
 8007812:	461a      	mov	r2, r3
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	685b      	ldr	r3, [r3, #4]
 8007818:	429a      	cmp	r2, r3
 800781a:	d01d      	beq.n	8007858 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	685b      	ldr	r3, [r3, #4]
 8007820:	b2db      	uxtb	r3, r3
 8007822:	4619      	mov	r1, r3
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f7ff f9d1 	bl	8006bcc <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800782a:	4b14      	ldr	r3, [pc, #80]	; (800787c <USBD_SetConfig+0x118>)
 800782c:	781b      	ldrb	r3, [r3, #0]
 800782e:	461a      	mov	r2, r3
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007834:	4b11      	ldr	r3, [pc, #68]	; (800787c <USBD_SetConfig+0x118>)
 8007836:	781b      	ldrb	r3, [r3, #0]
 8007838:	4619      	mov	r1, r3
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f7ff f9a7 	bl	8006b8e <USBD_SetClassConfig>
 8007840:	4603      	mov	r3, r0
 8007842:	2b02      	cmp	r3, #2
 8007844:	d104      	bne.n	8007850 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007846:	6839      	ldr	r1, [r7, #0]
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f000 f8f2 	bl	8007a32 <USBD_CtlError>
            return;
 800784e:	e012      	b.n	8007876 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f000 f9b6 	bl	8007bc2 <USBD_CtlSendStatus>
        break;
 8007856:	e00e      	b.n	8007876 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f000 f9b2 	bl	8007bc2 <USBD_CtlSendStatus>
        break;
 800785e:	e00a      	b.n	8007876 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007860:	6839      	ldr	r1, [r7, #0]
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f000 f8e5 	bl	8007a32 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007868:	4b04      	ldr	r3, [pc, #16]	; (800787c <USBD_SetConfig+0x118>)
 800786a:	781b      	ldrb	r3, [r3, #0]
 800786c:	4619      	mov	r1, r3
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f7ff f9ac 	bl	8006bcc <USBD_ClrClassConfig>
        break;
 8007874:	bf00      	nop
    }
  }
}
 8007876:	3708      	adds	r7, #8
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}
 800787c:	20000248 	.word	0x20000248

08007880 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b082      	sub	sp, #8
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	88db      	ldrh	r3, [r3, #6]
 800788e:	2b01      	cmp	r3, #1
 8007890:	d004      	beq.n	800789c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007892:	6839      	ldr	r1, [r7, #0]
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f000 f8cc 	bl	8007a32 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800789a:	e022      	b.n	80078e2 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078a2:	2b02      	cmp	r3, #2
 80078a4:	dc02      	bgt.n	80078ac <USBD_GetConfig+0x2c>
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	dc03      	bgt.n	80078b2 <USBD_GetConfig+0x32>
 80078aa:	e015      	b.n	80078d8 <USBD_GetConfig+0x58>
 80078ac:	2b03      	cmp	r3, #3
 80078ae:	d00b      	beq.n	80078c8 <USBD_GetConfig+0x48>
 80078b0:	e012      	b.n	80078d8 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2200      	movs	r2, #0
 80078b6:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	3308      	adds	r3, #8
 80078bc:	2201      	movs	r2, #1
 80078be:	4619      	mov	r1, r3
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f000 f920 	bl	8007b06 <USBD_CtlSendData>
        break;
 80078c6:	e00c      	b.n	80078e2 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	3304      	adds	r3, #4
 80078cc:	2201      	movs	r2, #1
 80078ce:	4619      	mov	r1, r3
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f000 f918 	bl	8007b06 <USBD_CtlSendData>
        break;
 80078d6:	e004      	b.n	80078e2 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80078d8:	6839      	ldr	r1, [r7, #0]
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f000 f8a9 	bl	8007a32 <USBD_CtlError>
        break;
 80078e0:	bf00      	nop
}
 80078e2:	bf00      	nop
 80078e4:	3708      	adds	r7, #8
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}

080078ea <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078ea:	b580      	push	{r7, lr}
 80078ec:	b082      	sub	sp, #8
 80078ee:	af00      	add	r7, sp, #0
 80078f0:	6078      	str	r0, [r7, #4]
 80078f2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078fa:	3b01      	subs	r3, #1
 80078fc:	2b02      	cmp	r3, #2
 80078fe:	d81e      	bhi.n	800793e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	88db      	ldrh	r3, [r3, #6]
 8007904:	2b02      	cmp	r3, #2
 8007906:	d004      	beq.n	8007912 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007908:	6839      	ldr	r1, [r7, #0]
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f000 f891 	bl	8007a32 <USBD_CtlError>
        break;
 8007910:	e01a      	b.n	8007948 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2201      	movs	r2, #1
 8007916:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800791e:	2b00      	cmp	r3, #0
 8007920:	d005      	beq.n	800792e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	68db      	ldr	r3, [r3, #12]
 8007926:	f043 0202 	orr.w	r2, r3, #2
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	330c      	adds	r3, #12
 8007932:	2202      	movs	r2, #2
 8007934:	4619      	mov	r1, r3
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f000 f8e5 	bl	8007b06 <USBD_CtlSendData>
      break;
 800793c:	e004      	b.n	8007948 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800793e:	6839      	ldr	r1, [r7, #0]
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f000 f876 	bl	8007a32 <USBD_CtlError>
      break;
 8007946:	bf00      	nop
  }
}
 8007948:	bf00      	nop
 800794a:	3708      	adds	r7, #8
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}

08007950 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b082      	sub	sp, #8
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
 8007958:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	885b      	ldrh	r3, [r3, #2]
 800795e:	2b01      	cmp	r3, #1
 8007960:	d106      	bne.n	8007970 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2201      	movs	r2, #1
 8007966:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f000 f929 	bl	8007bc2 <USBD_CtlSendStatus>
  }
}
 8007970:	bf00      	nop
 8007972:	3708      	adds	r7, #8
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}

08007978 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b082      	sub	sp, #8
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
 8007980:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007988:	3b01      	subs	r3, #1
 800798a:	2b02      	cmp	r3, #2
 800798c:	d80b      	bhi.n	80079a6 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	885b      	ldrh	r3, [r3, #2]
 8007992:	2b01      	cmp	r3, #1
 8007994:	d10c      	bne.n	80079b0 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2200      	movs	r2, #0
 800799a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f000 f90f 	bl	8007bc2 <USBD_CtlSendStatus>
      }
      break;
 80079a4:	e004      	b.n	80079b0 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80079a6:	6839      	ldr	r1, [r7, #0]
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f000 f842 	bl	8007a32 <USBD_CtlError>
      break;
 80079ae:	e000      	b.n	80079b2 <USBD_ClrFeature+0x3a>
      break;
 80079b0:	bf00      	nop
  }
}
 80079b2:	bf00      	nop
 80079b4:	3708      	adds	r7, #8
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}

080079ba <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80079ba:	b480      	push	{r7}
 80079bc:	b083      	sub	sp, #12
 80079be:	af00      	add	r7, sp, #0
 80079c0:	6078      	str	r0, [r7, #4]
 80079c2:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	781a      	ldrb	r2, [r3, #0]
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	785a      	ldrb	r2, [r3, #1]
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	3302      	adds	r3, #2
 80079d8:	781b      	ldrb	r3, [r3, #0]
 80079da:	b29a      	uxth	r2, r3
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	3303      	adds	r3, #3
 80079e0:	781b      	ldrb	r3, [r3, #0]
 80079e2:	b29b      	uxth	r3, r3
 80079e4:	021b      	lsls	r3, r3, #8
 80079e6:	b29b      	uxth	r3, r3
 80079e8:	4413      	add	r3, r2
 80079ea:	b29a      	uxth	r2, r3
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	3304      	adds	r3, #4
 80079f4:	781b      	ldrb	r3, [r3, #0]
 80079f6:	b29a      	uxth	r2, r3
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	3305      	adds	r3, #5
 80079fc:	781b      	ldrb	r3, [r3, #0]
 80079fe:	b29b      	uxth	r3, r3
 8007a00:	021b      	lsls	r3, r3, #8
 8007a02:	b29b      	uxth	r3, r3
 8007a04:	4413      	add	r3, r2
 8007a06:	b29a      	uxth	r2, r3
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	3306      	adds	r3, #6
 8007a10:	781b      	ldrb	r3, [r3, #0]
 8007a12:	b29a      	uxth	r2, r3
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	3307      	adds	r3, #7
 8007a18:	781b      	ldrb	r3, [r3, #0]
 8007a1a:	b29b      	uxth	r3, r3
 8007a1c:	021b      	lsls	r3, r3, #8
 8007a1e:	b29b      	uxth	r3, r3
 8007a20:	4413      	add	r3, r2
 8007a22:	b29a      	uxth	r2, r3
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	80da      	strh	r2, [r3, #6]

}
 8007a28:	bf00      	nop
 8007a2a:	370c      	adds	r7, #12
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bc80      	pop	{r7}
 8007a30:	4770      	bx	lr

08007a32 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007a32:	b580      	push	{r7, lr}
 8007a34:	b082      	sub	sp, #8
 8007a36:	af00      	add	r7, sp, #0
 8007a38:	6078      	str	r0, [r7, #4]
 8007a3a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007a3c:	2180      	movs	r1, #128	; 0x80
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f000 fc54 	bl	80082ec <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007a44:	2100      	movs	r1, #0
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f000 fc50 	bl	80082ec <USBD_LL_StallEP>
}
 8007a4c:	bf00      	nop
 8007a4e:	3708      	adds	r7, #8
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bd80      	pop	{r7, pc}

08007a54 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b086      	sub	sp, #24
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	60f8      	str	r0, [r7, #12]
 8007a5c:	60b9      	str	r1, [r7, #8]
 8007a5e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007a60:	2300      	movs	r3, #0
 8007a62:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d032      	beq.n	8007ad0 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007a6a:	68f8      	ldr	r0, [r7, #12]
 8007a6c:	f000 f834 	bl	8007ad8 <USBD_GetLen>
 8007a70:	4603      	mov	r3, r0
 8007a72:	3301      	adds	r3, #1
 8007a74:	b29b      	uxth	r3, r3
 8007a76:	005b      	lsls	r3, r3, #1
 8007a78:	b29a      	uxth	r2, r3
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007a7e:	7dfb      	ldrb	r3, [r7, #23]
 8007a80:	1c5a      	adds	r2, r3, #1
 8007a82:	75fa      	strb	r2, [r7, #23]
 8007a84:	461a      	mov	r2, r3
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	4413      	add	r3, r2
 8007a8a:	687a      	ldr	r2, [r7, #4]
 8007a8c:	7812      	ldrb	r2, [r2, #0]
 8007a8e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007a90:	7dfb      	ldrb	r3, [r7, #23]
 8007a92:	1c5a      	adds	r2, r3, #1
 8007a94:	75fa      	strb	r2, [r7, #23]
 8007a96:	461a      	mov	r2, r3
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	4413      	add	r3, r2
 8007a9c:	2203      	movs	r2, #3
 8007a9e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007aa0:	e012      	b.n	8007ac8 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	1c5a      	adds	r2, r3, #1
 8007aa6:	60fa      	str	r2, [r7, #12]
 8007aa8:	7dfa      	ldrb	r2, [r7, #23]
 8007aaa:	1c51      	adds	r1, r2, #1
 8007aac:	75f9      	strb	r1, [r7, #23]
 8007aae:	4611      	mov	r1, r2
 8007ab0:	68ba      	ldr	r2, [r7, #8]
 8007ab2:	440a      	add	r2, r1
 8007ab4:	781b      	ldrb	r3, [r3, #0]
 8007ab6:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007ab8:	7dfb      	ldrb	r3, [r7, #23]
 8007aba:	1c5a      	adds	r2, r3, #1
 8007abc:	75fa      	strb	r2, [r7, #23]
 8007abe:	461a      	mov	r2, r3
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	4413      	add	r3, r2
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	781b      	ldrb	r3, [r3, #0]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d1e8      	bne.n	8007aa2 <USBD_GetString+0x4e>
    }
  }
}
 8007ad0:	bf00      	nop
 8007ad2:	3718      	adds	r7, #24
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}

08007ad8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b085      	sub	sp, #20
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007ae4:	e005      	b.n	8007af2 <USBD_GetLen+0x1a>
  {
    len++;
 8007ae6:	7bfb      	ldrb	r3, [r7, #15]
 8007ae8:	3301      	adds	r3, #1
 8007aea:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	3301      	adds	r3, #1
 8007af0:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	781b      	ldrb	r3, [r3, #0]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d1f5      	bne.n	8007ae6 <USBD_GetLen+0xe>
  }

  return len;
 8007afa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	3714      	adds	r7, #20
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bc80      	pop	{r7}
 8007b04:	4770      	bx	lr

08007b06 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007b06:	b580      	push	{r7, lr}
 8007b08:	b084      	sub	sp, #16
 8007b0a:	af00      	add	r7, sp, #0
 8007b0c:	60f8      	str	r0, [r7, #12]
 8007b0e:	60b9      	str	r1, [r7, #8]
 8007b10:	4613      	mov	r3, r2
 8007b12:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	2202      	movs	r2, #2
 8007b18:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007b1c:	88fa      	ldrh	r2, [r7, #6]
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007b22:	88fa      	ldrh	r2, [r7, #6]
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007b28:	88fb      	ldrh	r3, [r7, #6]
 8007b2a:	68ba      	ldr	r2, [r7, #8]
 8007b2c:	2100      	movs	r1, #0
 8007b2e:	68f8      	ldr	r0, [r7, #12]
 8007b30:	f000 fc65 	bl	80083fe <USBD_LL_Transmit>

  return USBD_OK;
 8007b34:	2300      	movs	r3, #0
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3710      	adds	r7, #16
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}

08007b3e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007b3e:	b580      	push	{r7, lr}
 8007b40:	b084      	sub	sp, #16
 8007b42:	af00      	add	r7, sp, #0
 8007b44:	60f8      	str	r0, [r7, #12]
 8007b46:	60b9      	str	r1, [r7, #8]
 8007b48:	4613      	mov	r3, r2
 8007b4a:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007b4c:	88fb      	ldrh	r3, [r7, #6]
 8007b4e:	68ba      	ldr	r2, [r7, #8]
 8007b50:	2100      	movs	r1, #0
 8007b52:	68f8      	ldr	r0, [r7, #12]
 8007b54:	f000 fc53 	bl	80083fe <USBD_LL_Transmit>

  return USBD_OK;
 8007b58:	2300      	movs	r3, #0
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3710      	adds	r7, #16
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}

08007b62 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007b62:	b580      	push	{r7, lr}
 8007b64:	b084      	sub	sp, #16
 8007b66:	af00      	add	r7, sp, #0
 8007b68:	60f8      	str	r0, [r7, #12]
 8007b6a:	60b9      	str	r1, [r7, #8]
 8007b6c:	4613      	mov	r3, r2
 8007b6e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	2203      	movs	r2, #3
 8007b74:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007b78:	88fa      	ldrh	r2, [r7, #6]
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007b80:	88fa      	ldrh	r2, [r7, #6]
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007b88:	88fb      	ldrh	r3, [r7, #6]
 8007b8a:	68ba      	ldr	r2, [r7, #8]
 8007b8c:	2100      	movs	r1, #0
 8007b8e:	68f8      	ldr	r0, [r7, #12]
 8007b90:	f000 fc58 	bl	8008444 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007b94:	2300      	movs	r3, #0
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	3710      	adds	r7, #16
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}

08007b9e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007b9e:	b580      	push	{r7, lr}
 8007ba0:	b084      	sub	sp, #16
 8007ba2:	af00      	add	r7, sp, #0
 8007ba4:	60f8      	str	r0, [r7, #12]
 8007ba6:	60b9      	str	r1, [r7, #8]
 8007ba8:	4613      	mov	r3, r2
 8007baa:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007bac:	88fb      	ldrh	r3, [r7, #6]
 8007bae:	68ba      	ldr	r2, [r7, #8]
 8007bb0:	2100      	movs	r1, #0
 8007bb2:	68f8      	ldr	r0, [r7, #12]
 8007bb4:	f000 fc46 	bl	8008444 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007bb8:	2300      	movs	r3, #0
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3710      	adds	r7, #16
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}

08007bc2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007bc2:	b580      	push	{r7, lr}
 8007bc4:	b082      	sub	sp, #8
 8007bc6:	af00      	add	r7, sp, #0
 8007bc8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2204      	movs	r2, #4
 8007bce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	2100      	movs	r1, #0
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f000 fc10 	bl	80083fe <USBD_LL_Transmit>

  return USBD_OK;
 8007bde:	2300      	movs	r3, #0
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	3708      	adds	r7, #8
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}

08007be8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b082      	sub	sp, #8
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2205      	movs	r2, #5
 8007bf4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	2100      	movs	r1, #0
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f000 fc20 	bl	8008444 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007c04:	2300      	movs	r3, #0
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3708      	adds	r7, #8
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}
	...

08007c10 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007c14:	2200      	movs	r2, #0
 8007c16:	4912      	ldr	r1, [pc, #72]	; (8007c60 <MX_USB_DEVICE_Init+0x50>)
 8007c18:	4812      	ldr	r0, [pc, #72]	; (8007c64 <MX_USB_DEVICE_Init+0x54>)
 8007c1a:	f7fe ff5e 	bl	8006ada <USBD_Init>
 8007c1e:	4603      	mov	r3, r0
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d001      	beq.n	8007c28 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007c24:	f7f8 fd3c 	bl	80006a0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007c28:	490f      	ldr	r1, [pc, #60]	; (8007c68 <MX_USB_DEVICE_Init+0x58>)
 8007c2a:	480e      	ldr	r0, [pc, #56]	; (8007c64 <MX_USB_DEVICE_Init+0x54>)
 8007c2c:	f7fe ff80 	bl	8006b30 <USBD_RegisterClass>
 8007c30:	4603      	mov	r3, r0
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d001      	beq.n	8007c3a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007c36:	f7f8 fd33 	bl	80006a0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007c3a:	490c      	ldr	r1, [pc, #48]	; (8007c6c <MX_USB_DEVICE_Init+0x5c>)
 8007c3c:	4809      	ldr	r0, [pc, #36]	; (8007c64 <MX_USB_DEVICE_Init+0x54>)
 8007c3e:	f7fe feb1 	bl	80069a4 <USBD_CDC_RegisterInterface>
 8007c42:	4603      	mov	r3, r0
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d001      	beq.n	8007c4c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007c48:	f7f8 fd2a 	bl	80006a0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007c4c:	4805      	ldr	r0, [pc, #20]	; (8007c64 <MX_USB_DEVICE_Init+0x54>)
 8007c4e:	f7fe ff88 	bl	8006b62 <USBD_Start>
 8007c52:	4603      	mov	r3, r0
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d001      	beq.n	8007c5c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007c58:	f7f8 fd22 	bl	80006a0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007c5c:	bf00      	nop
 8007c5e:	bd80      	pop	{r7, pc}
 8007c60:	2000012c 	.word	0x2000012c
 8007c64:	2000024c 	.word	0x2000024c
 8007c68:	20000018 	.word	0x20000018
 8007c6c:	2000011c 	.word	0x2000011c

08007c70 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007c74:	2200      	movs	r2, #0
 8007c76:	4905      	ldr	r1, [pc, #20]	; (8007c8c <CDC_Init_FS+0x1c>)
 8007c78:	4805      	ldr	r0, [pc, #20]	; (8007c90 <CDC_Init_FS+0x20>)
 8007c7a:	f7fe fea9 	bl	80069d0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007c7e:	4905      	ldr	r1, [pc, #20]	; (8007c94 <CDC_Init_FS+0x24>)
 8007c80:	4803      	ldr	r0, [pc, #12]	; (8007c90 <CDC_Init_FS+0x20>)
 8007c82:	f7fe febe 	bl	8006a02 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007c86:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	bd80      	pop	{r7, pc}
 8007c8c:	20000910 	.word	0x20000910
 8007c90:	2000024c 	.word	0x2000024c
 8007c94:	20000510 	.word	0x20000510

08007c98 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007c9c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bc80      	pop	{r7}
 8007ca4:	4770      	bx	lr
	...

08007ca8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007ca8:	b480      	push	{r7}
 8007caa:	b083      	sub	sp, #12
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	4603      	mov	r3, r0
 8007cb0:	6039      	str	r1, [r7, #0]
 8007cb2:	71fb      	strb	r3, [r7, #7]
 8007cb4:	4613      	mov	r3, r2
 8007cb6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007cb8:	79fb      	ldrb	r3, [r7, #7]
 8007cba:	2b23      	cmp	r3, #35	; 0x23
 8007cbc:	d84a      	bhi.n	8007d54 <CDC_Control_FS+0xac>
 8007cbe:	a201      	add	r2, pc, #4	; (adr r2, 8007cc4 <CDC_Control_FS+0x1c>)
 8007cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cc4:	08007d55 	.word	0x08007d55
 8007cc8:	08007d55 	.word	0x08007d55
 8007ccc:	08007d55 	.word	0x08007d55
 8007cd0:	08007d55 	.word	0x08007d55
 8007cd4:	08007d55 	.word	0x08007d55
 8007cd8:	08007d55 	.word	0x08007d55
 8007cdc:	08007d55 	.word	0x08007d55
 8007ce0:	08007d55 	.word	0x08007d55
 8007ce4:	08007d55 	.word	0x08007d55
 8007ce8:	08007d55 	.word	0x08007d55
 8007cec:	08007d55 	.word	0x08007d55
 8007cf0:	08007d55 	.word	0x08007d55
 8007cf4:	08007d55 	.word	0x08007d55
 8007cf8:	08007d55 	.word	0x08007d55
 8007cfc:	08007d55 	.word	0x08007d55
 8007d00:	08007d55 	.word	0x08007d55
 8007d04:	08007d55 	.word	0x08007d55
 8007d08:	08007d55 	.word	0x08007d55
 8007d0c:	08007d55 	.word	0x08007d55
 8007d10:	08007d55 	.word	0x08007d55
 8007d14:	08007d55 	.word	0x08007d55
 8007d18:	08007d55 	.word	0x08007d55
 8007d1c:	08007d55 	.word	0x08007d55
 8007d20:	08007d55 	.word	0x08007d55
 8007d24:	08007d55 	.word	0x08007d55
 8007d28:	08007d55 	.word	0x08007d55
 8007d2c:	08007d55 	.word	0x08007d55
 8007d30:	08007d55 	.word	0x08007d55
 8007d34:	08007d55 	.word	0x08007d55
 8007d38:	08007d55 	.word	0x08007d55
 8007d3c:	08007d55 	.word	0x08007d55
 8007d40:	08007d55 	.word	0x08007d55
 8007d44:	08007d55 	.word	0x08007d55
 8007d48:	08007d55 	.word	0x08007d55
 8007d4c:	08007d55 	.word	0x08007d55
 8007d50:	08007d55 	.word	0x08007d55
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007d54:	bf00      	nop
  }

  return (USBD_OK);
 8007d56:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	370c      	adds	r7, #12
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bc80      	pop	{r7}
 8007d60:	4770      	bx	lr
 8007d62:	bf00      	nop

08007d64 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b082      	sub	sp, #8
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
 8007d6c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007d6e:	6879      	ldr	r1, [r7, #4]
 8007d70:	4805      	ldr	r0, [pc, #20]	; (8007d88 <CDC_Receive_FS+0x24>)
 8007d72:	f7fe fe46 	bl	8006a02 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007d76:	4804      	ldr	r0, [pc, #16]	; (8007d88 <CDC_Receive_FS+0x24>)
 8007d78:	f7fe fe85 	bl	8006a86 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007d7c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	3708      	adds	r7, #8
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}
 8007d86:	bf00      	nop
 8007d88:	2000024c 	.word	0x2000024c

08007d8c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b084      	sub	sp, #16
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
 8007d94:	460b      	mov	r3, r1
 8007d96:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007d98:	2300      	movs	r3, #0
 8007d9a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007d9c:	4b0d      	ldr	r3, [pc, #52]	; (8007dd4 <CDC_Transmit_FS+0x48>)
 8007d9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007da2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d001      	beq.n	8007db2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007dae:	2301      	movs	r3, #1
 8007db0:	e00b      	b.n	8007dca <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007db2:	887b      	ldrh	r3, [r7, #2]
 8007db4:	461a      	mov	r2, r3
 8007db6:	6879      	ldr	r1, [r7, #4]
 8007db8:	4806      	ldr	r0, [pc, #24]	; (8007dd4 <CDC_Transmit_FS+0x48>)
 8007dba:	f7fe fe09 	bl	80069d0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007dbe:	4805      	ldr	r0, [pc, #20]	; (8007dd4 <CDC_Transmit_FS+0x48>)
 8007dc0:	f7fe fe32 	bl	8006a28 <USBD_CDC_TransmitPacket>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3710      	adds	r7, #16
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}
 8007dd2:	bf00      	nop
 8007dd4:	2000024c 	.word	0x2000024c

08007dd8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b083      	sub	sp, #12
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	4603      	mov	r3, r0
 8007de0:	6039      	str	r1, [r7, #0]
 8007de2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	2212      	movs	r2, #18
 8007de8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007dea:	4b03      	ldr	r3, [pc, #12]	; (8007df8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	370c      	adds	r7, #12
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bc80      	pop	{r7}
 8007df4:	4770      	bx	lr
 8007df6:	bf00      	nop
 8007df8:	20000148 	.word	0x20000148

08007dfc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b083      	sub	sp, #12
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	4603      	mov	r3, r0
 8007e04:	6039      	str	r1, [r7, #0]
 8007e06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	2204      	movs	r2, #4
 8007e0c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007e0e:	4b03      	ldr	r3, [pc, #12]	; (8007e1c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007e10:	4618      	mov	r0, r3
 8007e12:	370c      	adds	r7, #12
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bc80      	pop	{r7}
 8007e18:	4770      	bx	lr
 8007e1a:	bf00      	nop
 8007e1c:	2000015c 	.word	0x2000015c

08007e20 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b082      	sub	sp, #8
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	4603      	mov	r3, r0
 8007e28:	6039      	str	r1, [r7, #0]
 8007e2a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007e2c:	79fb      	ldrb	r3, [r7, #7]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d105      	bne.n	8007e3e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007e32:	683a      	ldr	r2, [r7, #0]
 8007e34:	4907      	ldr	r1, [pc, #28]	; (8007e54 <USBD_FS_ProductStrDescriptor+0x34>)
 8007e36:	4808      	ldr	r0, [pc, #32]	; (8007e58 <USBD_FS_ProductStrDescriptor+0x38>)
 8007e38:	f7ff fe0c 	bl	8007a54 <USBD_GetString>
 8007e3c:	e004      	b.n	8007e48 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007e3e:	683a      	ldr	r2, [r7, #0]
 8007e40:	4904      	ldr	r1, [pc, #16]	; (8007e54 <USBD_FS_ProductStrDescriptor+0x34>)
 8007e42:	4805      	ldr	r0, [pc, #20]	; (8007e58 <USBD_FS_ProductStrDescriptor+0x38>)
 8007e44:	f7ff fe06 	bl	8007a54 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007e48:	4b02      	ldr	r3, [pc, #8]	; (8007e54 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3708      	adds	r7, #8
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}
 8007e52:	bf00      	nop
 8007e54:	20000d10 	.word	0x20000d10
 8007e58:	08008f14 	.word	0x08008f14

08007e5c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b082      	sub	sp, #8
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	4603      	mov	r3, r0
 8007e64:	6039      	str	r1, [r7, #0]
 8007e66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007e68:	683a      	ldr	r2, [r7, #0]
 8007e6a:	4904      	ldr	r1, [pc, #16]	; (8007e7c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007e6c:	4804      	ldr	r0, [pc, #16]	; (8007e80 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007e6e:	f7ff fdf1 	bl	8007a54 <USBD_GetString>
  return USBD_StrDesc;
 8007e72:	4b02      	ldr	r3, [pc, #8]	; (8007e7c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	3708      	adds	r7, #8
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}
 8007e7c:	20000d10 	.word	0x20000d10
 8007e80:	08008f2c 	.word	0x08008f2c

08007e84 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b082      	sub	sp, #8
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	6039      	str	r1, [r7, #0]
 8007e8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	221a      	movs	r2, #26
 8007e94:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007e96:	f000 f843 	bl	8007f20 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007e9a:	4b02      	ldr	r3, [pc, #8]	; (8007ea4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	3708      	adds	r7, #8
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}
 8007ea4:	20000160 	.word	0x20000160

08007ea8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b082      	sub	sp, #8
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	4603      	mov	r3, r0
 8007eb0:	6039      	str	r1, [r7, #0]
 8007eb2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007eb4:	79fb      	ldrb	r3, [r7, #7]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d105      	bne.n	8007ec6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007eba:	683a      	ldr	r2, [r7, #0]
 8007ebc:	4907      	ldr	r1, [pc, #28]	; (8007edc <USBD_FS_ConfigStrDescriptor+0x34>)
 8007ebe:	4808      	ldr	r0, [pc, #32]	; (8007ee0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007ec0:	f7ff fdc8 	bl	8007a54 <USBD_GetString>
 8007ec4:	e004      	b.n	8007ed0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007ec6:	683a      	ldr	r2, [r7, #0]
 8007ec8:	4904      	ldr	r1, [pc, #16]	; (8007edc <USBD_FS_ConfigStrDescriptor+0x34>)
 8007eca:	4805      	ldr	r0, [pc, #20]	; (8007ee0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007ecc:	f7ff fdc2 	bl	8007a54 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007ed0:	4b02      	ldr	r3, [pc, #8]	; (8007edc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	3708      	adds	r7, #8
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}
 8007eda:	bf00      	nop
 8007edc:	20000d10 	.word	0x20000d10
 8007ee0:	08008f40 	.word	0x08008f40

08007ee4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b082      	sub	sp, #8
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	4603      	mov	r3, r0
 8007eec:	6039      	str	r1, [r7, #0]
 8007eee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007ef0:	79fb      	ldrb	r3, [r7, #7]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d105      	bne.n	8007f02 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007ef6:	683a      	ldr	r2, [r7, #0]
 8007ef8:	4907      	ldr	r1, [pc, #28]	; (8007f18 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007efa:	4808      	ldr	r0, [pc, #32]	; (8007f1c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007efc:	f7ff fdaa 	bl	8007a54 <USBD_GetString>
 8007f00:	e004      	b.n	8007f0c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007f02:	683a      	ldr	r2, [r7, #0]
 8007f04:	4904      	ldr	r1, [pc, #16]	; (8007f18 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007f06:	4805      	ldr	r0, [pc, #20]	; (8007f1c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007f08:	f7ff fda4 	bl	8007a54 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007f0c:	4b02      	ldr	r3, [pc, #8]	; (8007f18 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	3708      	adds	r7, #8
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bd80      	pop	{r7, pc}
 8007f16:	bf00      	nop
 8007f18:	20000d10 	.word	0x20000d10
 8007f1c:	08008f4c 	.word	0x08008f4c

08007f20 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b084      	sub	sp, #16
 8007f24:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007f26:	4b0f      	ldr	r3, [pc, #60]	; (8007f64 <Get_SerialNum+0x44>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007f2c:	4b0e      	ldr	r3, [pc, #56]	; (8007f68 <Get_SerialNum+0x48>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007f32:	4b0e      	ldr	r3, [pc, #56]	; (8007f6c <Get_SerialNum+0x4c>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007f38:	68fa      	ldr	r2, [r7, #12]
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	4413      	add	r3, r2
 8007f3e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d009      	beq.n	8007f5a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007f46:	2208      	movs	r2, #8
 8007f48:	4909      	ldr	r1, [pc, #36]	; (8007f70 <Get_SerialNum+0x50>)
 8007f4a:	68f8      	ldr	r0, [r7, #12]
 8007f4c:	f000 f814 	bl	8007f78 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007f50:	2204      	movs	r2, #4
 8007f52:	4908      	ldr	r1, [pc, #32]	; (8007f74 <Get_SerialNum+0x54>)
 8007f54:	68b8      	ldr	r0, [r7, #8]
 8007f56:	f000 f80f 	bl	8007f78 <IntToUnicode>
  }
}
 8007f5a:	bf00      	nop
 8007f5c:	3710      	adds	r7, #16
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}
 8007f62:	bf00      	nop
 8007f64:	1ffff7e8 	.word	0x1ffff7e8
 8007f68:	1ffff7ec 	.word	0x1ffff7ec
 8007f6c:	1ffff7f0 	.word	0x1ffff7f0
 8007f70:	20000162 	.word	0x20000162
 8007f74:	20000172 	.word	0x20000172

08007f78 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b087      	sub	sp, #28
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	60f8      	str	r0, [r7, #12]
 8007f80:	60b9      	str	r1, [r7, #8]
 8007f82:	4613      	mov	r3, r2
 8007f84:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007f86:	2300      	movs	r3, #0
 8007f88:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	75fb      	strb	r3, [r7, #23]
 8007f8e:	e027      	b.n	8007fe0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	0f1b      	lsrs	r3, r3, #28
 8007f94:	2b09      	cmp	r3, #9
 8007f96:	d80b      	bhi.n	8007fb0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	0f1b      	lsrs	r3, r3, #28
 8007f9c:	b2da      	uxtb	r2, r3
 8007f9e:	7dfb      	ldrb	r3, [r7, #23]
 8007fa0:	005b      	lsls	r3, r3, #1
 8007fa2:	4619      	mov	r1, r3
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	440b      	add	r3, r1
 8007fa8:	3230      	adds	r2, #48	; 0x30
 8007faa:	b2d2      	uxtb	r2, r2
 8007fac:	701a      	strb	r2, [r3, #0]
 8007fae:	e00a      	b.n	8007fc6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	0f1b      	lsrs	r3, r3, #28
 8007fb4:	b2da      	uxtb	r2, r3
 8007fb6:	7dfb      	ldrb	r3, [r7, #23]
 8007fb8:	005b      	lsls	r3, r3, #1
 8007fba:	4619      	mov	r1, r3
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	440b      	add	r3, r1
 8007fc0:	3237      	adds	r2, #55	; 0x37
 8007fc2:	b2d2      	uxtb	r2, r2
 8007fc4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	011b      	lsls	r3, r3, #4
 8007fca:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007fcc:	7dfb      	ldrb	r3, [r7, #23]
 8007fce:	005b      	lsls	r3, r3, #1
 8007fd0:	3301      	adds	r3, #1
 8007fd2:	68ba      	ldr	r2, [r7, #8]
 8007fd4:	4413      	add	r3, r2
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007fda:	7dfb      	ldrb	r3, [r7, #23]
 8007fdc:	3301      	adds	r3, #1
 8007fde:	75fb      	strb	r3, [r7, #23]
 8007fe0:	7dfa      	ldrb	r2, [r7, #23]
 8007fe2:	79fb      	ldrb	r3, [r7, #7]
 8007fe4:	429a      	cmp	r2, r3
 8007fe6:	d3d3      	bcc.n	8007f90 <IntToUnicode+0x18>
  }
}
 8007fe8:	bf00      	nop
 8007fea:	bf00      	nop
 8007fec:	371c      	adds	r7, #28
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bc80      	pop	{r7}
 8007ff2:	4770      	bx	lr

08007ff4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b084      	sub	sp, #16
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	4a0d      	ldr	r2, [pc, #52]	; (8008038 <HAL_PCD_MspInit+0x44>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d113      	bne.n	800802e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008006:	4b0d      	ldr	r3, [pc, #52]	; (800803c <HAL_PCD_MspInit+0x48>)
 8008008:	69db      	ldr	r3, [r3, #28]
 800800a:	4a0c      	ldr	r2, [pc, #48]	; (800803c <HAL_PCD_MspInit+0x48>)
 800800c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008010:	61d3      	str	r3, [r2, #28]
 8008012:	4b0a      	ldr	r3, [pc, #40]	; (800803c <HAL_PCD_MspInit+0x48>)
 8008014:	69db      	ldr	r3, [r3, #28]
 8008016:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800801a:	60fb      	str	r3, [r7, #12]
 800801c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800801e:	2200      	movs	r2, #0
 8008020:	2100      	movs	r1, #0
 8008022:	2014      	movs	r0, #20
 8008024:	f7f8 fd8b 	bl	8000b3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008028:	2014      	movs	r0, #20
 800802a:	f7f8 fda4 	bl	8000b76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800802e:	bf00      	nop
 8008030:	3710      	adds	r7, #16
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}
 8008036:	bf00      	nop
 8008038:	40005c00 	.word	0x40005c00
 800803c:	40021000 	.word	0x40021000

08008040 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b082      	sub	sp, #8
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008054:	4619      	mov	r1, r3
 8008056:	4610      	mov	r0, r2
 8008058:	f7fe fdcb 	bl	8006bf2 <USBD_LL_SetupStage>
}
 800805c:	bf00      	nop
 800805e:	3708      	adds	r7, #8
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}

08008064 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b082      	sub	sp, #8
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
 800806c:	460b      	mov	r3, r1
 800806e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8008076:	78fa      	ldrb	r2, [r7, #3]
 8008078:	6879      	ldr	r1, [r7, #4]
 800807a:	4613      	mov	r3, r2
 800807c:	009b      	lsls	r3, r3, #2
 800807e:	4413      	add	r3, r2
 8008080:	00db      	lsls	r3, r3, #3
 8008082:	440b      	add	r3, r1
 8008084:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008088:	681a      	ldr	r2, [r3, #0]
 800808a:	78fb      	ldrb	r3, [r7, #3]
 800808c:	4619      	mov	r1, r3
 800808e:	f7fe fdfd 	bl	8006c8c <USBD_LL_DataOutStage>
}
 8008092:	bf00      	nop
 8008094:	3708      	adds	r7, #8
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}

0800809a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800809a:	b580      	push	{r7, lr}
 800809c:	b082      	sub	sp, #8
 800809e:	af00      	add	r7, sp, #0
 80080a0:	6078      	str	r0, [r7, #4]
 80080a2:	460b      	mov	r3, r1
 80080a4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 80080ac:	78fa      	ldrb	r2, [r7, #3]
 80080ae:	6879      	ldr	r1, [r7, #4]
 80080b0:	4613      	mov	r3, r2
 80080b2:	009b      	lsls	r3, r3, #2
 80080b4:	4413      	add	r3, r2
 80080b6:	00db      	lsls	r3, r3, #3
 80080b8:	440b      	add	r3, r1
 80080ba:	333c      	adds	r3, #60	; 0x3c
 80080bc:	681a      	ldr	r2, [r3, #0]
 80080be:	78fb      	ldrb	r3, [r7, #3]
 80080c0:	4619      	mov	r1, r3
 80080c2:	f7fe fe54 	bl	8006d6e <USBD_LL_DataInStage>
}
 80080c6:	bf00      	nop
 80080c8:	3708      	adds	r7, #8
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}

080080ce <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080ce:	b580      	push	{r7, lr}
 80080d0:	b082      	sub	sp, #8
 80080d2:	af00      	add	r7, sp, #0
 80080d4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80080dc:	4618      	mov	r0, r3
 80080de:	f7fe ff64 	bl	8006faa <USBD_LL_SOF>
}
 80080e2:	bf00      	nop
 80080e4:	3708      	adds	r7, #8
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}

080080ea <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080ea:	b580      	push	{r7, lr}
 80080ec:	b084      	sub	sp, #16
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80080f2:	2301      	movs	r3, #1
 80080f4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	689b      	ldr	r3, [r3, #8]
 80080fa:	2b02      	cmp	r3, #2
 80080fc:	d001      	beq.n	8008102 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80080fe:	f7f8 facf 	bl	80006a0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8008108:	7bfa      	ldrb	r2, [r7, #15]
 800810a:	4611      	mov	r1, r2
 800810c:	4618      	mov	r0, r3
 800810e:	f7fe ff14 	bl	8006f3a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8008118:	4618      	mov	r0, r3
 800811a:	f7fe fecd 	bl	8006eb8 <USBD_LL_Reset>
}
 800811e:	bf00      	nop
 8008120:	3710      	adds	r7, #16
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}
	...

08008128 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b082      	sub	sp, #8
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8008136:	4618      	mov	r0, r3
 8008138:	f7fe ff0e 	bl	8006f58 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	699b      	ldr	r3, [r3, #24]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d005      	beq.n	8008150 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008144:	4b04      	ldr	r3, [pc, #16]	; (8008158 <HAL_PCD_SuspendCallback+0x30>)
 8008146:	691b      	ldr	r3, [r3, #16]
 8008148:	4a03      	ldr	r2, [pc, #12]	; (8008158 <HAL_PCD_SuspendCallback+0x30>)
 800814a:	f043 0306 	orr.w	r3, r3, #6
 800814e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008150:	bf00      	nop
 8008152:	3708      	adds	r7, #8
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}
 8008158:	e000ed00 	.word	0xe000ed00

0800815c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b082      	sub	sp, #8
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800816a:	4618      	mov	r0, r3
 800816c:	f7fe ff08 	bl	8006f80 <USBD_LL_Resume>
}
 8008170:	bf00      	nop
 8008172:	3708      	adds	r7, #8
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}

08008178 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b082      	sub	sp, #8
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008180:	4a28      	ldr	r2, [pc, #160]	; (8008224 <USBD_LL_Init+0xac>)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	4a26      	ldr	r2, [pc, #152]	; (8008224 <USBD_LL_Init+0xac>)
 800818c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008190:	4b24      	ldr	r3, [pc, #144]	; (8008224 <USBD_LL_Init+0xac>)
 8008192:	4a25      	ldr	r2, [pc, #148]	; (8008228 <USBD_LL_Init+0xb0>)
 8008194:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008196:	4b23      	ldr	r3, [pc, #140]	; (8008224 <USBD_LL_Init+0xac>)
 8008198:	2208      	movs	r2, #8
 800819a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800819c:	4b21      	ldr	r3, [pc, #132]	; (8008224 <USBD_LL_Init+0xac>)
 800819e:	2202      	movs	r2, #2
 80081a0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80081a2:	4b20      	ldr	r3, [pc, #128]	; (8008224 <USBD_LL_Init+0xac>)
 80081a4:	2200      	movs	r2, #0
 80081a6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80081a8:	4b1e      	ldr	r3, [pc, #120]	; (8008224 <USBD_LL_Init+0xac>)
 80081aa:	2200      	movs	r2, #0
 80081ac:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80081ae:	4b1d      	ldr	r3, [pc, #116]	; (8008224 <USBD_LL_Init+0xac>)
 80081b0:	2200      	movs	r2, #0
 80081b2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80081b4:	481b      	ldr	r0, [pc, #108]	; (8008224 <USBD_LL_Init+0xac>)
 80081b6:	f7f8 fe95 	bl	8000ee4 <HAL_PCD_Init>
 80081ba:	4603      	mov	r3, r0
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d001      	beq.n	80081c4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80081c0:	f7f8 fa6e 	bl	80006a0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80081ca:	2318      	movs	r3, #24
 80081cc:	2200      	movs	r2, #0
 80081ce:	2100      	movs	r1, #0
 80081d0:	f7fa fbb4 	bl	800293c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80081da:	2358      	movs	r3, #88	; 0x58
 80081dc:	2200      	movs	r2, #0
 80081de:	2180      	movs	r1, #128	; 0x80
 80081e0:	f7fa fbac 	bl	800293c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80081ea:	23c0      	movs	r3, #192	; 0xc0
 80081ec:	2200      	movs	r2, #0
 80081ee:	2181      	movs	r1, #129	; 0x81
 80081f0:	f7fa fba4 	bl	800293c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80081fa:	f44f 7388 	mov.w	r3, #272	; 0x110
 80081fe:	2200      	movs	r2, #0
 8008200:	2101      	movs	r1, #1
 8008202:	f7fa fb9b 	bl	800293c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800820c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008210:	2200      	movs	r2, #0
 8008212:	2182      	movs	r1, #130	; 0x82
 8008214:	f7fa fb92 	bl	800293c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008218:	2300      	movs	r3, #0
}
 800821a:	4618      	mov	r0, r3
 800821c:	3708      	adds	r7, #8
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}
 8008222:	bf00      	nop
 8008224:	20000f10 	.word	0x20000f10
 8008228:	40005c00 	.word	0x40005c00

0800822c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b084      	sub	sp, #16
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008234:	2300      	movs	r3, #0
 8008236:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008238:	2300      	movs	r3, #0
 800823a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008242:	4618      	mov	r0, r3
 8008244:	f7f8 ff4d 	bl	80010e2 <HAL_PCD_Start>
 8008248:	4603      	mov	r3, r0
 800824a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800824c:	7bfb      	ldrb	r3, [r7, #15]
 800824e:	4618      	mov	r0, r3
 8008250:	f000 f94e 	bl	80084f0 <USBD_Get_USB_Status>
 8008254:	4603      	mov	r3, r0
 8008256:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008258:	7bbb      	ldrb	r3, [r7, #14]
}
 800825a:	4618      	mov	r0, r3
 800825c:	3710      	adds	r7, #16
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}

08008262 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008262:	b580      	push	{r7, lr}
 8008264:	b084      	sub	sp, #16
 8008266:	af00      	add	r7, sp, #0
 8008268:	6078      	str	r0, [r7, #4]
 800826a:	4608      	mov	r0, r1
 800826c:	4611      	mov	r1, r2
 800826e:	461a      	mov	r2, r3
 8008270:	4603      	mov	r3, r0
 8008272:	70fb      	strb	r3, [r7, #3]
 8008274:	460b      	mov	r3, r1
 8008276:	70bb      	strb	r3, [r7, #2]
 8008278:	4613      	mov	r3, r2
 800827a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800827c:	2300      	movs	r3, #0
 800827e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008280:	2300      	movs	r3, #0
 8008282:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800828a:	78bb      	ldrb	r3, [r7, #2]
 800828c:	883a      	ldrh	r2, [r7, #0]
 800828e:	78f9      	ldrb	r1, [r7, #3]
 8008290:	f7f9 f8a2 	bl	80013d8 <HAL_PCD_EP_Open>
 8008294:	4603      	mov	r3, r0
 8008296:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008298:	7bfb      	ldrb	r3, [r7, #15]
 800829a:	4618      	mov	r0, r3
 800829c:	f000 f928 	bl	80084f0 <USBD_Get_USB_Status>
 80082a0:	4603      	mov	r3, r0
 80082a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80082a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	3710      	adds	r7, #16
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}

080082ae <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80082ae:	b580      	push	{r7, lr}
 80082b0:	b084      	sub	sp, #16
 80082b2:	af00      	add	r7, sp, #0
 80082b4:	6078      	str	r0, [r7, #4]
 80082b6:	460b      	mov	r3, r1
 80082b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082ba:	2300      	movs	r3, #0
 80082bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082be:	2300      	movs	r3, #0
 80082c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80082c8:	78fa      	ldrb	r2, [r7, #3]
 80082ca:	4611      	mov	r1, r2
 80082cc:	4618      	mov	r0, r3
 80082ce:	f7f9 f8e0 	bl	8001492 <HAL_PCD_EP_Close>
 80082d2:	4603      	mov	r3, r0
 80082d4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082d6:	7bfb      	ldrb	r3, [r7, #15]
 80082d8:	4618      	mov	r0, r3
 80082da:	f000 f909 	bl	80084f0 <USBD_Get_USB_Status>
 80082de:	4603      	mov	r3, r0
 80082e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80082e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	3710      	adds	r7, #16
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}

080082ec <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b084      	sub	sp, #16
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
 80082f4:	460b      	mov	r3, r1
 80082f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082f8:	2300      	movs	r3, #0
 80082fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082fc:	2300      	movs	r3, #0
 80082fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008306:	78fa      	ldrb	r2, [r7, #3]
 8008308:	4611      	mov	r1, r2
 800830a:	4618      	mov	r0, r3
 800830c:	f7f9 f988 	bl	8001620 <HAL_PCD_EP_SetStall>
 8008310:	4603      	mov	r3, r0
 8008312:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008314:	7bfb      	ldrb	r3, [r7, #15]
 8008316:	4618      	mov	r0, r3
 8008318:	f000 f8ea 	bl	80084f0 <USBD_Get_USB_Status>
 800831c:	4603      	mov	r3, r0
 800831e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008320:	7bbb      	ldrb	r3, [r7, #14]
}
 8008322:	4618      	mov	r0, r3
 8008324:	3710      	adds	r7, #16
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}

0800832a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800832a:	b580      	push	{r7, lr}
 800832c:	b084      	sub	sp, #16
 800832e:	af00      	add	r7, sp, #0
 8008330:	6078      	str	r0, [r7, #4]
 8008332:	460b      	mov	r3, r1
 8008334:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008336:	2300      	movs	r3, #0
 8008338:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800833a:	2300      	movs	r3, #0
 800833c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008344:	78fa      	ldrb	r2, [r7, #3]
 8008346:	4611      	mov	r1, r2
 8008348:	4618      	mov	r0, r3
 800834a:	f7f9 f9c9 	bl	80016e0 <HAL_PCD_EP_ClrStall>
 800834e:	4603      	mov	r3, r0
 8008350:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008352:	7bfb      	ldrb	r3, [r7, #15]
 8008354:	4618      	mov	r0, r3
 8008356:	f000 f8cb 	bl	80084f0 <USBD_Get_USB_Status>
 800835a:	4603      	mov	r3, r0
 800835c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800835e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008360:	4618      	mov	r0, r3
 8008362:	3710      	adds	r7, #16
 8008364:	46bd      	mov	sp, r7
 8008366:	bd80      	pop	{r7, pc}

08008368 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008368:	b480      	push	{r7}
 800836a:	b085      	sub	sp, #20
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
 8008370:	460b      	mov	r3, r1
 8008372:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800837a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800837c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008380:	2b00      	cmp	r3, #0
 8008382:	da0c      	bge.n	800839e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008384:	78fb      	ldrb	r3, [r7, #3]
 8008386:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800838a:	68f9      	ldr	r1, [r7, #12]
 800838c:	1c5a      	adds	r2, r3, #1
 800838e:	4613      	mov	r3, r2
 8008390:	009b      	lsls	r3, r3, #2
 8008392:	4413      	add	r3, r2
 8008394:	00db      	lsls	r3, r3, #3
 8008396:	440b      	add	r3, r1
 8008398:	3302      	adds	r3, #2
 800839a:	781b      	ldrb	r3, [r3, #0]
 800839c:	e00b      	b.n	80083b6 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800839e:	78fb      	ldrb	r3, [r7, #3]
 80083a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80083a4:	68f9      	ldr	r1, [r7, #12]
 80083a6:	4613      	mov	r3, r2
 80083a8:	009b      	lsls	r3, r3, #2
 80083aa:	4413      	add	r3, r2
 80083ac:	00db      	lsls	r3, r3, #3
 80083ae:	440b      	add	r3, r1
 80083b0:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80083b4:	781b      	ldrb	r3, [r3, #0]
  }
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	3714      	adds	r7, #20
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bc80      	pop	{r7}
 80083be:	4770      	bx	lr

080083c0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b084      	sub	sp, #16
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
 80083c8:	460b      	mov	r3, r1
 80083ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083cc:	2300      	movs	r3, #0
 80083ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083d0:	2300      	movs	r3, #0
 80083d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80083da:	78fa      	ldrb	r2, [r7, #3]
 80083dc:	4611      	mov	r1, r2
 80083de:	4618      	mov	r0, r3
 80083e0:	f7f8 ffd5 	bl	800138e <HAL_PCD_SetAddress>
 80083e4:	4603      	mov	r3, r0
 80083e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80083e8:	7bfb      	ldrb	r3, [r7, #15]
 80083ea:	4618      	mov	r0, r3
 80083ec:	f000 f880 	bl	80084f0 <USBD_Get_USB_Status>
 80083f0:	4603      	mov	r3, r0
 80083f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80083f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	3710      	adds	r7, #16
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}

080083fe <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80083fe:	b580      	push	{r7, lr}
 8008400:	b086      	sub	sp, #24
 8008402:	af00      	add	r7, sp, #0
 8008404:	60f8      	str	r0, [r7, #12]
 8008406:	607a      	str	r2, [r7, #4]
 8008408:	461a      	mov	r2, r3
 800840a:	460b      	mov	r3, r1
 800840c:	72fb      	strb	r3, [r7, #11]
 800840e:	4613      	mov	r3, r2
 8008410:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008412:	2300      	movs	r3, #0
 8008414:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008416:	2300      	movs	r3, #0
 8008418:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008420:	893b      	ldrh	r3, [r7, #8]
 8008422:	7af9      	ldrb	r1, [r7, #11]
 8008424:	687a      	ldr	r2, [r7, #4]
 8008426:	f7f9 f8c4 	bl	80015b2 <HAL_PCD_EP_Transmit>
 800842a:	4603      	mov	r3, r0
 800842c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800842e:	7dfb      	ldrb	r3, [r7, #23]
 8008430:	4618      	mov	r0, r3
 8008432:	f000 f85d 	bl	80084f0 <USBD_Get_USB_Status>
 8008436:	4603      	mov	r3, r0
 8008438:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800843a:	7dbb      	ldrb	r3, [r7, #22]
}
 800843c:	4618      	mov	r0, r3
 800843e:	3718      	adds	r7, #24
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}

08008444 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b086      	sub	sp, #24
 8008448:	af00      	add	r7, sp, #0
 800844a:	60f8      	str	r0, [r7, #12]
 800844c:	607a      	str	r2, [r7, #4]
 800844e:	461a      	mov	r2, r3
 8008450:	460b      	mov	r3, r1
 8008452:	72fb      	strb	r3, [r7, #11]
 8008454:	4613      	mov	r3, r2
 8008456:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008458:	2300      	movs	r3, #0
 800845a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800845c:	2300      	movs	r3, #0
 800845e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008466:	893b      	ldrh	r3, [r7, #8]
 8008468:	7af9      	ldrb	r1, [r7, #11]
 800846a:	687a      	ldr	r2, [r7, #4]
 800846c:	f7f9 f859 	bl	8001522 <HAL_PCD_EP_Receive>
 8008470:	4603      	mov	r3, r0
 8008472:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008474:	7dfb      	ldrb	r3, [r7, #23]
 8008476:	4618      	mov	r0, r3
 8008478:	f000 f83a 	bl	80084f0 <USBD_Get_USB_Status>
 800847c:	4603      	mov	r3, r0
 800847e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008480:	7dbb      	ldrb	r3, [r7, #22]
}
 8008482:	4618      	mov	r0, r3
 8008484:	3718      	adds	r7, #24
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}

0800848a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800848a:	b580      	push	{r7, lr}
 800848c:	b082      	sub	sp, #8
 800848e:	af00      	add	r7, sp, #0
 8008490:	6078      	str	r0, [r7, #4]
 8008492:	460b      	mov	r3, r1
 8008494:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800849c:	78fa      	ldrb	r2, [r7, #3]
 800849e:	4611      	mov	r1, r2
 80084a0:	4618      	mov	r0, r3
 80084a2:	f7f9 f86f 	bl	8001584 <HAL_PCD_EP_GetRxCount>
 80084a6:	4603      	mov	r3, r0
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	3708      	adds	r7, #8
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}

080084b0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80084b0:	b480      	push	{r7}
 80084b2:	b083      	sub	sp, #12
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80084b8:	4b02      	ldr	r3, [pc, #8]	; (80084c4 <USBD_static_malloc+0x14>)
}
 80084ba:	4618      	mov	r0, r3
 80084bc:	370c      	adds	r7, #12
 80084be:	46bd      	mov	sp, r7
 80084c0:	bc80      	pop	{r7}
 80084c2:	4770      	bx	lr
 80084c4:	20001200 	.word	0x20001200

080084c8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80084c8:	b480      	push	{r7}
 80084ca:	b083      	sub	sp, #12
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]

}
 80084d0:	bf00      	nop
 80084d2:	370c      	adds	r7, #12
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bc80      	pop	{r7}
 80084d8:	4770      	bx	lr

080084da <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084da:	b480      	push	{r7}
 80084dc:	b083      	sub	sp, #12
 80084de:	af00      	add	r7, sp, #0
 80084e0:	6078      	str	r0, [r7, #4]
 80084e2:	460b      	mov	r3, r1
 80084e4:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80084e6:	bf00      	nop
 80084e8:	370c      	adds	r7, #12
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bc80      	pop	{r7}
 80084ee:	4770      	bx	lr

080084f0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80084f0:	b480      	push	{r7}
 80084f2:	b085      	sub	sp, #20
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	4603      	mov	r3, r0
 80084f8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084fa:	2300      	movs	r3, #0
 80084fc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80084fe:	79fb      	ldrb	r3, [r7, #7]
 8008500:	2b03      	cmp	r3, #3
 8008502:	d817      	bhi.n	8008534 <USBD_Get_USB_Status+0x44>
 8008504:	a201      	add	r2, pc, #4	; (adr r2, 800850c <USBD_Get_USB_Status+0x1c>)
 8008506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800850a:	bf00      	nop
 800850c:	0800851d 	.word	0x0800851d
 8008510:	08008523 	.word	0x08008523
 8008514:	08008529 	.word	0x08008529
 8008518:	0800852f 	.word	0x0800852f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800851c:	2300      	movs	r3, #0
 800851e:	73fb      	strb	r3, [r7, #15]
    break;
 8008520:	e00b      	b.n	800853a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008522:	2302      	movs	r3, #2
 8008524:	73fb      	strb	r3, [r7, #15]
    break;
 8008526:	e008      	b.n	800853a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008528:	2301      	movs	r3, #1
 800852a:	73fb      	strb	r3, [r7, #15]
    break;
 800852c:	e005      	b.n	800853a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800852e:	2302      	movs	r3, #2
 8008530:	73fb      	strb	r3, [r7, #15]
    break;
 8008532:	e002      	b.n	800853a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008534:	2302      	movs	r3, #2
 8008536:	73fb      	strb	r3, [r7, #15]
    break;
 8008538:	bf00      	nop
  }
  return usb_status;
 800853a:	7bfb      	ldrb	r3, [r7, #15]
}
 800853c:	4618      	mov	r0, r3
 800853e:	3714      	adds	r7, #20
 8008540:	46bd      	mov	sp, r7
 8008542:	bc80      	pop	{r7}
 8008544:	4770      	bx	lr
 8008546:	bf00      	nop

08008548 <siprintf>:
 8008548:	b40e      	push	{r1, r2, r3}
 800854a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800854e:	b500      	push	{lr}
 8008550:	b09c      	sub	sp, #112	; 0x70
 8008552:	ab1d      	add	r3, sp, #116	; 0x74
 8008554:	9002      	str	r0, [sp, #8]
 8008556:	9006      	str	r0, [sp, #24]
 8008558:	9107      	str	r1, [sp, #28]
 800855a:	9104      	str	r1, [sp, #16]
 800855c:	4808      	ldr	r0, [pc, #32]	; (8008580 <siprintf+0x38>)
 800855e:	4909      	ldr	r1, [pc, #36]	; (8008584 <siprintf+0x3c>)
 8008560:	f853 2b04 	ldr.w	r2, [r3], #4
 8008564:	9105      	str	r1, [sp, #20]
 8008566:	6800      	ldr	r0, [r0, #0]
 8008568:	a902      	add	r1, sp, #8
 800856a:	9301      	str	r3, [sp, #4]
 800856c:	f000 f9a2 	bl	80088b4 <_svfiprintf_r>
 8008570:	2200      	movs	r2, #0
 8008572:	9b02      	ldr	r3, [sp, #8]
 8008574:	701a      	strb	r2, [r3, #0]
 8008576:	b01c      	add	sp, #112	; 0x70
 8008578:	f85d eb04 	ldr.w	lr, [sp], #4
 800857c:	b003      	add	sp, #12
 800857e:	4770      	bx	lr
 8008580:	200001c8 	.word	0x200001c8
 8008584:	ffff0208 	.word	0xffff0208

08008588 <memset>:
 8008588:	4603      	mov	r3, r0
 800858a:	4402      	add	r2, r0
 800858c:	4293      	cmp	r3, r2
 800858e:	d100      	bne.n	8008592 <memset+0xa>
 8008590:	4770      	bx	lr
 8008592:	f803 1b01 	strb.w	r1, [r3], #1
 8008596:	e7f9      	b.n	800858c <memset+0x4>

08008598 <strncat>:
 8008598:	b530      	push	{r4, r5, lr}
 800859a:	4604      	mov	r4, r0
 800859c:	7825      	ldrb	r5, [r4, #0]
 800859e:	4623      	mov	r3, r4
 80085a0:	3401      	adds	r4, #1
 80085a2:	2d00      	cmp	r5, #0
 80085a4:	d1fa      	bne.n	800859c <strncat+0x4>
 80085a6:	3a01      	subs	r2, #1
 80085a8:	d304      	bcc.n	80085b4 <strncat+0x1c>
 80085aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80085ae:	f803 4b01 	strb.w	r4, [r3], #1
 80085b2:	b904      	cbnz	r4, 80085b6 <strncat+0x1e>
 80085b4:	bd30      	pop	{r4, r5, pc}
 80085b6:	2a00      	cmp	r2, #0
 80085b8:	d1f5      	bne.n	80085a6 <strncat+0xe>
 80085ba:	701a      	strb	r2, [r3, #0]
 80085bc:	e7f3      	b.n	80085a6 <strncat+0xe>
	...

080085c0 <__errno>:
 80085c0:	4b01      	ldr	r3, [pc, #4]	; (80085c8 <__errno+0x8>)
 80085c2:	6818      	ldr	r0, [r3, #0]
 80085c4:	4770      	bx	lr
 80085c6:	bf00      	nop
 80085c8:	200001c8 	.word	0x200001c8

080085cc <__libc_init_array>:
 80085cc:	b570      	push	{r4, r5, r6, lr}
 80085ce:	2600      	movs	r6, #0
 80085d0:	4d0c      	ldr	r5, [pc, #48]	; (8008604 <__libc_init_array+0x38>)
 80085d2:	4c0d      	ldr	r4, [pc, #52]	; (8008608 <__libc_init_array+0x3c>)
 80085d4:	1b64      	subs	r4, r4, r5
 80085d6:	10a4      	asrs	r4, r4, #2
 80085d8:	42a6      	cmp	r6, r4
 80085da:	d109      	bne.n	80085f0 <__libc_init_array+0x24>
 80085dc:	f000 fc7a 	bl	8008ed4 <_init>
 80085e0:	2600      	movs	r6, #0
 80085e2:	4d0a      	ldr	r5, [pc, #40]	; (800860c <__libc_init_array+0x40>)
 80085e4:	4c0a      	ldr	r4, [pc, #40]	; (8008610 <__libc_init_array+0x44>)
 80085e6:	1b64      	subs	r4, r4, r5
 80085e8:	10a4      	asrs	r4, r4, #2
 80085ea:	42a6      	cmp	r6, r4
 80085ec:	d105      	bne.n	80085fa <__libc_init_array+0x2e>
 80085ee:	bd70      	pop	{r4, r5, r6, pc}
 80085f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80085f4:	4798      	blx	r3
 80085f6:	3601      	adds	r6, #1
 80085f8:	e7ee      	b.n	80085d8 <__libc_init_array+0xc>
 80085fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80085fe:	4798      	blx	r3
 8008600:	3601      	adds	r6, #1
 8008602:	e7f2      	b.n	80085ea <__libc_init_array+0x1e>
 8008604:	080093b4 	.word	0x080093b4
 8008608:	080093b4 	.word	0x080093b4
 800860c:	080093b4 	.word	0x080093b4
 8008610:	080093b8 	.word	0x080093b8

08008614 <__retarget_lock_acquire_recursive>:
 8008614:	4770      	bx	lr

08008616 <__retarget_lock_release_recursive>:
 8008616:	4770      	bx	lr

08008618 <_free_r>:
 8008618:	b538      	push	{r3, r4, r5, lr}
 800861a:	4605      	mov	r5, r0
 800861c:	2900      	cmp	r1, #0
 800861e:	d040      	beq.n	80086a2 <_free_r+0x8a>
 8008620:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008624:	1f0c      	subs	r4, r1, #4
 8008626:	2b00      	cmp	r3, #0
 8008628:	bfb8      	it	lt
 800862a:	18e4      	addlt	r4, r4, r3
 800862c:	f000 f8dc 	bl	80087e8 <__malloc_lock>
 8008630:	4a1c      	ldr	r2, [pc, #112]	; (80086a4 <_free_r+0x8c>)
 8008632:	6813      	ldr	r3, [r2, #0]
 8008634:	b933      	cbnz	r3, 8008644 <_free_r+0x2c>
 8008636:	6063      	str	r3, [r4, #4]
 8008638:	6014      	str	r4, [r2, #0]
 800863a:	4628      	mov	r0, r5
 800863c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008640:	f000 b8d8 	b.w	80087f4 <__malloc_unlock>
 8008644:	42a3      	cmp	r3, r4
 8008646:	d908      	bls.n	800865a <_free_r+0x42>
 8008648:	6820      	ldr	r0, [r4, #0]
 800864a:	1821      	adds	r1, r4, r0
 800864c:	428b      	cmp	r3, r1
 800864e:	bf01      	itttt	eq
 8008650:	6819      	ldreq	r1, [r3, #0]
 8008652:	685b      	ldreq	r3, [r3, #4]
 8008654:	1809      	addeq	r1, r1, r0
 8008656:	6021      	streq	r1, [r4, #0]
 8008658:	e7ed      	b.n	8008636 <_free_r+0x1e>
 800865a:	461a      	mov	r2, r3
 800865c:	685b      	ldr	r3, [r3, #4]
 800865e:	b10b      	cbz	r3, 8008664 <_free_r+0x4c>
 8008660:	42a3      	cmp	r3, r4
 8008662:	d9fa      	bls.n	800865a <_free_r+0x42>
 8008664:	6811      	ldr	r1, [r2, #0]
 8008666:	1850      	adds	r0, r2, r1
 8008668:	42a0      	cmp	r0, r4
 800866a:	d10b      	bne.n	8008684 <_free_r+0x6c>
 800866c:	6820      	ldr	r0, [r4, #0]
 800866e:	4401      	add	r1, r0
 8008670:	1850      	adds	r0, r2, r1
 8008672:	4283      	cmp	r3, r0
 8008674:	6011      	str	r1, [r2, #0]
 8008676:	d1e0      	bne.n	800863a <_free_r+0x22>
 8008678:	6818      	ldr	r0, [r3, #0]
 800867a:	685b      	ldr	r3, [r3, #4]
 800867c:	4408      	add	r0, r1
 800867e:	6010      	str	r0, [r2, #0]
 8008680:	6053      	str	r3, [r2, #4]
 8008682:	e7da      	b.n	800863a <_free_r+0x22>
 8008684:	d902      	bls.n	800868c <_free_r+0x74>
 8008686:	230c      	movs	r3, #12
 8008688:	602b      	str	r3, [r5, #0]
 800868a:	e7d6      	b.n	800863a <_free_r+0x22>
 800868c:	6820      	ldr	r0, [r4, #0]
 800868e:	1821      	adds	r1, r4, r0
 8008690:	428b      	cmp	r3, r1
 8008692:	bf01      	itttt	eq
 8008694:	6819      	ldreq	r1, [r3, #0]
 8008696:	685b      	ldreq	r3, [r3, #4]
 8008698:	1809      	addeq	r1, r1, r0
 800869a:	6021      	streq	r1, [r4, #0]
 800869c:	6063      	str	r3, [r4, #4]
 800869e:	6054      	str	r4, [r2, #4]
 80086a0:	e7cb      	b.n	800863a <_free_r+0x22>
 80086a2:	bd38      	pop	{r3, r4, r5, pc}
 80086a4:	20001560 	.word	0x20001560

080086a8 <sbrk_aligned>:
 80086a8:	b570      	push	{r4, r5, r6, lr}
 80086aa:	4e0e      	ldr	r6, [pc, #56]	; (80086e4 <sbrk_aligned+0x3c>)
 80086ac:	460c      	mov	r4, r1
 80086ae:	6831      	ldr	r1, [r6, #0]
 80086b0:	4605      	mov	r5, r0
 80086b2:	b911      	cbnz	r1, 80086ba <sbrk_aligned+0x12>
 80086b4:	f000 fbaa 	bl	8008e0c <_sbrk_r>
 80086b8:	6030      	str	r0, [r6, #0]
 80086ba:	4621      	mov	r1, r4
 80086bc:	4628      	mov	r0, r5
 80086be:	f000 fba5 	bl	8008e0c <_sbrk_r>
 80086c2:	1c43      	adds	r3, r0, #1
 80086c4:	d00a      	beq.n	80086dc <sbrk_aligned+0x34>
 80086c6:	1cc4      	adds	r4, r0, #3
 80086c8:	f024 0403 	bic.w	r4, r4, #3
 80086cc:	42a0      	cmp	r0, r4
 80086ce:	d007      	beq.n	80086e0 <sbrk_aligned+0x38>
 80086d0:	1a21      	subs	r1, r4, r0
 80086d2:	4628      	mov	r0, r5
 80086d4:	f000 fb9a 	bl	8008e0c <_sbrk_r>
 80086d8:	3001      	adds	r0, #1
 80086da:	d101      	bne.n	80086e0 <sbrk_aligned+0x38>
 80086dc:	f04f 34ff 	mov.w	r4, #4294967295
 80086e0:	4620      	mov	r0, r4
 80086e2:	bd70      	pop	{r4, r5, r6, pc}
 80086e4:	20001564 	.word	0x20001564

080086e8 <_malloc_r>:
 80086e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086ec:	1ccd      	adds	r5, r1, #3
 80086ee:	f025 0503 	bic.w	r5, r5, #3
 80086f2:	3508      	adds	r5, #8
 80086f4:	2d0c      	cmp	r5, #12
 80086f6:	bf38      	it	cc
 80086f8:	250c      	movcc	r5, #12
 80086fa:	2d00      	cmp	r5, #0
 80086fc:	4607      	mov	r7, r0
 80086fe:	db01      	blt.n	8008704 <_malloc_r+0x1c>
 8008700:	42a9      	cmp	r1, r5
 8008702:	d905      	bls.n	8008710 <_malloc_r+0x28>
 8008704:	230c      	movs	r3, #12
 8008706:	2600      	movs	r6, #0
 8008708:	603b      	str	r3, [r7, #0]
 800870a:	4630      	mov	r0, r6
 800870c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008710:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80087e4 <_malloc_r+0xfc>
 8008714:	f000 f868 	bl	80087e8 <__malloc_lock>
 8008718:	f8d8 3000 	ldr.w	r3, [r8]
 800871c:	461c      	mov	r4, r3
 800871e:	bb5c      	cbnz	r4, 8008778 <_malloc_r+0x90>
 8008720:	4629      	mov	r1, r5
 8008722:	4638      	mov	r0, r7
 8008724:	f7ff ffc0 	bl	80086a8 <sbrk_aligned>
 8008728:	1c43      	adds	r3, r0, #1
 800872a:	4604      	mov	r4, r0
 800872c:	d155      	bne.n	80087da <_malloc_r+0xf2>
 800872e:	f8d8 4000 	ldr.w	r4, [r8]
 8008732:	4626      	mov	r6, r4
 8008734:	2e00      	cmp	r6, #0
 8008736:	d145      	bne.n	80087c4 <_malloc_r+0xdc>
 8008738:	2c00      	cmp	r4, #0
 800873a:	d048      	beq.n	80087ce <_malloc_r+0xe6>
 800873c:	6823      	ldr	r3, [r4, #0]
 800873e:	4631      	mov	r1, r6
 8008740:	4638      	mov	r0, r7
 8008742:	eb04 0903 	add.w	r9, r4, r3
 8008746:	f000 fb61 	bl	8008e0c <_sbrk_r>
 800874a:	4581      	cmp	r9, r0
 800874c:	d13f      	bne.n	80087ce <_malloc_r+0xe6>
 800874e:	6821      	ldr	r1, [r4, #0]
 8008750:	4638      	mov	r0, r7
 8008752:	1a6d      	subs	r5, r5, r1
 8008754:	4629      	mov	r1, r5
 8008756:	f7ff ffa7 	bl	80086a8 <sbrk_aligned>
 800875a:	3001      	adds	r0, #1
 800875c:	d037      	beq.n	80087ce <_malloc_r+0xe6>
 800875e:	6823      	ldr	r3, [r4, #0]
 8008760:	442b      	add	r3, r5
 8008762:	6023      	str	r3, [r4, #0]
 8008764:	f8d8 3000 	ldr.w	r3, [r8]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d038      	beq.n	80087de <_malloc_r+0xf6>
 800876c:	685a      	ldr	r2, [r3, #4]
 800876e:	42a2      	cmp	r2, r4
 8008770:	d12b      	bne.n	80087ca <_malloc_r+0xe2>
 8008772:	2200      	movs	r2, #0
 8008774:	605a      	str	r2, [r3, #4]
 8008776:	e00f      	b.n	8008798 <_malloc_r+0xb0>
 8008778:	6822      	ldr	r2, [r4, #0]
 800877a:	1b52      	subs	r2, r2, r5
 800877c:	d41f      	bmi.n	80087be <_malloc_r+0xd6>
 800877e:	2a0b      	cmp	r2, #11
 8008780:	d917      	bls.n	80087b2 <_malloc_r+0xca>
 8008782:	1961      	adds	r1, r4, r5
 8008784:	42a3      	cmp	r3, r4
 8008786:	6025      	str	r5, [r4, #0]
 8008788:	bf18      	it	ne
 800878a:	6059      	strne	r1, [r3, #4]
 800878c:	6863      	ldr	r3, [r4, #4]
 800878e:	bf08      	it	eq
 8008790:	f8c8 1000 	streq.w	r1, [r8]
 8008794:	5162      	str	r2, [r4, r5]
 8008796:	604b      	str	r3, [r1, #4]
 8008798:	4638      	mov	r0, r7
 800879a:	f104 060b 	add.w	r6, r4, #11
 800879e:	f000 f829 	bl	80087f4 <__malloc_unlock>
 80087a2:	f026 0607 	bic.w	r6, r6, #7
 80087a6:	1d23      	adds	r3, r4, #4
 80087a8:	1af2      	subs	r2, r6, r3
 80087aa:	d0ae      	beq.n	800870a <_malloc_r+0x22>
 80087ac:	1b9b      	subs	r3, r3, r6
 80087ae:	50a3      	str	r3, [r4, r2]
 80087b0:	e7ab      	b.n	800870a <_malloc_r+0x22>
 80087b2:	42a3      	cmp	r3, r4
 80087b4:	6862      	ldr	r2, [r4, #4]
 80087b6:	d1dd      	bne.n	8008774 <_malloc_r+0x8c>
 80087b8:	f8c8 2000 	str.w	r2, [r8]
 80087bc:	e7ec      	b.n	8008798 <_malloc_r+0xb0>
 80087be:	4623      	mov	r3, r4
 80087c0:	6864      	ldr	r4, [r4, #4]
 80087c2:	e7ac      	b.n	800871e <_malloc_r+0x36>
 80087c4:	4634      	mov	r4, r6
 80087c6:	6876      	ldr	r6, [r6, #4]
 80087c8:	e7b4      	b.n	8008734 <_malloc_r+0x4c>
 80087ca:	4613      	mov	r3, r2
 80087cc:	e7cc      	b.n	8008768 <_malloc_r+0x80>
 80087ce:	230c      	movs	r3, #12
 80087d0:	4638      	mov	r0, r7
 80087d2:	603b      	str	r3, [r7, #0]
 80087d4:	f000 f80e 	bl	80087f4 <__malloc_unlock>
 80087d8:	e797      	b.n	800870a <_malloc_r+0x22>
 80087da:	6025      	str	r5, [r4, #0]
 80087dc:	e7dc      	b.n	8008798 <_malloc_r+0xb0>
 80087de:	605b      	str	r3, [r3, #4]
 80087e0:	deff      	udf	#255	; 0xff
 80087e2:	bf00      	nop
 80087e4:	20001560 	.word	0x20001560

080087e8 <__malloc_lock>:
 80087e8:	4801      	ldr	r0, [pc, #4]	; (80087f0 <__malloc_lock+0x8>)
 80087ea:	f7ff bf13 	b.w	8008614 <__retarget_lock_acquire_recursive>
 80087ee:	bf00      	nop
 80087f0:	2000155c 	.word	0x2000155c

080087f4 <__malloc_unlock>:
 80087f4:	4801      	ldr	r0, [pc, #4]	; (80087fc <__malloc_unlock+0x8>)
 80087f6:	f7ff bf0e 	b.w	8008616 <__retarget_lock_release_recursive>
 80087fa:	bf00      	nop
 80087fc:	2000155c 	.word	0x2000155c

08008800 <__ssputs_r>:
 8008800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008804:	461f      	mov	r7, r3
 8008806:	688e      	ldr	r6, [r1, #8]
 8008808:	4682      	mov	sl, r0
 800880a:	42be      	cmp	r6, r7
 800880c:	460c      	mov	r4, r1
 800880e:	4690      	mov	r8, r2
 8008810:	680b      	ldr	r3, [r1, #0]
 8008812:	d82c      	bhi.n	800886e <__ssputs_r+0x6e>
 8008814:	898a      	ldrh	r2, [r1, #12]
 8008816:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800881a:	d026      	beq.n	800886a <__ssputs_r+0x6a>
 800881c:	6965      	ldr	r5, [r4, #20]
 800881e:	6909      	ldr	r1, [r1, #16]
 8008820:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008824:	eba3 0901 	sub.w	r9, r3, r1
 8008828:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800882c:	1c7b      	adds	r3, r7, #1
 800882e:	444b      	add	r3, r9
 8008830:	106d      	asrs	r5, r5, #1
 8008832:	429d      	cmp	r5, r3
 8008834:	bf38      	it	cc
 8008836:	461d      	movcc	r5, r3
 8008838:	0553      	lsls	r3, r2, #21
 800883a:	d527      	bpl.n	800888c <__ssputs_r+0x8c>
 800883c:	4629      	mov	r1, r5
 800883e:	f7ff ff53 	bl	80086e8 <_malloc_r>
 8008842:	4606      	mov	r6, r0
 8008844:	b360      	cbz	r0, 80088a0 <__ssputs_r+0xa0>
 8008846:	464a      	mov	r2, r9
 8008848:	6921      	ldr	r1, [r4, #16]
 800884a:	f000 fafd 	bl	8008e48 <memcpy>
 800884e:	89a3      	ldrh	r3, [r4, #12]
 8008850:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008858:	81a3      	strh	r3, [r4, #12]
 800885a:	6126      	str	r6, [r4, #16]
 800885c:	444e      	add	r6, r9
 800885e:	6026      	str	r6, [r4, #0]
 8008860:	463e      	mov	r6, r7
 8008862:	6165      	str	r5, [r4, #20]
 8008864:	eba5 0509 	sub.w	r5, r5, r9
 8008868:	60a5      	str	r5, [r4, #8]
 800886a:	42be      	cmp	r6, r7
 800886c:	d900      	bls.n	8008870 <__ssputs_r+0x70>
 800886e:	463e      	mov	r6, r7
 8008870:	4632      	mov	r2, r6
 8008872:	4641      	mov	r1, r8
 8008874:	6820      	ldr	r0, [r4, #0]
 8008876:	f000 faaf 	bl	8008dd8 <memmove>
 800887a:	2000      	movs	r0, #0
 800887c:	68a3      	ldr	r3, [r4, #8]
 800887e:	1b9b      	subs	r3, r3, r6
 8008880:	60a3      	str	r3, [r4, #8]
 8008882:	6823      	ldr	r3, [r4, #0]
 8008884:	4433      	add	r3, r6
 8008886:	6023      	str	r3, [r4, #0]
 8008888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800888c:	462a      	mov	r2, r5
 800888e:	f000 fae9 	bl	8008e64 <_realloc_r>
 8008892:	4606      	mov	r6, r0
 8008894:	2800      	cmp	r0, #0
 8008896:	d1e0      	bne.n	800885a <__ssputs_r+0x5a>
 8008898:	4650      	mov	r0, sl
 800889a:	6921      	ldr	r1, [r4, #16]
 800889c:	f7ff febc 	bl	8008618 <_free_r>
 80088a0:	230c      	movs	r3, #12
 80088a2:	f8ca 3000 	str.w	r3, [sl]
 80088a6:	89a3      	ldrh	r3, [r4, #12]
 80088a8:	f04f 30ff 	mov.w	r0, #4294967295
 80088ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088b0:	81a3      	strh	r3, [r4, #12]
 80088b2:	e7e9      	b.n	8008888 <__ssputs_r+0x88>

080088b4 <_svfiprintf_r>:
 80088b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088b8:	4698      	mov	r8, r3
 80088ba:	898b      	ldrh	r3, [r1, #12]
 80088bc:	4607      	mov	r7, r0
 80088be:	061b      	lsls	r3, r3, #24
 80088c0:	460d      	mov	r5, r1
 80088c2:	4614      	mov	r4, r2
 80088c4:	b09d      	sub	sp, #116	; 0x74
 80088c6:	d50e      	bpl.n	80088e6 <_svfiprintf_r+0x32>
 80088c8:	690b      	ldr	r3, [r1, #16]
 80088ca:	b963      	cbnz	r3, 80088e6 <_svfiprintf_r+0x32>
 80088cc:	2140      	movs	r1, #64	; 0x40
 80088ce:	f7ff ff0b 	bl	80086e8 <_malloc_r>
 80088d2:	6028      	str	r0, [r5, #0]
 80088d4:	6128      	str	r0, [r5, #16]
 80088d6:	b920      	cbnz	r0, 80088e2 <_svfiprintf_r+0x2e>
 80088d8:	230c      	movs	r3, #12
 80088da:	603b      	str	r3, [r7, #0]
 80088dc:	f04f 30ff 	mov.w	r0, #4294967295
 80088e0:	e0d0      	b.n	8008a84 <_svfiprintf_r+0x1d0>
 80088e2:	2340      	movs	r3, #64	; 0x40
 80088e4:	616b      	str	r3, [r5, #20]
 80088e6:	2300      	movs	r3, #0
 80088e8:	9309      	str	r3, [sp, #36]	; 0x24
 80088ea:	2320      	movs	r3, #32
 80088ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80088f0:	2330      	movs	r3, #48	; 0x30
 80088f2:	f04f 0901 	mov.w	r9, #1
 80088f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80088fa:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8008a9c <_svfiprintf_r+0x1e8>
 80088fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008902:	4623      	mov	r3, r4
 8008904:	469a      	mov	sl, r3
 8008906:	f813 2b01 	ldrb.w	r2, [r3], #1
 800890a:	b10a      	cbz	r2, 8008910 <_svfiprintf_r+0x5c>
 800890c:	2a25      	cmp	r2, #37	; 0x25
 800890e:	d1f9      	bne.n	8008904 <_svfiprintf_r+0x50>
 8008910:	ebba 0b04 	subs.w	fp, sl, r4
 8008914:	d00b      	beq.n	800892e <_svfiprintf_r+0x7a>
 8008916:	465b      	mov	r3, fp
 8008918:	4622      	mov	r2, r4
 800891a:	4629      	mov	r1, r5
 800891c:	4638      	mov	r0, r7
 800891e:	f7ff ff6f 	bl	8008800 <__ssputs_r>
 8008922:	3001      	adds	r0, #1
 8008924:	f000 80a9 	beq.w	8008a7a <_svfiprintf_r+0x1c6>
 8008928:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800892a:	445a      	add	r2, fp
 800892c:	9209      	str	r2, [sp, #36]	; 0x24
 800892e:	f89a 3000 	ldrb.w	r3, [sl]
 8008932:	2b00      	cmp	r3, #0
 8008934:	f000 80a1 	beq.w	8008a7a <_svfiprintf_r+0x1c6>
 8008938:	2300      	movs	r3, #0
 800893a:	f04f 32ff 	mov.w	r2, #4294967295
 800893e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008942:	f10a 0a01 	add.w	sl, sl, #1
 8008946:	9304      	str	r3, [sp, #16]
 8008948:	9307      	str	r3, [sp, #28]
 800894a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800894e:	931a      	str	r3, [sp, #104]	; 0x68
 8008950:	4654      	mov	r4, sl
 8008952:	2205      	movs	r2, #5
 8008954:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008958:	4850      	ldr	r0, [pc, #320]	; (8008a9c <_svfiprintf_r+0x1e8>)
 800895a:	f000 fa67 	bl	8008e2c <memchr>
 800895e:	9a04      	ldr	r2, [sp, #16]
 8008960:	b9d8      	cbnz	r0, 800899a <_svfiprintf_r+0xe6>
 8008962:	06d0      	lsls	r0, r2, #27
 8008964:	bf44      	itt	mi
 8008966:	2320      	movmi	r3, #32
 8008968:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800896c:	0711      	lsls	r1, r2, #28
 800896e:	bf44      	itt	mi
 8008970:	232b      	movmi	r3, #43	; 0x2b
 8008972:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008976:	f89a 3000 	ldrb.w	r3, [sl]
 800897a:	2b2a      	cmp	r3, #42	; 0x2a
 800897c:	d015      	beq.n	80089aa <_svfiprintf_r+0xf6>
 800897e:	4654      	mov	r4, sl
 8008980:	2000      	movs	r0, #0
 8008982:	f04f 0c0a 	mov.w	ip, #10
 8008986:	9a07      	ldr	r2, [sp, #28]
 8008988:	4621      	mov	r1, r4
 800898a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800898e:	3b30      	subs	r3, #48	; 0x30
 8008990:	2b09      	cmp	r3, #9
 8008992:	d94d      	bls.n	8008a30 <_svfiprintf_r+0x17c>
 8008994:	b1b0      	cbz	r0, 80089c4 <_svfiprintf_r+0x110>
 8008996:	9207      	str	r2, [sp, #28]
 8008998:	e014      	b.n	80089c4 <_svfiprintf_r+0x110>
 800899a:	eba0 0308 	sub.w	r3, r0, r8
 800899e:	fa09 f303 	lsl.w	r3, r9, r3
 80089a2:	4313      	orrs	r3, r2
 80089a4:	46a2      	mov	sl, r4
 80089a6:	9304      	str	r3, [sp, #16]
 80089a8:	e7d2      	b.n	8008950 <_svfiprintf_r+0x9c>
 80089aa:	9b03      	ldr	r3, [sp, #12]
 80089ac:	1d19      	adds	r1, r3, #4
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	9103      	str	r1, [sp, #12]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	bfbb      	ittet	lt
 80089b6:	425b      	neglt	r3, r3
 80089b8:	f042 0202 	orrlt.w	r2, r2, #2
 80089bc:	9307      	strge	r3, [sp, #28]
 80089be:	9307      	strlt	r3, [sp, #28]
 80089c0:	bfb8      	it	lt
 80089c2:	9204      	strlt	r2, [sp, #16]
 80089c4:	7823      	ldrb	r3, [r4, #0]
 80089c6:	2b2e      	cmp	r3, #46	; 0x2e
 80089c8:	d10c      	bne.n	80089e4 <_svfiprintf_r+0x130>
 80089ca:	7863      	ldrb	r3, [r4, #1]
 80089cc:	2b2a      	cmp	r3, #42	; 0x2a
 80089ce:	d134      	bne.n	8008a3a <_svfiprintf_r+0x186>
 80089d0:	9b03      	ldr	r3, [sp, #12]
 80089d2:	3402      	adds	r4, #2
 80089d4:	1d1a      	adds	r2, r3, #4
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	9203      	str	r2, [sp, #12]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	bfb8      	it	lt
 80089de:	f04f 33ff 	movlt.w	r3, #4294967295
 80089e2:	9305      	str	r3, [sp, #20]
 80089e4:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8008aa0 <_svfiprintf_r+0x1ec>
 80089e8:	2203      	movs	r2, #3
 80089ea:	4650      	mov	r0, sl
 80089ec:	7821      	ldrb	r1, [r4, #0]
 80089ee:	f000 fa1d 	bl	8008e2c <memchr>
 80089f2:	b138      	cbz	r0, 8008a04 <_svfiprintf_r+0x150>
 80089f4:	2240      	movs	r2, #64	; 0x40
 80089f6:	9b04      	ldr	r3, [sp, #16]
 80089f8:	eba0 000a 	sub.w	r0, r0, sl
 80089fc:	4082      	lsls	r2, r0
 80089fe:	4313      	orrs	r3, r2
 8008a00:	3401      	adds	r4, #1
 8008a02:	9304      	str	r3, [sp, #16]
 8008a04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a08:	2206      	movs	r2, #6
 8008a0a:	4826      	ldr	r0, [pc, #152]	; (8008aa4 <_svfiprintf_r+0x1f0>)
 8008a0c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008a10:	f000 fa0c 	bl	8008e2c <memchr>
 8008a14:	2800      	cmp	r0, #0
 8008a16:	d038      	beq.n	8008a8a <_svfiprintf_r+0x1d6>
 8008a18:	4b23      	ldr	r3, [pc, #140]	; (8008aa8 <_svfiprintf_r+0x1f4>)
 8008a1a:	bb1b      	cbnz	r3, 8008a64 <_svfiprintf_r+0x1b0>
 8008a1c:	9b03      	ldr	r3, [sp, #12]
 8008a1e:	3307      	adds	r3, #7
 8008a20:	f023 0307 	bic.w	r3, r3, #7
 8008a24:	3308      	adds	r3, #8
 8008a26:	9303      	str	r3, [sp, #12]
 8008a28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a2a:	4433      	add	r3, r6
 8008a2c:	9309      	str	r3, [sp, #36]	; 0x24
 8008a2e:	e768      	b.n	8008902 <_svfiprintf_r+0x4e>
 8008a30:	460c      	mov	r4, r1
 8008a32:	2001      	movs	r0, #1
 8008a34:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a38:	e7a6      	b.n	8008988 <_svfiprintf_r+0xd4>
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	f04f 0c0a 	mov.w	ip, #10
 8008a40:	4619      	mov	r1, r3
 8008a42:	3401      	adds	r4, #1
 8008a44:	9305      	str	r3, [sp, #20]
 8008a46:	4620      	mov	r0, r4
 8008a48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a4c:	3a30      	subs	r2, #48	; 0x30
 8008a4e:	2a09      	cmp	r2, #9
 8008a50:	d903      	bls.n	8008a5a <_svfiprintf_r+0x1a6>
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d0c6      	beq.n	80089e4 <_svfiprintf_r+0x130>
 8008a56:	9105      	str	r1, [sp, #20]
 8008a58:	e7c4      	b.n	80089e4 <_svfiprintf_r+0x130>
 8008a5a:	4604      	mov	r4, r0
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a62:	e7f0      	b.n	8008a46 <_svfiprintf_r+0x192>
 8008a64:	ab03      	add	r3, sp, #12
 8008a66:	9300      	str	r3, [sp, #0]
 8008a68:	462a      	mov	r2, r5
 8008a6a:	4638      	mov	r0, r7
 8008a6c:	4b0f      	ldr	r3, [pc, #60]	; (8008aac <_svfiprintf_r+0x1f8>)
 8008a6e:	a904      	add	r1, sp, #16
 8008a70:	f3af 8000 	nop.w
 8008a74:	1c42      	adds	r2, r0, #1
 8008a76:	4606      	mov	r6, r0
 8008a78:	d1d6      	bne.n	8008a28 <_svfiprintf_r+0x174>
 8008a7a:	89ab      	ldrh	r3, [r5, #12]
 8008a7c:	065b      	lsls	r3, r3, #25
 8008a7e:	f53f af2d 	bmi.w	80088dc <_svfiprintf_r+0x28>
 8008a82:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a84:	b01d      	add	sp, #116	; 0x74
 8008a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a8a:	ab03      	add	r3, sp, #12
 8008a8c:	9300      	str	r3, [sp, #0]
 8008a8e:	462a      	mov	r2, r5
 8008a90:	4638      	mov	r0, r7
 8008a92:	4b06      	ldr	r3, [pc, #24]	; (8008aac <_svfiprintf_r+0x1f8>)
 8008a94:	a904      	add	r1, sp, #16
 8008a96:	f000 f87d 	bl	8008b94 <_printf_i>
 8008a9a:	e7eb      	b.n	8008a74 <_svfiprintf_r+0x1c0>
 8008a9c:	0800937e 	.word	0x0800937e
 8008aa0:	08009384 	.word	0x08009384
 8008aa4:	08009388 	.word	0x08009388
 8008aa8:	00000000 	.word	0x00000000
 8008aac:	08008801 	.word	0x08008801

08008ab0 <_printf_common>:
 8008ab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ab4:	4616      	mov	r6, r2
 8008ab6:	4699      	mov	r9, r3
 8008ab8:	688a      	ldr	r2, [r1, #8]
 8008aba:	690b      	ldr	r3, [r1, #16]
 8008abc:	4607      	mov	r7, r0
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	bfb8      	it	lt
 8008ac2:	4613      	movlt	r3, r2
 8008ac4:	6033      	str	r3, [r6, #0]
 8008ac6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008aca:	460c      	mov	r4, r1
 8008acc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008ad0:	b10a      	cbz	r2, 8008ad6 <_printf_common+0x26>
 8008ad2:	3301      	adds	r3, #1
 8008ad4:	6033      	str	r3, [r6, #0]
 8008ad6:	6823      	ldr	r3, [r4, #0]
 8008ad8:	0699      	lsls	r1, r3, #26
 8008ada:	bf42      	ittt	mi
 8008adc:	6833      	ldrmi	r3, [r6, #0]
 8008ade:	3302      	addmi	r3, #2
 8008ae0:	6033      	strmi	r3, [r6, #0]
 8008ae2:	6825      	ldr	r5, [r4, #0]
 8008ae4:	f015 0506 	ands.w	r5, r5, #6
 8008ae8:	d106      	bne.n	8008af8 <_printf_common+0x48>
 8008aea:	f104 0a19 	add.w	sl, r4, #25
 8008aee:	68e3      	ldr	r3, [r4, #12]
 8008af0:	6832      	ldr	r2, [r6, #0]
 8008af2:	1a9b      	subs	r3, r3, r2
 8008af4:	42ab      	cmp	r3, r5
 8008af6:	dc2b      	bgt.n	8008b50 <_printf_common+0xa0>
 8008af8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008afc:	1e13      	subs	r3, r2, #0
 8008afe:	6822      	ldr	r2, [r4, #0]
 8008b00:	bf18      	it	ne
 8008b02:	2301      	movne	r3, #1
 8008b04:	0692      	lsls	r2, r2, #26
 8008b06:	d430      	bmi.n	8008b6a <_printf_common+0xba>
 8008b08:	4649      	mov	r1, r9
 8008b0a:	4638      	mov	r0, r7
 8008b0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008b10:	47c0      	blx	r8
 8008b12:	3001      	adds	r0, #1
 8008b14:	d023      	beq.n	8008b5e <_printf_common+0xae>
 8008b16:	6823      	ldr	r3, [r4, #0]
 8008b18:	6922      	ldr	r2, [r4, #16]
 8008b1a:	f003 0306 	and.w	r3, r3, #6
 8008b1e:	2b04      	cmp	r3, #4
 8008b20:	bf14      	ite	ne
 8008b22:	2500      	movne	r5, #0
 8008b24:	6833      	ldreq	r3, [r6, #0]
 8008b26:	f04f 0600 	mov.w	r6, #0
 8008b2a:	bf08      	it	eq
 8008b2c:	68e5      	ldreq	r5, [r4, #12]
 8008b2e:	f104 041a 	add.w	r4, r4, #26
 8008b32:	bf08      	it	eq
 8008b34:	1aed      	subeq	r5, r5, r3
 8008b36:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008b3a:	bf08      	it	eq
 8008b3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b40:	4293      	cmp	r3, r2
 8008b42:	bfc4      	itt	gt
 8008b44:	1a9b      	subgt	r3, r3, r2
 8008b46:	18ed      	addgt	r5, r5, r3
 8008b48:	42b5      	cmp	r5, r6
 8008b4a:	d11a      	bne.n	8008b82 <_printf_common+0xd2>
 8008b4c:	2000      	movs	r0, #0
 8008b4e:	e008      	b.n	8008b62 <_printf_common+0xb2>
 8008b50:	2301      	movs	r3, #1
 8008b52:	4652      	mov	r2, sl
 8008b54:	4649      	mov	r1, r9
 8008b56:	4638      	mov	r0, r7
 8008b58:	47c0      	blx	r8
 8008b5a:	3001      	adds	r0, #1
 8008b5c:	d103      	bne.n	8008b66 <_printf_common+0xb6>
 8008b5e:	f04f 30ff 	mov.w	r0, #4294967295
 8008b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b66:	3501      	adds	r5, #1
 8008b68:	e7c1      	b.n	8008aee <_printf_common+0x3e>
 8008b6a:	2030      	movs	r0, #48	; 0x30
 8008b6c:	18e1      	adds	r1, r4, r3
 8008b6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008b72:	1c5a      	adds	r2, r3, #1
 8008b74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008b78:	4422      	add	r2, r4
 8008b7a:	3302      	adds	r3, #2
 8008b7c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008b80:	e7c2      	b.n	8008b08 <_printf_common+0x58>
 8008b82:	2301      	movs	r3, #1
 8008b84:	4622      	mov	r2, r4
 8008b86:	4649      	mov	r1, r9
 8008b88:	4638      	mov	r0, r7
 8008b8a:	47c0      	blx	r8
 8008b8c:	3001      	adds	r0, #1
 8008b8e:	d0e6      	beq.n	8008b5e <_printf_common+0xae>
 8008b90:	3601      	adds	r6, #1
 8008b92:	e7d9      	b.n	8008b48 <_printf_common+0x98>

08008b94 <_printf_i>:
 8008b94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b98:	7e0f      	ldrb	r7, [r1, #24]
 8008b9a:	4691      	mov	r9, r2
 8008b9c:	2f78      	cmp	r7, #120	; 0x78
 8008b9e:	4680      	mov	r8, r0
 8008ba0:	460c      	mov	r4, r1
 8008ba2:	469a      	mov	sl, r3
 8008ba4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008ba6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008baa:	d807      	bhi.n	8008bbc <_printf_i+0x28>
 8008bac:	2f62      	cmp	r7, #98	; 0x62
 8008bae:	d80a      	bhi.n	8008bc6 <_printf_i+0x32>
 8008bb0:	2f00      	cmp	r7, #0
 8008bb2:	f000 80d5 	beq.w	8008d60 <_printf_i+0x1cc>
 8008bb6:	2f58      	cmp	r7, #88	; 0x58
 8008bb8:	f000 80c1 	beq.w	8008d3e <_printf_i+0x1aa>
 8008bbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008bc0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008bc4:	e03a      	b.n	8008c3c <_printf_i+0xa8>
 8008bc6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008bca:	2b15      	cmp	r3, #21
 8008bcc:	d8f6      	bhi.n	8008bbc <_printf_i+0x28>
 8008bce:	a101      	add	r1, pc, #4	; (adr r1, 8008bd4 <_printf_i+0x40>)
 8008bd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008bd4:	08008c2d 	.word	0x08008c2d
 8008bd8:	08008c41 	.word	0x08008c41
 8008bdc:	08008bbd 	.word	0x08008bbd
 8008be0:	08008bbd 	.word	0x08008bbd
 8008be4:	08008bbd 	.word	0x08008bbd
 8008be8:	08008bbd 	.word	0x08008bbd
 8008bec:	08008c41 	.word	0x08008c41
 8008bf0:	08008bbd 	.word	0x08008bbd
 8008bf4:	08008bbd 	.word	0x08008bbd
 8008bf8:	08008bbd 	.word	0x08008bbd
 8008bfc:	08008bbd 	.word	0x08008bbd
 8008c00:	08008d47 	.word	0x08008d47
 8008c04:	08008c6d 	.word	0x08008c6d
 8008c08:	08008d01 	.word	0x08008d01
 8008c0c:	08008bbd 	.word	0x08008bbd
 8008c10:	08008bbd 	.word	0x08008bbd
 8008c14:	08008d69 	.word	0x08008d69
 8008c18:	08008bbd 	.word	0x08008bbd
 8008c1c:	08008c6d 	.word	0x08008c6d
 8008c20:	08008bbd 	.word	0x08008bbd
 8008c24:	08008bbd 	.word	0x08008bbd
 8008c28:	08008d09 	.word	0x08008d09
 8008c2c:	682b      	ldr	r3, [r5, #0]
 8008c2e:	1d1a      	adds	r2, r3, #4
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	602a      	str	r2, [r5, #0]
 8008c34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	e0a0      	b.n	8008d82 <_printf_i+0x1ee>
 8008c40:	6820      	ldr	r0, [r4, #0]
 8008c42:	682b      	ldr	r3, [r5, #0]
 8008c44:	0607      	lsls	r7, r0, #24
 8008c46:	f103 0104 	add.w	r1, r3, #4
 8008c4a:	6029      	str	r1, [r5, #0]
 8008c4c:	d501      	bpl.n	8008c52 <_printf_i+0xbe>
 8008c4e:	681e      	ldr	r6, [r3, #0]
 8008c50:	e003      	b.n	8008c5a <_printf_i+0xc6>
 8008c52:	0646      	lsls	r6, r0, #25
 8008c54:	d5fb      	bpl.n	8008c4e <_printf_i+0xba>
 8008c56:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008c5a:	2e00      	cmp	r6, #0
 8008c5c:	da03      	bge.n	8008c66 <_printf_i+0xd2>
 8008c5e:	232d      	movs	r3, #45	; 0x2d
 8008c60:	4276      	negs	r6, r6
 8008c62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c66:	230a      	movs	r3, #10
 8008c68:	4859      	ldr	r0, [pc, #356]	; (8008dd0 <_printf_i+0x23c>)
 8008c6a:	e012      	b.n	8008c92 <_printf_i+0xfe>
 8008c6c:	682b      	ldr	r3, [r5, #0]
 8008c6e:	6820      	ldr	r0, [r4, #0]
 8008c70:	1d19      	adds	r1, r3, #4
 8008c72:	6029      	str	r1, [r5, #0]
 8008c74:	0605      	lsls	r5, r0, #24
 8008c76:	d501      	bpl.n	8008c7c <_printf_i+0xe8>
 8008c78:	681e      	ldr	r6, [r3, #0]
 8008c7a:	e002      	b.n	8008c82 <_printf_i+0xee>
 8008c7c:	0641      	lsls	r1, r0, #25
 8008c7e:	d5fb      	bpl.n	8008c78 <_printf_i+0xe4>
 8008c80:	881e      	ldrh	r6, [r3, #0]
 8008c82:	2f6f      	cmp	r7, #111	; 0x6f
 8008c84:	bf0c      	ite	eq
 8008c86:	2308      	moveq	r3, #8
 8008c88:	230a      	movne	r3, #10
 8008c8a:	4851      	ldr	r0, [pc, #324]	; (8008dd0 <_printf_i+0x23c>)
 8008c8c:	2100      	movs	r1, #0
 8008c8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008c92:	6865      	ldr	r5, [r4, #4]
 8008c94:	2d00      	cmp	r5, #0
 8008c96:	bfa8      	it	ge
 8008c98:	6821      	ldrge	r1, [r4, #0]
 8008c9a:	60a5      	str	r5, [r4, #8]
 8008c9c:	bfa4      	itt	ge
 8008c9e:	f021 0104 	bicge.w	r1, r1, #4
 8008ca2:	6021      	strge	r1, [r4, #0]
 8008ca4:	b90e      	cbnz	r6, 8008caa <_printf_i+0x116>
 8008ca6:	2d00      	cmp	r5, #0
 8008ca8:	d04b      	beq.n	8008d42 <_printf_i+0x1ae>
 8008caa:	4615      	mov	r5, r2
 8008cac:	fbb6 f1f3 	udiv	r1, r6, r3
 8008cb0:	fb03 6711 	mls	r7, r3, r1, r6
 8008cb4:	5dc7      	ldrb	r7, [r0, r7]
 8008cb6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008cba:	4637      	mov	r7, r6
 8008cbc:	42bb      	cmp	r3, r7
 8008cbe:	460e      	mov	r6, r1
 8008cc0:	d9f4      	bls.n	8008cac <_printf_i+0x118>
 8008cc2:	2b08      	cmp	r3, #8
 8008cc4:	d10b      	bne.n	8008cde <_printf_i+0x14a>
 8008cc6:	6823      	ldr	r3, [r4, #0]
 8008cc8:	07de      	lsls	r6, r3, #31
 8008cca:	d508      	bpl.n	8008cde <_printf_i+0x14a>
 8008ccc:	6923      	ldr	r3, [r4, #16]
 8008cce:	6861      	ldr	r1, [r4, #4]
 8008cd0:	4299      	cmp	r1, r3
 8008cd2:	bfde      	ittt	le
 8008cd4:	2330      	movle	r3, #48	; 0x30
 8008cd6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008cda:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008cde:	1b52      	subs	r2, r2, r5
 8008ce0:	6122      	str	r2, [r4, #16]
 8008ce2:	464b      	mov	r3, r9
 8008ce4:	4621      	mov	r1, r4
 8008ce6:	4640      	mov	r0, r8
 8008ce8:	f8cd a000 	str.w	sl, [sp]
 8008cec:	aa03      	add	r2, sp, #12
 8008cee:	f7ff fedf 	bl	8008ab0 <_printf_common>
 8008cf2:	3001      	adds	r0, #1
 8008cf4:	d14a      	bne.n	8008d8c <_printf_i+0x1f8>
 8008cf6:	f04f 30ff 	mov.w	r0, #4294967295
 8008cfa:	b004      	add	sp, #16
 8008cfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d00:	6823      	ldr	r3, [r4, #0]
 8008d02:	f043 0320 	orr.w	r3, r3, #32
 8008d06:	6023      	str	r3, [r4, #0]
 8008d08:	2778      	movs	r7, #120	; 0x78
 8008d0a:	4832      	ldr	r0, [pc, #200]	; (8008dd4 <_printf_i+0x240>)
 8008d0c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008d10:	6823      	ldr	r3, [r4, #0]
 8008d12:	6829      	ldr	r1, [r5, #0]
 8008d14:	061f      	lsls	r7, r3, #24
 8008d16:	f851 6b04 	ldr.w	r6, [r1], #4
 8008d1a:	d402      	bmi.n	8008d22 <_printf_i+0x18e>
 8008d1c:	065f      	lsls	r7, r3, #25
 8008d1e:	bf48      	it	mi
 8008d20:	b2b6      	uxthmi	r6, r6
 8008d22:	07df      	lsls	r7, r3, #31
 8008d24:	bf48      	it	mi
 8008d26:	f043 0320 	orrmi.w	r3, r3, #32
 8008d2a:	6029      	str	r1, [r5, #0]
 8008d2c:	bf48      	it	mi
 8008d2e:	6023      	strmi	r3, [r4, #0]
 8008d30:	b91e      	cbnz	r6, 8008d3a <_printf_i+0x1a6>
 8008d32:	6823      	ldr	r3, [r4, #0]
 8008d34:	f023 0320 	bic.w	r3, r3, #32
 8008d38:	6023      	str	r3, [r4, #0]
 8008d3a:	2310      	movs	r3, #16
 8008d3c:	e7a6      	b.n	8008c8c <_printf_i+0xf8>
 8008d3e:	4824      	ldr	r0, [pc, #144]	; (8008dd0 <_printf_i+0x23c>)
 8008d40:	e7e4      	b.n	8008d0c <_printf_i+0x178>
 8008d42:	4615      	mov	r5, r2
 8008d44:	e7bd      	b.n	8008cc2 <_printf_i+0x12e>
 8008d46:	682b      	ldr	r3, [r5, #0]
 8008d48:	6826      	ldr	r6, [r4, #0]
 8008d4a:	1d18      	adds	r0, r3, #4
 8008d4c:	6961      	ldr	r1, [r4, #20]
 8008d4e:	6028      	str	r0, [r5, #0]
 8008d50:	0635      	lsls	r5, r6, #24
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	d501      	bpl.n	8008d5a <_printf_i+0x1c6>
 8008d56:	6019      	str	r1, [r3, #0]
 8008d58:	e002      	b.n	8008d60 <_printf_i+0x1cc>
 8008d5a:	0670      	lsls	r0, r6, #25
 8008d5c:	d5fb      	bpl.n	8008d56 <_printf_i+0x1c2>
 8008d5e:	8019      	strh	r1, [r3, #0]
 8008d60:	2300      	movs	r3, #0
 8008d62:	4615      	mov	r5, r2
 8008d64:	6123      	str	r3, [r4, #16]
 8008d66:	e7bc      	b.n	8008ce2 <_printf_i+0x14e>
 8008d68:	682b      	ldr	r3, [r5, #0]
 8008d6a:	2100      	movs	r1, #0
 8008d6c:	1d1a      	adds	r2, r3, #4
 8008d6e:	602a      	str	r2, [r5, #0]
 8008d70:	681d      	ldr	r5, [r3, #0]
 8008d72:	6862      	ldr	r2, [r4, #4]
 8008d74:	4628      	mov	r0, r5
 8008d76:	f000 f859 	bl	8008e2c <memchr>
 8008d7a:	b108      	cbz	r0, 8008d80 <_printf_i+0x1ec>
 8008d7c:	1b40      	subs	r0, r0, r5
 8008d7e:	6060      	str	r0, [r4, #4]
 8008d80:	6863      	ldr	r3, [r4, #4]
 8008d82:	6123      	str	r3, [r4, #16]
 8008d84:	2300      	movs	r3, #0
 8008d86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d8a:	e7aa      	b.n	8008ce2 <_printf_i+0x14e>
 8008d8c:	462a      	mov	r2, r5
 8008d8e:	4649      	mov	r1, r9
 8008d90:	4640      	mov	r0, r8
 8008d92:	6923      	ldr	r3, [r4, #16]
 8008d94:	47d0      	blx	sl
 8008d96:	3001      	adds	r0, #1
 8008d98:	d0ad      	beq.n	8008cf6 <_printf_i+0x162>
 8008d9a:	6823      	ldr	r3, [r4, #0]
 8008d9c:	079b      	lsls	r3, r3, #30
 8008d9e:	d413      	bmi.n	8008dc8 <_printf_i+0x234>
 8008da0:	68e0      	ldr	r0, [r4, #12]
 8008da2:	9b03      	ldr	r3, [sp, #12]
 8008da4:	4298      	cmp	r0, r3
 8008da6:	bfb8      	it	lt
 8008da8:	4618      	movlt	r0, r3
 8008daa:	e7a6      	b.n	8008cfa <_printf_i+0x166>
 8008dac:	2301      	movs	r3, #1
 8008dae:	4632      	mov	r2, r6
 8008db0:	4649      	mov	r1, r9
 8008db2:	4640      	mov	r0, r8
 8008db4:	47d0      	blx	sl
 8008db6:	3001      	adds	r0, #1
 8008db8:	d09d      	beq.n	8008cf6 <_printf_i+0x162>
 8008dba:	3501      	adds	r5, #1
 8008dbc:	68e3      	ldr	r3, [r4, #12]
 8008dbe:	9903      	ldr	r1, [sp, #12]
 8008dc0:	1a5b      	subs	r3, r3, r1
 8008dc2:	42ab      	cmp	r3, r5
 8008dc4:	dcf2      	bgt.n	8008dac <_printf_i+0x218>
 8008dc6:	e7eb      	b.n	8008da0 <_printf_i+0x20c>
 8008dc8:	2500      	movs	r5, #0
 8008dca:	f104 0619 	add.w	r6, r4, #25
 8008dce:	e7f5      	b.n	8008dbc <_printf_i+0x228>
 8008dd0:	0800938f 	.word	0x0800938f
 8008dd4:	080093a0 	.word	0x080093a0

08008dd8 <memmove>:
 8008dd8:	4288      	cmp	r0, r1
 8008dda:	b510      	push	{r4, lr}
 8008ddc:	eb01 0402 	add.w	r4, r1, r2
 8008de0:	d902      	bls.n	8008de8 <memmove+0x10>
 8008de2:	4284      	cmp	r4, r0
 8008de4:	4623      	mov	r3, r4
 8008de6:	d807      	bhi.n	8008df8 <memmove+0x20>
 8008de8:	1e43      	subs	r3, r0, #1
 8008dea:	42a1      	cmp	r1, r4
 8008dec:	d008      	beq.n	8008e00 <memmove+0x28>
 8008dee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008df2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008df6:	e7f8      	b.n	8008dea <memmove+0x12>
 8008df8:	4601      	mov	r1, r0
 8008dfa:	4402      	add	r2, r0
 8008dfc:	428a      	cmp	r2, r1
 8008dfe:	d100      	bne.n	8008e02 <memmove+0x2a>
 8008e00:	bd10      	pop	{r4, pc}
 8008e02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008e06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008e0a:	e7f7      	b.n	8008dfc <memmove+0x24>

08008e0c <_sbrk_r>:
 8008e0c:	b538      	push	{r3, r4, r5, lr}
 8008e0e:	2300      	movs	r3, #0
 8008e10:	4d05      	ldr	r5, [pc, #20]	; (8008e28 <_sbrk_r+0x1c>)
 8008e12:	4604      	mov	r4, r0
 8008e14:	4608      	mov	r0, r1
 8008e16:	602b      	str	r3, [r5, #0]
 8008e18:	f7f7 fcf6 	bl	8000808 <_sbrk>
 8008e1c:	1c43      	adds	r3, r0, #1
 8008e1e:	d102      	bne.n	8008e26 <_sbrk_r+0x1a>
 8008e20:	682b      	ldr	r3, [r5, #0]
 8008e22:	b103      	cbz	r3, 8008e26 <_sbrk_r+0x1a>
 8008e24:	6023      	str	r3, [r4, #0]
 8008e26:	bd38      	pop	{r3, r4, r5, pc}
 8008e28:	20001558 	.word	0x20001558

08008e2c <memchr>:
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	b510      	push	{r4, lr}
 8008e30:	b2c9      	uxtb	r1, r1
 8008e32:	4402      	add	r2, r0
 8008e34:	4293      	cmp	r3, r2
 8008e36:	4618      	mov	r0, r3
 8008e38:	d101      	bne.n	8008e3e <memchr+0x12>
 8008e3a:	2000      	movs	r0, #0
 8008e3c:	e003      	b.n	8008e46 <memchr+0x1a>
 8008e3e:	7804      	ldrb	r4, [r0, #0]
 8008e40:	3301      	adds	r3, #1
 8008e42:	428c      	cmp	r4, r1
 8008e44:	d1f6      	bne.n	8008e34 <memchr+0x8>
 8008e46:	bd10      	pop	{r4, pc}

08008e48 <memcpy>:
 8008e48:	440a      	add	r2, r1
 8008e4a:	4291      	cmp	r1, r2
 8008e4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008e50:	d100      	bne.n	8008e54 <memcpy+0xc>
 8008e52:	4770      	bx	lr
 8008e54:	b510      	push	{r4, lr}
 8008e56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e5a:	4291      	cmp	r1, r2
 8008e5c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e60:	d1f9      	bne.n	8008e56 <memcpy+0xe>
 8008e62:	bd10      	pop	{r4, pc}

08008e64 <_realloc_r>:
 8008e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e68:	4680      	mov	r8, r0
 8008e6a:	4614      	mov	r4, r2
 8008e6c:	460e      	mov	r6, r1
 8008e6e:	b921      	cbnz	r1, 8008e7a <_realloc_r+0x16>
 8008e70:	4611      	mov	r1, r2
 8008e72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e76:	f7ff bc37 	b.w	80086e8 <_malloc_r>
 8008e7a:	b92a      	cbnz	r2, 8008e88 <_realloc_r+0x24>
 8008e7c:	f7ff fbcc 	bl	8008618 <_free_r>
 8008e80:	4625      	mov	r5, r4
 8008e82:	4628      	mov	r0, r5
 8008e84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e88:	f000 f81b 	bl	8008ec2 <_malloc_usable_size_r>
 8008e8c:	4284      	cmp	r4, r0
 8008e8e:	4607      	mov	r7, r0
 8008e90:	d802      	bhi.n	8008e98 <_realloc_r+0x34>
 8008e92:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008e96:	d812      	bhi.n	8008ebe <_realloc_r+0x5a>
 8008e98:	4621      	mov	r1, r4
 8008e9a:	4640      	mov	r0, r8
 8008e9c:	f7ff fc24 	bl	80086e8 <_malloc_r>
 8008ea0:	4605      	mov	r5, r0
 8008ea2:	2800      	cmp	r0, #0
 8008ea4:	d0ed      	beq.n	8008e82 <_realloc_r+0x1e>
 8008ea6:	42bc      	cmp	r4, r7
 8008ea8:	4622      	mov	r2, r4
 8008eaa:	4631      	mov	r1, r6
 8008eac:	bf28      	it	cs
 8008eae:	463a      	movcs	r2, r7
 8008eb0:	f7ff ffca 	bl	8008e48 <memcpy>
 8008eb4:	4631      	mov	r1, r6
 8008eb6:	4640      	mov	r0, r8
 8008eb8:	f7ff fbae 	bl	8008618 <_free_r>
 8008ebc:	e7e1      	b.n	8008e82 <_realloc_r+0x1e>
 8008ebe:	4635      	mov	r5, r6
 8008ec0:	e7df      	b.n	8008e82 <_realloc_r+0x1e>

08008ec2 <_malloc_usable_size_r>:
 8008ec2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ec6:	1f18      	subs	r0, r3, #4
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	bfbc      	itt	lt
 8008ecc:	580b      	ldrlt	r3, [r1, r0]
 8008ece:	18c0      	addlt	r0, r0, r3
 8008ed0:	4770      	bx	lr
	...

08008ed4 <_init>:
 8008ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ed6:	bf00      	nop
 8008ed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008eda:	bc08      	pop	{r3}
 8008edc:	469e      	mov	lr, r3
 8008ede:	4770      	bx	lr

08008ee0 <_fini>:
 8008ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ee2:	bf00      	nop
 8008ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ee6:	bc08      	pop	{r3}
 8008ee8:	469e      	mov	lr, r3
 8008eea:	4770      	bx	lr
